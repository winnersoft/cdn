/**
 * @description	미결
 * @param		{Number}	pValue
 * @param		{Number}	pValue1
 * @returns		{Undefined}
 * @example		미결
 */
function alert2(pValue, pValue1) {
	if (navigator.userLanguage == "ko") {
		alert(pValue);
	} else {
		alert(pValue1);
	}
};

/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{Boolean}
 * @example		미결
 */
function CheckNumeric(pStr) {
	var wStr = "" + pStr;
	var Pos = 0;
	var wChar = ' ';
	var wHiponCount = 0;
	var wDotCount = 0;

	for (Pos = 0; Pos < wStr.length; ++Pos) {
		wChar = wStr.charAt(Pos);
		if (wChar < '0' || wChar > '9')
			continue;

		if (wChar == ".") {
			wDotCount++;
			if (wDotCount > 1) {
				return false;
			}
		}
		if (wChar == "-") {
			wHiponCount++;
			if (wHiponCount > 1) {
				return false;
			} else if (wHiponCount == 1 && wDotCount > 0) {
				return false;
			}
		}
	}
	return true;
};

/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{Boolean}
 * @example		미결
 */
function CheckAlpabetic(pStr) {
	var wStr = "" + pStr;
	var Pos = 0;
	var wChar = ' ';

	for (Pos = 0; Pos < wStr.length; ++Pos) {
		wChar = wStr.charAt(Pos);
		if ((wChar < 'A' || wChar > 'Z') && (wChar < 'a' || wChar > 'z'))
			return false;
	}
	return true;
};

/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{Boolean}
 * @example		미결
 */
function CheckDate(pStr) {
	var wStr = pStr;
	
//	var wArr = wStr.split("-"); // 먼저 하이폰 문자열을 없엔다
//	wStr = wArr.join("");
//	
//	for (var i = 0; i < wStr.length; ++i) { // 숫자만 가능하다
//		if (wStr[i] < "0" || (wStr[i]) > "9")
//			return false;
//	}
	
	//체크할 값이 문자열이 아닌 경우 문자열로 변환
	wStr = (typeof wStr == "string") ? wStr : ("" + wStr);
	//일반적으로 날짜 표시형식으로 사용되는 '.', '/', '-' 제거
	wStr = wStr.replace(/[-./]/g, "");
	
	// 길이가 8자 이어야 한다
	if( wStr.length != 8 )		return false;
	
	//숫자만 가능
	if( !/^[0-9]+$/.test(wStr) )return false;

	//년도 체크
	var wYY = parseFloat(1 * wStr.substring(0, 4));
	if( wYY < 1900 )			return false;
	
	//월 체크
	var wMM = parseFloat(1 * wStr.substring(4, 6));
	if( wMM < 1 || wMM > 12 )	return false;
	
	//일자범위 체크
	var wDD = parseFloat(1 * wStr.substring(6, 8));
	
	if( wDD < 1 || wDD > 31 )	return false;
	
	switch (wMM) {
	case 4:
	case 6:
	case 9:
	case 11:
		if( wDD > 30 )			return false;
		break;
	case 2:
		if( wYY % 4 == 0 && wDD > 29 )	return false;	//윤달 체크
		if( wYY % 4 != 0 && wDD > 28 )	return false;
		break;
	}
	
	return true;
};

/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{Boolean}
 * @example		미결
 */
function CheckMonth(pStr) {
	var wStr = pStr;
	
//	var wArr = wStr.split("-"); // 먼저 하이폰 문자열을 없엔다
//	wStr = wArr.join("");
//	
//	for(var i = 0; i < wStr.length; ++i) { // 숫자만 가능하다
//		if (wStr[i] < "0" || (wStr[i]) > "9")
//			return false;
//	}
	
	//체크할 값이 문자열이 아닌 경우 문자열로 변환
	wStr = (typeof wStr == "string") ? wStr : ("" + wStr);
	//일반적으로 날짜 표시형식으로 사용되는 '.', '/', '-' 제거
	wStr = wStr.replace(/[-./]/g, "");
	
	//길이가 6자 이어야 한다
	if( wStr.length != 6 )		return false;
	
	//숫자만 가능
	if( !/^[0-9]+$/.test(wStr) )	return false;
	
	//년도 체크
	var wYY = parseFloat(1 * wStr.substring(0, 4));
	if( wYY < 1900 )			return false;
	
	//월 체크
	var wMM = parseFloat(1 * wStr.substring(4, 6));
	if( wMM < 1 || wMM > 12 )	return false;
	
	return true;
};

/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{Boolean}
 * @example		미결
 */
function CheckYear(pStr) {
	var str = pStr || "0";
	
	if( parseInt(str) < 1997 || parseInt(str) > 2020 )
		return false;
	
	return true;
};
/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{Boolean}
 * @example		미결
 */
function CheckTime(pStr) {
	var wStr = pStr;

	var wArr = wStr.split(":"); // 먼저 콜론 문자열을 없엔다
	wStr = wArr.join("");

	if (wStr.length != 4) // 길이가 4자 이어야 한다
		return false;

	for (var i = 0; i < wStr.length; ++i) { // 숫자만 가능하다
		if (wStr[i] < "0" || (wStr[i]) > "9")
			return false;
	}

	var wHH = parseFloat(1 * wStr.substring(0, 2));
	if (wHH < 0 || wHH > 23) // 시간체크
		return false;

	var wMN = parseFloat(1 * wStr.substring(2, 4));
	if (wMN < 0 || wMN > 59) // 분체크
		return false;
	return true;
};
/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{String}
 * @example		미결
 */
// 한글은 입력할 수 없습니다 를 표시하기 위해
function hasHangul(pStr) {
	var pattern = /^[a-zA-Z0-9\-_.@\s%`~!#$\^&\*\(\)\+='",:;\|?\/<>\[\]\{\}\\]+$/;
	return !pattern.test(pStr);
}

/**
 * @description	미결
 * @param 		{number}	pStr
 * @return		{Object}
 * @example		미결
 */
function isAlNum(pStr) {
	var pattern = /^[A-Za-z0-9]+$/;
	return pattern.test(pStr);
}
/**
 * @description	미결
 * @param 		{String}	pStr
 * @return		{Object}
 * @example		미결
 */
function isAlpha(pStr) {
	var pattern = /^[a-zA-Z]+$/;
	return pattern.test(pStr);
}
/**
 * @description	미결
 * @param 		{number}	pStr
 * @return		{Object}
 * @example		미결
 */
function isDigit(pStr) {
	var pattern = /^[0-9]+$/;
	return pattern.test(pStr);
}
/**
 * @description	미결
 * @param 		{Object}	pStr
 * @return		{Object}
 * @example		미결
 */
function IsDigit(pStr) {
	return isDigit(pStr);
}
/**
 * @description	미결
 * @param 		{String}	varObj
 * @return		{Object}
 * @example		미결
 */
function isValidObject(varObj) {
	return (varObj != null && typeof varObj != "undefined");
	
//	if (typeof varObj != "undefined") {
//		return true;
//	}
//	return true;
}

/**
 * @description	미결
 * @param		{String}	s
 * @returns		{Boolean}
 * @example		미결
 */
function IsResidentNumber(s){
	var wStr = s;
	
//	wStr = wStr.split("-").join("").split(" ").join("");
	
	//입력 파라메터가 문자열이 아닌 경우 문자열로 형변환
	wStr = (typeof wStr == "string") ? wStr : ("" + wStr);
	//주민등록번호에서 '-'을 제거
	wStr = wStr.replace(/[-]/, "");

	//자리수 체크
	if( wStr.length != 13 )		return false;
	//'-'을 지웠으므로 숫자만 남아있어야 함
	if( /^[0-9].$/.test(wStr) )	return false;
	
	//주민등록번호 검사
	var target1 = parseInt(wStr.substring(0, 1)) * 2;
	target1 = target1 + parseInt(wStr.substring(1, 2)) * 3;
	target1 = target1 + parseInt(wStr.substring(2, 3)) * 4;
	target1 = target1 + parseInt(wStr.substring(3, 4)) * 5;
	target1 = target1 + parseInt(wStr.substring(4, 5)) * 6;
	target1 = target1 + parseInt(wStr.substring(5, 6)) * 7;
	target1 = target1 + parseInt(wStr.substring(6, 7)) * 8;
	target1 = target1 + parseInt(wStr.substring(7, 8)) * 9;
	target1 = target1 + parseInt(wStr.substring(8, 9)) * 2;
	target1 = target1 + parseInt(wStr.substring(9, 10)) * 3;
	target1 = target1 + parseInt(wStr.substring(10, 11)) * 4;
	target1 = target1 + parseInt(wStr.substring(11, 12)) * 5;

	var target2 = parseInt(target1 / 11);
	var target3 = target2 * 11;

	target1 = target1 - target3;
	target1 = 11 - target1;
	target1 = target1 % 10;
	
	//검사결과 체크
	if( parseInt(wStr.substring(12)) != target1 )
		return false;
	
	return true;
};

/**
 * @description	미결
 * @param		{String}	s
 * @returns		{Boolean}
 * @example		미결
 */
function IsTaxNumber(s) {
//	s = s.replaceWord("-", "");
//	s = s.replaceWord(" ", "");
//
//	if (!CheckNumeric(s))
//		return false;
//	if (s.length != 10)
//		return false;
	
	var wStr = s;
	
	//입력 파라메터가 문자열이 아닌 경우 문자열로 형변환
	wStr = (typeof wStr == "string") ? wStr : ("" + wStr);
	//'-'과 공백 문자 제거
	wStr = wStr.replace(/[- ]/g, "");
	
	//'-'과 공백 문자를 지웠으므로 숫자만 남아있어야 함
	if( /^[0-9]+$/.test(wStr) )	return false;
	//자리수 체크
	if( wStr.length != 10 )		return false;
	
	//사업자등록번호 검사
	var v = (1 * (parseInt(wStr.substring(0, 1)))) % 10;
	v = v + (3 * (parseInt(wStr.substring(1, 2)))) % 10;
	v = v + (7 * (parseInt(wStr.substring(2, 3)))) % 10;
	v = v + (1 * (parseInt(wStr.substring(3, 4)))) % 10;
	v = v + (3 * (parseInt(wStr.substring(4, 5)))) % 10;
	v = v + (7 * (parseInt(wStr.substring(5, 6)))) % 10;
	v = v + (1 * (parseInt(wStr.substring(6, 7)))) % 10;
	v = v + (3 * (parseInt(wStr.substring(7, 8)))) % 10;
	v = v + parseInt((5 * (parseInt(wStr.substring(8, 9)))) / 10);
	v = v + (5 * (parseInt(wStr.substring(8, 9)))) % 10;
	v = parseInt(v / 10) * 10 - (v % 10);
	v = v % 10;

	if( parseInt(wStr.substring(9, 10)) != v )
		return false;
	
	return true;
};
/**
 * @description	미결
 * @param		{Number}	pKeyCode
 * @returns		{Boolean}
 * @example		미결
 */
function checkKeyAbs(pKeyCode) {

	if (pKeyCode == 13)
		return true; // 엔터
	if (pKeyCode >= 48 && pKeyCode <= 57)
		return true; // 키보드 상단 숫자
	if (pKeyCode >= 96 && pKeyCode <= 105)
		return true; // 숫자키보드 숫자
	if (pKeyCode == 189 || pKeyCode == 189)
		return true; // 마이너스
	if (pKeyCode == 107)
		return true; // 플러스
	if (pKeyCode == 16)
		return true; // 쉬프트
	if (pKeyCode == 8)
		return true; // 백스페이스
	if (pKeyCode == 37)
		return true; // 왼쪽방향키
	if (pKeyCode == 39)
		return true; // 오른쪽방향키
	if (pKeyCode == 46)
		return true; // Del키
	if (pKeyCode == 144)
		return true; // NumLock키

	return false;
};

/**
 * @description	미결
 * @param		{Number}	pKeyCode
 * @returns		{Boolean}
 * @example		미결
 */
function checkKeyInt(pKeyCode) {

	if (pKeyCode == 13)
		return true; // 엔터
	if (pKeyCode >= 48 && pKeyCode <= 57)
		return true; // 키보드 상단 숫자
	// if (pKeyCode>=96 && pKeyCode<=105) return true; //숫자키보드 숫자
	if (pKeyCode == 189 || pKeyCode == 189)
		return true; // 마이너스
	if (pKeyCode == 107)
		return true; // 플러스
	if (pKeyCode == 16)
		return true; // 쉬프트
	if (pKeyCode == 8)
		return true; // 백스페이스
	if (pKeyCode == 37)
		return true; // 왼쪽방향키
	if (pKeyCode == 39)
		return true; // 오른쪽방향키
	if (pKeyCode == 46)
		return true; // Del키
	if (pKeyCode == 144)
		return true; // NumLock키

	return false;
};

/**
 * @description	미결
 * @param		{Number}	pKeyCode
 * @returns		{Boolean}
 * @example		미결
 */
function checkKeyFloat(pKeyCode) {

	if (pKeyCode == 13)
		return true; // 엔터
	if (pKeyCode >= 48 && pKeyCode <= 57)
		return true; // 키보드 상단 숫자
	if (pKeyCode >= 96 && pKeyCode <= 105)
		return true; // 숫자키보드 숫자
	if (pKeyCode == 189 || pKeyCode == 189)
		return true; // 마이너스
	if (pKeyCode == 107)
		return true; // 플러스
	if (pKeyCode == 190)
		return true; // 점
	if (pKeyCode == 16)
		return true; // 쉬프트
	if (pKeyCode == 8)
		return true; // 백스페이스
	if (pKeyCode == 37)
		return true; // 왼쪽방향키
	if (pKeyCode == 39)
		return true; // 오른쪽방향키
	if (pKeyCode == 46)
		return true; // Del키
	if (pKeyCode == 144)
		return true; // NumLock키
	// if (pKeyCode==188 return true; //콤마
	
	return false;
};

/**
 * @description	미결
 * @param		{String}	pString
 * @param		{Number}	pLength
 * @returns		{String}
 * @example		미결
 */
function left(pString, pLength) {
	var wString = pString;
	var wReturn = wString.substring(0, pLength);
	
	wString = null;
	
	return wReturn;
};

/**
 * @description	미결
 * @param		{String}	pString
 * @param		{Number}	pLength
 * @returns		{String}
 * @example		미결
 */
function right(pString, pLength) {
	var wString = pString;
	var wlength = wString.length;
	var wReturn = wString.substring(wlength - pLength, wlength);
	
	wString = null;
	
	return wReturn;
};
/**
 * @description	미결
 * @param 		{String}	strString
 * @param		{String}	nIndex
 * @param		{number}	nSize
 * @return		{Object}
 * @example		미결
 */
function midB(strString, nIndex, nSize) { // nIndex는 1부터 시작
	var ndx = 0;
	var lastNdx = nIndex + nSize;
	var wReturn = "";

	var ndx0 = 0;
	var ndx1 = strString.length;

	for (var i = 0; i < this.length; i++) {
		ndx += (this.charCodeAt(i) > 127 ? 2 : 1);

		// 처음 시작점을 만나는 곳의 시작 인덱스 기록
		if (ndx0 == 0 && ndx >= nIndex)
			ndx0 = ndx;
		// 끝 인덱스를 벗어났으면 빠져나가고
		if (ndx >= lastNdx)
			break;

		// 이미 시작되었고 빠져 나가지 않은 상태이면 끝 인덱스 계속 기록
		if (ndx0 > 0)
			ndx1 = ndx;
	}

	return strString.substring(ndx0, ndx1);
}

/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{String}
 * @example		미결
 */
function trim(pStr) {
	var wStr = pStr;
	var StartPoint;
	var EndPoint;
	var Pos;

	StartPoint = -1;
	for (Pos = 0; Pos < wStr.length; ++Pos) {
		if (wStr.charAt(Pos) != " ") {
			StartPoint = Pos;
			break;
		}
	}

	if (StartPoint == -1)
		return "";

	for (Pos = wStr.length - 1; Pos >= 0; --Pos) {
		EndPoint = Pos;
		if (wStr.charAt(Pos) != " ")
			break;
	}
	return wStr.substring(StartPoint, EndPoint + 1);
};

/**
 * @description	미결
 * @param		{String}	pStr
 * @returns		{String}
 * @example		미결
 */
function RemoveBlank(pStr) {
	var wStr = pStr;
	var wArr = wStr.split(" "); // 먼저 스페이스 문자열을 없엔다

	wStr = wArr.join("");
	return wStr;
};

/**
 * @description	미결
 * @param		{String}	pExpression
 * @param		{String}	pFind
 * @param		{String}	pReplacement
 * @returns		{String}
 * @example		미결
 */
function replace(pExpression, pFind, pReplacement) {
	var wStr = pExpression;

	var wArr = wStr.split(pFind); // 먼저 찾을 문자열로 나눈다
	wStr = wArr.join(pReplacement);

	return wStr;
};
/**
 * @description	미결
 * @param 		{String}	strString
 * @param		{String}	strPadChar
 * @param		{number}	nCount
 * @return		{Object}
 * @example		미결
 */
function lPad(strString, strPadChar, nCount) {
	var len = (strString + "").length;
	var str = "";
	for (var i = len; i < nCount; i++)
		str += strPadChar;

	return str + strString;
}
/**
 * @description	미결
 * @param 		{String}	strString
 * @param		{String}	strPadChar
 * @param		{number}	nCount
 * @return		{Object}
 * @example		미결
 */
function rPad(strString, strPadChar, nCount) {
	var len = (strString +"").length;
	var str = "";
	for (var i = len; i < nCount; i++)
		str += strPadChar;

	return strString + str;
}

function RPad(strString, strPadChar, nCount) {
	return rPad(strString, strPadChar, nCount);
}

function Rpad(strString, strPadChar, nCount) {
	return rPad(strString, strPadChar, nCount);
}
/**
 * @description	미결
 * @param		{String}	pStr
 * @return		{number}
 * @example		미결
 */
function byteLength(pStr) {
	return pStr.byteLength();
}

/**
 * @description	미결
 * @param		{Number}	pValue
 * @param		{Number}	pLen
 * @returns		{Boolean}
 * @example		미결
 */
function IsRightLen(pValue, pLen) {
	var len = 0;
	var cnt;

	for (cnt = 0; cnt < pValue.length; cnt++) {
		len += 1;
		if (pValue.charCodeAt(cnt) > 255)
			len += 1;
	}

	if (len > pLen) {
		return false;
	} else {
		return true;
	}
};
/**
 * @description	미결
 * @param		{String}	n
 * @param		{number}	digits
 * @return		{number}
 * @example		미결
 */
function leadingZeros(n, digits) {
	var zero = '';
	
	n = "" + n;
	
	if( n.length < digits ){
		for( i = 0; i < digits - n.length; i++ )
			zero += '0';
	}
	
	return zero + n;
}

function inSplit() {
	/* [사용법]
	 * inSplit("team1,manager,acsh,dtsh,cmsh", ",", "manager")
	 * inSplit("team1,manager,acsh,dtsh,cmsh", ",", "manager|acsh", "|")
	 * inSplit("team1,manager,acsh,dtsh,cmsh", ",", ["manager","acsh"])
	 * inSplit(["team1","manager","acsh","dtsh","cmsh"], "manager")
	 * inSplit(["team1","manager","acsh","dtsh","cmsh"], "manager,acsh", ",")
	 * inSplit(["team1","manager","acsh","dtsh","cmsh"], ["manager","acsh"])
	 * */
	var args = Array.prototype.slice.call(arguments);
	var argCnt = args.length;
	var target = null;	var targetSeperator = null;
	var keyVal = null;	var keyValSeperator = null;
	var isValidArg = true;
	
	try{
		if( argCnt < 2 ){
			isValidArg = false;
		}
		else{
			target = args[0];			
			
			if( typeof target == "string" ){
				targetSeperator = args[1];
				
				switch(argCnt){
				case 3: keyVal = args[2]; break;
				case 4:	keyVal = args[2]; keyValSeperator = args[3]; break;
				default: isValidArg = false;
				}
			}
			else if( target instanceof Array ){
				switch(argCnt){
				case 2: keyVal = args[1]; break;
				case 3: keyVal = args[1]; keyValSeperator = args[2]; break;
				default: isValidArg = false;
				}
			}
			else
				isValidArg = false;
		}
		// 예외처리
		if( !isValidArg ){
			//함수 인자 오류 메세지 출력
			try{ keyVal.clear(); } catch(e){} keyVal = null; keyValSeperator = null;
			try{ target.clear(); } catch(e){} target = null; targetSeperator = null; args = null;
			return isValidArg;
		}
		
		var keyValSize = 0;
		var isExist = false;
		var i = 0;
		
		if( typeof target == "string" ){
			target = target.split(targetSeperator);
		}
		if( !(keyVal instanceof Array) ){
			if( typeof keyVal == "string" && typeof keyValSeperator != "undefined" )
				keyVal = keyVal.split(keyValSeperator);
			else
				keyVal = [keyVal];
		}
		
		for(i = 0, keyValSize = keyVal.length; i < keyValSize; i++)
			isExist = (target.indexOf(keyVal[i]) >= 0);
	}
	catch(e){
		isExist = false;
	}
	
	//메모리 해제
	try{ keyVal.clear(); } catch(e){} keyVal = null; keyValSeperator = null;
	try{ target.clear(); } catch(e){} target = null; targetSeperator = null; args = null;
	
	return isExist;
}

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
String.prototype.startsWith = function() {
	var wTarget = arguments[0];
	var wReturn = this.substring(0, wTarget.length) == wTarget;
	return wReturn;
};

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
String.prototype.endsWith = function() {
	var wTarget = arguments[0];
	var wReturn = this.substring(this.length - wTarget.length) == wTarget;
	return wReturn;
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
// trim함수 만들기
String.prototype.trim = function() {
	return this.replace(/(^\s*)|(\s*$)/g, "");
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.ltrim = function() {
	return this.replace(/(^\s*)/g, "");
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.rtrim = function() {
	return this.replace(/(\s*$)/g, "");
};

/**
 * @description	미결
 * @returns		{Number}
 * @example		미결
 */
String.prototype.byteLength = function() {
	var cnt = 0;
	for (var i = 0; i < this.length; i++) {
		if (this.charCodeAt(i) > 127)
			cnt += 2;
		else
			cnt++;
	}
	return cnt;
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.num = function() {
	return (this.trim().replace(/[^0-9]/g, ""));
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.money = function() {
	var num = this.trim();
	while ((/(-?[0-9]+)([0-9]{3})/).test(num)) {
		num = num.replace((/(-?[0-9]+)([0-9]{3})/), "$1,$2");
	}
	return num;
};

/**
 * @description	미결
 * @param		{Number}	rowNum
 * @returns		{Boolean}
 * @example		미결
 */
String.prototype.isBlank = function() {
	var str = this.trim();
	for (var i = 0; i < str.length; i++) {
		if ((str.charAt(i) != "\t") && (str.charAt(i) != "\n")
				&& (str.charAt(i) != "\r")) {
			return false;
		}
	}
	return true;
};

/**
 * @description	미결
 * @param		{String}	pattern
 * @returns		{String}
 * @example		미결
 */
String.prototype.remove = function(pattern) {
	if (pattern == null)
		return this;

	var regExp = new RegExp(pattern, "g");

	return this.replace(regExp, "");
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.isNum = function() {

	return (/^(\d|-)?(\d|,)*\.?\d*$/).test(this.remove(arguments[0]));
};

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
String.prototype.isEng = function() {
	return (/^[a-zA-Z]+$/).test(this.remove(arguments[0])) ? true : false;
};

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
String.prototype.isEngNum = function() {
	return (/^[0-9a-zA-Z]+$/).test(this.remove(arguments[0])) ? true : false;
};

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
String.prototype.isNumEng = function() {
	return this.isEngNum(arguments[0]);
};

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
String.prototype.isUserid = function() {
	return (/^[a-zA-z]{1}[0-9a-zA-Z]+$/).test(this.remove(arguments[0])) ? true : false;
};

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
String.prototype.isCorpnum = function() {
	var arg = arguments[0] || "";

	var regExp = new RegExp("^[0-9]{6}" + arg + "[0-9]{7}$", "g");
	// if(this.match(regExp) == null) return false;
	if (regExp.test(this))
		return false;

	var corpnum = this.remove("-");
	var num = [ 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2 ];
	var sum = 0;
	var last = parseInt(corpnum.charAt(12));
	for (var i = 0; i < 12; i++) {
		sum += parseInt(corpnum.charAt(i)) * num[i];
	}
	
	return ((10 - sum % 10) % 10 == last) ? true : false;
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.isEmail = function() {
	return (/\w+([-+.]\w+)*@\w+([-.]\w+)*\.[a-zA-Z]{2,4}$/).test(this.trim());
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.isPhone = function() {
	var arg = arguments[0] || "";
	var regExp = new RegExp("^(02|0[3-9]{1}[0-9]{1})" + arg
			+ "[1-9]{1}[0-9]{2,3}" + arg + "[0-9]{4}$", "g");

	return regExp.test(this);
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.isMobile = function() {
	var arg = arguments[0] ? arguments[0] : "";
	var regExp = new RegExp("^01[016789]" + arg + "[1-9]{1}[0-9]{2,3}" + arg + "[0-9]{4}$", "g");

	return regExp.test(this);
};

/**
 * @description	미결
 * @param		{Number}	len
 * @returns		{String}
 * @example		미결
 */
String.prototype.cut = function(len) {
	var str = this;
	var l = 0;
	for (var i = 0; i < str.length; i++) {
		l += (str.charCodeAt(i) > 128) ? 2 : 1;
		if (l > len)
			return str.substring(0, i) + "...";
	}
	return str;
};

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
String.prototype.bytes = function() {
	var str = this;
	var l = 0;
	for (var i = 0; i < str.length; i++)
		l += (str.charCodeAt(i) > 128) ? 2 : 1;
	return l;
};

/**
 * @description	미결
 * @param		{String}	pattern
 * @param		{String}	toWord
 * @returns		{Object}
 * @example		미결
 */
String.prototype.replaceWord = function(pattern, toWord) {
	var wMask = pattern || "";
	var wToWord = toWord || "";

	wMask = wMask.replace(/\\/g, "<XXXxxx>");
	wMask = wMask.replace(/\+/g, "\\+");
	wMask = wMask.replace(/\$/g, "\\$");
	wMask = wMask.replace(/\^/g, "\\^");
	wMask = wMask.replace(/\./g, "\\.");
	wMask = wMask.replace(/\(/g, "\\(");
	wMask = wMask.replace(/\)/g, "\\)");
	wMask = wMask.replace(/\[/g, "\\[");
	wMask = wMask.replace(/\]/g, "\\]");
	wMask = wMask.replace(/\{/g, "\\{");
	wMask = wMask.replace(/\}/g, "\\}");
	wMask = wMask.replace(/\*/g, "\\*");
	wMask = wMask.replace(/\?/g, "\\?");
	wMask = wMask.replace(/<XXXxxx>/g, "\\\\");

	var re = new RegExp(wMask, "g");

	return this.replace(re, wToWord);
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
String.prototype.toRegExpMask = function() {
	var wMask = this + "";

	wMask = wMask.replace(/\\/g, "<XXXxxx>");
	wMask = wMask.replace(/\+/g, "\\+");
	wMask = wMask.replace(/\$/g, "\\$");
	wMask = wMask.replace(/\^/g, "\\^");
	wMask = wMask.replace(/\./g, "\\.");
	wMask = wMask.replace(/\(/g, "\\(");
	wMask = wMask.replace(/\[/g, "\\[");
	wMask = wMask.replace(/\]/g, "\\]");
	wMask = wMask.replace(/\{/g, "\\{");
	wMask = wMask.replace(/\}/g, "\\}");
	wMask = wMask.replace(/\*/g, "\\*");
	wMask = wMask.replace(/\?/g, "\\?");
	wMask = wMask.replace(/<XXXxxx>/g, "\\\\");

	return wMask;
};

/**
 * @description	미결
 * @param		{String}	pattern
 * @returns		{Object}
 * @example		미결
 */
String.prototype.matchWord = function(pattern) {
	var regExp = new RegExp(pattern.toRegExpMask(), "g");
	return (regExp.test(this));
};

/**
 * @description	미결
 * @param		{String}	pattern
 * @returns		{String}
 * @example		미결
 */
String.prototype.mask = function(pattern) {
	return mask(this, pattern);
};

/**
 * @description	미결
 * @param		{String}	o
 * @returns		{STring}
 * @example		미결
 */
function isString(o) {
	return Object.prototype.toString.call(o) == '[object String]';
};

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
Number.prototype.trim = function() {
	return (this + "").trim();
};

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
Number.prototype.length = function() {
	return (this + "").length;
};

/**
 * @description	미결
 * @param		start
 * @param		end
 * @returns		{String}
 * @example		미결
 */
Number.prototype.substring = function(start, end) {
	var wStr = this + "";
	if (end == undefined)
		end = wStr.length;
	return wStr.substring(start, end);
};

/**
 * @description	미결
 * @param		nIndex
 * @param		nSize
 * @returns		{String}
 * @example		미결
 */
Number.prototype.substr = function(nIndex, nSize) {
	var strString = this + "";

	var ndx = 0;
	var lastNdx = nIndex + nSize;
	var wReturn = "";

	var ndx0 = 0;
	var ndx1 = strString.length;

	for (var i = 0; i < this.length; i++) {
		ndx += (this.charCodeAt(i) > 127 ? 2 : 1);

		// 처음 시작점을 만나는 곳의 시작 인덱스 기록
		if (ndx0 == 0 && ndx >= nIndex)
			ndx0 = ndx;
		// 끝 인덱스를 벗어났으면 빠져나가고
		if (ndx >= lastNdx)
			break;

		// 이미 시작되었고 빠져 나가지 않은 상태이면 끝 인덱스 계속 기록
		if (ndx0 > 0)
			ndx1 = ndx;
	}

	return strString.substring(ndx0, ndx1);
};

/**
 * @description	미결
 * @param		pattern
 * @param		toWord
 * @returns		{String}
 * @example		미결
 */
Number.prototype.replace = function(pattern, toWord) {
	return (this + "").replace(pattern, toWord);
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
Array.prototype.Clear = function() {
	return this.clear();
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
Array.prototype.clear = function() {
	for(var i = this.length - 1; i >= 0; i--){
		if( this[i] != null && this[i].Clear ) this[i].Clear();
		this[i] = null;
		this.pop();
	}
	
	return;
};

/**
 * @description	미결
 * @param		pArray
 * @returns		{Boolean}
 * @example		미결
 */
Array.prototype.EqualTo = function(pArray) {
	if (this.length != pArray.length)
		return false;

	var wReturn = true;
	for (var i = 0; i < this.length; i++) {
		wReturn = wReturn && (this[i] == pArray[i]);
	}

	return wReturn;
};

if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(elt /* , from */) {
		var wReturn = -1;
		var from = Number(arguments[1]) || 0;

		for (var i = from; i < this.length; i++) {
			if (this[i] === elt) {
				wReturn = i;
				break;
			}
		}
		return wReturn;
	};
}

/**
 * @description	미결
 * @param		keyStr
 * @returns		{Boolean}
 * @example		미결
 */
Array.prototype.hasKey = function(keyStr) {
	var wReturn = false;
	for ( var key in this) {
		if (key == keyStr) {
			wReturn = true;
			break;
		}
	}
	return wReturn;
};

/**
 * @description	미결
 * @param		{String}	o
 * @returns		{String}
 * @example		미결
 */
function isArray(o) {
	return Object.prototype.toString.call(o) == '[object Array]';
}

/**
 * @description	미결
 * @param		{String}	pArray1
 * @param		{String}	pArray2
 * @returns		{Boolean}
 * @example		미결
 */
// 둘중 작은 배열의 길이를 기준으로 비교한다
function compareArray(pArray1, pArray2) {
	var length = (pArray1.length < pArray2.length ? pArray1.length
			: pArray2.length);
	var wReturn = 0;
	for (var i = 0; i < length; i++) {
		if (pArray1[i] == pArray2[i]) {
			continue;
		} else if (pArray1[i] > pArray2[i]) {
			wReturn = 1;
			break;
		} else if (pArray1[i] < pArray2[i]) {
			wReturn = -1;
			break;
		}
	}

	return wReturn;
};

/**
 * @description	미결
 * @param		{String}	parentArray
 * @param		{String}	pArray
 * @returns		{String}
 * @example		미결
 */
// 사용방법
// searchArray(배열의 상위배열, 찿을배열, 시작인덱스, 끝인덱스
function searchArray(parentArray, pArray) {
	var lastIndex = parentArray.length - 1;
	if (lastIndex < 0) return null;
	
	if (compareArray(parentArray[lastIndex], pArray) == 0) {
		return parentArray[lastIndex];
	}
	if (compareArray(parentArray[0], pArray) == 0) {
		return parentArray[0];
	}

	return searchSubarray(parentArray, pArray, 1, parentArray.length - 2);
};

/**
 * @description	미결
 * @param		{String}	parentArray
 * @param		{String}	pArray
 * @param		{Number}	startIndex
 * @param		{Number}	lastIndex
 * @returns		{String}
 * @example		미결
 */
function searchSubarray(parentArray, pArray, startIndex, lastIndex) {
	// startIndex > lastIndex 이면 무한루핑을 방지 한다
	if (startIndex > lastIndex)
		return null;

	var index = Math.floor((lastIndex - startIndex) / 2) + startIndex;
	var compareResult = compareArray(parentArray[index], pArray);

	if (compareResult < 0) { // 앞에 것이 크면
		return searchSubarray(parentArray, pArray, index + 1, lastIndex);
	} else if (compareResult > 0) {
		return searchSubarray(parentArray, pArray, startIndex, index - 1);
	}

	return parentArray[index];
};
/**
 * @description	미결
 * @param		{String}	arr
 * @return		{number}
 * @example		미결
 */
function getAssociativeArrayLength(arr) {
	var key = null;
	var cnt = 0;

	if( !(arr instanceof Array) )
		return -1;

	for(key in arr){
		if( typeof arr[key] == "function" ) continue;
		cnt++;
	}
	
	key = null;
	
	return cnt;
}

/**
 * @description	미결
 * @param		{String}	pValue
 * @param		{String}	formatStr
 * @returns		{String}
 * @example		미결
 */
function mask(pValue, formatStr, formatRound) {
	if( typeof format == "function" ){
		return format("" + pValue, formatStr, formatRound);
	}

	var wIsNumeric = false;
	var wReturn = "";
	var wDigitPos = 0;

	if (typeof (pValue) == "number") {
		pValue = "" + pValue;
	}

	if (pValue == "")
		return "";

	if (formatStr.length > 1
			&& (formatStr.substring(formatStr.length - 1, formatStr.length) == "0"
					|| formatStr.substring(formatStr.length - 1,
							formatStr.length) == "#" || formatStr.substring(
					formatStr.length - 1, formatStr.length) == "%")) {
		wIsNumeric = true;
	}

	// 숫자인 경우 소수점이하 자릿수를 맞추어 준다. 이상태에서 소숫점 을 없애준다
	if (wIsNumeric) {
		// 포멧 소수점의 위치
		var dotPosOfFormat = formatStr.indexOf(".");
		// 포멧 소수점이후 자릿수
		var countAfterDotOfFormat = (dotPosOfFormat < 0 ? 0 : formatStr.length
				- dotPosOfFormat - 1);

		var dotPosOfValue = pValue.indexOf(".");
		var countAfterDotOfValue = pValue.length - dotPosOfValue - 1;

		// 퍼센트
		if (formatStr.substr(formatStr.length - 1, formatStr.length) == "%")
			countAfterDotOfFormat += -1;

		if (countAfterDotOfFormat > 0) {
			var num = parseFloat(pValue);
			var n = num.toFixed(countAfterDotOfFormat);

			pValue = "" + n;
			var formatLength = formatStr.length;

			for (var i = 0; i < countAfterDotOfFormat; i++) {
				if (formatStr.charAt(formatLength - 1 - i) == '#'
						&& pValue.charAt(pValue.length - 1) == '0') {
					pValue = pValue.substring(0, pValue.length - 1);
					formatStr = formatStr.substring(0, formatStr.length - 1);
				} else {
					break;
				}
			}

			if (pValue.charAt(pValue.length - 1) == '.') {
				pValue = pValue.substring(0, pValue.length - 1);
				formatStr = formatStr.substring(0, formatStr.length - 1);
			}
		} else {
			var num = parseFloat(pValue);
			var n = num.toFixed();

			pValue = "" + n;
		}

		pValue = pValue.replace(/\./g, "");

		// 소수점이하 자리가 맞은 상태에서 아래 로직 동작

		wDigitPos = pValue.length - 1;
		for (var i = formatStr.length - 1; i >= 0; i--) {
			if (formatStr.charAt(i) == "0") {
				if (wDigitPos >= 0) {
					wReturn = pValue.charAt(wDigitPos) + wReturn;
				} else {
					wReturn = "0" + wReturn;
				}
				wDigitPos--;
			} else if (formatStr.charAt(i) == "#") {
				if (wDigitPos >= 0) {
					wReturn = pValue.charAt(wDigitPos) + wReturn;
				}
				wDigitPos--;
			} else if (formatStr.charAt(i) == ".") {
				if (wDigitPos >= 0) {
					wReturn = "." + wReturn;
				}
			} else if (formatStr.charAt(i) == ",") {
				if (wDigitPos >= 0) {
					if (pValue.charAt(wDigitPos) != '-')
						wReturn = "," + wReturn;
				}
			} else if (formatStr.charAt(i) == "+") {
				wReturn = "+" + wReturn;
			} else if (formatStr.charAt(i) == "-") {
				wReturn = "-" + wReturn;
			} else if (formatStr.charAt(i) == "/") {
				wReturn = "/" + wReturn;
			} else if (formatStr.charAt(i) == "$") {
				wReturn = "$" + wReturn;
			} else if (formatStr.charAt(i) == "%") {
				wReturn = wReturn + "%";
			} else {
				wReturn = formatStr.charAt(i) + wReturn;
			}
		}

		if (wDigitPos >= 0) {
			wReturn = pValue.substring(0, wDigitPos + 1) + wReturn;
		}
		// 표시형식이 .으로 끝난경우 제거해준다
		if (wReturn.charAt(wReturn.length - 1) == ".") {
			wReturn = wReturn.substring(0, wReturn.length - 1);
		}

		var pattern = /^[-#,.]+$/;
		if (wReturn == "0" && pattern.test(formatStr))
			wReturn = "";

	} else {
		wDigitPos = 0;
		for (var i = 0; i < formatStr.length; i++) {
			if (formatStr.charAt(i) == "@") {
				if (wDigitPos >= 0) {
					wReturn += pValue.charAt(wDigitPos);
				} else {
					wReturn += " ";
				}
				wDigitPos++;
			} else if (formatStr.charAt(i) == "&") {
				if (wDigitPos >= 0) {
					wReturn += pValue.charAt(wDigitPos);
				}
				wDigitPos++;
			} else {
				wReturn += formatStr.charAt(i);
			}
		}
		if (wDigitPos < pValue.length) {
			wReturn += pValue.substring(0, wDigitPos);
		}
	}

	return wReturn;
};

/**
 * @description	미결
 * @param		{String}	pValue
 * @param		{String}	format
 * @returns		{String}	
 * @example		미결
 */
function maskIn(pValue, format) {
	var wIsNumeric = false;
	var wReturn = "";
	var wDigitPos = 0;
	if (typeof (pValue) == "number") {
		pValue = "" + pValue;
	}
	if (pValue == "")
		return "";

	if (format.length > 1
			&& (format.substring(format.length - 1, format.length) == "0" || format
					.substring(format.length - 1, format.length) == "#")) {
		wIsNumeric = true;
	}

	if (wIsNumeric) {
		wDigitPos = pValue.length - 1;
		for (var i = format.length - 1; i >= 0; i--) {
			if (format.charAt(i) == "0") {
				if (wDigitPos >= 0) {
					wReturn = pValue.charAt(wDigitPos) + wReturn;
				} else {
					wReturn = "0" + wReturn;
				}
				wDigitPos--;
			} else if (format.charAt(i) == "#") {
				if (wDigitPos >= 0) {
					wReturn = pValue.charAt(wDigitPos) + wReturn;
				}
				wDigitPos--;
			} else if (format.charAt(i) == ".") {
				if (wDigitPos >= 0) {
					wReturn = "." + wReturn;
				}
			} else if (format.charAt(i) == ",") {
				if (wDigitPos >= 0) {
					if (pValue.charAt(wDigitPos) != '-')
						wReturn = "," + wReturn;
				}
			} else if (format.charAt(i) == "+") {
				wReturn = "+" + wReturn;
			} else if (format.charAt(i) == "-") {
				wReturn = "-" + wReturn;
			} else if (format.charAt(i) == "/") {
				wReturn = "/" + wReturn;
			} else if (format.charAt(i) == "$") {
				wReturn = "$" + wReturn;
			} else {
				wReturn = format.charAt(i) + wReturn;
			}
			if (wDigitPos < 0)
				break;
		}

		if (wDigitPos >= 0) {
			wReturn = pValue.substring(0, wDigitPos) + wReturn;
		}

	} else {
		wDigitPos = 0;
		for (var i = 0; i < format.length; i++) {
			if (format.charAt(i) == "@") {
				if (wDigitPos >= 0) {
					wReturn += pValue.charAt(wDigitPos);
				} else {
					wReturn += " ";
				}
				wDigitPos++;
			} else if (format.charAt(i) == "&") {
				if (wDigitPos >= 0) {
					wReturn += pValue.charAt(wDigitPos);
				}
				wDigitPos++;
			} else {
				wReturn += format.charAt(i);
			}
			if (wDigitPos >= pValue.length)
				break;
		}
		if (wDigitPos < pValue.length) {
			wReturn += pValue.substring(0, wDigitPos);
		}
	}
	return wReturn;
};
/**
 * @description	미결
 * @param 		{number}	num
 * @param		{number}	underDecimalCount
 * @return		{Object}
 * @example		미결
 */
function numFormat(num, underDecimalCount) {
	var str = "" + num;
	
	str += (str.indexOf(".") < 0 ? "." : "") + "00000000000000000000000000000000000000000000000000000000000000";
	
	var lastNdx = str.indexOf(".") + ((typeof underDecimalCount != "undefined") ? underDecimalCount + 1 : 0);

	return str.substring(0, lastNdx);
}

/**
 * @description	미결
 * @param		{String}	pValue
 * @param		{String}	formatStr
 * @returns		{String}
 * @example		미결
 */
//날짜타입 포멧 함수 (지홍 추가)
function calendarMask(pValue, formatStr) {
	if (formatStr == null || formatStr == undefined)
		formatStr = "";

	// 숫자타입이 아닌경우 숫자만 추출한다.
	if (typeof (pValue) == "number") {
		pValue = "" + pValue;
	} else {
		var numArr = pValue.match(/\d+/g);
		var numArrLength = numArr.length;
		pValue = "";
		for (var i = 0; i < numArrLength; i++) {
			pValue += numArr[i];
		}
	}
	// 빈값일 경우 리턴
	if (pValue == "")
		return "";

	formatStr = formatStr.toLowerCase();
	var wReturn = formatStr;

	var Y = formatStr.match(/y+/g);
	var M = formatStr.match(/m+/g);
	var D = formatStr.match(/d+/g);
	var A = formatStr.match(/a+/g);
	var year = pValue.substring(0, 4);
	var month = pValue.substring(4, 6);
	var day = pValue.substring(6, 8);
	var value = "";
	var replaceValue = "";

	var EngMonth = {
			'01mmmm' : "January", '02mmmm' : "February", '03mmmm' : "March", '04mmmm' : "Aprill", '05mmmm' : "May", '06mmmm' : "June", '07mmmm' : "July", '08mmmm' : "August", '09mmmm' : "September", '10mmmm' : "October", '11mmmm' : "November", '12mmmm' : "December",
			'01mmm' : "Jan", '02mmm' : "Feb", '03mmm' : "Mar", '04mmm' : "Apr", '05mmm' : "May", '06mmm' : "Jun", '07mmm' : "Jul", '08mmm' : "Aug", '09mmm' : "Sep", '10mmm' : "Oct", '11mmm' : "Nov", '12mmm' : "Dec",
			'01mmmmm' : "J", '02mmmmm' : "F", '03mmmmm' : "M", '04mmmmm' : "A", '05mmmmm' : "M", '06mmmmm' : "J", '07mmmmm' : "J", '08mmmmm' : "A", '09mmmmm' : "S", '10mmmmm' : "O", '11mmmmm' : "N", '12mmmmm' : "D"
	};
	var EngWeek = {
			'0dddd' : "Sunday", '1dddd' : "Monday", '2dddd' : "Tuesday", '3dddd' : "Wenesday", '4dddd' : "Thursday", '5dddd' : "Friday", '6dddd' : "Saturday",
			'0ddd' : "Sun", '1ddd' : "Mon", '2ddd' : "Tue", '3ddd' : "Wen", '4ddd' : "Thu", '5ddd' : "Fri", '6ddd' : "Sat"
	};
	var HanWeek = { 
			'0aaaa' : "일요일", '1aaaa' : "월요일", '2aaaa' : "화요일", '3aaaa' : "수요일", '4aaaa' : "목요일", '5aaaa' : "금요일", '6aaaa' : "토요일",
			'0aaa' : "일", '1aaa' : "월", '2aaa' : "화", '3aaa' : "수", '4aaa' : "목", '5aaa' : "금", '6aaa' : "토"
	};

	// year 치환
	for (var i = 0; i < (Y != null ? Y.length : 0); i++) {
		if (Y[i].length > 2)
			wReturn = wReturn.replace(/y+/, year);
		else if (Y[i].length > 0)
			wReturn = wReturn.replace(/y+/, year.substring(2, 4));
	}
	// month 치환
	for (var i = 0; i < (M != null ? M.length : 0); i++) {
		value = M[i];
		if (M[i].length > 5)
			M[i] = "mmmm";
		if (M[i].length > 2) {
			wReturn = wReturn.replace(value, month == "" ? "" : EngMonth[month
					+ M[i]]);
		} else if (M[i].length > 0) {
			replaceValue = month;
			if (M[i].length == 1)
				replaceValue = month * 1;
			wReturn = wReturn.replace(value, replaceValue);
		}
	}
	// day 치환
	for (var i = 0; i < (D != null ? D.length : 0); i++) {
		value = D[i];
		if (D[i].length > 3)
			D[i] = "dddd";
		if (D[i].length > 2) {
			var date = new Date(year, month - 1, day);
			wReturn = wReturn.replace(value, day == "" ? "" : EngWeek[date
					.getDay()
					+ D[i]]);
		} else if (D[i].length > 0) {
			replaceValue = day;
			if (D[i].length == 1)
				replaceValue = day * 1;
			wReturn = wReturn.replace(value, replaceValue);
		}
	}
	// aaa 치환
	for (var i = 0; i < (A != null ? A.length : 0); i++) {
		value = A[i];
		if (A[i].length > 3)
			A[i] = "aaaa";
		if (A[i].length > 2) {
			var date = new Date(year, month - 1, day);
			wReturn = wReturn.replace(value, day == "" ? "" : HanWeek[date
					.getDay()
					+ A[i]]);
		}
	}

	return wReturn;
};

/**
 * @description	미결
 * @param		{String}	pValue
 * @param		{Object}	pMask
 * @returns		{String}	
 * @example		미결
 */
function restoreDateFormatValue(pValue, pMask) {
	pMask = pMask.replace(/-/g, "");
	pMask = pMask.replace(/,/g, "");
	pMask = pMask.replace(/:/g, "");
	pMask = pMask.replace(/\+/g, "");
	pMask = pMask.replace(/\*/g, "");
	pMask = pMask.replace(/\?/g, "");
	pMask = pMask.replace(/\./g, "");
	pMask = pMask.replace(/\//g, "");
	pMask = pMask.replace(/\|/g, "");
	pMask = pMask.replace(/\(/g, "");
	pMask = pMask.replace(/\)/g, "");
	pMask = pMask.replace(/\{/g, "");
	pMask = pMask.replace(/\}/g, "");
	pMask = pMask.replace(/\[/g, "");
	pMask = pMask.replace(/\]/g, "");
	
	if (pMask.indexOf("YYYY") >= 0)
		pMask = pMask.replace(/YYYY/g, "");
	if (pMask.indexOf("YY") >= 0)
		pMask = pMask.replace(/YY/g, "");
	if (pMask.indexOf("MM") >= 0)
		pMask = pMask.replace(/MM/g, "");
	if (pMask.indexOf("mm") >= 0)
		pMask = pMask.replace(/mm/g, "");
	if (pMask.indexOf("DD") >= 0)
		pMask = pMask.replace(/DD/g, "");
	if (pMask.indexOf("dd") >= 0)
		pMask = pMask.replace(/dd/g, "");
	if (pMask.indexOf("Hh") >= 0)
		pMask = pMask.replace(/Hh/g, "");
	if (pMask.indexOf("hh") >= 0)
		pMask = pMask.replace(/hh/g, "");
	if (pMask.indexOf("Nn") >= 0)
		pMask = pMask.replace(/Nn/g, "");
	if (pMask.indexOf("nn") >= 0)
		pMask = pMask.replace(/nn/g, "");
	if (pMask.indexOf("Ss") >= 0)
		pMask = pMask.replace(/Ss/g, "");
	if (pMask.indexOf("ss") >= 0)
		pMask = pMask.replace(/ss/g, "");
	if (pMask.indexOf("WK") >= 0)
		pValue = pValue.replace(/[월화수목금토일]요일/g, "");
	if (pMask.indexOf("wk") >= 0)
		pValue = pValue.replace(/[월화수목금토일]/g, "");

	var ch = null;

	for(var i = 0; i < pMask.length; i++, ch = null){
		ch = pMask.charAt(i);
		eval("pValue = \"" + pValue + "\".replace( /" + ch + "/g, \"\")");
	}

	return pValue;
}

/**
 * @description	미결
 * @param		{String}	pStart
 * @param		{Number}	pAddCount
 * @returns		{String}	
 * @example		미결
 */
function dayAdd(pStart, pAddCount) {
	var wTemp = pStart.replace(/\-/g, "");
	
	var wYear = parseInt(wTemp.substring(0, 4), 10);
	var wMonth = parseInt(wTemp.substring(4, 6), 10) - 1;
	var wDate = parseInt(wTemp.substring(6, 8), 10);

	var d = new Date(wYear, wMonth, wDate);
	// var numb=Date.parse(d);
	d.setTime(d.getTime() + (pAddCount * 1000 * 60 * 60 * 24));

	var wReturn = ""
			+ d.getFullYear()
			+ (d.getMonth() < 9 ? "0" + (d.getMonth() + 1) : (d.getMonth() + 1)
					+ '')
			+ (d.getDate() < 10 ? "0" + d.getDate() : d.getDate() + '');

	return wReturn;
};

/**
 * 입력된 날자에 OffSet 으로 지정된 만큼의 날짜를 더하는 함수
 * 
 * AddDate(date); AddDate(date,nOffSet);
 * 
 * @param date
 *            'yyyyMMdd' 형태로 표현된 날자.
 * @param nOffSet
 *            날짜로부터 증가 감소값. 지정하지 않으면 [Default Value = 1] 로 적용
 * @return (String)
 */
function addDate(date, nOffSet) { // Mi: AddDate
	if (nOffSet == undefined)
		nOffSet = 1;

	if (date.length == 7) {
		date = date.substring(0, 7) + "0" + date.substring(7);
	}

	return dayAdd(date, nOffSet);
}

/**
 * @description	미결
 * @param		{String}	yyyymm
 * @param		{Number}	x
 * @returns		{String}	
 * @example		미결
 */
function monthAdd(yyyymm, x) {
	if (typeof yyyymm == "undefined" || yyyymm == "")
		return "";

	yyyymm = yyyymm.replace(/[-/]/g, "");

	if (!(yyyymm.match(/^[0-9]*$/))) {
		// alert("날짜는 숫자와 -, / 만 허용됩니다.");
		return "";
	}

	if (isNaN(x * 1)) {
		// alert("날짜 연산이 불가능한 값입니다.");
		return "";
	}

	var stdYear = "";
	var stdMonth = "";
	var stdDay = "";

	if ((yyyymm + "").trim().length == 6) {
		stdYear = (yyyymm + "").substring(0, 4);
		stdMonth = (yyyymm + "").substring(4, 6);
		stdDay = "01";
	} else if ((yyyymm + "").trim().length == 8) {
		stdYear = (yyyymm + "").substring(0, 4);
		stdMonth = (yyyymm + "").substring(4, 6);
		stdDay = (yyyymm + "").substring(6, 8);
	} else {
		// alert("년월일 또는 년월 형식으로만 계산이 가능합니다.");
		return "";
	}

	var dt = new Date(stdYear * 1, ((stdMonth * 1) - 1) + x, stdDay * 1);
	var resYear = dt.getFullYear();
	var resMonth = dt.getMonth() + 1;
	resMonth = (resMonth < 10) ? "0" + resMonth : resMonth;

	return resYear + "" + resMonth;
}

/**
 * 입력된 날자에 OffSet 으로 지정된 만큼의 달을 더하는 Basic API 입니다.
 * 
 * AddMonth(pStart); AddMonth(date,nOffSet);
 * 
 * @param pStart
 *            'yyyyMMdd' 형태로 표현된 날자.
 * @param nOffSet
 *            날짜로부터 증가 감소값. 지정하지 않으면 [Default Value = 1] 로 적용
 * @return (String)
 */
function addMonth(pStart, nOffSet) { // Mi: AddMonth
	if (nOffSet == undefined)
		nOffSet = 1;

	var wTemp = pStart.replace(/\-/g, "");
	if (wTemp.length == 7) {
		wTemp = wTemp.substring(0, 7) + "0" + wTemp.substring(7);
	}

	var wYear = parseInt(wTemp.substring(0, 4), 10);
	var wMonth = parseInt(wTemp.substring(4, 6), 10);
	var wDate = parseInt(wTemp.substring(6, 8), 10);

	// wYear += parseInt((wMonth + nOffSet) / 12);
	// wMonth += (wMonth + nOffSet) % 12;
	//	
	// var wDate0 = lastDay(wYear, wMonth);
	// wDate = (wDate > wDate0 ? wDate0 : wDate);
	//	
	// return "" + wYear + (wMonth < 10 ? "0" : "") + wMonth + (wDate < 10 ? "0"
	// : "") + wDate;

	var wYearOff = parseInt(nOffSet / 12);
	var wMonthOff = parseInt(nOffSet % 12);

	wYear = wYear + wYearOff;
	wMonth = wMonth + wMonthOff;
	
	var lastDay = (new Date(wYear, wMonth, 0)).getDate();
	wDate = (wDate < lastDay) ? wDate : lastDay;

	var resultDate = new Date(wYear, wMonth - 1, wDate);
	
	wYear = resultDate.getFullYear() * 1;
	wMonth = (resultDate.getMonth() + 1) * 1;
	wDate = resultDate.getDate() * 1;

	return "" + (wYear) + ((wMonth < 10) ? "0" + wMonth : wMonth)
			+ ((wDate < 10) ? "0" + wDate : wDate);
}

/**
 * @description	미결
 * @param		{Number}	pDay
 * @returns		{String}
 * @example		미결
 */
function DateString(pDay) {
	var wDate = pDay;
	var wYear= wDate.getFullYear();
	var wMonth = wDate.getMonth() + 1;
	var wDay = wDate.getDate();

	var rtnStr = "" + wYear;

	if (wMonth < 10) {
		rtnStr = rtnStr + "0" + wMonth;
	} else {
		rtnStr = rtnStr + wMonth;
	}
	if (wDay < 10) {
		rtnStr = rtnStr + "0" + wDay;
	} else {
		rtnStr = rtnStr + wDay;
	}

	return rtnStr;
};

/**
 * @description	미결
 * @param		{Number}	pDay
 * @returns		{String}
 * @example		미결
 */
function TimeString(pDay) {
	var wDate = pDay;
	var wHour = wDate.getHours();
	var wMinute = wDate.getMinutes();
	var wSecond = wDate.getSeconds();

	var rtnStr = "";

	if (wHour < 10) {
		rtnStr = rtnStr + "0" + wHour;
	} else {
		rtnStr = rtnStr + wHour;
	}
	if (wMinute < 10) {
		rtnStr = rtnStr + "0" + wMinute;
	} else {
		rtnStr = rtnStr + wMinute;
	}
	if (wSecond < 10) {
		rtnStr = rtnStr + "0" + wSecond;
	} else {
		rtnStr = rtnStr + wSecond;
	}

	return rtnStr;
};
/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
function getDate() {
	var d = new Date();
	var s = ""
			//년도(4자리) + 월(2자리) + 일(2자리)
			+ leadingZeros(d.getFullYear(), 4) + leadingZeros(d.getMonth() + 1, 2) + leadingZeros(d.getDate(), 2)
			//시,시간(2자리) + 분(2자리) + 초(2자리)
			+ leadingZeros(d.getHours(), 2) + leadingZeros(d.getMinutes(), 2) + leadingZeros(d.getSeconds(), 2);
	d = null; //메모리 해제
	
	return s;
}

/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
function now() {
	var nowDate = new Date();
	var now = "";
	now += nowDate.getFullYear() + "";
	now += ((nowDate.getMonth() + 1) < 10 ? "0" : "")
			+ (nowDate.getMonth() + 1);
	now += (nowDate.getDate() < 10 ? "0" : "") + nowDate.getDate();
	now += (nowDate.getHours() < 10 ? "0" : "") + nowDate.getHours();
	now += (nowDate.getMinutes() < 10 ? "0" : "") + nowDate.getMinutes();
	now += (nowDate.getSeconds() < 10 ? "0" : "") + nowDate.getSeconds();

	return now;
};

/**
 * 입력된 날자에 OffSet 으로 지정된 만큼의 달을 더하는 Basic API 입니다.
 * 
 * DateTime(nYear,nMonth,nDay);
 * DateTime(nYear,nMonth,nDay,nHour,nMinute,nSecond); DateTime(strDate);
 * DateTime(dDate);
 * 
 * @return (Date)
 */
function dataTime() {
	var args = Array.prototype.slice.call(arguments);
	
	if (args.length.length == 6) {
		return new Date(parseInt(args[0]), parseInt(args[1]), parseInt(args[2]), parseInt(args[3]), parseInt(args[4]), parseInt(args[5]), 0);
	} else if (args.length.length == 3) {
		return new Date(parseInt(args[0]), parseInt(args[1]), parseInt(args[2]));
	} else if (args.length.length == 1) {
		if (args[0] instanceof String) {
			var str = args[0].replace(/\-/g, "");
			
			var yyyy = (str.length > 0 ? parseInt(str.substring(0, 4)) : 0);
			var mm = (str.length > 0 ? parseInt(str.substring(4, 6)) : 0);
			var dd = (str.length > 0 ? parseInt(str.substring(6, 8)) : 0);
			var hh = (str.length > 0 ? parseInt(str.substring(8, 10)) : 0);
			var nn = (str.length > 0 ? parseInt(str.substring(10, 12)) : 0);
			var ss = (str.length > 0 ? parseInt(str.substring(12, 14)) : 0);
			
			str = null;

			return new Date(yyyy, mm, dd, hh, nn, ss, 0);

		} else if (args[0] instanceof Number) { // 숫자인 경우 1900년 1월1일 0시 이후의 일수를 더한다
			var days = args[0];
			var wDate = new Date("0000-01-01");
			
			wDate.setDate(wDate.getDate() + days)

			return wDate;
		}
	}
	
	return new Date();
}

/**
 * @description	미결
 * @param		{Number}	pintYY
 * @param		{Number}	pintMM
 * @returns		{Number}	
 * @example		미결
 */
function lastDay(pintYY, pintMM){
	return (new Date(pintYY, pintMM, 0)).getDate();
}
/**
 * @description	미결
 * @param 		{number}	str
 * @return		{number}
 * @example		미결
 */
function getDay(str) {
	var wTemp = str.replace(/\-/g, "");
	
	var yyyy = (wTemp.length >= 4 ? parseInt(wTemp.substring(0, 4)) : 0);
	var mm = (wTemp.length >= 6 ? parseInt(wTemp.substring(4, 6)) - 1 : 0);
	var dd = (wTemp.length >= 8 ? parseInt(wTemp.substring(6, 8)) : 0);
	var hh = (wTemp.length >= 10 ? parseInt(wTemp.substring(8, 10)) : 0);
	var nn = (wTemp.length >= 12 ? parseInt(wTemp.substring(10, 12)) : 0);
	var ss = (wTemp.length >= 14 ? parseInt(wTemp.substring(12, 14)) : 0);
	
	return new Date(yyyy, mm, dd, hh, nn, ss, 0).getDay();
}

/**
 * @description	미결
 * @param		{String}	date
 * @param		{String}	isFull
 * @returns		{String}	
 * @example		미결
 */
function getWeekCharacter(date, isFull){
	if ((date + "").trim().length < 8)
		return "";

	date = date.replace(/\-/g, "");
	isFull = (isFull + "").toUpperCase();
	var year = date.substring(0, 4) * 1;
	var month = (date.substring(4, 6) * 1) - 1;
	var day = date.substring(6, 8) * 1;
	var dt = new Date(year, month, day);
	var week = "";

	switch (dt.getDay()) {
	case 0:
		week = (isFull == "S") ? "일" : "일요일";
		break;
	case 1:
		week = (isFull == "S") ? "월" : "월요일";
		break;
	case 2:
		week = (isFull == "S") ? "화" : "화요일";
		break;
	case 3:
		week = (isFull == "S") ? "수" : "수요일";
		break;
	case 4:
		week = (isFull == "S") ? "목" : "목요일";
		break;
	case 5:
		week = (isFull == "S") ? "금" : "금요일";
		break;
	case 6:
		week = (isFull == "S") ? "토" : "토요일";
		break;
	default:
		week = "";
	}

	return week;
}

/**
 * @description	미결
 * @param		{Object}	target
 * @param		{String}	arrFromStrings
 * @param		{String}	arrToStrings
 * @returns		{String}	
 * @example		미결
 */
function escapeCharacter(target, arrFromStrings, arrToStrings) {
	var wReturn = ""+target;
	for (var i = 0; i < arrFromStrings.length; i++) {
		if (wReturn.indexOf(arrFromStrings[i]))
			wReturn = wReturn.replaceWord(arrFromStrings[i], arrToStrings[i]);
	}
	return wReturn;

};

/**
 * @description	미결
 * @param 		{number}	millisecond
 * @return	 	{String}
 * @example		미결
 */
function timeEncodeString(millisecond) {
	var scnds = millisecond || (new Date()).getTime();
	var strs = [ "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "Q", "W",
			"E", "R", "T", "Y", "U", "I", "O", "P", "A", "S", "D", "F", "G",
			"H", "J", "K", "L", "Z", "X", "C", "V", "B", "N", "M" ];
	var dgit = strs.length;
	var wReturn = "";

	while (scnds > 0) {
		wReturn += strs[scnds % dgit];
		scnds = Math.floor(scnds / dgit);
	}
	
	while (wReturn.length < 8)
		wReturn += "0";
	
	if (wReturn.length > 8)
		wReturn = wReturn.substring(0, 8);

	return "[" + wReturn + "_)";
};

/**
 * @description	미결
 * @param 		{String}	text
 * @return 		{Object}
 * @example		미결
 */
function timeDecodeString(text) {
	return (text.length > 11 && text.startsWith("[") && text.indexOf("_)") >= 0 ? text.substring(11) : text);
}
/**
 * @description	미결
 * @param 		{String}	text
 * @return 		{Object}
 * @example		미결
 */
function hasTimeEncodeString(text) {
	return (text.length > 11 && text.startsWith("[") && text.indexOf("_)") == 9);
}

/**
 * @description	미결
 * @param 		{Object}	tagObject
 * @return 		{Object}
 * @example		미결
 */
function getComputedStyleSize(tagObject) {
	return (window.getComputedStyle(tagObject) ? window.getComputedStyle(tagObject) : tagObject.style);
}

/**
 * @description	미결
 * @param 		{Object}	tagObject
 * @return 		{Object}
 * @example		미결
 */
function getStyle(tagObject) {
	return getComputedStyleSize(tagObject);
}

function getStyleProp(el, prop){
	if( getComputedStyle !== 'undefined' ){
		return getComputedStyle(el, null).getPropertyValue(prop);
	}
	else{
		return el.currentStyle[prop];
	}
	
	return null;
}

/**
 * @description	미결
 * @param		{Object}	em
 * @param 		{Object}	tagObject
 * @return 		{number}
 * @example		미결
 */
function getItemIndex(em, tagName) {
	var index = -1;
	var parentEm = em.parentNode;
	
	if( parentEm.hasChildNodes() ){
		for (var i = 0; i < parentEm.childNodes.length; i++) {
			var wEm = parentEm.childNodes[i];
			if (wEm.tagName == undefined)
				continue;

			if (wEm.tagName.toUpperCase() == tagName.toUpperCase())
				index++;
			if (em == wEm)
				break;
		}
	}

	return index;
};

// 화면상 객체의 위치 찾기
/*
 * 사용방법 : var obj = getBoundsObject(btn); alert(obj.top + ' ' + obj.left + ' ' +
 * obj.width + ' ' + obj.height);
 */
/**
 * @description	미결
 * @param 		{Object}	obj
 * @return 		{Object}
 * @example		미결
 */
function getBoundsObject(obj) {
	/*
	 * var locations = new Object();
	 * if (obj != null && obj != undefined) { if (obj.getBoundingClientRect) {
	 * //IE, FF3 var rect = obj.getBoundingClientRect(); locations.left =
	 * rect.left + (document.documentElement.scrollLeft ||
	 * document.body.scrollLeft); locations.top = rect.top +
	 * (document.documentElement.scrollTop || document.body.scrollTop);
	 * locations.width = rect.right - rect.left; locations.height = rect.bottom -
	 * rect.top + 1; } else if (document.getBoxObjectFor) { // gecko 엔진 기반 FF3제외
	 * var boxObjectFor = document.getBoxObjectFor(obj); locations.left =
	 * boxObjectFor.x; locations.top = boxObjectFor.y; locations.width =
	 * boxObjectFor.width; locations.height = boxObjectFor.height; } else {
	 * locations.left = obj.offsetLeft; locations.top = obj.offsetTop;
	 * locations.width = obj.offsetWidth; locations.height = obj.offsetHeight +
	 * 3;
	 * 
	 * var parent = obj.offsetParent;
	 * 
	 * if (parent != obj) { while (parent) { locations.left +=
	 * parent.offsetLeft; locations.top += parent.offsetTop; parent =
	 * parent.offsetParent; } }
	 *  // 오페라와 사파리의 'absolute' postion의 경우 body의 offsetTop을 잘못 계산 보정 var ua =
	 * navigator.userAgent.toLowerCase();
	 * 
	 * if (ua.indexOf('opera') != -1 || (ua.indexOf('safari') != -1 &&
	 * getStyle(obj, 'position') == 'absolute')) { locations.top -=
	 * document.body.offsetTop; }
	 *  } return locations; }
	 */
	
	var locations = {};

	if (obj != null && obj != undefined) {
		var rect = obj.getBoundingClientRect();

		locations.left = rect.left + (document.documentElement.scrollLeft || document.body.scrollLeft);
		locations.top = rect.top + (document.documentElement.scrollTop || document.body.scrollTop);
		locations.width = rect.right - rect.left;
		locations.height = rect.bottom - rect.top;
		
		rect = null;
	}

	return locations;
};

function getOffsetLeft(elem){
	var offsetLeft = 0;
	
	do{	if( !isNaN(elem.offsetLeft) ){
			offsetLeft += elem.offsetLeft;
		}
	}while(elem = elem.offsetParent);
	
	return offsetLeft;
}

function getOffsetTop(elem){
	var offsetTop = 0;

	do{	if( !isNaN(elem.offsetTop) ){
			offsetTop += elem.offsetTop;
		}
	}while(elem = elem.offsetParent);

	return offsetTop;
}

/**
 * @description	미결
 * @param 		{String}	where
 * @param 		{Object}	obj
 * @param 		{String}	insertHtml
 * @example		미결
 */
function insertAdjacentElement(where, obj, insertHtml) {
	// var range = document.createRange();
	// var docFragmentToInsert = range.createContextualFragment (insertHtml);
	var docFragmentToInsert = insertHtml;

	switch (where) {
	case "beforeBegin":
		obj.parentNode.insertBefore(docFragmentToInsert, obj);
		break;
	case "afterBegin":
		obj.insertBefore(docFragmentToInsert, obj.firstChild);
		break;
	case "beforeEnd":
		obj.appendChild(docFragmentToInsert);
		break;
	case "afterEnd":
		if (obj.nextSibling)
			obj.parentNode.insertBefore(docFragmentToInsert, obj.nextSibling);
		else
			obj.parentNode.appendChild(docFragmentToInsert);
		break;
	}
};

/**
 * @description	미결
 * @param		{object}	tagObject
 * @returns		{Undefined}	
 * @example		미결
 */
function removeTag(tagObject) {
	if (tagObject.parentNode)
		tagObject.parentNode.removeChild(tagObject);
}
/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
function decode() {
	var args = Array.prototype.slice.call(arguments);
	var retVal = null;

	if (args.length < 3)
		return retVal;

	var stdVal = args[0];
	var argsLength = args.length;
	for (var i = 1; i < argsLength - 1; i = i + 2) {
		if (args[i] === stdVal)
			return args[i + 1];
	}

	if ((argsLength - 1) % 2 == 1) {
		retVal = args[args.length - 1];
	}

	return retVal;
}

/**
 * @description	미결
 * @param 		{String}	strSize
 * @return 		{String}
 * @example		미결
 */
function parseIntSize(strSize) {
	if (strSize.length > 2 && strSize.substring(strSize.length - 2, strSize.length) == "px") {
		strSize = strSize.substring(0, strSize.length - 2);
	} else if (strSize.length > 2 && strSize.substring(strSize.length - 2, strSize.length) == "pt") {
		strSize = strSize.substring(0, strSize.length - 2);
	}
	
	return parseInt(strSize);
}
/**
 * @description	미결
 * @param 		{number}	varDate
 * @return		{number}
 * @example		미결
 */
function parseDateTime(varDate) {
	var wDate = null;
	if (typeof varDate === "string") {
		// wDate = getDay(varDate);
		varDate = varDate.replace(/[/-\s:]/g, "");
		
		var yyyy = (varDate.length >= 4 ? parseInt(varDate.substring(0, 4)) : 0);
		var mm = (varDate.length >= 6 ? parseInt(varDate.substring(4, 6)) - 1 : 0);
		var dd = (varDate.length >= 8 ? parseInt(varDate.substring(6, 8)) : 0);
		var hh = (varDate.length >= 10 ? parseInt(varDate.substring(8, 10)) : 0);
		var nn = (varDate.length >= 12 ? parseInt(varDate.substring(10, 12)) : 0);
		var ss = (varDate.length >= 14 ? parseInt(varDate.substring(12, 14)) : 0);
		
		wDate = new Date(yyyy, mm, dd, hh, nn, ss, 0);
	} else if (typeof varDate === "number") {
		if (varDate > 10000000 && varDate < 99999999) {
			wDate = getDay("" + varDate);
		} else {
			wDate = new Date("0000-01-01")
			wDate.setDate(wDate.getDate() + varDate)
		}
	}
	
	return wDate;
}

//사용방법 makeEventHandler("Sheet_1", "ColChange", "colNumFrom", "colNumTo");
/**
 * @description	미결
 * @param		{String}	control
 * @param		{String}	eventName
 * @return		{void}
 * @example		미결
 */
function makeEventHandler(control, eventName) {
	// functionname : [makeEventHandler]

	var strHungarian_EventName = eventName;
	var strLowerCase_EventName = eventName.toLowerCase();
	var strParamBuffer = "";

	var args = Array.prototype.slice.call(arguments);

	try {
		if (typeof DataSet == "function" && control instanceof DataSet) {
			control.controlId = control.id;
		}
	} catch (e) {
	}

	for (var i = 2; i < args.length; i++) {
		strParamBuffer += (i == 2 ? "" : ", ") + args[i];
	}
	control["has" + strHungarian_EventName + "Event"] = false;
	control["fnc" + strHungarian_EventName + "Event"] = null;

	try {
		if (eval(control.controlId
				+ (eventName.substring(0, 3).toUpperCase() == "CAN" ? "_"
						: "_on") + strLowerCase_EventName))

			control["has" + strHungarian_EventName + "Event"] = true;

	} catch (e) {
	}
	if (control["has" + strHungarian_EventName + "Event"]) {
		control["fnc" + strHungarian_EventName + "Event"] = eval(control.controlId
				+ (eventName.substring(0, 3).toUpperCase() == "CAN" ? "_"
						: "_on") + strLowerCase_EventName);
	}

	return;
}

if( typeof Math.trunc == "undefined" ){
	Math.trunc = function(value) {
		return ((value + "").replace(/,/g, "").match(/^\d*/) * 1);
	};
}

//정규식 문자열 ESCAPE
//예: var regex= new RegExp(RegExp.escape("[Munees]waran"));
if(typeof RegExp.escape == "undefined"){
	RegExp.escape = function(str) {
		var specials = [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\' ];
		
		if (!arguments.callee.sRE) {
			arguments.callee.sRE = new RegExp('(\\' + specials.join('|\\') + ')', 'gim');
		}
		
		return str.replace(arguments.callee.sRE, '\\$1');
	}
}

if( typeof Object.equals == "undefined" ){
	Object.equals = function(x, y) {
		if( x === y ) return true;
		
		if( !(x instanceof Object) || !(y instanceof Object) )
			return false;
		
		if( x.constructor !== y.constructor )
			return false;
		
		var p = null;
		
		for(p in x){
			if( !x.hasOwnProperty(p) )
				continue;
			if( !y.hasOwnProperty(p) )
				return false;
			if( x[p] === y[p] )
				continue;
			if( !Object.equals(x[p], y[p]) )
				return false;
		}
		
		for(p in y){
			if( y.hasOwnProperty(p) && !x.hasOwnProperty(p) )
				return false;
		}
		
		return true;
	};
}

if (typeof Object.assign != 'function') {
	  // Must be writable: true, enumerable: false, configurable: true
	  Object.defineProperty(Object, "assign", {
	    value: function assign(target, varArgs) { // .length of function is 2
	      'use strict';
	      if (target == null) { // TypeError if undefined or null
	        throw new TypeError('Cannot convert undefined or null to object');
	      }

	      var to = Object(target);

	      for (var index = 1; index < arguments.length; index++) {
	        var nextSource = arguments[index];

	        if (nextSource != null) { // Skip over if undefined or null
	          for (var nextKey in nextSource) {
	            // Avoid bugs when hasOwnProperty is shadowed
	            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
	              to[nextKey] = nextSource[nextKey];
	            }
	          }
	        }
	      }
	      return to;
	    },
	    writable: true,
	    configurable: true
	  });
	}
function cloneJSon(){
	return Object.assign({}, src);
}

/**
 * @description	미결
 * @return		{Object}
 * @example		미결
 */
function getContextPath() {
	var offset = location.href.indexOf(location.host) + location.host.length;
	var ctxPath = location.href.substring(offset, location.href.indexOf('/', offset + 1));
	
	return ctxPath;
};
/**
 * @description	미결
 * @param		{String}	paramKey
 * @param		{String}	isSearchParent
 * @return		{boolean}
 * @example		미결
 */
function IsExistVar(paramKey, isSearchParent) {
	var key = "";

	// 현재 창에서 파라메터 검사
	for (key in parameters) {
		if (typeof (parameters[key]) == "function")
			continue;
		// 파라메처 찾음
		if (key == paramKey)
			return true;
	}

	// 부모까지 검사
	if (isSearchParent) {
		var wd = null;
		// window.opener 검사
		wd = window.opener;
		while (wd != null) {
			var wdParameters = wd.parameters;
			// 파라메터 검사
			for (key in wdParameters) {
				if (typeof (wdParameters[key]) == "function")
					continue;
				// 파라메터 찾음
				if (key == paramKey)
					return true;
			}
			// 파라메터를 찾지 못한 경우 부모의 부모창을 다시 검사
			wd = wd.opener;
		}
		// window.parent 검사
		wd = window.parent;
		while (wd != null) {
			var wdParameters = wd.parameters;
			// 파라메터 검사
			for (key in wdParameters) {
				if (typeof (wdParameters[key]) == "function")
					continue;
				// 파라메터 찾음
				if (key == paramKey)
					return true;
			}
			// 부모와 자신 window 객체가 같다면 검사 안 함
			if (wd === wd.parent)
				break;
			// 파라메터를 찾지 못한 경우 부모의 부모창을 다시 검사
			else
				wd = wd.parent;
		}
	}

	// 리턴 : true(파라메터 존재함) / false(파라메터 존재하지 않음)
	return false;
}

/**
 * @description	미결
 * @param		{Number}	pWidth
 * @param		{Number}	pHeight
 * @param		{String}	pURL
 * @param		{String}	pName
 * @returns		{Void}
 * @example		미결
 */
function showDialogBox(pWidth, pHeight, pURL, pName) {
	var wTop = null;
	var wLeft = null;
	var WinCondition = null;
	
	wLeft = (self.screen.availWidth - 10 - pWidth) / 2;
	wTop = (self.screen.availHeight - 50 - pHeight) / 2;
	WinCondition = "toolbar=no," + "status=yes," + "alwaysRaised=yes," + "resizable=no," + "scrollbars=no,"
				 + "top=" + wTop + "px," + "left=" + wLeft + "px," + "width=" + pWidth + "px," + "height="+ pHeight + "px";
	
	open(pURL, pName + (new Date()).valueOf(), WinCondition);
	
	return;
};

function golink(em) {
	if (em.value == "") return;
	
	top.callForm(em.value, em.options[em.selectedIndex].text, em.options[em.selectedIndex].getAttribute("menuid"));
	
	em.value = "";
}

function callForm(systemFormID, title) {
	var url = "FlexForm_" + systemFormID + "_Load.do?t=" + encodeURI(encodeURIComponent(title));
	
	self.location.href = url;
}

function GetURLParameter(sParam) {
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam) {
            return sParameterName[1];
        }
    }
}

function loadScript(url, callback) {
	var script = document.createElement("script");
	script.type = "text/javascript";
	
	if(script.readyState) {
		if(script.readyState == 'loaded' || script.readyState == 'complete') {
			script.onreadystatechange = null;
			callback();
		}
	} else {
		script.onload = function() {
			callback();
		}
	}
	
	script.src = url;
	document.getElementsByTagName('head')[0].appendChild(script);
}var BrowserDetect = {
	init: function () {
		this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
		this.version = this.searchVersion(navigator.userAgent)
			|| this.searchVersion(navigator.appVersion)
			|| "an unknown version";
		this.OS = this.searchString(this.dataOS) || "an unknown OS";
	},
	searchString: function (data) {
		for (var i=0;i<data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if (dataString.indexOf(data[i].subString) != -1)
					return data[i].identity;
			}
			else if (dataProp)
				return data[i].identity;
		}
		return true;
	},
	searchVersion: function (dataString) {
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return 0.0;
		return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
	},
	dataBrowser: [
  		{
			string: navigator.userAgent,
			subString: "Trident",
			identity: "Explorer",
			versionSearch: " rv"
		},
		{
			string: navigator.userAgent,
			subString: "Edge",
			identity: "Explorer",
			versionSearch: " Edge"
		},
		{
			string: navigator.userAgent,
			subString: "Chrome",
			identity: "Chrome"
		},
		{ 	string: navigator.userAgent,
			subString: "OmniWeb",
			versionSearch: "OmniWeb/",
			identity: "OmniWeb"
		},
		{
			string: navigator.vendor,
			subString: "Apple",
			identity: "Safari",
			versionSearch: "Version"
		},
		{
			string: navigator.userAgent,
			subString: "Opera",
			prop: window.opera,
			identity: "Opera",
			versionSearch: "Version"
		},
		{
			string: navigator.vendor,
			subString: "iCab",
			identity: "iCab"
		},
		{
			string: navigator.vendor,
			subString: "KDE",
			identity: "Konqueror"
		},
		{
			string: navigator.userAgent,
			subString: "Firefox",
			identity: "Firefox"
		},
		{
			string: navigator.vendor,
			subString: "Camino",
			identity: "Camino"
		},
		{		// for newer Netscapes (6+)
			string: navigator.userAgent,
			subString: "Netscape",
			identity: "Netscape"
		},
		{
			string: navigator.userAgent,
			subString: "MSIE",
			identity: "Explorer",
			versionSearch: "MSIE"
		},
		{
			string: navigator.userAgent,
			subString: "Gecko",
			identity: "Mozilla",
			versionSearch: "rv"
		},
		{ 		// for older Netscapes (4-)
			string: navigator.userAgent,
			subString: "Mozilla",
			identity: "Netscape",
			versionSearch: "Mozilla"
		}
	],
	dataOS : [
		{
			string: navigator.platform,
			subString: "Win",
			identity: "Windows"
		},
		{
			string: navigator.platform,
			subString: "Mac",
			identity: "Mac"
		},
		{
			   string: navigator.userAgent,
			   subString: "iPhone",
			   identity: "iPhone/iPod"
	    },
		{
			string: navigator.platform,
			subString: "Linux",
			identity: "Linux"
		}
	]

};

var browserDetect = BrowserDetect;
browserDetect.init();

var isMobile = {
	    Android: function() {
	        return navigator.userAgent.match(/Android/i);
	    },
	    BlackBerry: function() {
	        return navigator.userAgent.match(/BlackBerry/i);
	    },
	    iOS: function() {
	        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
	    },
	    Opera: function() {
	        return navigator.userAgent.match(/Opera Mini/i);
	    },
	    Windows: function() {
	        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
	    },
	    any: function() {
	        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
	    }
};    // 강제로 ASYNC가 일어날 상황
    var AJAX_ASYNCMODE_BYFORCE  = true;
    var AJAX_ASYNCMODE_RELEASE = false;
    var syncModeByForce = AJAX_ASYNCMODE_RELEASE;

    var request_aborted = false;
    /**
     * @description	미결
     * @returns 	{boolean}
     * @example		미결
     */
    function newXMLHttpRequest() {
	    var xmlreq = false;
	    if (window.XMLHttpRequest) {
	        xmlreq = new XMLHttpRequest();
	    } else if (window.ActiveXObject) {
	        try {
	            xmlreq = new ActiveXObject("Msxml2.XMLHTTP");
	        } catch (e1) {
	            try {
	                xmlreq = new ActiveXObject("Microsoft.XMLHTTP");
	            } catch (e2) {
	            }
	        }
	    }
	     
	    return xmlreq;
	};

	/**
	 * @description	미결
	 * @param 		{number}	req
	 * @param 		{Object}	pObject
	 * @param 		{Object}	pFlag
	 * @returns 	{undefined}
	 * @example		미결
	 */
    function getReadyStateHandler(req, pObject, pFlag) {

  	  return function () {
  		  
  		if (req == null || req == undefined) return;
  		
  		progressMessage(req.readyState);

  		if (req.readyState == 4) {
  	    	//hideAjaxBox();
            if (request_aborted){
            	var message = getText("message_ajax_105", "서버와의 통신이 원활하지 않습니다. \r\n 다시 시도해 주세요.");
            	pObject.parseData(null, message, pFlag);
            	request_aborted = false;
            	//if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) req.abort();
            	
            	req.onreadystatechange = null;
            	req = null;
            	pObject = null;
            	pFlag = null;
            	
            	
            	hideAjaxBox();
                return;
            }
  	        if (req.status == 200) {
  	        	
  	            var wInfo = req.responseText;
  	            //window.clipboardData.setData("Text", wInfo);

                if (wInfo.trim().length == 0){
                	var message = getText("message_ajax_001", "서버에서 조회할 데이터가 없습니다.");
                	pObject.parseData(null, message, pFlag);
                	//if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) req.abort();
                	
                	req.onreadystatechange = null;
                	req = null;
                	pObject = null;
                	pFlag = null;
                	
                	hideAjaxBox();
                    return;
                }
                
                if (pFlag.substring(0,4).toLowerCase() == "text"){
    				pObject.parseData(wInfo, null, pFlag);
                	
                } else {
                	try {
     				   var jsonActionObject =  eval( "(" + wInfo + ")" );
   				       pObject.parseData(jsonActionObject, null, pFlag);
                	} catch (e){
                		//alert("임시테스팅 메시지입니다. \n 테스트기간: 2/21~2/25\n\n" + wInfo);
                	}
               }
               //if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) req.abort();

  	        } else {
            	var message = getAjaxStatusMessage(req.status);
            	
            	pObject.parseData(null, message);
  	        }
        	
        	if (BrowserDetect.browser == "Explorer" && BrowserDetect.version <= 6){
        		// 통과
        	} else {
        		req.onreadystatechange = null;
    	    	req = null;
    	    	pObject = null;
    	    	pFlag = null;
        	};

  	    	hideAjaxBox();
  	    }
  	  };
  	};
  	
  	/**
  	 * @description	미결
  	 * @param 		{Object}	pMethod
  	 * @param 		{Object}	pURL
  	 * @param 		{Object}	pQueryString
  	 * @param 		{Object}	pObject
  	 * @param 		{Object}	pFlag
  	 * @param 		{number}	pTimeout
  	 * @return		{void}
  	 * @example		미결
  	 */
	function ajaxCall(pMethod, pURL, pQueryString, pObject, pFlag, pTimeout) {
		
		// 강제 SYNC 모드이면 
		if (syncModeByForce == AJAX_ASYNCMODE_BYFORCE){
			ajaxCallSync(pMethod, pURL, pQueryString, pObject, pFlag, pTimeout)
			return;
		}
		
		// 여기에 메시지 박스를 넣는 것으로 통일한다 
		showAjaxBox("자료를 조회하는 중입니다.", 0);
		
		if (pTimeout == undefined) pTimeout = 10;
	    var xmlHttp = newXMLHttpRequest();
	    
	    var handlerFunction = getReadyStateHandler(xmlHttp, pObject, pFlag);
	    xmlHttp.onreadystatechange = handlerFunction;
	    
	    try {
	        if(pMethod=='GET'){
	                 xmlHttp.open(pMethod, pURL + "?" + pQueryString, true);
	                 if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
	         	       	xmlHttp.timeout = pTimeout * 1000;
	         	       	xmlHttp.ontimeout = function() {
	         	       		request_aborted = true; this.abort();
	         	       	    pObject = null;
	         	       	    //xmlHttp = null;
	         	        };
	                 }
	                 xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
	                 /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
	                 xmlHttp.setRequestHeader("Connection", "close");*/
	                 xmlHttp.send(null);
	                 
	         } else if(pMethod=='POST')  {
	                 xmlHttp.open(pMethod, pURL, true);
	                 if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
	         	       	xmlHttp.timeout = pTimeout * 1000;
	         	       	xmlHttp.ontimeout = function() {
	         	       		request_aborted = true; this.abort();
	         	       	    this.onreadystatechange = null;
	         	       	    pObject = null;
	         	       	    //xmlHttp = null;
	         	        }
	                 }
	                 if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 9) {
		            	 xmlHttp.setRequestHeader("X-UA-Compatible", "IE=EmulateIE8");
		            	 xmlHttp.setRequestHeader("Cache-Control", "no-store, no-cache, must-revalidate");
		            	 xmlHttp.setRequestHeader("Pragma", "no-cache");
		            	 xmlHttp.setRequestHeader("expires", "-1");
		             }
	                 xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
	                 /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
	                 xmlHttp.setRequestHeader("Connection", "close");*/
	                 xmlHttp.send(pQueryString);
	         }
	    } catch(e) {
  	    	hideAjaxBox();
	        alert(e);
	    }
		pObject = null;
		xmlHttp = null;

		return;
	};
	
	/**
	 * @description	미결
	 * @param		{Object}	pMethod
	 * @param		{Object}	pURL
	 * @param		{Object}	pQueryString
	 * @param		{Object}	pObject
	 * @param		{Object}	pFlag
	 * @param		{number}	pTimeout
	 * @return		{void}
	 * @example		미결
	 */
	function ajaxCallSync(pMethod, pURL, pQueryString, pObject, pFlag, pTimeout) {
		// 여기에 메시지 박스를 넣는 것으로 통일한다 
		showAjaxBox("자료를 조회하는 중입니다.", 0);

		if (pTimeout == undefined) pTimeout = 10;
        var xmlHttp = newXMLHttpRequest();
        
        var handlerFunction = getReadyStateHandler(xmlHttp, pObject, pFlag);
            if(pMethod=='GET'){
                try {
                    if(BrowserDetect.browser != "Firefox"){
                        xmlHttp.onreadystatechange = handlerFunction;
                    }
                    
                    xmlHttp.open(pMethod, pURL + "?" + pQueryString, false);
                    if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
		            	xmlHttp.timeout = pTimeout * 1000;
		            	xmlHttp.ontimeout = function() {
		            		request_aborted = true; this.abort();
	         	       	    this.onreadystatechange = null;
	         	       	    pObject = null;
	         	       	    //xmlHttp = null;
		                }
		            }
                    xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
                    /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
                    xmlHttp.setRequestHeader("Connection", "close");*/
                    xmlHttp.send(null);
                    if(BrowserDetect.browser == "Firefox"){
                        handlerFunction();
                    }
                } catch(e) {
                   alert(e);
                }
            } else if(pMethod=='POST')  {
                try {
                    if(BrowserDetect.browser != "Firefox"){
                        xmlHttp.onreadystatechange = handlerFunction;
                    }
                    
                    xmlHttp.open(pMethod, pURL, false);
                     if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 9) {
                         xmlHttp.setRequestHeader("X-UA-Compatible", "IE=EmulateIE8");
                         xmlHttp.setRequestHeader("Cache-Control", "no-store, no-cache, must-revalidate");
                         xmlHttp.setRequestHeader("Pragma", "no-cache");
                         xmlHttp.setRequestHeader("expires", "-1");
                     }
                     if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
		            	 xmlHttp.timeout = pTimeout * 1000;
		            	 xmlHttp.ontimeout = function() {
		            		 request_aborted = true; this.abort();
		         	       	    this.onreadystatechange = null;
		         	       	    pObject = null;
		         	       	    //xmlHttp = null;
		            	 };
		             }
                     xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
                     /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
                     xmlHttp.setRequestHeader("Connection", "close");*/
                     xmlHttp.send(pQueryString);
                     
                     if(BrowserDetect.browser == "Firefox"){
                         handlerFunction();
                     }
                 } catch(e) {
                       alert(e);
                 }
            }
            
     return;
};

/*
* 
* 
*/

var ajaxBoxCallingCount = 0;
var NEED_COUNT_UP = true;
var NEED_NOT_COUNT_UP = false;

/**
 * @description 미결
 * @param 		{String}	ment
 * @param 		{Number}	delayTime
 * @param 		{Number}	countUp
 * @return		{void}
 * @example		미결
 */
function showAjaxBox(ment, delayTime, countUp){  // countUp: ajaxBoxCallingCount을 증가
    if (delayTime == undefined) delayTime = 0;

    if (countUp == undefined) {
        countUp = NEED_COUNT_UP;
    } else if (typeof(countUp) == "boolean" && countUp == true) {
        countUp = NEED_COUNT_UP;
    } else if (typeof(countUp) == "Number" && countUp != 0) {
        countUp = NEED_COUNT_UP;
    } 

    if(countUp == NEED_COUNT_UP) {
    	ajaxBoxCallingCount++;
    }
    showProgressBar(ment);
    // setTimeout(function(){showProgressBar(ment);}, delayTime);

    //inProcess = true; // setTimeout가 뒤늦게 호출되었을 때, 보일지 구분
    return;
};

/**
 * @description	미결
 * @param 		{String}	ment
 * @return		{undefined}
 * @example		미결
 */
function showProgressBar(ment){
//   if (!inProcess) return;
   
//   debug.enable = true;
//   debug.print("======================================================");
//   debug.printStackTrace();

//   document.getElementsByName("ajaxBox")[0].style.display = "block";
   try {   
		//항상 화면 중앙에 나타나도록 한다
	   var yp=document.body.scrollTop;
	   var xp=document.body.scrollLeft;
	
	   var ws = 0;
	   var hs = 0;
	   
	   if( typeof( window.innerWidth ) == 'number' ) {
	       //Non-IE
	       ws = window.innerWidth;
	       hs = window.innerHeight;
	   } else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
	       //IE 6+ in 'standards compliant mode'
	       ws = document.documentElement.clientWidth;
	       hs = document.documentElement.clientHeight;
	   } else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {
	       //IE 4 compatible
	       ws = document.body.clientWidth;
	       hs = document.body.clientHeight;
	   }
	   
	   var ajaxBox = document.getElementById("ajaxBox");
	   var ajaxBoxMent = document.getElementById("ajaxBoxMent");
	   if (ajaxBoxMent.getElementsByTagName("DIV").length == 0){
		   ajaxBoxMent.innerHTML = "<DIV style='text-align:center;'>.</DIV>" +
		   						   "<img src='"+ getContextPath() + "/winnersoft/images/progressbar.gif'/>" +
		   						   "<BR/><span onclick='javascript:cancelJob();' onmouseover='this.style.fontWeight=\"bold\";this.style.color=\"#4169E1\"' onmouseout='this.style.color=\"#aaaaaa\"' style='font-size:12px;font-weight:bold;cursor:pointer;color:#aaaaaa'></span>";
	   }
	   
	   // 만약 구버전에서 ajaxBoxMent가 ajaxBox내에 있으면 다음으로 뺀다
	   if (ajaxBoxMent.parentNode == ajaxBox){
		   ajaxBox.removeChild(ajaxBoxMent);
		   ajaxBox.insertAdjacentElement('afterEnd', ajaxBoxMent);
	   }
	   
	   if(!ment) ment = getText("message_ajax_002", "잠시만 기다려 주세요");
	   ajaxBoxMent.getElementsByTagName("DIV")[0].innerText = ment;
		   
	   ajaxBox.style.position = "absolute";
	   ajaxBox.style.display = "block";
	   ajaxBox.style.zIndex = 20000;
	   ajaxBox.style.top = 0;
	   ajaxBox.style.left = 0;
	   ajaxBox.style.width = ws +'px';
//	   ajaxBox.style.height = hs-205 +'px';
	   ajaxBox.style.height = hs +'px';
	   ajaxBox.style.marginLeft = "-15px";
//	   ajaxBox.style.width = "100%";//ws +'px';
//	   ajaxBox.style.height = "100%";//hs +'px';
	   
	   ajaxBoxMent.style.position = "absolute";
	   ajaxBoxMent.style.display = "block";
	   ajaxBoxMent.style.zIndex = 20001;
//	   ajaxBoxMent.style.top = yp+(hs/2)-75-102 +'px';   // 파이어폭스, 크롬에서는  'px' 를 붙여줘야한다
	   ajaxBoxMent.style.top = yp+(hs/2)-71 +'px';   // 파이어폭스, 크롬에서는  'px' 를 붙여줘야한다
//	   ajaxBoxMent.style.top = yp+(hs/2)-75 +'px';   // 파이어폭스, 크롬에서는  'px' 를 붙여줘야한다
//	   ajaxBoxMent.style.left = xp+(ws/2)-75 +'px';	 	  
	   ajaxBoxMent.style.left = xp+(ws/2)-50 +'px';	 	  
	   
	   /*var compStyle = ajaxBoxMent.currentStyle ? ajaxBoxMent.currentStyle : getComputedStyle(ajaxBoxMent, null);
	   var wHeight = (compStyle != null &&  compStyle.height.length > 0 ? parseIntSize(compStyle.height) : 70);
	   var wWidth = (compStyle != null &&  compStyle.width.length > 0 ? parseIntSize(compStyle.width) : 400);

	   ajaxBoxMent.style.top  = yp + ((hs - wHeight)/2) +'px'; 
	   ajaxBoxMent.style.left = xp + ((ws - wWidth)/2) +'px';	 	    */
   
   } catch(e){
	   
	   alert(e);
	   
   }
};

/**
 * @description	미결
 * @param		{number}	countUp
 * @return		{void}
 * @example		미결
 */
function hideAjaxBox(countUp){
	
	if(countUp == undefined || typeof(countUp) != "boolean" ) {
		countUp = NEED_COUNT_UP;
	} 
	if (countUp == NEED_COUNT_UP) ajaxBoxCallingCount--;
	
    if (ajaxBoxCallingCount > 0) {
    	return;
    }
    
    hideAjaxBox_timer();
    //setTimeout(function(){hideAjaxBox_timer();}, 0);
    
    return;
};

/**
 * description	미결
 * return		{undefined}
 * example		미결
 */
function hideAjaxBox_timer(){
/*
	debug.enable = true;
	var busy = jobControler.busy;
	busy = busy || objectManager.busy;
	
	for (var wKey in batchWorks){
    	if (batchWorks[wKey] instanceof Function) continue;
    	busy = busy || batchWorks[wKey].busy;
    }
	for (var i = 0; i < charts.length; i++) {
		busy = busy || charts[i].busy;
	}
	for (var i = 0; i < crosssheets.length; i++) {
		busy = busy || crosssheets[i].busy;
	}
	for (var i = 0; i < pictures.length; i++) {
		busy = busy || pictures[i].busy;
	}
	for (var i = 0; i < reports.length; i++) {
		busy = busy || reports[i].busy;
	}
		
	if (busy) return;
 * */    
    
    
    
    document.getElementsByName("ajaxBox")[0].style.display = "none";
    document.getElementsByName("ajaxBoxMent")[0].style.display = "none";
    
   //inProcess = false;
};

//이벤트를 호출한다 (첫번째는 이벤트 함수명, 그다음들은 인수명)
/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
function callEvent(){
	var functionName =  arguments[0]; 
	
	var functionString =  functionName + "("; 
    for (var i = 1; i < arguments.length; i++)
    {
	   if (i > 1) functionString += ",";
	   
	   if (typeof(arguments[i]) == "string"){
		   functionString += "'" + arguments[i].replaceWord("\"", "").replaceWord("\n", "\\n").replaceWord("\'","\\\'") + "'";
	   } else {
		   functionString += arguments[i];
	   }
    }
    functionString +=  ")";

	var checkFunction = false;
	try {
    	if (eval(functionName)) checkFunction = true;
   } catch(e){}
    
   if (checkFunction){
   	eval(functionString);
   }
	    
    return;
};


/**
 * @description	미결
 * @param 		{String}	status
 * @returns 	{String}
 * @example		미결
 */
function getAjaxStatusMessage(status){
	var errInfo = "";

	if (status == 0) {
        errInfo = getText("message_ajax_0", "서버와의 통신이 원활하지 않습니다.\n서버와의 연결을 확인해 주세요.");
    } else if (status == 401) {
        errInfo = getText("message_ajax_401", "오류번호:401\n 권한이 없습니다.");
    } else if (status == 403) {
        errInfo = getText("message_ajax_403", "오류번호:403\n 접근이 금지되었습니다.");
    } else if (status == 404) {
        errInfo = getText("message_ajax_404", "오류번호:404\n URL주소가 잘못되었습니다. 서버가 응답하지 못합니다.."); 
    } else if (status == 301) {
        errInfo = getText("message_ajax_301", "오류번호:301\n URL주소가 영구적으로 변경되었습니다."); 
    } else if (status == 302) {
        errInfo = getText("message_ajax_302", "오류번호:302\n 주소는 맞지만 다른 서버의 URL/URI를 호출 할 수는 없습니다.");
    } else if (status == 305) {
        errInfo = getText("message_ajax_305", "오류번호:305\n 리소스에 접근하기 위하여는 프록시를 설정하여야 합니다.");
    } else if (status == 12001) {
        errInfo = getText("message_ajax_12001", "오류번호:ERROR_INTERNET_OUT_OF_HANDLES\n No more handles could be generated at this time.");	
    } else if (status == 12002) {
        errInfo = getText("message_ajax_12002", "오류번호:ERROR_INTERNET_TIMEOUT\n The request has timed out.");	
    } else if (status == 12003) {
        errInfo = getText("message_ajax_12003", "오류번호:ERROR_INTERNET_EXTENDED_ERROR\n An extended error was returned from the server.");	
    } else if (status == 12004) {
        errInfo = getText("message_ajax_12004", "오류번호:ERROR_INTERNET_INTERNAL_ERROR\n An internal error has occurred.");	
    } else if (status == 12005) {
        errInfo = getText("message_ajax_12005", "오류번호:ERROR_INTERNET_INVALID_URL\n The URL is invalid.");	
    } else if (status == 12006) {
        errInfo = getText("message_ajax_12006", "오류번호:ERROR_INTERNET_UNRECOGNIZED_SCHEME\n The URL scheme could not be recognized or is not supported.");	
    } else if (status == 12007) {
        errInfo = getText("message_ajax_12007", "오류번호:ERROR_INTERNET_NAME_NOT_RESOLVED\n The server name could not be resolved.");	
    } else if (status == 12008) {
        errInfo = getText("message_ajax_12008", "오류번호:ERROR_INTERNET_PROTOCOL_NOT_FOUND\n The requested protocol could not be located.");	
    } else if (status == 12009) {
        errInfo = getText("message_ajax_12009", "오류번호:ERROR_INTERNET_INVALID_OPTION\n A request to InternetQueryOption or InternetSetOption specified an invalid option value.");	
    } else if (status == 12010) {
        errInfo = getText("message_ajax_12010", "오류번호:ERROR_INTERNET_BAD_OPTION_LENGTH\n The length of an option supplied to InternetQueryOption or InternetSetOption is incorrect for the type of option specified.");	
    } else if (status == 12011) {
        errInfo = getText("message_ajax_12011", "오류번호:ERROR_INTERNET_OPTION_NOT_SETTABLE\n The request option cannot be set, only queried.");	
    } else if (status == 12012) {
        errInfo = getText("message_ajax_12012", "오류번호:ERROR_INTERNET_SHUTDOWN\n The Win32 Internet function support is being shut down or unloaded.");	
    } else if (status == 12013) {
        errInfo = getText("message_ajax_12013", "오류번호:ERROR_INTERNET_INCORRECT_USER_NAME\n The request to connect and log on to an FTP server could not be completed because the supplied user name is incorrect.");	
    } else if (status == 12014) {
    	errInfo = getText("message_ajax_12014", "오류번호:ERROR_INTERNET_INCORRECT_PASSWORD\n The request to connect and log on to an FTP server could not be completed because the supplied password is incorrect.");	
    } else if (status == 12015) {
        errInfo = getText("message_ajax_12015", "오류번호:ERROR_INTERNET_LOGIN_FAILURE\n The request to connect to and log on to an FTP server failed.");	
    } else if (status == 12016) {
        errInfo = getText("message_ajax_12016", "오류번호:ERROR_INTERNET_INVALID_OPERATION\n The requested operation is invalid.");	
    } else if (status == 12017) {
        errInfo = getText("message_ajax_12017", "오류번호:ERROR_INTERNET_OPERATION_CANCELLED\n The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.");	
    } else if (status == 12018) {
        errInfo = getText("message_ajax_12018", "오류번호:ERROR_INTERNET_INCORRECT_HANDLE_TYPE\n The type of handle supplied is incorrect for this operation.");	
    } else if (status == 12019) {
        errInfo = getText("message_ajax_12019", "오류번호:ERROR_INTERNET_INCORRECT_HANDLE_STATE\n The requested operation cannot be carried out because the handle supplied is not in the correct state.");	
    } else if (status == 12020) {
        errInfo = getText("message_ajax_12020", "오류번호:ERROR_INTERNET_NOT_PROXY_REQUEST\n The request cannot be made via a proxy.");	
    } else if (status == 12021) {
        errInfo = getText("message_ajax_12021", "오류번호:ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND\n A required registry value could not be located.");	
    } else if (status == 12022) {
        errInfo = getText("message_ajax_12022", "오류번호:ERROR_INTERNET_BAD_REGISTRY_PARAMETER\n A required registry value was located but is an incorrect type or has an invalid value.");	
    } else if (status == 12023) {
        errInfo = getText("message_ajax_12023", "오류번호:ERROR_INTERNET_NO_DIRECT_ACCESS\n Direct network access cannot be made at this time.");	
   	} else if (status == 12024) {
        errInfo = getText("message_ajax_12024", "오류번호:ERROR_INTERNET_NO_CONTEXT\n An asynchronous request could not be made because a zero context value was supplied.");	
   	} else if (status == 12025) {
        errInfo = getText("message_ajax_12025", "오류번호:ERROR_INTERNET_NO_CALLBACK\n An asynchronous request could not be made because a callback function has not been set.");	
   	} else if (status == 12026) {
        errInfo = getText("message_ajax_12026", "오류번호:ERROR_INTERNET_REQUEST_PENDING\n The required operation could not be completed because one or more requests are pending.");	
   	} else if (status == 12027) {
        errInfo = getText("message_ajax_12027", "오류번호:ERROR_INTERNET_INCORRECT_FORMAT\n The format of the request is invalid.");	
   	} else if (status == 12028) {
        errInfo = getText("message_ajax_12028", "오류번호:ERROR_INTERNET_ITEM_NOT_FOUND\n The requested item could not be located.");	
   	} else if (status == 12029) {
        errInfo = getText("message_ajax_12029", "오류번호:ERROR_INTERNET_CANNOT_CONNECT\n The attempt to connect to the server failed.");	
   	} else if (status == 12030) {
        errInfo = getText("message_ajax_12030", "오류번호:ERROR_INTERNET_CONNECTION_ABORTED\n The connection with the server has been terminated.");	
   	} else if (status == 12031) {
        errInfo = getText("message_ajax_12031", "오류번호:ERROR_INTERNET_CONNECTION_RESET\n The connection with the server has been reset.");	
   	} else if (status == 12032) {
        errInfo = getText("message_ajax_12032", "오류번호:ERROR_INTERNET_FORCE_RETRY\n Calls for the Win32 Internet function to redo the request.");	
   	} else if (status == 12033) {
        errInfo = getText("message_ajax_12033", "오류번호:ERROR_INTERNET_INVALID_PROXY_REQUEST\n The request to the proxy was invalid.");	
   	} else if (status == 12036) {
        errInfo = getText("message_ajax_12036", "오류번호:ERROR_INTERNET_HANDLE_EXISTS\n The request failed because the handle already exists.");	
   	} else if (status == 12037) {
   		errInfo = getText("message_ajax_12037", "오류번호:ERROR_INTERNET_SEC_CERT_DATE_INVALID\n SSL certificate date that was received from the server is bad. The certificate is expired.");	
   	} else if (status == 12038) {
   		errInfo = getText("message_ajax_12038", "오류번호:ERROR_INTERNET_SEC_CERT_CN_INVALID\n SSL certificate common name (host name field) is incorrect.");	
   	} else if (status == 12039) {
   		errInfo = getText("message_ajax_12039", "오류번호:ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR\n The application is moving from a non-SSL to an SSL connection because of a redirect.");	
   	} else if (status == 12040) {
   		errInfo = getText("message_ajax_12040", "오류번호:ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR\n The application is moving from an SSL to an non-SSL connection because of a redirect.");	
   	} else if (status == 12041) {
   		errInfo = getText("message_ajax_12041", "오류번호:ERROR_INTERNET_MIXED_SECURITY\n Indicates that the content is not entirely secure.");	
   	} else if (status == 12042) {
   		errInfo = getText("message_ajax_12042", "오류번호:ERROR_INTERNET_CHG_POST_IS_NON_SECURE\n The application is posting and attempting to change multiple lines of text on a server that is not secure.");	
   	} else if (status == 12043) {
   		errInfo = getText("message_ajax_12043", "오류번호:ERROR_INTERNET_POST_IS_NON_SECURE\n The application is posting data to a server that is not secure.");	
   	} else if (status == 12110) {
   		errInfo = getText("message_ajax_12110", "오류번호:ERROR_FTP_TRANSFER_IN_PROGRESS\n The requested operation cannot be made on the FTP session handle because an operation is already in progress.");	
   	} else if (status == 12111) {
   		errInfo = getText("message_ajax_12111", "오류번호:ERROR_FTP_DROPPED\n The FTP operation was not completed because the session was aborted.");	
   	} else if (status == 12150) {
   		errInfo = getText("message_ajax_12150", "오류번호:ERROR_HTTP_HEADER_NOT_FOUND\n The requested header could not be located.");	
   	} else if (status == 12151) {
   		errInfo = getText("message_ajax_12151", "오류번호:ERROR_HTTP_DOWNLEVEL_SERVER\n The server did not return any headers.");	
   	} else if (status == 12152) {
   		errInfo = getText("message_ajax_12152", "오류번호:ERROR_HTTP_INVALID_SERVER_RESPONSE\n The server response could not be parsed.");	
   	} else if (status == 12153) {
   		errInfo = getText("message_ajax_12153", "오류번호:ERROR_HTTP_INVALID_HEADER\n The supplied header is invalid.");	
   	} else if (status == 12154) {
   		errInfo = getText("message_ajax_12154", "오류번호:ERROR_HTTP_INVALID_QUERY_REQUEST\n The request made to HttpQueryInfo is invalid.");	
   	} else if (status == 12155) {
   		errInfo = getText("message_ajax_12155", "오류번호:ERROR_HTTP_HEADER_ALREADY_EXISTS\n The header could not be added because it already exists.");	
    } else if (status == 12156) {
    	errInfo = getText("message_ajax_12156", "오류번호:ERROR_HTTP_REDIRECT_FAILED\n The redirection failed because either the scheme changed or all attempts made to redirect failed");	
    } else {
    	errInfo = getText("message_ajax_999", "알 수 없는 오류\n 오류번호 : {0}", "" + status);
    }  
    return errInfo;
};



/* *****************************************************************************
*  XMLHttpIRequest : 아이프레임을 통한  리퀘스트 
* *****************************************************************************/
/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
function XMLHttpIRequest() {   
	
	this.name = "";
	this.parentNode = document.getElementById("IFrameLayer"); 
    this.method = "";
    this.url = "";
    this.queryString = "";
    
    this.contentType = "";
    this.contentLength = "";
    this.connection = "";
    this.async = true;
    
    this.responseText = "";
    this.readyState = 0;
    this.status = 0;
    
    this.onreadystatechange = null;

	// 이름을 먼저 만든다
    var name = ""; var i = 0;
    name = "IJAX_" + i;
    while(document.getElementsByName(name).length > 0){
    	name = "IJAX_" + (++i);
    }
	this.name = name;

    var iframe = document.createElement("iframe");  
    iframe.name = iframe.id = name;
    this.parentNode.appendChild(iframe);  


    iframe.doc = null;  
    if(iframe.contentDocument) iframe.doc = iframe.contentDocument;           // Firefox, Opera  
    else if(iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer  
    else if(iframe.document) iframe.doc = iframe.document;                    // Others?  
    if(iframe.doc == null)  
       throw getText("message_ajax_003", "문서가 발견되지 않았습니다. IFrame을 만들기 전에 DOM에 DIV(parent element)를 추가하세요"); 

    iframe.doc.open();  
    iframe.doc.close(); 
    
    this.iframe = iframe;
	
	this.open = function(pMethod, pURL, async){
    	// functionname : [XMLHttpIRequest.open]

    	this.method = pMethod;
    	
    	//페이지명에 "_Text"를 붙여서 스트럿츠가 부별하게 해준다.
    	var wUrl = pURL.substring(0,pURL.lastIndexOf(".")) + "_Text" + pURL.substring(pURL.lastIndexOf("."));

        this.async = async;
        if (this.method == "GET"){
            if (pURL.indexOf("?") == 0){
        	    this.url = pURL;
        	    this.queryString = "";
    	    } else {
        	    this.url = pURL.split("\?")[0];
        	    this.queryString = pURL.split("\?")[1];
    	    }

   		    return;
        } else {
        	this.url = pURL;
        	this.queryString = "";
    		return;
        }
        
        
    };
    
    //xmlHttp.setRequestHeader("Content-type", "text/plain; charset=UTF-8");
    this.setRequestHeader = function(headerName, HeaderValue){
    	// functionname : [XMLHttpIRequest.setRequestHeader]
    	if (headerName == "Content-type"){
    		this.contentType = HeaderValue;
    	} else if (headerName == "Content-length"){
    		this.contentLength = HeaderValue;
    	} else if (headerName == "Connection"){
    		this.connection = HeaderValue;
    	} 
    };
    this.send = function(pQueryString){
    	// functionname : [XMLHttpIRequest.send]
    	
    	var iframe = this.iframe;
    	
    	var iframe = this.iframe;
    	iframe.parentObject = this;
        iframe.onload = function(){
        	// functionname : [XMLHttpIRequest.onload]
        	
                this.parentObject.readyState = 4;
                this.parentObject.status = 200;
                this.parentObject.responseText = this.contentDocument.body.innerText;
                this.parentObject.onreadystatechange();
        };
        
        iframe.onreadystatechange = function(){
        	// functionname : [XMLHttpIRequest.onreadystatechange]
        	
	        if (this.readyState == 'complete') {
                this.parentObject.readyState = 4;
                this.parentObject.status = 200;
                this.parentObject.responseText = this.contentWindow.document.body.innerText;
                this.parentObject.onreadystatechange();
            }
        };

        if (this.method == "GET"){
        
        	if (pQueryString == null || pQueryString.trim().length == 0){
        		iframe.src = this.url;
        	} else {
        		iframe.src = this.url + "?" + pQueryString;
        	}
    	} else {
    	
            var frm = iframe.doc.createElement("form");  
            iframe.doc.body.appendChild(frm);  
            
            frm.method = this.method;
            frm.name   = frm.id ="frmbjax" ;
            frm.action = this.url;
            frm.enctype= this.contentType;

            var arrQueryInfos = parseQueryString(pQueryString);
            
            for (var i = 0; i < arrQueryInfos.length; i++){
        	    var QueryInfo = arrQueryInfos[i];
            	
                var wControl = iframe.doc.createElement("input");
                wControl.type = "hidden";  
                wControl.id   = wControl.name = QueryInfo.varName;
                wControl.value = QueryInfo.value;
                frm.appendChild(wControl);
            }
            
            this.frm = frm;
            
    		this.frm.submit();
    	}
    };
 };

 /**
  * @description	미결
  * @param			{String}	str
  * @return			{undefined}
  * @example		미결
  */
 function queryInfo(str){
	 var arrStr = str.split("=");
	 this.varName = arrStr[0];
	 this.value = decodeURIComponent(arrStr[1]);
 };
 
 /**
  * @description	미결
  * @param			{String}	query
  * @return			{String}
  * @example		미결
  */
 function parseQueryString(query){
	 var arrReturn = [];
	 var wQueryElements = query.split("&");
	 
	 var seq = 0;
	 for (var i = 0; i < wQueryElements.length; i++){
		 if (wQueryElements[i].trim().length == 0) continue;
		 if (wQueryElements[i].indexOf("=") == 0) continue;
		 
		 arrReturn[seq++] = new queryInfo(wQueryElements[i]);
	 }
	 
	 return arrReturn;
 };

 /**
  * @description	미결
  * @param 			{String}	readyState
  * @return			{undefined}
  * @example		미결
  */
function progressMessage(readyState){
   if (readyState == 1) {
	   showAjaxBox(getText("message_ajax_101", "서버에 연결중입니다."), 0, NEED_NOT_COUNT_UP);
   } else if (readyState == 2) {
	   showAjaxBox(getText("message_ajax_102", "데이터 요청이 시작되었습니다."), 0, NEED_NOT_COUNT_UP);
   } else if (readyState == 3) {
	   showAjaxBox(getText("message_ajax_103", "수신 중, 서버가 응답을 보내는 중임."), 0, NEED_NOT_COUNT_UP);
   } else if (readyState == 4) {
	   showAjaxBox(getText("message_ajax_104", "수신완료. 자료를 해석중입니다."), 0, NEED_NOT_COUNT_UP);
   } 
};	 


//로케일 메시지 =================================================================================
//사용방법 1(메시지만):         alert(getText("message_ajax_01"));  
//사용방법 2(메시지, 디폴트):  alert(getText("message_ajax_011", "no message"));
//사용방법 3(메시지, 디폴트, 문자열):  alert(getText("message_ajax_01", "{0} message", "XXX"));
//사용방법 4(메시지, 디폴트, 배열):  alert(getText("message_ajax_02", "no message", ["XXX", 2]));
//-----------------------------------------------------------------------------------------------
/**
 * @description	미결
 * @param		{Object}	key
 * @param		{Object}	defaultMsg
 * @param		{number}	params
 * @return		{String}
 * @example		미결
 */
function getText(key, defaultMsg, params){
	var wReturn = "";
	var msgObjectDefined = false;
    try {
    	wReturn = msgObject[key];
    	msgObjectDefined = true;
    } catch (e){}
    
	if (!msgObjectDefined || wReturn == undefined || wReturn == null || wReturn.length==0){
		if (defaultMsg != undefined && defaultMsg.length > 0){
			wReturn = defaultMsg;
		} else {
			wReturn = "";
		}
	}
	if (params != undefined){
		if (isArray(params)){
			for(var i = 0; i < params.length; i++){
				wReturn = wReturn.replaceWord("{" + i + "}", "" + params[i]);
			} 
		} else if (isString(params)){
			wReturn = wReturn.replaceWord("{0}", params);
			
		} else {
			wReturn = wReturn.replaceWord("{0}", "" + params);
			
		} 
	}
	
	return wReturn;
};

/*
 * NumberFormat 1.5.3
 * v1.5.3 - 29-September-2004
 * v1.5.2 - 27-August-2004
 * v1.5.1 - 13-February-2004
 * v1.5.0 - 20-December-2002
 * v1.0.3 - 23-March-2002
 * v1.0.2 - 13-March-2002
 * v1.0.1 - 20-July-2001
 * v1.0.0 - 13-April-2000
 * http://www.mredkj.com
 */
  
/*
 * NumberFormat -The constructor
 * num - The number to be formatted.
 *  Also refer to setNumber
 * inputDecimal - (Optional) The decimal character for the input
 *  Also refer to setInputDecimal
 */
 
/**
 * @description 미결
 * @param		{number}	pNum
 * @return		{string}
 * @example		미결
 */
function RateFormat(pNum){

	var num = new NumberFormat();
	num.setInputDecimal('.');
	num.setNumber(pNum); 
	num.setPlaces('2');
	num.setCurrencyValue('$');
	num.setCurrency(false);
	num.setCurrencyPosition(num.LEFT_OUTSIDE);
	num.setNegativeFormat(num.LEFT_DASH);
	num.setNegativeRed(false);
	num.setSeparators(true, ',', ',');
	return num.toFormatted();

};
/**
 * @description 미결
 * @param		{number}	pNum
 * @return		{string}
 * @example		미결
 */
function AmountFormat(pNum){

	var num = new NumberFormat();
	num.setInputDecimal('.');
	num.setNumber(pNum); 
	num.setPlaces('0');
	num.setCurrencyValue('\\');
	num.setCurrency(false);
	num.setCurrencyPosition(num.LEFT_OUTSIDE);
	num.setNegativeFormat(num.LEFT_DASH);
	num.setNegativeRed(false);
	num.setSeparators(true, ',', ',');
	
	return num.toFormatted();

};
 

/**
 * @description 미결
 * @param		{number}	Num
 * @param		{String}	inputDecimal
 * @return		{string}
 * @example		미결
 */
function NumberFormat(num, inputDecimal)
{
	// constants
	this.COMMA = ',';
	this.PERIOD = '.';
	this.DASH = '-'; // v1.5.0 - new - used internally
	this.LEFT_PAREN = '('; // v1.5.0 - new - used internally
	this.RIGHT_PAREN = ')'; // v1.5.0 - new - used internally
	this.LEFT_OUTSIDE = 0; // v1.5.0 - new - currency
	this.LEFT_INSIDE = 1;  // v1.5.0 - new - currency
	this.RIGHT_INSIDE = 2;  // v1.5.0 - new - currency
	this.RIGHT_OUTSIDE = 3;  // v1.5.0 - new - currency
	this.LEFT_DASH = 0; // v1.5.0 - new - negative
	this.RIGHT_DASH = 1; // v1.5.0 - new - negative
	this.PARENTHESIS = 2; // v1.5.0 - new - negative
	this.NO_ROUNDING = -1; // v1.5.1 - new

	// member variables
	this.num;
	this.numOriginal;
	this.hasSeparators = false;  // v1.5.0 - new
	this.separatorValue;  // v1.5.0 - new
	this.inputDecimalValue; // v1.5.0 - new
	this.decimalValue;  // v1.5.0 - new
	this.negativeFormat; // v1.5.0 - new
	this.negativeRed; // v1.5.0 - new
	this.hasCurrency;  // v1.5.0 - modified
	this.currencyPosition;  // v1.5.0 - new
	this.currencyValue;  // v1.5.0 - modified
	this.places;
	this.roundToPlaces; // v1.5.1 - new

	// external methods
	this.setNumber = setNumberNF;
	this.toUnformatted = toUnformattedNF;
	this.setInputDecimal = setInputDecimalNF; // v1.5.0 - new
	this.setSeparators = setSeparatorsNF; // v1.5.0 - new - for separators and decimals
	this.setCommas = setCommasNF;
	this.setNegativeFormat = setNegativeFormatNF; // v1.5.0 - new
	this.setNegativeRed = setNegativeRedNF; // v1.5.0 - new
	this.setCurrency = setCurrencyNF;
	this.setCurrencyPrefix = setCurrencyPrefixNF;
	this.setCurrencyValue = setCurrencyValueNF; // v1.5.0 - new - setCurrencyPrefix uses this
	this.setCurrencyPosition = setCurrencyPositionNF; // v1.5.0 - new - setCurrencyPrefix uses this
	this.setPlaces = setPlacesNF;
	this.toFormatted = toFormattedNF;
	this.toPercentage = toPercentageNF;
	this.getOriginal = getOriginalNF;
	this.moveDecimalRight = moveDecimalRightNF;
	this.moveDecimalLeft = moveDecimalLeftNF;

	// internal methods
	this.getRounded = getRoundedNF;
	this.preserveZeros = preserveZerosNF;
	this.justNumber = justNumberNF;
	this.expandExponential = expandExponentialNF;
	this.getZeros = getZerosNF;
	this.moveDecimalAsString = moveDecimalAsStringNF;
	this.moveDecimal = moveDecimalNF;
	this.addSeparators = addSeparatorsNF;

	// setup defaults
	if (inputDecimal == null) {
		this.setNumber(num, this.PERIOD);
	} else {
		this.setNumber(num, inputDecimal); // v.1.5.1 - new
	}
	this.setCommas(true);
	this.setNegativeFormat(this.LEFT_DASH); // v1.5.0 - new
	this.setNegativeRed(false); // v1.5.0 - new
	this.setCurrency(false); // v1.5.1 - false by default
	this.setCurrencyPrefix('$');
	this.setPlaces(2);
};

/*
 * setInputDecimal
 * val - The decimal value for the input.
 *
 * v1.5.0 - new
 */
/**
 * @description	미결
 * @param		{String}	val
 * @return		{undefined}
 * @example		미결
 */
function setInputDecimalNF(val)
{
	this.inputDecimalValue = val;
};

/*
 * setNumber - Sets the number
 * num - The number to be formatted
 * inputDecimal - (Optional) The decimal character for the input
 *  Also refer to setInputDecimal
 * 
 * If there is a non-period decimal format for the input,
 * setInputDecimal should be called before calling setNumber.
 *
 * v1.5.0 - modified
 */
/**
 * @description 미결
 * @param		{number}	Num
 * @param		{String}	inputDecimal
 * @return		{undefined}
 * @example		미결
 */
function setNumberNF(num, inputDecimal)
{
	if (inputDecimal != null) {
		this.setInputDecimal(inputDecimal); // v.1.5.1 - new
	}
	
	this.numOriginal = num;
	this.num = this.justNumber(num);
};

/*
 * toUnformatted - Returns the number as just a number.
 * If the original value was '100,000', then this method will return the number 100000
 * v1.0.2 - Modified comments, because this method no longer returns the original value.
 */
/**
 * @description 미결
 * @return		{number}
 * @example		미결
 */
function toUnformattedNF()
{
	return (this.num);
};

/*
 * getOriginal - Returns the number as it was passed in, which may include non-number characters.
 * This function is new in v1.0.2
 */
/**
 * @description 미결
 * @return		{number}
 * @example		미결
 */
function getOriginalNF()
{
	return (this.numOriginal);
};

/*
 * setNegativeFormat - How to format a negative number.
 * 
 * format - The format. Use one of the following constants.
 * LEFT_DASH   example: -1000
 * RIGHT_DASH  example: 1000-
 * PARENTHESIS example: (1000)
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	format
 * @return		{undefined}
 * @example		미결
 */
function setNegativeFormatNF(format)
{
	this.negativeFormat = format;
};

/*
 * setNegativeRed - Format the number red if it's negative.
 * 
 * isRed - true, to format the number red if negative, black if positive;
 *  false, for it to always be black font.
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	isRed
 * @return		{undefined}
 * @example		미결
 */
function setNegativeRedNF(isRed)
{
	this.negativeRed = isRed;
};

/*
 * setSeparators - One purpose of this method is to set a
 *  switch that indicates if there should be separators between groups of numbers.
 *  Also, can use it to set the values for the separator and decimal.
 *  For example, in the value 1,000.00
 *   The comma (,) is the separator and the period (.) is the decimal.
 *
 * Both separator or decimal are not required.
 * The separator and decimal cannot be the same value. If they are, decimal with be changed.
 * Can use the following constants (via the instantiated object) for separator or decimal:
 *  COMMA
 *  PERIOD
 * 
 * isC - true, if there should be separators; false, if there should be no separators
 * separator - the value of the separator.
 * decimal - the value of the decimal.
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	isC
 * @param		{String}	separator
 * @param		{String}	decimal
 * @return		{undefined}
 * @example		미결
 */
function setSeparatorsNF(isC, separator, decimal)
{
	this.hasSeparators = isC;
	
	// Make sure a separator was passed in
	if (separator == null) separator = this.COMMA;
	
	// Make sure a decimal was passed in
	if (decimal == null) decimal = this.PERIOD;
	
	// Additionally, make sure the values aren't the same.
	//  When the separator and decimal both are periods, make the decimal a comma.
	//  When the separator and decimal both are any other value, make the decimal a period.
	if (separator == decimal) {
		this.decimalValue = (decimal == this.PERIOD) ? this.COMMA : this.PERIOD;
	} else {
		this.decimalValue = decimal;
	}
	
	// Since the decimal value changes if decimal and separator are the same,
	// the separator value can keep its setting.
	this.separatorValue = separator;
};

/*
 * setCommas - Sets a switch that indicates if there should be commas.
 * The separator value is set to a comma and the decimal value is set to a period.
 * isC - true, if the number should be formatted with separators (commas); false, if no separators
 *
 * v1.5.0 - modified
 */
/**
 * @description 미결
 * @param		{String}	isC
 * @return		{undefined}
 * @example		미결
 */
function setCommasNF(isC)
{
	this.setSeparators(isC, this.COMMA, this.PERIOD);
};

/*
 * setCurrency - Sets a switch that indicates if should be displayed as currency
 * isC - true, if should be currency; false, if not currency
 */
/**
 * @description 미결
 * @param		{String}	isC
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyNF(isC)
{
	this.hasCurrency = isC;
};

/*
 * setCurrencyPrefix - Sets the symbol for currency.
 * val - The symbol
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyValueNF(val)
{
	this.currencyValue = val;
};

/*
 * setCurrencyPrefix - Sets the symbol for currency.
 * The symbol will show up on the left of the numbers and outside a negative sign.
 * cp - The symbol
 *
 * v1.5.0 - modified - This now calls setCurrencyValue and setCurrencyPosition(this.LEFT_OUTSIDE)
 */
/**
 * @description 미결
 * @param		{String}	cp
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyPrefixNF(cp)
{
	this.setCurrencyValue(cp);
	this.setCurrencyPosition(this.LEFT_OUTSIDE);
};

/*
 * setCurrencyPosition - Sets the position for currency,
 *  which includes position relative to the numbers and negative sign.
 * cp - The position. Use one of the following constants.
 *  This method does not automatically put the negative sign at the left or right.
 *  They are left by default, and would need to be set right with setNegativeFormat.
 *	LEFT_OUTSIDE  example: $-1.00
 *	LEFT_INSIDE   example: -$1.00
 *	RIGHT_INSIDE  example: 1.00$-
 *	RIGHT_OUTSIDE example: 1.00-$
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	cp
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyPositionNF(cp)
{
	this.currencyPosition = cp;
};

/*
 * setPlaces - Sets the precision of decimal places
 * p - The number of places.
 *  -1 or the constant NO_ROUNDING turns off rounding to a set number of places.
 *  Any other number of places less than or equal to zero is considered zero.
 *
 * v1.5.1 - modified
 */
/**
 * @description 미결
 * @param		{String}	p
 * @return		{undefined}
 * @example		미결
 */
function setPlacesNF(p)
{
	this.roundToPlaces = !(p == this.NO_ROUNDING); // v1.5.1
	this.places = (p < 0) ? 0 : p; // v1.5.1 - Don't leave negatives.
};

/*
 * v1.5.2 - new
 *
 * addSeparators
 * The value to be formatted shouldn't have any formatting already.
 *
 * nStr - A number or number as a string
 * inD - Input decimal (string value). Example: '.'
 * outD - Output decimal (string value). Example: '.'
 * sep - Output separator (string value). Example: ','
 */
/**
 * @description 미결
 * @param		{String}	nStr
 * @param		{String}	inD
 * @param		{String}	outD
 * @param		{String}	sep
 * @return		{Object}
 * @example		미결
 */
function addSeparatorsNF(nStr, inD, outD, sep)
{
	nStr += '';
	var dpos = nStr.indexOf(inD);
	var nStrEnd = '';
	if (dpos != -1) {
		nStrEnd = outD + nStr.substring(dpos + 1, nStr.length);
		nStr = nStr.substring(0, dpos);
	}
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(nStr)) {
		nStr = nStr.replace(rgx, '$1' + sep + '$2');
	}
	return nStr + nStrEnd;
};

/*
 * toFormatted - Returns the number formatted according to the settings (a string)
 *
 * v1.5.0 - modified
 * v1.5.1 - modified
 */
/**
 * @description 미결
 * @return		{Object}
 * @example		미결
 */
function toFormattedNF()
{	
	var pos;
	var nNum = this.num; // v1.0.1 - number as a number
	var nStr;            // v1.0.1 - number as a string
	var splitString = new Array(2);   // v1.5.0
	
	// round decimal places - modified v1.5.1
	// Note: Take away negative temporarily with Math.abs
	if (this.roundToPlaces) {
		nNum = this.getRounded(nNum);
		nStr = this.preserveZeros(Math.abs(nNum)); // this step makes nNum into a string. v1.0.1 Math.abs
	} else {
		nStr = this.expandExponential(Math.abs(nNum)); // expandExponential is called in preserveZeros, so call it here too
	}
	
	// v1.5.3 - lost the if in 1.5.2, so putting it back
	if (this.hasSeparators) {
		// v1.5.2
		// Note that the argument being passed in for inD is this.PERIOD
		//  That's because the toFormatted method is working with an unformatted number
		nStr = this.addSeparators(nStr, this.PERIOD, this.decimalValue, this.separatorValue);
	}
	
	// negative and currency
	// $[c0] -[n0] $[c1] -[n1] #.#[nStr] -[n2] $[c2] -[n3] $[c3]
	var c0 = '';
	var n0 = '';
	var c1 = '';
	var n1 = '';
	var n2 = '';
	var c2 = '';
	var n3 = '';
	var c3 = '';
	var negSignL = (this.negativeFormat == this.PARENTHESIS) ? this.LEFT_PAREN : this.DASH;
	var negSignR = (this.negativeFormat == this.PARENTHESIS) ? this.RIGHT_PAREN : this.DASH;
		
	if (this.currencyPosition == this.LEFT_OUTSIDE) {
		// add currency sign in front, outside of any negative. example: $-1.00	
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR;
		}
		if (this.hasCurrency) c0 = this.currencyValue;
	} else if (this.currencyPosition == this.LEFT_INSIDE) {
		// add currency sign in front, inside of any negative. example: -$1.00
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR;
		}
		if (this.hasCurrency) c1 = this.currencyValue;
	}
	else if (this.currencyPosition == this.RIGHT_INSIDE) {
		// add currency sign at the end, inside of any negative. example: 1.00$-
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR;
		}
		if (this.hasCurrency) c2 = this.currencyValue;
	}
	else if (this.currencyPosition == this.RIGHT_OUTSIDE) {
		// add currency sign at the end, outside of any negative. example: 1.00-$
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR;
		}
		if (this.hasCurrency) c3 = this.currencyValue;
	}

	nStr = c0 + n0 + c1 + n1 + nStr + n2 + c2 + n3 + c3;
	
	// negative red
	if (this.negativeRed && nNum < 0) {
		nStr = '<font color="red">' + nStr + '</font>';
	}

	return (nStr);
};

/*
 * toPercentage - Format the current number as a percentage.
 * This is separate from most of the regular formatting settings.
 * The exception is the number of decimal places.
 * If a number is 0.123 it will be formatted as 12.3%
 *
 * !! This is an initial version, so it doesn't use many settings.
 * !! should use some of the formatting settings that toFormatted uses.
 * !! probably won't want to use settings like currency.
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @return		{number}
 * @example		미결
 */
function toPercentageNF()
{
	nNum = this.num * 100;
	
	// round decimal places
	nNum = this.getRounded(nNum);
	
	return nNum + '%';
};

/*
 * Return concatenated zeros as a string. Used to pad a number.
 * It might be extra if already have many decimal places
 * but is needed if the number doesn't have enough decimals. 
 */
/**
 * @description 미결
 * @param		{String}	places
 * @return		{Object}
 * @example		미결
 */
function getZerosNF(places)
{
		var extraZ = '';
		var i;
		for (i=0; i<places; i++) {
			extraZ += '0';
		}
		return extraZ;
};

/*
 * Takes a number that JavaScript expresses in notational format
 * and makes it the full number (as a string).
 * e.g. Makes -1e-21 into -0.000000000000000000001
 *
 * If the value passed in is not a number (as determined by isNaN),
 * this function just returns the original value.
 *
 * Exponential number formats can include 1e21 1e+21 1e-21
 *  where 1e21 and 1e+21 are the same thing.
 *
 * If an exponential number is evaluated by JavaScript,
 * it will change 12.34e-9 to 1.234e-8,
 * which is a benefit to this method, because
 * it prevents extra zeros that occur for certain numbers
 * when using moveDecimalAsString
 *
 * Returns a string.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	origVal
 * @return		{String}
 * @example		미결
 */
function expandExponentialNF(origVal)
{
	if (isNaN(origVal)) return origVal;

	var newVal = parseFloat(origVal) + ''; // parseFloat to let JavaScript evaluate number
	var eLoc = newVal.toLowerCase().indexOf('e');

	if (eLoc != -1) {
		var plusLoc = newVal.toLowerCase().indexOf('+');
		var negLoc = newVal.toLowerCase().indexOf('-', eLoc); // search for - after the e
		var justNumber = newVal.substring(0, eLoc);
		
		if (negLoc != -1) {
			// shift decimal to the left
			var places = newVal.substring(negLoc + 1, newVal.length);
			justNumber = this.moveDecimalAsString(justNumber, true, parseInt(places));
		} else {
			// shift decimal to the right
			// Check if there's a plus sign, and if not refer to where the e is.
			// This is to account for either formatting 1e21 or 1e+21
			if (plusLoc == -1) plusLoc = eLoc;
			var places = newVal.substring(plusLoc + 1, newVal.length);
			justNumber = this.moveDecimalAsString(justNumber, false, parseInt(places));
		}
		
		newVal = justNumber;
	}

	return newVal;
};

/*
 * Move decimal right.
 * Returns a number.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	places
 * @return		{String}
 * @example		미결
 */
function moveDecimalRightNF(val, places)
{
	var newVal = '';
	
	if (places == null) {
		newVal = this.moveDecimal(val, false);
	} else {
		newVal = this.moveDecimal(val, false, places);
	}
	
	return newVal;
};

/*
 * Move decimal left.
 * Returns a number.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	places
 * @return		{String}
 * @example		미결
 */
function moveDecimalLeftNF(val, places)
{
	var newVal = '';
	
	if (places == null) {
		newVal = this.moveDecimal(val, true);
	} else {
		newVal = this.moveDecimal(val, true, places);
	}
	
	return newVal;
};

/*
 * moveDecimalAsString
 * This is used by moveDecimal, and does not run parseFloat on the return value.
 * 
 * Normally a decimal place is moved by multiplying by powers of 10
 * Multiplication and division in JavaScript can result in floating point limitations.
 * So use this method to move a decimal place left or right.
 *
 * Parameters:
 * val - The value to be shifted. Can be a number or a string,
 *  but don't include special characters. It should evaluate to a number.
 * left - If true, then move decimal left. If false, move right.
 * places - (optional) If not included, then use the objects this.places
 *  The purpose is so this method can be used independent of the state of the object.
 *
 * The regular expressions:
 * re1
 * Pad with zeros in case there aren't enough numbers to cover the spaces shift.
 * A left shift pads to the left, and a right shift pads to the right.
 * Can't just concatenate. There might be a negative sign or the value could be an exponential.
 *
 * re2
 * Switch the decimal.
 * Need the first [0-9]+ to force the search to start rightmost.
 * The \.? and [0-9]{} criteria are the pieces that will be switched
 *
 * Other notes:
 * This method works on exponential numbers, e.g. 1.7e-12
 * because the regular expressions only modify the number and decimal parts.
 *
 * Mozilla can't handle [0-9]{0} in the regular expression.
 *  Fix: Since nothing changes when the decimal is shifted zero places, return the original value.
 *
 * IE is incorrect if exponential ends in .
 *  e.g. -8500000000000000000000. should be -8.5e+21
 *  IE counts it as -8.5e+22
 *	Fix: Replace trailing period, if there is one, using replace(/\.$/, '').
 *
 * Netscape 4.74 cannot handle a leading - in the string being searched for the re2 expressions.
 *  e.g. /([0-9]*)(\.?)([0-9]{2})/ should match everything in -100.00 except the -
 *  but it matches nothing using Netscape 4.74.
 *  It might be a combination of the * ? special characters.
 *  Fix: (-?) was added to each of the re2 expressions to look for - one or zero times.
 *
 * Returns a string.
 *
 * v1.5.1 - new
 * v1.5.2 - modified
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	left
 * @param		{String}	places
 * @return		{String}
 * @example		미결
 */
function moveDecimalAsStringNF(val, left, places)
{
	var spaces = (arguments.length < 3) ? this.places : places;
	if (spaces <= 0) return val; // to avoid Mozilla limitation
			
	var newVal = val + '';
	var extraZ = this.getZeros(spaces);
	var re1 = new RegExp('([0-9.]+)');
	if (left) {
		newVal = newVal.replace(re1, extraZ + '$1');
		var re2 = new RegExp('(-?)([0-9]*)([0-9]{' + spaces + '})(\\.?)');		
		newVal = newVal.replace(re2, '$1$2.$3');
	} else {
		var reArray = re1.exec(newVal); // v1.5.2
		if (reArray != null) {
			newVal = newVal.substring(0,reArray.index) + reArray[1] + extraZ + newVal.substring(reArray.index + reArray[0].length); // v1.5.2
		}
		var re2 = new RegExp('(-?)([0-9]*)(\\.?)([0-9]{' + spaces + '})');
		newVal = newVal.replace(re2, '$1$2$4.');
	}
	newVal = newVal.replace(/\.$/, ''); // to avoid IE flaw
	
	return newVal;
};

/*
 * moveDecimal
 * Refer to notes in moveDecimalAsString
 * parseFloat is called here to clear away the padded zeros.
 *
 * Returns a number.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	left
 * @param		{String}	places
 * @return		{Number}
 * @example		미결
 */
function moveDecimalNF(val, left, places)
{
	var newVal = '';
	
	if (places == null) {
		newVal = this.moveDecimalAsString(val, left);
	} else {
		newVal = this.moveDecimalAsString(val, left, places);
	}
	
	return parseFloat(newVal);
};

/*
 * getRounded - Used internally to round a value
 * val - The number to be rounded
 * 
 *  To round to a certain decimal precision,
 *  all that should need to be done is
 *  multiply by a power of 10, round, then divide by the same power of 10.
 *  However, occasional numbers don't get exact results in most browsers.
 *  e.g. 0.295 multiplied by 10 yields 2.9499999999999997 instead of 2.95
 *  Instead of adjusting the incorrect multiplication,
 *  this function uses string manipulation to shift the decimal.
 *
 * Returns a number.
 *
 * v1.5.1 - modified
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{String}
 * @example		미결
 */
function getRoundedNF(val)
{
	val = this.moveDecimalRight(val);
	val = Math.round(val);
	val = this.moveDecimalLeft(val);
	
	return val;
};

/*
 * preserveZeros - Used internally to make the number a string
 * 	that preserves zeros at the end of the number
 * val - The number
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{String}
 * @example		미결
 */
function preserveZerosNF(val)
{
	var i;

	// make a string - to preserve the zeros at the end
	val = this.expandExponential(val);
	
	if (this.places <= 0) return val; // leave now. no zeros are necessary - v1.0.1 less than or equal
	
	var decimalPos = val.indexOf('.');
	if (decimalPos == -1) {
		val += '.';
		for (i=0; i<this.places; i++) {
			val += '0';
		}
	} else {
		var actualDecimals = (val.length - 1) - decimalPos;
		var difference = this.places - actualDecimals;
		for (i=0; i<difference; i++) {
			val += '0';
		}
	}
	
	return val;
};

/*
 * justNumber - Used internally to parse the value into a floating point number.
 * Replace all characters that are not 0-9, a decimal point, or a negative sign.
 *
 *  A number can be entered using special notation.
 *  For example, the following is a valid number: 0.0314E+2
 *
 * v1.0.2 - new
 * v1.5.0 - modified
 * v1.5.1 - modified
 * v1.5.2 - modified
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{String}
 * @example		미결
 */
function justNumberNF(val)
{
	newVal = val + '';
	
	var isPercentage = false;
	
	// check for percentage
	// v1.5.0
	if (newVal.indexOf('%') != -1) {
		newVal = newVal.replace(/\%/g, '');
		isPercentage = true; // mark a flag
	}
		
	// Replace everything but digits - + ( ) e E
	var re = new RegExp('[^\\' + this.inputDecimalValue + '\\d\\-\\+\\(\\)eE]', 'g');	// v1.5.2	
	newVal = newVal.replace(re, '');
	// Replace the first decimal with a period and the rest with blank
	// The regular expression will only break if a special character
	//  is used as the inputDecimalValue
	//  e.g. \ but not .
	var tempRe = new RegExp('[' + this.inputDecimalValue + ']', 'g');
	var treArray = tempRe.exec(newVal); // v1.5.2
	if (treArray != null) {
	  var tempRight = newVal.substring(treArray.index + treArray[0].length); // v1.5.2
		newVal = newVal.substring(0,treArray.index) + this.PERIOD + tempRight.replace(tempRe, ''); // v1.5.2
	}
	
	// If negative, get it in -n format
	if (newVal.charAt(newVal.length - 1) == this.DASH ) {
		newVal = newVal.substring(0, newVal.length - 1);
		newVal = '-' + newVal;
	}
	else if (newVal.charAt(0) == this.LEFT_PAREN
	 && newVal.charAt(newVal.length - 1) == this.RIGHT_PAREN) {
		newVal = newVal.substring(1, newVal.length - 1);
		newVal = '-' + newVal;
	}
	
	newVal = parseFloat(newVal);
	
	if (!isFinite(newVal)) {
		newVal = 0;
  }
	
	// now that it's a number, adjust for percentage, if applicable.
  // example. if the number was formatted 24%, then move decimal left to get 0.24
  // v1.5.0 - updated v1.5.1
  if (isPercentage) {
  	newVal = this.moveDecimalLeft(newVal, 2);
  }
		
	return newVal;
};
    // CALC ?? ????? ?????                 
    var ArrFunctions = ["TIMEDIFF",
                     "DAYDIFF", "REPLACE", "WEEKDAY", "SORTDSC",  
                     "DAYADD", "ISNULL", "FORMER", "DAYSOF", "FORMAT",  
                     "INSTR", "ROUND", "FLOOR", "RIGHT", "MONTH", 
                     "FMONY", "FMONM", "COUNT", "RTRIM", "LTRIM",
                     "UCASE", "LCASE", "SPACE",
                     "KLEN", "LENB", "YEAR", "TRIM", "LEFT", 
                     "CEIL" ,"SORT", "TOPN", "LOWN",       
                     "AVG", "MAX", "MIN", "SUM", "ABS", "MOD", 
                     "MID", "VAL", "STR", "DAY", "LEN", "IIF", "NOW", "INT"
                     ];
    var FUNCTION_COUNT = 46;
    var ArrOperaters = ["^",  "*",  "/",  "\\", "MOD", 
                     "%",  "+",  "-",  "+",  "-", 
                     "&",  "<=", "=<", ">=", "=>", 
                     "<>", "!=", "=",  "<",  ">",
                     "BITAND", "BITOR", "LIKE", "NOT", "AND", "OR"];
                     
    var OPERATER_COUNT = 26;
    // LOGIC?? ????? ?????                 
  	var ArrTypes = ["SMALLINT","INTEGER","MONEY","FLOAT","CHAR","TEXT","DATETIME"];

  	/**
  	 * @class	EasyCalc
  	 * @constructor	
  	 * @description	미결
  	 * @param	{object}	pVariables
  	 * @return	{undefined}
  	 * @example	미결
  	 */
function EXOLogic(pVariables)
{
  	this.State = "";
	
  	this.ArrVNames = [];
  	this.ArrVTypes = [];
  	this.ArrVValues = [];
  	this.ArrVScope = [];
  	
  	this.ArrStringValues = [];
  	
  	// 산식 길이별 결과값 모음, 각 산식은 다시 신식을 키로하는 맵이 들어간다
  	this.arrResults = [];
  	
  	var wArrVariables = pVariables.split(";");

  	for (var i = 0; i < wArrVariables.length; i++){
  	  if (wArrVariables[i].trim().length == 0) break;
  	   
  	  var wArrInfo = wArrVariables[i].split(":");
  	  this.ArrVNames[i] = wArrInfo[0].toUpperCase();
  	  this.ArrVTypes[i] = wArrInfo[1].toUpperCase();
  	  this.ArrVValues[i] = wArrInfo[2];
  	  this.ArrVScope [i]= "0";
  	}
  	
  	wArrVariables.Clear();
  	
};
/**
 * @description	미결
 * @param	{object}	pStatement
 * @return  {string}
 * @example	미결
 */
    EXOLogic.prototype.ExecuteLogic = function(pStatement)
    {
        // functionname : [EXOLogic.ExecuteLogic]

    	var wStatement = pStatement + "";
		var wReturn = "";
    	
		// 산식결과값을 기록한다
		var lengthKey = "" + pStatement.length;
		if (!this.arrResults.hasKey(lengthKey)){
			this.arrResults[lengthKey] = [];
		} else {
			var arrResults1 = this.arrResults[lengthKey];
			if (arrResults1.hasKey(pStatement)){
				return arrResults1[pStatement];
			}			
			
		}

		// ????????? ???. 
    	wStatement = decomment(wStatement);
    
    	// ??????? ???? ???? , ??ı? ????? ?????? ??????. 
    	wStatement = this.Str2Temp(wStatement).trim();

    	wStatement = wStatement.replace(/\r\n/g," ").replace(/\t/g," ");
    	while(wStatement.indexOf(" ;") >= 0) wStatement=wStatement.replace(/\s;/g, ";");
    	while(wStatement.indexOf(";;") >= 0) wStatement=wStatement.replace(/;;/g, ";");
    	
    	// ?????? ?м???? ??? ?????????? ?????? ?????? ?????? ???
    	wStatement = wStatement.toUpperCase();
   	    wStatement = this.Statement2Variable(wStatement);

    	// ????????? ??????. 
		var wActionTag = [0];
    	wReturn =  this.ResultOfExecute(wStatement, wActionTag);
		
		this.ArrVNames.Clear();
		this.ArrVTypes.Clear();
		this.ArrVValues.Clear();
		this.ArrVScope.Clear();
		this.ArrStringValues.Clear();
		
		// 산식결과값을 기록한다
		var lengthKey = "" + pStatement.length;
		if (this.arrResults.hasKey()){
			this.arrResults[lengthKey] = [];
		}
		this.arrResults[lengthKey][pStatement] = wReturn;

		return wReturn;
    };
  	
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pActionTag
     * @return  {object}
     * @example	미결
     */   
    EXOLogic.prototype.ResultOfExecute = function(pStatement, pActionTag)
    {
        // functionname : [EXOLogic.ResultOfExecute]

    	var wStatement = pStatement + ""; 
    	
    	var w_nPoint = 0; var w_nSPoint = 0; 
    	var  w_nEPoint = 0;
    	
    	var wLogicUnit = ""; var wReturn = ""; 
    	var wLeft = ""; var wRight = "";
    	
    	
        wStatement = wStatement.trim();
		var wLength = [wStatement.length];
		
        if (!wStatement.endsWith(";")) wStatement = wStatement + ";";

    	while (true){
    		var wIsSimpleStatement = true;
            var wCutPos = new Array(99);
            
    		// IF ?????? ????? ?????? ??????. ?????? 
    		if (wStatement.startsWith("IF ")) {
    			if (this.IsIfLoop(wStatement, wLength, wCutPos)){
    				wIsSimpleStatement = false;
    				wLogicUnit = wStatement.substring(0, wLength[0]).trim();
                    
                    if (wLogicUnit.endsWith(";")) 
                        wLogicUnit = wLogicUnit.substring(0, wLogicUnit.length - 1);
    
    				wReturn = this.ResultOfIf(wLogicUnit, wCutPos, pActionTag);

    				if (pActionTag[0] == 1 || pActionTag[0] == 2) break;
    			}
    		
    		// FOR?????? ????? ?????? ??????.(??????) 
    		} else if (wStatement.startsWith("FOR ")){
    			if (this.IsForLoop(wStatement, wLength, wCutPos)){
    				wIsSimpleStatement = false;
    				wLogicUnit = wStatement.substring(0, wLength[0]).trim();
                    
                    if (wLogicUnit.endsWith(";")) 
                        wLogicUnit = wLogicUnit.substring(0, wLogicUnit.length - 1);
    
    				wReturn = this.ResultOfFor(wLogicUnit, wCutPos);
    			}
    		
    		// WHILE?????? ????? ?????? ??????.(??????) 
    		} else if (wStatement.startsWith("WHILE ")) {
    			if (this.IsWhileLoop(wStatement, wLength, wCutPos)){
    				wIsSimpleStatement = false;
    				wLogicUnit = wStatement.substring(0, wLength[0]).trim();
                    
                    if (wLogicUnit.endsWith(";")) 
                        wLogicUnit = wLogicUnit.substring(0, wLogicUnit.length - 1);
    				wReturn = this.ResultOfWhile(wLogicUnit, wCutPos);
    			}
    		}
    
    		// ??????д????? ??????? ( ":=" ?? ?¿쿬??)
    		if (wIsSimpleStatement) {
    			w_nPoint = wStatement.indexOf(";");					// ????????? ????? ?????? 
    			if (w_nPoint == -1) break;							// ??????? ????????? ?????? ?????? 
    
    			wLogicUnit = wStatement.substring(0, w_nPoint).trim();		// ??????? ?????. 
    			if (wLogicUnit.length > 0){					        // ????? ?????? ????????? ??? 
    				w_nPoint = wLogicUnit.indexOf(":=");			// ??????? ??? ??? o?? 
    				if (w_nPoint != -1) {
    					w_nSPoint = w_nPoint + 2;
    					w_nEPoint = wLogicUnit.length;
    
    					wLeft = wLogicUnit.substring(0, w_nPoint).trim();
    					wRight = wLogicUnit.substring(w_nSPoint, w_nEPoint).trim();

    					wReturn = this.CalcFormula(wRight);
    					this.SetVariable(wLeft, wReturn);
    				
    				} else if (wLogicUnit == "CONTINUE") {
    					pActionTag[0] = 1;
    
    				} else if (wLogicUnit == "BREAK") {
    					pActionTag[0] =  2;
    
    				} else {                                         // ??????? ??? ????? o?? 
    					wReturn = this.CalcFormula(wLogicUnit);
    				}
    			} else {
    				wReturn = "";
    			}
    
    		}
    		if (wIsSimpleStatement) {
    			wStatement = replaceFirstOne(wStatement, wLogicUnit + ";", "").trim();
    		} else {
   			wStatement = replaceFirstOne(wStatement, wLogicUnit, "").trim();
    		}
            
            // ????? ??????? ?????? ??????. 
    		if (wStatement.length == 0 || wStatement == ";" ) break;
    	}
    	return wReturn;
    };
    
    /* =============================================================
    	IF  ?????? ???? : IF ... THEN ( ... ) ELSE ( ...) -> ...???? ???μ????? ?????.
    	????? IF??           : If ...THEN ...ELSE ...;  -> ...???? ?ĸ? ???????. 
       =============================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{number}	pLength
     * @param	{object}	pArrCutPos
     * @return  {boolean}
     * @example	미결
     */
    EXOLogic.prototype.IsIfLoop = function(pStatement, pLength, pArrCutPos)
    {
        // functionname : [EXOLogic.IsIfLoop]

    	var wStart = 0; var wPosition = 0; var wPosition1 = 0;
    	
    	// ????? ???????? ???? ???? 
    	wStart = pStatement.indexOf("IF ");
    	var w_bCompleted = false;
    	var wReturn = true;
    	var w_nArrNum = 0;
    
    	// ???? ??| ????? THEN?? a?´?. 
    	// ????????? IF?? THEN??????? IF?? ????? ?????. ????? ????? ?????? ??? ???? ???. 
    	// ??? ????? THEN ???? ???? ???? ??? ????? ?????????Ŀ? a?? ?? 
    	while (true){
    		pArrCutPos[++w_nArrNum] = wStart + 3;
    
    		wPosition = pStatement.indexOf(" THEN", wStart);
    		wPosition1= pStatement.indexOf("(", wStart);
    				wIsSimpleStatement = false;
    		
    		while (wPosition1 >= 0 && wPosition > wPosition1){
    			wPosition1 = endOfBracket(pStatement, wPosition1);
    			wPosition = pStatement.indexOf(" THEN", wPosition1);
    			wPosition1= pStatement.indexOf("(",wPosition1);
    		}
    		
    		pArrCutPos[++w_nArrNum] = wPosition - 1;
    
    		//THEN ?????? ????? ?????? "IF ????"???. 
    		wPosition = findNext(pStatement, "(", wPosition + 5);
    		if (wPosition == -1) {
    			wReturn = false;
    			break;
    		}
    		pArrCutPos[++w_nArrNum] = wPosition + 1;
    		// THEN ?? ????? ?????? ?????? a?´? 
    		wPosition = endOfBracket(pStatement, wPosition);
    		pArrCutPos[++w_nArrNum] = wPosition - 1;
    
    		// ?? ?????? ELSE ???? ??????. ?????? ??? ?????. 
    		// ELSE ???  IF ?? ????? ?????? ?????? "("?? a?? ??????? ?????? ????? 
    		// ?????? ??? IF ???? ?????? ????. 
    		wPosition1 = wPosition + 1;
    		wPosition = pStatement.indexOf(" ELSE", wPosition);
   		
    		if (wPosition == -1) {
    			pLength[0] = wPosition1;
    			w_bCompleted = true;
    		} else {
    			wPosition += 5;


    			wPosition1 = findNext(pStatement, "IF ", wPosition);
    			if (wPosition1 == -1){
    				wPosition1 = findNext(pStatement, "(", wPosition);
    				if (wPosition == -1) {
    					w_bCompleted = true;
    					wReturn = false;
    					break;
    				}
    				pArrCutPos[++w_nArrNum] = wPosition1 + 1;
    
    				wPosition = endOfBracket(pStatement, wPosition1);
    				pArrCutPos[++w_nArrNum] = wPosition - 1;
    
    				pLength[0] = wPosition +1;
    				w_bCompleted = true;
    
    			} else {
    				wStart = wPosition1;
    			}
    		}
			
    		if (w_bCompleted) break;

    	}
    
    	pArrCutPos[0] = w_nArrNum;
    	return wReturn;
    };
    
    /* ==========================================================
    	For???? ???? :  
    		FOR X = 1 TO 31 STEP 1  ( ... )
    		FROM?? TO?? ?????? ?????? ?????????? ??????? STEP????? 
    		???? ???????? ???. STEP???? ???? ??????? ?????????. 
    		LOOP????? CONTINUE?? BREAK????? ???????. 
       ==========================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{number}	pLength
     * @param	{object}	pArrCutPos
     * @return  {boolean}
     * @example	미결
     */
    EXOLogic.prototype.IsForLoop = function(pStatement, pLength, pArrCutPos)
    {
        // functionname : [EXOLogic.IsForLoop]

    	// ????? ???????? ???? ???? 
    	var w_nStart = pStatement.indexOf("FOR ");
    	var w_nArrNum = 0;
    	var w_bReturn = true;
    
    	// ???? ??| ????? TO?? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nStart + 4;
    
    	var w_nPosition = pStatement.indexOf(" TO ", w_nStart);
    	if (w_nPosition == -1) {
    		return false;
    	}
    
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	//  STEP?? ????? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nPosition + 4;
    
    	w_nPosition = pStatement.indexOf(" STEP ", w_nPosition);
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	// "(" ?? ????? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nPosition + 6;
    
    	w_nPosition = pStatement.indexOf("(", w_nPosition);
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	//??????? ")"?? ????? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nPosition + 1;
    	w_nPosition = endOfBracket(pStatement, w_nPosition);
    	pLength[0] = w_nPosition - w_nStart + 1;
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	pArrCutPos[0] = w_nArrNum;
    
    	return w_bReturn;
    };
    
    /* ==========================================================
    	While???? ???? :
    		WHILE ( ... ) ( ... )
    		LOOP????? CONTINUE?? BREAK????? ???????. 
       ==========================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{number}	pLength
     * @param	{object}	pCutPos
     * @return  {boolean}
     * @example	미결
     */
    EXOLogic.prototype.IsWhileLoop = function(pStatement, pLength, pCutPos)
    {
        // functionname : [EXOLogic.IsWhileLoop]

    	// ????? ???????? ???? ???? 
    	var w_nStart = pStatement.indexOf("WHILE ");
    	var w_nArrNum = 0;
    	var w_bReturn = true;
    
    	// ???? ??| ????? "("?? a?´?. 
    	var w_nPosition = pStatement.indexOf("(", w_nStart);
    	if (w_nPosition == -1) {
    		return false;
    	}
    
    	//??????? ")"?? ????? a?´?. 
    	pCutPos[++w_nArrNum] = w_nPosition + 1;
    	w_nPosition = endOfBracket(pStatement, w_nPosition);
    	pCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	// ???? ?????? ?????? ????? "("?? a?´?. 
    	w_nPosition = pStatement.indexOf("(", w_nPosition);
    	if (w_nPosition == -1) {
    		return false;
    	}
    
    	//??????? ")"?? ????? a?´?. 
    	pCutPos[++w_nArrNum] = w_nPosition + 1;
    	w_nPosition = endOfBracket(pStatement, w_nPosition);
    	pLength[0] = w_nPosition - w_nStart +1;
    	pCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	pCutPos[0] = w_nArrNum;
    
    	return w_bReturn;
    };
    
    /* ==========================================================
       p_nCutPos???? 0?? ?迭 ???? , 
       [???? ????, ??, True?? ???? ??]?? ??? ??????? 
       ???????? False?? ???? ?????? ??????. 
       ==========================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pCutPos
     * @param	{object}	pActionTag
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ResultOfIf = function(pStatement, pCutPos, pActionTag)
    {
        // functionname : [EXOLogic.ResultOfIf]

    	var wReturn = "";
    	var wCount = pCutPos[0];
    	var wArrNum = 0;
    
    	pActionTag[0] = 0;
    	while (wArrNum < wCount){
    		var wPosition1 = pCutPos[++wArrNum];
    		var wPosition2 = pCutPos[++wArrNum];
    		var wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
			
    		var wTemp = this.CalcFormula(wStatement);
    		if (wTemp != "0"){
    			wPosition1 = pCutPos[++wArrNum];
    			wPosition2 = pCutPos[++wArrNum];
    
    			wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
				
    			wReturn = this.ResultOfExecute(wStatement, pActionTag);
    			break;
    
    		} else {
    			if (wArrNum == wCount - 2){				// False???? ??? ??? 
    					wReturn = "";
    					break;
    			} else if (wArrNum == wCount - 4){      //False???? ??? ??? 
    				wArrNum += 2;
    				wPosition1 = pCutPos[++wArrNum];
    				wPosition2 = pCutPos[++wArrNum];
    
    				wStatement = pStatement.substring(wPosition1, wPosition2 + 1);


    				wReturn = this.ResultOfExecute(wStatement, pActionTag);
    				break;
    
    			} else {
    				wArrNum += 2;
    			}
    		}
    	}
    
    	return wReturn;
    };
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pCutPos
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ResultOfFor = function(pStatement, pCutPos)
    {
        // functionname : [EXOLogic.ResultOfFor]

    	var wReturn = ""; 
    	var w_nCount = pCutPos[0];
    	var wArrNum = 0;
    	var wActionTag = [0];
    
    	// ???? ???? ??????? ??????. 
    	var wPosition1 = pCutPos[++wArrNum];
    	var wPosition2 = pCutPos[++wArrNum];
    	var wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	wPosition1 = wStatement.indexOf("=");
    	var wCritVName = wStatement.substring(0,wPosition1).trim();
    
    	wStatement = wStatement.substring(wPosition1 + 1).trim();


    	if (!isNumeric(wStatement)){
    		wStatement = this.CalcFormula(wStatement);
    	}

    	var wStartVal = val(wStatement);
    	// TO ?????? ?????? 
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	if (!isNumeric(wStatement)){
    		wStatement = this.CalcFormula(wStatement);
    	}
    	var w_dblEndVal = val(wStatement);
    
    	// STEP?????? ??????. 
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	wStatement = pStatement.substring(wPosition1, wPosition2).trim();
    	var w_dblStepVal = val(wStatement);
    
    	// ?????? ??????. 
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	wStatement = pStatement.substring(wPosition1, wPosition2).trim();
    
    	// ?????? ???? ?????? ???????. 
    	var w_dblVVar = wStartVal;
    	this.SetVariable(wCritVName, w_dblVVar + "");

    	while (true){
    		if (w_dblStepVal >= 0.0){
    			if (w_dblVVar > w_dblEndVal) break;
    		} else {
    			if (w_dblVVar < w_dblEndVal) break;
    		}
    
    		wReturn = this.ResultOfExecute(wStatement, wActionTag);

    		if (wActionTag[0] == 2) break;  //???? Continue(1)?? ????????? ?????? ???????? ?????. 
    
    		w_dblVVar += w_dblStepVal;
    		this.SetVariable(wCritVName, w_dblVVar + "");
    	}
    
    	return wReturn;
    };
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pCutPos
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ResultOfWhile = function (pStatement, pCutPos)
    {
        // functionname : [EXOLogic.ResultOfWhile]

    	var wReturn = "";
    	var w_nCount = pCutPos[0];
    	var wArrNum = 0;
    	var wActionTag = [0];
    	
    	// ???? ???? ??????? ??????. 
    	var wPosition1 = pCutPos[++wArrNum];
    	var wPosition2 = pCutPos[++wArrNum];
    	var wCritStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	var wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	// ?????? ???? ?????? ???????. 
    	var wRsltStatement = this.ResultOfExecute(wCritStatement, wActionTag);
    	while (wRsltStatement != "0"){
    		wReturn = this.ResultOfExecute(wStatement, wActionTag);
    		if (wActionTag[0] == 2) break;  //???? Continue(1)?? ????????? ?????? ???????? ?????. 
    		
    		wRsltStatement = this.ResultOfExecute(wCritStatement, wActionTag);
    	}
    
    	return wReturn;
    };
	
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.CalcFormula = function(pStatement)
    {
        // functionname : [EXOLogic.CalcFormula]

    	var wReturn = pStatement + "";
    	wReturn = this.Temp2ClacStr(this.ReplaceVariable(wReturn));
    
    	if (!isNumeric(wReturn)){
	        var wCalculator = new EXOCalculator();
    		wReturn = wCalculator.CalcuratedResult(wReturn);
    	}
    	return wReturn;
    };
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.Statement2Variable = function(pStatement)
    {
        // functionname : [EXOLogic.Statement2Variable]

    	var wStatement = pStatement + "";
    	while (wStatement.indexOf("GLOBAL  ") >= 0) {
    		wStatement = wStatement.replaceWord("GLOBAL  ","GLOBAL ");
    	}
    
    	for (var j = 0; j <= 1; j++){     // 0:?? ???? 1: ???????? 
    		for (i = 0; i < ArrTypes.length; i++){
    			var wType = ArrTypes[i];
    
    			var wPosition = 0;
    			while (true) {
    			    var wSearchName = (j == 0 ? "GLOBAL " + wType : wType) + " ";

    				wPosition = wStatement.indexOf(wSearchName, wPosition);
    				if (wPosition == -1) break;
    
    				var wSPosition = wPosition + wSearchName.length;
    
    				// ?????? ??????? ??????. 
    				wPosition1 = wStatement.indexOf(":= ", wSPosition);
    				wPosition2 = wStatement.indexOf(";", wSPosition);
    				
    				wPosition = (wPosition1 > 0 ? wPosition1 : wPosition2);
    
    				if (wPosition < 0) 
    					wPosition	= wStatement.length;
    
    				var wEPosition = wPosition - 1;
    
    				// ???????? ??????? 
    				var wName = wStatement.substring(wSPosition, wEPosition + 1).trim();
    
    				// ?????? ??????. 
    				this.AddVariable(wType, wName, j);
    			}
    			// ????θ? ??? ???????.
    			wStatement = wStatement.replaceWord(wSearchName, "");
    		}
    	}
        
    	return wStatement;
    };
    
    /**
     * @description	미결
     * @param	{string}	pType
     * @param	{string}	pName
     * @param	{object}	pScope
     * @return  {void}
     * @example	미결
     */
    EXOLogic.prototype.AddVariable = function(pType, pName, pScope)
    {
        // functionname : [EXOLogic.AddVariable]

    	// length????? ??????? ?????? ???? ?þ???
    	var wVariablesIndex = this.ArrVTypes.length; 

        this.ArrVTypes[wVariablesIndex] = pType;
    	this.ArrVNames[wVariablesIndex] = pName;
    	this.ArrVValues[wVariablesIndex] = "";
    	this.ArrVScope[wVariablesIndex] = pScope + "";

    	return;
    };
    
    /**
     * @description	미결
     * @param	{string}	pName
     * @param	{string}	pValue
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.SetVariable = function(pName, pValue)
    {
        // functionname : [EXOLogic.SetVariable]

    	var wFound = false;
    	var wVariablesIndex = -1;
    	
    	for (var i = 0; i < this.ArrVNames.length; i++){
    		if (pName == this.ArrVNames[i]){
    			wVariablesIndex = i;
    			wFound = true;
    			break;
    		}
    	}
    
    	if (!wFound) {
    	    this.State = getText("message_easycalc_001", "Error raised from EasyMaker Logic Engine's \"SetVariable\" routine \n \"{0}\" variable is not correct \n", [pName]);
    	} else {
    		this.ArrVValues[wVariablesIndex] = pValue;
    	}
    
    	return;
    };
    
    /*
    EXOLogic.prototype.GetVariable = function(pName)
    {
        // functionname : [EXOLogic.GetVariable]

    	var w_bFound = false;
    	var wRerurn = "";
    	var wVariablesIndex = -1;
    	
    	for (var i = 0; i < this.ArrVNames.length; i++){
    		if (pName == this.ArrVNames[i]){
    				wVariablesIndex = i;
    				w_bFound = true;
    				break;
    		}
    	}
    
    	if (!w_bFound) {
    	    this.State = "Error raised from EasyMaker Logic Engine's \"GetVaiable\" routine \r\n"
    	          + pName + " variable is not correct \r\n";
    	} else {
    		wRerurn = this.ArrVValues[wVariablesIndex];
    	}
    
    	return wRerurn;
    }
    */
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ReplaceVariable = function(pStatement)
    {
        // functionname : [EXOLogic.ReplaceVariable]

    	var wStatement = pStatement + "";
    	if (isNumeric(wStatement) || pStatement == "#")
    		return wStatement;
    	
    	for (wLength = 30; wLength > 0; wLength--){
    		for (i = this.ArrVNames.length - 1; i >= 0; i--){
    			if (wLength == this.ArrVNames[i].length){
    			    var wName = this.ArrVNames[i];
    				var wType = this.ArrVTypes[i];
    				var wValue = this.ArrVValues[i];
    
    				if (wType == "CHAR" || wType == "TEXT") {
    				    wValue = "\"" + wValue + "\"";
    				}
    
    				wStatement = wStatement.replaceWord(wName, wValue);
    			}
    		}
    	}
    	return wStatement;
    };
    
    /*
    EXOLogic.prototype.GetVariableInfo = function()
    {
        // functionname : [EXOLogic.GetVariableInfo]

    	var wReturn = "";
    	for (i = this.ArrVNames.length - 1; i >= 0; i--){
    		if (this.ArrVScope[i] != "0") continue;
            wReturn += this.ArrVTypes[i] + ":" + this.ArrVNames[i] + ":" + this.ArrVValues[i] + ";";
    	}
    	return wReturn;
    };
    */
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
	EXOLogic.prototype.Str2Temp = function(pStatement)
	{
        // functionname : [EXOLogic.Str2Temp]

		var wStatement = pStatement + "";
		if (pStatement.indexOf("\"") == 0) return wStatement;
	
		this.ArrStringValues = [];
		
		var wArrStringValues = cutString(pStatement, "\"", "\"");
		
		for (var i = 0; i < wArrStringValues.length ; i++){
  		    this.ArrStringValues[i + 1] = wArrStringValues[i];
 			
 			var wTemp = "\"" + wArrStringValues[i] + "\"";
 			var wTemp1 = "STR_" + (i + 1);
 			wStatement = replaceFirstOne(wStatement, wTemp, wTemp1);
		}
			
		return wStatement;
	};
    
	/**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */ 
    EXOLogic.prototype.Temp2ClacStr = function(pStatement)
    {
        // functionname : [EXOLogic.Temp2ClacStr]

 		var wStatement = pStatement + "";

		for(var i = this.ArrStringValues.length - 1; i > 0; i--){
			var wTemp = "STR_" + i;
			wStatement = wStatement.replaceWord(wTemp, "\"" + this.ArrStringValues[i] + "\"");
	
			if (wStatement.indexOf("STR_") == -1) break;
		}
		return wStatement;
    };
    
    /**
    *     @description	미결
    *     @param	{object}	pStatement
    *     @param	{object}	pPosition
    *     @return	{number}
    *     @example	미결
    */
    function endOfBracket(pStatement, pPosition)
    {
    	var wReturn = 0;
    	var wLevel = 0;
    	var wBitStart = pPosition + 1;
    	var wBitEnd = 0;
    	var wCompleted = false;
    
    	if (pStatement.indexOf(")", pPosition + 1) == -1) return -1;
    
    	while(!wCompleted){
    		wBitEnd = pStatement.indexOf(")", wBitStart);
    		wBitStart = pStatement.indexOf("(", wBitStart);
    		
    		if (wBitStart == -1){
    			if (wLevel == 0) {
    				wCompleted = true;
    				wReturn = wBitEnd;
    			} else {
    				wBitStart = wBitEnd + 1;
    				wLevel--;
    			}
    		} else {
    			if (wBitStart > wBitEnd) {
    				if (wLevel == 0) {
    					wReturn = wBitEnd;
    					wCompleted = true;
    				} else {
    					wBitStart = wBitEnd + 1;
    					wLevel--;
    				}
    			} else {
    				wBitStart ++;
    				wLevel ++;
    			}
    		}
    	}
    
    	return wReturn;
    };
    
    /**
     * @class	EasyCalc
     * @constructor
     */	
function EXOCalculator() {
    this.State = "";
    this.StringValues = [];
    this.StringCount = 0;
};
/**
*     @description	미결
*     @return	{number}
*     @example	미결
*/
    EXOCalculator.prototype.test = function(){
        // functionname : [EXOCalculator.test]

	    //return Min("11","3","4","5","6","7","89","9","10","11");
	    return minOf(11,3,4,5,6,7,89,9,10,11);
    };
    
    /**
    *     @description	미결
    *     @param	{object}	pFormula
    *     @return	{string}
    *     @example	미결
    */
    EXOCalculator.prototype.CalcuratedResult = function(pFormula){
        // functionname : [EXOCalculator.CalcuratedResult]

        if (pFormula.length == 0) return "";
                           
        var wFormula = this.Str2Temp(pFormula);
        wFormula = decomment(wFormula); //??????? ???? 
        wFormula = wFormula.replace(/\r\n/g," ").toUpperCase(); //?????? ???? 
        
        var w_haveCondition = (wFormula.indexOf("IF ") != -1 && wFormula.indexOf(" THEN") != -1);
        if (!w_haveCondition){                 //??????? ???. 
            wFormula = this.Calcurate(wFormula);

        } else {
    	    var trueStatement = ""; 
    	    var falseStatement = "";
	        var wlCompleted = false;
    	    
            while (!wlCompleted){
                var IfPosition = wFormula.indexOf("IF ");
                var ThenPosition = wFormula.indexOf(" THEN");
	            var ElsePosition = 0;
                var wLength = wFormula.length;

                var CritStatement = wFormula.substring(IfPosition + 3, ThenPosition + 1);
                if (wFormula.indexOf(" ELSE") != -1){
                    ElsePosition = wFormula.indexOf(" ELSE");
                    var wPoint = minOf(ElsePosition - 1, wLength); 
                    trueStatement = wFormula.substring(ThenPosition + 5, wPoint + 2);
                    falseStatement = wFormula.substring(ElsePosition + 5, wLength);
                } else {
                    trueStatement = wFormula.substring(ThenPosition + 5, wLength);
                    falseStatement = "0";
                }

                var wWorkBuff = this.Calcurate(CritStatement);
                if (wWorkBuff == "-1"){
                        wFormula = this.Calcurate(trueStatement);
                        wlCompleted = true;
                } else if (falseStatement.indexOf("IF ") == -1 && 
                           falseStatement.indexOf(" THEN") == -1){
                        wFormula = this.Calcurate(falseStatement);
                        wlCompleted = true;
                } else {
                        wFormula = falseStatement;
                }
            }
        }
        wFormula = this.Temp2Str(wFormula);
        this.StringValues.Clear();
	
	    return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {object}
     * @example	미결
     */
    EXOCalculator.prototype.Calcurate = function(pFormula)
	{
        // functionname : [EXOCalculator.Calcurate]

	
        var wFormula = pFormula.trim();
        while (wFormula.indexOf(" (") >= 0)
        	wFormula = wFormula.replace(/ \(/g, "(");
        
       //????? ????? ?????? ??? ?????? ??????? ???? ??u??? 
        var p1 = 0; var p2 = 0;
        while (wFormula.indexOf("(") != -1){
            var wlReplaced = false;
            var p = wFormula.indexOf('(');
            var p1 = 0; 
            var p2 = 0;

            while(p != -1){
                p1 = p;
                p2 = wFormula.indexOf(')', p1);
                p = wFormula.indexOf('(', p1 + 1);
                if (p > p2) break;
            }

            for (var i = 0; i < FUNCTION_COUNT; i++){
                var wFunc = ArrFunctions[i];
                var wLength = wFunc.length;

                if (p1 >= wLength){
                    if (wFunc == wFormula.substring(p1- wLength, p1)){
                        var wOpTarget = wFormula.substring(p1 - wLength, p2 + 1);
                        var wTempResult = this.FuncOperate(wOpTarget);
                        wFormula = replaceFirstOne(wFormula, wOpTarget, wTempResult);

                        wlReplaced = true;
                        break;
                    }
                }
            }

            if (!wlReplaced){
                var wOpTarget = wFormula.substring(p1, p2 + 1);
                var wLength = wOpTarget.length;
                var wOpObject = wOpTarget.substring(1, wLength - 1);

                var wTempResult = this.MultiOperate(wOpObject);

                wFormula =replaceFirstOne(wFormula, wOpTarget, wTempResult);
            }
        }

        wFormula = wFormula.trim();

        if (!wFormula.isNum()){
            var wlCompleted = false;
            if (wFormula.startsWith("STR_"))
                wlCompleted = wFormula.substring(4).isNum();
            if (!wlCompleted) 
                wFormula = this.MultiOperate(wFormula);
        }

	    return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.MultiOperate = function(pFormula)
	{
        // functionname : [EXOCalculator.MultiOperate]

        if (pFormula.isNum()) return pFormula;
        if (pFormula.startsWith("STR_") && pFormula.substring(4).isNum()) return pFormula;

        var wFormula = pFormula.replaceWord(" ", "");
        if (wFormula.indexOf("NOT") != -1){
            wFormula = wFormula.replaceWord("NOT"," NOT ");
        }
        if (wFormula.indexOf("TRUE") != -1){
            wFormula = wFormula.replaceWord("TRUE", "-1");
        }
        if (wFormula.indexOf("FALSE") != -1){
            wFormula = wFormula.replaceWord("FALSE", "0");
        }
        
        var wBitStart = 0; var wBitEnd = 0;
        var wFound = false; 

        for (var OperateNum = 0; OperateNum < OPERATER_COUNT; OperateNum++){
            var Operater = ArrOperaters[OperateNum];

            var wIsAddSub = (Operater == "+" || Operater == "-");
            var StartPos = 1;
            var OperaterPos = wFormula.indexOf(Operater, StartPos);
            while (OperaterPos >= 0){
                if (wIsAddSub && isSign(wFormula, OperaterPos)){
                        StartPos = OperaterPos + 1;
                        OperaterPos = wFormula.indexOf(Operater, StartPos);
                        continue;
                }

                wFound = false;
                for (var i = OperaterPos - 1; i >= 0 ; i--){
                    wBitStart = 0;
                    if (wFormula.charAt(i) >= '0' && wFormula.charAt(i) <= '9') continue;
                    if (wFormula.charAt(i) == '+' || wFormula.charAt(i) == '-'){
                        if (wIsAddSub){
                            wBitStart = i;
                            break;
                        } else if (!isSign(wFormula, i)){
                            wBitStart = i + 1;
                            break;
                        }
                    }
                    
                    for (var j = 0; j < OPERATER_COUNT; j++){
                        var wTempOp = ArrOperaters[j];
                        if (wFormula.charAt(i) != wTempOp.charAt(0)) continue;
                        if (wTempOp.charAt(0) == '+' || wTempOp.charAt(0) == '-') continue;

                        var wTempLength = wTempOp.length;
                        if (wFormula.substring(i).startsWith(wTempOp)){
                            wBitStart = i + wTempLength;
                            wFound = true;
                            break;
                        }
                    }
                    if (wFound) break;
                }

                var wLength = wFormula.length;

                wFound = false;
                for (var i = OperaterPos + Operater.length; i < wLength; i++){
                    wBitEnd = wLength - 1;
                    if (wFormula.charAt(i) >= '0' && wFormula.charAt(i) <= '9') continue;

                    for (var j = 0; j < OPERATER_COUNT; j++){
                        var wTempOp = ArrOperaters[j];
                        if (wFormula.charAt(i) != wTempOp.charAt(0)) continue;
                        if ((wTempOp.charAt(0) == '+' || wTempOp.charAt(0) == '-') && 
                            isSign(wFormula, i)) continue;

                        if (wFormula.substring(i).startsWith(wTempOp)){
                            wBitEnd = i - 1;
                            wFound = true;
                            break;
                        }
                    }
                    if (wFound) break;
                }
                var OperateTaget = wFormula.substring(wBitStart, wBitEnd + 1);
                if (Operater != "NOT") 
                    OperateTaget = OperateTaget.trim();

                StartPos = wFormula.indexOf(OperateTaget); 
                var wTemp = this.BaseOperate(OperateTaget, Operater);
                wFormula = replaceFirstOne(wFormula, OperateTaget, wTemp);

                if (wFormula.indexOf("+-") != -1){
                    wFormula = wFormula.replace(/\+\-/g, "-");
                }
                if (wFormula.indexOf("--") != -1){
                    wFormula = wFormula.replace(/\-\-/g, "-");
                }
                OperaterPos = wFormula.indexOf(Operater, StartPos);
                if (OperaterPos == -1 && (wFormula.charAt(0) == '+' || wFormula.charAt(0) == '-'))
                    OperaterPos = wFormula.indexOf(Operater, 1);
            }
        }
        if (wFormula.charAt(0) == '+'){
            wFormula = wFormula.substring(1);
        }
	
	    return wFormula;
	    
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @param	{string}	pOprater
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.BaseOperate = function(pFormula, pOprater)
	{
        // functionname : [EXOCalculator.BaseOperate]

	    if (pFormula.indexOf(pOprater, 1) == -1) return pFormula;
	    
	    var  wReturn = "";
	    
        var wFormula = (pOprater != "NOT" ? pFormula.trim() : pFormula);
        var OperaterPosition = wFormula.indexOf(pOprater, 1);
        
        var s1 = wFormula.substring(0, OperaterPosition).trim();
        var s2 = wFormula.substring(OperaterPosition + pOprater.length).trim();
        if (s1.startsWith("+")) s1 = s1.substring(1);
        if (s2.startsWith("+")) s2 = s2.substring(1);

        if (pOprater.charAt(0) == '&' || 
            s1.startsWith("STR_") || s2.startsWith("STR_")){
            if (pOprater.charAt(0) == '+') pOprater = "&";
            wReturn = this.StringOperate(s1, s2, pOprater);

        } else {
            var v1 = (s1.length != 0 ? parseFloat(1 * s1) : 0.0);
            var v2 = (s2.length != 0 ? parseFloat(1 * s2) : 0.0);
            if (pOprater.charAt(0) == '+'){
                    wReturn = fncPlus(s1, s2);
            } else if (pOprater.charAt(0) == '-'){
                    wReturn = fncMinus(s1, s2);
            } else if (pOprater.charAt(0) == '*'){
                    wReturn = fncMultiply(s1, s2);
            } else if (pOprater.charAt(0) == '/'){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncDivide(s1, s2, 8, true);
                    } else {
                        wReturn = "0";
                    }
            } else if (pOprater.charAt(0) == '%'){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncMod(s1, s2, 0);
                    } else {
                        wReturn = s1;
                    }
            } else if (pOprater.charAt(0) == '^'){
            	wReturn = "1";
            	for(var i = 1; i <= parseInt(v2, 10);i++)
                    wReturn = fncMultiply(wReturn, s1);
                    
            } else if (pOprater.charAt(0) == '\\'){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncDivide(s1, s2, 8, true);
                    } else {
                        wReturn = "0";
                    }
                    wReturn = floor(wReturn, 1) + '';
                    
            } else if (pOprater == "MOD"){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncMod(s1, s2, 0);
                    } else {
                        wReturn = s1;
                    }
            } else if (pOprater == "BITAND"){
                    wReturn = (parseInt(v1, 10) & parseInt(v2, 10)) + '';
            } else if (pOprater == "BITOR"){
                    wReturn = (parseInt(v1, 10) | parseInt(v2, 10)) + '';
            } else if (pOprater == "<="){
            	    if (fncEqual(s1, s2)){ 
            	        wReturn = "-1";
            	    } else if (fncLarger(s2, s1)){
            	        wReturn = "-1";
            	    } else {
            	        wReturn = "0";
            	    }
            } else if (pOprater == ">="){
            	    if (fncEqual(s1, s2)){ 
            	        wReturn = "-1";
            	    } else if (fncLarger(s1, s2)){
            	        wReturn = "-1";
            	    } else {
            	        wReturn = "0";
            	    }
            } else if (pOprater == "<>"){
                    wReturn = ChangeStrB2I(!fncEqual(s1, s2));
            } else if (pOprater == "!="){
                    wReturn = ChangeStrB2I(!fncEqual(s1, s2));
            } else if (pOprater.charAt(0) == '='){
                    wReturn = ChangeStrB2I(fncEqual(s1, s2));
            } else if (pOprater.charAt(0) == '<'){
            	    wReturn = (fncLarger(s2, s1) ? "-1" : "0");
            } else if (pOprater.charAt(0) == '>'){
            	    wReturn = (fncLarger(s1, s2) ? "-1" : "0");
            } else if (pOprater == "AND"){
                    wReturn = ChangeStrB2I(v1 != 0 && v2 != 0);
            } else if (pOprater == "NOT"){
                    wReturn = ChangeStrB2I(v2 == 0);
            } else if (pOprater == "OR"){
                    wReturn = ChangeStrB2I(v1 != 0 || v2 != 0);
            }
        }

        wReturn=wReturn.toUpperCase();
        if ((pOprater.charAt(0) == '+' || pOprater.charAt(0) == '-') && 
                    wReturn.charAt(0) != '-'){
            wReturn = "+" + wReturn;
        }

	    return wReturn;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @param	{object}	pFormula2
     * @param	{object}	pOperater
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.StringOperate = function(pFormula1, pFormula2, pOperater)
	{
        // functionname : [EXOCalculator.StringOperate]

	    var wIsBoolType = true;
	    var wBooleanResult = false;
	
	    var wReturn = "";
	
        var wString1 = "";
        var wString2 = "";

        // ???? ????? ???? ?????? ??????
        pFormula1 = pFormula1.trim();
        if (pFormula1.startsWith("STR_")){
            wString1 = this.StringValues[parseInt(pFormula1.substring(4),10)];
        } else {
            wString1 = pFormula1;
        }

        pFormula2 = pFormula2.trim();
        if (pFormula2.startsWith("STR_")){
            wString2 = this.StringValues[parseInt(pFormula2.substring(4), 10)];
        } else {
            wString2 = pFormula2;
        }
        if (pOperater.charAt(0) == '&'){
            wReturn = this.TempString(wString1 + wString2);
            wIsBoolType = false;
        } else if (pOperater.startsWith("<=")){
            wBooleanResult = (wString1 <= wString2);
        } else if (pOperater.startsWith(">=")){
            wBooleanResult = (wString1 >= wString2);
        } else if (pOperater.startsWith("<>")){
            wBooleanResult = (wString1 != wString2);
        } else if (pOperater.charAt(0) == '='){
            wBooleanResult = (wString1 == wString2);
        } else if (pOperater.charAt(0) == '<'){
            wBooleanResult = (wString1 < wString2);
        } else if (pOperater.charAt(0) == '>'){
            wBooleanResult = (wString1 > wString2);
        } else if (pOperater.substring(0,4) == "LIKE"){
            wBooleanResult = checkLike(wString2, wString1);
        }

        if (wIsBoolType){
        	wReturn = (wBooleanResult? "-1" : "0");
        }
	
	    return wReturn;
	
	};
    
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.FuncOperate = function(pFormula)
	{
        // functionname : [EXOCalculator.FuncOperate]

        var wReturn = null;
        
        var wTemp = null; var wTemp1 = null;
        var wIntTemp = 0; var wIntTemp1 = 0;

        var wFormula = pFormula.replace(" ","");
        
        // ????κ? ?????
        var wPoint = wFormula.indexOf("(");
        var wFunction = wFormula.substring(0, wPoint).trim();

        wTemp = wFormula.substring(wPoint + 1);
        wTemp1 = wTemp.substring(0, wTemp.indexOf(")"));

        var wHaveString = (wTemp1.indexOf("STR_") != -1);
        var wArrParam = wTemp1.split(",");
        var wCount = wArrParam.length;
        
        // IIF의 처리
        if (wFunction == "IIF"){
        	wArrParam[0] = this.MultiOperate(wArrParam[0] + "");
        	wArrParam[1] = this.MultiOperate(wArrParam[1] + "");
        	wArrParam[2] = this.MultiOperate(wArrParam[2] + "");
        }
        // ????? ?????? ??????
		for(var i = 0; i < wCount; i++){
		    if (wArrParam[i].indexOf("STR_") >= 0){
		        wArrParam[i] = this.Array2String(wArrParam, i);
		    } else {
		        wArrParam[i] = val(wArrParam[i] + "");
		    }
        }
        // ??????? 
        if (wFunction == "SUM"){
            wReturn = sumOf(wArrParam); 
        } else if (wFunction == "AVG"){
            wReturn = avgOf(wArrParam); 
        
        } else if (wFunction == "MAX"){
            if (wHaveString){
                wReturn = this.TempString(maxOf(wArrParam)); 
            } else {
                wReturn = maxOf(wArrParam); 
            }
        } else if (wFunction == "MIN"){
            if (wHaveString){
                wReturn = this.TempString(minOf(wArrParam)); 
            } else {
                wReturn = minOf(wArrParam); 
            }

        } else if (wFunction == "ABS"){
            wReturn = abs(wArrParam[0]); 

        } else if (wFunction == "MOD"){
            wReturn = fncMod(wArrParam[0], wArrParam[1], 0); 

        } else if (wFunction == "ROUND"){
        	wIntTemp = parseInt(wArrParam[1], 10);
            wReturn = round(wArrParam[0], wIntTemp);

        } else if (wFunction == "CEIL"){
        	wIntTemp = parseInt(wArrParam[1], 10);
            wReturn = ceil(wArrParam[0], wIntTemp);

        } else if (wFunction == "INT"){
            wReturn = floor(wArrParam[0], 0);
            
        } else if (wFunction == "FLOOR"){
        	wIntTemp = parseInt(wArrParam[1],10);
            wReturn = floor(wArrParam[0], wIntTemp);

        } else if (wFunction == "COUNT"){
            wReturn = wCount + '';

        } else if (wFunction == "LEN"){
            wReturn = wArrParam[0].length + '';

        } else if (wFunction == "KLEN" || wFunction == "LENB"){
            wReturn = wArrParam[0].bytes() + '';

        } else if (wFunction == "INSTR"){
            var wBooleanTemp = false;
            if (wCount >=4){
                wBooleanTemp = (parseInt(wArrParam[3], 10) != 0);
            }

            wIntTemp = parseInt(wArrParam[0], 10) - 1;
            if (wIntTemp < 0) wIntTemp = 0;

            wTemp = wArrParam[0];
            wTemp1 = wArrParam[1];

            if (isDBCSPoint(wTemp, wIntTemp) != 0) wIntTemp++;

            wIntTemp = instrB(wTemp, wTemp1, wIntTemp, wBooleanTemp);

            wReturn = wIntTemp + '';

        } else if (wFunction == "REPLACE"){

            wIntTemp = 1; wIntTemp1 = 99999999;
            var wBooleanTemp = false;
            
            if (wCount >= 4)
                wIntTemp = parseInt(wArrParam[3], 10) - 1; // ReplaceNN????? 0?? ????? ???? ???? 
            if (wCount >= 5)
                wIntTemp1 = parseInt(wArrParam[4], 10);
            if (wCount >= 6)
                wBooleanTemp = (parseInt(wArrParam[5], 10) != 0);

            wReturn = this.TempString(replaceNN(wArrParam[0], wArrParam[1], wArrParam[2], wIntTemp, wIntTemp1, wBooleanTemp));

        } else if (wFunction == "MID"){
            wIntTemp  = parseInt(wArrParam[1],10);
            wIntTemp1 = (wCount == 3 ? parseInt(wArrParam[2], 10) : 1);

            wTemp = wArrParam[0];
            if (isDBCSPoint(wTemp, wIntTemp - 1) == 2){
                wIntTemp++; // wIntTemp1--;
            }
            wTemp1 = midB(wTemp, wIntTemp, wIntTemp1);

            wReturn = this.TempString(wTemp1);

        } else if (wFunction == "LEFT"){
            wIntTemp = parseInt(wArrParam[1], 10);

            wTemp = wArrParam[0];
            wTemp1 = leftB(wTemp, wIntTemp);

            wReturn = this.TempString(wTemp1);

        } else if (wFunction == "RIGHT"){
            wIntTemp = parseInt(wArrParam[1], 10);
            wTemp = wArrParam[0];

            wPoint = wTemp.length - wIntTemp ;
            wTemp1 = rightB(wTemp, wIntTemp);

            wReturn = this.TempString(wTemp1);

        } else if (wFunction == "SPACE"){
            wIntTemp = parseInt(wArrParam[0], 10);
            wReturn = this.TempString(repeatString(' ',wIntTemp));

        } else if (wFunction == "UCASE"){
            wReturn = this.TempString(wArrParam[0].toUpperCase());

        } else if (wFunction == "LCASE"){
            wReturn = this.TempString(wArrParam[0].toLowerCase());

        } else if (wFunction == "TRIM"){
            wReturn = this.TempString(wArrParam[0].trim());

        } else if (wFunction == "LTRIM"){
            wReturn = this.TempString(LTrim(wArrParam[0]));
            
        } else if (wFunction == "RTRIM"){
            wReturn = this.TempString(RTrim(wArrParam[0]));

        } else if (wFunction == "VAL"){
            wReturn = val(wArrParam[0]) + "";
            
        } else if (wFunction == "STR"){
            wReturn = this.TempString(wArrParam[0]);
            
        } else if (wFunction == "ISNULL"){
            wTemp = wArrParam[0];
            wReturn =  (wTemp == "\"\"" || wTemp == "") ? "-1" : "0";

        } else if (wFunction == "YEAR"){
            wReturn = wArrParam[0].substring(0, 4);
            
        } else if (wFunction == "MONTH"){
            wTemp = wArrParam[0].replace(/\-/g, "").substring(4, 6);
            wReturn = numberFormat(wTemp, "#0");
            
        } else if (wFunction == "DAY"){
            wTemp1 = wArrParam[0].replace(/\-/g, "").substring(wTemp1.length - 2);
            wReturn = numberFormat(wTemp, "#0");

        } else if (wFunction == "FMONY"){
            var wYM = wArrParam[0].replace(/\-/g, "");
            
            var wYY = parseInt(wYM.substring(0, 4), 10);
            var wMM = parseInt(wYM.substring(4, 6), 10);

            if (wMM == 1)  wYY--;

            wReturn = this.TempString(numberFormat(wYY, "0000"));

        } else if (wFunction == "FMONM"){
            var wYM = wArrParam[0].replace(/\-/g, "");
            
            var wYY = parseInt(wYM.substring(0, 4), 10);
            var wMM = parseInt(wYM.substring(4, 6), 10);
            
            wMM--;
            

            if (wMM == 0) wMM = 12;

            wReturn = this.TempString(numberFormat(wMM, "0000"));

        } else if (wFunction == "DAYDIFF"){
            wReturn = dayDiff(wArrParam[0], wArrParam[1]) + "";

        } else if (wFunction == "TIMEDIFF"){
            wReturn = timeDiff(wArrParam[0], wArrParam[1]) + "";
            wReturn = clearBehindZero(wReturn);

        } else if (wFunction == "DAYADD"){
            wIntTemp = parseInt(wArrParam[1],10);
            wTemp = dayAdd(wArrParam[0], wIntTemp);
            wReturn = this.TempString(wTemp);

        } else if (wFunction == "DAYSOF"){
            if (wCount == 2){
                wIntTemp  = parseInt(wArrParam[0], 10);
                wIntTemp1 = parseInt(wArrParam[1], 10);

            } else {
                wTemp = wArrParam[0].replace(/\-/g, "");
                wIntTemp = parseInt(wTemp.substring(4), 10);
                wIntTemp1 = parseInt(wTemp.substring(4, 6), 10);
            }
            wReturn = daysOf(wIntTemp, wIntTemp1) + "";

        } else if (wFunction == "WEEKDAY"){
            wReturn = weekDayOf(wArrParam[0]) + "";

        } else if (wFunction == "NOW"){
            wReturn = this.TempString(Now());

        } else if (wFunction == "IIF"){
            wIntTemp = parseInt(wArrParam[0], 10);
            if (wIntTemp == -1){
                wReturn = wArrParam[1];
            } else {
                wReturn = wArrParam[2];
            } 

        } else if (wFunction == "FORMAT"){
            wReturn = this.TempString(format(wArrParam[0], wArrParam[1]));

        } else if (wFunction == "SORT"){
            if (!wHaveString) {
                wReturn = this.TempString(func_SortASC_Num(wArrParam));
            } else {
                wReturn = this.TempString(func_SortASC_Str(wArrParam));
            }

        } else if (wFunction == "SORTDSC"){
            if (!wHaveString) {
                wReturn = this.TempString(func_SortDSC_Num(wArrParam));
            } else {
                wReturn = this.TempString(func_SortDSC_Str(wArrParam));
            }

        } else if (wFunction == "TOPN"){
		
            if (wHaveString) {
                wReturn = this.TempString(func_TopN_Str(wArrParam));
            } else {
                wReturn = this.TempString(func_TopN_Num(wArrParam));
            }

        } else if (wFunction == "LOWN"){
            if (wHaveString) {
                wReturn = this.TempString(func_LowN_Str(wArrParam));
            } else {
                wReturn = this.TempString(func_LowN_Num(wArrParam));
            }

        } else {
            wReturn = "" ;
        }
	
	    //????? ???????. 
	    return wReturn;
	
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {object}
     * @example	미결
     */
    EXOCalculator.prototype.Str2Temp = function(pFormula)
	{
        // functionname : [EXOCalculator.Str2Temp]

        if (pFormula.indexOf("\"") == -1) return pFormula;
        
        var wFormula = pFormula;

		this.ArrStringValues = cutString(pFormula, "\"", "\"");
		this.StringCount = this.ArrStringValues.length;

		if (this.ArrStringValues[this.ArrStringValues.length - 1].length == 0) this.StringCount--;
		for (var i = 0; i < this.StringCount ; i++){
  		    this.StringValues[i + 1] = this.ArrStringValues[i];
 			wFormula = replaceFirstOne(wFormula, "\"" + this.ArrStringValues[i] + "\"", "STR_" + (i + 1));
		}
	
		return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.Temp2Str = function(pFormula)
	{
        // functionname : [EXOCalculator.Temp2Str]

		if (pFormula.indexOf("STR_") == -1) return pFormula;
		
		var wFormula = pFormula || "";
		for(var i = this.StringCount; i > 0; i--){
			wFormula = wFormula.replaceWord("STR_" + i, this.StringValues[i]);
			if (wFormula.indexOf("STR_") == -1) break;
		}
		return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{string}	pString
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.TempString = function(pString)
	{
        // functionname : [EXOCalculator.TempString]

		this.StringValues[++this.StringCount] = pString;
		return  "STR_" + (this.StringCount);
	};
	
	/**
     * @description	미결
     * @param	{object}	pArray
     * @param	{number}	pIndex
     * @return  {object}
     * @example	미결
     */
	EXOCalculator.prototype.Array2String = function(pArray, pIndex)
	{
        // functionname : [EXOCalculator.Array2String]

		if (pArray[pIndex].length == 0) return "";
		return this.Temp2Str(this.MultiOperate(pArray[pIndex]));
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pFormula
	*     @return	{string}
	*     @example	미결
	*/
	function decomment(pFormula)
	{
		var wFormula = pFormula;
	
		if (wFormula.indexOf("//") != -1){
			wFormula = wFormula + "\r\n";
			wFormula = removeString(wFormula, "//", "\r\n");
		}
	
		if (wFormula.indexOf("/*") != -1 && 
			wFormula.indexOf("*/") != -1){
			wFormula = removeString(wFormula, "/*", "*/");
		}
	
		return wFormula;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_TopN_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";
		
		var wReturn = "";
		var wStringLen = 0;
	
		var wUpperBound = pArrParam.length - 1;
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wArrTemp = new Array(wUpperBound); //String
	
		for (var i = 0; i < wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i + 1];
		}
	
		wArrTemp.sort(compare);
		
		var j = 0;
		for (var i = wUpperBound - 1; i >= wUpperBound - wIntTemp ; i--){
			if (j++ > 0) wReturn += ",";
			wReturn += wArrTemp[i];
		}
		
	 	wArrTemp = null;
	 	
		return wReturn;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_LowN_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wReturn = "";
		var wStringLen = 0;
		
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wUpperBound = pArrParam.length - 1;
		var wArrTemp = new Array(wUpperBound);
		for (var i = 0; i < wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i + 1];
		}
	
		wArrTemp.sort(compare);
		
	    var j = 0;
		for (var i = 0; i <= wIntTemp - 1; i++){
			if (j++ > 0) wReturn += ",";
			wReturn += wArrTemp[i];
		}
		wArrTemp = null;
		
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_TopN_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wReturn = "";
		
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = [];
	
		for (var i = 0; i < wUpperBound ; i++){
			wArr_dbl[i] = val(pArrParam[i + 1]);
		}
	
		wArr_dbl.sort(compare);
	
		var j = 0;
		for (var i = wUpperBound - 1; i >= wUpperBound - wIntTemp; i--){
			if (j++ > 0) wReturn += ",";
			wReturn += clearBehindZero((wArr_dbl[i]) + '');
		}
		
		return wReturn;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_LowN_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wReturn = "";
		
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = new Array(wUpperBound);
	
		for (var i = 0; i<= wUpperBound - 1; i++){
			wArr_dbl[i] = val(pArrParam[i + 1]);
		}
	
		wArr_dbl.sort(compare);
	
	    var j = 0;
		for (var i = 0; i <= wIntTemp - 1;i++){
	   	    if (j++ > 0) wReturn += ",";
			wReturn += clearBehindZero((wArr_dbl[i]) + '');
		}
	
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortASC_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";
	
		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
			wArr_dbl[i] = val(pArrParam[i]);
		}
	
		wArr_dbl.sort(compare);
	    
		var wReturn = "";
		for (var i = 0; i <= wUpperBound; i++){
			if (i > 0) wReturn += ",";
			wReturn += clearBehindZero((wArr_dbl[i]) + '');
		}
	
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortDSC_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
			wArr_dbl[i] = val(pArrParam[i]);
		}

		wArr_dbl.sort(compare);
	
		var wReturn = "";
		for (var i = wUpperBound; i >= 0; i--){
			wReturn += clearBehindZero(wArr_dbl[i] + "");
			if (i > 0) wReturn += ",";
		}
	
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortDSC_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wUpperBound = pArrParam.length - 1;
		
		var wArrTemp = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i];
		}
	
		wArrTemp.sort(compare);
	
		var wReturn = "";
		for (var i = wUpperBound; i >= 0; i--){
			wReturn += wArrTemp[i];
			if (i > 0) wReturn += ",";
		}
		wArrTemp = null;
		
		return wReturn;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortASC_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wUpperBound = pArrParam.length - 1;
		var wArrTemp = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i];
		}
	
		wArrTemp.sort(compare);
	
		var wReturn = "";
		for (var i = 0; i <= wUpperBound; i++){
			wReturn += wArrTemp[i];
			if (i < wUpperBound) wReturn += ",";
		}
		wArrTemp = null;
		
		return wReturn;
	};
	
	// Sort?? ???????
	/**
	*     @description	미결
	*     @param	{number}	a
	*     @param	{number}	b
	*     @return	{boolean}
	*     @example	미결
	*/
	function compare(a, b){
	    return a < b ? -1 : 
            a == b ? 0 : 1;

	};
	
	/**
	*     @description	미결
	*     @param	{number}	a
	*     @param	{number}	b
	*     @return	{boolean}
	*     @example	미결
	*/
	function compareKey(a, b){
	    return a.key < b.key ? -1 : 
            a.key == b.key ? 0 : 1;

	};

    // ?δ??????
    /* ---- ???? ????? ????? ???? ????? ---- */
	/**
	*     @description	미결
	*     @param	{string}	pChar
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
	function repeatString(pChar, pCount){
        var wReturn = "";
        for (var i = 0; i < pCount; i++) wReturn += pChar;
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @return	{string}
	*     @example	미결
	*/
   function clearFrontZero(pStrNum){
	    var wStrNum = "" + pStrNum;
        var wReturn = "0";
		
        // ????? 0 ????
        var wPos = -1;
        for (var i = 0; i < wStrNum.length; i++){
            if (wStrNum.charAt(i) != '0') {
                wPos = i;
                break;
            }
        }
        if (wPos != - 1)
            wReturn = wStrNum.substring(wPos);
		if (wReturn.charAt(0) == ".") wReturn = "0" + wReturn;

        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @return	{string}
	*     @example	미결
	*/
    function clearBehindZero(pStrNum){
	    var wStrNum = "" + pStrNum;
        if (wStrNum.indexOf('.') == -1)
            return wStrNum;
        
        // ????? 0 ????
        var wReturn = "0";
        var wPos = -1;
        for (var i = wStrNum.length - 1; i >= 0; i--){
            if (wStrNum.charAt(i) != '0') {
                wPos = i;
                break;
            } else if (wStrNum.charAt(i) == '.') {
                wPos = i - 1;
                break;
            }
        }
        if (wPos != - 1)
            wReturn = wStrNum.substring(0, wPos + 1);
        if (wReturn.endsWith("."))
            wReturn = wStrNum.substring(0, wReturn.length - 1);
            
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{boolean}
	*     @example	미결
	*/
    function fncLarger(pStrNumX, pStrNumY){
        var wReturn = false;
        var pStrNumX1 = ""; var pStrNumY1 = ""; var pStrNumX2 = ""; var pStrNumY2 = "";
        pStrNumX = pStrNumX + ""; 
		pStrNumY = pStrNumY + "";
		
        // ????? ??? ?и?
        var wPos = pStrNumX.indexOf(".");
        if (wPos > -1) {
        	pStrNumX1 = pStrNumX.substring(0, wPos);
        	pStrNumX2 = pStrNumX.substring(wPos + 1);
        } else {
        	pStrNumX1 = pStrNumX;
        	pStrNumX2 = "";
        }
        
        wPos = pStrNumY.indexOf(".");
        if (wPos > -1) {
        	pStrNumY1 = pStrNumY.substring(0, wPos);
        	pStrNumY2 = pStrNumY.substring(wPos + 1);
        } else {
        	pStrNumY1 = pStrNumY;
        	pStrNumY2 = "";
        }

        //????? ???? ??
        var wIsEqual = false;
        pStrNumX1 = clearFrontZero(pStrNumX1);
        pStrNumY1 = clearFrontZero(pStrNumY1);
        if (pStrNumX1.length > pStrNumY1.length){
            wReturn = true;
        } else if (pStrNumX1.length == pStrNumY1.length
                   && pStrNumX > pStrNumY){
            wReturn = true;
        } else if (pStrNumX1.length == pStrNumY1.length
                   && pStrNumX == pStrNumY){
            wIsEqual = true;     	
        }
        
        //????? ???? ??
        if (wIsEqual){
        	if (pStrNumX2 == ""){
        		wReturn = false;
        	} else if (pStrNumY2 == ""){
        		wReturn = true;
        	} else {
                wReturn = (pStrNumX2 > pStrNumY2);
            }
        }

        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{object}
	*     @example	미결
	*/
    function fncEqual(pStrNumX, pStrNumY){
        return (clearFrontZero(pStrNumX) == clearFrontZero(pStrNumY));
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{string}
	*     @example	미결
	*/
    function fncMultiply (pStrNumX, pStrNumY){
        // ????? ??? ?????. ??????? ??????? ?????  
        var wReturn = ""; 
	    pStrNumX = pStrNumX + "";
	    pStrNumY = pStrNumY + "";
        if (pStrNumX == "0" || pStrNumY == "0") return "0";
         
        // ????? ?????? a???
        var wVarX = new Array(5);
        var wVarY = new Array(5);
        var wMultiplyValue = 0; var wAddingNum = 0;var wFixingNum = 0;
        
        // ????? ???? o?? 
        var wMinusSign = ((pStrNumX.startsWith("-") && !pStrNumY.startsWith("-"))
                           || (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) );
        if (pStrNumX.startsWith("-")) pStrNumX = pStrNumX.substring(1);
        if (pStrNumY.startsWith("-")) pStrNumY = pStrNumY.substring(1);

        // ??????? ???? o?? 
        var wDotPosFromLeft = 0;
        var wDotPosFromRight = 0;
   
        wDotPosFromLeft = pStrNumX.indexOf('.');
        if (wDotPosFromLeft != -1) {
            wDotPosFromRight = pStrNumX.length - 1 -wDotPosFromLeft;
            pStrNumX = pStrNumX.substring(0, wDotPosFromLeft) + pStrNumX.substring(wDotPosFromLeft + 1);
        }
        
        wDotPosFromLeft = pStrNumY.indexOf('.');
        if (wDotPosFromLeft != -1) {
            wDotPosFromRight = wDotPosFromRight + pStrNumY.length - 1 -wDotPosFromLeft;
            pStrNumY = pStrNumY.substring(0, wDotPosFromLeft) + pStrNumY.substring(wDotPosFromLeft + 1);
        }

        // 15??? ????? ????? ??? 
        pStrNumX = repeatString('0', 15 - pStrNumX.length) + pStrNumX;
        pStrNumY = repeatString('0', 15 - pStrNumY.length) + pStrNumY;
        
        
        for (var i = 0; i < 5; i++){
             wVarX[i] = parseInt(pStrNumX.substring(3 * i, (3 * i) + 3), 10);
             wVarY[i] = parseInt(pStrNumY.substring(3 * i, (3 * i) + 3), 10);
        }
        wReturn = ""; wAddingNum = 0; wMultiplyValue = 0;
        for (var i = 0; i < 10; i++){
            if (i == 0){
                wMultiplyValue = wVarX[4] * wVarY[4];
            } else if (i == 1){
                wMultiplyValue = wAddingNum + (wVarX[3] * wVarY[4]) 
                                            + (wVarX[4] * wVarY[3]);
            } else if (i == 2){
                wMultiplyValue = wAddingNum + (wVarX[2] * wVarY[4]) 
                                            + (wVarX[3] * wVarY[3])  
                                            + (wVarX[4] * wVarY[2]);
            } else if (i == 3){
                wMultiplyValue = wAddingNum + (wVarX[1] * wVarY[4]) 
                                            + (wVarX[2] * wVarY[3])  
                                            + (wVarX[3] * wVarY[2]) 
                                            + (wVarX[4] * wVarY[1]);
            } else if (i == 4){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[4]) 
                                            + (wVarX[1] * wVarY[3])  
                                            + (wVarX[2] * wVarY[2]) 
                                            + (wVarX[3] * wVarY[1]) 
                                            + (wVarX[4] * wVarY[0]); 
            } else if (i == 5){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[3]) 
                                            + (wVarX[1] * wVarY[2]) 
                                            + (wVarX[2] * wVarY[1]) 
                                            + (wVarX[3] * wVarY[0]); 
            } else if (i == 6){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[2]) 
                                            + (wVarX[1] * wVarY[1]) 
                                            + (wVarX[2] * wVarY[0]); 
            } else if (i == 7){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[1]) 
                                            + (wVarX[1] * wVarY[0]); 
            } else if (i == 8){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[0]);
            } else if (i == 9){
                wMultiplyValue = wAddingNum;
            }
            
            wAddingNum = parseInt(wMultiplyValue / 1000,10);
            wFixingNum = wMultiplyValue % 1000;
            wReturn = numberFormat(("" + wFixingNum),"000") + wReturn;
        }
        
        // ????? ????
        if (wDotPosFromRight > 0){
            wDotPosFromLeft = wReturn.length - wDotPosFromRight;
            wReturn = wReturn.substring(0, wDotPosFromLeft) + "." + wReturn.substring(wDotPosFromLeft);
        }
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        
        // ????? 0 ????
        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
                
        // ??? ????
        if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;

       return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @param	{number}	pCalsToPos
	*     @return	{object}
	*     @example	미결
	*/
    function fncMod(pStrNumX, pStrNumY, pCalcToPos){
	
    	 var wReturn = fncDivide(pStrNumX, pStrNumY, pCalcToPos, false);
    	 wReturn = fncMultiply(wReturn, pStrNumY);
    	 wReturn = fncMinus(pStrNumX, wReturn);

         return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @param	{number}	pCalsToPos
	*     @param	{number}	pRoundUp
	*     @return	{string}
	*     @example	미결
	*/
    function fncDivide(pStrNumX, pStrNumY, pCalcToPos, pRoundUp){
        var wReturn = "";
        var wCurrentDigitPos = 0; var wDigitsGap = 0;
	    pStrNumX = pStrNumX + "";
	    pStrNumY = pStrNumY + "";

        // ????? ???? o?? 
        var wMinusSign = ((pStrNumX.startsWith("-") && !pStrNumY.startsWith("-"))
                              || (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) );
        if (pStrNumX.startsWith("-")) pStrNumX = pStrNumX.substring(1);
        if (pStrNumY.startsWith("-")) pStrNumY = pStrNumY.substring(1);

        // ?? ???? ???? ??????? ???
        var wDotPosFromLeftX = pStrNumX.indexOf('.');
        var wDotPosFromLeftY = pStrNumY.indexOf('.');
        var wDotPosFromRightX = 0;
        var wDotPosFromRightY = 0;
        
        if (wDotPosFromLeftX >= 0)
            wDotPosFromRightX = pStrNumX.length - wDotPosFromLeftX - 1;
        if (wDotPosFromLeftY >= 0)
            wDotPosFromRightY = pStrNumY.length - wDotPosFromLeftY - 1;
        if (wDotPosFromRightY > wDotPosFromRightX) {
            pStrNumX = pStrNumX + repeatString('0', wDotPosFromRightY - wDotPosFromRightX);
        } else if (wDotPosFromRightX > wDotPosFromRightY) {
            pStrNumY = pStrNumY + repeatString('0', wDotPosFromRightX - wDotPosFromRightY);
        }
        
        if ( wDotPosFromLeftX > 0)
            pStrNumX = pStrNumX.substring(0, wDotPosFromLeftX) + pStrNumX.substring(wDotPosFromLeftX + 1);
        if (wDotPosFromLeftY > 0)
            pStrNumY = pStrNumY.substring(0, wDotPosFromLeftY) + pStrNumY.substring(wDotPosFromLeftY + 1);
        wDigitsGap = pStrNumX.length - pStrNumY.length;


        
        // ???????? ?????? ??? 0?? ?????
        wCurrentDigitPos = 0;
        if (wDigitsGap < 0){
            pStrNumX = repeatString('0', (-1) * wDigitsGap) + pStrNumX;
        } else if (wDigitsGap > 0){
            wCurrentDigitPos = wDigitsGap;
        }
        wDigitsGap = pStrNumX.length - pStrNumY.length;
        
        // ?ð?????? ????? ???? ??? ???  
        var wCompared= new Array(10);   //String
        for (var i = 0; i < 10; i++){
            wCompared[i] = fncMultiply(pStrNumY, i + "");
		}
       
        // ??ø? ?????? ???? ???? ??? ??????. 
        var wValue;
        var j = 0;
        var wLenY = pStrNumY.length;
		
		
        pStrNumX = pStrNumX + "00000000000000000000000"; //???ο??궧 '0'?? ????? ????? ???????? ??????
        var wTarget = pStrNumX.substring(0, wLenY);
        for (; wCurrentDigitPos > ((-1) * pCalcToPos - 2); wCurrentDigitPos--){
           j++;
           wValue = 9; // ??? ?????? ??? ?????? ?? ???? 9?? ??
           for (i = 1; i <= 9; i++){
               if (fncLarger(wCompared[i], wTarget)){

                   wValue = i - 1;
                   break;
               }
           } 
           var wReminder = fncMinus(wTarget, wCompared[wValue]);
           if (wReminder == "0"){
               wTarget = pStrNumX.substring(wLenY + j - 1, wLenY + j);
           } else {
               wTarget = wReminder + pStrNumX.charAt(wLenY + j - 1);
           }
           wReturn += wValue + '';
        }
        
        if (pCalcToPos >= 0) {
            wDotPosFromLeftX = wReturn.length - pCalcToPos - 1;
            wReturn = wReturn.substring(0, wDotPosFromLeftX) + "." + wReturn.substring(wDotPosFromLeftX);
        } else if (pCalcToPos < 0) {
            wReturn = wReturn + repeatString('0', (-1) * pCalcToPos);
        }
		
        if (pRoundUp) { 
            wReturn = round(wReturn, pCalcToPos);
        } else {
            wReturn = floor(wReturn, pCalcToPos);
        }
        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;

        // ??? ????
        if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;

        return  wReturn;
   };
   
   /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{string}
	*     @example	미결
	*/
   function fncPlus(pStrNumX, pStrNumY){
       var wReturn = "";
       var wMinusSign = false;
	   pStrNumX = pStrNumX + "";
	   pStrNumY = pStrNumY + "";

       // ????? ???? o?? 
       if (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
           pStrNumY = pStrNumY.substring(1);
           return fncMinus(pStrNumX, pStrNumY);
       } else if (pStrNumX.startsWith("-") && !pStrNumY.startsWith("-")) {
           pStrNumX = pStrNumX.substring(1);
           return fncMinus(pStrNumY, pStrNumX);
       } else if (pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
           wMinusSign = true;
           pStrNumX = pStrNumX.substring(1);
           pStrNumY = pStrNumY.substring(1);
       }
       
       // ??????? ??????
       var wDigitsAfterDotX = 0;
       var wDigitsAfterDotY = 0;
       if (pStrNumX.indexOf('.') != -1) 
           wDigitsAfterDotX = pStrNumX.length - pStrNumX.indexOf('.') - 1;        
       if (pStrNumY.indexOf('.') != -1)
           wDigitsAfterDotY = pStrNumY.length - pStrNumY.indexOf('.') - 1;        
       var wDigitsPosition = (wDigitsAfterDotX > wDigitsAfterDotY ? wDigitsAfterDotX : wDigitsAfterDotY);
            
       var wDigitsGap = wDigitsAfterDotX - wDigitsAfterDotY;
       if (wDigitsGap < 0){
           pStrNumX = pStrNumX + repeatString('0', (-1) * wDigitsGap);
       } else if (wDigitsGap > 0){
           pStrNumY = pStrNumY + repeatString('0', wDigitsGap);
       }

       // ?? ???? ???? ??????? ???
       var wDotPosFromLeft = pStrNumX.indexOf('.');
       if (wDotPosFromLeft != -1)
           pStrNumX = pStrNumX.substring(0, wDotPosFromLeft) + pStrNumX.substring(wDotPosFromLeft + 1);
       wDotPosFromLeft = pStrNumY.indexOf('.');
       if (wDotPosFromLeft != -1)
           pStrNumY = pStrNumY.substring(0, wDotPosFromLeft) + pStrNumY.substring(wDotPosFromLeft + 1);
       
       // ????? ?????? a???
       var wVarX = new Array(10);
       var wVarY = new Array(10);
       var wPlusValue = 0; var wAddingNum = 0; var wFixingNum = 0;
       
       // 30??? ????? ????? ??? 
       pStrNumX = repeatString('0', 30 - pStrNumX.length) + pStrNumX;
       pStrNumY = repeatString('0', 30 - pStrNumY.length) + pStrNumY;
       
       for (var i = 0; i < 10; i++){
             wVarX[i] = parseInt(pStrNumX.substring(3 * i, (3 * i) + 3), 10);
             wVarY[i] = parseInt(pStrNumY.substring(3 * i, (3 * i) + 3), 10);
       }
        
       wReturn = ""; wAddingNum = 0; wPlusValue = 0;wFixingNum = 0;
       for (var i = 9; i >= 0; i--){
           wPlusValue = wAddingNum + wVarX[i] + wVarY[i];
           wAddingNum = parseInt(wPlusValue / 1000, 10);
           wFixingNum = wPlusValue % 1000;
           wReturn = numberFormat(wFixingNum + '',"000") + wReturn;
		   
        }
        if (wAddingNum > 0) 
            wReturn = wAddingNum + '' + wReturn;
        
        // ????? ????
        if (wDigitsPosition > 0){
            wDotPosFromLeft = wReturn.length - wDigitsPosition;
            wReturn = wReturn.substring(0, wDotPosFromLeft) + "." + wReturn.substring(wDotPosFromLeft);
        }
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        
        // ????? 0 ????
        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
                
        // ??? ????
        if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;
   
       return  wReturn;
   };
   
   /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{string}
	*     @example	미결
	*/
   function fncMinus(pStrNumX, pStrNumY){
        var wReturn = "";
        var wMinusSign = false;
		pStrNumX = pStrNumX + "";
		pStrNumY = pStrNumY + "";
        
        // ????? ???? o?? 
        if (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
            pStrNumY = pStrNumY.substring(1);
            return fncPlus(pStrNumX, pStrNumY);
        } else if (pStrNumX.startsWith("-") && !pStrNumY.startsWith("-")) {
            pStrNumY = "-" + pStrNumY;
            return fncPlus(pStrNumY, pStrNumX);
        } else if (pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
            wMinusSign = true;
            pStrNumX = pStrNumX.substring(1);
            pStrNumY = pStrNumY.substring(1);
        }
       
        // ??????? ??????
        var wDigitsAfterDotX = 0;
        var wDigitsAfterDotY = 0;
        if (pStrNumX.indexOf('.') != -1) 
            wDigitsAfterDotX = pStrNumX.length - pStrNumX.indexOf('.') - 1;        
        if (pStrNumY.indexOf('.') != -1)
            wDigitsAfterDotY = pStrNumY.length - pStrNumY.indexOf('.') - 1;        
        var wDigitsPosition = (wDigitsAfterDotX > wDigitsAfterDotY ? wDigitsAfterDotX : wDigitsAfterDotY);
            

        // ?? ???? ???? ??????? ???
        var wDigitsGap = wDigitsAfterDotX - wDigitsAfterDotY;
        var wDotPosFromLeft = pStrNumX.indexOf('.');
        if (wDotPosFromLeft != -1)
            pStrNumX = pStrNumX.substring(0, wDotPosFromLeft) + pStrNumX.substring(wDotPosFromLeft + 1);
        wDotPosFromLeft = pStrNumY.indexOf('.');
        if (wDotPosFromLeft != -1)
            pStrNumY = pStrNumY.substring(0, wDotPosFromLeft) + pStrNumY.substring(wDotPosFromLeft + 1);
      
        if (wDigitsGap < 0){
               pStrNumX = pStrNumX + repeatString('0', (-1) * wDigitsGap);
        } else if (wDigitsGap > 0){
               pStrNumY = pStrNumY + repeatString('0', wDigitsGap);
        }

        // 15??? ????? ??? 
        pStrNumX = repeatString('0', 30 - pStrNumX.length) + pStrNumX;
        pStrNumY = repeatString('0', 30 - pStrNumY.length) + pStrNumY;

        var wStrNum = ""; 
        if (pStrNumX < pStrNumY && !wMinusSign){
            wStrNum  = pStrNumX;
            pStrNumX = pStrNumY;
            pStrNumY = wStrNum;
            wMinusSign = true;
        } else if (pStrNumX > pStrNumY && !wMinusSign){
            wMinusSign = false;
        } else if (pStrNumX < pStrNumY && wMinusSign){
            wStrNum  = pStrNumX;
            pStrNumX = pStrNumY;
            pStrNumY = wStrNum;
            wMinusSign = false;
        } else if (pStrNumX > pStrNumY && wMinusSign){
            wMinusSign = true;
        }
      
        // ????? ?????? a???
        var wVarX = new Array(10);
        var wVarY = new Array(10);
        var wMinusValue = 0; var wAddingNum = 0; var wFixingNum = 0;
         
         // 30??? ????? ??? 
         for (var i = 0; i < 10; i++){
              wVarX[i] = parseInt(pStrNumX.substring(3 * i, (3 * i) + 3), 10);
              wVarY[i] = parseInt(pStrNumY.substring(3 * i, (3 * i) + 3), 10);
         }
         
         wReturn = ""; wAddingNum = 0; wMinusValue = 0;

         for (var i = 9; i >= 0; i--){
             wMinusValue = wAddingNum + 1000 + wVarX[i] - wVarY[i];
             wAddingNum = parseInt(wMinusValue / 1000, 10) - 1;
             wFixingNum = wMinusValue % 1000;
             wReturn = numberFormat(wFixingNum + "","000") + wReturn;
         }
        
         // ????? ????
         if (wDigitsPosition > 0){
             wDotPosFromLeft = wReturn.length - wDigitsPosition;
             wReturn = wReturn.substring(0, wDotPosFromLeft) + "." + wReturn.substring(wDotPosFromLeft);
         }
         if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
         
         // ????? 0 ????
         wReturn = clearFrontZero(wReturn);
         wReturn = clearBehindZero(wReturn);
         if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
         if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
                
         // ??? ????
         if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;
 
         return  wReturn;
    };
   
    /* ---- ???? ????? ?????? ????? ---- */
    /**
	*     @description	미결
	*     @return	{string}
	*     @example	미결
	*/
    function Now()
    {
        var wReturn = "";
	    var d = new Date();
		wReturn = ""  + d.getFullYear() 
		        + "-" + (d.getMonth() < 9 ? "0" + (d.getMonth() + 1) : (d.getMonth() + 1) + '') 
		        + "-" + (d.getDate() < 10 ? "0" + d.getDate() : d.getDate() + '')
		        + " " + (d.getHours() < 10 ? "0" + d.getHours() : d.getHours() + '')
		        + ":" + (d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes() + '')
		        + ":" + (d.getSeconds() < 10 ? "0" + d.getSeconds() : d.getSeconds() + '');
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pYear
	*     @return	{number}
	*     @example	미결
	*/
    function isLeapYear(pYear)
    {
        return (new Date(pYear, 2, 0)).getDate() == 29;                             
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pYear
	*     @param	{number}	pMon
	*     @param	{number}	pDay
	*     @return	{object}
	*     @example	미결
	*/
    function DaysOfYear(pYear, pMon, pDay)
    {
        var wLastYearLastDate = (pYear - 1) + "1231";
        var TargetDate = ""  + pYear 
		               + (pMon < 10 ? "0" + pMon : pMon + '') 
		               + (pDay < 10 ? "0" + pDay : pDay + '');

        return dayDiff(wLastYearLastDate, TargetDate);
    };

    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @param	{number}	pPosition
	*     @return	{object}
	*     @example	미결
	*/
    function round(pStrNum, pPosition)
    {
    	//2016 04 20(차중훈) 수정 : pPosition 입력 안 한 경우 0으로 처리
    	pPosition = (typeof pPosition == "undefined") ? 0 : pPosition;
    	
        // ?????? ???? ???? 0?? ???δ?. 
        var wReturn = "0000000000" + pStrNum;
        if (wReturn.indexOf('.') == -1) wReturn += ".0000000000000";
		wReturn += "0000000000000";
        
        // ?????????? ????? ?? ??ø??????? ????? ??????. 
        var wDotPos = wReturn.indexOf('.');
        wReturn = wReturn.substring(0, wDotPos) + wReturn.substring(wDotPos + 1);
        // ??ø?????? ???. 
        wReturn = wReturn.substring(0, wDotPos + pPosition + 1);

        var wCharEnd = wReturn.charAt(wReturn.length - 1);
        wReturn = wReturn.substring(0, wReturn.length - 1);
        if (wCharEnd >= '5'){
            var len1 = wReturn.length;
            wReturn = fncPlus(wReturn, "1");
            var len2 = wReturn.length;
            
            if (len1 > len2) wReturn = repeatString("0",len1 - len2) + wReturn;         
        }
        // ??????? ??? ???δ?.
        if (pPosition > 0) {
            wDotPos = wReturn.length - pPosition;
            wReturn = wReturn.substring(0, wDotPos) + "." + wReturn.substring(wDotPos);
        } else if (pPosition <= 0) {
            wReturn = wReturn + repeatString('0', (-1) * pPosition);
        }

        wReturn = clearFrontZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @param	{number}	pPosition
	*     @return	{object}
	*     @example	미결
	*/
    function ceil(pStrNum, pPosition)
    {
        // ?????? ???? ???? 0?? ???δ?. 
        var wReturn = "0000000000" + pStrNum;
        if (wReturn.indexOf('.') == -1) wReturn += ".0000000000000";
		wReturn += "0000000000000";
        
        // ?????????? ????? ?? ??ø??????? ????? ??????. 
        var wDotPos = wReturn.indexOf('.');
        wReturn = wReturn.substring(0, wDotPos) + wReturn.substring(wDotPos + 1);
        
        // ?ø?????? ???. 
        wReturn = wReturn.substring(0, wDotPos + pPosition);
        wReturn = fncPlus(wReturn, "1");      
        
        // ??????? ??? ???δ?.
        if (pPosition > 0) {
            wDotPos = wReturn.length - pPosition;
            wReturn = wReturn.substring(0, wDotPos) + "." + wReturn.substring(wDotPos);
        } else if (pPosition <= 0) {
            wReturn = wReturn + repeatString('0', (-1) * pPosition);
        }

        wReturn = clearFrontZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
         
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @param	{number}	pPosition
	*     @return	{object}
	*     @example	미결
	*/
    function floor(pStrNum, pPosition)
    {
        // ?????? ???? ???? 0?? ???δ?. 
        var wReturn = "0000000000" + pStrNum;
        if (wReturn.indexOf('.') == -1) wReturn += ".0000000000000";
		wReturn += "0000000000000";
        
        // ?????????? ????? ?? ??ø??????? ????? ??????. 
        var wDotPos = wReturn.indexOf('.');
        wReturn = wReturn.substring(0, wDotPos) + wReturn.substring(wDotPos + 1);
        
        // ?ø?????? ???. 
        wReturn = wReturn.substring(0, wDotPos + pPosition);
    
        // ??????? ??? ???δ?.
        if (pPosition > 0) {
            wDotPos = wReturn.length - pPosition;
            wReturn = wReturn.substring(0, wDotPos) + "." + wReturn.substring(wDotPos);
        } else if (pPosition <= 0) {
            wReturn = wReturn + repeatString('0', (-1) * pPosition);
        }

        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);

        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
        if (wReturn == "-0") wReturn = "0" ;
         
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	num
	*     @return	{string}
	*     @example	미결
	*/
    function abs(num)
    {
        var wReturn = num + '';
        if (wReturn.startsWith("-")) wReturn = wReturn.substring(1);
        
        return wReturn;
    };

   /* ---- ???? ????? ????? ?????? ????? ---- */
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @param	{number}	pPosition
	*     @return	{boolean}
	*     @example	미결
	*/
    function isDBCSPoint(pString, pPosition)
    {
        var wReturn = 0;
        var str = pString;
        var wPosition = 0;
        for (var i = 0; i < str.length; i++) {
            var wISDBCSChar = str.charCodeAt(i) > 128;
            wPosition += wISDBCSChar ? 2 : 1;
            
            if (wISDBCSChar && wPosition == pPosition) {
                wReturn = 2;
                break;
            } else if (wISDBCSChar && wPosition > pPosition) {
                wReturn = 1;
                break;
            } else if (wPosition >= pPosition) {
                break;
            }
        }
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
    function leftB(pSource, pCount)
    {
        var wReturn = pSource;
        var str = pSource;
        var wCount = 0;
        for (var i = 0; i < str.length; i++) {
            var wISDBCSChar = str.charCodeAt(i)> 128;
            wCount += wISDBCSChar ? 2 : 1;
            
            if (wISDBCSChar && wCount > pCount) { 
                wReturn = str.substring(0, i) + " ";
                break;
            } else if (wCount >= pCount) {
                wReturn = str.substring(0, i + 1);
                break;
            }
        }
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
    function rightB(pSource, pCount)
    {
        var wReturn = pSource;
        var str = pSource;
        var wCount = 0;
        for (var i = str.length -1; i > 0; i--) {
            var wISDBCSChar = str.charCodeAt(i) > 128;
            wCount += wISDBCSChar ? 2 : 1;
            
            if (wISDBCSChar && wCount > pCount) {
                wReturn = str.substring(i+1) ;
                break;
            } else if (wCount >= pCount) {
                wReturn = str.substring(i);
                break;
            }
        }
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{number}	pStart
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
    function midB(pSource, pStart, pCount)
    {
        var wReturn = pSource;
        var str = pSource;
        var wCount = 0;
		var wStartPoint = -1; var wEndPoint = pSource.length;
		
        for (var i = 0; i < str.length; i++) {
            var wISDBCSChar = str.charCodeAt(i)> 128;
            wCount += wISDBCSChar ? 2 : 1;
			

            if (wCount > pStart && wStartPoint == -1) {
                wStartPoint = i;
            }
			
            if (wCount == pStart + pCount) {
                wEndPoint = i + 1;
                break;
            } else if (wCount > pStart + pCount) {
                wEndPoint = i;
               break;
            } 
			
			
        }
		wReturn = str.substring(wStartPoint, wEndPoint);
		
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @param	{number}	pStartPos
	*     @param	{object}	pBinarySearch
	*     @return	{boolean}
	*     @example	미결
	*/
    function instrB(pSource, pTarget, pStartPos, pBinarySearch)
    {
        var wReturn = 0;
		var wPos = 0; 
		var wStartPoint = 0;
		var str = pSource;
		var wCount = 0;
		var wTarget = "" + pTarget;
		
        for (var i = 0; i < str.length; i++) {
            wCount += (str.charCodeAt(i)> 128) ? 2 : 1;
			
            if (wCount >= pStartPos) {
                wStartPoint = i; break;
            }
        }
		
        
        if (pBinarySearch){
            wPos = pSource.toUpperCase().indexOf(wTarget.toUpperCase(), wStartPoint);
        } else {
            wPos = pSource.indexOf(wTarget, wStartPoint);
        }
        if (wPos == -1) {
        	wReturn = 0;
        } else {
	        for (var i = 0; i <= wPos; i++) 
	            wReturn += (str.charCodeAt(i)> 128) ? 2 : 1;
		}
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @param	{string}	pString
	*     @return	{boolean}
	*     @example	미결
	*/
    function replaceFirstOne(pSource, pTarget, pString)
    {
        return pSource.replace(pTarget, pString);
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @param	{string}	pString
	*     @param	{number}	pStart
	*     @param	{number}	pCount
	*     @param	{object}	pBinarySearch
	*     @return	{string}
	*     @example	미결
	*/
    function replaceNN(pSource, pTarget, pString, pStart, pCount, pBinarySearch)
    {
        var wReturn = "";
        var wFoundCount = 0;
        var wReplaceCount = 0;
        var wPosNext = 0; var wPosBefore = 0;
        var wTarget = "" + pTarget;

        if (pBinarySearch){
            pSource = pSource.toUpperCase();
            wTarget = wTarget.toUpperCase();
        }
        var wPos = pSource.indexOf(wTarget);

        while (wPos != -1){
            
            wReturn += pSource.substring(wPosBefore, wPos);
            if (++wFoundCount >= pStart && wReplaceCount < pCount){
                wReturn += pString;
                wReplaceCount++;
            } else {
                wReturn += wTarget;
            }

            wPosBefore = wPos + wTarget.length;
            wPos = pSource.indexOf(wTarget, wPos + 1);
        }
        wReturn += pSource.substring(wPosBefore);
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pChar
	*     @return	{boolean}
	*     @example	미결
	*/
    function countOfChar(pSource, pChar)
    {
        var wCount = 0;
        var wPos = pSource.indexOf(pChar);
        while (wPos != -1){
            wCount++;
            wPos = pSource.indexOf(pChar, ++wPos);
        }
        return wCount;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @return	{boolean}
	*     @example	미결
	*/
    function countOfStr(pSource, pTarget)
    {
        var wTarget = "" + pTarget;
    	var wCount = 0;
        var wPos = pSource.indexOf(wTarget);
        while (wPos != -1){
            wCount++;
            wPos = pSource.indexOf(wTarget, ++wPos);
        }
        return wCount;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @return	{object}
	*     @example	미결
	*/
    function RTrim(pSource)
    {
         return pSource.replace(/(\s*$)/, "");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @return	{object}
	*     @example	미결
	*/
    function LTrim(pSource)
    {
        return pSource.replace(/(^\s*)/, "");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @return	{object}
	*     @example	미결
	*/
    function isNumeric(pString)
    {
        if (pString.length == 0) return false;
        
        var wString = pString;
		wString = wString.trim();
		
		var wReturn =  wString.replace(/[^0-9]/g, "") == wString 
		            || (wString.charAt(0) == "-" && wString.substring(1).replace(/[^0-9]/g, "") == wString.substring(1));
		return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @param	{number}	pPosition
	*     @return	{boolean}
	*     @example	미결
	*/
    function isSign(pString, pPosition)
    {
        if (pPosition == 0) return true;
        
        var wResult = true;
        var wPos = pPosition - 1;
        var wChar = " ";
        var wString = "";
        while (0 <= wPos){
            wChar = pString.charAt(wPos);			
            if (wChar == " "){
                wPos--;
                continue;
            }
    
            // ???????? ?????? +-?? ??????.
            wResult = false;
            
            if (wChar == "*" || wChar == "/" || wChar == "\\" || wChar == "=" || 
                wChar == ">" || wChar == "+" || wChar == "-"  || wChar == "<" || 
                wChar == "(" || wChar == "," ){
                wResult = true;
            }
            if (1 <= wPos){
                wString = pString.substring(wPos - 1, wPos + 1).toUpperCase();
                if (wString == "OR") wResult = true;
            } 
            if (2 <= wPos) {
                wString = pString.substring(wPos - 2, wPos + 1).toUpperCase();
                if (wString == "AND" || wString == "MOD" ||wString == "NOT") wResult = true;
            }
            break;
        }
    
        return wResult;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @return	{boolean}
	*     @example	미결
	*/
    function val(pString)
    {
        if (typeof(pString) == "number") return pString;
        
        var wReturn = 0;
        var wPos = 0;
        var wString = "";
	
		while (pString.charAt(wPos) == " ") wPos++;
		
        var wChar = pString.charAt(wPos);
        if (wChar == '-'){
           wString += "-";
           wPos++;
        } else if (wChar == '+'){
           wPos++;
        }
        
        for (var i = wPos; i < pString.length; i++){
            wChar = pString.charAt(i);
            if (wChar == '.' || (wChar >= '0' && wChar <= '9')) {
                wString += wChar;
            }
        }
        
        if (wString.length > 0) 
            wReturn = parseFloat(1 * wString);
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	pBoolValue
	*     @return	{boolean}
	*     @example	미결
	*/
    function ChangeStrB2I(pBoolValue)
    {
        return (pBoolValue ? "-1" : "0");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pattern
	*     @param	{string}	text
	*     @return	{number}
	*     @example	미결
	*/
    function checkLike(pattern, text) {
        var wMask = pattern || "";
		var original = text || "";
		
		if (wMask.indexOf("\\"))
    		wMask = wMask.replace(/\\/g,"<XXXxxx>");
		if (wMask.indexOf("+"))
    		wMask = wMask.replace(/\+/g,"\\+");
		if (wMask.indexOf("$"))
    		wMask = wMask.replace(/\$/g,"\\$");
		if (wMask.indexOf("^"))
    		wMask = wMask.replace(/\^/g,"\\^");
		if (wMask.indexOf("."))
    		wMask = wMask.replace(/\./g,"\\.");
		if (wMask.indexOf("("))
    		wMask = wMask.replace(/\(/g,"\\(");
		if (wMask.indexOf(")"))
    		wMask = wMask.replace(/\)/g,"\\)");
		if (wMask.indexOf("["))
    		wMask = wMask.replace(/\[/g,"\\[");
		if (wMask.indexOf("]"))
    		wMask = wMask.replace(/\]/g,"\\]");
		if (wMask.indexOf("*"))
    		wMask = wMask.replace(/\*/g,".*");
		if (wMask.indexOf("?"))
    		wMask = wMask.replace(/\?/g,".");
		if (wMask.indexOf("<XXXxxx>"))
    		wMask = wMask.replace(/<XXXxxx>/g,"\\\\");
		
	    var re=new RegExp(wMask, "g");
	    var arrMatched = original.match(re);
		
		return arrMatched != null && arrMatched[0].length == original.length;

    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @return	{string}
	*     @example	미결
	*/
    function pressSpace(pString)
    {
        var wReturn = "";
        var wPos = 0;
		var wChar0 = "";
		var wChar1 = "";

        for (i = 0; i < pString.length; i++){
            wChar1 = pString.charAt(i);
            if (wChar0 != ' ' || wChar1 != ' ') {
                wReturn += wChar1;
            }
            wChar0 = wChar1;
        }
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget1
	*     @param	{string}	pTarget2
	*     @return	{string}
	*     @example	미결
	*/
    function cutString(pSource, pTarget1, pTarget2)
    {
        var wString = "";
        var wCount = 0;
        var wPos1 = pSource.indexOf(pTarget1);
        var wPos2 = 0;
        var wHaveNull = false;
       
        while (wPos1 != -1){
            wPos2 = pSource.indexOf(pTarget2, ++wPos1);
            if (wPos2 == -1) break;
            wString += pSource.substring(wPos1, wPos2); 
            if (wPos1 == wPos2) {wString += "$NULL$"; wHaveNull = true;} 
            wString += "/DV/"; 
            
            wPos1 = pSource.indexOf(pTarget1, ++wPos2);
        }
        
        var wArrReturn = wString.split("/DV/"); 
        
        if (wHaveNull){
            for (var i = 0; i < wArrReturn.length; i++){
            	if (wArrReturn[i] == "$NULL$"){
            		wArrReturn[i] = "";
            	}
            }
        }

        return wArrReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget1
	*     @param	{string}	pTarget2
	*     @return	{string}
	*     @example	미결
	*/
    function removeString(pSource, pTarget1, pTarget2)
    {
        var wReturn = "";
        var wCount = 0;
        var wPos0 = 0;
        var wPos1 = pSource.indexOf(pTarget1);
        var wPos2 = 0;
        var wLen1 = pTarget1.length;
        var wLen2 = pTarget2.length;
        
        while (wPos1 != -1){
            wPos2 = pSource.indexOf(pTarget2, wPos1 + wLen1);
            if (wPos2 == -1) break;
            wReturn += pSource.substring(wPos0, wPos1); 
            
            wPos0 = wPos2 + wLen2; 
            wPos1 = pSource.indexOf(pTarget1, wPos0);
        }
        if (wPos0 < pSource.length)
          wReturn += pSource.substring(wPos0); 
        
        return wReturn;
    };
    
    /* =======================================================================
                ????? : "?????;NULL??????"   ????? : "?????:???? ???;0 ???;NULL???"
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pForamt
	*     @return	{string}
	*     @example	미결
	*/
    function format(pTarget, pFormat, pRound)
    {
        // ???? ???? u? 
        if (pTarget.length == 0 || pFormat.length == 0) return "";

        // ????????
        var wTarget = "" + pTarget;
        var wReturn = wTarget;
        var wLength = (pFormat.length < wTarget.length) ? wTarget.length : pFormat.length;
        var wType = 0; 
    
        // 1. ???? pFormat?? ?????? ??????.
        if( pFormat.indexOf('@') >= 0 ){
            wType = 1;
        } else if( pFormat.indexOf('&') >= 0 ){
            wType = 1;
        } else if( pFormat.indexOf("YY") != -1 ||
                   pFormat.indexOf("MM") != -1 || 
                   pFormat.indexOf("DD") != -1 ||
                   pFormat.indexOf("Hh") != -1 ||
                   pFormat.indexOf("Nn") != -1 ||
                   pFormat.indexOf("Ss") != -1 ||
                   pFormat.indexOf("mm") != -1 ||
                   pFormat.indexOf("dd") != -1 ||
                   pFormat.indexOf("hh") != -1 ||
                   pFormat.indexOf("nn") != -1 ||
                   pFormat.indexOf("ss") != -1 ||
                   pFormat.indexOf("WK") != -1 ||
                   pFormat.indexOf("wk") != -1
        ){
            wType = 3;
        } else {
            wType = 2;
        } 
    
        var wArrString = pFormat.split(";");
        var wFormatCnt = wArrString.length;
        
        // 2. ????????? ??츦 o?????. 
        if (wType == 2){
            if (wTarget.length == 0){
                if (wFormatCnt >= 4)
                    wReturn = wArrString[3];
            } else {
                pFormat = wArrString[0];
                if (wTarget == "0"){
                    if (wFormatCnt >= 3)
                        pFormat = wArrString[0];
                } else if (wTarget.startsWith("-")){
                    if (wFormatCnt >= 2)
                        pFormat = wArrString[1];
                }
                
                wReturn = numberFormat(wTarget, pFormat, pRound);
            }
        // 3. ???? ????? ??츦 o?????. 
        } else if (wType == 1){
            if (wTarget.length == 0){
                if (wFormatCnt >= 1)  
                    wReturn = wArrString[1];
            } else {
                pFormat = wArrString[0];
                wReturn = stringFormat(wTarget, pFormat);
            }
    
        // 4. ????????? ??츦 o?????. 
        } else if (wType == 3){
        	pFormat = wArrString[0];
        	wReturn = dateFormat(wTarget, pFormat);
        }
    
        return wReturn;
    };

    /* =======================================================================
       ????? : ?? -> "0", "#", ".", "%", ",",     ????? ->"- + $ ( )"   
                "X" : X????? ??????? ???
                " "ABC" " : ???????? ??????? ???? 
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @return	{string}
	*     @example	미결
	*/
    function numberFormat(pTarget, pFormat, pRound)
    {
        var wReturn = "";
        var wTarget =  "" + pTarget;
        var wLeft = 0; var wRight = 0; var wTLeft = 0; var wTRight = 0;
        var w_bInline = false;
        var w_bNegative = false;
        
        if( pFormat.indexOf(".") >= 0 ){
        	var formatPointAfter = pFormat.substring(pFormat.indexOf(".") + 1);
 			var formatPointCount = formatPointAfter.length;
 			var value = 1 * pTarget;
 			
 			if( pRound == DISPAY_FORMAT_CEIL ){
 				wTarget = "" + (Math.ceil(value * Math.pow(10, formatPointCount)) / Math.pow(10, formatPointCount));
 			}
 			else if( pRound == DISPAY_FORMAT_FLOOR ){
 				wTarget = "" + (Math.floor(value * Math.pow(10, formatPointCount)) / Math.pow(10, formatPointCount));
 			}
 			else{ /* pRound == DISPAY_FORMAT_ROUND */
 				wTarget = "" + (Math.round(value * Math.pow(10, formatPointCount)) / Math.pow(10, formatPointCount));
 			}
 			
 			value = null;
 			formatpointAfter = null;
        }
		
		// - ????? o??
        if (wTarget.startsWith("-")) {
            wTarget = wTarget.substring(1);
            w_bNegative = true;
        }
        
        //pFormat?? '%'?? ?????? ??? 100?? ???? ???´?. 
        if (pFormat.indexOf('%') >= 0) 
            wTarget = fncMultiply(wTarget, "100");
            
        // ??????? ???? ??????? ????? ??? ??? ????? ??? ??? ?и? 
        var wPos = pFormat.indexOf('.');
        if (wPos == -1){
            wLeft  = pFormat;
            wRight = "";
        } else {
            wLeft  = pFormat.substring(0, wPos);
            wRight = pFormat.substring(wPos + 1);
        }
        
        wPos = wTarget.indexOf('.');
        if (wPos == -1){
            wTLeft  = wTarget;
            wTRight = "";
        } else {
            wTLeft  = wTarget.substring(0, wPos);
            wTRight = wTarget.substring(wPos + 1);
        }
        
        // ????? ????? ??????? ??ø? 
        // ??????????? ??ø? ???
        var wCount2 = countOfChar(wRight, '0') + countOfChar(wRight, '#');
        //2016-07-07(수정) : 반올림 로직 제외
//        if (wCount2 > 1){
//            wTRight = wTRight + "0000000000000";
//            var wChar = wTRight.charAt(wCount2 - 1);
//            var wCharEnd = wTRight.charAt(wCount2);
//            wTRight = wTRight.substring(0, wCount2 - 1);
//            
//            if (wCharEnd >= '5'){
//                wTRight = wTRight + (++wChar);      
//            } else {
//                wTRight = wTRight + wChar;      
//            } 
//        }
    
        // Format??????? ??????? ????? ???´?. 
        var wCount1 = countOfChar(wLeft, '0') + countOfChar(wLeft, '#');
        var wLength = wTLeft.length;
        if (wLength < wCount1) {
            wTLeft = repeatString('0', wCount1 - wLength) + wTLeft; 
            wLength = wCount1;
        } else if (wLength > wCount1) {
            wPos = wLeft.indexOf('0');
            var wPosSharp = wLeft.indexOf('#');
            if (wPos == -1) {
               wPos = wPosSharp;
            } else if (wPosSharp > -1 && wPos > wPosSharp) {
               wPos = wPosSharp;
            }
            wLeft = wLeft.substring(0, wPos) 
                  + repeatString('#', wLength - wCount1) 
                  + wLeft.substring(wPos); 
        }
        wCount1 = wLeft.length;
        
        //??????? ??????? ???? 
        var p1 = 0; var t1 = 0; // p1:??????????? ??? t1: ??????????? ???
        var wPChar = ""; var wTChar = "";
        while (p1 < wCount1 || t1 < wLength){
            if (p1 < wCount1) wPChar = wLeft.charAt(p1);
            if (t1 < wLength) wTChar = wTLeft.charAt(t1);
            if (p1 >= wCount1){
                wReturn +=  wTChar;
                t1++;
    
            } else if (wPChar == '0'){
                if (wTChar == '0'){
                    wReturn +=  '0';
                } else {
                    wReturn +=  wTChar;
                }
                if (wTChar != '0') w_bInline = true;
                p1++; t1++;
    
            } else if (wPChar == '#') {
                if (wTChar != '0') {
                    wReturn +=  wTChar;
                } else if (w_bInline){
                    wReturn +=  wTChar;
                }
                if (wTChar != '0') w_bInline = true;
                p1++; t1++;
    
            } else if (wPChar == ',') {
                if (w_bInline)
                    wReturn +=  wPChar;
                p1++;
    
            } else {
                wReturn +=  wPChar;
                p1++;
            }
            
        }
    
        //??????? ??????? ???? 
        if (wCount2 > 0) wReturn += ".";
        
        wCount2 = wRight.length;
        wLength = wTRight.length;
        var p2 = 0; var t2 = 0; // p1:??????????? ??? t1: ??????????? ???
    
        while (p2 < wCount2){
            if (p2 < wCount2) wPChar = wRight.charAt(p2);
            if (t2 < wLength) wTChar = wTRight.charAt(t2);
            if (wPChar == '0'){
                if (t2 >= wLength  || wTChar == '0'){
                    wReturn +=  '0';
                } else { 
                   wReturn +=  wTChar;
                }
                p2++; 
                if (t2 < wLength) t2++;
                
            } else if (wPChar == '#') {
            	//if (t2 < wLength && wTChar != '0'){	// ex) 1.016 값이 1.16으로 나옴
            	if (t2 < wLength && (wTChar != '0' || (wTChar == '0' && countOfChar(wTRight.substring(t2+1),'0') != (wLength-(t2+1))))){
                    wReturn +=  wTChar;
                }
                p2++;
                if (t2 < wLength) t2++;
            } else {
                wReturn +=  wPChar;
                p2++;
            }
        }

        if (w_bNegative){
            wPos = wLeft.indexOf('0');
            var wPosSharp = wLeft.indexOf('#');
            if (wPos == -1) {
               wPos = wPosSharp;
            } else if (wPosSharp > -1 && wPos > wPosSharp) {
               wPos = wPosSharp;
            }
            wReturn = wReturn.substring(0, wPos) 
                  + "-" 
                  + wReturn.substring(wPos); 
            
        }
        if (wReturn.endsWith(".")) {
        	wReturn = wReturn.substring(0, wReturn.length - 1);
        }
        
        return wReturn;
    };


    /* =======================================================================
       ????? : "@" : ????? ??? ??? "&" :????? ??? ???? 
          "<" :?빮?? ">" : ????? "!":????????
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @return	{string}
	*     @example	미결
	*/
    function stringFormat(pTarget, pFormat)
    {
        var wReturn = "";
        var wTarget = "" + pTarget;
        var w_b2Upper = false; var w_b2Lower = false;
		var w_b2LAlign = false; var w_bInline = false;
    
        //?? ???? ??????? ???? ????  
        if (pFormat.startsWith("!")) {
            w_b2LAlign = true;
            pFormat = pFormat.substring(1);
        }
    
        if (pFormat.startsWith("<")) {
            w_b2Upper = true;
            pFormat = pFormat.substring(1);
        } else if (pFormat.startsWith(">")) {
            w_b2Lower = true;
            pFormat = pFormat.substring(1);
        }
    
        // ?ε???? ! ?? ?? ????츦 ??? ???? u? 
        if (pFormat.startsWith("!")) {
            w_b2LAlign = true;
            pFormat = pFormat.substring(1);
        }
    
        //Format??????? ??????? ????? ???´?. 
        var wLength = wTarget.bytes();
        var wCount = countOfChar(pFormat, '@') + countOfChar(pFormat, '&');
        if (wCount > wLength){
            if (w_b2LAlign) {
                wTarget = wTarget + repeatString(' ', wCount - wLength);
            } else {
                wTarget = repeatString(' ', wCount - wLength) + wTarget;
            }
        } else { 
            if (w_b2LAlign) { 
			    wTarget = leftB(wTarget, wCount);
            } else {
                wTarget = rightB(wTarget, wCount);
            }
        }
		
		
		
        //??????? ???? 
        var str = wTarget;
        var wCount = 0;
		var wPos = 0; var wFormatPos = 0;
		while (wPos < wTarget.length){
		    var wChar = wTarget.charAt(wPos);
			var wCharCode = wTarget.charCodeAt(wPos);
			
			if (pFormat.charAt(wFormatPos) == "@"){
			    wReturn += wChar;
				wPos++; wFormatPos++;
				if (wCharCode > 128) wFormatPos++;
				
			} else if (pFormat.charAt(wFormatPos) == "&"){
			    if (wChar != " ") wReturn += wChar;
				wPos++; wFormatPos++;
				if (wCharCode > 128) wFormatPos++;
				
			} else {
			    wReturn += pFormat.charAt(wFormatPos);
				wFormatPos++;
			}
		}
		
		
        if (w_b2Upper) {
            wReturn = wReturn.toUpperCase();
        } else if (w_b2Lower) {
            wReturn = wReturn.toLowerCase();
        }
    
        return wReturn;
    };


    /* =======================================================================
       ????? : "YYYY", "YY", "MM" , "DD" , "Hh", "Nn", "Ss", "mm" , "dd" , "hh", "nn", "ss", "WK", "Wk"
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @return	{string}
	*     @example	미결
	*/
    function dateFormat(pTarget, pFormat)
    {
        var wReturn = pFormat;
        // ??u????? ????? ?????? ??? ?ð???? ??????? ?????? 
//        var wTarget = replace2DateTimeType("" + pTarget);
        var wTarget = pTarget.replace(/\-/g, "");;
    
        //????? ???°? ???????? ?????? ????
        if (wReturn.indexOf("YYYY") >= 0)
            wReturn = wReturn.replaceWord("YYYY", wTarget.substring(0, 4));
        if (wReturn.indexOf("YY") >= 0)
            wReturn = wReturn.replaceWord("YY", wTarget.substring(2, 4));
        if (wReturn.indexOf("MM") >= 0)
            wReturn = wReturn.replaceWord("MM", wTarget.substring(4, 6));
        if (wReturn.indexOf("mm") >= 0)
            wReturn = wReturn.replaceWord("mm", numberFormat(wTarget.substring(4, 6), "#0"));
        if (wReturn.indexOf("DD") >= 0)
            wReturn = wReturn.replaceWord("DD", wTarget.substring(6, 8));
        if (wReturn.indexOf("dd") >= 0)
            wReturn = wReturn.replaceWord("dd", numberFormat(wTarget.substring(6, 8), "#0"));
        if (wReturn.indexOf("Hh") >= 0)
            wReturn = wReturn.replaceWord("Hh", wTarget.substring(8, 10));
        if (wReturn.indexOf("hh") >= 0)
            wReturn = wReturn.replaceWord("hh", numberFormat(wTarget.substring(8, 10), "#0"));
        if (wReturn.indexOf("Nn") >= 0)
            wReturn = wReturn.replaceWord("Nn", wTarget.substring(10, 12));
        if (wReturn.indexOf("nn") >= 0)
            wReturn = wReturn.replaceWord("nn", numberFormat(wTarget.substring(10, 12), "#0"));
        if (wReturn.indexOf("Ss") >= 0)
            wReturn = wReturn.replaceWord("Ss", wTarget.substring(12, 14));
        if (wReturn.indexOf("ss") >= 0)
            wReturn = wReturn.replaceWord("ss", numberFormat(wTarget.substring(12, 14), "#0"));
        if (wReturn.indexOf("WK") >= 0)
        	wReturn = wReturn.replaceWord("WK", getWeekCharacter(wTarget, "L"));
        if (wReturn.indexOf("wk") >= 0)
        	wReturn = wReturn.replaceWord("wk", getWeekCharacter(wTarget, "S"));
    
        return wReturn;
    };
	    
    /* =======================================================================
       ?????? ??? ????? ???? 
           "YYYY-MM-DD Hh:Nn:Ss"  "YYYY-MM-DD Hh:Nn"  "YYYY-MM-DD AM/PM Hh:Nn:Ss" 
           "YYYYMMDD Hh:Nn:Ss"  "YYYYMMDD Hh:Nn"  "YYYYMMDD AM/PM Hh:Nn:Ss" 
           "YYYY-MM-DD AM/PM Hh:Nn"   "YYYY-MM-DD" "YYYYMMDD", "YYMMDD" 
           "Hh:Nn:Ss" "Hh:Nn" "AM/PM Hh:Nn:Ss" "AM/PM Hh:Nn" 
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{object}	pDate
	*     @return	{string}
	*     @example	미결
	*/
    function replace2DateTimeType(pDate)
    {
        var wReturn = "";
        var wTemp;

        //????
        var wCount = pDate.length;
        wCount = (wCount < 21 ? 21 : wCount);
    
        //???? ??ø? ??????? ??????? 
		var now  = new Date(); // ????ð? ????????
		var year = now.getFullYear(); // ?? ????????
		var month= now.getMonth() + 1; // ?? ???????? (+1)
		var date = now.getDate(); // ??￥ ????????
		
        var wDate = "" + year 
		          + (month < 10 ? "0" : "") + month
			      + (date  < 10 ? "0" : "") + date;
		
        var wTarget = pressSpace(pDate).trim().toUpperCase();
    
        var wReturnLength = wTarget.length;
    
        if (wReturnLength == 22){     // YYYY-MM-DD AM/PM Hh:Nn:Ss
            if (!wTarget.substring(11, 13) == "AM"){
                wTemp = wTarget.substring(14, 16);
            } else {
                wTemp = (parseInt(wTemp,10) + 12) + "";
            }
            
            wReturn = wTarget.substring(0, 11)
                    +  wTemp
                    +  wTarget.substring(16, 22);
        
        } else if (wReturnLength == 20){      // YYYYMMDD AM/PM Hh:Nn:Ss
            if (wTarget.substring(9, 11) == "AM"){
                wTemp = wTarget.substring(12, 14);
            } else {
                wTemp = (parseInt(wTemp,10) + 12) + "";
            }
            
            wReturn = wTarget.substring(0, 4) + "-"
                    + wTarget.substring(4, 6) + "-"
                    + wTarget.substring(6, 9)
                    + wTemp;
                    + wTarget.substring(14, 20);
        
        } else if (wReturnLength == 19){      // YYYY-MM-DD AM/PM Hh:Nn
            if (wTarget.substring(11,13) != "AM" && 
                wTarget.substring(11,13) != "PM") {
                wReturn = wTarget;
            } else {
                if (wTarget.substring(11, 13) == "AM"){
                    wTemp = wTarget.substring(14, 16);
                } else {
                    wTemp = (parseInt(wTemp,10) + 12) + "";
                }
                wReturn = wTarget.substring(0, 11) + wTemp
                        + wTarget.substring(16, 19) + ":00";
            }
        
        } else if (wReturnLength == 17){      // YYYYMMDD Hh:Nn:Ss
            wReturn = wTarget.substring(0, 4) + "-"
                    +  wTarget.substring(4, 6) + "-"
                    +  wTarget.substring(6, 9)
                    +  wTarget.substring(9, 17);
        
        } else if (wReturnLength == 16){      // YYYY-MM-DD Hh:Nn
            wReturn = wTarget + ":00";
        
        } else if (wReturnLength == 14){      // YYYYMMDD Hh:Nn
            wReturn = wTarget.substring(0, 4) + "-"
                    +  wTarget.substring(4, 6) + "-"
                    +  wTarget.substring(6, 9)
                    +  wTarget.substring(9, 14)
                    +  ":00";
        
        } else if (wReturnLength == 10){      // YYYY-MM-DD
            wReturn = wTarget + " 00:00:00";
        
        } else if (wReturnLength == 8){       
            if (wTarget.indexOf('-') == -1 && wTarget.indexOf(':') == -1){        // YYYYMMDD
                wReturn = wTarget.substring(0, 4) + "-"
                        + wTarget.substring(4, 6) + "-"
                        + wTarget.substring(6, 8) + " 00:00:00";
			     
            } else if (wTarget.indexOf(":") > -1 &&  
			           wTarget.indexOf("AM") == -1 && wTarget.indexOf("PM") == -1){  // Hh:Nn:Ss
                wReturn = wDate + " " + wTarget;
                
            } else {        // AM/PM Hh:Nn
                if (wTarget.startsWith("AM")){
                    wTemp = wTarget.substring(3, 5);
                } else {
                    wTemp = (parseInt(wTemp,10) + 12) + "";
                }
                wReturn = wDate +  " " + wTemp + ":" + wTarget.substring(6, 8) + ":00";
            }
    
        } else if (wReturnLength == 6){       // YYMMDD
            wReturn = (wTarget.substring(0,2) >= "50" ? "20" : "19")
                    +  wTarget.substring(0, 2)
                    +  "-"
                    +  wTarget.substring(2, 4)
                    +  "-"
                    +  wTarget.substring(4, 6)
                    + " 00:00:00";
    
        } else if (wReturnLength == 5){       // Hh:Nn
            wReturn =  wDate + " " + wTarget + ":00";
    
        } else if (wReturnLength == 11){      // AM/PM Hh:Nn:Ss
            if (!wTarget.startsWith("AM")){
                wTemp = wTarget.substring(3, 5);
            } else {
                wTemp = (parseInt(wTemp,10) + 12) + "";
            }
            
            wReturn =  wDate + " " + wTemp + ":" + wTarget.substring(6, 11);
        } 
    
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @param	{number}	pPoint
	*     @return	{boolean}
	*     @example	미결
	*/
    function findNext(pStatement, pFind, pPoint)
    {
    	if (pStatement.length <= pPoint || pFind.length == 0) return -1;
    	
    	var wReturn = -1;
    	var wLength = pFind.length;
    
    	var p = pPoint;
    	while (p < pStatement.length){
    		if (pStatement.charAt(p) == ' ') {
    			p++;
    			continue;
    		} else if (pStatement.substring(p, p + wLength) == pFind){
    			wReturn = p;	
    		}
    		break;
    	}
    
    	return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{string}
	*     @example	미결
	*/
    function yearOf(dateStr){
    	return dateStr.substring(0, 4);
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function monthOf(dateStr){
        wTemp = dateStr.replace(/\-/g, "").substring(4, 6);
        return numberFormat(wTemp, "#0");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function dayOf(dateStr){
        var wTemp = dateStr.replace(/\-/g, "");
        wTemp = wTemp.substring(wTemp.length - 2);
        return numberFormat(wTemp, "#0");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function beforeYearOf(dateStr){
        var wYM = dateStr.replace(/\-/g, "");
        var wYY = parseInt(wYM.substring(0, 4), 10);
        var wMM = parseInt(wYM.substring(4, 6), 10);

        if (wMM == 1)  wYY--;

        return numberFormat(wYY, "0000");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function beforeMonthOf(dateStr){
        var wYM = dateStr.replace(/\-/g, "");
        var wYY = parseInt(wYM.substring(0, 4), 10);
        var wMM = parseInt(wYM.substring(4, 6), 10);
        
        wMM--;

        if (wMM == 0) wMM = 12;

        return numberFormat(wMM, "0000");
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStart
	*     @param	{number}	pEnd
	*     @return	{number}
	*     @example	미결
	*/
    function dayDiff(pStart, pEnd)
    {
    	var wTemp = pStart.replace(/\-/g, "");
        var wYear = parseInt(wTemp.substring(0,4), 10);
        var wMonth = parseInt(wTemp.substring(4,6), 10) - 1;
        var wDate = parseInt(wTemp.substring(6,8), 10);
        var d1 = new Date(wYear, wMonth, wDate);

        wTemp = pEnd.replace(/\-/g, "");
        wYear = parseInt(wTemp.substring(0,4), 10);
        wMonth = parseInt(wTemp.substring(4,6), 10) - 1;
        wDate = parseInt(wTemp.substring(6,8), 10);
        var d2 = new Date(wYear, wMonth, wDate);

        
        return Math.round((d2.getTime() - d1.getTime()) / (24*60*60*1000));
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStart
	*     @param	{number}	pEnd
	*     @return	{number}
	*     @example	미결
	*/
    function dateDiff(pStart, pEnd){
        return dayDiff(pStart, pEnd);
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStart
	*     @param	{number}	pEnd
	*     @return	{number}
	*     @example	미결
	*/
    function timeDiff(pStart, pEnd)
    {
        // "00000000 00:00:00" 형태로 변환
    	// var wStart = replace2DateTimeType("" + pStart);
        // var wEnd = replace2DateTimeType("" + pEnd);
         var wStart = pStart.replace(/\-/g, "");;
         var wEnd = pEnd.replace(/\-/g, "");;
    	
    	var wYear = parseInt(wStart.substring(0,4), 10);
        var wMonth = parseInt(wStart.substring(4,6), 10) - 1;
        var wDate = parseInt(wStart.substring(6,8), 10);
        var wHour = parseInt(wStart.substring(8,10), 10);
        var wMinute = parseInt(wStart.substring(10,12), 10);
        var wsecond = parseInt(wStart.substring(12,14), 10);
        var d1 = new Date(wYear, wMonth, wDate, wHour, wMinute, wsecond);

        wYear = parseInt(wEnd .substring(0,4), 10);
        wMonth = parseInt(wEnd .substring(4,6), 10) - 1;
        wDate = parseInt(wEnd .substring(6,8), 10);
        wHour = parseInt(wEnd .substring(8,10), 10);
        wMinute = parseInt(wEnd .substring(10,12), 10);
        wsecond = parseInt(wEnd .substring(12,14), 10);
        var d2 = new Date(wYear, wMonth, wDate, wHour, wMinute, wsecond);
        
        return Math.round((d2.getTime()  - d1.getTime()) / 1000);
    };    
    
    /* see common.js */
    /*
    function dayAdd(pStart, pAddCount){}
    */
    
    /**
	*     @description	미결
	*     @param	{number}	pYear
	*     @param	{number}	pMonth
	*     @return	{number}
	*     @example	미결
	*/
    function daysOf(pYear, pMonth){
        return (new Date(pYear,pMonth,0)).getDate();                             
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pDay
	*     @return	{number}
	*     @example	미결
	*/
    function weekDayOf(pDay){
    	var wTemp = pDay.replace(/\-/g, "");
    	
        var wYear = parseInt(wTemp.substring(0,4), 10);
        var wMonth = parseInt(wTemp.substring(4,6), 10) - 1;
        var wDate = parseInt(wTemp.substring(6,8), 10);
        
        return (new Date(wYear,wMonth,wDate)).getDay() + 1;                             
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pDay
	*     @return	{number}
	*     @example	미결
	*/
    function weekDay(pDay){
        return weekDayOf(pDay);                             
    };
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function sort(){
    	var args = Array.prototype.slice.call(arguments);
        var wHaveString = false;
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? sortStrings(args).join(",") : sortValues(args).join(","));
    };
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function sortDesc(){
    	var args = Array.prototype.slice.call(arguments);
        var wHaveString = false;
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? reverseStrings(args).join(",") : reverseValues(args).join(","));
    } ;
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function topNOf(){
    	var args = Array.prototype.slice.call(arguments);
    	var n = args[0];
        var wHaveString = false;
        args.splice(0, 1); // 앞하나 줄임
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? topNStrings(n, args).join(",") : topNValues(n, args).join(","));
    	
    } ;
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function lowNOf(){
    	var args = Array.prototype.slice.call(arguments);
    	var n = args[0];
        var wHaveString = false;
        args.splice(0, 1); // 앞하나 줄임
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? lowNStrings(n, args).join(",") : lowNValues(n, args).join(","));
    };
    
    /**
	*     @description	미결
	*     @param	{number}	a
	*     @param	{number}	b
	*     @return	{number}
	*     @example	미결
	*/
    function sortIt(a,b){
    	return(a-b);
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function sortValues(inputvalues){
    	inputvalues.sort(sortIt);
    	
    	return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function sortStrings(inputvalues){
    	inputvalues.sort();
        return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function reverseValues(inputvalues){
		inputvalues.sort(sortIt);
		inputvalues.reverse();
        return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function reverseStrings(inputvalues){
		inputvalues.sort();
		inputvalues.reverse();
        return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function topNValues(n, inputvalues){
    	inputvalues.sort(sortIt); // 소트
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function topNStrings(n, inputvalues){
    	inputvalues.sort();
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function lowNValues(n, inputvalues){
    	inputvalues.sort(sortIt); // 소트
    	inputvalues.reverse();    // 도치
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function lowNStrings(n, inputvalues){
    	inputvalues.sort();
    	inputvalues.reverse();    // 도치
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
	/**
	*     @description	미결]
	*     @return	{string}
	*     @example	미결
	*/
	function sumOf(){
    	var wArr = null;
    	var wVal = null;
    	var wSum = "0";
    	var wArrSize = 0;
    	var i = 0;
    	
    	if( typeof(arguments[0]) == "object" && arguments[0].length > 0 ){
    		wArr = arguments[0];
    		wArrSize = wArr.length;
    	}
    	else{
    		wArr = arguments;
    		wArrSize = arguments.length;
    	}
    	
    	for(i = 0; i < wArrSize; i++){
    		wVal = wArr[i];
    		wSum = fncPlus(wSum, ((wVal == null || typeof wVal == "undefined") ? "0" : "" + wVal));
    	}
    	
    	if( isNaN(wSum) ) wSum = NaN;
    	
    	//메모리 해제
    	wVal = null; wArr = null;
    	
    	return wSum;
    };
    
    /**
	*     @description	미결
	*     @return	{string}
	*     @example	미결
	*/
    function avgOf(){
 	   var wReturn = wSum = "0";

       if(typeof(arguments[0]) == "object" && arguments[0].length){
	       var wArr = arguments[0];
	       for (var i = 0; i < wArr.length; i++)
	          wSum = fncPlus(wSum, wArr[i] + "");
			  
	       wReturn = fncDivide(wSum, "" + wArr.length, 8, false);
		   
	   } else { 
	       for (var i = 0; i < arguments.length; i++)
	          wSum = fncPlus(wSum, arguments[i] + "");
			  
	       wReturn = fncDivide(wSum, "" + arguments.length, 8, false);
	   }
       
       if(isNaN(wReturn)) wReturn = NaN;
	   
       return wReturn;
    };
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function maxOf()
    {
       var wReturn;
       if(typeof(arguments[0]) == "object" && arguments[0].length){
    	   var wArr =  arguments[0];
    	   wReturn =  wArr[0];
           for (var i = 1; i <  wArr.length; i++)
              if (wArr[i] > wReturn) wReturn = wArr[i] ;
		   
	   } else { 
    	   wReturn =  arguments[0];
           for (var i = 1; i <  arguments.length; i++)
              if (arguments[i] > wReturn) wReturn = arguments[i] ;
	   }

       return wReturn;
    };
    
    /**
	*     @description	미결
	*     @return	{string}
	*     @example	미결
	*/
    function minOf()
    {
       var wReturn;
       if(typeof(arguments[0]) == "object" && arguments[0].length){
    	   var wArr =  arguments[0];
    	   wReturn =  wArr[0];
           for (var i = 1; i <  wArr.length; i++)
              if (wArr[i] < wReturn) wReturn = wArr[i] ;
		   
	   } else { 
    	   wReturn =  arguments[0];
           for (var i = 1; i <  arguments.length; i++)
              if (arguments[i] < wReturn) wReturn = arguments[i] ;
	   }
       return wReturn;
    };
    
    //===== 
    /**
	*     @description	미결
	*     @param	{string}	formula
	*     @return	{string}
	*     @example	미결
	*/
    function fillInfoToFormula(formula){
    	
    	formula = formula.replaceWord("[" + getText("message_usr_personalid", "사용자.사번")   + "]",       "" + USER_PERSONALID);
    	formula = formula.replaceWord("[" + getText("message_usr_personname", "사용자.성명")   + "]",     "\"" + USER_PERSONALNAME + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_cogu",       "사용자.회사")   + "]",       "" + USER_COGU);
    	formula = formula.replaceWord("[" + getText("message_usr_bon",        "사용자.사업장") + "]",       "" + USER_BON);
    	formula = formula.replaceWord("[" + getText("message_usr_part",       "사용자.부서")   + "]",       "" + USER_PART);
    	formula = formula.replaceWord("[" + getText("message_usr_organ",      "사용자.조직")   + "]",       "" + USER_ORGANIZATION);
    	formula = formula.replaceWord("[" + getText("message_usr_date",       "사용자.일자")   + "]",     "\"" + USER_DATE + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_month",      "사용자.년월")   + "]",       "" + USER_MONTH);
    	formula = formula.replaceWord("[" + getText("message_usr_year",       "사용자.년도")   + "]",       "" + USER_YEAR);
    	formula = formula.replaceWord("[" + getText("message_usr_seq",        "사용자.순번")   + "]",       "" + USER_SEQ);
    	formula = formula.replaceWord("[" + getText("message_usr_time",       "사용자.시간")   + "]",     "\"" + USER_TIME + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_userId",     "사용자.아이디") + "]",     "\"" + USER_USERID + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_ipAddr",     "사용자.아이피주소") + "]",   "" + USER_PERSONALID);
    	
    	
    	
    	for (var id in controls) {
    		if (typeof(controls[id])=="function") continue;
    		
    		var wControl = controls[id];
    		var controlString = getText("message_str_control","콘트롤");
    		var controlName = wControl.controlName;
    		
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		if (control.controlId.toLowerCase().indexOf("sheet_") >= 0){
        			for (var colNum = 1; colNum <= wControl.maxCols; colNum++){
        				cellType = wControl.columns[colNum].defaultCellType; 
                        if (cellType == CELLTYPE_DATE){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "\"" + wControl.getValue(colNum) + "\"");
                        } else if (cellType == CELLTYPE_EDIT){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "\"" + wControl.getValue(colNum) + "\"");
                        } else if (cellType == CELLTYPE_NUMBER){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_INTEGER){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_BUTTON){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_PICTURE){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "\"" + wControl.getValue(colNum) + "\"");
                        } else if (cellType == CELLTYPE_COMBOBOX){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_CHECKBOX){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } 
        			}
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		if (wControl instanceof CheckBox){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof ComboBox || wControl instanceof ListBox || wControl instanceof ListBoxW){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof Label){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof TextBox){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof OptionButton){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    	}
    	for (var id in parameters) {
    		if (typeof(parameters[id])=="function") continue;
    		
    		if (typeof(parameters[id])=="number"){
            	formula = formula.replaceWord("[" + getText("message_str_parameter","파라메터") + "." + id + "]",   "" + parameters[id]);
    		} else {
            	formula = formula.replaceWord("[" + getText("message_str_parameter","파라메터") + "." + id + "]",   "\"" + parameters[id] + "\"");
    		}
    		
    	}
    	for (var id in objects) {
    		if (typeof(objects[id])=="function") continue;
    		
    		var wObject = objects[id];
    		
			for (var ndx = 1; ndx <= wObject.propertyCount; ndx++){
				var propertyId = wObject.propertyInfos[ndx].id;
				var propertyName = wObject.propertyInfos[ndx].name;
				
                if (wObject.propertyInfos[ndx].isNumericType){
                    formula = formula.replaceWord("[" + wObject.name + "." + propertyName + "]", "" + wObject.getValue(propertyId));          // 2017.08.18 지운학
                } else {
                    formula = formula.replaceWord("[" + wObject.name + "." + propertyName + "]", "\"" + wObject.getValue(propertyId) + "\""); // 2017.08.18 지운학
                } 
			}
    	}
    	return formula;
    	
    }
    /**
	*     @description	미결
	*     @param	{string}	formula
	*     @return	{string}
	*     @example	미결
	*/
    function FORMULAA(formula){
		return formulaA(formula);
    }
    /**
	*     @description	미결
	*     @param	{string}	formula
	*     @return	{string}
	*     @example	미결
	*/
    function formulaA(formula){
		return (new EXOCalculator()).CalcuratedResult(fillInfoToFormula(formula));
    };var inProcess = false;
var recordsets = [];
var batchWorks = [];

var PARAMTYPE_INPUT  = 1;
var PARAMTYPE_OUTPUT = 2;

/**
 * @description	미결
 * @param		{string}	pKey
 * @return  	{String}
 * @example		미결
 */
function getRecordsetByKey(pKey){
    var wFound = false;
    for (var wKey in recordsets){
    	if (this.recordsets[wKey] instanceof Function) continue;
        if (wKey == pKey){
            wFound = true;
            break;
        }
    }
    var wRecordset = null;
    
    if (wFound){
        wRecordset = recordsets[pKey];
    } else {
        wRecordset = new Recordset(pKey);
    }
    return wRecordset;
};

/**
 * @description	미결
 * @param		{Number}	sqlnum
 * @return  	{String}
 * @example		미결
 */
function getRecordsetBySqlNum(sqlnum){
    var wRecordset = null;
    for (var wKey in recordsets){
    	if (this.recordsets[wKey] instanceof Function) continue;
        if (recordsets[wKey].sqlnum == sqlnum){
        	wRecordset = recordsets[wKey];
            break;
        }
    }
    return wRecordset;
};
/**
 * @class	DataAction
 * @constructor
 */

function Recordset(id) {
	this.id = id;

	this.sqlnum = 0;
	this.sqlBuff = "";
	this.connectionID = "";
	this.encoded = "false";
	this.permitNullParam = false;
	this.parameters = [];

	this.commandType = "Recordset";
	this.clearData = true;
	this.updateRow = false;
	this.dniMode = true;
	this.useReset = true;
	this.needSync = false;
	this.errInfo = "";
	this.rowCount = 0;
	this.currentRow = -1;
	this.BOF = true;
	this.EOF = true;

	this.totalRowCount = 0;
	this.pageSize = 0;
	this.pageNum = 0;
	this.smode = "N";
	this.smore = "N";

	this.fields = [];
	this.recordNum = 0;
	this.recordNums = [];
	
	this.mappingRule = null;
	this._oldMappingRule = null;
	this._sheetDatas = null;
	this._jsonData = null;
	
	this._mapData = null;
	this._targetResetObjects = null;
	
	this.dataSet = new WsDataSet();

	this.casheMode = false;
	this.casheKey = "";

	recordsets[id] = this;

	this.AUIrecordList = null; // AUI 일때

	this.hasReceiveEvent = (typeof self[this.id + "_OnReceive"] == "function");
	if( this.hasReceiveEvent ){
		this.fncReceiveEvent = new Function("return function(){" + this.id + "_OnReceive();}")();
	}

	return this;
};

/**
 * @description	미결
 * @param	{string}	fieldName
 * @param	{string}	dataValue
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.setParameter = function(fieldName, dataValue){
    // functionname : [Recordset.setParameter]
	
    this.parameters[fieldName] = new Parameter(fieldName, dataValue);
    
    return;
};

/**
 * @description	미결
 * @param	{string}	fieldInfo
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.setFields = function(fieldInfo){
    // functionname : [Recordset.setFields]
	
	var wFieldNum = 0;
	var wReturn = true;
	var field = null;
	
	if( this.commandType == "Recordset" ){
		if (fieldInfo.trim().length == 0) return false;
		
		var fields = null;
		var fieldName = null;
		var fieldType = null;
		
		fields = fieldInfo.split(";");
		
		for(wFieldNum = 0; wFieldNum < fields.length; wFieldNum++){
			if( fields[wFieldNum].length == 0 ){
				wReturn = false;
				break;
			}
			
			field = fields[wFieldNum].split(":");
			fieldName = field[0];
			fieldType = (field[1] == "") ? 0 : parseInt(field[1]);
			
			this.fields[wFieldNum] = new Field(this, fieldName, fieldType);
			
			fieldType = null; fieldName = null; field = null;
		}
		
		fields = null;
	}
	else if( this.commandType == "Dataset" ){
		var wResult = null;
		
		for(wFieldNum = 0; wFieldNum < fieldInfo.length; wFieldNum++){
			field = fieldInfo[wFieldNum];
			
			if( typeof field != "object" || !("field" in field) || !("dataType" in field) ){
				wReturn = false;
				break;
			}
			
			wResult = this.dataSet.addField( fieldInfo );
			
			if( wResult == null || !wResult.result ){
				wReturn = false;
				break;
			}
			
			wResult = null; field = null;
		}
		
		wResult = null; field = null;
	}
    
    return wReturn;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.open = function() {
	// functionname : [Recordset.open]

	// 데이터를 리턴받는 경우 레코드셋을 미리 만들어 두고 이 루틴을 호출할 것
	var recordsetId = this.id;
	var ndx = 0;
	
	this.casheKey = "";
	
	for(var wKey in this.parameters){
		if( this.parameters[wKey] instanceof Function ) continue;
		this.casheKey += (ndx++ > 0 ? ":" : "");
		this.casheKey += this.parameters[wKey].value();
	}
	
//	if( this.id.length > 9 && this.id.substring(0, 9) == "fillList_" ){
//		if( dataCashes[this.sqlnum + ":" + this.casheKey] != undefined ){
//			this.setCashedData();
//			return;
//		}
//	}
	
	//가져오기시 조회한 데이터의 레코드 업데이트 구분을 설정
	if( this._targetResetObjects != null && typeof this._targetResetObjects != "undefined" ){
		var targetCount = this._targetResetObjects.length;
		if( targetCount > 0 ){
			var targetObject = null;
			var oldDniMode = null;
			
			for(ndx = 0; ndx < targetCount; ndx++, targetObject = null){
				targetObject = getObjectById(this._targetResetObjects[0]);
				
				if( targetObject == null ){
					continue;
				}
				if( oldDniMode != null && targetObject.dniMode != oldDniMode ){
					targetObject = null;
					return;
				}
				
				oldDniMode = this.dniMode = targetObject.dniMode;
			}
		}
	}
	
	// 한글 없이 영숫자이면 "GET"으로 호출하기 위하여 체크한다
	var needPost = false;
	for(var wKey in this.parameters){
		if( this.parameters[wKey] instanceof Function ) continue;
		needPost = needPost || hasHangul("" + this.parameters[wKey].value());
	}
	
	// 파라메터 정보에는 콜론이 하나 더 붙는다.
	var wParamInfo = this.casheKey + ":";
	var wQueryString = "lang=" + USER_LANGUAGE + "&cogu=" + USER_COGU
			+ "&personalId=" + USER_PERSONALID + "&sqlnum=" + this.sqlnum
			+ "&pageNum=" + this.pageNum + "&pageSize=" + this.pageSize
			+ "&permitNull=" + this.permitNullParam + "&smode=" + this.smode
			+ "&dniMode=" + this.dniMode + "&formid=" + USER_FORMID
			+ "&paramInfo=" + encodeURIComponent(wParamInfo) 
			+ "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	var queryURL = "/query.do";
	var queryFlag = "openRecordset";
	
	if( this.commandType == "Dataset" ){
		queryURL = "/query2.do";
		queryFlag = "openDataset";
	}
	
	if( TEST_MODE == undefined || !TEST_MODE ){
		if( jobControler.loadType == 1 || this.needSync ){
			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + queryURL, wQueryString, this, queryFlag);
		}
		else{
			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + queryURL, wQueryString, this, queryFlag);
		}
	}
	else{
		if( jobControler.loadType == 1 || this.needSync ){
			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + "/test/" + queryURL, wQueryString, this, queryFlag);
		}
		else{
			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + "/test/" + queryURL, wQueryString, this, queryFlag);
		}
	}
	
//	if( TEST_MODE == undefined || !TEST_MODE ){
//		if( jobControler.loadType == 1 || this.needSync ){
//			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + "/query.do", wQueryString, this, "openRecordset");
//		}
//		else{
//			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + "/query.do", wQueryString, this, "openRecordset");
//		}
//	}
//	else{
//		if( jobControler.loadType == 1 || this.needSync ){
//			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + "/test/query.do", wQueryString, this, "openRecordset");
//		}
//		else{
//			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + "/test/query.do", wQueryString, this, "openRecordset");
//		}
//	}
	
	return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.setCashedData = function(){
	// functionname : [Recordset.setCashedData]

	var dataCashe = dataCashes[this.sqlnum + ":" + this.casheKey];

	// 데이터 담기
	this.rowCount = dataCashe.rowCount;
	this.totalRowCount = dataCashe.totalRowCount;
	this.recordNums = dataCashe.recordNums.slice(0);

	if(this.commandType == "Recordset"){
		this.fields = [];
		for(var wFieldNum = 0; wFieldNum < dataCashe.fields.length; wFieldNum++) {
			this.fields[wFieldNum] = new Field(this, dataCashe.fields[wFieldNum].fieldName, dataCashe.fields[wFieldNum].datatype);
			this.fields[wFieldNum].datas = dataCashe.fields[wFieldNum].datas.slice(0);
		}		
	}
	else if( this.commandType == "Dataset" ){
		this.dataSet.setDataSet(dataCashe.dataSet);
	}

	// 레코드 변수 초기화
	this.currentRow = 0;
	this.BOF = true;
	this.EOF = (this.rowCount == 0);
	this.recordNum = this.recordNums[0];

	// 이벤트 일으키기
	if (this.hasReceiveEvent) {
		this.fncReceiveEvent();
	}
	
	// dni모드가 false인 객체의 레코드 상태를 수정
	if( this.useReset && this._targetResetObjects != null ){
		this.reset();
	}
	
	return;
};

/**
 * @description	미결
 * @param	{string}	jsonActionObject
 * @param	{string}	message
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.parseData = function(jsonActionObject, message){
	// functionname : [Recordset.parseData]

	// 오류 메시지 먼저 파악
	if( jsonActionObject == null ){
		this.errInfo = message;
		callEvent(this.id + "_OnReceiveErr", message);
		return;
	}

	// 오류정보 분석
	// 서버에서 메시지가 넘어오면 무조건오류이다
	if( typeof jsonActionObject.errorMsg != "undefined" && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
		this.errInfo = jsonActionObject.errorMsg;
		callEvent(this.id + "_OnReceiveErr", jsonActionObject.errorMsg);
		return;
	}

	if( typeof jsonActionObject.smore != "undefined" ){
		this.smore = jsonActionObject.smore;
	}
	
	if( this.commandType == "Recordset" ){
		// 서버데이터 분석
		this.rowCount = jsonActionObject.recordList.length;

		var fieldList = jsonActionObject.fieldList;
		var recordList = jsonActionObject.recordList;
		var fields = null;
		var wFieldNum = 0;
		var wRow = 0;
		
		for(wFieldNum = 0; wFieldNum < fieldList.length; wFieldNum++){
			this.fields[wFieldNum] = new Field(this, fieldList[wFieldNum].fieldName, fieldList[wFieldNum].datatype);
		}

		// 결과값 분석, 두번쨰 페이지 부터는 안 넘어온다. 처음 조회내용 유지
		if( this.smode == "N" && jsonActionObject.rowCount > 0 ){
			this.totalRowCount = jsonActionObject.rowCount;
		}
		else if( this.smode == "Y" ){
			this.totalRowCount = 9999999;
		}
		
		for(wRow = 0; wRow < recordList.length; wRow++){
			this.recordNums[wRow] = recordList[wRow].rowNum;
			
			fields = recordList[wRow].fields;
			
			for(var wCol = 0; wCol < fields.length; wCol++){
				if( fields[wCol] == null ){
					if( this.fields[wCol].dataType == SQL_TYPE_NUMERIC
						|| this.fields[wCol].dataType == SQL_TYPE_DECIMAL
						|| this.fields[wCol].dataType == SQL_TYPE_INTEGER
						|| this.fields[wCol].dataType == SQL_TYPE_SMALLINT
						|| this.fields[wCol].dataType == SQL_TYPE_FLOAT
						|| this.fields[wCol].dataType == SQL_TYPE_REAL
						|| this.fields[wCol].dataType == SQL_TYPE_DOUBLE )
					{
						this.fields[wCol].datas[wRow] = 0;
					}
					else{
						this.fields[wCol].datas[wRow] = "";
					}
				}
				else{
					this.fields[wCol].datas[wRow] = fields[wCol];
				}
			}
			
			fields = null;
		}
		
		this.recordNum = (typeof this.recordNums[0] != "undefined") ? this.recordNums[0] : 0;

		// 데이터 클리어
		for(wRow = 0; wRow < recordList.length; wRow++){
			recordList[wRow].fields.clear();
		}
		recordList.clear();	recordList = null;
		fieldList.clear();	fieldList = null;
	}
	else if( this.commandType == "Dataset" ){
		if( this.dataSet == null ){
			this.dataSet = new WsDataSet();
		}
		
		var wResult = this.dataSet.setData( jsonActionObject );
		if( wResult.result == null || !wResult.result ){
			wResult = null;
			return;
		}
		
		this.currentRow = 0;
		this.rowCount= this.dataSet.getCount();
		this.recordNum = (this.dataSet.getCount() > 0 && typeof this.dataSet.data[0].__STATE__ != "undefined") ? this.dataSet.data[0].__STATE__.rowNum : 0;
		
		// 결과값 분석, 두번쨰 페이지 부터는 안 넘어온다. 처음 조회내용 유지
		if( this.smode == "N" && jsonActionObject.rowCount > 0 )
			this.totalRowCount = jsonActionObject.rowCount;
		else if( this.smode == "N" && this.pageSize <= 0 && jsonActionObject.rowCount === 0 )
			this.totalRowCount = 0;
		else if( this.smode == "Y" )
			this.totalRowCount = 9999999;
		
		//field ID가 다른 매핑 정보가 있다면 매핑 데이터를 생성함
		this._remakeMappingData();
		
		wResult = null;
	}
	
	// 레코드 변수 초기화
	this.currentRow = 0;
	this.BOF = true;
	this.EOF = (this.rowCount == 0);
	
	// 객체 상태 reset 여부
	var doReset = (this.BOF != this.EOF);

	// 리스트 채우기 쿼리인 경우 페이지 격납
	if( this.id.length > 9 && this.id.substring(0, 9) == "fillList_" ){
		dataCashes[this.sqlnum + ":" + this.casheKey] = new DataCashe(this);
	}
	
	// 피벗 채우기 호출 
	if (typeof pivotAgent != "undefined" && pivotAgent.IsInPivotPool(this.id)){
		pivotAgent.RunPivot(this.id, this.dataSet);
	}

	// 이벤트 일으키기
	if (this.hasReceiveEvent) {
		this.fncReceiveEvent();
	}
	
	// dni모드가 false인 객체의 레코드 상태를 수정
	if( this.useReset && this._targetResetObjects != null ){
		this.reset();
	}

	//hideAjaxBox();

	return;
};

// 문자는 엑셀에서 따옴표 붙여 넘겨줄것
/**
 * @description	미결
 * @param	{string}	jsonArrayObject
 * @param	{string}	message
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.parseDataExcel = function(jsonArrayObject, message) {
	// functionname : [Recordset.parseDataExcel]

	// 오류 메시지 먼저 파악
	if( jsonArrayObject == null ){
		this.errInfo = message;
		callEvent(this.id + "_OnReceiveErr", message);
		return;
	}

	// 서버데이터 분석
	this.rowCount = jsonArrayObject.length;
	if( this.rowCount == 0 ){
		alert(getText("message_dataAction_001", "엑셀로 변환된 결과값이 없습니다."));
		return;
	}
	var colCount = jsonArrayObject[0].length;
	if( colCount == 0 ){
		alert(getText("message_dataAction_001", "엑셀로 변환된 결과값이 없습니다."));
		return;
	}

	var arrColumnDatas = jsonArrayObject[0];
	for( var wFieldNum = 0; wFieldNum < colCount; wFieldNum++ ){
		var dataType = (typeof (arrColumnDatas[wFieldNum]) == "number" ? SQL_TYPE_DOUBLE : SQL_TYPE_VARCHAR);
		this.fields[wFieldNum] = new Field(this, "column" + wFieldNum, dataType);
	}

	this.totalRowCount = jsonArrayObject.rowCount;

	for(var wRow = 0; wRow < this.rowCount; wRow++){
		this.recordNums[wRow] = wRow;
		arrColumnDatas = jsonArrayObject[wRow];

		var fields = recordList[wRow].fields;
		for(var wCol = 0; wCol < colCount; wCol++){
			this.fields[wCol].datas[wRow] = arrColumnDatas[wCol];
		}
	}

	// 데이터 클리어
	for(var wRow = 0; wRow < this.rowCount; wRow++){
		jsonArrayObject[wRow].clear();
	}
	jsonArrayObject.clear();
	jsonArrayObject = null;

	// 레코드 변수 초기화
	this.currentRow = 0;
	this.BOF = true;
	this.EOF = (this.rowCount == 0);
	this.recordNum = this.recordNums[0];
	
//	//객체 상태 reset 여부
//	var doReset = (this.BOF != this.EOF && !this.updateRow);

	// 이벤트 일으키기
	if( this.hasReceiveEvent ){
		this.fncReceiveEvent();
	}
	
	// dni모드가 false인 객체의 레코드 상태를 수정
	if( this.useReset && this._targetResetObjects != null ){
		this.reset();
	}

	return;
};

/**
 * @description	미결
 * @param	{string}	fieldID
 * @return  {string}
 * @example	미결
 */
Recordset.prototype.field = function(fieldID) {
	// functionname : [Recordset.field]

	if( this.commandType == "Recordset" ){
		var wField = null;

		for (var wFieldNum = 0; wFieldNum < this.fields.length; wFieldNum++) {
			if (this.fields[wFieldNum].fieldName == fieldID) {
				wField = this.fields[wFieldNum];
			}
		}

		return wField;
	}
	else if( this.commandType == "Dataset" ){
		var value = this.dataSet.data[this.currentRow][fieldID];
		
		return {
			value : function(){
				return value;
			}
		};
	}

	return null;
};

// BOF가 아니라 첫번째 레코드를 이동한다는 점에 주의
/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.moveFirst = function() {
	// functionname : [Recordset.moveFirst]

	if( this.commandType == "Recordset" ){
		if( this.fields[0].datas.length == 0 ){
			this.currentRow = 0;
			this.recordNum = 0;
			
			return false;
		}
		
		this.currentRow = 0;
		this.recordNum = this.recordNums[this.currentRow];
	}
	else if( this.commandType == "Dataset" ){
		if( this.rowCount == 0 ){
			this.currentRow = 0;
			this.recordNum = 0;
			
			return false;
		}
		
		this.currentRow = 0;
		this.recordNum = this.dataSet.getState(this.currentRow, "rowNum");
		this.recordNum = typeof this.recordNum != "undefined" ? this.recordNum : 0;
	}
	
	return true;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.moveNext = function() {
	// functionname : [Recordset.moveNext]

	this.currentRow++;

	if( this.commandType == "Recordset" ){
		if( this.fields[0].datas.length <= this.currentRow ){
			this.EOF = true;
			this.currentRow = 0;
			this.recordNum = this.recordNums[0];
			
			return false;
		}
		
		this.recordNum = this.recordNums[this.currentRow];
	}
	else if( this.commandType == "Dataset" ){
		if( this.rowCount <= this.currentRow ){
			this.EOF = true;
			this.currentRow = 0;
			this.recordNum = 0;
			
			return false;
		}
		
		this.recordNum = this.dataSet.getState(this.currentRow, "rowNum");
		this.recordNum = typeof this.recordNum != "undefined" ? this.recordNum : 0;
	}

	return true;
};

/**
 * @description	미결
 * @param	{number}	pPageNum
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.setAbsolutePage = function(pPageNum) {
	// functionname : [Recordset.setAbsolutePage]

	this.currentRow = (pPageNum - 1) * this.pageSize;
	
	if( this.commandType == "Recordset" ){
		this.recordNum = this.recordNums[this.currentRow];
	}
	else{
		this.recordNum = this.dataSet.getState(this.currentRow, "rowNum");
		this.recordNum = typeof this.recordNum != "undefined" ? this.recordNum : 0;
	}
	
	return true;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.close = function(){
	// functionname : [Recordset.close]
	var controlName = null;
	var i = 0;
	
	for(i = this.parameters.length - 1; i >= 0; i--){
	    this.parameters[i].destroy();
	    this.parameters.pop();
	}
	this.parameters = null;
	this.parameters = [];
	
	for(i = this.fields.length - 1; i >= 0; i--){
	    this.fields[i].destroy();
	    this.fields.pop();
	}
	this.fields = null;
	this.fields = [];
	
	for(i = this.recordNums.length - 1; i >= 0; i--){
	    this.recordNums.pop();
	}
	this.recordNums = null;
	this.recordNums = [];
	
	if( this.dataSet != null && typeof this.dataSet != "undefined" ){
		this.dataSet.clear(); 
	}
	this.dataSet = null;
	
	if( this._mapData != null ){
		for(controlName in this._mapData){
			if( typeof this._mapData[controlName] != "undefined" ){
				if( this._mapData[controlName] instanceof WsDataSet )
					this._mapData[controlName].clear();
				this._mapData[controlName] = null;
			}
			
			controlName = null;
		}
	}
	this._mapData = null;
	
//	if( this._targetResetObjects != null ){
//		this._targetResetObjects.clear();
//	}
//	this._targetResetObjects = null;
	this.dniMode = true;
//	this.useReset = true;
	
	this.errInfo = "";
	this.CallString = "";
	this.recordNum = 0;
	this.currentRow = -1;
	this.BOF = true;
	this.EOF = true;
	this.rowCount= 0;
//	this.totalRowCount = 0;
	this.smode = "N";
	this.smore = "N";
	
	this.errInfo = "";
	this.sqlBuff = "";
	this.connectionID = "";
	this.encoded = "false";
	this.pageSize = 0;
	this.pageNum = 0;
	
	if(this.AUIrecordList){
		var AUIrecordListLen = this.AUIrecordList.length - 1;
		for (var i = AUIrecordListLen; i >= 0; i--) {
			this.AUIrecordList[i] = null;
		}
	}
	this.AUIrecordList = null; // AUI 일때
	
	return true;
};

Recordset.prototype.setMapRule = function(mapRules){
	var controlName = null;
	var cellIndex = null;
	var formula = null;
	var colId = null;
	var mapObj = null;
	var i = 0;
	
	if( this._oldMapRule != null && JSON.stringify(this._oldMapRule) == JSON.stringify(mapRules) )
		return;
	
	this._oldMapRule = mapRules;
	
	if( this.mapRule == null || typeof this.mapRule == "undefined" )
		this.mapRule = {};
	
	for(i = 0; i < mapRules.length; i++){
		controlName = mapRules[i].control;
		cellIndex = mapRules[i].cell;
		formula = mapRules[i].formula;
		
		if( typeof this.mapRule[controlName] == "undefined" )
			this.mapRule[controlName] = {};
		
		if( typeof DataSet != "undefined" && typeof dataSets[controlName] != "undefined" ){
			this.mapRule[controlName].clear = mapRules[i].clear;
		}
		else{
			if( typeof cellIndex == "number" )
				colId = controls[controlName].getColId(cellIndex);
			else
				colId = cellIndex;
			
			mapObj = this.mapRule[controlName];
			mapObj[colId] = ((typeof formula == "undefined" || formula == null) ? null : new Function("recordset", formula));
			mapObj = null;
			colId = null;
		}
		
		formula = null; cellIndex = null; controlName = null;
	}
	
	return;
};

Recordset.prototype.setTargetResetObjects = function(targetResetObjects){
	if( typeof targetResetObjects == "string" ){
		this._targetResetObjects = [];
		
		if( targetResetObjects.length > 0 ){
			var targetObjectList = targetResetObjects.split(",");
			var targetObject = null;
			var targetObjectCount = targetObjectList.length;
			var i = 0;
			
			for(i = 0; i < targetObjectCount; i++, targetObject = null){
				targetObject = targetObjectList[i].replace(/(^\s*)|(\s*$)/g, "");
				
				if( targetObject.length <= 0 ){
					continue;
				}
				
				this._targetResetObjects.push(targetObject);
			}
			
			targetObjectList = null;
		}
	}
	else if( targetResetObjects == null ){
		this._targetResetObjects = null;
	}
};

Recordset.prototype._remakeMappingData = function(){
	//매핑 룰이 없다면 매핑 데이터를 생성하지 않음
	if( this.mapRule == null )
		return;
	
	if( typeof this._mapData == "undefined" || this._mapData == null )
		this._mapData = {};
	
	var controlName = null;
	var control = null;
	var fieldList = null;
	var recordList = null;
	var mapRuleObj = null;
	var record = null; oldRecord = null; var recordState = null;
	var data = null; oldData = null;
	var key = null;
	var recordCount = 0;
	var i = 0;
	
	for(controlName in this.mapRule){
		if( typeof DataSet != "undefined" && typeof dataSets[controlName] != "undefined" ){
			//데이터셋용 데이터는 별도로 생성하지 않음
			continue;
		}
		else{
			control = controls[controlName];
			
			if( this._mapData != null && typeof this._mapData[controlName] == "undefined" )
				this._mapData[controlName] = new WsDataSet();
			else
				this._mapData[controlName].clear();
			
			if( typeof control == "undefined" || typeof control.dataSet == "undefined" )
				continue;
			
			//매핑 정보
			mapRuleObj = this.mapRule[controlName];
			
			//필드정보 리스트 초기화
			fieldList = [];
			//필드정보 추가
			for(key in mapRuleObj){
				fieldList.push((key in this.dataSet.fieldInfos) ? this.dataSet.fieldInfos[key] : control.dataSet.fieldInfos[key]);
				key = null;
			}
			
			//레코드 리스트 초기화
			recordList = [];
			//레코드 리스트 생성
			for(i = 0, recordCount = this.rowCount; i < recordCount; i++, record = null, oldRecord = null, data = null, oldData = null){
				record = {};	//새 레코드 생성
				oldRecord = {};	//oldData 레코드 생성
				data = this.dataSet.data[i];
				oldData = data.__STATE__.oldData;
				
				//레코드에 데이터 추가
				for(key in mapRuleObj){
					record[key] = (mapRuleObj[key] == null) ? data[key] : mapRuleObj[key](this);
					oldRecord[key] = this.dniMode ? null : record[key];
					key = null;
				}
				if( typeof data.__STATE__ != "undefined" ){
					record["__STATE__"] = {};
					record.__STATE__.rowNum = data.__STATE__.rowNum;
					record.__STATE__.updateGu = data.__STATE__.updateGu;
					record.__STATE__.oldData = oldRecord;
				}
				
				//새 레코드 리스트에 추가
				recordList.push(record);
				
				this.moveNext();
			}
			
			//시트 데이터 추가
			this._mapData[controlName].setDataArray(recordList, fieldList);
			
			//레코드셋 현재행 초기화
			this.currentRow = 0;
			
			//메모리 초기화
			recordList.clear(); recordList = null;
			fieldList.clear(); fieldList = null;
			mapRuleObj = null; control = null;
		}
		
		//메모리 초기화
		controlName = null;
	}
};

Recordset.prototype.recalcMapRule = function(){
	this._remakeMappingData();
};

Recordset.prototype.getMappingData = function(sheetName){
	if( this._mapData == null ){
		if( this.mapRule != null )
			this._remakeMappingData();
		else
			return this.dataSet;
	}
	
	return this._mapData[sheetName];
};

Recordset.prototype.getSheetData = function(sheetName){
	return this.getMappingData(sheetName);
};

Recordset.prototype.setDataToDataset = function(dataSetName){
	var datasetMi = dataSets[dataSetName];
	var datasetUpdateCtrl = null;
	
	if( typeof DataSet != "undefined" && typeof datasetMi != "undefined"){
		datasetUpdateCtrl = datasetMi.instantUpdateControl;
		
		//데이터셋 컨트롤 업데이트 구분 막음
		datasetMi.setInstantUpdateControl(false);
		
		//클리어 구분에 따라 데이터 추가
		if( this.mapRule[dataSetName].clear )
			datasetMi.loadJsonQry( this.dataSet.data );	//load
		else
			datasetMi.appendJsonQry( this.dataSet.data );	//append
		
		//데이터셋 컨트롤 업데이트 구분 복구
		datasetMi.setInstantUpdateControl(datasetUpdateCtrl);
		
		//메모리 초기화
		datasetUpdateCtrl = null;
	}
};

Recordset.prototype.reset = function(){
	var objectId = null;
	var object = null;
	
	for(objectId in objects){
		object = objects[objectId];
		
		//예외처리
		if( typeof object == "function" )
			continue;
		//현재 가져오기 작업으로 영향이 미치는 객체만 리셋해야 하므로 이 가져오기에 의해 영향이 없는 객체는 건너뛴다
		if( this._targetResetObjects != null && this._targetResetObjects.indexOf(object.id) < 0 )
			continue;
		
		object.resetState();
		
		//메모리 해제
		object = null;
		objectId = null;
	}
};

/**
 * @constructor
 */
function Parameter(fieldName, dataValue) {
	this.fieldName = fieldName;
	this.datas = [dataValue];
	this.returnIndex = -1;
};

// 인수가 하나면 0번 줄에 들어가는 값이고, 둘이면, 줄번호와 값이다
/**
 * @description	미결
 * @return  {undefined}
 * @example	미결
 */
Parameter.prototype.setValue = function() {
	// functionname : [Parameter.setValue]

	var length = arguments.length;
	var wRow = 0;
	var wValue = null;

	if( length == 1 ){
		wValue = arguments[0];
	}
	else if( length == 2 ){
		wRow = arguments[0];
		wValue = arguments[1];
	}
	
	this.datas[wRow] = wValue;
};

// 인수가 없으면 0번 줄에 있으면 그줄에 들어간다
/**
 * @description	미결
 * @param	{number}	pRow
 * @return  {number}
 * @example	미결
 */
Parameter.prototype.value = function(pRow) {
	// functionname : [Parameter.value]

	var wRow = pRow || 0;

	return this.datas[wRow];
};

/**
 * @description	미결
 * @return  {undefined}
 * @example	미결
 */
Parameter.prototype.clear = function() {
	// functionname : [Parameter.clear]

	this.datas.clear();
};

/**
 * @description	미결
 * @param		{String}	recordset
 * @param		{Object}	fieldName
 * @param		{String}	dataType
 * @return  	{Undefined}
 * @example		미결
 */
function Field(recordset, fieldName, dataType) {
	this.recordset = recordset;
	this.fieldName = fieldName.toLowerCase();
	this.dataType = dataType;

	this.datas = [];
};

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
Field.prototype.value = function() {
	// functionname : [Field.value]

	var wValue = null;
	
	if( this.dataType == SQL_TYPE_INTEGER || this.dataType == SQL_TYPE_SMALLINT ){
		if( this.datas[this.recordset.currentRow] == undefined ){
			wValue = 0;
		}
		else{
			wValue = parseInt(1 * this.datas[this.recordset.currentRow]);
		}
	}
 	else if( this.dataType == SQL_TYPE_NUMERIC
 			|| this.dataType == SQL_TYPE_DECIMAL
			|| this.dataType == SQL_TYPE_FLOAT
			|| this.dataType == SQL_TYPE_REAL
			|| this.dataType == SQL_TYPE_DOUBLE )
 	{
		if( this.datas[this.recordset.currentRow] == undefined ){
			wValue = 0.0;
		}
		else{
			wValue = parseFloat(1.0 * this.datas[this.recordset.currentRow]);
		}
	}
 	else{
 		if( this.datas[this.recordset.currentRow] == undefined ){
			wValue = "";
		}
 		else{
			wValue = this.datas[this.recordset.currentRow];
		}
	}

	return wValue;
};

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
Field.prototype.setValue = function(value) {
	// functionname : [Field.setValue]

	return (this.datas[this.recordset.currentRow] = value);
};
/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
Field.prototype.destroy = function() {
	// functionname : [Field.destroy]

	this.recordset = null;

	this.datas.clear();
	this.datas = null;
	
	return;
};

/*******************************************************************************
 * ObjectManager Batch정보를 포함하여 객체를 삭제하거나 저장하는 역할을 한다
 ******************************************************************************/
/**
 * @description	미결
 * @return  	{Undefined}
 * @example		미결
 */
function ObjectManager() {
	this.deleteBatchId = "";
	this.deleteBatchParam = "";
	this.insertBatchId = "";
	this.insertBatchParam = "";
	this.callerCommandName = "";
	this.fillkeyFieldValue = "";

	this.batchWorkDelete = null;
	this.batchWorkInsert = null;
	this.dataloaded = false;		// fillObjectToScreen으로 데이터가 채워진 경우 true
	this.busy = false;
};

/**
 * @description	미결
 * @param	{string}	batchWork
 * @return  {undefined}
 * @example	미결
 */
ObjectManager.prototype.setBatchWorkDelete = function(batchWork) {
	// functionname : [ObjectManager.setBatchWorkDelete]

	this.batchWorkDelete = batchWork;
	this.deleteBatchId = batchWork.id;

	batchWork.inintialize();
};

/**
 * @description	미결
 * @param	{string}	batchWork
 * @return  {undefined}
 * @example	미결
 */
ObjectManager.prototype.setBatchWorkInsert = function(batchWork) {
	// functionname : [ObjectManager.setBatchWorkInsert]

	this.batchWorkInsert = batchWork;
	this.insertBatchId = batchWork.id;

	batchWork.inintialize();
};

// 서버데이터 공통 파싱 모듕
/**
 * @description	미결
 * @param	{string}	jsonActionObject
 * @param	{string}	message
 * @param	{string}	pFlag
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.parseData = function(jsonActionObject, message, pFlag){
	// functionname : [ObjectManager.parseData]
    
	this.busy = false;
	
	var checkFunction = false;
	var key = null;
	
	if( pFlag == "loadData" ){
		// 오류 메시지 먼저 파악 
		if( jsonActionObject == null ){
			callEvent("LoadObjects_OnFail", message);
			return;
		}
		
		// 오류정보 분석 
		// 서버에서 메시지가 넘어오면 무조건오류가 아니다, 성공메시지도 있다
		if( jsonActionObject.resultCode != "SUCCESS" ){
			if( jsonActionObject.message != undefined && jsonActionObject.message != null && jsonActionObject.message.length > 0 ){
				this.errInfo = jsonActionObject.message;
				callEvent("LoadObjects_OnFail", jsonActionObject.message);
				return;
			}
			if( jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
				this.errInfo = jsonActionObject.errorMsg;
				callEvent("LoadObjects_OnFail", jsonActionObject.errorMsg);
				return;
			}
		}
		
		// 서버데이터 분석
		// FAILED 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
		if( jsonActionObject.resultCode == "SUCCESS" ){
			for(key in jsonActionObject.mapResult){
				if( typeof(jsonActionObject.mapResult[key])=="function" ) continue;
				getObjectById(key).loadData(jsonActionObject.mapResult[key]);
				key = null;
			}
			
			callEvent("LoadObjects_OnComplete", jsonActionObject.message);
		}
		else if( jsonActionObject.resultCode == "FAILED" ){
			callEvent("LoadObjects_OnFail", jsonActionObject.message);
		}
	}
	
	if( pFlag == "deleteData" ){
		// 오류 메시지 먼저 파악 
		if( jsonActionObject == null ){
			callEvent("Object_DeleteFailed", message);
			return;
		}
		
		// 오류정보 분석 
		// 서버에서 메시지가 넘어오면 무조건오류가 아니다, 성공메시지도 있다
		if( jsonActionObject.resultCode != "SUCCESS" ){
			if( jsonActionObject.message != undefined && jsonActionObject.message != null && jsonActionObject.message.length > 0 ){
				this.errInfo = jsonActionObject.message;
				callEvent("Object_DeleteFailed", jsonActionObject.message);
				return;
			}
			if( jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
				this.errInfo = jsonActionObject.errorMsg;
				callEvent("Object_DeleteFailed", jsonActionObject.errorMsg);
				return;
			}
		}
		
		// 데이터분석
		for(key in jsonActionObject.mapResult){
			if( typeof(jsonActionObject.mapResult[key]) == "function" ) continue;
			
			if( this.batchWorkDelete )
				this.batchWorkDelete.setResult(key, jsonActionObject.mapResult[key]);
			
			key = null;
		}
		
		// 완료가 되었으면 object_DeleteCompleted()이벤트를 호출하고
		// FAILED 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
		if( jsonActionObject.resultCode == "SUCCESS" ){
			// 객체삭제 완료 이벤트 발생
			callEvent("Object_DeleteCompleted", jsonActionObject.message);
			
			// 삭제 배치완료 이벤트 먼저 발생
			if( this.batchWorkDelete )
				callEvent("batch" + this.batchWorkDelete.batchId + "_OnSuccess", jsonActionObject.message);
		}
		// 실패 메시지이면  object_DeleteFailed()이벤트를 호출한다
		else if( jsonActionObject.resultCode == "FAILED" ){
			callEvent("Object_DeleteFailed", jsonActionObject.message);
		}
		
		this.close();  
	}
	
	if( pFlag == "writeData" ){
		if( jsonActionObject == null ){
			callEvent("Object_WriteFailed", message);
			return;
		}
		
		// 오류정보 분석 
		if( jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
			this.errInfo = jsonActionObject.errorMsg;
			callEvent("Object_WriteFailed", jsonActionObject.errorMsg);
			return;
		}
		
		// 데이터분석
		for(key in jsonActionObject.mapResult){
			if( typeof(jsonActionObject.mapResult[key]) == "function" ) continue;
			
			if( this.batchWorkInsert )
				this.batchWorkInsert.setResult(key, jsonActionObject.mapResult[key]);
			
			key = null;
		}
		
		// 완료가 되었으면 object_WriteCompleted()이벤트를 호출하고
		// FAILED 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
		if( jsonActionObject.resultCode == "SUCCESS" ){
			// 배치완료 이벤트 먼저 발생
			callEvent("Object_WriteCompleted", jsonActionObject.message);
			
			// 객체저장완료 이벤트 발생
			if( this.batchWorkInsert )
//				callEvent("batch" + this.batchWorkInsert.batchId + "_OnSuccess", jsonActionObject.message);
				callEvent("batch" + this.batchWorkInsert.batchId + "_wrt_OnSuccess", jsonActionObject.message);
		}
		// 실패 메시지이면  object_WriteFailed()이벤트를 호출한다
		else if( jsonActionObject.resultCode == "FAILED" ){
			callEvent("Object_WriteFailed", jsonActionObject.message);
		}
	}
	
	// hideAjaxBox();
	
	return;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
ObjectManager.prototype.loadData = function(){
	// functionname : [ObjectManager.loadData]
	
	// 로드할 키 정보가 충분한지 점검한다 
	var canLoadData = true;
	for(var key in objects){
		if( typeof(objects[key]) == "function" ) continue;
		canLoadData = canLoadData && objects[key].canLoadData();
	}
	
	// 자동으로 호출되기 떄문에 되도록 메시지 박스를 뛰우지 않는다.
	if( !canLoadData ) return false;
	
	// 쿼리문자열을 만든다.
	// 로드할 객체의 키값들을 리턴한다
	var wQueryString = "lang=" + USER_LANGUAGE
					 + "&cogu=" + USER_COGU
					 + "&personalId=" + USER_PERSONALID;
	
//	var loadData = "";
//	for(var key in objects){
//		if( typeof(objects[key])=="function" ) continue;
//		if( loadData.length != 0 ) loadData += ";";
//		loadData += objects[key].getLoadData();
//	}
	
	var key = null;
	
	var loadData = {};
	var selectCondition = {};
	for(key in objects){
		if( typeof(objects[key]) == "function" ) continue;
		loadData[objects[key].tableID] = objects[key].getLoadJSON();
		selectCondition[objects[key].tableID] = objects[key].getSelectCondition();
		key = null;
	}
	
	wQueryString += "&data=" + this.encode64( JSON.stringify(loadData) );
	wQueryString += "&condition=" + this.encode64( JSON.stringify(selectCondition) );
	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	this.busy = true;
	
	// 화면을 Clear한다. 이때, 키항목을 제외하고 clear한다.
	clearForm(false);
	
	// 서버에 서비스를 의뢰한다  (formXXXXDataAction.java -> loadData Method) ajaxCallSync
//	showAjaxBox("선택하신 화면자료를 조회하는 중입니다.", 0);	
//	ajaxCallSync("POST", "/FlexFrame/form/FlexForm"+ "_" + USER_FORMID + "_Load.do", wQueryString, this, "loadData");
	if( typeof TEST_MODE == "undefined" || !TEST_MODE ){
		ajaxCallSync("POST", getContextPath()+"/" + USER_FORMID+ "_loadData.do", wQueryString, this, "loadData");
	} else {
		ajaxCallSync("POST", getContextPath()+"/test/" + USER_FORMID+ "_loadData.do", wQueryString, this, "loadData");
	}
	
	selectCondition = null;
	loadData = null;
	
	return true;
};

/**
 * @description	미결
 * @param	{string}	callerCommandName
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.deleteData = function(callerCommandName){
	// functionname : [ObjectManager.deleteData]
	
	// 컴맨드 단추가 속한 프래임의 하위 객체만이 대상이다 
	// 하위객체는 데이터 시트가 기준이 된다.
	// 데이터 시트가 없는 경우에는 컨트롤과 연결된 객체를 찾는다.
	if( callerCommandName != undefined && callerCommandName.length > 0 )
		this.callerCommandName = callerCommandName;
	else
		this.callerCommandName = "";
	
	// 배치정보를 만든다 
	var wParamInfo = "";
	var wQueryString = "lang=" + USER_LANGUAGE
					 + "&cogu=" + USER_COGU
					 + "&personalId=" + USER_PERSONALID 
					 + "&batchId=" + this.deleteBatchId
					 + "&batchParam=" + this.deleteBatchParam;
	
	// 쿼리문자열을 만든다.
	// 지워야할 객체의 키값들을 리턴한다
//	var deleteData = "";
//	if( this.callerCommandName.length > 0 ){
//		var commandControl = controls[callerCommandName];
//		for(var i = 0; i < commandControl.objectNames.length; i++){
//			deleteData += objects[commandControl.objectNames[i]].getDeleteData();
//		}
//		wQueryString += "&data=" + this.encode64(deleteData);
//	} else {
//		for(var id in objects){
//			if( typeof(objects[id])=="function" ) continue;
//			deleteData += objects[id].getDeleteData();
//		}
//		wQueryString += "&data=" + this.encode64(deleteData);
//	}
//	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	
	var commandControl = null;
	var id = null;
	var i = 0;
	
	var deleteData = {};
	if( this.callerCommandName.length > 0 ){
		commandControl = controls[callerCommandName];
		for(i = 0; i < commandControl.objectNames.length; i++){
			deleteData[objects[commandControl.objectNames[i]].tableID] = objects[commandControl.objectNames[i]].getDeleteJSON();
		}
		commandControl = null;
	}
	else{
		for(id in objects){
			if( typeof(objects[id]) == "function" ) continue;
			deleteData[objects[id].tableID] = objects[id].getDeleteJSON();
			id = null;
		}
	}
	
	wQueryString += "&data=" + this.encode64( JSON.stringify(deleteData) );
	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	this.busy = true;
	
	// 서버에 서비스를 의뢰한다  (formXXXXDataAction.java -> deleteData Method)
	//showAjaxBox("자료를 삭제중입니다", 0);
    if( typeof TEST_MODE == "undefined" || !TEST_MODE ){
    	ajaxCall("POST", getContextPath() + "/" + USER_FORMID + "_Delete.do", wQueryString, this, "deleteData");    
    } else {
    	ajaxCall("POST", getContextPath() + "/test/" + USER_FORMID + "_Delete.do", wQueryString, this, "deleteData");    
    }
    
    deleteData = null;
    
    return;
};

/**
 * @description	미결
 * @param	{string}	callerCommandName
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.writeData = function(callerCommandName){
	// functionname : [ObjectManager.writeData]
	
	// 컴맨드 단추가 속한 프래임의 하위 객체만이 대상이다 
	// 하위객체는 데이터 시트가 기준이 된다.
	// 데이터 시트가 없는 경우에는 컨트롤과 연결된 객체를 찾는다.
	var commandControl = null;
	if( callerCommandName != undefined && callerCommandName.length > 0 ){
		this.callerCommandName = callerCommandName;
		commandControl = controls[callerCommandName];
	}
	else{
		this.callerCommandName = "";
	}
	
	// 배치정보를 만든다 
	var wParamInfo = "";
	var wQueryString = "lang=" + USER_LANGUAGE
					 + "&cogu=" + USER_COGU
					 + "&personalId=" + USER_PERSONALID
					 + "&callerCommandName" + callerCommandName
					 + "&batchId=" + this.deleteBatchId
					 + "&batchParam=" + this.deleteBatchParam
					 + "&batchId2=" + this.insertBatchId
					 + "&batchParam2=" + this.insertBatchParam;
	
	// 객체 시퀀스를 시트를 기준으로 재정비한다.
	var control = null;
	var id = null;
	try{
		for(id in controls){
			control = controls[id];
			
			if( typeof(control)=="function" ) continue;
			
			if( control.controlId.toLowerCase().indexOf("sheet_") >= 0 && control.controlId.toLowerCase().indexOf("listsheet_") < 0 ){
				control.updateSeqFieldOfLinkedObject();
				// 시트 시퀀스도 같이 재정비한다. 
				//15.05.01 이지홍 추가
				control.updateObjectSeq();
			}
			
			id = null;
			control = null;
		}
	}
	catch(e){
		id = null;
		control = null;
		
		// AUIGrid인 경우 'control instanceof DataSheet' 에러
	}
	
	// dniMode 인겨우 seq 의 재부여
	var wObject = null;
	var id = null;
//	if (!this.dataloaded) {
		if( this.callerCommandName.length > 0 ){
			for(var i = 0; i < commandControl.objectNames.length; i++){
				//객체저장
				wObject = objects[commandControl.objectNames[i]];
				wObject.sortBySeq();
				wObject.arrangeSeq();
				wObject = null;
			}
		}
		else{
			for(id in objects) {
				if( typeof(objects[id]) == "function" ) continue;
				wObject = objects[id];
				wObject.sortBySeq();
				wObject.arrangeSeq();
				id = null;
				wObject = null;
			}
	    }
//	}
	id = null;
	wObject = null;
	
	// 객체별로 데이터를 불러와 인코딩한다.
//	var writeData = "";
//    if (this.callerCommandName.length > 0){
//    	for (var i=0; i < commandControl.objectNames.length;i++){
//    		writeData += objects[commandControl.objectNames[i]].getWriteData();
//    	}
//    } else {
//    	for (var id in objects) {
//    		if (typeof(objects[id])=="function") continue;
//    		writeData += objects[id].getWriteData();
//    	}
//    }
	
	var writeData = {};
	var dniModeQry = {}
	if( this.callerCommandName.length > 0 ){
		for(var i=0; i < commandControl.objectNames.length;i++){
			writeData[objects[commandControl.objectNames[i]].tableID] = objects[commandControl.objectNames[i]].getWriteJSON();
			dniModeQry[objects[commandControl.objectNames[i]].tableID] = objects[commandControl.objectNames[i]].dniMode;
		}
	}
	else{
		for(var id in objects){
			if( typeof(objects[id]) == "function" ) continue;
			writeData[objects[id].tableID] = objects[id].getWriteJSON();
			dniModeQry[objects[id].tableID] = objects[objects[id].tableID].dniMode;
		}
	}
	
	wQueryString += "&data=" + this.encode64( JSON.stringify(writeData) );
	wQueryString += "&dniMode=" + (this.dataloaded ? "0" : "1"); /* 2015.09.22 이지홍 */  
	wQueryString += "&dniModeQry=" + this.encode64( JSON.stringify(dniModeQry) );   
	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	this.busy = true;
	
	//window.clipboardData.setData("Text", this.encode64(writeData));
	// 서버에 서비스를 의뢰한다  (formXXXXDataAction.java -> writeData Method)
	//showAjaxBox("자료를 등록중입니다", 0);
//	alert("/FlexFrame/form/FlexForm" + USER_COGU + "_" + USER_FORMID + "_Write.action?"+wQueryString);
	//DebugCopy("/FlexFrame/form/FlexForm" + USER_COGU + "_" + USER_FORMID + "_Write.action?" + wQueryString);
//	ajaxCall("POST", "/FlexFrame/form/FlexForm" + USER_COGU + "_" + USER_FORMID + "Controller" +"_Write.do", wQueryString, this, "writeData");
	if( TEST_MODE == undefined || !TEST_MODE ){
		ajaxCall("POST", getContextPath() + "/" + USER_FORMID + "_Write.do", wQueryString, this, "writeData");
	} else{
		ajaxCall("POST", getContextPath() + "/test/" + USER_FORMID + "_Write.do", wQueryString, this, "writeData");
	}
	
    writeData = null;
    
    return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.fillData = function(){
	// functionname : [ObjectManager.fillData]
	
	if( typeof fillObjectToScreen == "function" ){
		fillObjectToScreen(this.fillkeyFieldValue);
		this.dataloaded = true;
	}
	
	return;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
ObjectManager.prototype.objectChanged = function(){
	// functionname : [ObjectManager.objectChanged]
	
	// 변화가 있는 객체만을 기록한다. (변화가 없으면 메시지만 뿌리고 빠진다.)
	var needWrite = false;
	var commandControl = null;
	
	if( this.callerCommandName.length > 0 ){
		commandControl = controls[this.callerCommandName];
		
		for(var i = 0; i < commandControl.objectNames.length; i++)
			needWrite = needWrite || objects[commandControl.objectNames[i]].needWrite();
		
		commandControl = null;
	}
	else{
		for(var id in objects){
			if( typeof(objects[id]) == "function" )
				continue;
			
			needWrite = needWrite || objects[id].needWrite();
		}
	}
	
	return needWrite;
};

/**
 * @description	미결
 * @param	{string}	data
 * @return  {string}
 * @example	미결
 */
ObjectManager.prototype.encode64 = function(data){
    // functionname : [ObjectManager.encode64]

	var wReturn = "";
	var index = 0;
	var input = encodeURIComponent(data);

	while (index < input.length) {
	   var charCode1 = input.charCodeAt(index++);
	   var charCode2 = input.charCodeAt(index++);
	   var charCode3 = input.charCodeAt(index++);

	   var newCode1 =   charCode1 >> 2;
	   var newCode2 = ((charCode1 & 3)  << 4) | (charCode2 >> 4);
	   var newCode3 = ((charCode2 & 15) << 2) | (charCode3 >> 6);
	   var newCode4 =   charCode3 & 63;

	   if (isNaN(charCode2))  newCode3 = 64;
       if (isNaN(charCode3))  newCode4 = 64;

       wReturn += USER_KEYSTR.charAt(newCode1) + USER_KEYSTR.charAt(newCode2) + USER_KEYSTR.charAt(newCode3) + USER_KEYSTR.charAt(newCode4);
	}

	return wReturn;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.close = function(){
    // functionname : [ObjectManager.close]

	if (this.batchWorkDelete != null){
	    this.batchWorkDelete.close();
	    this.batchWorkDelete = null;
	}
	if (this.batchWorkInsert != null){
	    this.batchWorkInsert.close();
	    this.batchWorkInsert = null;
	}
	return;
};

/* ********************************************************************
 *   CALL BATCH WORK
 * ********************************************************************/
/**
 * @description	미결
 * @param		{String}	pKey
 * @param		{String}	batchId
 * @return  	{Object}
 * @example		미결
 */
function getBatchWorkByKey(pKey, batchId){
	if (batchId == undefined) batchId = pKey;
    var wFound = false;
    for (var wKey in batchWorks){
    	if (batchWorks[wKey] instanceof Function) continue;
        if (wKey == pKey){
            wFound = true;
            break;
        }
    }
    var batchWork = null;
    
    if (wFound){
        batchWork = batchWorks[pKey];
    } else {
    	batchWork = batchWorks[pKey] = new BatchWork(pKey);
    }
    batchWork.batchId = batchId;
    
    return batchWork;
};

/**
 * @description	미결
 * @param		{String}	id
 * @param		{String}	batchId
 * @return  	{String}
 * @example		미결
 */
function BatchWork(id, batchId){
    this.id = id;
    this.batchId = id;
    this.parameters = [];
    this.results = [];
    this.report = null;
    this.nextBatchId = "";
    this.skip = false;
    
    this.message = "";
    
	batchWorks[batchId] = this;  
	this.busy = false;
    return this;
};

/**
 * @description	미결
 * @param	{string}	fieldName
 * @param	{string}	dataValue
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.setParameter = function(fieldName, dataValue){
    // functionname : [BatchWork.setParameter]

	this.parameters[fieldName] = new Parameter(fieldName, dataValue);
    return;
};

/**
 * @description	미결
 * @param	{string}	resultName
 * @param	{string}	dataValue
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.setResult = function(resultName, dataValue){
    // functionname : [BatchWork.setResult]

    this.results[resultName] = dataValue;
    return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.execute = function(){
    // functionname : [BatchWork.execute]

    if (this.skip){
    	if (this.nextBatchId.length != 0){
    		setTimeout("getBatchWorkByKey('" + this.nextBatchId + "').execute();", 1);
    	}
		return;
     }
                       
    // 데이터를 리턴받는 경우 레코드셋을 미리 만들어 두고 이 루틴을 호출할 것 
    var wParamInfo = ""; var seq = 1;
    for (var wKey in this.parameters){
    	if (this.parameters[wKey] instanceof Function) continue;
    	
        wParamInfo  += "&parameter" + (seq++) + "=" 
                    + encodeURIComponent(this.parameters[wKey].value());
    }

    var wQueryString = "lang=" + USER_LANGUAGE
                    + "&cogu=" + USER_COGU
                    + "&userId=" + USER_USERID
                    + "&personalId=" + USER_PERSONALID
			        + "&batchId=" + this.batchId
			        + wParamInfo
			        + "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);

    this.busy = true;
	// showAjaxBox("작업중입니다. 잠시만기다려 주십시요", 0);
	   
	var batchWork = this;
    if (TEST_MODE == undefined || !TEST_MODE){
    	ajaxCall("POST", getContextPath()+"/run" + this.batchId + ".do", wQueryString, this, "execute");
    } else {
    	ajaxCall("POST", getContextPath()+"/test/run" + this.batchId + ".do", wQueryString, this, "execute");
    }
	
	return;
	
};

/**
 * @description	미결
 * @param	{object}	jsonActionObject
 * @param	{string}	message
 * @param	{object}	pFlag
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.parseData = function(jsonActionObject, message, pFlag){
    // functionname : [BatchWork.parseData]
    this.busy = false;
                       
	// 오류 메시지 먼저 파악 
	if (jsonActionObject == null){
		callEvent("batch" + this.id + "_OnFailure", message);
		return;
	}

	// 오류정보 분석 
	if (jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0){
		this.errInfo = jsonActionObject.errorMsg;
		callEvent("batch" + this.id + "_OnFailure", jsonActionObject.errorMsg);
		return;
	}
	
	// 구버전 메시지
	if (jsonActionObject.message != undefined && jsonActionObject.message != null && jsonActionObject.message.length > 0){
		this.errInfo = jsonActionObject.message;
		callEvent("batch" + this.id + "_OnFailure", jsonActionObject.message);
		return;
	}
	
	// 데이터분석
	for (var key in jsonActionObject.mapResult){
		if (typeof(jsonActionObject.mapResult[key])=="function") continue;
        this.setResult(key, jsonActionObject.mapResult[key]);
    }
	
	// 배치 스텝내 레포트 호출
	for (var key in this.results){
		if (!key.startsWith("executeOfBatch_")) continue;
		executeOfBatch(this.results[key]);
    }
    
   	// message 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
	var message = this.message;
	if (message.length == 0){
        callEvent("batch" + this.id + "_OnSuccess");
        
        // 연결리포트 수행
        if (this.report != null) this.report.execute();

	} else {
        callEvent("batch" + this.id + "_OnFailure", message);
	}
	
	return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.inintialize = function(){
    // functionname : [BatchWork.inintialize]

    for (var i = this.parameters.length - 1; i >= 0; i--) {
        this.parameters.pop();
     }
    this.parameters= null;
    this.parameters= [];
    
    for (var i = this.results.length - 1; i >= 0; i--) {
        this.results.pop();
     }
    this.results= null;
    this.results= [];
    this.nextBatchId = "";
    this.needSkip = false;
	return;	
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.close = function(){
    // functionname : [BatchWork.close]

	// hideAjaxBox();
    this.inintialize();
	return;
};

// 채번 정보 처리 객체
var isInNumberingProcess = false;
function NumberingSVC(){
	this.controlName = ""; // TextBox
	this.controlId = "";
	this.commandName = "";
	
	this.cogu=0;
	this.dbId="";
	this.objectId="";
	this.maxGu="";
	this.propertyId="";
	this.propertyType="";
	this.param = "";
	this.encoding = "";
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
NumberingSVC.prototype.callService = function(){
    // functionname : [NumberingSVC.callService]
    var wQueryString = "lang=" + USER_LANGUAGE
                     + "&cogu=" + USER_COGU
                     + "&maxGu=" + this.maxGu
                     + "&dbId=" + this.dbId
			         + "&objectId=" + this.objectId
			         + "&propertyId=" + this.propertyId
			         + "&propertyType=" +this.propertyType
			         + "&encoding=" +this.encoding
			         + "&param=" + encodeURIComponent(this.param)
			         + "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);

	//showAjaxBox("번호 채번 작업 중입니다. 잠시만 기다려 주십시요.", 0);
    ajaxCall("POST", getContextPath()+"/numbering.do", wQueryString, this, "numbering");
    
    return;
};

/**
 * @description	미결
 * @param	{object}	jsonActionObject
 * @param	{string}	message
 * @param	{object}	pFlag
 * @return  {void}
 * @example	미결
 */
NumberingSVC.prototype.parseData = function(jsonActionObject, message, pFlag){
    // functionname : [NumberingSVC.parseData]
	//hideAjaxBox();

	// 오류 메시지 먼저 파악 
	if (jsonActionObject == null){
        callEvent("numbering_" + this.controlId + "_failed", message);
		return;
	}

	// 오류정보 분석 
	if (jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0){
		this.errInfo = jsonActionObject.errorMsg;
        callEvent("numbering_" + this.controlId + "_failed", jsonActionObject.errorMsg);
		return;
	}
	
	// 데이터분석 
   	// message 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
	var message = jsonActionObject.errorMsg;
	if (message.length == 0){
		isInNumberingProcess = true; // 채번중에는 가저오기, 객체로드 채우기능 동작이 일어나면 데이터가 손상될 수 있다
		controls[this.controlName].setValue(jsonActionObject.newNumber);
		isInNumberingProcess = false;
		
        callEvent("numbering_" + this.controlId + "_Completed", parseInt(1 * jsonActionObject.newNumber), this.commandName);
	} else {
        callEvent("numbering_" + this.controlId + "_failed", message);
	}
	
	return;
};

/**
 * @description	미결
 * @param		{Object}	recordset
 * @return  	{Undefined}
 * @example		미결
 */
//케시에 사용되는 목록
function DataCashe(recordset){
    this.sqlnum = recordset.sqlnum;
	this.key = recordset.key;
    this.rowCount= recordset.rowCount;
    this.totalRowCount = recordset.totalRowCount;

	this.recordNums = recordset.recordNums.slice(0);
	
	var wFields = recordset.fields;
    this.fields = [];
    for (var wFieldNum = 0; wFieldNum < wFields.length; wFieldNum++){
        this.fields[wFieldNum] = new Field(null, wFields[wFieldNum].fieldName, wFields[wFieldNum].datatype);
	    this.fields[wFieldNum].datas = wFields[wFieldNum].datas.slice(0);
    }
};

function executeOfBatch(info){
	try {
		if (BrowserDetect.browser == "Explorer") {
			var win = window.open("ViewReportLoad.do?fileName="+encodeURI(encodeURIComponent(info)), "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
		} else {
			var win = window.open("about:blank", "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
			if (!win) throw getText("message_report_001", "팝업이 차단 되었습니다. 레포트를 실행하시려면 팝업을 허용해 주세요. \n ※팝업차단허용방법: 브라우저 상단 메뉴바에서 [도구]-[팝업차단]-[팝업차단설정] 에서 허용할 웹사이트 주소란에 주소를 추가해 주시고 레포트를 실행해 주세요.");
			setTimeout(function (){
			win.document.write('<html><head><title>'+info.split("|")[2]+'</title><meta http-equiv="X-UA-Compatible" content="IE=Edge"/><style type="text/css">body{margin:0;padding:0;height:100%;}</style></head>');
			win.document.write('<body><iframe src="ViewReportLoad.do?fileName='+encodeURI(encodeURIComponent(info))+'" width="100%" height="100%" marginheight="0" marginwidth="0" border="0" frameborder="0" scrolling="no"></iframe></body></html>');
			}, 100);
		}
	} catch(e){
	    alert(e);
	}
	
	return;
};

/**
 * @class Flexformscripthead
 * @constructor Flexformscripthead
 * @description	미결
 */


/*******************************************************************************
    폼에대한 기초보안 조치 
*******************************************************************************/

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event
 * @returns		{Boolean}
 */
// 포커스 이벤트 
    document.onselectstart = function(e) {
    	// functionname : [document.onselectstart]
    	                   
        e = window.event || e;
    	var em =  (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
        if (em.tagName !="INPUT" && em.tagName !="TEXTAREA") return false; 
        return true;
    };
    
    /**
     * @description	미결
     * @returns		{Boolean}
     * @example		미결
     */
    // prevent user's right click();
    document.oncontextmenu = function(){ 
    	// functionname : [document.oncontextmenu]

    	//return true;
    	return false;
    };
    
    /**
     * @description	미결
     * @name		Flexformscripthead#
     * @event
     * @returns		{Boolean}
     */
    //글로벌 키다운
	document.onkeydown= function(e) {
		if(e.keyCode == 116) {
			if(typeof e.preventDefault == "function") {
				e.preventDefault();
			} else {
				e.returnValue = false; // for IE
			}
			return false;
		}
	};
	
	//Document Unload Event 추가
	if (window.attachEvent){
	    /*IE and Opera*/
	    window.attachEvent("onunload", unloadForm);
	}
	else if (document.addEventListener){
	    /*Chrome, FireFox*/
	    window.onbeforeunload = unloadForm;
	    /*IE 6, Mobile Safari, Chrome Mobile*/
	    window.addEventListener("unload", unloadForm, false);
	}
	else{
	    /*etc*/
	    document.addEventListener("unload", unloadForm, false);
	}

/*******************************************************************************
    폼 동작에 필요한 변수들 
*******************************************************************************/
    var jFormid = "";
    var jLinkid = "";
    var jMenuID = "";
    var jParams = "";
    var jGlobal = "";
    var jLoaded = false;
    var jCharInfo = "";
    var jTreeSQL = "";
    var FTPString = "";
    var wControl = null;
    var jUploadPrefix = "";
    var keyInfoStr = "";
    
    // IFRAME 기능으로 호출되었는지 여부
    var thisIsIframe = (self.parent && 
    		            self.parent.document.getElementsByName(self.name).length > 0 && 
    		            self.parent.document.getElementsByName(self.name)[0].tagName.toUpperCase() == "IFRAME");
    
/*******************************************************************************
    전역상수 
*******************************************************************************/
    
    var USER_BROWSER_NAME = navigator.appName.toLowerCase();  // ex:"microsoft internet explorer", "Netscape"
    var USER_BROWSER_VER  = parseFloat(navigator.appVersion);
//    var IS_IE9_OR_LOWER_VERSION = ( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && 
//                                    (navigator.appVersion.indexOf("MSIE 7") > 0 || 
//                                     navigator.appVersion.indexOf("MSIE 8") > 0 ||
//                                     navigator.appVersion.indexOf("MSIE 9") > 0));
    var IS_IE9_OR_LOWER_VERSION = (navigator.appVersion.indexOf("MSIE 7") >= 0
    								|| navigator.appVersion.indexOf("MSIE 8") >= 0
    								|| navigator.appVersion.indexOf("MSIE 9") >= 0);
    		
/*
 * Tree 동작에 필요한 상수
 */
    var tvwTreeLines = 0;
    var tvwRootLines = 1;
    
    var tvwFirst = 0;
    var tvwLast = 1;
    var tvwNext = 2;
    var tvwPrevious = 3;
    var tvwChild = 4;
    
    // 트리에 필요한 그림상수 변수
    var PLUS_NORMAL   = 0;
    var PLUS_BOTTOM   = 1;
    var MINUS_NORMAL  = 2;
    var MINUS_BOTTOM  = 3;
    var FOLDER_NORMAL = 4;
    var FOLDER_OPEN   = 5;
    var JOIN_NORMAL   = 6;
    var JOIN_BOTTOM   = 7;
    var LINE_BLANK    = 8;
    var EMPTY_ICON    = 9;
    var PAGE_ICON     = 10;

    // CROSS SHEET에 필요한 상수    
    // 선긋기에 필요한 상수 
    var RCTYPE_ISCOL = 1;
    var RCTYPE_ISROW = 1;
    var FONT_WIDTH   = 7; // 폰트 한바이트당 크기
    
    // 보이기 숨기기 구분
    var ACTION_SHOW = 1;
    var ACTION_HIDE = 2;
    
    // 트리에 필요한 상수
    var icons = new Array(6);
    icons[PLUS_NORMAL]       = new Image();
    icons[PLUS_NORMAL].src   = CONTEXT_ROOT + "/winnersoft/images/tree/plus.gif";
    icons[PLUS_BOTTOM]       = new Image();
    icons[PLUS_BOTTOM].src   = CONTEXT_ROOT + "/winnersoft/images/tree/plusbottom.gif";
    icons[MINUS_NORMAL]      = new Image();
    icons[MINUS_NORMAL].src  = CONTEXT_ROOT + "/winnersoft/images/tree/minus.gif";
    icons[MINUS_BOTTOM]      = new Image();
    icons[MINUS_BOTTOM].src  = CONTEXT_ROOT + "/winnersoft/images/tree/minusbottom.gif";
    icons[FOLDER_NORMAL]     = new Image();
    icons[FOLDER_NORMAL].src = CONTEXT_ROOT + "/winnersoft/images/tree/folder.gif";
    icons[FOLDER_OPEN]       = new Image();
    icons[FOLDER_OPEN].src   = CONTEXT_ROOT + "/winnersoft/images/tree/folderopen.gif";
    icons[JOIN_NORMAL]       = new Image();
    icons[JOIN_NORMAL].src   = CONTEXT_ROOT + "/winnersoft/images/tree/join.gif";
    icons[JOIN_BOTTOM]       = new Image();
    icons[JOIN_BOTTOM].src   = CONTEXT_ROOT + "/winnersoft/images/tree/joinbottom.gif";
    icons[LINE_BLANK]        = new Image();
    icons[LINE_BLANK].src    = CONTEXT_ROOT + "/winnersoft/images/tree/line.gif";
    icons[EMPTY_ICON]        = new Image();
    icons[EMPTY_ICON].src    = CONTEXT_ROOT + "/winnersoft/images/tree/empty.gif";
    icons[PAGE_ICON]         = new Image();
    icons[PAGE_ICON].src     = CONTEXT_ROOT + "/winnersoft/images/tree/page.gif";
    
    // 쿼리 데이터 타입
    var SQL_TYPE_NULL          = 0   ;
    var SQL_TYPE_CHAR          = 1   ;
    var SQL_TYPE_NUMERIC       = 2   ;
    var SQL_TYPE_DECIMAL       = 3   ;
    var SQL_TYPE_INTEGER       = 4   ;
    var SQL_TYPE_SMALLINT      = 5   ;
    var SQL_TYPE_FLOAT         = 6   ;
    var SQL_TYPE_REAL          = 7   ;
    var SQL_TYPE_DOUBLE        = 8   ;
    var SQL_TYPE_LONGVARCHAR   = -1  ;
    var SQL_TYPE_BINARY        = -2  ;
    var SQL_TYPE_VARBINARY     = -3  ;
    var SQL_TYPE_LONGVARBINARY = -4  ;
    var SQL_TYPE_BIGINT        = -5  ;
    var SQL_TYPE_TINYINT       = -6  ;
    var SQL_TYPE_BIT           = -7  ;
    var SQL_TYPE_VARCHAR       = 12  ;
    var SQL_TYPE_BOOLEAN       = 16  ;
    var SQL_TYPE_DATALINK      = 70  ;
    var SQL_TYPE_DATE          = 91  ;
    var SQL_TYPE_TIME          = 92  ;
    var SQL_TYPE_TIMESTAMP     = 93  ;
    var SQL_TYPE_OTHER         = 1111;
    var SQL_TYPE_JAVA_OBJECT   = 2000;
    var SQL_TYPE_DISTINCT      = 2001;
    var SQL_TYPE_STRUCT        = 2002;
    var SQL_TYPE_ARRAY         = 2003;
    var SQL_TYPE_BLOB          = 2004;
    var SQL_TYPE_CLOB          = 2005;
    var SQL_TYPE_REF           = 2006;

    // 가저오기중 시트채우기 실행중구분 : 시트갱신시 콘트롤 매번 시퀀스 바꿔가며 갱신 방지
    var FILLSTATE_NONE = 0;
	var FILLSTATE_SHEET = 1;
	var fillState = FILLSTATE_NONE;

	
    // 리스트박스 상수 선언부
    var LISTBOX_TYPE_OLDSINGSELECT = 0;
    var LISTBOX_TYPE_SINGSELECT    = 1;
    var LISTBOX_TYPE_MULTISELECT   = 2;
    var LISTBOX_TYPE_CHECKSELECT   = 3;
    var LISTBOX_TYPE_DATASELECT    = 4;
    
    // 시트채우기 모드
    var DATALISTBOX_SETITEM = 1;
    var DATALISTBOX_SETDATA = 2;
    
    // 데이터 저장 구분
    var LISTBOX_SAVE_SINGLE = 0;
    var LISTBOX_SAVE_MULTI  = 1;
    
    // ===== Timer Start  ====
	var TIMER_DISPLAY_NONE = 0;			// 표시 없음
	var TIMER_DISPLAY_USERTEXT = 1;		// 산식결과
	var TIMER_DISPLAY_IMAGEURL = 2;		// 이미지
	var TIMER_DISPLAY_TIMELEFT = 3;		// 남은시간 표시
	var TIMER_DISPLAY_CURRTIME = 4;		// 현재시간 표시
    // =====  Timer End   ====

/*******************************************************************************
    전역객체 
 *******************************************************************************/
    var wCalculator = new EXOCalculator();
    var wLogic      = new EXOLogic("");
    var objectManager = new ObjectManager();
/*******************************************************************************
    전역변수 
 *******************************************************************************/
    var arrKeyCodes=[8, 9, 16,17,18,19,20,27,33,34,35,36,37,38,39,40,91,92];
    // 8:백스페이스 9:Tab 
    // 16:shift 17 :ctl 18:alt 19:break 20 :caps 
    // 27 :esc 33:pageup 34:page down 35:End 36:Home 37:좌로 38:up 39:우로 40 : down 
    // 91:윈도우92:윈도우
    var objects     = []; //associative array
    var controls    = []; //associative array
    var parameters  = []; //associative array
    var dataCashes  = []; //associative array * 키는 sql번호:파라메터1:파라메터2:....:파라메터n
    var cachedimages= []; //associative array
    var charts		= [];
    var crosssheets = [];
    var pictures	= [];
    var reports  	= [];
    var DocDateControlName = ""; 
    var DocNumControlName = "";
    var DocTitleControlName = "";
    var uploadControls = []; // 파일업로드 정보가 들어 있는 곳
    
    // 마우스 이동에 관한 변수 
    var jClassName = "";
    var jObject = null;
    
    // 시트크기조절에 관한 변수
    var ResizeObject = null; 
    var wIsResizing = false;
    var mustFillScreenAfterLoad = false;
    
    // 시트 컬럼 이동에 관한 변수
    var wIsColumnMove = false;
    var wIsColumnMoving = false;
    var MoveObject = null;
    var moveOldColumn = 0;
    var moveScrollLeft = 0;
    
/*******************************************************************************
    전역함수 
 *******************************************************************************/
    /**
     * @description	미결
     * @returns		{Void}
     * @example		미결
     */
    function unloadForm(){
    	if (typeof EventCache != "undefined") EventCache.flush();
    	for (var id in controls) {
    		if (typeof(controls[id])=="function") continue;
    		delete controls[id];
    	}
    	for (var id in parameters) {
    		if (typeof(parameters[id])=="function") continue;
    		delete parameters[id];
    	}
//    	for (var id in objects) {
//    		if (typeof(objects[id])=="function") continue;
//    		objects[id].clear();
//    		delete objects[id];
//    	}
    	
    	icons.clear();
    	arrKeyCodes.clear();
    	jObject = null;
        ResizeObject = null;
        MoveObject = null;
        wLogic = null;
        wCalculator = null;
    	
    	return;
    };
    
    /**
     * @description	미결
     * @param		{String}	id
     * @returns		{String}
     * @example		미결
     */
    function getControlById(id) 
    {
    	var wReturn = null;
    	for (var wKey in controls){
    	if (controls[wKey] instanceof Function) continue;
    		if (controls[wKey].id == id){
    			wReturn = controls[wKey];
    			break;
    		}
    	}
    	return wReturn;
    };
    
    function getControlByTag(tag) 
    {
    	var wReturn = null;
    	
    	var pEm = tag;
    	while (pEm.parentNode && !pEm.id) {
    		pEm = pEm.parentNode;
    	}
    	if (pEm == null) return undefined;
    	
    	return getControlById(pEm.id);
    };
    
    /**
     * @description	미결
     * @returns		{Undefined}
     * @example		미결
     */
    function clearControls(){
    	for (var id in controls) {
    		if (typeof(controls[id])=="function") continue;
    		delete controls[id];
    	}
    };


    /**
     * @description	미결
     * @param		{Object}	em
     * @returns		{String}
     * @example		미결
     */
    function searchSheet(em){
    	var pEm = em;
    	var wReturn = null;
    	while (pEm.parentNode && !pEm.className.startsWith("DataSheet") && !pEm.className.startsWith("AUIDataSheet") && !pEm.className.startsWith("ListSheet") && !pEm.className.startsWith("CrossSheet")) {
    		pEm = pEm.parentNode;
    		if (pEm == null) return null;
    	}
    	if (pEm.className.startsWith("DataSheet") || pEm.className.startsWith("AUIDataSheet") || pEm.className.startsWith("ListSheet") || pEm.className.startsWith("CrossSheet")){ 
    	       wReturn = getControlById(pEm.id);
    	}
    	return wReturn;
    };
    	
    /**
     * @description	미결
     * @param		{Object}	em
     * @returns		{String}
     * @example		미결
     */
    function searchRow(em){
    	var wReturn = null;
    	
    	var parentEm = em;
    	while (parentEm.tagName != "TR") {  // TR테그가 없는 경우 document객체까지 서슬러 올라가게 된다
    		parentEm = parentEm.parentNode;
		    if (parentEm == null) return null;
    	}
    	if (parentEm.tagName == "TR" && parentEm.getAttribute("haveData") == "1") {
    		wReturn = searchSheet(em).dataTable.tBodies[0].rows[parentEm.rowIndex];
    	}
    	
    	return wReturn;
    };

    /**
     * @description	미결
     * @param		{Object}	em
     * @returns		{Object}
     * @example		미결
     */
    function searchCell(em){
//    	var wReturn = null;
    	
    	var parentEm = em;
    	
    	while (parentEm.parentNode.tagName != "TR") {  // TR테그가 없는 경우 document객체까지 서슬러 올라가게 된다
    		parentEm = parentEm.parentNode;
		    if (parentEm.parentNode == null) return null;
    	}
//    	if (parentEm.parentNode.tagName == "TR" && parentEm.parentNode.getAttribute("haveData") == "1") {
//    		wReturn = parentEm.parentNode;
//    	}
    	
    	return parentEm;
    };
    
    /**
     * @description	미결
     * @returns		{Void}
     * @example		미결
     */
    function loadParamFromQuery(){
    	if (this.location.href.split("?").length <= 1) return;
    	
    	var qryStr = this.location.href.split("?")[1];
    	arr = qryStr.split("&");
    	for (var i=0; i < arr.length;i++){
    		var arr1 = arr[i].split("=");
    		parameters[arr1[0]] = arr1[1];
    	}
    	return;
    };

/*******************************************************************************
    전역 이벤트 처리 
 *******************************************************************************/
    /**
     * @description	미결
     * @name		Flexformscripthead#
     * @event		
     * @returns		{Boolean}
     */
    // 시트에 공통되는 이벤트  : 마우스이벤트의 케치 
document.onmousedown = function(e) {
     e = window.event || e;
     
     //공통 이벤트 처리
     var em = e.toElement;
     if(em != undefined && em != null){
         var Sheets = document.getElementsByClassName("DataSheet");
         var sheetLen = Sheets.length;
         for(var i=0; i<sheetLen; i++){
        	 var sheetControl = searchSheet(Sheets[i]);
        	 if(sheetControl != null){
        		 sheetControl.setPickHeaderClass(-1, -1, "");
        	 }
         }
         
		 // 달력 div에서 일어난 이벤트인지 판단.
		 while(em != null && em.localName != null && em.localName != "html"){
			 if(em.getAttribute("ID") == "calendarDiv") return true;
			 em = em.parentNode;
		 }
		 // 펼쳐진 달력이 있다면 닫는다.
		 var calendarDiv = document.getElementById("calendarDiv");
		 if(calendarDiv != null && calendarDiv != undefined) {
			 if(calendarDiv.style.display != "none") closeNotActionCalendar();
		 }
     }

		
     if (e.button == 2) return false;
     var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     if (BrowserDetect.browser == "Chrome" && em.tagName == "HTML") return true; // 크롬에서 HTML Scroll 이 안먹는문제
     
     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmousedown(em);
//             stopPropagation(e);
//     }
     return wReturn;
};

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event		
 * @returns		{Boolean}
 */
document.onmousemove = function(e) {
	// functionname : [document.onmousemove]
	if (wIsResizing) {
		resizeCell(window.event.clientX, window.event.clientY);
		return true;
	}
	
	if (wIsColumnMove) {
		movingOfSheetColumn(window.event.clientX);
		return true;
	}
	
     e = window.event || e;
     var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     if(BrowserDetect.browser == "Firefox" && (em.className == "TabSel" || em.className == "TabGen")) return true; // 파이어폭스에서 탭 풍선도움말 문제

     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmousemove(em);
//             stopPropagation(e);
//     }

     return wReturn;
};

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event		
 * @returns		{Boolean}
 */
document.onmouseout=function(e) {
	// functionname : [document.onmouseout]
     e = window.event || e;
     em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     if(BrowserDetect.browser == "Firefox" && (em.className == "TabSel" || em.className == "TabGen")) return true; // 파이어폭스에서 탭 풍선도움말 문제
     
     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmouseout(em);
//             stopPropagation(e);
//     }

     return wReturn;
};

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event		
 * @returns		{Boolean}
 */
document.onmouseup = function(e) {
	// functionname : [document.onmouseup]
     e = window.event || e;
     
     // 셀 크기 조정 정보 초기화
     if(wIsResizing) {
			ResizeObject.table.parentNode.parentNode.setAttribute("cellsize", ResizeObject.cellSizes.join(";"));
			
			for(var i = ResizeObject.cellSizes.length - 1; i >= 0; i--) {
				ResizeObject.cellSizes.pop();
			}
			ResizeObject.cellSizes = null;
			ResizeObject.table = null;
			ResizeObject.tableRow = null;
			ResizeObject = null;
			
			wIsResizing = false;
			
			return false;
     }
     
     // 컬럼 이동 정보 초기화a
     if(wIsColumnMove) {
    	 movingOfSheetColumnSuccess();
    	 return false;
     }
	 
     if (e.button==2) return false;
     var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     
     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmouseup(em);
//             stopPropagation(e);
//     }

     return wReturn;
};

/**
 * @description	미결
 * @param		{Object}
 * @returns		{Boolean}
 * @example		미결
 */
function preventbubble(evt){
	evt = evt || window.event;
	if (evt.stopPropagation){
		evt.stopPropagation();
		evt.preventDefault();
	}else if(typeof evt.cancelBubble != "undefined"){
		evt.cancelBubble = true;
		evt.returnValue = false;
	}
	return false;
};

///***************************************************************************
//     데이터시트 콘트롤의 이벤트 처리함수 부분이다
// ***************************************************************************/
//function Sheet_onmousedown(em) {
//
//	if (em.tagName != "TD" || 
//	    (em.className != "ColHead" && em.className != "lColHead" && em.className != "RowHead")) return false;
//	
//	var wTable = em.parentNode;
//	while(wTable.tagName != "TABLE") wTable = wTable.parentNode;
//	
//	var dir = getDirection(em);
//	if (dir == "") {
//		return;
//	}
//	wIsResizing = true;
//	
//	ResizeObject = new resizeObject();
//	
//	ResizeObject.em = em;
//	ResizeObject.dir = dir;
//	
//	ResizeObject.grabx = window.event.clientX;
//	ResizeObject.graby = window.event.clientY;
//	
//	ResizeObject.width = em.offsetWidth;
//	ResizeObject.height = em.offsetHeight;
//	ResizeObject.left = em.offsetLeft;
//	ResizeObject.top = em.offsetTop;
//	
//	ResizeObject.table = wTable;
//	ResizeObject.tableWidth = wTable.style.pixelWidth;
//	
//	var wArr = wTable.parentNode.parentNode.getAttribute("cellsize").split(";");  ///
//	
//	ResizeObject.cellSizes = new Array(wArr.length);
//	for (var i = 0; i < wArr.length; i++) ResizeObject.cellSizes[i] = parseInt(wArr[i]);
//	
//	ResizeObject.colCount = ResizeObject.cellSizes.length;
//	ResizeObject.headerRows = parseInt(wTable.parentNode.parentNode.getAttribute("headerrows"));
//	
//	var wRowIndex = em.parentNode.rowIndex + em.rowSpan - 1; 
//	
//	ResizeObject.tableRow = wTable.rows[wRowIndex];
//	ResizeObject.rowHeight = wTable.rows[wRowIndex].offsetHeight;
//	
//	return;
//};

//function Sheet_onmouseup(em) {
//	if (ResizeObject != null){
//		ResizeObject.table.parentNode.parentNode.setAttribute("cellsize", ResizeObject.cellSizes.join(";"));
//		
//		for(var i = ResizeObject.cellSizes.length - 1; i >= 0; i--) ResizeObject.cellSizes.pop();
//		ResizeObject.cellSizes = null;
//		ResizeObject.table = null;
//		ResizeObject.tableRow = null;
//		ResizeObject = null;
//		
//		wIsResizing = false;
//		
//		return false;
//	} 
//	
//	if(em == null) {
//		em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
//	}
//	
//	if (em.tagName=="TD" && (em.className == "ColHead" || em.className == "lColHead")){
//		    var wSheet = searchSheet(em);
//		    var wResult = wSheet.sortTable(em);
//		    wSheet.setResultOfSort(wResult); 
//		    return false;
//	    
//	} else if (em.tagName=="TD" && em.className == "RowHead"){
//	    var wSheet = searchSheet(em);
//	    var wMoveOverTR = searchRow(em);
//	    
//	    if (wMoveOverTR != null) {
//	        
//	       //클릭한 줄이 삭제된 경우
//	        if (wSheet.clickedTR && wSheet.clickedTR.rowIndex == -1){
//	            wSheet.clickedTR = null;
//	        }
//	
//	        if (wSheet.clickedTR ) 
//	            wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//	        wSheet.setRowClass(wMoveOverTR.rowIndex, "SelectedStyle");
//	        
//	        wSheet.clickedTR = wMoveOverTR;
//	        wSheet.lastTRClass="SelectedStyle";
//	        
//	        if (wSheet instanceof ListSheet){
//	        	wSheet.selectRow(em);
//	        } else if (wSheet.controlId.toLowerCase().indexOf("sheet_") >= 0 && wSheet.controlId.toLowerCase().indexOf("listsheet_") < 0){
//	            wSheet.click(em);
//	        }           
//		}
//		
//	    return false;
//	    
//	} else  if(em.tagName == "TD"){
//	
//	    var wSheet = searchSheet(em);
//	    if (wSheet instanceof ListSheet){
//	        var wMoveOverTR = searchRow(em);
//	        if (wMoveOverTR != null) {
//	            if (wSheet.clickedTR) 
//	                wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//	            wSheet.setRowClass(wMoveOverTR.rowIndex, "SelectedStyle");
//	            
//	            wSheet.clickedTR = wMoveOverTR;
//	            wSheet.lastTRClass="SelectedStyle";
//	            
//	            wSheet.selectRow(em);
//	    	}
//	    } else if (wSheet instanceof DataSheet){
//	        var wMoveOverTR = searchRow(em);
//	        if (wSheet.clickedTR && wSheet.clickedTR.rowIndex >= 0) 
//	            wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//	        
//            wSheet.clickedTR = wMoveOverTR;
//            wSheet.lastTRClass=wSheet.getOddEvenStyle(wMoveOverTR.rowIndex);
//	        wSheet.click(em);
//	
//	    }
//	}
//	
//	return true;
//};

//function Sheet_onmousemove(em) {
//
//	if (em.className == "ColHead" || em.className == "lColHead" || em.className == "RowHead"){
//		
//		if (wIsResizing){
//		    resizeCell(window.event.clientX, window.event.clientY);
//		    return true;
//	    } else {
//		    str = getDirection(em);
//		    if (str == "") {
//		    	em.style.cursor = "";
//		    } else {
//		    	str += "-resize";
//		    	em.style.cursor = str;
//		    }
//		}
//		
//	} 
//	var wMoveOverTR = searchRow(em);
//	
//	if (wMoveOverTR != null) {
//	    var sheetObject = searchSheet(em);
//	    wMoveOverTR = sheetObject.dataTable.tBodies[0].rows[wMoveOverTR.rowIndex];
//	    
//	    if (sheetObject.moveOverTR != wMoveOverTR){
//	        sheetObject.moveOverTR = wMoveOverTR;
//	        sheetObject.lastTRClass = sheetObject.moveOverTR.className;
//	        
//	        sheetObject.setRowClass(wMoveOverTR.rowIndex, "MoveStyle");
//	    }
//	}
//	
//	return true;       
//};
//
//function Sheet_onmouseout(em) {
//
//	var wMoveOverTR = searchRow(em);
//	if (wMoveOverTR != null) {
//	    var wSheet = searchSheet(em);
//	    wSheet.setRowClass(wMoveOverTR.rowIndex, wSheet.lastTRClass);
//	}
//	
//	em.style.cursor = "";
//	
//	return true;
//};

/***************************************************************************
  데이터시트 콘트롤의 공통함수 부분이다
***************************************************************************/
var oldscrollTop = 0;
var oldscrollLeft = 0;
var scrollmode = 0;

/**
 * @description	미결
 * @param		{Object}	em
 * @returns		{Void}
 * @example		미결
 */
function scrollAction(em){
	var wTables = em.parentNode.getElementsByTagName("table");
	
	for(var i=0; i<wTables.length; i++){
		var wTable = wTables[i];
		var wTableName = wTables[i].getAttribute("name");
		
		 if(wTableName == "dataTable") {
			 wTable.style.top = (-1) * em.scrollTop + 'px';
			 wTable.style.left = (-1) * em.scrollLeft + 'px';
		 }
		 else if(wTableName == "colHeadTable") wTable.style.left = (-1) * em.scrollLeft + 'px';
		 else if(wTableName == "leftRowTable") wTable.style.top = (-1) * em.scrollTop + 'px';
		 else if(wTableName == "rightRowTable") wTable.style.top = (-1) * em.scrollTop + 'px';
		 else if(wTableName == "bottomCenterTable") wTable.style.left = (-1) * em.scrollLeft + 'px';
	}
	
	var wSheet = searchSheet(em);
    wSheet._setEditControlPosition();
    wSheet.scrollAction(em.scrollTop, em.scrollLeft);

    return;

};

/**
 * @description	미결
 * @param		{Object}	em
 * @returns		{Void}
 * @example		미결
 */
function crossSheetscrollAction(em){
	var wTables = em.parentNode.getElementsByTagName("table");
	wTables[DATA_TABLE].style.top = (-1) * em.scrollTop + 'px';
	wTables[DATA_TABLE].style.left = (-1) * em.scrollLeft + 'px';
	wTables[COL_TABLE].style.left = (-1) * em.scrollLeft + 'px';
	wTables[ROW_TABLE].style.top = (-1) * em.scrollTop + 'px';
	
    return;

};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function resizeObject() {
	this.dir = ""; 
	this.grabx = null; 
	this.graby = null;
	this.width = null;
	this.height = null;
	this.left = null;
	this.top = null;
	
	this.table = null;
	this.tableWidth = null;
	this.cellSizes = null;
	this.ColCount = 0;
	
	this.tableRow = null;
	this.rowHeight = null;
	
	this.cellIndex = 0;
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function moveObject() {
	this.grabx = null; 
	this.pickColumn = 0;
	this.pickCell = null;
	this.pickTableName = "";
	this.changeColumn = 0;
	this.sheet = null;
	this.emTr = null;
	this.cellSizes = [];
	this.mergeRow = 0;
	this.emTrIndex = 0;
	this.div = null;
	this.browserX = 0;
};

/**
 * @description	미결
 * @param		{Object}	em
 * @returns		{String}
 * @example		미결
 */
function getDirection(em) {
	var xPos, yPos, offset, dir;
	dir = "";
	
	if(navigator.userAgent.indexOf('Firefox') >= 0){
		offset = em.offsetParent;
		var offsetHeight = 0;
		var offsetWidth = 0;

		while (offset) {
			offsetHeight += offset.offsetTop;
			offsetWidth += offset.offsetLeft;
			offset = offset.offsetParent;
		}

		xPos = event.pageX - em.offsetLeft - offsetWidth;
		yPos = event.pageY - em.offsetTop - offsetHeight;		
		
	}else{
		xPos = window.event.offsetX;
		yPos = window.event.offsetY;
		offset = 8;		
	}
	
	if (yPos > em.offsetHeight-offset) dir = "s";
	if (xPos > em.offsetWidth-offset) dir += "e";	
	
	return dir;
};

/**
 * @description	미결
 * @param		{Number}	pClientX
 * @param		{Number}	pClientY
 * @returns		{Undefined}
 * @example		미결
 */
function resizeCell(pClientX, pClientY){
//	var xPos, yPos, str;
//	var xMin = 2; var yMin = 19; 
//	var wWidth = 0;
	var isRight = false;
	wIsResizing = true;
	
	var wTable = ResizeObject.em.parentNode;
	while(wTable.tagName != "TABLE") wTable = wTable.parentNode;
	
	if(wTable.getAttribute("name").match(/right/) != null) isRight = true;
	
	var wControl = controls[wTable.parentNode.parentNode.getAttribute("ctlname")];
	var wHeadSpanInfo = wControl.headSpanInfo;
	
	if (ResizeObject.dir.indexOf("e") != -1) {
		// 위치이동량을 계산한다
	    var wIncrementX = pClientX - ResizeObject.grabx;
		
		// 바뀐 셀번호를 구한다
		var wRow = ResizeObject.em.parentNode;
		var wCellIndex = ResizeObject.em.cellIndex;
		var wChangedColNum = getColNum(wHeadSpanInfo, wRow.rowIndex>1&&wCellIndex==0?0:wRow.rowIndex, wCellIndex);
		if (ResizeObject.cellSizes[wChangedColNum] + wIncrementX < 1) return;

		ResizeTableWidth(wControl, wChangedColNum, wIncrementX, isRight);
	    
		ResizeObject.grabx = pClientX;
		ResizeObject.tableWidth += wIncrementX;
	}
	if (ResizeObject.dir.indexOf("s") != -1){
	    var wIncrementY = pClientY - ResizeObject.graby;
	    wIncrementY = wIncrementY / searchSheet(wTable).rowsPerDataRow;
	    
//		if (ResizeObject.rowHeight + wIncrementY < 19) return;
//		var scrollHeight = wControl.tagObject.getElementsByTagName("DIV")[0].style.height.match(/\d+/)[0] - 19;
		// ResizeObject.tableRow.height = (ResizeObject.rowHeight + wIncrementY)+'px'
		//20110415 변겸함 chrome 적용
	  	ResizeObject.tableRow.setAttribute("height",ResizeObject.rowHeight + wIncrementY); 
		ResizeTableHeight(ResizeObject.table, ResizeObject.tableRow.rowIndex, ResizeObject.rowHeight + wIncrementY);
		
		ResizeObject.graby = pClientY;
		ResizeObject.rowHeight += wIncrementY;
	}
};

/**
 * @description	미결
 * @param		{Object}	control
 * @param		{Number}	colNum
 * @param		{Number}	changeSize
 * @param		{Boolean}	isRight
 * @returns		{Undefined}
 * @example		미결
 */
function ResizeTableWidth(control, colNum, changeSize, isRight) {
	var wHeaderRows = ResizeObject.headerRows;
	var wTables = control.tagObject.getElementsByTagName("table");
	var frozenRight = searchSheet(wTables[0]).frozenColsRight;
	
//	colNum +=  ResizeObject.cellIndex;
	// 표의 사이즈 정보를 바꾸어 준다
    ResizeObject.cellSizes[colNum] += changeSize;
    var repeat = false;
    var repeatWidth = "";

    for (var i = 0; i < wTables.length; i++){
		var wTable = wTables[i];
		var notRight = wTable.getAttribute("name").match(/right/i) == null;
		
		if(!notRight && !isRight) continue;
		if(notRight && isRight) {
			repeat = true;
			continue;
		}
		
		var wTableSizeChanged = false;
		var wWidth = 0;
		for (var wRowNum=0; wRowNum < wHeaderRows; wRowNum++){
		    var wRow = wTable.tBodies[0].rows[wRowNum];
			var wCellIndex = getcellIndex(control.headSpanInfo, wRowNum, colNum);
			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다 
			if (wCellIndex >= wTable.rows[wRowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
			
		    // Span을 감안하여 셀사이즈를 부여한다.
			var wCell = wRow.cells[wCellIndex];
		    var wColSpan = wCell.colSpan;
		    wWidth = 0;
		    for (var j = 0 ; j < wColSpan; j++) {
		    	var wColNum = colNum + j;
		    	wWidth += ResizeObject.cellSizes[wColNum];
		    	if (j > 0) wWidth++;
		    }
		    wWidth = wWidth + "px";
	
		    wRow.cells[wCellIndex].style.width = wWidth;
		    repeatWidth = wWidth;
		    wTableSizeChanged = true;
		}
		if (wTableSizeChanged){
			wTable.style.width = (wWidth.match(/\d+/)[0]*1) + "px";
		}
	}
    // 우고정이 있을 경우 데이터 테이블 셀 크기를 다시 조정해준다.
    if(repeat){
    	colNum = colNum+frozenRight;
    	for (var i = 0; i < wTables.length; i++){
    		var wTable = wTables[i];
    		var notRight = wTable.getAttribute("name").match(/right/i) == null;
    		
    		if(!notRight) continue;
    		
    		var wTableSizeChanged = false;
    		for (var wRowNum=0; wRowNum < wHeaderRows; wRowNum++){
    			var wRow = wTable.tBodies[0].rows[wRowNum];
    			var wCellIndex = getcellIndex(control.headSpanInfo, wRowNum, colNum);
    			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다 
    			if (wCellIndex >= wTable.rows[wRowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
    			
    			// Span을 감안하여 셀사이즈를 부여한다.
    			
    			wRow.cells[wCellIndex].style.width = repeatWidth;
    			wTableSizeChanged = true;
    		}
    		if (wTableSizeChanged){
    			wTable.style.width = (repeatWidth.match(/\d+/)[0]*1) + "px";
    		}
    	}
    }
    
    // 스크롤을 위한 사이즈 조정
	control.resetScroll();
};

/**
 * @description	미결
 * @param		{Object}	pTable
 * @param		{Number}	pRowNum
 * @param		{Number}	pSize
 * @returns		{Undefined}
 * @example		미결
 */
function ResizeTableHeight(pTable, pRowNum, pSize) {
	var wTables = pTable.parentNode.getElementsByTagName("table");
	var control = controls[wTables[0].parentNode.parentNode.getAttribute("ctlname")];
	
	var perDataRows = searchSheet(wTables[0]).rowsPerDataRow;
	
	for (var i = 0; i < wTables.length; i++){
		var wTable = wTables[i];
		
		if(/bottom/.test(wTable.getAttribute("name"))) {
			wTable.style.top = control.dataTable.scrollHeight + 1 + "px";
			continue;
		}
//		if (wTable == pTable) continue;
		if (wTable.tBodies[0].rows.length - 1 < pRowNum) continue;
		
		//wTable.tBodies[0].rows[pRowNum].height = pSize;
		for(var j=0; j<perDataRows; j++){
			wTable.tBodies[0].rows[pRowNum - j].setAttribute("height",pSize);
		}
	} 
    
    // 스크롤을 위한 사이즈 조정
	control.resetScroll();
};

/**
 * @description	미결
 * @param		{Number}	pClientX
 * @returns		{Void}
 * @example		미결
 */
// 컬럼 이동 함수
function movingOfSheetColumn(pClientX){
	// 현재 마우스의 가로 위치에 시트의 left 값을 빼서 계산
	MoveObject.div.style.left = (pClientX + MoveObject.grabx) + "px";
	MoveObject.pickCell.className = "MovePickCell";
	
	var wSheet = MoveObject.sheet; // 시트객체
	var scrollPanel = MoveObject.sheet.scrollPanel; // 스크롤 div
	var sheetSize = MoveObject.browserX * (-1); // 바꿔야 할 td태그의 위치 계산용
	var pickTableName = MoveObject.pickTableName; // 현재 td태그의 테이블 Name 값
	
	// 좌측 또는 우측 고정열이 아닐 경우에만 현재 시트의 스크롤 위치를 계산한다.
	if(pickTableName == "colHeadTable"){
		sheetSize += scrollPanel.scrollLeft * (-1);
	}
	// 우측 고정 테이블 일때 스크롤 최대 값을 항상 준다.
	else if(pickTableName == "rightColHeadTable"){
		sheetSize += MoveObject.sheet.scrollPanel.clientWidth - MoveObject.sheet.scrollPanel.scrollWidth;
	}
	
	// 마우스의 이동값과 셀 사이즈로 바뀔 td태그의 index를 찾아낸다.
	var columnLength = MoveObject.cellSizes.length;
	for(var i=0; i<columnLength; i++){
		sheetSize += (MoveObject.cellSizes[i]*1) + 1;
		if(sheetSize >= pClientX){
			MoveObject.changeColumn = i - MoveObject.mergeRow;
			break;
		}
	}
	
	// 0. 이동에 필요한 변수
	var rightColNum = 0; // 우고정열은 논리적인 셀번호와 물리적인 셀번호가 달라 우측고정번호를 계산해 줘야한다.
	var moveTdLeft = pClientX + MoveObject.grabx; // 마우스로 이동하는셀의 left 값
	
	// 우고정열 이동시 rightColNum 을 넣어준다.
	if(pickTableName == "rightColHeadTable"){
		rightColNum = wSheet.frozenColsRight;
		moveTdLeft -= MoveObject.sheet.scrollPanel.getElementsByTagName("div")[0].clientWidth - MoveObject.emTr.clientWidth+14; // 743
	}
	
	var changeColNum = MoveObject.changeColumn - rightColNum; // 셀이동으로 인해 위치가 변경되는 셀의 colNum
	
	// 2. 논리에 맞지않는 상황일때 리턴
	if(moveOldColumn == MoveObject.changeColumn || MoveObject.changeColumn<1 ||
	   pickTableName != "leftColHeadTable" && MoveObject.changeColumn <= wSheet.frozenCols && wSheet.leftRowTable != null ||
	   pickTableName != "rightColHeadTable" && MoveObject.changeColumn >= wSheet.frozenColsRight && wSheet.rightRowTable != null ||
	   pickTableName == "leftColHeadTable" && MoveObject.changeColumn > wSheet.frozenCols ||
	   pickTableName == "rightColHeadTable" && MoveObject.changeColumn < wSheet.frozenColsRight){
		   // 리턴 하기 전에 changeColumn 을 유효한 colNum 으로 바꿔준다.
		   MoveObject.changeColumn = moveOldColumn;
		   return;
	}
	
	// 3. scrollTo 함수 호출 (열단위 만 동작한다.)
	if(pickTableName == "colHeadTable") wSheet.scrollTo(0, changeColNum);
	
	// 5. 마우스가 컬럼 경계선을 이동했는지 판단하기 위한 변수에 새로 이동된 컬럼을 대입
	moveOldColumn = changeColNum;
	
	return;
}

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
// 컬럼 이동 완료
function movingOfSheetColumnSuccess(){
	var wSheet = MoveObject.sheet;
	var perDataRow = wSheet.rowsPerDataRow;
	var headRow = wSheet.headRows;
	var pickColNum = MoveObject.pickColumn; // 이동시킨 셀의 최초 Physical ColNum
	var changeColNum = MoveObject.changeColumn + MoveObject.mergeRow; // 이동시킨 셀의 바뀐 Physical ColNum
	var wTables = wSheet.tagObject.getElementsByTagName("table");
	var rightColNum = 0;
	var wTr = null;
	var wTableName = "";
	var realRowMerge = 1;
	
	MoveObject.pickCell.className = "ColHead";
	MoveObject.div.parentNode.removeChild(MoveObject.div);
	
	// 1. 셀 사이즈 재조정 및 sheetCol 값 변경
	if(pickColNum != changeColNum && changeColNum>0){
		// 셀 사이즈 재조정
		var headCells =wSheet.colHeadTable.rows[0].cells;
		var headCellLength = headCells.length;
		var cellSize = ""; 
		
		for (var i=0; i<headCellLength; i++){
			cellSize += headCells[i].clientWidth + ";";
		}
		
		wSheet.tagObject.setAttribute("cellsize", cellSize);
	
		// sheetCol 값 변경
		var sheetColumns = wSheet.columns;
		var logical = null;
		var logicalNum = []; 
		var Num=0;
		
		// 변경된 셀들의 LogicalNum을 배열에 저장 후 해당 LogicalNum의 sheetCol을 바꿔준다.
		if(/right/i.test(MoveObject.pickTableName)) realRowMerge = 0;
		for(var j=1; j<=perDataRow; j++){
			var wRow = j+headRow-1;
			// 오른쪽 이동시 LogicalNum 저장 
			for(var i=pickColNum+1; i<=changeColNum; i++){
				logical = wSheet.colNumOf(wRow, (j>1? i-realRowMerge: i), CONV_HARD_LOGICAL);
				logicalNum.push(logical);
				if(i == changeColNum){
					logical = wSheet.colNumOf(wRow, (j>1? pickColNum-realRowMerge: pickColNum), CONV_HARD_LOGICAL);
					logicalNum.push(logical);
				}
			}
			// 왼쪽 이동시 LogicalNum 저장 
			for(var i=changeColNum; i<pickColNum; i++){
				if(i == changeColNum){
					logical = wSheet.colNumOf(wRow, (j>1? pickColNum-realRowMerge: pickColNum), CONV_HARD_LOGICAL);
					logicalNum.push(logical);
				}
				logical = wSheet.colNumOf(wRow, (j>1? i-realRowMerge: i), CONV_HARD_LOGICAL);
				logicalNum.push(logical);
			}
			// 배열에 저장한 LogicalNum 으로 시트컬럼 변경
			for(var sColNum=pickColNum; sColNum<=changeColNum; sColNum++,Num++){
				sheetColumns[logicalNum[Num]].sheetCol = sColNum;
			}
			for(var sColNum=changeColNum; sColNum<=pickColNum; sColNum++,Num++){
				sheetColumns[logicalNum[Num]].sheetCol = sColNum;
			}
		}
		
		logicalNum = null;
	}
	
	// 2. 루핑을 돌며 모든 테이블의 td태그 이동
	for(var i=0; i<wTables.length; i++){
		if(pickColNum == changeColNum || changeColNum<=0) break;
		rightColNum = 0;
		wTableName = wTables[i].getAttribute("name");
		
		if(/right/i.test(wTableName)) rightColNum = wSheet.frozenColsRight;
		
		wTr = wTables[i].getElementsByTagName("tr");
		
		if(wTr[0].cells[pickColNum - rightColNum] == undefined || wTr[0].cells[changeColNum - rightColNum] == undefined) continue;
		
		for(var j=0; j<wTr.length; j++){
			realRowMerge = 0;
			// 두번째 줄부터는 줄번호가 RowSpan된상태이므로 한줄이 없다.
			var wRowNum = (j ) % perDataRow + 1;
			if (wRowNum > 1 && rightColNum < 1) --realRowMerge;
			
			var picIndex = pickColNum - rightColNum + realRowMerge;
			var changeIndex = changeColNum - rightColNum + realRowMerge;
			
			if(changeColNum + realRowMerge > pickColNum + realRowMerge){
				wTr[j].insertBefore(wTr[j].cells[picIndex], wTr[j].cells[changeIndex + 1]);
			}else if(changeColNum + realRowMerge - rightColNum - 1 >= 0){
				wTr[j].insertBefore(wTr[j].cells[picIndex], wTr[j].cells[changeIndex - 1].nextSibling);
			}else{
				wTr[j].insertBefore(wTr[j].cells[picIndex], wTr[j].cells[changeIndex]);
			}
		}
	}
	
	// 4. MoveObject 초기화
	MoveObject = null; 
	
	// 5. 전역 변수 초기화
	wIsColumnMove = false;
	wIsColumnMoving = false;
	moveOldColumn = 0;
	moveScrollLeft = 0;
	
	return;
}

/*********************************************************************
 *   셀틀의 스펜상태를 분해하기위한 객체및 함수   
     <<< 사용방법 >>>
     var wTable = document.getElementsByName("sampleTable")[0];
     var wHeadSpanInfos = getHeadSpanInfo(wTable);

     alert(getColNum(wHeadSpanInfos,4,2));
     alert(getcellIndex(wRows,4,getColNum(wHeadSpanInfos,4,2)));
* ********************************************************************/

/**
 * @description	미결
 * @param		{Number}	rowSpan
 * @param		{Number}	colSpan
 * @param		{Number}	colNum
 * @param		{String}	cellIndex
 * @returns		{Undefined}
 * @example		미결
 */
function cellSpanInfo(rowSpan, colSpan, colNum, cellIndex){
    this.rowSpan = rowSpan;
    this.colSpan = colSpan;
    this.colNum  = colNum;
    this.cellIndex = cellIndex;
};

/**
 * @description	미결
 * @param		{String}	wRows
 * @returns		{Undefined}
 * @example		미결
 */
function fillBlankCell(wRows){
    for (var rowNum=0; rowNum < wRows.length; rowNum++){
        var wCells = wRows[rowNum];
        for (var colNum=0;colNum < wCells.length;colNum++){
            var wCellSpanInfo = wCells[colNum];
            
            if (wCellSpanInfo.colSpan > 1){
                // 같은 줄 뒷셀들의 셀번호를 늘려 끼어들 수 있도록 한다. 
                for(var i = wCellSpanInfo.colNum + 1; i < wCells.length;i++){
                    wCells[i].colNum += (wCellSpanInfo.colSpan - 1);
                }
                // 빈칼럼들을 추가한다 
                for(var i = 1; i < wCellSpanInfo.colSpan;i++){
                   var indertPos = wCellSpanInfo.colNum + i;
                   wCells.splice(indertPos, 0, new cellSpanInfo(wCellSpanInfo.rowSpan, 1, indertPos, wCellSpanInfo.colNum));
                }
            }
            
            if (wCellSpanInfo.rowSpan > 1){
               // 아래줄에 rowSpan-1만큼의 줄에 빈셀을 삽입한다.
               for (var i=1;i < wCellSpanInfo.rowSpan;i++){
                    var belowRowNum = rowNum + i;
                    var belowRowCells = wRows[belowRowNum];
                    
                    if (colNum < belowRowCells.length){
                        // 같은 줄 뒷셀들의 셀번호를 늘려 끼어들 수 있도록 한다. 
                        for(var j = colNum; j < belowRowCells.length;j++){
                            belowRowCells[j].colNum++;
                        }
                        // 한칸을 삽입한다
                        belowRowCells.splice(colNum, 0, new cellSpanInfo(1, 1, colNum, -1, false));
                    
                    } else {
                        belowRowCells[belowRowCells.length] = new cellSpanInfo(1, 1, belowRowCells.length, -1);
                    }
                    
               }
            }
        }
    }

};

/**
 * @description	미결
 * @param		{Object}	table
 * @returns		{String}
 * @example		미결
 */
function getHeadSpanInfo(table) {
    var wRows = [];
    var tableLen = table.rows.length;
    
    // rowspan 정보를 담기위한 배열 default값(0) 을 미리 생성한다.
    var rowSpanArr = []; 
    for(var rnum=0; rnum<tableLen; rnum++){
        var colLength = table.rows[rnum].cells.length;
        rowSpanArr[rnum] = [];
        for(var cnum=0; cnum<colLength; cnum++){
        	rowSpanArr[rnum][cnum] = 0;
        }
    }

    for (var wRowNum=0; wRowNum < tableLen; wRowNum++){
        var wRow = [];
        wRows[wRowNum] = wRow;
        
        var cells = table.rows[wRowNum].cells;
        var cellsLen = cells.length;
        var rowSpan = 0; // rowSpan 값
        var colSpan = 0; // colSpan 값
        var rowSpanCnt = 0; // 누적된 rolSpan
        var colSpanCnt = 0; // 누적된 colSpan
        for (var wColNum=0; wColNum <  cellsLen; wColNum++){
            var wCell =  cells[wColNum];
            colSpan = wCell.colSpan;
            rowSpan = wCell.rowSpan;
            
            for(var i=0; i<colSpan; i++){
            	// 컬럼 번호 생성
            	// colSpan 된만큼 같은 cellIndex 값의 colNum을 넣어주기 위해 누적된 span값과 현재 span값을 더해준다.
            	var colNum = wColNum + i + colSpanCnt;
            	
            	// rowSpan이 되어 있다면 해당 rowSpan이 적용되는 줄에서 사용할수 있게 span 된만큼의 줄에 값1 을 넣어준다.
        		for(var j=1; j<rowSpan; j++){
        			rowSpanArr[wRowNum + j][colNum] = 1;
        		};
        		
        		// 현재줄에 rowSpan 되어 있는 셀이 있는지 체크 후 있다면 rowSpanCnt에 span값 1을 누적
        		rowSpanCnt += rowSpanArr[wRowNum][colNum];
        		
        		// 배열에 정보를 넣어준다.
            	wRow[colNum] = new cellSpanInfo(rowSpan, colSpan, colNum, wColNum - rowSpanCnt);
            }
            
            // colSpan값 누적
            colSpanCnt += (colSpan - 1);
        };
    }
    //fillBlankCell(wRows);
    
    return wRows;
};

/**
 * @description	미결
 * @param		{Number}	wRows
 * @param		{String}	rowIndex
 * @param		{String}	cellIndex
 * @returns		{Number}
 * @example		미결
 */
function getColNum(wRows, rowIndex, cellIndex){
    var wReturn = -1;
    
    for (var i = wRows[rowIndex].length - 1; i >= 0;i--){
        if (wRows[rowIndex][i].cellIndex == cellIndex){
            wReturn = wRows[rowIndex][i].colNum;
            break;
        }
    }
    return wReturn;
};

/**
 * @description	미결
 * @param		{Number}	wRows
 * @param		{String}	rowIndex
 * @param		{Number}	colNum
 * @returns		{String}
 * @example		미결
 */
// 시트콜트롤의 getCellIndex(em) 과는 대소문자 차이 
function getcellIndex(wRows, rowIndex, colNum){
    var wReturn = -1;
    
    for (var i = 0; i < wRows[rowIndex].length;i++){
        if (wRows[rowIndex][i].colNum == colNum){
            wReturn = wRows[rowIndex][i].cellIndex;
            break;
        }
    }
    return wReturn;

};

/**
 * @description	미결
 * @param		{Object}	statement
 * @returns		{Object}
 * @example		미결
 */
function RepalceVariable(statement){
	var wStatement = statement.replace(/\r/g," ").replace(/\n/g," ");
    if (wStatement.indexOf("[" + STRING_PARAM)){
    	for (var key in parameters){ 
			if (typeof(parameters[key])=="function") continue;
    		wStatement = wStatement.replaceWord("[" + STRING_PARAM + key + "]", parameters[key]);
    	}
    }
	
	if (wStatement.indexOf("&crlf;") >= 0) 
		wStatement = wStatement.replaceWord("&crlf;", mCoGu);

	if (wStatement.indexOf("[" + STRING_CONTROL)){
    	for (var key in controls){
			if (typeof(controls[key])=="function") continue;
    		wStatement = wStatement.replaceWord("[" + STRING_CONTROL + key + "]", controls[key]);
    	} 
    }

    if (wStatement.indexOf("[" + STRING_USER)){
    	if (wStatement.indexOf(STRING_USER_COGU) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_COGU, mCoGu);
    	if (wStatement.indexOf(STRING_USER_BON) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_BON, mBon);
    	if (wStatement.indexOf(STRING_USER_DATE) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_DATE, mdate);
    	if (wStatement.indexOf(STRING_USER_PARTCODE) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PARTCODE, mPartCode);
    	if (wStatement.indexOf(STRING_USER_PARTNAME) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PARTNAME, mPartName);
    	if (wStatement.indexOf(STRING_USER_ORGACODE) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_ORGACODE, mOrgaCode);
    	if (wStatement.indexOf(STRING_USER_ORGANAME) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_ORGANAME, mOrgaName);
    	if (wStatement.indexOf(STRING_USER_SEQ) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_SEQ, mSeq);
    	if (wStatement.indexOf(STRING_USER_PERSONALID) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PERSONALID, mPersonalId);
    	if (wStatement.indexOf(STRING_USER_PERSONALNAME) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PERSONALNAME, mPeraonalName);
    }
    
    return wStatement;
};

/**
 * @description	미결
 * @param		{Object}	formula
 * @returns		{Undefined}
 * @example		미결
 */
// 다른 프레임으로 분산된 산식기 호출
function calc(formula){
	var frame = document.getElementsByName("calcPage")[0];
	if (frame != undefined && frame.contentWindow.calc){
	    return frame.contentWindow.calc(formula);
	} else {
		return wLogic.ExecuteLogic(formula);
	}
};

/**
 * @description	미결
 * @param		{Object}	formula
 * @param		{Object}	format
 * @returns		{Undefined}
 * @example		미결
 */
function calcFormatByNum(formula, format){
	var frame = document.getElementsByName("calcPage")[0];
	
	if (frame != undefined && frame.contentWindow.calc){
	    return frame.contentWindow.numberFormat(formula, format);
	} else {
		return numberFormat(formula, format);
	}
};


/* **********************************************************************
 *   가저오기 작업 순차적인 수행을 위해 컨트롤러
 *   지정한 순서대로 가저온다  
 *   Setting 과정에서 발생한 가저오기는 연시 대기작업에 넣어 계속적으로 가저오도록 한다 
 *   Setting 과정에서 발생한 콘트롤 채우기 동작은 대기열에 넣었다가 "fillControl" 문자열을 만나면 일괄수행
 * **********************************************************************/

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function JobControler(){
	this.jobNameList = [];
	this.callerNameList = [];
	this.pageNumList = [];
	this.calledNameList = [];
	this.controlNameToFocus = "";
	this.isWaiting = false;
	this.loadType = 0;
	this.busy = false;
	this.loadType = 0;   // 1: 객체로드  2: 가저오기만으로 구성
};

var jobControler = new JobControler();

// 가저오기 작업목록을 추가한다.  (예:자가소비내역가져오기;소비내역합계가져오기;clear;)
/**
 * @description 미결
 * @param		{string}	jobListString
 * @param		{string}	callerControlName
 * @param		{number}	pageNum
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.reserveJobs = function(jobListString, callerControlName, pageNum){
    // functionname : [JobControler.reserveJobs]
	
	if (pageNum == undefined) pageNum = 0;
	
	var jobNameList = (jobListString || "").split(";");
	if (jobNameList[jobNameList.length-1].length == 0) {
		jobNameList.pop();
	}

	var controlName = callerControlName || "";
	var callerNameList = new Array(jobNameList.length);
	for (var i=0; i < callerNameList.length; i++) {
		callerNameList[i] = controlName;
	}
	
	var pageNumList = new Array(jobNameList.length);
	for (var i=0; i < pageNumList.length; i++) {
		pageNumList[i] = pageNum;
	}
	
	
	// 예약작업이 없을 경우 첫번데이터를 채워 삭제하고 진행할 수 있도록 한다.
	if (this.jobNameList.length == 0){
		this.jobNameList = [null];
		this.callerNameList = [null];
		this.pageNumList = [null];
	}
	

	this.jobNameList = this.jobNameList.concat(jobNameList);
	this.callerNameList = this.callerNameList.concat(callerNameList);
	this.pageNumList = this.pageNumList.concat(pageNumList);
	
	return;
};

/**
 * @description 미결
 * @return		{string}
 * @example		미결
 */
JobControler.prototype.hasJob = function(){
	// functionname : [JobControler.hasJob]

	// this.jobNameList.length는 기본적으로 1이다
	return this.jobNameList.length > 0;

};

//채우기 작업목록을 추가한다.  
/**
 * @description 미결
 * @param		{string}	controlId
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.reserveFiller = function(controlId){
	// functionname : [JobControler.reserveFiller]

	this.reserveJobs("fillControl:" + controlId, "");

return;
};

/**
 * @description 미결
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.notifyComplete = function(){
	// functionname : [JobControler.notifyComplete]
	                   
	this.jobNameList.splice(0, 1);
	this.callerNameList.splice(0, 1);
	this.pageNumList.splice(0, 1);
	this.calledNameList.splice(0, 1);
	
   	if (this.jobNameList.length == 0){
   		this.busy = false;

		// hideAjaxBox();
	} else {
		this.executeNext();
	}
	return;
};

/**
 * @description 미결
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.cancel = function(){
	// functionname : [JobControler.cancel]
  this.jobNameList.clear();
	this.callerNameList.clear();
	this.pageNumList.clear();
	this.calledNameList.clear();
	this.controlNameToFocus = "";
	
	this.busy = false;
	// hideAjaxBox();
	return;
};

/**
 * @description 미결
 * @param		{string}	jobListString
 * @param		{string}	callerControlName
 * @param		{number}	pageNum
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.open = function(jobListString, callerControlName, pageNum){
    // functionname : [JobControler.open]
	
	this.busy = true;
    
    // 화면의 데이터 로드타입 파악
    this.checkLoadType();
    // 진행중 메시지를 보여준다
    //showAjaxBox(jobListString + " 조회 중입니다.", 0);

    
	if (pageNum == undefined) pageNum = 0;
	var canExecute = (this.jobNameList.length == 0);
	
	var controlName = callerControlName || "";
	var jobNameList = (jobListString || "").split(";");
	

	if (jobNameList[jobNameList.length-1].length == 0) {
		jobNameList.pop();

	}
	
	var callerNameList = new Array(jobNameList.length);
	var pageNumList = new Array(jobNameList.length);

	for (var i=0; i < jobNameList.length; i++) {
		callerNameList[i] = controlName;
		pageNumList[i] = pageNum;
	}
	

	this.jobNameList = this.jobNameList.concat(jobNameList);
	this.callerNameList = this.callerNameList.concat(callerNameList);
	this.pageNumList = this.pageNumList.concat(pageNumList);
	
	if (!this.isWaiting && canExecute)	{
		this.execute();
	}
	return;
};

/**
 * @description 미결
 * @param		{string}	jobListString
 * @param		{string}	callerControlName
 * @param		{number}	pageNum
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.isCurrentJob = function(jobListString, callerControlName, pageNum){
	if (this.jobNameList.length == 0) return false;
	return (this.jobNameList[0] == jobListString && this.callerNameList[0] == callerControlName && this.pageNumList[0] == pageNum);
};

/**
 * @description 미결
 * @param		{string}	controlId
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.fillControl = function(controlId){
	// functionname : [JobControler.fillControl]
	                   
	this.open("fillControl:" + controlId, "");

return;
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.execute = function(){
    // functionname : [JobControler.execute]

	this.executeNext();
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.executeNext = function(){
    // functionname : [JobControler.executeNext]

    // 객체채우기 중이면 대기
    if (this.isWaiting) return;

    if (this.jobNameList.length == 0) return;
    
    // calledNameList를 둔 이유는 release시 재 호출을 막기위해
    var index = 0;
    if (this.calledNameList.length > 0){
    	var nextJobFound = false;
    	for (var i = 0; i < this.jobNameList.length;i++){
    		index = i;
    		if (this.calledNameList.indexOf(this.jobNameList[i]) < 0){
    			nextJobFound = true;
    			break;
    		}
    	}
    	if (!nextJobFound) return;
    }
	
	var jobName = this.jobNameList[index];
	var callerName = this.callerNameList[index];
	var pageNum = this.pageNumList[index];
	
	this.calledNameList[this.calledNameList.length] = jobName;
	
	if (jobName.startsWith("fillControl:")){
		var controlName = jobName.substring(12);
		//eval("fillList_" + controlName + "()");
		if (typeof self["fillList_" + controlName] != "undefined"){
			self["fillList_" + controlName]();
		}
	} else if (pageNum != 0) {
		//eval("fillJob_" + jobName + "(\"" + callerName + "\"," + pageNum + ")");
		if (typeof self["fillJob_" + jobName] != "undefined"){
			self["fillJob_" + jobName](callerName, pageNum);
		}
	} else {
		//eval("fillJob_" + jobName + "(\"" + callerName + "\")");
		if (typeof self["fillJob_" + jobName] != "undefined"){
			self["fillJob_" + jobName](callerName);
		}
	}

};

// 객체 로드 작업중 가저오기 방지용
/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.wait = function(){
    // functionname : [JobControler.wait]
	
	this.isWaiting = true;	
};

//객체 로드 작업중 가저오기 재개용
JobControler.prototype.release = function(){
    // functionname : [JobControler.release]

	this.isWaiting = false;	
	if (this.jobNameList.length == 0){
		this.busy = false;
		//hideAjaxBox();
	} else {
		this.executeNext();
	}
};

/**
 * @description 미결
 * @param		{string}	jobListString
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.close = function(jobListString){
    // functionname : [JobControler.close]

    var index = this.jobNameList.indexOf(jobListString);

	this.jobNameList.splice(index, 1);
	this.callerNameList.splice(index, 1);
	this.pageNumList.splice(index, 1);
	
    index = this.calledNameList.indexOf(jobListString);
	this.calledNameList.splice(index, 1);
	
	// 모든작업이 끝난 것이 확인되면 포커스를 주고 빠진다
	if (this.jobNameList.length == 0){
		if (this.controlNameToFocus.length > 0 && controls[this.controlNameToFocus].focus) controls[this.controlNameToFocus].focus();
		this.controlNameToFocus = "";
		this.busy = false;

		//hideAjaxBox();
	} else {
		this.executeNext();
	}
	return;
};

/**
 * @description 미결
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.checkLoadType = function(){
    // functionname : [JobControler.close]
    if (this.loadType != 0) return;
	for (var id in controls) {
		var control = controls[id];
		if (typeof(control)=="function") continue;
		if (control.isKeyControl){
			this.loadType = 1;
			return;
		}
	}
    
	this.loadType = 2;
	return;
};
/* **********************************************************************
*   확인 단추등에 따른 화면 클리어 
* **********************************************************************/
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function clearScreen(){
	location.reload(true);
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function clearSeqScreen(){
    // 콘트롤 값들을 지운다 
	for (var id in controls) {
		if (typeof(controls[id])=="function") continue;
		var wControl = controls[id];
		if (wControl.isSeqClearControl){
			if (wControl instanceof TextBox) wControl.setValue("");
			if (wControl instanceof ComboBox || wControl instanceof ListBox) wControl.setValueToDefault();
			if (wControl instanceof CheckBox) wControl.setValue(0);
			if (wControl instanceof OptionButton) wControl.setValue(0);
			if (wControl.controlId.toLowerCase().indexOf("sheet_") >= 0) {
				wControl.clear();
				wControl.setMaxRows(1);
				wControl.moveTo(1,1);
			}
		}
		if ((wControl instanceof ComboBox || wControl instanceof ListBox) && wControl.callerControlName != "form"){
			wControl.clear();
		}
	}
	
	// 디폴트값 처리
	for (var id in controls) {
		if (typeof(controls[id])=="function") continue;
		var wControl = controls[id];
		if (wControl.isSeqClearControl && wControl.defaultValue.length == 0){
			var value = eval(wControl.defaultValue);
			if (wControl instanceof TextBox) wControl.setValue(value);
			if (wControl instanceof ComboBox || wControl instanceof ListBox) wControl.setValue(value);
			if (wControl instanceof CheckBox)  wControl.setValue(value);
			if (wControl instanceof OptionButton) wControl.setValue(value);
		}
	}
	// 객체 디폴트값처리
	var properties = null;
	for (var id in objects) {
		if (typeof(objects[id])=="function") continue;
		properties = objects[id].recordset[wObject.seq].properties;
		var propertyInfos = objects[id].propertyInfos;
		for (var i=1; i < propertyInfos.length; i++){
			var value = eval(propertyInfos[i].defaultValue);
			var id = propertyInfos[i].id;
			properties[id].value = value;
		}
	}
	
	// Seq추가시 지우지 않는 기존 콘트롤값 승계
	for (var id in objects) {
		if (typeof(objects[id])=="function") continue;
		var propertyInfos = objects[id].propertyInfos;
		for (var i=1; i < propertyInfos.length; i++){
			var propertyInfo = propertyInfos[i];
			for (var j=0; j < propertyInfo.linkControlNames.length; j++){
				var control = controls[propertyInfo.linkControlNames[j]];
				if (!control.isSeqClearControl && (wControl.controlId.toLowerCase().indexOf("sheet_") >= 0)){
					properties[id].value = control.value;
				}
			}
		}
	}
};


/* *****************************************************************************
 *     DEBUG SECTION
 * *****************************************************************************/
    var debugTime = null;
    /**
     * @description	미결
     * @param		{String}	msg
     * @returns		{Undefined}
     * @example		미결
     */
    function checkTime(msg){
    	
    	var checkTime = new Date().getTime();      //시작시간 체크(단위 ms)
    	if (debugTime != null){
        	var nDiff = checkTime - debugTime;      //두 시간차 계산(단위 ms)
    		console.log(getText("message_flexformscripthead_001", "{0}\n execution time: {1}ms", [msg, nDiff]));
    	}
    	debugTime = checkTime;
    }

    /**
     * @description	미결
     * @returns		{Undefined}
     * @example		미결
     */
	function Debugger(){
		this.debugLayer = null;
		this.xPos = "800px";
		this.enable = false;

	} 
	
	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.setLayer = function() {
        // functionname : [Debugger.setLayer]

		if (!this.enable) return;
		if (this.debugLayer == null){
			if (document.getElementsByName("DebugLayer") && document.getElementsByName("DebugLayer").length > 0){
				this.debugLayer = document.getElementsByName("DebugLayer")[0];
				this.debugLayer.style.left = this.xPos;
			} else {
				return;
			}
		}
		if (this.debugLayer){
			this.debugLayer.style.display = "block";
		}
	};
	
	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.print = function() {
        // functionname : [Debugger.print]

		if (!this.enable) return;

		this.setLayer();
		
		if (this.debugLayer == null) return;
	    var msg = "";
	    for (var i = 0; i < arguments.length;i++) msg += arguments[i] + ",&nbsp;";
	    this.debugLayer.innerHTML = this.debugLayer.innerHTML + "<BR/>" + msg;
	};

	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.clear = function() {
        // functionname : [Debugger.clear]

		if (!this.enable) return;

		if (this.debugLayer == null) return;
		this.debugLayer.innerHTML = "";
    	this.hide();
	};

	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.hide = function() {
        // functionname : [Debugger.hide]

		if (!this.enable) return;

		if (this.debugLayer == null) return;
		this.debugLayer.style.left = "-10000px";
		this.debugLayer.style.display = "none";
	};

	/**
	 * @description 미결
	 * @return		{void}
	 * @example		미결
	 */
	Debugger.prototype.copy = function() {
        // functionname : [Debugger.copy]

		if (arguments.length == 0) return;
	    var wString = "" + arguments[0];
	    
	    if (window.clipboardData) // IE 
	    { 
	        // var txt = window.clipboardData.getData('Text');         
	        var result = window.clipboardData.setData('Text', wString); 
	    } 
	    return;
	};

	/**
	 * @description 미결
	 * @return		{String}
	 * @example		미결
	 */
	Debugger.prototype.getStackTrace = function() {
        // functionname : [Debugger.getStackTrace]

		var callstack = [];
		  var isCallstackPopulated = false;
		  try {
		    i.dont.exist+=0; //doesn't exist- that's the point
		  } catch(e) {
		    if (e.stack) { //Firefox, Chrome
		    	if (BrowserDetect.browser == "Chrome"){
		    	  var cutStart = 0;
		  	      var lines = e.stack.split('\n');
			      for (var i=0, len=lines.length; i<len; i++) {
			        if (lines[i].match(/^\s*[A-Za-z0-9\-._\s\$]+\(/)) {
			        	if (lines[i].indexOf("printStackTrace") > 0){
			        		cutStart = lines[i].indexOf("printStackTrace");
			        	}
			        	
			            callstack.push(lines[i].substring(cutStart, lines[i].indexOf("(")).trim());
			        }
			      }

			      //Remove call to printStackTrace()
			      callstack.shift();
			      isCallstackPopulated = true;
			      
		    	} else { //Firefox
		  	      var lines = e.stack.split('\n');
			      for (var i=0, len=lines.length; i<len; i++) {
			        if (lines[i].match(/^\s*[A-Za-z0-9\-_\$]+\(/)) {
			          callstack.push(lines[i]);
			        }
			      }
			      

			      //Remove call to printStackTrace()
			      callstack.shift();
			      isCallstackPopulated = true;
		    	}
		    }
		    else if (window.opera && e.message) { //Opera
		      var lines = e.message.split('\n');
		      for (var i=0, len=lines.length; i<len; i++) {
		        if (lines[i].match(/^\s*[A-Za-z0-9\-_\$]+\(/)) {
		          var entry = lines[i];
		          //Append next line also since it has the file info
		          if (lines[i+1]) {
		            entry += " at " + lines[i+1];
		            i++;
		          }
		          callstack.push(entry);
		        }
		      }
		      //Remove call to printStackTrace()
		      callstack.shift();
		      isCallstackPopulated = true;
		    }
		  }
		  if (!isCallstackPopulated) { //IE and Safari

		    var currentFunction = arguments.callee.caller;
		    while (currentFunction) {
		      var fn = currentFunction.toString();
		      var fname = fn.substring(fn.indexOf("function") + 8, fn.indexOf('(')).trim(); // || 'anonymous';
		      var index = fn.indexOf("functionname : [");
		      if (fname.length == 0 && index > 0){
		    	  fname = fn.substring(index + 16, fn.indexOf("]"));
		      }
		      
		      fname = fname || 'anonymous';
		      
		      if (callstack.indexOf(fname) >= 0) break;
		      
		      callstack.push(fname);
		      
		      currentFunction = currentFunction.caller;
		    }
		  }
		  
		  
		  for(var i = 0; i < callstack.length;i++){
			  if (callstack[i].startsWith("Debugger.")){
				  callstack.shift();
			  }
		  }
		  return callstack;
	};
	
	/**
	 * @description 미결
	 * @return		{void}
	 * @example		미결
	 */
	Debugger.prototype.printStackTrace = function() {
        // functionname : [Debugger.printStackTrace]

		if (!this.enable) return;
		
		var callstack = this.getStackTrace();
		if (callstack.length > 0){
		    this.print(callstack.reverse().join('<br/>'));
		}
		
		return;
	};

	/**
	 * @description 미결
	 * @param		{string}	functionName
	 * @return		{boolean}
	 * @example		미결
	 */
	Debugger.prototype.isCallerFunction = function(functionName) {
        // functionname : [Debugger.isCallerFunction]

		var wReturn = false;
		
		var callstack = this.getStackTrace();
		for (var i = 0; i < callstack.length; i++){
			if (callstack[i].trim() == functionName){
				wReturn = true; break;
			}
		}
		
		return wReturn;
	};

	var debug = new Debugger();


	/* *****************************************************************************
	*  MAKE FILE UPLOAD AGENT
	   arguments : parentNode: iframe's parentName name:iframe's name
	               linkname: textbox controlName for filename
	               picname : picture controls name for preeview
	               ftpDir  : ftp upload directory under gw root dir 
	* *****************************************************************************/
	/**
	 * @description	미결
	 * @param		{Object}	parentNode
	 * @param		{String}	name
	 * @param		{String}	linkname
	 * @param		{String}	picname
	 * @param		{Object}	ftpDir
	 * @param		{Boolean}	noftp
	 * @param		{Boolean}	nozip
	 * @param		{Object}	directUploadGu
	 * @returns		{Undefined}
	 * @example		미결
	 */
	function IFrame_Upload(parentNode, name, linkname, picname, ftpDir, noftp, nozip, directUploadGu) {
		this.noftp = (noftp == undefined ? false : noftp);
		this.nozip = (nozip == undefined ? false : nozip);
		
	    if(parentNode == null){
	        parentNode = document.body;  
	        try {
	    	    parentNode.removeChild(document.getElementsByName(name)[0]);
	        } catch (e){}
	    } else {
	        if (document.getElementsByName(name).length != 0){
	        	removeTag(document.getElementsByName(name)[0]);
	        }
	    }

//	    var iframe = document.createElement("iframe");  
//	    iframe.name = iframe.id   = name;
//	    iframe.linkname=linkname;
//	    iframe.picname=picname;
//	    iframe.directuploadgu = directUploadGu;
//	    parentNode.appendChild(iframe);  
	    parentNode.innerHTML = "<iframe name='" + name + "' id='" + name + "' src='about:blank'></iframe>";
	    var iframe = parentNode.childNodes[0];
	    iframe.setAttribute("linkname", linkname);
	    iframe.setAttribute("picname",  picname);
	    iframe.setAttribute("directUploadGu", directUploadGu); 

	    iframe.doc = null;  

	    if(iframe.contentDocument)                // Firefox, Opera  
	       iframe.doc = iframe.contentDocument;  

	    else if(iframe.contentWindow)             // Internet Explorer  
	       iframe.doc = iframe.contentWindow.document;  

	    else if(iframe.document)                  // Others?  
	       iframe.doc = iframe.document;  

	    if(iframe.doc == null)  
	       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

	    iframe.doc.open();  
	    iframe.doc.close();  
	    
//	    var frm = iframe.doc.createElement("<form method='post' name='frmupload"+name+"' action='fileUpload.do?id="+name+"' enctype='multipart/form-data'>");  
	    var frm = iframe.doc.createElement("form");
	    frm.method = "post";
	    frm.name = "frmupload"+name;
	    frm.action = "fileUpload.do?id="+name;
	    frm.enctype = "multipart/form-data";
//	    iframe.doc.body.appendChild(frm);  
	    parentNode.appendChild(frm);  
	    /*frm.method ="POST" ;
	     frm.enctype="multipart/form-data";
	   frm.name   = frm.id ="frmupload" ;
	    frm.action ="fileUpload2.action" ; */ // fileUpload2.action은 압축하지 않고 올리기 fileUpload2.action는 압축하여 올리기
	    this.frm = frm;
	     
	    var inputctltemp = iframe.doc.createElement("input");
	    inputctltemp.type = "file";  
	    inputctltemp.name = inputctltemp.id  ="upload" ;
	    
	    var inputctl = iframe.doc.createElement("input");
	    inputctl.type = "file";  
	    inputctl.name = inputctl.id  ="upload" ;
	    inputctl.linkname=linkname;
	    inputctl.picname=picname;	    
	    inputctl.directuploadgu = directUploadGu;
	    
	    frm.appendChild(inputctl);
	    this.inputctl = inputctl;

	    var dirctl = iframe.doc.createElement("input");
	    dirctl.type = "hidden";  
	    dirctl.name="uploadSubDir" ;
	    dirctl.id  ="uploadSubDir" ;
	    dirctl.value = ftpDir;
	     
	    frm.appendChild(dirctl);
	    
	    var filenamectl = iframe.doc.createElement("input");
	    filenamectl.type = "hidden";  
	    filenamectl.name="uploadFileName" ;
	    filenamectl.id  ="uploadFileName" ;
	    filenamectl.value = "";
	     
	    frm.appendChild(filenamectl);
	    
	    var uploadPrefixctl = iframe.doc.createElement("input");
	    uploadPrefixctl.type = "hidden";  
	    uploadPrefixctl.name="uploadPrefix" ;
	    uploadPrefixctl.id  ="uploadPrefix" ;
	    uploadPrefixctl.value = "";
	     
	    frm.appendChild(uploadPrefixctl);
	    
	    var noftpctl = iframe.doc.createElement("input");
	    noftpctl.type = "hidden";  
	    noftpctl.name="noftp" ;
	    noftpctl.id  ="noftp" ;
	    noftpctl.value = this.noftp;
	     
	    frm.appendChild(noftpctl);
	    
	    var nozipctl = iframe.doc.createElement("input");
	    nozipctl.type = "hidden";  
	    nozipctl.name="nozip" ;
	    nozipctl.id  ="nozip" ;
	    nozipctl.value = this.nozip;
	     
	    frm.appendChild(nozipctl);
	    
	    iframe.onload = function(){
	    	// functionname : [IFrame_Upload.onload]

	        if (this.picname.length != 0){
	        	var picDir = parent.getControlById(this.linkname).value;
		        //var picDir = parent.document.getElementById(this.linkname).value;
	            parent.controls[this.picname].setPicture("file:///" + picDir);
	        }
	        removeTag(document.getElementsByName(this.name)[0]);
	    };
	    iframe.onreadystatechange = function(){
	    	// functionname : [IFrame_Upload.onreadystatechange]

		    if (this.readyState == 'complete') {
		        if (this.picname.length != 0){
		        	var picDir = parent.getControlById(this.linkname).tag;
		            //var picDir = parent.document.getElementById(this.linkname).tag;
		            parent.controls[this.picname].setPicture("file:///" + picDir);
		        }
		        removeTag(document.getElementsByName(this.name)[0]);
		    }
		};
	    
	    inputctl.onchange = function(){
	    	// functionname : [IFrame_Upload.onchange]

	        var filePath = this.value;
			if (this.value.indexOf("\\fakepath\\") >= 0) {
				this.select();
				if (document.selection)
					filePath = document.selection.createRange().text.toString();
				else 
					filePath = this.files[0].name;
				this.blur();
		    }
	    
	        var fileName = "";
	        if (filePath.indexOf("\\") > 0) {
	            fileName = filePath.split("\\")[filePath.split("\\").length -1];
	        }
	        
//	        var fileTag = timeEncodeString();
//	        this.document.getElementsByName("uploadFileName")[0].value = fileName;
	        
	        //parent.getControlById(this.linkname).setValue(fileName);
	        //parent.getControlById(this.linkname).tag = filePath;
	        controls[this.linkname].setValue(filePath);
	        //parent.document.getElementById(this.linkname).tag = filePath;
	        
	        if (this.picname.length != 0){
	        	
	        	
	            parent.controls[this.picname].setPicture("file:///" + filePath);
	        }
	        
	        if (this.directuploadgu == true){
	        	if (jUploadPrefix.length == 0) {
	         		jUploadPrefix = timeEncodeString();
	        	}
	        	this.parentNode.uploadPrefix.value = jUploadPrefix;
		        this.parentNode.submit();
	        }
		};
	    
	    this.selectFile = function(){
	    	// functionname : [IFrame_Upload.selectFile]
	    	
	    	this.inputctl.click();
	    };
	    
	    this.uploadFile = function(){
	    	// functionname : [IFrame_Upload.uploadFile]
	        this.frm.uploadPrefix.value = jUploadPrefix;

	    	this.frm.submit();
	    };
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
/* *****************************************************************************
*  INFORMATION OBJECT FOR GENERATING EXCEL    
* *****************************************************************************/
function xlGenerationInfo(){
	this.colsNum = 0;
	this.rowsNum = 0;
	this.rowsColors = "";
	this.colsWidth = "";
	this.data = "";
	
	this.fixRows = 0;
	this.fixCols = 0;
	this.decimal = "";
	this.sheetType = 0;		/* 0: EasySheet, 1: CrossSheet */
	this.align = "";		/* SHEET_ALIGN_LEFT:0, SHEET_ALIGN_RIGHT:1, SHEET_ALIGN_CENTER:2 */
	this.format = "";
};

/* *****************************************************************************
*  MAKE EXCEL FILE AGENT(name:iframe's name, func:click time callBack function  
* *****************************************************************************/
/**
 * @description	미결
 * @param		{Object}	parentNode
 * @param		{String}	name
 * @param		{Object}	generationInfo
 * @param		{String}	templateXLSFileName
 * @param		{String}	paramsJXLS
 * @returns		{Undefined}
 * @example		미결
 */
function IFrame_Excel(parentNode, name, generationInfo, templateXLSFileName, paramsJXLS, downFileName) {  
    if(parentNode == null){
        parentNode = document.body;  
        try {
    	    parentNode.removeChild(document.getElementsByName(name)[0]);
        } catch (e){}
    } else {
        if (document.getElementsByName(name).length != 0){
        	removeTag(document.getElementsByName(name)[0]);
        }
    }

    var iframe = document.createElement("iframe");  
    iframe.name = iframe.id   = name;
    parentNode.appendChild(iframe);  

    iframe.doc = null;  

    if(iframe.contentDocument) iframe.doc = iframe.contentDocument;           // Firefox, Opera  
    else if(iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer  
    else if(iframe.document) iframe.doc = iframe.document;                    // Others?  
    if(iframe.doc == null)  
       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

    iframe.doc.open();  
    iframe.doc.close();  
    
    var frm = iframe.doc.createElement("form");  
    iframe.doc.body.appendChild(frm);  
    frm.method ="POST" ;
    frm.name   = frm.id ="frmExcel" ;
    frm.action ="excelDownload.do" ;
    // frm.enctype="multipart/form-data";
    frm.enctype="application/x-www-form-urlencoded";
    this.frm = frm;
    
    var wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "lang" ;
    wControl.value = USER_LANGUAGE;
    frm.appendChild(wControl);

    var wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "colsNum" ;
    wControl.value = generationInfo.colsNum;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "rowsNum" ;
    wControl.value = generationInfo.rowsNum;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "rowsColors" ;
    wControl.value = generationInfo.rowsColors;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "colsWidth" ;
    wControl.value = generationInfo.colsWidth;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "data" ;
    wControl.value = generationInfo.data;
    frm.appendChild(wControl);
     
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "templateXLSFileName" ;
    wControl.value = templateXLSFileName;
    frm.appendChild(wControl);
     
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "paramsJXLS" ;
    wControl.value = paramsJXLS;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "decimal" ;
    wControl.value = generationInfo.decimal;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "sheetType" ;
    wControl.value = generationInfo.sheetType;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "formName" ;
    wControl.value = downFileName;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "align" ;
    wControl.value = generationInfo.align;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "format" ;
    wControl.value = generationInfo.format;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "rowsLevels" ;
    wControl.value = generationInfo.rowsLevels;
    frm.appendChild(wControl);
    
   iframe.onload = function(){
    	// functionname : [IFrame_Excel.uploadFile]
	   
	   setTimeout(function (){removeTag(document.getElementsByName(this.name)[0]);},100);
    };
    iframe.onreadystatechange = function(){
    	// functionname : [IFrame_Excel.onreadystatechange]

        if (this.readyState == 'complete') {
        	removeTag(document.getElementsByName(this.name)[0]);
        }
    };

    this.submit = function(){
    	// functionname : [IFrame_Excel.submit]

    	this.frm.submit();
    };
 } ;

/* *****************************************************************************
*  MAKE FILE DOWNLOAD AGENT  
		parentNode : invisible DIV
		name       : iframe's unduplicated name 
		action     : servlet or action which returns file stream
		params     : need Parameter Object's Array 	  
		
     SAMPLE CODE   :
    	var parent = document.getElementsByName("X")[0];
		var action = "/FlexFrame/certi/certiGenerate.action" ;
		var params = [];
		params[0] = new Parameter("coGu", 3);
		params[1] = new Parameter("yy", 2011);
		
		var iFrame_DownLoad = new IFrame_DownLoad(parent, "XXX", action, params);
		iFrame_DownLoad.submit();
* *****************************************************************************/
 /**
  * @description	미결
  * @param		{Object}	parentNode
  * @param		{String}	name
  * @param		{Object}	action
  * @param		{Object}	params
  * @returns		{Undefined}
  * @example		미결
  */
 function IFrame_DownLoad(parentNode, name, action, params) {  
    if(parentNode == null){
        parentNode = document.body;  
        try {
    	    parentNode.removeChild(document.getElementsByName(name)[0]);
        } catch (e){}
    } else {
        if (document.getElementsByName(name).length != 0){
        	removeTag(document.getElementsByName(name)[0]);
        }
    }
    var iframe = document.createElement("iframe");  
    iframe.name = iframe.id   = name;
    parentNode.appendChild(iframe);  

    iframe.doc = null;  

    if(iframe.contentDocument) iframe.doc = iframe.contentDocument;           // Firefox, Opera  
    else if(iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer  
    else if(iframe.document) iframe.doc = iframe.document;                    // Others?  
    if(iframe.doc == null)  
       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

    iframe.doc.open();  
    iframe.doc.close();  
    
    var frm = iframe.doc.createElement("form");  
    iframe.doc.body.appendChild(frm);  
    frm.method ="POST" ;
    frm.name   = frm.id ="frmdownload" ;
    frm.action = action ;
    frm.enctype="application/x-www-form-urlencoded";
    this.frm = frm;

    for (var key in params){
		if (typeof(params[key])=="function") continue;

		var wControl = iframe.doc.createElement("input");
	    wControl.type = "hidden";  
	    wControl.id   = wControl.name = params[key].fieldName ;
	    wControl.value = params[key].datas[0];
	    frm.appendChild(wControl);
        
    }

   this.submit = function(){
    	// functionname : [IFrame_DownLoad.submit]

    	this.frm.submit();
    };
} ;

/**
 * @description	미결
 * @param		{String}	scriptPath
 * @param		{String}	callBackString
 * @returns		{Undefined}
 * @example		미결
 */
function ScriptManager(scriptPath, callBackString){
	this.scriptPath = scriptPath;
	this.callBackString = callBackString;
	this.busy = false;
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
ScriptManager.prototype.getScript = function(){
    // functionname : [ScriptManager.getScript]

	var wQueryString = "scriptPath=" 
    	             + this.scriptPath 
			         + "&lang=" + USER_LANGUAGE
    	             + "&tm=" + (new Date()).valueOf();
	this.busy = true;
	ajaxCall("POST", getContextPath() + "/groupware/form/getScript.do", wQueryString, this, "textScript");
};

/**
 * @description 미결
 * @param		{object}	info
 * @param		{object}	message
 * @param		{object}	pFlag
 * @return		{void}
 * @example		미결
 */
ScriptManager.prototype.parseData = function(info, message, pFlag){
	// functionname : [ChartBox.parseData]
   	this.busy = false;
	// 오류 메시지 먼저 파악 
	if (info == null){
		return;
	}
	
    globalEval(info);
    globalEval(this.callBackString);
    
	return;
};

/**
 * @description	미결
 * @param		{String}	src
 * @returns		{Undefined}
 * @example		미결
 */
var globalEval = function globalEval(src) {
    // functionname : [globalEval]
    if (window.execScript) {
        window.execScript(src);
        return null;
    }
    var fn = function() {
        window.eval.call(window, src);
    };
    fn();
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
 function setFireFoxEvent(){
	 // Firefox 에서 event 값을 가져오기 위하여 아래코드를 추가한다 
	 if(navigator.userAgent.indexOf('Firefox') >= 0){ 
	        (function(){
	            var events = ["mousedown", "mouseover", "mouseout", "mousemove", "mousedrag", "click", "dblclick", "keypress", "keydown", "keyup","focus","blur","resize","message"];  
	        	for (var i = 0; i < events.length; i++){
	        	    window.addEventListener(events[i], function(e){ window.event = e;}, true);
	        	}
	        }());
	 };
	 
	 // InnerText 속성을 사용하기 위하여
	 setInnerTextProperty();
 };
 
 /**
  * @description	미결
  * @name			flexformscripthead#getSrcElement
  * @event
  * @returns		{String}
  */
 // Firefox 에서 event 값을 캐취하지 방식이 틀려 firefox 와 다른브라우져에서 쓰는 방식으로 나눔. 
 function getSrcElement(e){
 var srcElement=null;
 
    if(navigator.userAgent.indexOf('Firefox') >= 0){
 		srcElement = e.target;
 	} else {
 		srcElement = e.srcElement;
 	}
 	return srcElement;
 };
 
 /**
  * @description	미결
  * @param			{Object}	element
  * @param			{String}	eventname
  * @param			{Object}	func
  * @returns		{Void}
  * @example		미결
  */
 function setEventHandler(element, eventname, func){

     if (BrowserDetect.browser == "Firefox"){
         // FIrefox의 addEventListener는 onload,onmouseover,onmouseout 에만 적용된다, 나머지는 이 루틴 활용할 것
//         if (eventname != "load" && eventname != "mouseover" && eventname != "mousemove" && eventname != "mouseout" && eventname != "change"&& eventname != "resize") {
    	 if(eventname != "load" && eventname != "message" && eventname != "mouseover" && eventname != "mousemove" && eventname != "mouseout" && eventname != "mouseup" && eventname != "change" && eventname != "dblclick" && eventname != "resize") {
             // 주의 다른 범주내의 함수는 쓸 수 없고 window내의 함수만 쓸 수 있다
             element.setAttribute("on" + eventname, func.name + "(event);");
             return;
         } else  if (eventname == "mousewheel"){
	    	 eventname = "DOMMouseScroll";
	     }
     }

          
 	if (element.addEventListener){  // DOM2: FF, Opera, Chrome
 		element.addEventListener(eventname, func, false);
     
     // IE에서 changedlqpsxmsms propertychange의 value변화값 체크로 확실히 한다.
     } else if (element.attachEvent){ // IE 5+
         if (eventname == "change"){
                 element.attachEvent("onpropertychange", function(e){
                         // Get event details for IE
                         if (!e) e = window.event;

                         if (e.propertyName == 'value' && func != null)
                             func(e);
                     });
         } else {
 		    element.attachEvent("on" + eventname, func);
         }
     } else { // IE 4
         if (eventname == "change"){
             element.onpropertychange = func;
         } else {
 	        element["on" + eventname] = func;
         }
     }
 	
 	EventCache.add(element, eventname, func, false);
 	return;
 };
 
 /* 20161230 추가(차중훈) */
 function removeEventHandler(element, eventname, func){
	 if(element == null) return;
	 
	 var eventNameWithOn = "on" + eventname;
	 
	 if( BrowserDetect.browser == "Firefox" ){
         // FIrefox의 addEventListener는 onload,onmouseover,onmouseout 에만 적용된다, 나머지는 이 루틴 활용할 것
    	 if( eventname != "load"		&& 
    		 eventname != "message"		&& 
    		 eventname != "mouseover"	&& 
    		 eventname != "mousemove"	&& 
    		 eventname != "mouseout"	&& 
    		 eventname != "mouseup"		&& 
    		 eventname != "change"		&& 
    		 eventname != "dblclick"	&& 
    		 eventname != "resize" ){
             // 주의 다른 범주내의 함수는 쓸 수 없고 window내의 함수만 쓸 수 있다
             element.removeAttribute(eventNameWithOn);
             return;
         }
    	 else if( eventname == "mousewheel" ){
	    	 eventname = "DOMMouseScroll";
	     }
     }
	 
	 if( element.removeEventListener ){	// DOM2: FF, Opera, Chrome
		 element.removeEventListener(eventname, func, false);
	 }
	 else if( element.detachEvent ){	// IE 5+
//		 if (eventname == "change"){
//			 eventNameWithOn = "onpropertychange";
//		 }
		 element.detachEvent(eventNameWithOn, func);
	 }
	 else{	// IE 4
		 if(eventname == "change"){
			 element.onpropertychange = null;
		 }
		 else{
			 element[eventNameWithOn] = null;
		 }
	 }
	 
	 return;
 }
 /* 20161230 추가(차중훈) */
 
 /**
  * @description	미결
  * @param			{Object}	element
  * @param			{String}	eventname
  * @param			{Object}	func
  * @returns		{Void}
  * @example		미결
  */
 function setTouchEventHandler(element, eventname, func){
	//터치이벤트
     var mc = Hammer(element, {
         touchAction: 'pan-x pan-y'
     });
     mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
     mc.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
     
     if(eventname == "scroll"){
    	 mc.on("pan swipe rotate pinch tap doubletap press", function(ev) {
//         console.log("델타x : "+ev.deltaX +" , 델타Y : "+ev.deltaY +" , ev : "+ev);
    		 var scrollDiv = element.getElementsByTagName("div")[0];
    		 var scroll_Y = ev.deltaY/2;
    		 var scroll_X = ev.deltaX/2;
    		 
    		 if(Math.abs(scroll_Y) >= Math.abs(scroll_X)){
    			 scrollDiv.scrollTop += (-1) * scroll_Y;
    		 }else{
    			 scrollDiv.scrollLeft += (-1) * scroll_X;
    		 }
    		 
    		 // 스마트 그리드 동작을 위해 scrollAction 호출
    		 var wSheet = searchSheet(scrollDiv);
        	 if(wSheet == undefined || wSheet == null) return;
    	     wSheet.scrollAction(scrollDiv.scrollTop, scrollDiv.scrollLeft);
    	 });
     }

     
	 return;
 };

 /**
  * @description	미결
  * @param			{Object}	evt
  * @returns		{Object}
  * @example		미결
  */
function getShiftKeyPressed(evt){
    return evt.shiftKey; 
}

/**
 * @description	미결
 * @param		{Object}	evt
 * @returns		{Boolean}
 * @example		미결
 */
function getCtrlPressed(evt){
	    return evt.ctrlKey || evt.metaKey; // Mac support
} 

/**
 * @description	미결
 * @param		{Object}	evt
 * @returns		{Object}
 * @example		미결
 */
function getAltPressed(evt){
	    return evt.altKey;
}

/**
 * @description	미결
 * @param		{Object}	pem
 * @param		{Object}	em
 * @returns		{Object}
 * @example		미결
 */
function removeElement(pem, em) {
    pem.removeChild(em);
}

/**
 * @description	미결
 * @name		flexformscripthead#getButtonElement
 * @event
 * @returns		{}
 */
function getButtonElement(e){
    var srcElement=0;
    if(USER_BROWSER_NAME == "firefox" || USER_BROWSER_NAME == "netscape"){
      if( e == 0){
    		srcElement = 1;
      }
	} else {
		srcElement = e;
	}
	return srcElement;
}

/* ************************************************************************
*   상위 화면에서  객체 조회 호출시 동작 설정
*   * "조회"라는 가저오기가 있어야 한다 
* ************************************************************************/
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function executeDisplayJob(){
	var checkEvent = false;
	try {
   	if (eval("fillJob_조회")) checkEvent = true;
   } catch(e){}
   
   if (checkEvent){
   	jobControler.open("조회;");
   }    
};

var commonButtons = []; //associative array
/**
 * @description	미결
 * @param		{Number}	strName
 * @returns		{Void}
 * @example		미결
 */
function callCommonButton(strName){
	commonButtons[strName].click();
	return;
};

/**
 * @description	미결
 * @param		{Object}	control
 * @returns		{Void}
 * @example		미결
 */
function setCommonButton(control){
	for (var wKey in commonButtons){
		if (commonButtons[wKey] == control){
			var keyControl = document.getElementsByName(wKey)[0];
			if(keyControl != undefined && keyControl != null){
				document.getElementsByName(wKey)[0].style.display = (control.enabled ? "block" : "none");
			}
			break;
		}
	}
	return;
};

/* ************************************************************************
*   인라인 메시지박스
* ************************************************************************/
/**
 * @description	미결
 * @param		{String}	msg
 * @returns		{Void}
 * @example		미결
 */
function inlineMessage(msg){
	try {
		if( typeof parent.frames["bottomFrame"] != "undefined"){
			parent.frames["bottomFrame"].tabsMsgPrint(msg);
		}
		else{
			alert(msg);
		}
	} catch(e){
		alert(msg);
	}
	
	return;
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
function clearInlineMessage(){
	try {
		if( typeof parent.frames["bottomFrame"] != "undefined")
			parent.frames["bottomFrame"].tabsMsgPrint("");
	} catch(e){}
	
	return;
};

/* ************************************************************************
*   엔터키 동작설정 
*   * 지정콘트롤의 다음 순번의 콘트롤중 Enable상태인 것을 찾는다
* ************************************************************************/
/**
 * @description	미결
 * @param		{String}	pControlName
 * @returns		{Void}
 * @example		미결
 */
function setFocusToNextControl(pControlName){
	var found = false;
	for (var i = tabInfos.indexOf(pControlName) + 1; i < tabInfos.length; i++){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
//		if (wControl.enabled && wControl.visible && 
//				!(BrowserDetect.browser == "Firefox" && wControl.tagObject.clientHeight == 0) &&
//				!(BrowserDetect.browser == "Safari" && wControl.tagObject.clientHeight == 0)) {
		if (wControl.enabled && wControl.visible && wControl.tagObject.clientHeight != 0) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	if (found) return; 
	for (var i = 0; i < tabInfos.indexOf(pControlName); i++){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	return;
};

/**
 * @description	미결
 * @param		{String}	pControlName
 * @returns		{Void}
 * @example		미결
 */
function setFocusToFormerControl(pControlName){
	var found = false;
	for (var i = tabInfos.indexOf(pControlName) - 1; i >=0 ; i--){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	
	if (found) return; 
	for (var i =  tabInfos.length - 1; i > tabInfos.indexOf(pControlName); i--){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	
	
	return;
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
function setFocusToFirstControl(){
//	var found = false;
	self.focus();
	
	for (var i = 0; i < tabInfos.length; i++){
		var controlName = tabInfos[i];
		if (controlName == null || controlName.trim().length == 0) continue;
		
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible && 
				!(BrowserDetect.browser == "Firefox" && wControl.tagObject.clientHeight == 0) &&
				!(BrowserDetect.browser == "Safari" && wControl.tagObject.clientHeight == 0)) {
			if ( wControl.focus 	){
				setTimeout(function(){
					wControl.focus();
				}, 500);
//				found = true;
				return wControl;
			}
		}
	}
	return;
};

/**
 * @description	미결
 * @param		{Object}	event
 * @returns		{Undefined}
 * @example		미결
 */
// 이벤트 겐슬에 관한 함수
// 상위로 전달되는 버블링 단계의 방지
function stopPropagation(event){
	
    if (event.stopPropagation){
       event.stopPropagation();
    } else {
       event.cancelBubble = true;
    }
};

/**
 * @description	미결
 * @param		{Object}	event
 * @returns		{Undefined}
 * @example		미결
 */
// 이벤트의 디폴트 후속 동작을 취소
function preventDefault(event) {
    if (event.preventDefault){
       event.preventDefault();
    } else {
       event.returnValue = false;
    }
};

/**
 * @description	미결
 * @param		{Object}	event
 * @returns		{Undefined}
 * @example		미결
 */
// 두가지 다
function stopEvent(event){
    stopPropagation(event);
    preventDefault(event);
};

/**
 * @description	미결
 * @param		{Object}	editor
 * @returns		{String}
 * @example		미결
 */
// IE 커서의 위치가처오기 나머지 네개 브라우저는 em.selectionStart,  em.selectionEnd 속성가능
function synGetCaret(editor) {
	var selectionStart = 0; selectionEnd = 0;
    if(document.selection){
    	// The current selection
    	var range = document.selection.createRange();
    	var stored_range = range.duplicate();
    	
    	stored_range.moveToElementText( element );
    	stored_range.setEndPoint( 'EndToEnd', range );
    	
    	selectionStart = stored_range.text.length - range.text.length;
    	selectionEnd = element.selectionStart + range.text.length;
    }
    
    return {"selectionStart":selectionStart, "selectionEnd":selectionEnd};
}

/**
 * @description	미결
 * @param		{Object}	data
 * @returns		{String}
 * @example		미결
 */
function escapeParseString(data){
    var wString = "" + data;
    wString = wString.replaceWord(",", "<comma>");
    wString = wString.replaceWord(";", "<sclon>");
    wString = wString.replaceWord(":", "<clon>");
	wString = wString.replaceWord("&", "<amp>");
	wString = wString.replaceWord("%", "<percent>");
	wString = wString.replaceWord("?", "<question>");
    
    return wString;	
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
// 로케일 찾기 
function setLocale(){
	
	if (USER_LANGUAGE != undefined && USER_LANGUAGE.trim().length > 0){
		return;
	} 
	
	
	if ( navigator ) {
		var wLanguge = "BrowserLanguage_";
	    if ( navigator.language ) {
	    	wLanguge += navigator.language;
	    }
	    else if ( navigator.browserLanguage ) {
	    	wLanguge += navigator.browserLanguage;
	    }
	    else if ( navigator.systemLanguage ) {
	    	wLanguge += navigator.systemLanguage;
	    }
	    else if ( navigator.userLanguage ) {
	    	wLanguge += navigator.userLanguage;
	    }
	    
	    USER_LANGUAGE = wLanguge;
	}
	
	return; 
}

/**
 * @description	미결
 * @param		{Object}	el
 * @returns		{Number}
 * @example		미결
 */
// 텍스트박스에서 커서위치 찾기
function getCaretPosition(el) {
	  if (el.selectionStart) {
	    return el.selectionStart;
	  } else if (document.selection) {
		  try { el.focus(); } catch(e){}

	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }

	    var re = el.createTextRange(),
	        rc = re.duplicate();
	    re.moveToBookmark(r.getBookmark());
	    rc.setEndPoint('EndToStart', re);

	    return rc.text.length;
	  } 
	  return 0;
}
/**
 * @description	미결
 * @param		{Object}	el
 * @returns		{Number}
 * @example		미결
 */
function getCaretLength(el) {
	  if (el.selectionStart) {
	    return (el.selectionEnd - el.selectionStart);
	  } else if (document.selection) {
		  try { el.focus(); } catch(e){}

	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }
	    return r.text.length;
	  } 
	  return 0;
}

//---------------------------------------------------------------------------------------
//파이어폭스에서 innerText 인식이 안되는 경우
//이 함수를 먼저 읽히게 하면 innerText 를 사용할 수 있음
//---------------------------------------------------------------------------------------
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function setInnerTextProperty() {
 if(typeof HTMLElement != "undefined" && typeof HTMLElement.prototype.__defineGetter__ != "undefined") {
     HTMLElement.prototype.__defineGetter__("innerText",function() {
         if(this.textContent) {
             return(this.textContent);
         } 
         else {
             var r = this.ownerDocument.createRange();
             r.selectNodeContents(this);
             return r.toString();
         }
     });
     
     HTMLElement.prototype.__defineSetter__("innerText",function(sText) {
         this.innerHTML = sText;
     });
 }
}

//insertAdjacentHTML(), insertAdjacentText() and insertAdjacentElement()
//for Netscape 6/Mozilla by Thor Larholm me@jscript.dk
//Usage: include this code segment at the beginning of your document
//before any other Javascript contents.
/**
 * @description	미결
 * @param		{String}	where
 * @param		{String}	parseNode
 * @returns		{Undefined}
 * @example		미결
 */
if(typeof HTMLElement!="undefined" && !
HTMLElement.prototype.insertAdjacentElement){
 HTMLElement.prototype.insertAdjacentElement = function (where,parsedNode){
     switch (where){
     case 'beforeBegin':
         this.parentNode.insertBefore(parsedNode,this);
         break;
     case 'afterBegin':
         this.insertBefore(parsedNode,this.firstChild);
         break;
     case 'beforeEnd':
         this.appendChild(parsedNode);
         break;
     case 'afterEnd':
         if (this.nextSibling) 
             this.parentNode.insertBefore(parsedNode,this.nextSibling);
         else 
        	 this.parentNode.appendChild(parsedNode);
         break;
     }
 };

 /**
  * @description 미결
  * @param		{object}	where
  * @param		{object}	htmlStr
  * @return		{undefined}
  * @example		미결
  */
 HTMLElement.prototype.insertAdjacentHTML = function (where,htmlStr) {
     var r = this.ownerDocument.createRange();
     r.setStartBefore(this);
     var parsedHTML = r.createContextualFragment(htmlStr);
     this.insertAdjacentElement(where,parsedHTML);
 };

 /**
  * @description 미결
  * @param		{object}	where
  * @param		{object}	txtStr
  * @return		{undefined}
  * @example		미결
  */
 HTMLElement.prototype.insertAdjacentText = function (where,txtStr) {
     var parsedText = document.createTextNode(txtStr);
     this.insertAdjacentElement(where,parsedText);
 };
}


/*	Implement array.push for browsers which don't support it natively.
	Please remove this if it's already in other code */
if(Array.prototype.push == null){
	Array.prototype.push = function(){
		for(var i = 0; i < arguments.length; i++){
			this[this.length] = arguments[i];
		};
		return this.length;
	};
};

/*	Event Cache uses an anonymous function to create a hidden scope chain.
	This is to prevent scoping issues. */
var EventCache = function(){
	var listEvents = [];
	
	return {
		listEvents : listEvents,
	
		add : function(node, sEventName, fHandler, bCapture){
			listEvents.push(arguments);
		},
	
		flush : function(){
			var i, item;
			for(i = listEvents.length - 1; i >= 0; i = i - 1){
				item = listEvents[i];
				
				if(item[0].removeEventListener){
					item[0].removeEventListener(item[1], item[2], item[3]);
				};
				
				/* From this point on we need the event names to be prefixed with 'on" */
				if(item[1].substring(0, 2) != "on"){
					item[1] = "on" + item[1];
				};
				
				if(item[0].detachEvent){
					item[0].detachEvent(item[1], item[2]);
				};
				
				item[0][item[1]] = null;
			};
		}
	};
}();

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
/*  *****  로컬 스토리지 사용 _모바일 ***** */
function supports_html5_storage() {
    try {
    	return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
    	return false;
    }
};
/*  *****  사용의 사례 _모바일 *****
 * 
// 스토리지 이벤트 부여  
if (window.addEventListener) {
	window.addEventListener("storage", handle_storage, false);
} else {
	window.attachEvent("onstorage", handle_storage);
};

function handle_storage(e) {
	if (!e) { e = window.event; }
}

// 메모리 사용 _모바일
document.addEventListener("deviceready", onDeviceReady, false);
function onDeviceReady() {
    window.localStorage.setItem("key", "value");
    
    var keyname = window.localStorage.key(i);
    // keyname is now equal to "key"
    
    var value = window.localStorage.getItem("key");
    // value is now equal to "value"
    
    window.localStorage.removeItem("key");
    
    window.localStorage.setItem("key2", "value2");
    
    window.localStorage.clear();
    // localStorage is now empty
}

*/ 
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
// 폼리사이징 이벤트 함수 _모바일
var resizeTimer = 0;
function doResize(){
    if (resizeTimer) clearTimeout(resizeTimer);
    resizeTimer = setTimeout(doResizeEnd, 500);
}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function doResizeEnd(){
    var w = window;
    var d = document;
    var e = d.documentElement;
    var g = d.getElementsByTagName('body')[0];
    var w = w.innerWidth || e.clientWidth || g.clientWidth;
    var h = w.innerHeight|| e.clientHeight|| g.clientHeight;
    w = parseIntSize(w); h = parseIntSize(h);
      
    document_onresize(w, h);
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function ActivateResizeEvent(){
	setEventHandler(window, "resize", function(e){
	    e = window.event || e;
	    doResize();
	});

};


//화면간 메시지교환 동작에 필요한 선언과 함수들
//모달폼 전역변수 선언
var modalDialogWindow = null;
var modalCommandId = "";  //command_NNN_onclick() 이벤트에서 대입
var modalArguments = ";";

/**
 * @description	미결
 * @name		flexformscripthead#postMessageController
 * @event
 * @returns		{Undefined}
 */
//postMessage 방식의 리턴값 받기
function postMessageController(e) {
	if (e.data == "loaded"){				// 차일드에서 받는 부모폼폼코딩
		//window.setTimeout("postArgument();", 1);
		postArgument();
	} else if (e.data.endsWith(";POST")){	// 부모폼에서 받는 차일드폼 코딩
		modalArguments = e.data;
	} else {								// 차일드에서 받는 부모폼폼코딩
		if( typeof self["setReturnValue_" + modalCommandId] == "function" ){
			eval("setReturnValue_" + modalCommandId + "(e.data);"    );
//			self["setReturnValue_" + modalCommandId](e.data);
		}
	}
}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function postArgument(){
	if(modalDialogWindow != null) modalDialogWindow.postMessage(modalCommandId + ";POST", '*');
}
//POST MESSAGE EVENT를 붙인다
setEventHandler(window, "message", postMessageController);

//Post 방식으로 다이얼로그 팝업을 호출했을 경우 팝업 호출 정보를 가져오는 함수
function getPostArgument(){
	return modalCommandId + ";POST";
}

/**
 * @description	미결
 * @returns		{Number}
 * @example		미결
 */
function findHighestZIndex()
{
	var elements = document.getElementsByTagName("*");
	var highest = 0;
	var elementLength = elements.length - 1;
	var elementStyle = null;
	var elementZIndex = 0;
	
	for (var i = 0; i < elementLength; i++) {
		elementStyle = elements[i].currentStyle;
		comp = elementStyle ? elementStyle : getComputedStyle(elements[i], null);
		elementZIndex = comp.zIndex;
	    if (parseInt(elementZIndex) > highest) {
	    	highest = parseInt(elementZIndex);
	    }
	}
	
    return highest;
}

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
//160119 김남용 Frame에으로 팝업화면 호출후 종료버튼 및 값넘겨주기시  종료처리하기위해 추가.
function parentFrameCtlName(){
	var ctlName = "";
	
	if(thisIsIframe){
	    var pEm = self.parent.document.getElementsByName(self.name)[0];
	  	while (pEm.parentNode && !pEm.className.startsWith("Frame_") ) {
	  		pEm = pEm.parentNode;
	  	}
	  	if (pEm != null){
	  	   ctlName = pEm.getAttribute("ctlname");
	  	}
	}
	return ctlName;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
/* 페이지 사이즈 체크 함수*/
function getVisibleDocWidth() {
	  if (self.innerHeight) {
	    return self.innerWidth;
	  }

	  if (document.documentElement && document.documentElement.clientWidth) {
	    return document.documentElement.clientWidth;
	  }

	  if (document.body) {
	    return document.body.clientWidth;
	  }
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function getVisibleDocHeight() {
	  if (self.innerHeight) {
	    return self.innerHeight;
	  }

	  if (document.documentElement && document.documentElement.clientHeight) {
	    return document.documentElement.clientHeight;
	  }

	  if (document.body) {
	    return document.body.clientHeight;
	  }
}



//유저 정보 및 추가 사용자 세션 정보 불러오기
var userInfoLoader = null;

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function UserInfoLoader(){
	this.contextPath = getContextPath();
	this.addItemKeys = [];
	
	//사용자 이벤트
	//1. 유저정보 로드 전 처리
	this.hasLoadBefore = false;
	this.fncLoadBefore = null;
	
	this.hasLoadBefore = (typeof self["userInfo_onLoadBrfore"] != "undefined");
	if( this.hasLoadBefore ){
		this.fncLoadBefore = new Function("return function(){ return userInfo_onLoadBrfore(); }")();
	}
	
	//2.유저정보 로드 후 처리
	this.hasLoadCompleted = false;
	this.fncLoadCompleted = null;
	
	this.hasLoadCompleted = (typeof self["userInfo_onLoadCompleted"] != "undefined");
	if( this.hasLoadCompleted ){
		this.fncLoadCompleted = new Function("return function(jsonObject){ return userInfo_onLoadCompleted(jsonObject); }")();
	}
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
UserInfoLoader.prototype.loadData = function(){
	//유저정보 로드 전 처리
	if( this.hasLoadBefore ){
		this.fncLoadBefore();
	}
	
	ajaxCallSync("POST", this.contextPath + "/loadUserInfo.do", "", this, "");
};

/**
 * @description 미결
 * @param		{object}	jsonObject
 * @param		{string}	message
 * @return		{boolean}
 * @example		미결
 */
UserInfoLoader.prototype.parseData = function(jsonObject, message){
	//기본 유저정보 설정
	USER_COGU			= jsonObject.USER_COGU;
	USER_BON			= jsonObject.USER_BON;
	USER_PART     		= jsonObject.USER_PART;
	USER_ORGANIZATION	= jsonObject.USER_ORGANIZATION;
	USER_PERSONALID		= jsonObject.USER_PERSONALID;
	USER_PERSONALNAME	= jsonObject.USER_PERSONALNAME;
//	USER_DATE			= jsonObject.USER_DATE;
//	USER_YEAR			= parseInt(USER_DATE.substring(0,4), 10);
//	USER_MONTH			= parseInt(USER_DATE.substring(0,6), 10);
//	USER_TIME			= jsonObject.USER_TIME;
	USER_USERID			= jsonObject.USER_USERID;
	USER_IPADDR			= jsonObject.USER_IPADDR;
	USER_LANGUAGE		= jsonObject.USER_LANGUAGE;
	USER_MESSAGE		= jsonObject.USER_MESSAGE;
	
	//유저정보 로드 후 처리
	if( this.hasLoadCompleted ){
		this.fncLoadCompleted(jsonObject);
	}
	
	return true;
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function settingUserInfos(){
	if( userInfoLoader == null )
		userInfoLoader = new UserInfoLoader();
	
	userInfoLoader.loadData();
}



//setEventHandler(document, "unload", function(){ alert("Document Unload!!!"); return true; });
/**
 * @description 
 *     EasyMaker Vertical Data Sheet For Big Data.
 * 
 * @constructor
 * 
 * @param {string} 	 controlId 	 - 콘트롤 고유 아이디 (영문)
 * @param {string} 	 controlName - 콘트롤 명 (사용자 고유 언어)
 * @param {HTMLNode} tagObject   - HTML 본문중의 매칭되는 HTML DOM Node. 
 * @return {Object} - 생성된 EasySheet 개체
 * @exception 널값 예외
 * 
 */
function ControlBase(controlId, controlName, tagObject){
	this.controlId = controlId;
	this.id = controlId;            // id와 controlId는 혼용가능
	this.controlName = controlName;
	this.tagObject = tagObject;
    /**
     *   @description  사용자가 컨트롤에 입력한 값에 의한 체크조건을 설정하는 값입니다.<br><br>
     *                 <table width="500">
     *                   <caption>CHECKTYPE 상수 정보</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">CHECKTYPE Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> NONE </td>
     *                          <td> 체크조건이 없습니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> FORMULA </td>
     *                          <td> 산식체크 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> YYYY </td>
     *                          <td> 년도 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> YM </td>
     *                          <td> 년월 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> YMD </td>
     *                          <td> 년월일 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> RESINUM </td>
     *                          <td> 주민등록번호 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> TAXNUM </td>
     *                          <td> 사업자등록번호 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> POSTNUM </td>
     *                          <td> 우편번호 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> _EMPTY </td>
     *                          <td> 사용안함 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> AMOUNT </td>
     *                          <td> 금액</td>
     *                       </tr>
     *                       <tr>
     *                          <td> NUMBER </td>
     *                          <td> 숫자 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> IMEMODE </td>
     *                          <td> 한글 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> ENGLNUM </td>
     *                          <td> 영문 + 숫자</td>
     *                       </tr>
     *                       <tr>
     *                          <td> BARCODE </td>
     *                          <td> 바코드 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> PASSWORD </td>
     *                          <td> 패스워드 </td>
     *                       </tr>
     *                 </table>
     *   @example      ControlBase.checkType = ControlBase.CHECKTYPE.YYYY;
     */
	// 상수선언부
    this.CHECKTYPE = {
    		NONE 	: 0,
    		FORMULA : 1,
    		YYYY 	: 2,
    		YM   	: 3,
    		YMD 	: 4,
    		RESINUM : 5,
    		TAXNUM  : 6,
    		POSTNUM : 7,
    		_EMPTY  : 8,
    		AMOUNT  : 9,
    		NUMBER  : 10,
    		IMEMODE : 11,
    		ENGLNUM : 12,
    		BARCODE : 13,
    		PASSWORD: 14};
	
    /**
     *   @description  사용자가 컨트롤에 입력한 값이 확정되었을 때, 컨트롤에 입력된 값을 Key로 하여 데이터를 조회합니다.<br>
     *                 기본값: false<br><br>
     *                 <table width="500">
     *                   <caption>isKeyControl Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값에 의해 자료를 조회합니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값에 의해 자료를 조회하지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */  
    this.isKeyControl = false;
    /**
     *   @description      조회한 자료에서 Key 필드와 함께 추가로 조건을 주기위해 사용합니다.<br>
     *                     컨트롤에 화면채우기 설정이 되어있다면 Key필드와 컨트롤의 값에 만족하는 데이터를 화면에 채웁니다.<br>
     *                     기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isFillControl Variable Value</caption>
     *                       <thead>
     *                          <tr>
     *                              <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                              <td> true </td>
     *                              <td> 컨트롤에 값을 채웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> false </td>
     *                              <td> 컨트롤에 값을 채우지 않습니다. </td>
     *                           </tr>
     *                     </table><br>
     */    
    this.isFillControl = false;
    /**    
     *   @description      Clear나 확인버튼을 클릭하여 실행시키고 난 후 후속작업을 위해 컨트롤의 데이터를 비울지 설정합니다.<br>
     *                     기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isClearControl Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                                <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                               <td> true </td>
     *                              <td> Clear 기능 실행 후 컨트롤의 값을 비웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                                <td> false </td>
     *                              <td> Clear 기능 실행하더라도 컨트롤의 값을 유지합니다. </td>
     *                           </tr>
     *                     </table><br>
     */    
    this.isClearControl = false;
    /**
     *   @description      입력/조회 시트에서 줄추가/삭제시 컨트롤의 값을 비울지 설정합니다.<br>
     *                     줄 단위로 다른 값이 들어갈 데이터에 적용됩니다.<br>기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isSeqClearControl Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                                <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                               <td> true </td>
     *                              <td> 줄추가/삭제시 컨트롤의 값을 비웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> false </td>
     *                              <td> 줄추가/삭제를 하더라도 컨트롤의 값은 유지됩니다. </td>
     *                           </tr>
     *                     </table><br>
     */ 
    this.isSeqClearControl = false;
    /**
     *   @description  컨트롤의 기본값을 지정합니다.<br>
     *                 eval 명령으로 실행할 수 있는 산식도 들어갈 수 있습니다<br>기본값 : 없음<br><br>
     */
    this.defaultValue = "";       // eval명령으로 샐행할 수 있는 산식이 들어간다 
    /**
     *   @description  다른 컨트롤에 연관되어 출력되는 데이터가 다른 컨트롤의 값에 따라 변하는 경우 다른 컨트롤의 이름을 지정합니다.<br>기본값 : 없음<br><br>
     */ 
    this.callerControlName = "";  // 콘트롤 채우기를 호출하는 콘트롤명
    /**
     *   @description  사용자가 입력한 컨트롤의 데이터입니다.<br>기본값 : 없음<br><br>
     */ 
    this.value = null;
    this.image = "";
    /**
     *   @description  컨트롤의 배경색입니다.<br>기본값 : #FFFFFF<br><br>
     */ 
	this.backColor = "#FFFFFF";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨색입니다.<br>기본값 : #000000<br><br>
     */
	this.foreColor ="#000000";
    /**
     *   @description  컨트롤의 기능 활성화/비활성화 설정합니다.<br>기본값 : true<br><br>
     *                 <table width="500">
     *                   <caption>visible Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤이 보입니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤이 안 보입니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.visible = true;
    /**
     *   @description  컨트롤의 기능 활성화/비활성화 설정합니다.<br>기본값 : true<br><br>
     *                 <table width="500">
     *                   <caption>enabled Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤을 활성화 시킵니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤을 비활성화 시킵니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.enabled = true;
	this.readOnly = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터를 정렬합니다.<br>
     *                 기본값 : "left"<br><br>
     *                 <table width="500">
     *                   <caption>enabled Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> left </td>
     *                          <td> 왼쪽 정렬. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> center </td>
     *                          <td> 가운데 정렬. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> right </td>
     *                          <td> 오른쪽 정렬. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.alignment = "left";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨굵기를 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontBold Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 글씨 굵기를 굵게합니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 글씨 굵기를 굵게하지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontBold = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글꼴을 기울임꼴로 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontItalic Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값의 글꼴을 기울임꼴로 설정합니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값의 글꼴을 기울이지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontItalic = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨체를 설정합니다.<br>
     *                 기본값 : false<br><br>
     */
	this.fontName = "";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨크기를 설정합니다.<br>
     *                 기본값 : 9<br>
     *                 단  위 : pt<br><br>
     */
	this.fontSize = 9;  //pt
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글자 중간에 가로줄을 그을지 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontStrikethru Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값의 글자 중간에 가로줄을 긋습니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값의 글자 중간에 가로줄을 긋지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontStrikethru = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글자에 밑줄을 그을지 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontBold Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값의 글자에 밑줄을 긋습니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값의 글자에 밑줄을 긋지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontUnderline = false;
	this.fontColor = "#000000";
    /**
     *   @description  컨트롤에 도움말을 넣을지 설정합니다.<br>
     *                 기본값 : 없음<br><br>
     */
	this.toolTipText = "";
	
	this.oldbgcolor = "";
	this.oldcolor = "";
    
    // 드래그 드롭 관련 부분
    this.draggable	= false;
    this.droppable	= false;
    this.outerDroppable	= false;     
    this.hasDragStartEvent = false;	this.fncDragStartEvent = null;
    this.hasDragMoveEvent = false;	this.fncDragMoveEvent = null;
    this.hasDragEndEvent = false;	this.fncDragEndEvent = null;
    this.hasDragEnterEvent = false;	this.fncDragEnterEvent = null;
    this.hasDragOverEvent = false;	this.fncDragOverEvent = null;
    this.hasDragLeaveEvent = false;	this.fncDragLeaveEvent = null;
    this.hasDropEndEvent = false;	this.fncDropEndEvent = null;

    this.hasDragStartEvent = (typeof self[this.controlId + "_ondragstart"] != "undefined");
    if (this.hasChangeEvent){ this.fncDragStartEvent = new Function( "return function (event) { return " + this.controlId + "_ondragstart(event); }")(); }
    this.hasDragMoveEvent = (typeof self[this.controlId + "_ondragmove"] != "undefined");
    if (this.hasDragMoveEvent){ this.fncDragMoveEvent = new Function( "return function (event) { return " + this.controlId + "_ondragmove(event); }")(); }
    this.hasDragEndEvent = (typeof self[this.controlId + "_ondragend"] != "undefined");
    if (this.hasDragEndEvent){ this.fncDragEndEvent = new Function( "return function (event) { return " + this.controlId + "_ondragend(event); }")(); }

    this.hasDragEnterEvent = (typeof self[this.controlId + "_ondragenter"] != "undefined");
    if (this.hasDragEnterEvent){ this.fncDragEnterEvent = new Function( "return function (event, srcControlName, arrFiles, arrFileTypes) { return " + this.controlId + "_ondragenter(event, srcControlName, arrFiles, arrFileTypes); }")(); }
    this.hasDragOverEvent = (typeof self[this.controlId + "_ondragover"] != "undefined");
    if (this.hasDragOverEvent){ this.fncDragOverEvent = new Function( "return function (event, srcControlName, arrFiles, arrFileTypes) { return " + this.controlId + "_ondragover(event, srcControlName, arrFiles, arrFileTypes); }")(); }
    this.hasDragLeaveEvent = (typeof self[this.controlId + "_ondragleave"] != "undefined");
    if (this.hasDragLeaveEvent){ this.fncDragLeaveEvent = new Function( "return function (event, srcControlName, arrFiles, arrFileTypes) { return " + this.controlId + "_ondragleave(event, srcControlName, arrFiles, arrFileTypes); }")(); }
    this.hasDropEndEvent = (typeof self[this.controlId + "_ondropend"] != "undefined");
    if (this.hasDropEndEvent){ 
    	this.fncDropEndEvent = new Function( 
    			"return function (event, srcControlName, arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet) " + 
    			        "{ " + 
    			           "return " + this.controlId + "_ondropend(event, srcControlName, arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet); " + 
    			        "}"
        )(); 
    }
    
    this.hasValidateEvent = (typeof self[this.controlId + "_onvalidate"] != "undefined");
    if (this.hasValidateEvent) { this.fncValidateEvent = new Function( "return function (event) { return " + this.controlId + "_onvalidate(event); }")(); }
    
    
	if (tagObject){
    	var cssStyle = getStyle(this.tagObject);
    	var image = tagObject.getAttribute("image");
    	var className = tagObject.className;
    	
    	this.image = (image != null && image !== "") ? image : className.substring(0, className.indexOf(" "));
    	this.backColor = (cssStyle.backgroundColor ? cssStyle.backgroundColor : "#FFFFFF");
    	this.foreColor =(cssStyle.color ? cssStyle.color : "#000000");
    	this.visible = (cssStyle.display ? cssStyle.display != "none" : (cssStyle.left ? cssStyle.left != "-10000px" : true));
    	this.enabled = !(this.tagObject.disabled ? this.tagObject.disabled : this.tagObject.getAttribute("disabled"));
    	this.readOnly = (this.tagObject.readOnly ? this.tagObject.readOnly : this.tagObject.hasAttribute("readOnly"));
    	this.alignment = (cssStyle.textAlign ? cssStyle.textAlign : "left");
    	this.fontBold = (cssStyle.fontWeight == "bold");
    	this.fontItalic = (cssStyle.fontStyle == "italic"); 
    	this.fontName = (cssStyle.fontFamily ? cssStyle.fontFamily : "");
    	this.fontSize = (cssStyle.fontSize ? parseIntSize(cssStyle.fontSize) : 9);
    	this.fontStrikethru = (cssStyle.textDecoration == "line-through");
    	this.fontUnderline = (cssStyle.textDecoration == "underline");
    	this.fontColor = (cssStyle.color ? cssStyle : "#000000");
    	this.toolTipText = (this.tagObject.title ? this.tagObject.title : "");
    	this.zIndex = (cssStyle.zIndex ? cssStyle.zIndex : 0);
    	this.oldbgcolor = this.backColor;
    	this.oldcolor = this.fontColor;
    	
    	image = null; className = null;
    	cssStyle = null;

    	//Enabled가 false인 경우
    	if( !this.enabled ){
//    		this.tagObject.style.backgroundColor="#d2d0d0";
    		this.tagObject.classList.remove(this.image);
    		this.tagObject.classList.add(this.image+"-disabled");
        }
    	
        // Drag Drop 이벤트 선언부
        setEventHandler(this.tagObject, "dragstart",   control_DragStart);
        setEventHandler(this.tagObject, "drag",        control_Drag);
        setEventHandler(this.tagObject, "dragend",     control_DragEnd);

        setEventHandler(this.tagObject, "dragenter",   control_DragEnter);
        setEventHandler(this.tagObject, "dragover",    control_DragOver);
        setEventHandler(this.tagObject, "dragleave",   control_DragLeave);
        setEventHandler(this.tagObject, "drop",        control_Drop);
    } 
    /**
     *   @description  컨트롤에 표시문자열을 지정합니다.<br>
     *                 기본값 : 없음<br><br>
     */
	this.caption = "";
    /**`
     *   @description  tagObject의 태그 속성 객체입니다.<br>
     *                 컨트롤의 html 태그 속성값에 대한 설정을 할 수 있습니다<br><br>
     *   @example      this.tagObject.style.fontWeight = "bold";
     *                 this.tagObject.style.fontStyle = "italic";
     */
    this.style = "";  // EasyMaker에서 스타일 기능 추가시 사용
    this.tag = "";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터에 대한 타입을 설정합니다.<br>
     *                 타입은 상수로 선언된 CHECKTYPE으로 설정합니다.<br>
     *                 기본값 : 0<br><br>
     */
    this.checkType = 0;
    /**
     *       @name           ControlBase#fncValidateEvent
     *       @event
     *       @description    컨트롤의 데이터, 상태등이 변경되었을 때 발생하는 사용자 이벤트 메소드입니다.<br>유저가 추가한 이벤트 코드를 실행하는 함수입니다.
     */
	this.dataBinds = [];     	// 데이터 링크된 콘트롤들 
	this.bindDataset = "";
	this.innerDataset = "";
	
	this.passEvent = false;		//사용자 이벤트 동작 여부(true:동작안함 / false:동작함)
};

ControlBase.prototype.setDataBind = function(){
	var args = Array.prototype.slice.call(arguments);
	var argCount = args.length;
	var dataset = null; var col = null; var codeCol = null;
	var bindInfo = null;
	
	if( argCount == 2 ){
		dataset = args[0];
		col = args[1];
		
		//예외처리
		if( typeof dataset != "string" || (typeof dataset == "string" && dataset.length == 0) ){
			args.clear(); args = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof col != "string" || (typeof col == "string" && col.length == 0) ){
			args.clear(); args = null; col = null; dataset = null; //메모리 해제
			return;
		}
	}
	else if( argCount == 3 ){
		dataset = args[0];
		col = args[1];
		codeCol = args[2];
		
		//예외처리
		if( typeof dataset != "string" || (typeof dataset == "string" && dataset.length == 0) ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof col != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof codeCol != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
	}
	else{
		args.clear(); args = null;
		return;
	}
	
	var regexp = /^ListBox[ABCD]{0,1}$/;
	var image = (regexp.test(this.image) ? "List1" : this.image);
	
	//바인드 정보 생성
	bindInfo = new BindInfo(dataset, col, image, this.controlName);
	
	//콤보 또는 리스트박스의 경우 내부값 연결 컬럼 설정
	if( codeCol != null && (typeof codeCol == "string" && codeCol.length > 0) )
		bindInfo.colId_value = codeCol;
	
	//컨트롤에 바인드 정보 설정
	//파라메터가 2개인 경우 : 연결데이터셋, 연결 컬럼
	if( argCount == 2 )
		this.dataBinds[dataset] = bindInfo;
	//파라메터가 3개인 경우 : 연결데이터셋, 내부값 연결 컬럼, 텍스트 연결 컬럼
	else if( argCount == 3 )
		this.dataBinds[dataset + "_" + col] = bindInfo;
	
	//데이터셋에 바인드 정보 설정
	dataSets[dataset].dataBinds[this.controlName] = bindInfo;
	
	//메모리 해제
	bindInfo = null; image = null; regexp = null;
	codeCol = null; col = null; dataset = null;
	args = null;
};

ControlBase.prototype.setInnerBind = function(){
	var args = Array.prototype.slice.call(arguments);
	var argCount = args.length;
	var dataset = null; var col = null; var codeCol = null;
	var bindInfo = null;
	
	if( argCount == 3 ){
		dataset = args[0];
		col = args[1];
		codeCol = args[2];
		
		//예외처리
		if( typeof dataset != "string" || (typeof dataset == "string" && dataset.length == 0) ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof col != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof codeCol != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
	}
	else{
		args.clear(); args = null; //메모리 해제
		return;
	}
	
	var regexp = /^ListBox[ABCD]{0,1}$/;
	var image = (regexp.test(this.image) ? "List1" : this.image);
	
	//바인드 정보 생성
	bindInfo = new BindInfo(dataset, col, image, this.controlName);
	
	//콤보 또는 리스트박스의 경우 내부값 연결 컬럼 설정
	if( codeCol != null && (typeof codeCol == "string" && codeCol.length > 0) )
		bindInfo.colId_value = codeCol;
	
	//this.innerBinds[dataset + "_" + col] = bindInfo;
	
	//데이터셋에 바인드 정보 설정
	dataSets[dataset].innerBinds[this.controlName] = bindInfo;
	
	//메모리 해제
	bindInfo = null; image = null; regexp = null;
	codeCol = null; col = null; dataset = null;
	args = null;
};

//cellNum은 생략될 수 있다
/*
ControlBase.prototype.addLinkInfo = function(objectName, propertyName, cellNum){
	var newPropertyIndex = this.linkPropertyNames.length + 1;
	
	if (cellNum == undefined){
		this.linkPropertyNames[newPropertyIndex] = "" + objectName + "." + propertyName;
	} else {
		this.linkPropertyNames[newPropertyIndex] = cellNum + ":" + objectName + "." + propertyName;
	}
	return;
}

ControlBase.prototype.setLinkedProperties = function(value, cellNum, objectSeq){
	var objectName = "";
	var propertyName = "";
	
	for(var i=0; i < this.linkPropertyNames.length; i++){
		if (cellNum != undefined){
			var wCellNum = parseInt(this.linkPropertyNames[i].split(":")[0]);
			if (wCellNum != cellNum){
				continue;
			}
			objectName   = this.linkPropertyNames[i].split(".")[0].split(":")[1];
			propertyName = this.linkPropertyNames[i].split(".")[1];
		} else {
			objectName   = this.linkPropertyNames[i].split(".")[0];
			propertyName = this.linkPropertyNames[i].split(".")[1];
		}
		
		var wObject = objects[objectName];
		if (objectSeq != undefined){
			// 이벤트 없이 값의 변화만 유도
			wObject.recordset[objectSeq].properties[propertyName].value = value;
		} else {
			// 값의 변화후 후속작업까지 호출된다
			if (wObject.getValue(propertyName) != value){
				wObject.setValue(propertyName, value);
			}
		}
	}
	return;
}
*/

/**
*     @description  컨트롤의 배경색을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        backColor     {String}     <br> 배경색으로 지정할 컬러코드 값입니다.<br>컬러코드는 &로 시작하며 &를 포함하여 총 8자리입니다.
*     @return       배경색 지정에 성공하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환하게 됩니다.
*     @example      var wControls = controls["base_1"];
*      //배경색 코드를 &HBCB0A8 로 지정합니다.
*      if( false == wControls.setBackColor("&HBCB0A8") ){
*           //배경색 지정에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setBackColor 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setBackColor = function(backColor){
	// functionname : [Control.setBackColor]

	this.backColor = backColor;
	this.tagObject.style.backgroundColor = backColor;
	
	// 하위 테그들의 백칼러 조정
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.style.backgroundColor = backColor;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].style.backgroundColor = backColor;
			
		}
	}
};

/**
*     @description  컨트롤의 전경색을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        foreColor     {String}      <br>전경색으로 지정할 컬러코드 값입니다.<br>컬러코드는 &로 시작하며 &를 포함하여 총 8자리입니다.
*     @return       전경색 지정에 성공하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환하게 됩니다.
*     @example      var wControls = controls["base_1"];
*      //전경색 코드를 &HBCB0A8 로 지정합니다.
*      if( false == wControls.setForeColor("&HBCB0A8") ){
*           //전경색 지정에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setForeColor 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setForeColor = function(foreColor){
	// functionname : [Control.setForeColor]

	this.foreColor = foreColor;
	this.tagObject.style.color = foreColor;
	
	// 하위 테그들의 글자색 조정
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.style.color = foreColor;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].style.color = foreColor;
			
		}
	}
};

var _layerPopupBackgroundDiv = null;

/**
*     @description  컨트롤의 보이기 설정값을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        visible     {Boolean}       <br>true : 컨트롤을 화면상에 보입니다.<br>fasle : 컨트롤을 화면상에 보이지 않습니다.
*     @return       보이기 설정값 지정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //보이기 설정값을 false로 지정하여 컨트롤을 숨깁니다.
*      if( false == wControls.setVisible(false) ){
*           //컨트롤 숨기기에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setVisible 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setVisible = function(visible){
	// functionname : [Control.setVisible]

	if (this.visible == visible) return;
	this.visible = visible;

	var obj =  this.tagObject;
	var comp = obj.currentStyle ? obj.currentStyle : getComputedStyle(obj, null);
	
    if (("" + comp.position).toLowerCase() == "absolute" || ("" + comp.position).toLowerCase() == "relative"){
    	if (visible){
    		if (obj.style.left == "-10000px"){
    			obj.style.left = obj.getAttribute("xposition");
    		}
    	} else {
    		obj.setAttribute("xposition", obj.style.left);
    		obj.style.left = "-10000px";
    	}
    	this.tagObject.style.display = (visible ? "block" : "none");
    } else {
    	this.tagObject.style.display = (visible ? "inline" : "none");
    }
    
    var isFrameBoxType = false;
    try {isFrameBoxType = this instanceof FrameBox;} catch(e){}
	if (isFrameBoxType){
	    if (visible){
	    	if (this.controlName == "layerPopup"){
	    		_layerPopupBackgroundDiv = document.getElementsByName("_layerPopupBackgroundDiv")[0];
	    		if( _layerPopupBackgroundDiv ){
	    			_layerPopupBackgroundDiv.style.display = "block";	    			
	    			_layerPopupBackgroundDiv.style.zIndex = 9998;
	    			controls["layerPopup"].tagObject.zIndex = 9999;
	    		}
	    	}
	    	
	    	var contentObj = this.tagObject.querySelector(".content > div");
	    	if( contentObj != null && typeof contentObj != "undefined" ){
	    		var childList = contentObj.children;
	    		var childItem = null;
	    		var childCount = 0;
	    		var className = null;
	    		var control = null;
	    		var i = 0;
	    		
	    		for(i = 0, childCount = childList.length; i < childCount; i++, childItem = null, className = "", control = null){
	    			childItem = childList[i];
	    			className = ("" + childItem.getAttribute("class"));
	    			control = controls[("" + childItem.getAttribute("ctlname"))];
	    			
	    			if( className.indexOf("DataSheet") >= 0 ){
	    				if( control != null && typeof control != "undefined" ){
	    					if( typeof control.setPosition == "function" ) control.setPosition();
	    					if( typeof control.resize == "function" ) control.resize();
	    				}
	    			}
	    		}
	    		
	    		childList = null; contentObj = null;
	    	}
	    	
		    if (this.hasOpenEvent) {
		    	this.fncOpenEvent();
		    }
	    } else {
	    	if (this.controlName == "layerPopup"){
	    		_layerPopupBackgroundDiv = document.getElementsByName("_layerPopupBackgroundDiv")[0];
	    		if( _layerPopupBackgroundDiv ){
	    			_layerPopupBackgroundDiv.style.display = "none";	    			
	    			_layerPopupBackgroundDiv.style.zIndex = -10;
	    			controls["layerPopup"].tagObject.zIndex = "auto";
	    		}
	    	}
    	    if (this.hasCloseEvent) {
    	    	this.fncCloseEvent();
    	    }
	    }
	}
};

/**
*     @description  컨트롤의 전경색을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        foreColor     {String}      <br>전경색으로 지정할 컬러코드 값입니다.<br>컬러코드는 &로 시작하며 &를 포함하여 총 8자리입니다.
*     @return       전경색 지정에 성공하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환하게 됩니다.
*     @example      var wControls = controls["base_1"];
*      //전경색 코드를 &HBCB0A8 로 지정합니다.
*      if( false == wControls.setForeColor("&HBCB0A8") ){
*           //전경색 지정에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setForeColor 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setEnabled = function(enabled){
	// functionname : [Control.setEnabled]

	this.enabled = enabled;
	// 하위 테그들의 글자색 조정
    this.tagObject.disabled = !enabled;
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.disabled = !enabled;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].disabled = !enabled;
			
		}
	}
	
	/**
	 * 2016-07-13 김재익
     * 콘트롤동작 투명도 조정 -> 배경색 조정
     */
	if (!enabled) {
		//this.tagObject.style.opacity = "0.6";
		//this.tagObject.style.filter = "Alpha(Opacity=60)";
		//this.oldbgcolor =this.tagObject.style.backgroundColor;
		//this.oldcolor= this.tagObject.style.color ;  		
//		this.tagObject.style.backgroundColor="#d2d0d0";
		this.tagObject.classList.remove(this.image);
		this.tagObject.classList.add(this.image+"-disabled");
		//this.tagObject.style.color="#f1f1f1";	
    } else {
    	//this.tagObject.style.opacity = "";
    	//this.tagObject.style.filter = "";
    	this.tagObject.style.backgroundColor =this.oldbgcolor;
    	this.tagObject.classList.remove(this.image+"-disabled");
    	this.tagObject.classList.add(this.image);
    	//this.tagObject.style.color = this.oldcolor;    	
    	
    }
};

ControlBase.prototype.setReadOnly = function(readOnly){
	// functionname : [Control.setReadOnly]
	
	this.readOnly = readOnly;
	
	if( typeof this.readOnly != "undefined" )
		this.tagObject.readOnly = readOnly;
	else{
		if( readOnly )
			this.tagObject.setAttribute("readOnly", "");
		else
			this.tagObject.removeAttribute("readOnly");
	}
};

/* 좌우로 정렬 
 * default :left, (left,right, center)
 */   
/**
*     @description  컨트롤의 데이터를 정렬합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        alignment       {Boolean}       <br>"left" : 왼쪽정렬 합니다.<br>"right" : 오른쪽정렬 합니다.<br>"center" : 가운데정렬 합니다.
*     @return       데이터 정렬을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터를 가운데정렬하기 위하여 "center"를 설정하였습니다.
*      if( false == wControls.setAlignment("center") ){
*           //데이터 정렬을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setAlignment 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setAlignment = function(alignment){
		// functionname : [Control.setAlignment]

	this.alignment = alignment;
    this.tagObject.style.textAlign = alignment;
};

/* 굵은 글씨체 
* default :normal, (bold,normal)
*/   
/**
*     @description  컨트롤 데이터의 글꼴 굵기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontBold       {Boolean}        <br>true : 글꼴의 굵기를 굵게합니다.<br>false : 글꼴의 굵기를 굵게하지 않습니다.
*     @return       글꼴 굵기 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터 글꼴을 굵게하기 위하여 true를 설정하였습니다.
*      if( false == wControls.setFontBold(true) ){
*           //데이터의 글꼴 굵기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontBold 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontBold = function(fontBold){
	// functionname : [Control.setFontBold]

	this.fontBold = fontBold;
    wValue = (fontBold ? "bold" : "normal");
    this.tagObject.style.fontWeight = wValue;
};

/* 기운 글씨체 
* default :normal, (italic,normal)
*/   
/**
*     @description  컨트롤 데이터의 글꼴 기울기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontItalic      {Boolean}       <br>true : 글꼴을 기울게합니다.<br>false : 글꼴의 기울게하지 않습니다.
*     @return       글꼴 기울기 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터 글꼴을 기울게하기 위하여 true를 설정하였습니다.
*      if( false == wControls.setFontItalic(true) ){
*           //데이터의 글꼴 기울기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontItalic 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/  
ControlBase.prototype.setFontItalic = function(fontItalic){
	// functionname : [Control.setFontItalic]

	this.fontItalic = fontItalic;
    wValue = (fontItalic ? "italic" : "normal");
    this.tagObject.style.fontStyle = wValue;
};

/* 글씨체 */   
/**
*     @description  컨트롤 데이터의 글씨체를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontName        {String}        <br>글씨체 명을 입력합니다.
*     @return       글씨체 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터의 글씨체를 "돋움체"로 설정하였습니다.
*      if( false == wControls.setFontName("돋움체") ){
*           //데이터의 글씨체 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontName 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/  
ControlBase.prototype.setFontName = function(fontName){
	// functionname : [Control.setFontName]

	this.fontName = fontName;
    this.tagObject.style.fontFamily = fontName;
};

/* 글씨크기 */   
/**
*     @description  컨트롤 데이터의 글씨 크기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontSize        {Number}        <br>글씨체의 크기를 입력합니다.
*     @return       글씨 크기 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터의 글씨 크기를 15로 설정하였습니다.
*      if( false == wControls.setFontSize(15) ){
*           //데이터의 글씨체 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontSize 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontSize = function(fontSize){
	// functionname : [Control.setFontSize]

	this.fontSize = fontSize;
    this.tagObject.style.fontSize = fontSize + "pt";
};

/* 취소 글씨체 */   
/**
*     @description  컨트롤 데이터에 취소선을 그을지 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontStrikethru      {Boolean}       <br>true : 데이터에 취소선을 긋습니다.<br>false : 데이터에 취소선을 긋지 않습니다.
*     @return       취소선 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터에 취소선을 긋습니다.
*      if( false == wControls.setFontStrikethru(true) ){
*           //데이터에 취소선 긋기를 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontStrikethru 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontStrikethru = function(fontStrikethru){
	// functionname : [Control.setFontStrikethru]

	this.fontStrikethru = fontStrikethru;
	if (fontStrikethru){
        this.tagObject.style.textDecoration = "line-through";
	} else {
        this.tagObject.style.textDecoration = "none";
	}
};

/* 밑줄 글씨체 */   
/**
*     @description  컨트롤 데이터에 밑줄을 그을지 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontUnderline       {Boolean}       <br>true : 데이터에 밑줄을 긋습니다.<br>false : 데이터에 밑줄을 긋지 않습니다.
*     @return       밑줄 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터에 밑줄을 긋습니다.
*      if( false == wControls.setFontUnderline(true) ){
*           //데이터에 밑줄 긋기를 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontUnderline 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontUnderline = function(fontUnderline){
	// functionname : [Control.setFontUnderline]

	this.fontUnderline = fontUnderline;
	if (fontUnderline){
        this.tagObject.style.textDecoration = "underline";
	} else {
        this.tagObject.style.textDecoration = "none";
	}
};

/* 글자 색 */   
ControlBase.prototype.setFontColor = function(fontColor){
	// functionname : [Control.setFontColor]

	this.fontColor = fontColor ? fontColor : "#000000";
	if (fontColor){
        this.tagObject.style.color = fontColor;
	} else {
        this.tagObject.style.color = "#000000";
	}
};

/**
*     @description  컨트롤에 사용자 도움말(말풍선)을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        toolTipText         {String}        컨트롤에 설정할 도움말입니다.
*     @return       도움말 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //도움말 "도움말 입니다."을 추가합니다.
*      if( false == wControls.setToolTipText("도움말 입니다.") ){
*           //도움말 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontUnderline 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
/* 도움말 */   
ControlBase.prototype.setToolTipText = function(toolTipText){
	// functionname : [Control.setToolTipText]

	this.toolTipText = toolTipText;
	
	// 하위 테그들의 도움말 조정
	this.tagObject.title = toolTipText;
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.title = toolTipText;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].title = toolTipText;
		}
	}
};

/* 표시문자열 */   
/**
*     @description  컨트롤의 표시문자열을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        caption         {String}        컨트롤의 표시문자열입니다.
*     @return       표시문자열 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //컨트롤의 표시문자열을 "목록보기"로 변경합니다.
*      if( false == wControls.setCaption("목록보기") ){
*           //표시문자열 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setCaption 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setCaption = function(caption){
	// functionname : [Control.setCaption]

	this.caption = caption;
    this.tagObject.innerText = caption;
};

/**
*     @description  컨트롤에 넣을 주석을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        tag         {String}        컨트롤의 주석입니다.
*     @return       주석 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //주석을 "목록보기로 변경합니다.
*      if( false == wControls.setTag("목록을 보는 컨트롤") ){
*           //주석 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setTag 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setTag= function(tag){
	// functionname : [Control.setTag]

	this.tag = tag;
	return;
};

/**
*     @description  체크 조건에 의해 컨트롤의 데이터를 검사합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @return       체크 조건에 의한 검사 결과가 맞다면 true를 반환합니다.<br>검사 결과가 맞지 않는다면 false를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //컨트롤의 데이터를 검사합니다.
*      if( false == wControls.checkError() ){
*           //컨트롤의 데이터가 체크조건에 맞지 않습니다. 에러처리 코드를 입력해주세요.
*           //검사결과가 맞지 않거나 에러 발생시 checkError 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.checkError = function(){
	// functionname : [Control.checkError]
	
	var err = 0;
	var wText = this.value;
	
	if( ("" + wText).length == 0 ) return true;
	
	try{
		//데이타의 속성에 비추어 오류를 점검한다
		switch( this.checkType ){
			case this.CHECKTYPE.YYYY: 
				if( hasHangul(wText) )		throw 8;
				if( !CheckYear(wText) )		throw 3;
				break;
			case this.CHECKTYPE.YM: 
				if( hasHangul(wText) )		throw 8;
				if( !CheckMonth(wText) )	throw 2;
				break;
			case this.CHECKTYPE.YMD: 
				if( hasHangul(wText) )		throw 8;
				if( !CheckDate(wText) )		throw 1;
				break;
			case this.CHECKTYPE.RESINUM: 
				if( hasHangul(wText) ) 			throw 8;
				if( !IsResidentNumber(wText) )	throw 4;
				break;
			case this.CHECKTYPE.TAXNUM: 
				if( hasHangul(wText) ) 		throw 8; 
				if( !IsTaxNumber(wText) ) 	throw 5; 
				break;
			case this.CHECKTYPE.POSTNUM: 
				if( hasHangul(wText) ) 		throw 8;
				if( wText.length < 5 
					|| wText.length > 6 )	throw 6;  
				break;
			case this.CHECKTYPE.IMEMODE:
				break;
			case this.CHECKTYPE.ENGLNUM:
			case this.CHECKTYPE.PASSWORD:
				if( hasHangul(wText) )		throw 8; 
				break;
			case this.CHECKTYPE.AMOUNT:
			case this.CHECKTYPE.NUMBER:
				if( hasHangul(wText) )		throw 8; 
				if( !("" + wText).isNum() )	throw 9; 
				break;
		}
	    
		// 이 자리에 산식체크로직이 들어간다
		// 사용자 코딩 추가영역을 호출한다

		if (this.hasValidateEvent){
			var result = this.fncValidateEvent();
			if( result === false )
				return false;
		}

		return true;
    }
	catch(err){
		switch(err){
			case 1:	
				alert(getText("message_controlbase_001", "날짜입력이 틀렸습니다. 날짜를 지우거나 고치십시요"));
				break;
			case 2:
				alert(getText("message_controlbase_002", "년월입력이 틀렸습니다. 년월를 지우거나 고치십시요"));
				break;
			case 3:
				alert(getText("message_controlbase_003", "년도입력이 틀렸습니다. 년도를 지우거나 고치십시요"));
				break;
			case 4:
				alert(getText("message_controlbase_004", "주민등록번호가 맞지 않습니다. 주민등록번호를 지우거나 고치십시요"));
				break;
			case 5:
				alert(getText("message_controlbase_005", "사업자등록번호가 맞지 않습니다. 사업자등록번호를 지우거나 고치십시요"));
				break;
			case 6:
				alert(getText("message_controlbase_006", "우편번호입력이 틀렸습니다. 우편번호를 지우거나 고치십시요"));
				break;
			case 8:
				alert(getText("message_controlbase_007", "한글이 입력되었습니다."));
				break;
			case 9:
				alert(getText("message_controlbase_008", "금액형태에 맞지 않습니다."));
				break;
			default:
				alert(getText("message_controlbase_009", "위치: ControlBase.checkError\n에러번호:{0}\n에러정보:\n{1}", [err.number, err.description]));
		}
	}
	
	return false;
};
/**
*     @description	미결
*     @param	{number}	zIndex
*     @return	{String}
*     @example	미결
*/
ControlBase.prototype.setZIndex = function(zIndex){
	// functionname : [Control.setZIndex]
	
	var wReturn = false;
	var oldZIndex = this.zIndex;
	
	try{
		this.zIndex = zIndex;
		this.tagObject.style.zIndex = zIndex;
		wReturn = true;
	}
	catch(err){
		this.zIndex = oldZIndex;
	}
	
	return wReturn;
};

/**
*     @description	미결
*     @param	{object}	zOrder
*     @return	{string}
*     @example	미결
*/
ControlBase.prototype.setZOrder = function(zOrder){
	// functionname : [Control.setZOrder]
	
	return this.setZIndex(zOrder);
};

/**
 *     @description	미결
 *     @param	{string}	className
 *     @return	{void}
 *     @example	미결
 */
ControlBase.prototype.addClass = function(className){
	// functionname : [Control.addClass]
	
	//예외처리
	if( typeof className != "string" )	//클래스 명이 문자열이 아닌 경우 예외처리함
		return;
	
	var classStr = null;
	var classItems = null;
	
	//클래스 속성 구함
	classStr = this.tagObject.getAttribute("class");
	
	//기존 클래스 속성이 없는 경우
	if( classStr == null ){
		classStr = className;
	}
	//기존 클래스 속성이 있는 경우 
	else{
		//클래스 속성 양 끝 공백 제거
		classStr = ("" + classStr).replace(/(^\s*)|(\s*$)/g, "");
		//공백 구분 문자열로 배열 생성
		classItems = classStr.split(" ");
		
		//클래스 속성 문자열에 클래스명이 없다면 추가
		if( classItems.indexOf(className) < 0 )
			classItems.push(className);
		
		//메모리 해제
		classStr = null;
		
		//클래스 문자열 생성
		classStr = classItems.join(" ").replace(/\s+/g, " ");
	}
	
	//클래스 명 사이의 공백 중 2개 이상 띄어진 공백이 있는 경우 1개 공백으로 바꿔 클래스 속성 설정
	this.tagObject.setAttribute("class", classStr);
	
	//메모리 해제
	classItems.clear(); classItems = null;
	classStr = null;
};

/**
 *     @description	미결
 *     @param	{string}	className
 *     @return	{void}
 *     @example	미결
 */
ControlBase.prototype.removeClass = function(className){
	// functionname : [Control.addClass]
	
	//예외처리
	if( typeof className != "string" )	//클래스 명이 문자열이 아닌 경우 예외처리함
		return;

	//클래스 속성 구함
	var classStr = this.tagObject.getAttribute("class");
	var classItems = null;
	var classIndex = 0;
	
	//기존 클래스 속성이 있는 경우에만 클래스를 제거할 수 있음
	if( classStr != null ){
		//클래스 속성 양 끝 공백 제거 후, 클래스 명 사이 공백 중 2개 이상 골백을 1개 공백으로 변환
		classStr = ("" + classStr).replace(/(^\s*)|(\s*$)/g, "").replace(/\s+/g, " ");
		//클래스 구분자인 1개 공백을 기준으로 배열로 변환
		classItems = classStr.split(" ");
		//클래스명 체크
		classIndex = classItems.indexOf(className);
		
		//클래스가 있는 경우
		if( classIndex >= 0 ){
			//클래스 제거
			classItems[classIndex] = "";
			//메모리 해제
			classStr = null;
			
			//클래스 배열을 다시 구분자인 1개 공백으로 합침
			classStr = classItems.join(" ").replace(/\s+/g, " ").replace(/(^\s*)|(\s*$)/g, "");
			
			//클래스 설정
			this.tagObject.setAttribute("class", classStr);
		}
		
		//메모리 해제
		classItems = null;
		classStr = null;
	}
};

// 드래그 드롭 관련 부분
ControlBase.prototype.setDraggable = function(draggable){
	// functionname : [Control.setDraggable]
	
	this.tagObject.setAttribute("draggable", "true");
	return this.draggable = draggable;
};
//드래그 드롭 관련 부분
ControlBase.prototype.setDroppable = function(droppable){
	// functionname : [Control.setDroppable]
	return this.droppable = droppable;
};
//드래그 드롭 관련 부분
ControlBase.prototype.setOuterDroppable = function(outerDroppable){
	// functionname : [Control.setOuterDroppable]
	return this.outerDroppable = outerDroppable;
};

// 드래그쪽 이벤트 호출
function control_DragStart(e){
	// functionname : [control_DragStart]

	e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    if (!control.draggable) return false;
    
    e.dataTransfer.setData("text", control.controlName);
    
    if (control.hasChangeEvent){
    	control.fncDragStartEvent(e);
    	var result = control.fncDragStartEvent(e);
    	if (typeof result != "undefined" && result === false) return false;
    }
    
	return true;
}

function control_Drag(e){
	// functionname : [control_Drag]
	
    e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    if (!control.draggable) return false;
    
    if (control.hasDragMoveEvent){
    	control.fncDragMoveEvent(e);
    }
    
	return true;
}

function control_DragEnd(e){
	// functionname : [control_DragEnd]
	
	     e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    if (!control.draggable) return false;
    
    if (control.hasDragEndEvent){
    	control.fncDragEndEvent(e);
    }
    
	return true;
}

//드롭쪽 이벤트 호출
function control_DragEnter(e){
	// functionname : [control_DragEnter]
	
    e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
        
    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        
        for (var i=0; i < fileLength; i++){
        	arrFileTypes[i] = e.dataTransfer.files[i].type;
        }
        
        if (control.hasDragEnterEvent){
        	control.fncDragEnterEvent(e, "", arrFiles, arrFileTypes);
        }    
    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        
        if (control.hasDragEnterEvent){
        	control.fncDragEnterEvent(e, srcControlName, [], []);
        }    
    }
	
	return true;
}
function control_DragOver(e){
	// functionname : [control_DragOver]
	
    e = window.event || e;
    e.preventDefault();
    
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        
        for (var i=0; i < fileLength; i++){
        	arrFileTypes[i] = e.dataTransfer.files[i].type;
        }
        
        if (control.hasDragOverEvent){
        	control.fncDragOverEvent(e, "", arrFiles, arrFileTypes);
        }    
    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        
        if (control.hasDragOverEvent){
        	control.fncDragOverEvent(e, srcControlName, [], []);
        }    
    }
	
	return true;
}
function control_DragLeave(e){
	// functionname : [control_DragLeave]
	
    e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);

    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        
        for (var i=0; i < fileLength; i++){
        	arrFileTypes[i] = e.dataTransfer.files[i].type;
        }
        
        if (control.hasDragLeaveEvent){
        	control.fncDragLeaveEvent(e, "", arrFiles, arrFileTypes);
        }    
    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        
        if (control.hasDragLeaveEvent){
        	control.fncDragLeaveEvent(e, srcControlName, [], []);
        }    
    }

	return true;
}

function control_Drop(e){
	// functionname : [control_Drop]
	
    e = window.event || e;
    e.preventDefault();
    
    
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);

    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        var arrIsImage = [];
        var arrIsText = [];
        var arrIsSheet = [];
          
        
        for (var i=0; i < fileLength; i++){
        	var fileType = e.dataTransfer.files[i].type;
        	arrFileTypes[i] = fileType;
        	arrIsImage[i] = fileType.match(/image.*/);
        	arrIsText[i]  = fileType.match(/text.*/);
        	arrIsSheet[i] = fileType.match(/application.*.ms-excel/) || 
        	                fileType.match(/application.*.sheet/);
        }
        
        if (control.hasDropEndEvent){
        	control.fncDragLeaveEvent(e, "", arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet);
        }
        
        // 기본 드롭동작 수행
        _defaultDropTask_outer(arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet);

    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        var targetControlName = control.controlName;
        var optionItem = null;
        var result = false;
        
        if (control.hasDragLeaveEvent){
        	var result = control.fncDropEndEvent(e, srcControlName, [], [], [], [], []);
        	if (typeof result != "undefined" && result === false) return false;
        }  
        
        // 기본 드롭동작 수행
        _defaultDropTask_inner(e, srcControlName, targetControlName, optionItem);
        
    }
	return true;
}

// 드롭시 정해진 동작 
function _defaultDropTask_inner(e, srcControlName, targetControlName, optionItem){
	
	var srcControl    = controls[srcControlName];
	var targetControl = controls[targetControlName];
	
	var srcElement    = srcControl.tagObject;
	var targetElement = targetControl.tagObject;
		
	var data = typeof Label != "undefined" && srcControl instanceof Label ? { text: srcControl.value }:
		       typeof TextBox != "undefined" && srcControl instanceof TextBox && !srcControl.multiLine  ? { text: srcElement.value.substring(srcElement.selectionStart, srcElement.selectionEnd)} : 
			   typeof TextBox != "undefined" && srcControl instanceof TextBox && srcControl.multiLine  ? { text: srcElement.value} : 
			   typeof ComboBox != "undefined" && srcControl instanceof ComboBox ? {value: srcControl.value, text: srcControl.text} : 
			   typeof ListBox != "undefined" && srcControl instanceof ListBox && srcControl.listType != LISTBOX_TYPE_DATASELECT ? { value: srcControl.value, text: srcControl.text} : 
			   typeof ListBox != "undefined" && srcControl instanceof ListBox && srcControl.listType != LISTBOX_TYPE_DATASELECT ? { value: optionItem.value, text: optionItem.text } : 
			   typeof CheckBox != "undefined" && srcControl instanceof CheckBox ? {value: srcControl.value, text: srcControl.caption} : 
			   typeof OptionButton != "undefined" && srcControl instanceof OptionButton ? {value: srcControl.value, text: srcControl.caption} : 
			   typeof PictureBox != "undefined" && srcControl instanceof PictureBox ? {src: srcElement.getElementsByTagName("IMG")[0].src} : 
			   typeof ListSheet != "undefined" && srcControl instanceof ListSheet ? {src: srcElement.getValue()} : 
			   typeof TextBox2 != "DataSheet" && srcControl instanceof DataSheet ? {src: srcElement.getValue()} : 
			   typeof TreeView != "undefined" && srcControl instanceof TreeView ? {value: srcControl.selectedItem.value, text: srcControl.selectedItem.text} : 
			   typeof Linker != "undefined" && srcControl instanceof Linker ? {src: srcControl.url} : 
			   {};
			   
	if (typeof Label != "undefined" && targetControl instanceof Label){
		if (typeof data.text != "undefined"){
			targetControl.setCaption(data.text);
		} else if (typeof data.value != "undefined"){
			targetControl.setCaption(data.value);
		} else if (typeof data.src != "undefined"){
			targetControl.setCaption(data.src);
		} 
		
	} else if (typeof TextBox != "undefined" && targetControl instanceof TextBox){
		if (typeof data.text != "undefined"){
			targetControl.setValue(data.text);
		} else if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		} else if (typeof data.src != "undefined"){
			targetControl.setValue(data.src);
		} 
		
	} else if (typeof ComboBox != "undefined" && targetControl instanceof ComboBox){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		} else if (typeof data.text != "undefined"){
			targetControl.setText(data.text);
		} 
		
	} else if (typeof ListBox != "undefined" && targetControl instanceof ListBox  && targetControl.listType != LISTBOX_TYPE_DATASELECT){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		} else if (typeof data.text != "undefined"){
			targetControl.setText(data.text);
		} 
		
	} else if (typeof ListBox != "undefined" && targetControl instanceof ListBox  && targetControl.listType == LISTBOX_TYPE_DATASELECT){
		if (typeof data.text != "undefined" && typeof data.value != "undefined"){
			targetControl.addItem(data.text, data.value);
		} else if (typeof data.value != "undefined"){
			targetControl.addItem(data.value, data.value);
		} else if (typeof data.text != "undefined"){
			targetControl.addItem(data.text, data.text);
		} 
		
	} else if (typeof CheckBox != "undefined" && targetControl instanceof CheckBox){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof OptionButton != "undefined" && targetControl instanceof OptionButton){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof PictureBox != "undefined" && targetControl instanceof PictureBox){
		if (typeof data.url != "undefined"){
			targetControl.setValue(data.url);
		}
		
	} else if (typeof ListSheet != "undefined" && targetControl instanceof ListSheet){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof DataSheet != "undefined" && targetControl instanceof DataSheet){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof DataSheet != "Linker" && targetControl instanceof Linker){
		if (typeof data.url != "undefined"){
			targetControl.setValue(data.url);
		}
        if (typeof data.text != "undefined"){
			targetControl.setCaption(data.text);
		} 		
		
	} else if (typeof DataSheet != "IFrame" && targetControl instanceof Linker){
		if (typeof data.url != "undefined"){
			targetControl.setValue(data.url);
		}
	}
	
	return;
}

function _defaultDropTask_outer(arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet){
	
	// 소스와 타겟별 기본 동작을 입힌다.
	/*
       "text/plain", 
       "application/octet-stream", 
       "application/microdata+json", 
       "text/uri-list",
       "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
       "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
       "application/vnd.ms-powerpoint"
       "audio/x-ms-wma"
	 * */
	return;
}
var turnOffYearSpan = false;     // true = Only show This Year and Next, false = show +/- 5 years
var weekStartsOnSunday = false;  // true = Start the week on Sunday, false = start the week on Monday

var calendar_display_time = true;


var todayStringFormat = getText("message_calendar_001", "오늘 날짜 : [year]년[monthString]월[day]일  [todayString]");
var pathToImages = getContextPath() + "/winnersoft/images/calendar/";	

var speedOfSelectBoxSliding = 200;	
var intervalSelectBox_minutes = 5;	

var calendar_offsetTop = 0;		
var calendar_offsetLeft = 0;	
var calendarDiv = false;
var calendarMMDiv = false;
var MSIE = false;
var Opera = false;
var WTagId='';
var CType = 1;
if(navigator.userAgent.indexOf('MSIE')>=0 && navigator.userAgent.indexOf('Opera')<0)MSIE=true;
if(navigator.userAgent.indexOf('Opera')>=0)Opera=true;

		var monthArray = [
		                  getText("message_calendar_002", '1월'),
		                  getText("message_calendar_003", '2월'),
		                  getText("message_calendar_004", '3월'),
		                  getText("message_calendar_005", '4월'),
		                  getText("message_calendar_006", '5월'),
		                  getText("message_calendar_007", '6월'),
		                  getText("message_calendar_008", '7월'),
		                  getText("message_calendar_009", '8월'),
		                  getText("message_calendar_010", '9월'),
		                  getText("message_calendar_011", '10월'),
		                  getText("message_calendar_012", '11월'),
		                  getText("message_calendar_013", '12월')];
		var monthArrayShort = ['1','2','3','4','5','6','7','8','9','10','11','12'];
		var dayArray = [
		                getText("message_calendar_014", '일'),
		                getText("message_calendar_015", '월'),
		                getText("message_calendar_016", '화'),
		                getText("message_calendar_017", '수'),
		                getText("message_calendar_018", '목'),
		                getText("message_calendar_019", '금'),
		                getText("message_calendar_020", '토')];
		var weekString = getText("message_calendar_021", '주');
		var todayString = '';

if (weekStartsOnSunday) {
   var tempDayName = dayArray[6];
   for(var theIx = 6; theIx > 0; theIx--) {
      dayArray[theIx] = dayArray[theIx-1];
   }
   dayArray[0] = tempDayName;
}



var daysInMonthArray = [31,28,31,30,31,30,31,31,30,31,30,31];
var currentMonth;
var currentYear;
var currentHour;
var currentMinute;
var calendarContentDiv;
var returnDateTo;
var returnFormat;
var activeSelectBoxMonth;
var activeSelectBoxYear;
var activeSelectBoxHour;
var activeSelectBoxMinute;

var iframeObj = false;
var iframeObj2 =false;

/**
 * @description	미결
 * @param		{String}	where2fixit
 * @returns		{Undefined}
 * @example		미결
 */
function EIS_FIX_EI1(where2fixit)
{

		if(!iframeObj2)return;
		iframeObj2.style.display = 'block';
		iframeObj2.style.height =document.getElementById(where2fixit).offsetHeight+1;
		iframeObj2.style.width=document.getElementById(where2fixit).offsetWidth;
		iframeObj2.style.left=getleftPos(document.getElementById(where2fixit))+1-calendar_offsetLeft;
		iframeObj2.style.top=getTopPos(document.getElementById(where2fixit))-document.getElementById(where2fixit).offsetHeight-calendar_offsetTop;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function EIS_Hide_Frame()
{		
	if(iframeObj2)iframeObj2.style.display = 'none';}
var returnDateToYear;
var returnDateToMonth;
var returnDateToDay;
var returnDateToHour;
var returnDateToMinute;

var inputYear;
var inputMonth;
var inputDay;
var inputHour;
var inputMinute;
var calendarDisplayTime = false;

var selectBoxHighlightColor = '#D60808'; 
var selectBoxRolloverBgColor = '#ffffff'; 

var selectBoxMovementInProgress = false;
var activeSelectBox = false;

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
function cancelCalendarEvent()
{
	return false;
}
/**
 * @description	미결
 * @param		{Number}	inputYear
 * @returns		{Undefined}
 * @example		미결
 */
function isLeapYear(inputYear)
{
	if(inputYear%400==0||(inputYear%4==0&&inputYear%100!=0)) return true;
	return false;

}
var activeSelectBoxMonth = false;
var activeSelectBoxDirection = false;

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightMonthYear()
{
	if(activeSelectBoxMonth)activeSelectBoxMonth.className='';
	activeSelectBox = this;


	if(this.className=='monthYearActive'){
		this.className='';
	}else{
		this.className = 'monthYearActive';
		activeSelectBoxMonth = this;
	}

	if(this.innerHTML.indexOf('-')>=0 || this.innerHTML.indexOf('+')>=0){
		if(this.className=='monthYearActive')
			selectBoxMovementInProgress = true;
		else
			selectBoxMovementInProgress = false;
		if(this.innerHTML.indexOf('-')>=0)activeSelectBoxDirection = -1; else activeSelectBoxDirection = 1;

	}else selectBoxMovementInProgress = false;

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showMonthDropDown()
{
	if(document.getElementById('monthDropDown').style.display=='block'){
		document.getElementById('monthDropDown').style.display='none';
				EIS_Hide_Frame();
	}else{
		document.getElementById('monthDropDown').style.display='block';
		document.getElementById('yearDropDown').style.display='none';
		document.getElementById('hourDropDown').style.display='none';
		document.getElementById('minuteDropDown').style.display='none';
			if (MSIE)
		{ EIS_FIX_EI1('monthDropDown')}

	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showYearDropDown()
{    
	if(document.getElementById('yearDropDown').style.display=='block'){
		document.getElementById('yearDropDown').style.display='none';
				EIS_Hide_Frame();
	}else{
		document.getElementById('yearDropDown').style.display='block';
		document.getElementById('monthDropDown').style.display='none';
		document.getElementById('hourDropDown').style.display='none';
		document.getElementById('minuteDropDown').style.display='none';
			if (MSIE)
		{ EIS_FIX_EI1('yearDropDown')}


	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showHourDropDown()
{
	if(document.getElementById('hourDropDown').style.display=='block'){
		document.getElementById('hourDropDown').style.display='none';

				EIS_Hide_Frame();
	}else{
		document.getElementById('hourDropDown').style.display='block';
		document.getElementById('monthDropDown').style.display='none';
		document.getElementById('yearDropDown').style.display='none';
		document.getElementById('minuteDropDown').style.display='none';
				if (MSIE)
		{ EIS_FIX_EI1('hourDropDown')}

	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showMinuteDropDown()
{
	if(document.getElementById('minuteDropDown').style.display=='block'){
		document.getElementById('minuteDropDown').style.display='none';

				EIS_Hide_Frame();
	}else{
		document.getElementById('minuteDropDown').style.display='block';
		document.getElementById('monthDropDown').style.display='none';
		document.getElementById('yearDropDown').style.display='none';
		document.getElementById('hourDropDown').style.display='none';
				if (MSIE)
		{ EIS_FIX_EI1('minuteDropDown')}

	}

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function selectMonth()
{
	document.getElementById('calendar_month_txt').innerHTML = this.innerHTML
	currentMonth = this.id.replace(/[^\d]/g,'');

	document.getElementById('monthDropDown').style.display='none';
	//// fix for EI frame problem on time dropdowns 09/30/2006
				EIS_Hide_Frame();
	for(var no=0;no<monthArray.length;no++){
		document.getElementById('monthDiv_'+no).style.color='';
	}
	this.style.color = selectBoxHighlightColor;
	activeSelectBoxMonth = this;
	writeCalendarContent();

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function selectMinute()
{
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function selectYear()
{
	document.getElementById('calendar_year_txt').innerHTML = this.innerHTML
	currentYear = this.innerHTML.replace(/[^\d]/g,'');
	document.getElementById('yearDropDown').style.display='none';
				EIS_Hide_Frame();
	if(activeSelectBoxYear){
		activeSelectBoxYear.style.color='';
	}
	activeSelectBoxYear=this;
	this.style.color = selectBoxHighlightColor;
	writeCalendarContent();

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918
//좌우측버튼 클릭시 월변경처리
function switchMonth()
{

	if(this.src.indexOf('left')>=0){
		if(CType == 1){
			currentMonth=currentMonth-1;;
			if(currentMonth<0){
				currentMonth=11;
				currentYear=currentYear-1;
			}
		}else if(CType == 2){
			currentYear=currentYear-1;
		}
	}else{
		if(CType == 1){		
			currentMonth=currentMonth+1;;
			if(currentMonth>11){
				currentMonth=0;
				currentYear=currentYear/1+1;
			}
		}else if(CType == 2){
			currentYear=currentYear/1+1;
		}
	}

	//달력만들기 실행
	writeCalendarContent();
}

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
function createMonthDiv(){
	var div = document.createElement('DIV');
	div.className='monthYearPicker';
	div.id = 'monthPicker';
	for(var no=0;no<monthArray.length;no++){
		var subDiv = document.createElement('DIV');
		subDiv.innerHTML = monthArray[no];
		subDiv.onmouseover = highlightMonthYear;
		subDiv.onmouseout = highlightMonthYear;
		subDiv.onclick = selectMonth;
		subDiv.id = 'monthDiv_' + no;
		subDiv.style.width = '37px';
    //20110404 추가
    //  	subDiv.style.cssText ='float:left;	margin-right:1px;';	
    subDiv.style.cssText='float:none;	clear:both;		padding:1px;	margin:1px;		cursor:pointer;';
		subDiv.onselectstart = cancelCalendarEvent;
		div.appendChild(subDiv);
		if(currentMonth && currentMonth==no){
			subDiv.style.color = selectBoxHighlightColor;
			activeSelectBoxMonth = subDiv;
		}
	}
	return div;
}

/**
 * @description	미결
 * @name		calendar#changeSelectBoxYear
 * @event		
 * @param		{Object}	inputObj
 * @returns		{Undefined}
 * @example		미결
 */
function changeSelectBoxYear(e,inputObj)
{
	if(!inputObj)inputObj =this;
	var yearItems = inputObj.parentNode.getElementsByTagName('DIV');
	if(inputObj.innerHTML.indexOf('-')>=0){
		var startYear = yearItems[1].innerHTML/1 -1;
		if(activeSelectBoxYear){
			activeSelectBoxYear.style.color='';
		}
	}else{
			var startYear = "";
		if (inputObj.name == "up") 
			startYear = yearItems[1].innerHTML/1 -1;
		else
			startYear = yearItems[1].innerHTML/1 +1;
			
		if(activeSelectBoxYear){
			activeSelectBoxYear.style.color='';

		}
	}

	for(var no=1;no<yearItems.length-1;no++){
		yearItems[no].innerHTML = startYear+no-1;
		yearItems[no].id = 'yearDiv' + (startYear/1+no/1-1);

	}
	if(activeSelectBoxYear){
		activeSelectBoxYear.style.color='';
		if(document.getElementById('yearDiv'+currentYear)){
			activeSelectBoxYear = document.getElementById('yearDiv'+currentYear);
			activeSelectBoxYear.style.color=selectBoxHighlightColor;
		}
	}
}

/**
 * @description	미결
 * @name		calendar#changeSelectBoxHour
 * @event		
 * @param		{Object}	inputObj
 * @returns		{Undefined}
 * @example		미결
 */
function changeSelectBoxHour(e,inputObj)
{
alert(" e =" + e +" inputObj : " + inputObj);
	if(!inputObj)inputObj = this;

	var hourItems = inputObj.parentNode.getElementsByTagName('DIV');
	if(inputObj.innerHTML.indexOf('-')>=0){
		var startHour = hourItems[1].innerHTML/1 -1;
		if(startHour<0)startHour=0;
		if(activeSelectBoxHour){
			activeSelectBoxHour.style.color='';
		}
	}else{
		var startHour = hourItems[1].innerHTML/1 +1;
		if(startHour>14)startHour = 14;
		if(activeSelectBoxHour){
			activeSelectBoxHour.style.color='';

		}
	}
	var prefix = '';
	for(var no=1;no<hourItems.length-1;no++){
		if((startHour/1 + no/1) < 11)prefix = '0'; else prefix = '';
		hourItems[no].innerHTML = prefix + (startHour+no-1);

		hourItems[no].id = 'hourDiv' + (startHour/1+no/1-1);

	}
	if(activeSelectBoxHour){
		activeSelectBoxHour.style.color='';
		if(document.getElementById('hourDiv'+currentHour)){
			activeSelectBoxHour = document.getElementById('hourDiv'+currentHour);
			activeSelectBoxHour.style.color=selectBoxHighlightColor;;
		}
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateYearDiv()
{
    var yearSpan = 5;
    if (turnOffYearSpan) {
       yearSpan = 0;
    }
	var div = document.getElementById('yearDropDown');
	var yearItems = div.getElementsByTagName('DIV');
	for(var no=1;no<yearItems.length-1;no++){
		yearItems[no].innerHTML = currentYear/1 -yearSpan + no;
		if(currentYear==(currentYear/1 -yearSpan + no)){
			yearItems[no].style.color = selectBoxHighlightColor;
			activeSelectBoxYear = yearItems[no];
		}else{
			yearItems[no].style.color = '';
		}
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateMonthDiv()
{
	for(no=0;no<12;no++){
		document.getElementById('monthDiv_' + no).style.color = '';
	}

	document.getElementById('monthDiv_' + currentMonth).style.color = '#000000';
	activeSelectBoxMonth = 	document.getElementById('monthDiv_' + currentMonth);
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateHourDiv()
{

	var div = document.getElementById('hourDropDown');
	var hourItems = div.getElementsByTagName('DIV');

	var addHours = 0;
	if((currentHour/1 -6 + 1)<0){
		addHours = 	(currentHour/1 -6 + 1)*-1;
	}
	for(var no=1;no<hourItems.length-1;no++){
		var prefix='';
		if((currentHour/1 -6 + no + addHours) < 10)prefix='0';
		hourItems[no].innerHTML = prefix +  (currentHour/1 -6 + no + addHours);
		if(currentHour==(currentHour/1 -6 + no)){
			hourItems[no].style.color = selectBoxHighlightColor;
			activeSelectBoxHour = hourItems[no];
		}else{
			hourItems[no].style.color = '';
		}
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateMinuteDiv()
{
	for(no=0;no<60;no+=intervalSelectBox_minutes){
		var prefix = '';
		if(no<10)prefix = '0';

		document.getElementById('minuteDiv_' + prefix + no).style.color = '';
	}
	if(document.getElementById('minuteDiv_' + currentMinute)){
		document.getElementById('minuteDiv_' + currentMinute).style.color = selectBoxHighlightColor;
		activeSelectBoxMinute = document.getElementById('minuteDiv_' + currentMinute);
	}
}


/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
function createYearDiv()
{

	if(!document.getElementById('yearDropDown')){
		var div = document.createElement('DIV');
		div.className='monthYearPicker';
		div.style.cursor='pointer';
	}else{
		var div = document.getElementById('yearDropDown');
		var subDivs = div.getElementsByTagName('DIV');
		for(var no=0;no<subDivs.length;no++){
			subDivs[no].parentNode.removeChild(subDivs[no]);
		}
	}


	var d = new Date();
	if(currentYear){
		d.setFullYear(currentYear);
	}

	var startYear = d.getFullYear()/1 - 5;

    var yearSpan = 10;
	if (! turnOffYearSpan) {
    	var subDiv = document.createElement('DIV');
    	subDiv.innerHTML = '&nbsp;&nbsp;▲ ';
    	subDiv.style.cursor='pointer';
    	subDiv.id = subDiv.name = "up";
    	subDiv.onclick = changeSelectBoxYear;
    	subDiv.onmouseover = highlightMonthYear;
    	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
    	subDiv.onselectstart = cancelCalendarEvent;
    	div.appendChild(subDiv);
    } else {
       startYear = d.getFullYear()/1 - 0;
       yearSpan = 2;
    }

	for(var no=startYear;no<(startYear+yearSpan);no++){
		var subDiv = document.createElement('DIV');
		subDiv.innerHTML = no;
		subDiv.onmouseover = highlightMonthYear;
		subDiv.onmouseout = highlightMonthYear;
		subDiv.onclick = selectYear;
		subDiv.id = 'yearDiv' + no;
		subDiv.onselectstart = cancelCalendarEvent;
		div.appendChild(subDiv);
		if(currentYear && currentYear==no){
			subDiv.style.color = selectBoxHighlightColor;
			activeSelectBoxYear = subDiv;
		}
	}
	if (! turnOffYearSpan) {
    	var subDiv = document.createElement('DIV');
    	subDiv.innerHTML = '&nbsp;&nbsp;▼';
    	subDiv.style.cursor='pointer';    	
    	subDiv.id = subDiv.name = "down";
    	subDiv.onclick = changeSelectBoxYear;
    	subDiv.onmouseover = highlightMonthYear;
    	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
    	subDiv.onselectstart = cancelCalendarEvent;
    	div.appendChild(subDiv);
	}
	return div;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function slideCalendarSelectBox()
{
	if(selectBoxMovementInProgress){
		if(activeSelectBox.parentNode.id=='hourDropDown'){
			changeSelectBoxHour(false,activeSelectBox);
		}
		if(activeSelectBox.parentNode.id=='yearDropDown'){
			changeSelectBoxYear(false,activeSelectBox);
		}

	}
	setTimeout('slideCalendarSelectBox()',speedOfSelectBoxSliding);

}

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
function createHourDiv()
{
	if(!document.getElementById('hourDropDown')){
		var div = document.createElement('DIV');
		div.className='monthYearPicker';
	}else{
		var div = document.getElementById('hourDropDown');
		var subDivs = div.getElementsByTagName('DIV');
		for(var no=0;no<subDivs.length;no++){
			subDivs[no].parentNode.removeChild(subDivs[no]);
		}
	}

	if(!currentHour)currentHour=0;
	var startHour = currentHour/1;
	if(startHour>14)startHour=14;

	var subDiv = document.createElement('DIV');
	subDiv.innerHTML = '&nbsp;&nbsp;- ';
	subDiv.onclick = changeSelectBoxHour;
	subDiv.onmouseover = highlightMonthYear;
	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
	subDiv.onselectstart = cancelCalendarEvent;
	div.appendChild(subDiv);


	var subDiv = document.createElement('DIV');
	subDiv.innerHTML = '&nbsp;&nbsp;+ ';
	subDiv.onclick = changeSelectBoxHour;
	subDiv.onmouseover = highlightMonthYear;
	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
	subDiv.onselectstart = cancelCalendarEvent;
	div.appendChild(subDiv);

	return div;
}
/* This function creates the minute div at the bottom bar */

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
function createMinuteDiv()
{
	if(!document.getElementById('minuteDropDown')){
		var div = document.createElement('DIV');
		div.className='monthYearPicker';
	}else{
		var div = document.getElementById('minuteDropDown');
		var subDivs = div.getElementsByTagName('DIV');
		for(var no=0;no<subDivs.length;no++){
			subDivs[no].parentNode.removeChild(subDivs[no]);
		}
	}
	var startMinute = 0;
	var prefix = '';
	for(var no=startMinute;no<60;no+=intervalSelectBox_minutes){

		if(no<10)prefix='0'; else prefix = '';
		var subDiv = document.createElement('DIV');
		subDiv.innerHTML = prefix + no;
		subDiv.onmouseover = highlightMonthYear;
		subDiv.onmouseout = highlightMonthYear;
		subDiv.onclick = selectMinute;
		subDiv.id = 'minuteDiv_' + prefix +  no;
		subDiv.onselectstart = cancelCalendarEvent;
		div.appendChild(subDiv);
		if(currentYear && currentYear==no){
			subDiv.style.color = selectBoxHighlightColor;
			activeSelectBoxYear = subDiv;
		}
	}
	return div;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightSelect()
{
	if(this.className=='selectBox'){
		this.className = 'selectBoxOver';
		this.getElementsByTagName('IMG')[0].src = pathToImages + 'over_bottom_arrow.png';

	}else if(this.className=='selectBoxOver'){
		this.className = 'selectBox';
		this.getElementsByTagName('IMG')[0].src = pathToImages + 'down.png';
	
	}
}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightSelect2()
{
	var wUrl;
	if(this.className=='weekdaynum' || this.className=='activeDay' ){
		this.className = this.className +'Over';
		wUrl = pathToImages + 'calendar_over.jpg';
		this.style.backgroundImage = "url("+wUrl+")";

	}else if(this.className=='weekdaynumOver' || this.className=='activeDayOver'){
		this.className = this.className.replace('Over', '');
		if(this.className == 'weekdaynum'){
			wUrl = pathToImages + 'daily_block_background.gif';	
		}else{
			wUrl = pathToImages + 'checked_today.png';
		}
		
		this.style.backgroundImage = "url("+wUrl+")";		
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightArrow()
{
	if(this.src.indexOf('over')>=0){
		//if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left.gif';
		//if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right.gif';
		if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left.png';
		if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right.png';
	}else{
		//if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left_over.gif';
		//if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right_over.gif';
		if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left_over.png';
		if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right_over.png';
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightClose()
{
	if(this.src.indexOf('over')>=0){
		this.src = pathToImages + 'cal_close.gif';
	}else{
		this.src = pathToImages + 'cal_close_over.gif';
	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918 달력 close
//시트와 컨트롤에 데이타 넣기
function closeCalendar(){
	try {
		parent.controls[IFrame_1].tagObject.style.height = IFrame_1_height + 'px';
	} catch (e) {}

	document.getElementById('yearDropDown').style.display='none';
	if(CType == 1) document.getElementById('monthDropDown').style.display='none';
	if(CType == 1) document.getElementById('hourDropDown').style.display='none';
	if(CType == 1) document.getElementById('minuteDropDown').style.display='none';

	calendarDiv.style.zIndex = 0;
	calendarDiv.style.display='none';
	if(iframeObj){
		iframeObj.style.display='none';
			EIS_Hide_Frame();}
	if(activeSelectBoxMonth)activeSelectBoxMonth.className='';
	if(activeSelectBoxYear)activeSelectBoxYear.className='';
	//20110407  textbox에 강제적으로 값을 넣어준다.이유는 기존 달력의 포커스를 잃어 버리는 경우에만 
	//값이 들어가는데 변경된 달력의 경우 달력을 클릭하면 포커스가 바로 잃어 버리기때문에이다.
	if(returnDateTo.id.match(/^[a-zA-Z]+/)[0] == "shtTextsheet"){
		var wSheet = controls["Sheet"+returnDateTo.id.match(/_\d+/)[0]];
		//var wSheet = controls[document.getElementById("Sheet"+returnDateTo.id.match(/_\d+/)[0]).attributes.name.nodeValue];
		wSheet.setValue(wSheet.currentRow,wSheet.currentCol,returnDateTo.value.split(specialChars).join(""));
	}else{
		var cal_ctl = controls[returnDateTo.getAttribute("ctlname")];
		var specialChars = /[~!\#$^&*\=+|:;?"<,.>'-\/]/;
		cal_ctl.setValue(returnDateTo.value.split(specialChars).join(""));
		
	}

	//document.getElementById(WTagId).select();
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function closeNotActionCalendar(){
	try {
		parent.controls[IFrame_1].tagObject.style.height = IFrame_1_height + 'px';
	} catch (e) {}

	document.getElementById('yearDropDown').style.display='none';
	document.getElementById('monthDropDown').style.display='none';
	document.getElementById('hourDropDown').style.display='none';
	document.getElementById('minuteDropDown').style.display='none';

	calendarDiv.style.zIndex = 0;
	calendarDiv.style.display='none';
	if(iframeObj){
		iframeObj.style.display='none';
			EIS_Hide_Frame();}
	if(activeSelectBoxMonth)activeSelectBoxMonth.className='';
	if(activeSelectBoxYear)activeSelectBoxYear.className='';
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918 상단 달력 만들기
function writeTopBar()
{
/* 상단 테그 생성
 * 
 */
	
	var topBar = document.createElement('DIV');
//	topBar.className = 'topBar';
	topBar.style.backgroundImage = pathToImages+"caledar_x-repeat_bg.gif";
	topBar.id = 'topBar';
	
	//150916 김남용 백그라운드 색상변경
	topBar.style.cssText ='	height:25px; padding:5px; background-color:#d23000; ';
	calendarDiv.appendChild(topBar);
   /*
	var img = document.createElement('IMG');
	img.style.cssText ='width:100%;	height:25px;';
	img.src = pathToImages + 'caledar_x-repeat_bg.gif';
	topBar.appendChild(img);
	*/
	// Left arrow
	var leftDiv = document.createElement('DIV');
	//20110404 추가	
	//leftDiv.style.cssText ='float:left;	margin-right:1px;';
	//150916 Left
	if(CType == 1 ){
//		leftDiv.style.cssText ='float:left;	margin-left: 5px;';
		leftDiv.style.cssText ='float:left;	margin-left: 20px;margin-top:7px;';		
	}else if(CType == 2 ){
		leftDiv.style.cssText ='float:left;	margin-left: 12px;margin-top:7px;';
	} 
	

	
	var img = document.createElement('IMG');
	img.style.cssText = 'cursor:pointer;';
	//img.src = pathToImages + 'cal_left.gif';
	img.src = pathToImages + 'cal_left.png';
	img.onmouseover = highlightArrow;
	img.onclick = switchMonth;
	img.onmouseout = highlightArrow;
	leftDiv.appendChild(img);
	topBar.appendChild(leftDiv);
	if(Opera)leftDiv.style.width = '16px';
	
	// Year selector
	var yearDiv = document.createElement('DIV');
  //20110404 추가
	//yearDiv.style.cssText ='float:left;	margin-right:1px;width:50px;';	
	yearDiv.style.cssText ='float:left;	width:50px;top: 2px;left: 23px;font-weight:bold;';
	
	//150916 년도 
	if(CType == 1 ){
		yearDiv.style.cssText ='float:left;	width:50px;top: 5px;left: 23px;font-weight:bold;';
	}else if(CType == 2 ){
		yearDiv.style.cssText ='float:left; top: 5px;left: 25px;font-weight:bold; FONT-FAMILY: 나눔고딕;	font-size:15px;';
	} 
	
	yearDiv.onmouseover = highlightSelect;
	yearDiv.onmouseout = highlightSelect;
	yearDiv.onclick = showYearDropDown;
	var span = document.createElement('SPAN');

	span.innerHTML = currentYear;
	span.id = 'calendar_year_txt';
	span.style.cssText ='margin-right:2px;'; // 2011-06-21 추가
	yearDiv.appendChild(span);
	topBar.appendChild(yearDiv);

	var img = document.createElement('IMG');
	img.src = pathToImages + 'down.png';
  //20110404 추가		
	//img.style.cssText = 'float:right;cursor:pointer';
	img.style.cssText = 'cursor:pointer';
	img.style.marginTop= '5px';
	yearDiv.appendChild(img);
	yearDiv.className = 'selectBox';

  // 리스트 년 만들기.
	var yearPicker = createYearDiv();
	yearPicker.style.left = '55px';
	yearPicker.style.top = yearDiv.offsetTop + yearDiv.offsetHeight + 1 + 'px';
	yearPicker.style.width = '35px';
	yearPicker.id = 'yearDropDown';
	calendarDiv.appendChild(yearPicker);

/*
	var img = document.createElement('IMG');
	img.src = pathToImages + 'cal_close.gif';
  //20110404 추가	
	img.style.cssText = 'float:right;cursor:pointer';	
	img.onmouseover = highlightClose;
	img.onmouseout = highlightClose;
	img.onclick = closeNotActionCalendar;
	topBar.appendChild(img);
	if(!document.all){
		img.style.position = 'absolute';
		img.style.right = '2px';
	}
*/	
  //	
	
	// Month selector
	// 150616 년월일 달력일때문 실행
	//
		var monthDiv = document.createElement('DIV');
		calendarMMDiv=monthDiv;
		monthDiv.id = 'monthSelect';
	  //20110404 추가	
		//monthDiv.style.cssText ='float:left;	margin-right:5px;width:50px;';
		monthDiv.style.cssText ='float:left;	width:35px;top: 5px;left: 23px;font-weight:bold;';
		monthDiv.onmouseover = highlightSelect;
		monthDiv.onmouseout = highlightSelect;
		monthDiv.onclick = showMonthDropDown;
		var span = document.createElement('SPAN');
		span.innerHTML = monthArray[currentMonth];
		span.id = 'calendar_month_txt';
		monthDiv.appendChild(span);
	
		var img = document.createElement('IMG');
		img.src = pathToImages + 'down.png';
	  //20110404 추가	
		img.style.cssText = 'float:right; position:absolute; right:0px; cursor:pointer;margin-top:5px;';	
		monthDiv.appendChild(img);
		monthDiv.className = 'selectBox';
	
		topBar.appendChild(monthDiv);

	  // 리스트 월 만들기.
		var monthPicker = createMonthDiv();
		monthPicker.style.left = '108px';
		monthPicker.style.top = monthDiv.offsetTop + monthDiv.offsetHeight + 1 + 'px';
		monthPicker.style.width ='35px';
		monthPicker.id = 'monthDropDown';
		calendarDiv.appendChild(monthPicker);
		if(CType == 1){
			calendarMMDiv.style.display = 'block';
		}else{
			calendarMMDiv.style.display = 'none';
		}

		// Right arrow
	var rightDiv = document.createElement('DIV');
  //20110404 추가	
	//rightDiv.style.cssText ='float:left;	margin-right:1px;';			
	//150916 
	rightDiv.style.cssText ='float:left;	margin-left: 50px;margin-top:7px;';

	var img = document.createElement('IMG');
	img.style.cssText = 'cursor:pointer;';	
	//img.src = pathToImages + 'cal_right.gif';
	img.src = pathToImages + 'cal_right.png';	
	img.onclick = switchMonth;
	img.onmouseover = highlightArrow;
	img.onmouseout = highlightArrow;
	rightDiv.appendChild(img);
	if(Opera)rightDiv.style.width = '16px';
	topBar.appendChild(rightDiv);
	//


}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//달력만들기. 달력선택
function writeCalendarContent()
{
	var calendarContentDivExists = true;
	if(!calendarContentDiv){
		calendarContentDiv = document.createElement('DIV');
		calendarDiv.appendChild(calendarContentDiv);
		calendarContentDivExists = false;
	}
	currentMonth = currentMonth/1;
	var d = new Date();

	d.setFullYear(currentYear);
	d.setDate(1);
	d.setMonth(currentMonth);

	var dayStartOfMonth = d.getDay();
	if (! weekStartsOnSunday) {
      if(dayStartOfMonth==0)dayStartOfMonth=7;
      dayStartOfMonth;
   }

	document.getElementById('calendar_year_txt').innerHTML = currentYear;
	// 150616 년월일 달력일때문 실행
	if(CType == 1){
		document.getElementById('calendar_month_txt').innerHTML = monthArray[currentMonth];
	}

	var existingTable = calendarContentDiv.getElementsByTagName('TABLE');
	if(existingTable.length>0){
		calendarContentDiv.removeChild(existingTable[0]);
	}
	//숫자요일 만들 테이블 생성
	var calTable = document.createElement('TABLE');
	calTable.width = '100%';
	calTable.cellSpacing = '0';
	calTable.borderCollapse = 'initial';
	calendarContentDiv.appendChild(calTable);


	var calTBody = document.createElement('TBODY');
	calTable.appendChild(calTBody);
	var row = calTBody.insertRow(-1);
	row.className = 'calendar_week_row';

	//요일 만들기 .. 월화수목금토일..
	// 150616 년월일 달력일때문 실행
	if(CType == 1){
		for(var no=0;no<dayArray.length;no++){
			var cell = row.insertCell(-1);
			cell.innerHTML = dayArray[no];
			//1509016 추가		
			cell.id="wn_weekdaynm";
		}
	}
//	else if(CType == 2){
//		for(var no=0;no<=monthArray.length;no++){
//			var row;
//			var cell;
//			if(no == 4 || no == 8){
//				row = calTBody.insertRow(-1);
//			}
//			cell = row.insertCell(-1);
//			cell.innerHTML = monthArray[no];		
//			cell.id="wn_weekdaynm";
//		}		
//	}
	
	// 150616 년월일 달력일때문 실행
	if(CType == 1){
		var row = calTBody.insertRow(-1);

		//첫번째줄 1일이 해당하는 요월에 맞게 셋팅 . 7이면 실행안함(시작이 일요일 이기때문에)
		if(dayStartOfMonth != 7){
		  	for(var no=0;no<dayStartOfMonth;no++){
		  		var cell = row.insertCell(-1);
		  		cell.innerHTML = '&nbsp;';
//				cell.id="wn_weekdaydefalut";  	
		  		cell.style.backgroundImage=pathToImages+"daily_block_background.gif"
				cell.style.borderLeft="1px solid #bebebe";
				cell.style.borderTop="1px solid #bebebe";				
		  	}
		  }
	
		var colCounter = dayStartOfMonth;
		
		var daysInMonth = daysInMonthArray[currentMonth];
		if(daysInMonth==28){
			if(isLeapYear(currentYear))daysInMonth=29;
		}
		var lastAddRow=7;
		var wOlecolCounter;
		var wLineOk=0;
		for(var no=1;no<=daysInMonth;no++){
			d.setDate(no-1);
			//alert(colCounter);
			if(colCounter>0 && colCounter%7==0){
				var row = calTBody.insertRow(-1);
				cell.style.borderRight=" 1px solid #bebebe";
				lastAddRow=7;	
				var wOlecolCounter  = (daysInMonth - (colCounter-dayStartOfMonth)) + (colCounter-dayStartOfMonth);
				if((no+6) >= daysInMonth ){
					//alert(wOlecolCounter+" , " +dayStartOfMonth+" , " + daysInMonth );
					wLineOk=1;
				}
			}
			//if(no > 28){
			//	alert(no + " ,  " +colCounter);	
			//}
			
			var cell = row.insertCell(-1);
			if(currentYear==inputYear && currentMonth == inputMonth && no==inputDay){
				cell.className='activeDay';
				//150916 선택시 글자색 변경
				cell.style.color='#0000ff';
//				cell.style.backgroundImage="url(winnersoft/images/calendar/checked_today.png)";
				cell.style.backgroundImage=pathToImages+"checked_today.png";
				cell.style.backgroundRepeat="no-repeat";
			}else{
				cell.className="weekdaynum";			
//				cell.style.backgroundImage="url(winnersoft/images/calendar/daily_block_background.gif)";	
				cell.style.backgroundImage=pathToImages+"daily_block_background.gif";	
			}
			// 요일숫자 넣기 1 ,2 ,3 ,4....
		  
			cell.innerHTML = no;
			cell.onclick = pickDate;
			cell.onmouseover = highlightSelect2;
			cell.onmouseout = highlightSelect2;
			cell.style.borderLeft=" 1px solid #bebebe";
			cell.style.borderTop=" 1px solid #bebebe";
			//1509016 추가
			cell.id="wn_weekdaynum";  	
			if(colCounter%7==0 || colCounter%7==6){
				cell.style.color='#ff0000';				
			}
			

			//150921 달력 마지막일자이후 빈공란 셋팅
			if(wLineOk ==1){
				cell.style.borderBottom="1px solid #bebebe";	
			}			
			if(daysInMonth == no){
				//cell.style.borderRight=" 1px solid #bebebe";
				cell.style.borderTop=" 1px solid #bebebe";					
				//alert(lastAddRow);
			  	for(var no1=1;no1<lastAddRow;no1++){
			  		var cell = row.insertCell(-1);
//					cell.id="wn_weekdaydefalut";  
			  		cell.style.backgroundImage=pathToImages+"daily_block_background.gif"
					cell.style.borderLeft="1px solid #bebebe";
					cell.style.borderTop="1px solid #bebebe";
					cell.style.borderBottom="1px solid #bebebe";					
			  	}
				cell.style.borderRight="1px solid #bebebe";
			}
			
			//마지막줄 추가
			lastAddRow= lastAddRow -1;
			colCounter++;
		}
	}else if(CType == 2){
		// 150916 년월달력
		var row = calTBody.insertRow(-1);
		var daysInMonth = daysInMonthArray[currentMonth];
		if(daysInMonth==28){
			if(isLeapYear(currentYear))daysInMonth=29;
		}
	
		for(var no=0;no<monthArrayShort.length;no++){
			d.setDate(no-1);
			
			if(no == 4 || no == 8){
				var row = calTBody.insertRow(-1);
				cell.style.borderRight="1px solid #bebebe";				
			}
			var cell = row.insertCell(-1);
			if(currentYear==inputYear && monthArrayShort[no] == (inputMonth+1) ){
				cell.className='activeDay';
				//150916 선택시 글자색 변경
				cell.style.color='#0000ff';
//				cell.style.backgroundImage="url(winnersoft/images/calendar/checked_today.png)";
				cell.style.backgroundImage=pathToImages+"checked_today.png";
				cell.style.backgroundRepeat="no-repeat";
			}else{
				cell.className="weekdaynum";				
//				cell.style.backgroundImage="url(winnersoft/images/calendar/daily_block_background.gif)";	
				cell.style.backgroundImage=pathToImages+"daily_block_background.gif";	
			}
			
			cell.innerHTML = monthArrayShort[no];
			cell.onclick = pickMm;
		
			//1509016 추가
			cell.style.width="25%";
			//cell.style.height="28px"; 
			cell.onmouseover = highlightSelect2;
			cell.onmouseout = highlightSelect2;			
			cell.id="wn_weekdaynum";
			cell.style.borderLeft="1px solid #bebebe";
			cell.style.borderTop="1px solid #bebebe";
			//150921 년월 보더 색상주기 
			if(no == 3 || no == 7 ||  no == 11){			
				cell.style.borderRight="1px solid #bebebe";				
			}
			if(no > 7) cell.style.borderBottom="1px solid #bebebe";
		}
	}
	
	if(!document.all){
		if(calendarContentDiv.offsetHeight)
			document.getElementById('topBar').style.top = calendarContentDiv.offsetHeight + document.getElementById('timeBar').offsetHeight + document.getElementById('timeBar').offsetHeight + document.getElementById('topBar').offsetHeight -1 + 'px';
		else{
			document.getElementById('topBar').style.top = '';
			document.getElementById('topBar').style.bottom = '0px';
		}
	}

	if(iframeObj){
		if(!calendarContentDivExists)setTimeout('resizeIframe()',350);else setTimeout('resizeIframe()',10);
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function resizeIframe()
{
	iframeObj.style.width = calendarDiv.offsetWidth + 'px';
	iframeObj.style.height = calendarDiv.offsetHeight + 'px' ;


}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function pickTodaysDate()
{
	var d = new Date();

	currentMonth = d.getMonth();
	currentYear = d.getFullYear();
	pickDate(false,d.getDate());

}

/**
 * @description	미결
 * @name		calendar#pickDate
 * @event
 * @param		{Object}	inputDay	
 * @returns		{Undefined}
 * @example		미결
 * 
 */
function pickDate(e,inputDay)
{
	var month = currentMonth/1 +1;

	if(month<10)month = '0' + month;
	var day;
	if(!inputDay && this)day = this.innerHTML; else day = inputDay;

	if(day/1<10)day = '0' + day;
	//데이터셋팅

	if(returnFormat){
		returnFormat = returnFormat.replace('dd',day);
		returnFormat = returnFormat.replace('mm',month);
		returnFormat = returnFormat.replace('yyyy',currentYear);
		returnFormat = returnFormat.replace('hh',currentHour);
		returnFormat = returnFormat.replace('ii',currentMinute);
		returnFormat = returnFormat.replace('d',day/1);
		returnFormat = returnFormat.replace('m',month/1);
		returnDateTo.value = returnFormat;
		returnDateTo.setAttribute("value", returnFormat);
		
		try{
	
			returnDateTo.onchange();

		}catch(e){

		}
	}else{
		for(var no=0;no<returnDateToYear.options.length;no++){
			if(returnDateToYear.options[no].value==currentYear){
				returnDateToYear.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToMonth.options.length;no++){
			if(returnDateToMonth.options[no].value==parseInt(month)){
				returnDateToMonth.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToDay.options.length;no++){
			if(returnDateToDay.options[no].value==parseInt(day)){
				returnDateToDay.selectedIndex=no;
				break;
			}
		}
		if(calendarDisplayTime){
			for(var no=0;no<returnDateToHour.options.length;no++){
				if(returnDateToHour.options[no].value==parseInt(currentHour)){
					returnDateToHour.selectedIndex=no;
					break;
				}
			}
			for(var no=0;no<returnDateToMinute.options.length;no++){
				if(returnDateToMinute.options[no].value==parseInt(currentMinute)){
					returnDateToMinute.selectedIndex=no;
					break;
				}
			}
		}
	}
	closeCalendar();
}

/**
 * @description	미결
 * @name		calendar#pickMm
 * @event
 * @param		{Object}	inputMm	
 * @returns		{Undefined}
 * @example		미결
 * 
 */
function pickMm(e,inputMm)
{
	var month = currentMonth/1 +1;
	if(!inputMm && this)month = this.innerHTML; else month = inputMm;
	if(month/1<10)month = '0' + month;
	//데이터셋팅
	if(returnFormat){
		returnFormat = returnFormat.replace('mm',month);
		returnFormat = returnFormat.replace('yyyy',currentYear);
		returnDateTo.value = returnFormat;
		returnDateTo.setAttribute("value", returnFormat);
		
		try{
	
			returnDateTo.onchange();

		}catch(e){

		}
	}else{
		for(var no=0;no<returnDateToYear.options.length;no++){
			if(returnDateToYear.options[no].value==currentYear){
				returnDateToYear.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToMonth.options.length;no++){
			if(returnDateToMonth.options[no].value==parseInt(month)){
				returnDateToMonth.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToDay.options.length;no++){
			if(returnDateToDay.options[no].value==parseInt(day)){
				returnDateToDay.selectedIndex=no;
				break;
			}
		}
		if(calendarDisplayTime){
			for(var no=0;no<returnDateToHour.options.length;no++){
				if(returnDateToHour.options[no].value==parseInt(currentHour)){
					returnDateToHour.selectedIndex=no;
					break;
				}
			}
			for(var no=0;no<returnDateToMinute.options.length;no++){
				if(returnDateToMinute.options[no].value==parseInt(currentMinute)){
					returnDateToMinute.selectedIndex=no;
					break;
				}
			}
		}
	}
	closeCalendar();
}

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
function writeTimeBar()
{
	var timeBar = document.createElement('DIV');
	timeBar.id = 'timeBar';
	timeBar.className = 'timeBar';

	var subDiv = document.createElement('DIV');
	subDiv.innerHTML = 'Time:';
	//timeBar.appendChild(subDiv);

	// Year selector
	var hourDiv = document.createElement('DIV');
	hourDiv.onmouseover = highlightSelect;
	hourDiv.onmouseout = highlightSelect;
	hourDiv.onclick = showHourDropDown;
	hourDiv.style.width = '30px';

	var hourPicker = createHourDiv();
	hourPicker.style.left = '130px';
	hourPicker.style.width = '35px';
	hourPicker.id = 'hourDropDown';
	calendarDiv.appendChild(hourPicker);

	// Add Minute picker

	// Year selector
	var minuteDiv = document.createElement('DIV');
	minuteDiv.onmouseover = highlightSelect;
	minuteDiv.onmouseout = highlightSelect;
	minuteDiv.onclick = showMinuteDropDown;
	minuteDiv.style.width = '30px';

	var minutePicker = createMinuteDiv();
	minutePicker.style.left = '167px';
	//minutePicker.style.top = monthDiv.offsetTop + monthDiv.offsetHeight + 1 + 'px';
	minutePicker.style.width = '35px';
	minutePicker.id = 'minuteDropDown';
	calendarDiv.appendChild(minutePicker);


	return timeBar;

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function writeBottomBar()
{
/* 하단 현재일자 셋팅
 * 
 */
	
	var d = new Date();
	var bottomBar = document.createElement('DIV');

	bottomBar.id = 'bottomBar';

	bottomBar.style.cursor = 'pointer';
//	bottomBar.className = 'todaysDate';
	bottomBar.style.backgroundImage = pathToImages+"daily_block_background.gif";
	bottomBar.style.display = 'none';
	if(CType == 1){
		bottomBar.style.width = '203px';
	}else if(CType == 2){
		bottomBar.style.width = '148px';
	}
	
		// var todayStringFormat = '[todayString] [dayString] [day] [monthString] [year]';	;;

	var subDiv = document.createElement('DIV');
	subDiv.onclick = pickTodaysDate;
	subDiv.id = 'todaysDateString';
	subDiv.style.width = (calendarDiv.offsetWidth - 95) + 'px';
	var day = d.getDay();
	if (! weekStartsOnSunday) {
      if(day==0)day = 7;
      day--;
   }

	var bottomString = todayStringFormat;

	bottomString = bottomString.replace('[monthString]',monthArrayShort[d.getMonth()]);
	bottomString = bottomString.replace('[day]',d.getDate());
	bottomString = bottomString.replace('[year]',d.getFullYear());
	bottomString = bottomString.replace('[dayString]',dayArray[day].toLowerCase());
	bottomString = bottomString.replace('[todayString]',todayString);

	//현재일자 셋팅
	subDiv.innerHTML = todayString + ': ' + d.getDate() + '. ' + monthArrayShort[d.getMonth()] + ', ' +  d.getFullYear() ;
	
	subDiv.innerHTML = bottomString ;

	bottomBar.appendChild(subDiv);

	var timeDiv = writeTimeBar();
	bottomBar.appendChild(timeDiv);

	calendarDiv.appendChild(bottomBar);



}
/**
 * @description	미결
 * @param		{Object}	inputObj
 * @returns		{Number}
 * @example		미결
 */
function getTopPos(inputObj)
{

  var returnValue = inputObj.offsetTop + inputObj.offsetHeight;
  while((inputObj = inputObj.offsetParent) != null)returnValue += inputObj.offsetTop;
  return returnValue + calendar_offsetTop;
}

/**
 * @description	미결
 * @param		{Object}	inputObj
 * @returns		{Number}
 * @example		미결
 */
function getleftPos(inputObj)
{
  var returnValue = inputObj.offsetLeft;
  while((inputObj = inputObj.offsetParent) != null)returnValue += inputObj.offsetLeft;
  return returnValue + calendar_offsetLeft;
}

/**
 * @description	미결
 * @param		{Object}	inputObj
 * @returns		{Undefined}
 * @example		미결
 */
function positionCalendar(inputObj)
{
	calendarDiv.style.left = getleftPos(inputObj) + 'px';
	calendarDiv.style.top = getTopPos(inputObj) + 'px';
	if(iframeObj){
		iframeObj.style.left = calendarDiv.style.left;
		iframeObj.style.top =  calendarDiv.style.top;
		//// fix for EI frame problem on time dropdowns 09/30/2006
		iframeObj2.style.left = calendarDiv.style.left;
		iframeObj2.style.top =  calendarDiv.style.top;
	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918 달력 전체모양 만들기
function initCalendar()
{
	if(MSIE){
		iframeObj = document.createElement('IFRAME');
		iframeObj.style.filter = 'alpha(opacity=0)';
		iframeObj.style.position = 'absolute';
		iframeObj.border='0px';
		iframeObj.style.border = '0px';
		//iframeObj.style.backgroundColor = '#4598ff';

		iframeObj2 = document.createElement('IFRAME');
		iframeObj2.style.position = 'absolute';
		iframeObj2.border='0px';
		iframeObj2.style.border = '0px';
		iframeObj2.style.height = '1px';
		iframeObj2.style.width = '1px';

		document.body.appendChild(iframeObj2);  // gfb move this down AFTER the .src is set
		document.body.appendChild(iframeObj);
	}

	calendarDiv = document.createElement('DIV');
	calendarDiv.id = 'calendarDiv';
	calendarDiv.class = 'calendarDiv';
	calendarDiv.style.zIndex = 1000;
	if(CType == 1){
	//150921 하단 현재 날짜 안보이도록 display:none로  변경 
//		calendarDiv.style.cssText ='position:absolute;	width:205px;	border:0px solid #EAEAEA;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔고딕;	font-size:12px;	padding-bottom:20px;	visibility:hidden; ';	
		calendarDiv.style.cssText ='position:absolute;	width:205px;	border:0px solid #EAEAEA;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';
	}else if(CType == 2){
		calendarDiv.style.cssText ='position:absolute;	width:150px;	border:0px solid #858BFF;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';		
	}
    	
    slideCalendarSelectBox();
	document.body.appendChild(calendarDiv);
	//달력 오늘날짜 하단태그
	//if(CType == 1){
		writeBottomBar();
	//}
	//달력 상단 년,월 선택 태그
	writeTopBar();



	if(!currentYear){
		var d = new Date();
		currentMonth = d.getMonth();
		currentYear = d.getFullYear();
	}
	
	//데이터 입력 
	writeCalendarContent();



}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function setTimeProperties()
{
	if(!calendarDisplayTime){
		document.getElementById('timeBar').style.display='none';
		document.getElementById('timeBar').style.visibility='hidden';
		if(CType == 1)document.getElementById('todaysDateString').style.width = '100%';


	}else{
		document.getElementById('timeBar').style.display='block';
		document.getElementById('timeBar').style.visibility='visible';
		if(CType == 1)document.getElementById('todaysDateString').style.width = '115px';
	}
}

/**
 * @description	미결
 * @param		{Number}	a
 * @param		{Number}	b
 * @returns		{Number}
 * @example		미결
 */
function calendarSortItems(a,b)
{
	return a/1 - b/1;
}

/**
 * @description	미결
 * @param		{Object}	inputField
 * @param		{Object}	inputControl
 * @param		{Object}	format
 * @param		{Object}	type
 * @param		{Number}	displayTime
 * @param		{Number}	timeInput
 * @returns		{Undefined}
 * @example		미결
 */
function popUpCalendar(inputField,inputControl,format,type,displayTime,timeInput)
{
// type:1(년월일) , type:2(년월) , type:3(년도)  

	CType = type;
	WTagId = inputField.id;  
	var controlValue = inputControl.value;

	if(displayTime)calendarDisplayTime=true; else calendarDisplayTime = false;

	if(controlValue.length>=6){ //dates must have at least 6 digits...
       if(!controlValue.match(/^[0-9]*?$/gi)){

 			var items = inputField.value.split(/[^0-9]/gi);
			var positionArray = new Array();
			positionArray['m'] = format.indexOf('mm');
			if(positionArray['m']==-1)positionArray['m'] = format.indexOf('m');
			positionArray['d'] = format.indexOf('dd');
			if(positionArray['d']==-1)positionArray['d'] = format.indexOf('d');
			positionArray['y'] = format.indexOf('yyyy');
			positionArray['h'] = format.indexOf('hh');
			positionArray['i'] = format.indexOf('ii');

			var positionArrayNumeric = Array();
			positionArrayNumeric[0] = positionArray['m'];
			positionArrayNumeric[1] = positionArray['d'];
			positionArrayNumeric[2] = positionArray['y'];
			positionArrayNumeric[3] = positionArray['h'];
			positionArrayNumeric[4] = positionArray['i'];


			positionArrayNumeric = positionArrayNumeric.sort(calendarSortItems);
			var itemIndex = -1;
			currentHour = '00';
			currentMinute = '00';
			
			var tmpDay = 0;
			
			for(var no=0;no<positionArrayNumeric.length;no++){
				if(positionArrayNumeric[no]==-1)continue;
				itemIndex++;
				if(positionArrayNumeric[no]==positionArray['m']){
					currentMonth = items[itemIndex]-1;
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['y']){
					currentYear = items[itemIndex];
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['d']){
					tmpDay = items[itemIndex];
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['h']){
					currentHour = items[itemIndex];
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['i']){
					currentMinute = items[itemIndex];
					continue;
				}
			}

			currentMonth = currentMonth / 1;
			tmpDay = tmpDay / 1;

		}else{
			var monthPos = format.indexOf('mm');
			currentMonth = controlValue.substr(monthPos,2)/1 -1;


			var yearPos = format.indexOf('yyyy');
			currentYear = controlValue.substr(yearPos,4);
			var dayPos = format.indexOf('dd');
			tmpDay = controlValue.substr(dayPos,2);

			var hourPos = format.indexOf('hh');
			if(hourPos>=0){
				tmpHour = controlValue.substr(hourPos,2);
				currentHour = tmpHour;
			}else{
				currentHour = '00';
			}
			var minutePos = format.indexOf('ii');
			if(minutePos>=0){
				tmpMinute = controlValue.substr(minutePos,2);
				currentMinute = tmpMinute;
			}else{
				currentMinute = '00';
			}
		}

	}else{
		var d = new Date();
		//년도
		currentYear = d.getFullYear();
		//월
		currentMonth = d.getMonth();
		//일
		tmpDay = d.getDate();
		//분
		currentHour = '08';
		//초
		currentMinute = '00';

	}
	
	//년도
	inputYear = currentYear;
	//월
	inputMonth = currentMonth;
	//일
	inputDay = tmpDay/1;

/* 최초 클릭시 태그를 생성여부 체크 */
	if(!calendarDiv){
		initCalendar();
			
	}else{

		if(calendarDiv.style.display=='block'){
			closeNotActionCalendar();
			return false;
		}
		//calendarDiv.remove();
		//initCalendar();
		if(CType == 1){
			//150921 하단 현재 날짜 안보이도록 display:none로  변경 
				calendarDiv.style.cssText ='position:absolute;	width:205px;	border:0px solid #EAEAEA;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';
				calendarMMDiv.style.display = 'block';	
		}else if(CType == 2){
				calendarDiv.style.cssText ='position:absolute;	width:150px;	border:0px solid #858BFF;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';		
				calendarMMDiv.style.display = 'none';	
				//$('#monthSelect').css({"display":"none"});
				//monthDiv.style.display = 'none';
			}		
		writeCalendarContent();
	}

	returnFormat = format;
	returnDateTo = inputField;
	positionCalendar(inputField);
	calendarDiv.style.zIndex = 1000;
	calendarDiv.style.visibility = 'visible';
	calendarDiv.style.display = 'block';

	if(iframeObj){
		iframeObj.style.display = '';
		iframeObj.style.height = '140px';
		iframeObj.style.width = '195px';
		
		iframeObj2.style.display = '';
		iframeObj2.style.height = '140px';
		iframeObj2.style.width = '195px';
	}

	setTimeProperties();
	updateYearDiv();
	updateMonthDiv();
	updateMinuteDiv();
	updateHourDiv();
	document.getElementById(WTagId).select();
	document.getElementById(WTagId).blur();

    var wleft = inputField.offsetLeft;
    var wtop = inputField.offsetTop;
    
    var pem = inputField.offsetParent;
    while(pem.tagName != "BODY"){
    	wleft += pem.offsetLeft;
    	wtop += pem.offsetTop;
        
        pem = pem.offsetParent;
    }
    
    
    var winHeight = 0;
    var winWidth  = 0;
    
	if (window.innerHeight)
		winHeight=window.innerHeight;
	else if (document.documentElement && document.documentElement.clientHeight)
		winHeight=document.documentElement.clientHeight;
	else if (document.body)
		winHeight=document.body.clientHeight;
	
	if (window.innerWidth)
		winWidth=window.innerWidth;
	else if (document.documentElement && document.documentElement.clientWidth)
		winWidth=document.documentElement.clientWidth;
	else if (document.body)
		winWidth=document.body.clientWidth;
    
    var documentScrollTop = document.documentElement.scrollTop;
    var documentScrollLeft = document.documentElement.scrollLeft;
    
    if (wtop > documentScrollTop + winHeight - calendarDiv.clientHeight -20) {
        calendarDiv.style.top = (documentScrollTop + winHeight - calendarDiv.clientHeight -20) + "px";
    }
    if (wleft > documentScrollLeft + winWidth - calendarDiv.clientWidth - 20) {
        calendarDiv.style.left = (documentScrollLeft + winWidth - calendarDiv.clientWidth -20) + "px";
    }
}

/**
 * @description	미결
 * @param		{Object}	yearInput
 * @param		{Object}	monthInput
 * @param		{Object}	dayInput
 * @param		{Object}	hourInput
 * @param		{Object}	minuteInput
 * @param		{Object}	buttonObj
 * @returns		{Undefined}
 * @example		미결
 */
function displayCalendarSelectBox(yearInput,monthInput,dayInput,hourInput,minuteInput,buttonObj)
{
	if(!hourInput)calendarDisplayTime=false; else calendarDisplayTime = true;

	currentMonth = monthInput.options[monthInput.selectedIndex].value/1-1;
	currentYear = yearInput.options[yearInput.selectedIndex].value;
	if(hourInput){
		currentHour = hourInput.options[hourInput.selectedIndex].value;
		inputHour = currentHour/1;
	}
	if(minuteInput){
		currentMinute = minuteInput.options[minuteInput.selectedIndex].value;
		inputMinute = currentMinute/1;
	}

	inputYear = yearInput.options[yearInput.selectedIndex].value;
	inputMonth = monthInput.options[monthInput.selectedIndex].value/1 - 1;
	inputDay = dayInput.options[dayInput.selectedIndex].value/1;

	if(!calendarDiv){
		initCalendar();
	}else{
		writeCalendarContent();
	}

	returnDateToYear = yearInput;
	returnDateToMonth = monthInput;
	returnDateToDay = dayInput;
	returnDateToHour = hourInput;
	returnDateToMinute = minuteInput;




	returnFormat = false;
	returnDateTo = false;
	positionCalendar(buttonObj);
	calendarDiv.style.zIndex = 1000;
	calendarDiv.style.visibility = 'visible';
	calendarDiv.style.display = 'block';
	if(iframeObj){
		iframeObj.style.display = '';
		iframeObj.style.height = calendarDiv.offsetHeight + 'px';
		iframeObj.style.width = calendarDiv.offsetWidth + 'px';
		//// fix for EI frame problem on time dropdowns 09/30/2006
		iframeObj2.style.display = '';
		iframeObj2.style.height = calendarDiv.offsetHeight + 'px';
		iframeObj2.style.width = calendarDiv.offsetWidth + 'px'
	}
	setTimeProperties();
	updateYearDiv();
	updateMonthDiv();
	updateHourDiv();
	updateMinuteDiv();

}
/**
 *   @autor   winnersoft korea
 *   @version 5.0
 *   @see     winnersoft.co.kr
 */


/**
 * @description 
 *     EasyMaker Vertical Data Object For Big Data.
 * 
 * @constructor
 * 
 * @param {string} 	 id 	 	- 콘트롤 고유 아이디 (영문)
 * @param {string} 	 tableID 	- 데이터가 들어갈 테이블 명
 * @param {string} 	 name 		- 객체명 (사용자 고유 언어)
 * 
 * @return {DataObject} - 생성된 DataObject 개체
 * 
 * @exception 널값 예외
 * 
 * @example 
 *     // 콘트롤 고유 아이디 "student", 테이블명: "TBL_STUDENT" 인 "학생" 객체
 *     var object = new DataObject("student", "TBL_STUDENT", "학생");
 */
function DataObject(id, tableID, name){
	/** [읽기 전용] 메모리 데이터 셋 <br/> dataSet은 고유값으로서 변경될 수 없다.
	 *  @type {DataSet}  
	 *  */  	
	this.dataSet = new WsDataSet();
	this.dataSet.deleteDataPolicy = WSDATASET_DELETE_POLICY.LEAVE_RECORD_IN_DATA;
	
	/** [읽기 전용] 데이터를 구성하는 각 필드의 정보가 기록되는 배열, 0 부터 채워진다 
	 *  @type {PropertyInfo[]}  
	 *  */  	
    this.propertyInfos = [];
    
    
	/** [읽기 전용] 데이터를 구성하는 각 필드의 정보가 기록되는 연관배열, 만들어진 순서로 채워진다  
	 *  @type {PropertyInfo[]}  
	 *  */  	
    this.propertyInfosById = {};  	// propertyInfos의 복사판 Id로 인덱싱하기 위헤필요
    
	/** [읽기 전용] 데이터를 구성하는 필드의 갯수 
	 *  @type {PropertyInfo[]}  
	 *  */  	
    this.propertyCount = 0;
    
	/** 
	 *  dni는 Delete aNd Insert 를 의미한다. 
	 *  화면에 있는 모든 데이터에 대하여 각 레코드의 키에 해당하는 데이터를 지우고 <br/>
	 *  새로운 데이터를 Insert 하는 형태로 서버상 데이터가 갱신 된다 <br/>
	 *  데이터를 서버데이터와 같은 형태로 '로드'한 상태인 경우 false이며 데이터의 변화에 따라 IUD(Insert, Update, Delete)동작을 하게 된다.<br/>
	 *  가져오기, 배치작업등으로 채운 경우 true이다. 이때는 DI(Delete, Insert)동작을 하게 된다.<br/> 
	 *  '로드'작업 이외의 동작으로 데이터를 채운후 "dniMode = true;" 로 설정하면 IUD 동작을 한다. 
	 *  
	 *   EasyMaker의 객체 메뉴에서 "갱신유형 - 전체" 가 선택된 경우 this.dniMode 는 true,
	 *                         "갱신유형 - 수정분"이 선택된 경우 this.dniMode 는 false,
	 *                         둘 다 선택되지 않은 경우는 this.dniMode 는 true 가 된다 
	 *  @type {Boolean}  
	 *  */  	
    this.dniMode = true; 			// 객체 속성이 dni 모드가 아니면 false
    
    /** @deprecated since version 5.0, [읽기 전용] AUI시트에서 줄추가된 데이터를 수정할때 해당속성이 true로 들어온다 
	 *  @type {Boolean}  
     * */
    this.newData = false;
       
    /** @deprecated since version 5.0, [읽기 전용] AUI시트에서 이 속성이 true 이면 setValue 함수에서 바로 리턴  
	 *  @type {Boolean}  
     * */
    this.notSetValue = false; 		
    
    /** @deprecated since version 5.0, [읽기 전용] AUI시트에서 이 속성이 true 이면 setValue 함수에서 같은 값이더라도 바로 리턴하지 않고 data updateGu 갱신 후 리턴  
	 *  @type {Boolean}  
     * */
    this.dataUp = false;
    
	/** [읽기 전용] 데이터셋 중 현재 레코드를 가리키는 순번
	 *  @type {Number}  
	 *  */  	
    this.seq = 0;
    
	/** [읽기 전용] 객체내 데이터셋의 레코드를 가리키는 순번중 최대값 , count속성값과 같다. 
	 *  @type {Number}  
	 *  */  	
    this.maxSeq = 0;				// count 정도의 역할 밖에는 안함 
    
	/** [읽기 전용] 객체내 데이터셋의 레코드 수  
	 *  @type {Number}  
	 *  */  	
    this.count = 0;               	// 집계함수 연산에 필요한 값
    
	/** [읽기 전용] 객체내 데이터셋의 레코드를 가리키는 순번의 시작 값, startSeq == 1 인 경우 1번부터 순번이 시작된다 
	 *  @type {Number=0}  
	 *  */  	
    this.startSeq = 1;				// 행과 열의 시작 번호 디폴트는 1이다 (기존 호환)

	/** [읽기 전용] 화면내에서 객체를 대표하는 ID 
	 *  @type {String}  
	 *  */  	
    this.id = id;
    
	/** [읽기 전용] 화면내에서 객체를 저장하는 Table의 ID
	 *  @type {String}  
	 *  */  	
    this.tableID = tableID;
    
	/** [읽기 전용] 화면내에서 객체를 대표하는 이름
	 *  @type {String}  
	 *  */  	
    this.name = name;
    
	/** [읽기 전용] 
	 * 객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 되는 속성의 ID. <br/> 
	 * 대량의 데이터를 로드해서 기준을 바꾸어 가며 화면에 표시하고 작업할 때 사용한다. <br/>
	 * fillKeyfieldId 과 fillKeyFieldName 은 같은 값이다. 
	 *  @type {String}  
	 *  */  	
    this.fillKeyfieldId = "";     
    
	/** [읽기 전용] 
	 * 객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 되는 속성의 필드명. <br/> 
	 * fillKeyfieldId 과 fillKeyFieldName 은 같은 값이다. 
	 *  @type {String}  
	 *  */  	
    this.fillKeyFieldName = "";
    
    
	/** [읽기 전용] 
	 * 객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 필드의 현재값<br/>
	 * 객체데이터중 이값과 같은 값을 가진 데코드만 화면에 채워지게 된다.  
	 *  @type {String}  
	 *  */  	
    this.fillkeyFieldValue = "";
    
    
	/** [읽기 전용] 
	 * 각레코드를 구분하는 필드를 시퀀스키필드(sequance key field)라고 하며, <br/>
	 * seqKeyFieldId속성은 시퀀스키필드의 속성 ID값을 의미한다. 
	 *  @type {String}  
	 *  */  	
    this.seqKeyFieldId = "";
    
    this.selectCondition = null;
    
    objects[name] = this;
    
    // 이벤트 또는 사용자 함수 처리부
	/** 
	 * 데이터나 속성 변경시 이벤트를 일으킬 것인지 여부를 지정한다  <br/>
	 * false: 이벤트를 발생시키지 않는다.
	 *  @type {Boolean}  
	 *  */  	
	this.FireEvent = true;		// 이벤트를 일으킬 것인지 여부
    
   	/**
	 * 레코드간 이동전 동작 취소가 가능한 이벤트 (CanSeqChange)
	 *
	 * @event DataObject#SeqChange
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 * @property {Number} oldSeq 	- 이동전 줄번호 
	 * @property {Number} seq 		- 이동후 줄번호
	 */
    this.hasCanSeqChangeEvent = (typeof self[this.id + "_CanSeqChange"] != "undefined");
    this.fncCanSeqChangeEvent = !this.hasCanSeqChangeEvent ? null : new Function("return function (oldSeq, seq) { return " + this.id + "_CanSeqChange(oldSeq, seq);}")();

   	/**
	 * 레코드간 이동후 발생하는 이벤트 (SeqChange)
	 *
	 * @event DataObject#SeqChange
	 * @type {Object}
 	 * @property {Number} oldSeq 	- 이동전 줄번호 
	 * @property {Number} seq 		- 이동후 줄번호
	 */
    this.hasSeqChangeEvent = (typeof self[this.id + "_onSeqChange"] != "undefined");
    this.fncSeqChangeEvent = !this.hasSeqChangeEvent ? null : new Function("return function (oldSeq, seq) { return " + this.id + "_onSeqChange(oldSeq, seq);}")();

   	/**
	 * 데이터의 값이 변경전 사용자 체크 코딩이 가능한 이벤트 
	 *
	 * @event DataObject#change
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 * @property {String} 						fieldId - 변경된 데이터의 필드ID
	 * @property {String|Number|Boolean|Object} newValue - 변경후 데이터 
	 * @property {String|Number|Boolean|Object} oldValue - 변경전 데이터 
	 */
    this.hasCanChangeEvent = (typeof self[this.id + "_CanChange"] != "undefined");
    this.fncCanChangeEvent = !this.hasCanChangeEvent ? null : new Function("return function (fieldId, newValue, oldValue) { return " + this.id + "_CanChange(fieldId, newValue, oldValue);}")();

   	/**
	 * 데이터의 값이 변경되었을 때 발생하는 이벤트 
	 *
	 * @event DataObject#change
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 * @property {String} 						fieldId - 변경된 데이터의 필드ID
	 * @property {String|Number|Boolean|Object} newValue - 변경후 데이터 
	 * @property {String|Number|Boolean|Object} oldValue - 변경전 데이터 
	 */
    this.hasChangeEvent = (typeof self[this.id + "_onChange"] != "undefined");
    this.fncChangeEvent = !this.hasChangeEvent ? null : new Function("return function (fieldId, newValue, oldValue) { return " + this.id + "_onChange(fieldId, newValue, oldValue);}")();
    if (!this.hasChangeEvent){  // 구버전 이벤트 대소문자 호환을 위한 코딩
    	this.hasChangeEvent = (typeof self[this.id + "_onchange"] != "undefined");
    	this.fncChangeEvent = !this.hasChangeEvent ? null : new Function("return function (fieldId, newValue, oldValue) { return " + this.id + "_onchange(fieldId, newValue, oldValue);}")();
    }

   	/**
	 * 줄 추가전 발생하는 이벤트 .
	 *
	 * @event DataObject#CanAddRecord
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 */
    this.hasCanAddRecordEvent = (typeof self[this.id + "_onCanAddRecord"] != "undefined");
    this.fncCanAddRecordEvent = !this.hasCanAddRecordEvent ? null : new Function("return function () { return " + this.id + "_onCanAddRecord();}")();
    
   	/**
	 * 줄 추가시 발생하는 이벤트 .
	 *
	 * @event DataObject#AddRecord
	 * @type {Object}
	 */
    this.hasAddRecordEvent = (typeof self[this.id + "_onAddRecord"] != "undefined");
    this.fncAddRecordEvent = !this.hasAddRecordEvent ? null : new Function("return function () { return " + this.id + "_onAddRecord();}")();

   	/**
	 * 줄 삭제전 발생하는 이벤트 .
	 *
	 * @event DataObject#CanDeleteRecord
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 */
    this.hasCanDeleteRecordEvent = (typeof self[this.id + "_onCanDeleteRecord"] != "undefined");
    this.fncCanDeleteRecordEvent = !this.hasCanDeleteRecordEvent ? null : new Function("return function () { return " + this.id + "_onCanDeleteRecord();}")();
    
   	/**
	 * 줄 삭제시 발생하는 이벤트 .
	 *
	 * @event DataObject#DeleteRecord
	 * @type {Object}
	 */
    this.hasDeleteRecordEvent = (typeof self[this.id + "_onDeleteRecord"] != "undefined");
    this.fncDeleteRecordEvent = !this.hasDeleteRecordEvent ? null : new Function("return function () { return " + this.id + "_onDeleteRecord();}")();
    
    //  
   	/**
	 * ChangeEvent , addrow, delrow가 발생되지 않는 대량 데이터 변경시 발생하는 이벤트 .
	 *
	 * @event DataObject#DataResetted
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 */
    this.hasDataResettedEvent = (typeof self[this.id + "_onDataResetted"] != "undefined");
    this.fncDataResettedEvent = !this.hasDataResettedEvent ? null : new Function("return function (actionType, error) { return " + this.id + "_onDataResetted(actionType, error);}")();
    
    // ----- 소스내 SKIP 함수가 있으면 참조 --------- 
    this.hasNeedSkipFunction = (typeof self[this.id + "_needSkip"] != "undefined");
    this.fncNeedSkip = !this.hasNeedSkipFunction ? null : new Function("return function () { return " + this.id + "_needSkip();}")();

};

/**
 * @description 			
 *     객체ID로 객체를 선택한다.
 *     예를 들어 '학생' 이란 객체의 ID가 'student'인 경우 
 *     objects['학생'] 또는 getObjectById('student')로 찾게 된다.
 *     
 * @param {String}		id 	- 선택할 객체의 ID
 * 
 * @returns {DataObject}	- 선택돤 객체 
 * 
 * @example
 *     var student = getObjectById("student");       // 학생 객체를 선색
 */
function getObjectById(id){
	var key = null;
	
	for(key in objects){
		if( objects[key] instanceof Function )
			continue;
		
		if( objects[key].id === id )
			return objects[key];
		
		key = null; 
	}
	
	return null;
};

/**
 * @description 
 *     객체에 필드 속성을 추가한다 
 * 
 * @param  {String}		id			추가된 속성의 식별자 ID <br/>
 * @param  {String}		fieldId		추가된 속성의 FieldID(= 식별자 ID) <br/>
 * @param  {String}		name		추가될 속성의 이름 <br/>
 * @param  {String}		propertyGu	추가될 속성의 형태 field,file,function, ... <br/>
 * @param  {String}		dataTypeName	추가될 속성의 데이터형 <br/>
 * @param  {String}		isKey		속성이 키필드 역할을 하는 지 구분 <br/> false: 키필드가 아니다, true: 키필드이다, seq: 순번키필드이다 <br/>
 * @param  {String}		formula		레코드가 생성될 때 디폴트 값을 지정하는 산식  <br/>
 * @param  {Boolean}	permitNull	해당 속성이 널값을 허용하는지 여부  <br/>
 * 
 * @return {propertyInfo} 			추가된 propertyInfo 객체 

 * @example 
 * 	var propertyInfo = object.addProperty ("studentid", "studentid", "학번", "field", "String", "true", "", false);
 */
DataObject.prototype.addProperty = function(id, fieldId, name, propertyGu, dataTypeName, isKey, formula, permitNull){
	// functionname : [DataObject.addProperty]
	
	var propertyInfo = null;
	var functionName = null;
	
	/*	프로퍼티 정보는 데이터 셋에 포함되지 않는 정보는 가져간다
	 *	추가되었을때 데이터 셋에 없으면 추가해 준다
	 */
	
	propertyInfo = new PropertyInfo(id, fieldId, name);
	
//	this.propertyInfos[++this.propertyCount] = propertyInfo;
	this.propertyInfos[this.propertyCount++] = propertyInfo;
	this.propertyInfosById[id] = propertyInfo;
	
	propertyInfo.id = id;
	propertyInfo.fieldId = fieldId;
	propertyInfo.name = name;
	propertyInfo.propertyGu = propertyGu;
	propertyInfo.dataTypeName = dataTypeName;
	propertyInfo.isKey = (isKey === "false" ? false : true); // true/false/seq;
	propertyInfo.isSeqKey = (isKey === "seq" ? true : false); // true/false/seq;
//	propertyInfo.formula = formula;
//	propertyInfo.defaultValue = formula;
	propertyInfo.permitNull = permitNull;
	
	if( formula.length > 0 ){
		propertyInfo.formula = new Function("return " + formula + ";");
		propertyInfo.defaultValue = new Function("return " + formula + ";");
	}
	
//	if (propertyInfo.isSeqKey == "seq"){
//		this.seqKeyFieldId = fieldId;
//	}
	if( propertyInfo.isSeqKey ){
		this.seqKeyFieldId = fieldId;
	}

	var numericTypes = [
        "short", "long", "single", "double", "currency", "bit", "byte", "guid" /* MDB */
        , "smallint", "int", "real", "float", "money", "smallmoney", "bit", "tinyint", "uniqueidentifier", "timestamp", "decimal", "numeric" /* MSSQL */
        , "decimal", "money", "integer", "serial", "smallint", "smallfloat", "float" /* Informix */
        , "float", "number" /* Oracle */
        , "bit", "bit auto_increment", "tinyint", "tinyint unsigned", "tinyint auto_increment", "tinyint unsigned auto_increment", "bigint"
        , "bigint unsigned", "bigint auto_increment", "bigint unsigned auto_increment", "decimal", "integer", "integer unsigned", "int", "int unsigned", "mediumint"
        , "mediumint unsigned", "integer auto_increment", "integer unsigned auto_increment", "int auto_increment"
        , "int unsigned auto_increment", "mediumint auto_increment", "mediumint unsigned auto_increment", "smallint"
        , "smallint unsigned", "smallint auto_increment", "smallint unsigned auto_increment", "double", "double auto_increment", "float"
        , "float auto_increment", "double", "double auto_increment", "year" /* MySQL */
	];

	propertyInfo.isNumericType = (numericTypes.indexOf(dataTypeName.toLowerCase()) >= 0);

	functionName = fieldId.substring(0,1).toUpperCase() + fieldId.substring(1);
	
	if( propertyGu == "field" && functionName != "Seq" ){
		this["set" + functionName] = new Function("return function (value) { return this.setValue(\"" + fieldId + "\", value);}")();
		this["get" + functionName] = new Function("return function() { return this.getValue(\"" + fieldId + "\");}")();
		this["set" + functionName + "All"] = new Function("return function (value) { return this.setValueAll(\"" + fieldId + "\", value);}")();
	}
	// 배치호출
	else if( propertyGu == "service" ){
		/* */
	}
	else if( propertyGu == "function" ){
		this["get" + functionName] = new Function("return function() { return " + formula + ";}")();
	}
	// 파일동작
	else if( propertyGu == "file" ){
		this["set" + functionName] = new Function("return function (value) { return this.setValue(\"" + fieldId + "\", value);}")();
		this["get" + functionName] = new Function("return function() { return this.getValue(\"" + fieldId + "\");}")();
		this["set" + functionName + "All"] = new Function("return function (value) { return this.setValueAll(\"" + fieldId + "\", value);}")();
	}
	
	//메모리 해제
	functionName = null;
	
	// 채우기 필수 키정보 채우기
	if( ("," + keyInfoStr).indexOf("," + this.id + "_" + id + ",") > 0 ){
		propertyInfo.isFillKey = true;
	}
	
	// 데이터셋에 필드 추가
	this.dataSet.addField({
		field: id
		, fieldId: name
		, dataType: (propertyInfo.isNumericType ? "number" : "string")
	}); // ??? 데이터세트와 시트, 객체의 데이터 타입을 정리하여 소스 정비 할 것
	
	return propertyInfo;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋을 교체한다 .
 * 
 * @param  {Object}		dataSet	추가될 데이터를 포함하는 데이터셋 정보 <br/>
 * @return {Object} 				오류정보룰 포함하는 개체 <br/>
 * 									- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.setDataSet(anotherDataset);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.setDataSet = function(dataset){
	// functionname : [DataObject.setDataSet]
	
	var rtnObject = null;
	var errorInfo = null;
	
	this.clear();
	
	// 객체 데이터셋 데이터 갱신
	rtnObject = this.dataSet.setDataSet(dataset);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
//	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = this.startSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_SETDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋에 데이터를 추가한다 .
 * 
 * @param  {Object}		dataSet	추가될 데이터를 포함하는 데이터셋 정보 <br/>
 * @return {Object} 				오류정보룰 포함하는 개체 <br/>
 * 									- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.setDataSet(anotherDataset);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.appendDataSet = function(dataset){
	// functionname : [DataObject.appendDataSet]
	
	var rtnObject = null;
	var errorInfo = null;
	
	//객체 데이터셋 데이터 추가
	rtnObject = this.dataSet.appendDataSet(dataset);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = oldSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_APPENDDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋을 교체한다 .
 * 
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 리스트(배열) <br/>
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 컬럼 정보 <br/>
 * @return {Object} 			오류정보룰 포함하는 개체 <br/>
 * 								- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.setDataArray(anotherDataArray, fieldInfo);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.setDataArray = function(dataArray, fieldInfo){
	// functionname : [DataObject.setDataArray]
	
	if( typeof fieldInfo == "undefined" ){
		fieldInfo = this.dataSet.columnInfos;
	}
	
	var rtnObject = null;
	var errorInfo = null;
	
	this.clear();
	
	// 객체 데이터셋 데이터 갱신
	rtnObject = this.dataSet.setDataArray(dataArray, fieldInfo);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
//	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = this.startSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_SETDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋에 데이터를 추가한다 .
 * 
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 리스트(배열) <br/>
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 컬럼 정보 <br/>
 * @return {Object} 			오류정보룰 포함하는 개체 <br/>
 * 								- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.appendDataArray(anotherDataArray, fieldInfo);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.appendDataArray = function(dataArray, fieldInfo){
	// functionname : [DataObject.appendDataArray]
	
	if( typeof fieldInfo == "undefined" ){
		fieldInfo = this.dataSet.columnInfos;
	}
	
	var rtnObject = null;
	var errorInfo = null;
	
	//객체 데이터셋 데이터 추가
	rtnObject = this.dataSet.appendDataArray(dataArray, fieldInfo);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = oldSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_APPENDDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋에서 데이터셋을 삭제하고 초기화한다.
 * 
 * @return {Void}
 * @example 
 * 	var rtnObject = object.removeDataSet();
 */
DataObject.prototype.removeDataSet = function(){
	// functionname : [DataObject.removeDataSet]
	
	var errorInfo = null;
	
	// 데이터셋 초기화
	this.dataSet.clear();
	this.dataSet = null;
	this.dataSet = new WsDataSet();
	
	this.maxSeq = 0;
    this.seq = 0;
    this.count = 0;
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.FireEvent && this.hasDataResettedEvent ){
		errorInfo = {code: 0, message: ""};
		
		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_REMOVEDATASET, errorInfo);
		
		// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
		if( errorInfo.code > 0 )
			alert(errorInfo.message);
		
		// 메모리 해제
		errorInfo = null;
	}
	
	return;
};

/**
 * @description 
 *     객체 데이터를 시트 컨트롤에 갱신한다.
 * 
 * @param  {String}		sheetName	데이터를 갱신할 시트명
 * @return {Boolean} 				시트 데이터를 갱신한다면 true를 리턴
 * @example 
 * var result = object.updateDataLinkedSheet("Sheet_1");
 */
DataObject.prototype.updateDataLinkedSheet = function( sheetName ){
	//예외처리
	//1. 시트 명 파라메터가 없는 경우 예외처리
	if( typeof sheetName == "undefined" || sheetName == null )
		return false;
	
	var control = null;
	var linkedObjectList = null;
	var linkedObjectSize = 0;
	var isLinkedSheet = false;
	var i = 0, j = 0;
	
	//2. 시트 컨트롤이 없는 경우 예외처리
	control = controls["" + sheetName];
	if( typeof control == "undefined" || control == null )
		return false;
	//3. 시트에 연결된 객체가 없는 경우 예외처리
	linkedObjectList = control.linkedObjects;
	if( typeof linkedObjectList == "undefined" || linkedObjectList == null )
		return false;
	//4. 시트에 연결된 객체 중 자신(객체)이 없는 경우 예외처리
	for(i = 0, linkedObjectSize = linkedObjectList.length && !isLinkedSheet; i < linkedObjectSize; i++){
		isLinkedSheet = (linkedObjectList[i] === this);
	}
	if( !isLinkedSheet ){
		linkedObjectList = null; control = null;
		return false;
	}
	
	var linkedObjectId = this.id;
	var propertyCount = this.propertyCount;
	var columnCount = control.columns.length;
	var columnInfo = null;
	var needMappingData = false;
	
	//객체 프로퍼티와 열결된 시트 컬럼ID 체크
	for(i = 0; i < columnCount && !needMappingData; i++){
		columnInfo = control.columns[i];
		
		//객체 프로퍼티와 연결된 컬럼이 없는 경우
		if( !(linkedObjectId in columnInfo.linkedPropertys) )
			continue;
		//객체 프로퍼티와 연결된 컬럼의 아이디가 다르면 매핑데이터 생성 필요
		if( columnInfo.colId != columnInfo.linkedPropertys[linkedObjectId] )
			needMappingData = true;
		
		//메모리 해제
		columnInfo = null;
	}
	
	var remakeDataset = null;
	var recordLength = this.dataSet.getCount();
	var recordList = null;
	var recordItem = null;
	var dataRow = null;
	
	//매핑데이터 생성 여부 체크하여 데이터 생성
	if( needMappingData ){
		remakeDataset = new WsDataSet();
		remakeDataset.deleteDataPolicy = WSDATASET_DELETE_POLICY.LEAVE_RECORD_IN_DATA;
		recordList = [];
		
		for(i = 0; i < recordLength; i++){
			recordItem = recordList[i] = {};
			dataRow = this.dataSet.data[i];
			
			for(j = 0; j < columnCount; j++){
				columnInfo = control.columns[j];
				if( !linkedObjectId in columnInfo.linkedPropertys ) continue;
				recordItem[columnInfo.colId] = dataRow[columnInfo.linkedPropertys[linkedObjectId]];
				columnInfo = null;
			}
			
			if( typeof dataRow.__STATE__ != "undefined" ){
				recordItem.__STATE__ = {"updateGu" : dataRow.__STATE__.updateGu};
			}
			
			dataRow = null; recordItem = null;
		}
		
		remakeDataset.setDataArray(recordList);
		recordLength = remakeDataset.getCount();
		
		//메모리 해제
		recordList.clear(); recordList = null;
		linkedObjectId = null;
	}
	else{
		remakeDataset = this.dataSet;
	}
	
	//시트 데이터 갱신
	control._updateDataSetByLinkedObject(remakeDataset);
	//시트 objectSeq 갱신
	if( this.seqKeyFieldId.length > 0 ){
		var oldSeq = this.seq;
		
		for(i = this.startSeq, j = control.startRowColNum; i <= recordLength; i++, j++){
			this.seq = i;
			control.rows(j).objectSeq = this.getValue(this.seqKeyFieldId);
		}
		
		this.seq = oldSeq;
	}
	else{
		for(i = this.startSeq, j = control.startRowColNum; i <= recordLength; i++, j++){
			control.rows(j).objectSeq = i;
		}
	}
	
	//메모리 해제
	control = null;
	if( remakeDataset !== this.dataSet ) remakeDataset.clear();
	remakeDataset = null; linkedObjectList = null;
	
	return true;
};

DataObject.prototype.resetState = function(){
	//예외처리
	//아래의 경우 객체 레코드의 상태를 수정하지 않음
	// 1. 객체로드로 조회한 경우
	// 2. 객체의 dni모드가 true인 경우 
	if( objectManager.dataloaded || this.dniMode ) return;
	
	var resetUpdateGuList = ["N", "I", "U"];
	
	//
	var propertyInfos = this.propertyInfos;
	var propertyCount = this.propertyCount;
	var propertyId = null;
	var recordList = this.dataSet.data;
	var recordSize = recordList.length;
	var record = null;
	var recordOld = null;
	var updateGu = null;
	var i = 0; var j = 0;
	
	for(i = 0; i < recordSize; i++){
		record = recordList[i];
		recordOld = record.__STATE__.oldData;
		updateGu = record.__STATE__.updateGu;
		
		if( resetUpdateGuList.indexOf(updateGu) >= 0 ){
			//현재 레코드의 데이터와 이전 데이터를 일치시킴.
			for(j = 0; j < propertyCount; j++, propertyId = null){
				propertyId = propertyInfos[j].id;
				recordOld[propertyId] = record[propertyId];
			}
			//업데이트 구분을 N으로 설정
			record.__STATE__.updateGu = "N";
		}
		
		//메모리 해제
		updateGu = null; recordOld = null; record = null;
	}
	
	//메모리 해제
	recordList = null;
	propertyInfos = null;
	resetUpdateGuList = null;
	
	/*
	//객체와 연결된 시트 컨트롤의 데이터를 갱신
	var key = null;
	var control = null;
	//현재 화면에 시트 컨트롤이 존재하는 경우에만 갱신
	if( typeof EasySheet != "undefined" ){
		for(key in controls){
			control = controls[key];
			//컨트롤이 시트인 경우에만 갱신
			if( control instanceof EasySheet ){
				for(i = control.linkedObjects.length - 1; i >= 0; i--){
					if( control.linkedObjects[i].id == this.id ){
						this.updateDataLinkedSheet(control.controlName);
//						this.setSeq(this.startSeq);
					}
	            }
	        }
			//메모리 해제
			control = null; key = null;
		}
	}
	*/
};

/**
 * @description 
 *     데이터를 clear하면 전체줄을 모두 지우고 한줄을 추가한다. <br/>
 *     객체의 모든 설정이 초기화 된다 .<br/>
 *     <br/>
 *     이때 객체의 설정된 속성 정보는 계속 유효하다. <br/>
 * 
 * @return {Void}  

 * @example 
 * 	object.clear();
 */
DataObject.prototype.clear = function(){
	// functionname : [DataObject.clear]
	
	var propertyInfo = null;
	var propertyNum = 0;
	var errorInfo = null;
	
	this.dataSet.clearData(); 
	
	this.maxSeq = 0;
	this.seq = 0;
	this.count = 0;		// 집계함수 연산에 필요한 값
	
	for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++){
		propertyInfo = this.propertyInfos[propertyNum /*+ this.startSeq*/];
		
		if( propertyInfo.isNumericType ){
			propertyInfo.min = 0;
			propertyInfo.max = 0;
			propertyInfo.sum = 0;
		}
		
		// 메모리 해제
		propertyInfo = null;
	}
	
	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_CLEAR, errorInfo);
//		
//		if( errorInfo.code != 0 ){
//			alert(errorInfo.message);
//		}
//		
//		// 메모리 해제
//		errorInfo = null;
//	}
	
	return;
};

/**
 * @description 
 *     현재 포커싱되어 처리중인 레코드가 아직 아무 작업도 진행되지 않고 비어 있는지 여부를 말해주는 함수. <br/>

 * @return {Boolean}		- 비어있는 레코드이면 true를 리턴한다 
 * @example 
 * 	// 빈줄이면 메시지를 보여 준다. 
 * 	if (object.isEmpty()){
 *  	alert("아직 처리되지 않은 레코드입니다.");
 * 	}
 */
DataObject.prototype.isEmpty = function(){
	// functionname : [DataObject.isEmpty]
	
	return (
		this.dataSet.data.length == 0
		|| (this.dataSet.data.length == 1 && ["X", "D"].indexOf(this.getUpdateGu(this.seq)) >= 0)
	);
};

/**
 * @description 
 *     해당 순번에 해당하는 레코드의 IUD 상태를 리턴한다   
 *     
 * @return {String} 		
 */
DataObject.prototype.getUpdateGu = function(seq) {
	// functionname : [DataObject.getUpdateGu]
	
	return this.dataSet.getState((seq - this.startSeq), "updateGu");
}
/**
 * @description 
 *     해당 순번에 해당하는 레코드의 IUD 상태를 설정한다   
 *     
 * @return {String} 		
 */
DataObject.prototype.setUpdateGu = function(seq, updateGu) {
	// functionname : [DataObject.setUpdateGu]
	
	return this.dataSet.setState((seq - this.startSeq), "updateGu", updateGu);
}

/**
 * @description 
 *     객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 되는 속성의 ID를 채운다. <br/> 
 *     대량의 데이터를 로드해서 기준을 바꾸어 가며 화면에 표시하고 작업할 때 사용한다. <br/>

 * @return {Void}
 * @example 
 * 	// studentId 필드를 채우기의 기준으로 삼는다. 
 * 	object.setFillKeyFieldId("studentId");
 */
DataObject.prototype.setFillKeyFieldId = function(fieldId){
	// functionname : [DataObject.setFillKeyFieldId]
	
	this.fillKeyFieldName = fieldId;
	this.fillKeyFieldId = fieldId;
};

/** 
 * @deprecated since version 5.0, object.setFillKeyFieldId() 로 대체 
 * */
DataObject.prototype.setFillKeyFieldName = function(fieldId){
	// functionname : [DataObject.setFillKeyFieldName]
	
	this.setFillKeyFieldId(fieldId);
};

/**
 * @description 
 *     인수로 받은 순번에 해당하는 레코드를 찾아 순번 필드값을 갱신한다. <br/>
 *     순번과 순번 필드의 개념은 다르다. 
 * 
 * @param  {Number}	seq			변경항 데이터의 순번 <br/>
 * @param  {Number}	seqValue	새로운 순번 값 <br/>
 * 
 * @return {Void} 
 * @example 
 * 
 * 	object.updateSeqField(1, 100);		// 1번 레코드의 순번 값을 100으로 변경한다
 */
DataObject.prototype.updateSeqField = function(seq, seqValue){
	// functionname : [DataObject.updateSeqField]
	
	var rowNum = 0;
	var oldSeq = 0;
	
	if( this.seqKeyFieldId == "" ){
		rowNum = seq - this.startSeq;
		
		this.dataSet.setState(rowNum, "tempSeqKey", seqValue);
    }
	else{
		oldSeq = this.seq;
		
		this.seq = seq;
		this.setValue(this.seqKeyFieldId, seqValue);
		this.seq = oldSeq;
	}
	
	return;
};

/**
 * @description 
 * 		현재 포커싱되어 처리중인 레코드에서 인수로 지정한 레코드로 이동하는 함수이다.<br/>
 *  
 * @return {Void}		
 * @example 
 * 	// 1번 Seq로 데이터를 이동한다. 
 * 	object.setSeq(1);
 */
DataObject.prototype.setSeq = function(seq){
	// functionname : [DataObject.setSeq]
	
	if( this.seq == seq )
		return true;
	
	if( seq > this.maxSeq - 1 + this.startSeq ){
		alert(getText("message_object_001", "현재의 줄 수{0}보다 클 수는 없습니다.", [this.maxSeq]));
		return false;
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanSeqChangeEvent ){
		if( !this.fncCanSeqChangeEvent(this.seq, seq) )
			return false;
	} 	

	var result = true;
	var oldSeq = this.seq;
	
	this.seq = seq;
	
//	// seq이면 _onSeqChanged이벤트를 호출하지 않는다
//	if( seq == this.startSeq ) return;
	
	if( this.FireEvent && this.hasSeqChangeEvent ){
		result = this.fncSeqChangeEvent(oldSeq, seq);
		
		if( typeof result == "boolean" && !result ){
			this.seq = oldSeq;
			return false;
		}
	}
	
	return true;
};

/**
 * @description 
 * 		현재 포커싱되어 처리중인 레코드 다음의 유효레코드로 이동하고 이동한 레코드의 seq값을 돌려주는 함수이다.<br/>
 * 		다음 줄이 삭제된 레코드인 경우 제외하고 다음 유효한 레코드로 이동하게 된다. 
 * 		이떄 유효한 레코드가 없으면 첫레코드로 되돌아 간다.
 *  
 * @return {Boolean}		- 비어있는 레코드이면 true를 리턴한다 
 * @example 
 * 	// 빈줄이면 메시지를 보여 준다. 
 * 	var seq = object.isEmpty();
 */
DataObject.prototype.moveNext = function(){
	// functionname : [DataObject.moveNext]
	
	var haveNextData = false;
	var seq = 0;
	var oldSeq = this.seq;
	var nextSeq = 0;
	var rowNum = 0;
	
	if( this.fillkeyFieldValue.length == 0 ){
		for(seq = this.seq + 1; seq < this.dataSet.data.length && !haveNextData; seq++){
			rowNum = seq - this.startSeq;
			
			if( ["X","D"].indexOf(this.getUpdateGu(seq)) < 0 ){
				haveNextData = true;
				nextSeq = seq;
			}
		}
	}
	else{
		for(seq = this.seq + 1; seq < this.dataSet.data.length && !haveNextData; seq++){
			rowNum = seq - this.startSeq;
			
			if( ["X","D"].indexOf(this.getUpdateGu(seq)) < 0 ){
				if( this.dataSet.data[rowNum][this.fillKeyFieldId] == this.fillkeyFieldValue ){
					haveNextData = true;
					nextSeq = seq;
				}
			}
		}
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanSeqChangeEvent ){
		if( !this.fncCanSeqChangeEvent(this.seq, nextSeq) )
			return false;
	}
	
	if( haveNextData )
		this.seq = nextSeq;
	else
		this.seq = this.startSeq;	// 다음 레코드가 없으면 처음으로 돌아간다.
	
	if( this.FireEvent && this.hasSeqChangeEvent )
		this.fncSeqChangeEvent(oldSeq, this.seq);
	
	return haveNextData;
};

/**
 * @description 
 *     객체에 레코드를 한 줄 추가한다. 
 * @param  {Boolean}	withEvents		AddRecord 이벤트를 발생시킬것인지 여부 
 * @return {Number} 					추가된 레코드의 순번을 리턴한다. 
 * @example 
 * 
 * 	var seq = object.addNewData();		// AddRecord 이벤트 발생
 * 	var seq = object.addNewData(false);	// AddRecord 이벤트 발생 안함 
 * 
 */
DataObject.prototype.addNewData = function(withEvents){
	// functionname : [DataObject.addNewData]
	
	if( typeof withEvents == "undefined" )
		withEvents = true;
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanAddRecordEvent && withEvents ){
		if( !this.fncCanAddRecordEvent() ){
			return -1;
		}
	}
	
	var rtnObject = null;
	var oldSeq = this.seq;
	var newSeq = 0;
	
	// 줄추가후 시퀀스를 바꿔 데이터를 넣기 위해서 원래 시퀀스에서 잠시 이동한다.
	rtnObject = this.dataSet.insertData();
	
	if( rtnObject.result == false ){
		alert(rtnObject.errorMsg);
		return -1;
	}
	else{
		this.dataSet.setState(rtnObject.recordIndex, "updateGu", "X");
	}
	
	this.maxSeq++;
	this.count++;
	this.seq = this.maxSeq;		// this.setSeq(this.maxSeq)를 사용하면 큰일남 seq-row대응전에 seqChange이벤트가 일어나  없는 objectseq를 참조
	
	if( this.seqKeyFieldId == "" )
		this.dataSet.setState(this.seq - this.startSeq, "tempSeqKey", this.seq);
	else {
		var fireEvent_Mem = this.FireEvent;
		this.FireEvent = withEvents;		
		this.setValue(this.seqKeyFieldId, this.seq);
		this.FireEvent = fireEvent_Mem;		
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.FireEvent && this.hasAddRecordEvent && withEvents ){
		this.fncAddRecordEvent();
	}
	
	// 화면은 아직 원래의 객체를 가리키고 있으므로 원래의 시퀀스로 환원한다
	newSeq = this.seq;
	this.seq = oldSeq;
	
	// 메모리 해제
	rtnObject = null;
	
	return newSeq;
};

/**
 * @description 
 *     인수로 받은 순번에 해당하는 레코드를 찾아 삭제한다 <br/>
 *     데이터가 삭제되는 것은 아니며 삭제 플레그가 붙고, 다른 함수의 처리과정에서 제외된다. 
 * @param  {Number}	seq			변경항 데이터의 순번 <br/>
 * @return {Void} 
 * @example 
 * 
 * 	object.deleteSeq(1);		// 1번 레코드를 삭제한다
 * 
 */
DataObject.prototype.deleteSeq = function(seq){
	// functionname : [DataObject.deleteSeq]
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanDeleteRecordEvent ){
		if( !this.fncCanDeleteRecordEvent() )
			return -1;
	}
	
	var data = null;
	var key = null;
	var propertyInfo = null;
	var oldValue = null;
	var rowNum = 0;
	
	// 집계필드 갱신
	rowNum = seq - this.startSeq;
	data = this.dataSet.data[rowNum];
	
	for(key in data){
		//필드의 기본정보 __XXXX__를 레코드에 추가하지 않음
		if( /^__.*__$/.test(key) )
			continue;
		
		propertyInfo = this.propertyInfosById[key];
		oldValue = data[key];
		
		if( propertyInfo.isNumericType ){
			this._updateMaxMin(key, oldValue, 0, seq);
//			propertyInfo.sum -= oldValue;
			this._updateSum(key, oldValue, 0);
		}
	}
	
	this.dataSet.deleteData(rowNum);
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.FireEvent && this.hasDeleteRecordEvent ){
		this.fncDeleteRecordEvent();
	}
	
	this.count--;
	
	return;
};

/**
 * @description 
 *     두개의 순번을 받아 서로 위치를 바꾼다.  
 * 
 * @param  {Number}	seqFrom		맞바꿀 앞레코드의 순번 <br/>
 * @param  {Number}	seqTo		맞바꿀 뒷레코드의 순번 <br/>
 * 
 * @return {Void} 
 * @example 
 * 
 * 	object.changeSeq(1,2);		// 1번 레코드와 2번 레코드의 위치를 바꾼다 
 * 
 */
DataObject.prototype.changeSeq = function(seqFrom, seqTo){
	// functionname : [DataObject.changeSeq]
	
	var rowNumFrom = 0;
	var rowNumTo = 0;
	var recordFrom = null;
	var recordTo = null;
	var errorInfo = null;
	
	rowNumFrom = seqFrom - this.startSeq;
	rowNumTo = seqTo - this.startSeq;
	recordFrom = JSON.parse(JSON.stringify(this.dataSet.data[rowNumFrom]));
	recordTo = JSON.parse(JSON.stringify(this.dataSet.data[rowNumTo]));
	
	this.dataSet.data[rowNumFrom] = null;
	this.dataSet.data[rowNumFrom] = recordTo;
	this.dataSet.data[rowNumTo] = null;
	this.dataSet.data[rowNumTo] = recordFrom;
	
	// 메모리 해제
	recordTo = null; recordFrom = null;
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_CHANGESEQ, errorInfo);
//		
//		if( errorInfo.code != 0 ){
//			alert(errorInfo.message);
//		}
//		
//		// 메모리 해제
//		errorInfo = null;
//	}
};

/**
 * @description 
 *     인수로 받은 순번에 해당하는 레코드를 찾아 직전 레코드 값으로 데이터를 채운다  <br/>
 * @param  {Number}	seq			변경항 데이터의 순번 <br/>
 * @return {Void} 
 * @example 
 * 
 * 	copyUpperData(2);		// 2번 레코드의 각 프로퍼티의 값을 1번 레코드의 각 프로퍼티의 값으로 채운다.
 */
DataObject.prototype.copyUpperData = function(seq){
	// functionname : [DataObject.copyUpperData]
	
	if( seq <= this.startSeq )
		return;
	
	var rowNum = 0;
	var recordFrom = null;
	var recordTo = null;
	var key = null;
	var propertyInfo = null;
	var newValue = null;
	var oldValue = null;
	var data = null;
	
	//레코드에 필드 추가
	rowNum = seq - this.startSeq;
	recordFrom = this.dataSet.data[rowNum - 1];
	recordTo = this.dataSet.data[rowNum];
	
	for(key in recordTo){
		//필드의 기본정보 __XXXX__를 레코드에 추가하지 않음
		if(/^__.*__$/.test(key))
			continue;
		
		propertyInfo = this.propertyInfosById[key];
		oldValue = recordTo[key];
		newValue = recordFrom[key];
		data = {};
		data[key] = newValue;
		
//		this.setValue(key, newValue);
		this.dataSet.updateData(rowNum, data);
		
		if( propertyInfo.isNumericType ){
			this._updateMaxMin(key, oldValue, newValue, seq);
//			propertyInfo.sum += newValue - oldValue;
			this._updateSum(key, oldValue, newValue);
		}
		
		//메모리 해제
		data = null; newValue = null; oldValue = null; propertyInfo = null; key = null;
	}
	
	// 메모리 해제
	oldValue = null; newValue = null; propertyInfo = null; key = null;
	dataAfter = null; dataBefore = null;
	
	return;
};

/**
 * @description 
 *     순번정보를 지정하여 전체적으로 순번을 조정하게 한다.
 *     순번을 ":"로 연결한 문자열이나 순번의 배열을 받아 순서를 조정한다.
 * @param  {String|Number[]}	순번을 ":"로 연결한 문자열이나 순번의 배열<br/>
 * @return {Void} 
 * @example 
 * 
 * 	object.adjustOrder("1:4:5:3:2");		// 현재 1,2,3,4,5번 레코드를 다시 1,4,5,3,2 순서로 위치를 조정한다 
 * 	object.adjustOrder([1, 4, 5, 3, 2]);	// 현재 1,2,3,4,5번 레코드를 다시 1,4,5,3,2 순서로 위치를 조정한다 
 * 
 */
DataObject.prototype.adjustOrder = function(orderInfo){
	// functionname : [DataObject.adjustOrder]
	
	var orders = null;
	var result = true;
	
	orders = Array.isArray(orderInfo) ? orderInfo : orderInfo.split(":");
	
	if( orders.length != this.dataSet.getCount() )
		return false;
	
	var errorInfo = null;
	var datasOrigin = null;
	var datasTemp = null;
	var rowNum = 0;
	var seq = 0;
	var i = 0;
	
	datasOrigin = JSON.parse(JSON.stringify(this.dataSet.data));
	datasTemp = [];
	
	for(i = 0; i < orders.length; i++){
		seq = parseInt(1* orders[i]);
		rowNum = seq - this.startSeq;
		
		datasTemp.push(JSON.parse(JSON.stringify(datasOrigin[rowNum])));
	}
	
//	for(i = datas.length-1; i >= 0; i--)
//		datas.pop();
	
	this.dataSet.clearData();
	this.dataSet.data = null;
	this.dataSet.data = JSON.parse(JSON.stringify(datasTemp));
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent("adjustOrder", errorInfo);
//		
//		if( errorInfo.code != 0 ){
//			alert(errorInfo.message);
//			result = false;
//			
//			//이전 상태로 복구
//			this.dataSet.data.clearData();
//			this.dataSet.data = null;
//			this.dataSet.data = JSON.parse(JSON.stringify(datasOrigin));
//		}
//		
//		// 메모리 해제
//		errorInfo = null;
//	}
	
	// 이전 데이터 복사본 비움
	for(i = datasOrigin.length-1; i >= 0; i--)
		datasOrigin.pop();
	// 정렬 데이터  비움
	for(i = datasTemp.length-1; i >= 0; i--)
		datasTemp.pop();
	//메모리 해제
	datasOrigin = null; datasTemp = null; orders = null;
	
	return result;
};

/**
 * @description 
 *     현재 레코드에서 지정된 속성의 값을 리턴한다. 
 * 
 * @param  {String}						fieldId		찾을 값의 FieldID<br/>
 * 
 * @return {String|Number|Boolean|Object} 			현재 

 * @example 
 * 	var value = object.getValue("studentid");
 */
DataObject.prototype.getValue = function(fieldId){
	// functionname : [DataObject.getValue]
	
	var value = this.dataSet.data[this.seq - this.startSeq][fieldId];
	
	//만약 데이터가 null 또는 undefined 라면 빈 문자열로 수정함
	if( value == null || typeof value == "undefined" )
		value = "";
	
	return value;
};


/**
 * @description 
 *     현재 레코드에서 지정된 속성의 값을 변경한다. 
 * 
 * @param  {String}							fieldId		변경할 칼럼의 FieldID<br/>
 * @param  {String|Number|Boolean|Object}	value		변경할 칼럼값<br/>
 * 
 * @return {Boolean} 						현재 

 * @example 
 * 	var success = object.setValue("studentid", "20010101");
 */
DataObject.prototype.setValue = function(fieldId, value){
	// functionname : [DataObject.setValue]
	
//	if (this.notSetValue) return true;
	
	if( this.seq < this.startSeq )
		return false;
	
	var result = false;
	var rowNum = 0;
	var record = null;
	var oldValue = null;
	var updateGu = null;
	var json = null;
	var propertyInfo = null;
	var oldMax = null;
	var oldMin = null;
	
//	if( this.propertyInfosById[fieldId].isNumericType ){
//		value = 1 * value;
//	}
	
	rowNum = this.seq - this.startSeq;
	record = this.dataSet.data[rowNum];
	oldValue = record[fieldId];	// 기존 데이터 메모
//	updateGu = record.__STATE__.updateGu;
	updateGu = this.dataSet.getState(rowNum, "updateGu");
	propertyInfo = this.propertyInfosById[fieldId];
	
	if( oldValue === value && !this.dataUp )		// this.dataUp == true 이면 같은 값이더라도 업데이트 한다
		return true;
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanChangeEvent ){
		result = this.fncCanChangeEvent(fieldId, value);
		
		if( typeof result == "boolean" && !result )
			return false;
	}
	
	// 새로운 값으로 변경
	json = {};
	json[fieldId] = value;
	
	this.dataSet.updateData(rowNum, json);
	
	if( objectManager.dataloaded || !this.dniMode){
		var isChanged = false;
		var key = null, propInfo = null;
		var propValue = null, propOldValue = null;
		
		for(key in record){
			propInfo = this.propertyInfosById[key];
			
			// 키가 아니고 어느 콘트롤엔가 연결된 속성만 대상으로 Dirty를 파악한다.
			if( typeof propInfo != "undefined" && (!(propInfo.isKey || propInfo.isSeqKey) && propInfo.needDirtyCheck) ){
				propValue = record[key];
				propOldValue = record.__STATE__.oldData[key];
				
				if( propInfo.listLinked ){ // 콤보나 리스트는 디폴트 값이 "-1"이다
					if( propValue == propOldValue ){ /*통과*/ }
					else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
					else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
					else { isChanged = true; }
				}
				else{
					isChanged = isChanged || (propValue != propOldValue);
				}
				
				//메모리 해제
				propOldValue = null; propValue = null;
			}
			
			//메모리 해제
			propInfo = null; key = null;
			
			if( isChanged ) break;
		}
		
		if( updateGu == "X" ){
			if( isChanged ) updateGu = "I";
		}
		else if( updateGu == "N" ){
			if( isChanged ) updateGu = "U";
		}
		else if( updateGu == "I" ){
			if( !isChanged ) updateGu = "X";
		}
		else if( updateGu == "U" ){
			if( !isChanged ) updateGu = "N";
		}
		
		this.dataSet.setState(rowNum, "updateGu", updateGu);
	}
	// 가저오기로 채워 젔으면 I-> X 로 돌아가서는 안된다
	else{
		if( updateGu == "X" ){
			this.dataSet.setState(rowNum, "updateGu", updateGu);
			
			// DirtyCheck이 필요 없으면 X인 경우 그대로 둔다
			// DirtyCheck이 필요하면 조건에 따라 I로 강제 조정 한다 
			if( propertyInfo.needDirtyCheck ){
				// 객체키인 경우 데이터 시트에 링크되어 있으면 시트가 변하면 변경으로 간주되어야 하므로 I로 강제조정한다
				if( propertyInfo.isKey ){
					if( propertyInfo.sheetLinked ) this.dataSet.setState(rowNum, "updateGu", "I");
				}
				else if( propertyInfo.isSeqKey ){
					// 통과한다
				}
				else{
					this.dataSet.setState(rowNum, "updateGu", "I"); // 키가 아니면서 DirtyCheck이므로 I로 강제조정한다 
				}
			}
		}
	}
	
	// this.dataUp 가 true 일때 updateGu값 바꾼후 같은값이면 바로 리턴시키키 위해
	if( oldValue === value )
		return true;
	
	// 집계필드 갱신
	if( propertyInfo.isNumericType ){
		value = 1 * value;
		oldValue = 1 * oldValue;
		
		oldMax = propertyInfo.max;
		oldMin = propertyInfo.min;
		
		this._updateMaxMin(fieldId, oldValue, value, this.seq);
//		propertyInfo.sum += value - oldValue;
		this._updateSum(fieldId, oldValue, value);
	}
	
	var funcFieldInfos = [];
	var funcFieldInfo = null;
	var key = null; var value = null; var oldValue = null;
	var i = 0;
	
	//프로퍼티 구분이 function이면서 데이터타입이 number인 프로퍼티의 데이터, 집계데이터를 갱신한다
	for(i = 0, propertyInfo = null; i < this.propertyCount; i++, propertyInfo = null){
		propertyInfo = this.propertyInfos[i];
		
		if( propertyInfo.isNumericType && propertyInfo.propertyGu == "function" ){
			key = propertyInfo.fieldId;
			value = propertyInfo.formula();
			oldValue = record[key];
			
			if( value != oldValue ){
				funcFieldInfo = {};
				funcFieldInfo["fieldId"] = key;
				funcFieldInfo["value"] = value;
				funcFieldInfo["oldValue"] = oldValue;
				funcFieldInfo["oldMin"] = propertyInfo.min;
				funcFieldInfo["oldMax"] = propertyInfo.max;
				funcFieldInfos.push(funcFieldInfo);
				
				record[key] = value;
				this.dataSet.setOldValue(rowNum, key, oldValue);
				
				value = 1 * value;
				propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
				propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//				propertyInfo.sum += value - oldValue;
				this._updateSum(key, oldValue, value);
				
				funcFieldInfo = null;
			}
			
			oldValue = null; value = null; key = null;
		}
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( fillState == FILLSTATE_NONE ){
		if( this.FireEvent && this.hasChangeEvent ){
			result = this.fncChangeEvent(fieldId, value, oldValue);
			
			//리턴 결과가 false인 경우 이전 상태로 복구함
			if( typeof result == "boolean" && !result ){
				//이전 데이터로 복구
				json[fieldId] = oldValue;
				this.dataSet.updateData(rowNum, json);
				
				//집계필드 복구
				if( propertyInfo.isNumericType ){
					propertyInfo.max = oldMax;
					propertyInfo.min = oldMin;
//					propertyInfo.sum = propertyInfo.sum - value + oldValue;
					this._updateSum(fieldId, value, oldValue);
				}
				
				//프로퍼티 구분이 function이면서 데이터타입이 number인 프로퍼티 집계 데이터 복구
				for(i = 0, funcFieldInfo = null, propertyInfo = null; i < funcFieldInfos.length; i++, funcFieldInfo = null, propertyInfo = null){
					funcFieldInfo = funcFieldInfos[i];
					propertyInfo = this.propertyInfosById[funcFieldInfo.fieldId]
					
					record[funcFieldInfo.fieldId] = funcFieldInfo.oldValue;
					
					propertyInfo.min = funcFieldInfo.oldMin;
					propertyInfo.max = funcFieldInfo.oldMax;
//					propertyInfo.sum = propertyInfo.sum - funcFieldInfo.value + funcFieldInfo.oldValue;
					this._updateSum(funcFieldInfo.fieldId, value, oldValue);
				}
				
				//메모리 해제
				funcFieldInfos.clear(); funcFieldInfos = null;
				propertyInfo = null; json = null; oldValue = null; record = null;
				
				return false;
			}
		}
	}
	
	//메모리 해제
	funcFieldInfos.clear(); funcFieldInfos = null;
	propertyInfo = null; json = null; updateGu = null; oldValue = null; record = null;
	
	return true;
};

/**
 * @description 
 *     현재 레코드에서 지정된 속성의 값을 변경한다. <br/>
 *     전체 줄 속의 프로퍼티 값을 동시에 갱신하는 경우 사용
 * 
 * @param  {String}							fieldId		변경할 칼럼의 FieldID<br/>
 * @param  {String|Number|Boolean|Object}	value		변경할 칼럼값<br/>
 * 
 * @return {Boolean} 						오류 발생여부 

 * @example 
 * 	var success = object.setValueAll ("studentAge", 1);
 */
DataObject.prototype.setValueAll = function(fieldId, value){
	// functionname : [DataObject.setValueAll]
	
	var rowNum = 0;
	var seq = 0;
	var record = null;
	var recordCount = 0;
	var oldValue = null;
	var updateGu = null;
	var json = null;
	var propertyInfo = null;
	
	// 먼저 전체 데이터를 바꾼다
	for(rowNum = 0, recordCount = this.dataSet.data.length; rowNum < recordCount; rowNum++, record = null){
		seq = rowNum + this.startSeq;
		
		// 아래에서 setValue를 처리하기 위해서, 여기서 고치면 이벤트가 일어날 수 없다.
		if( rowNum == this.seq - this.startSeq )
			continue;
		
		// 삭제된데이터
		if( ["D", "E"].indexOf(this.getUpdateGu(seq)) >= 0 )
			continue;
		
		record = this.dataSet.data[rowNum];
		oldValue = record[fieldId]; //기존 데이터 메모
		updateGu = this.dataSet.getState(rowNum, "updateGu");
		
		// this.dataUp == true 이면 같은 값이더라도 업데이트 한다
		if( oldValue === value && !this.dataUp )
			continue;
		
		// 새로운 값으로 변경
		json = {};
		json[fieldId] = value;
		
		this.dataSet.updateData(rowNum, json);
		
		// updateGu 갱신
		if( objectManager.dataloaded || !this.dniMode){
			var isChanged = false;
			var key = null, propInfo = null;
			var propValue = null, propOldValue = null;
			
			for(key in record){
				propInfo = this.propertyInfosById[key];
				
				// 키가 아니고 어느 콘트롤엔가 연결된 속성만 대상으로 Dirty를 파악한다.
				if( typeof propInfo != "undefined" && (!(propInfo.isKey || propInfo.isSeqKey) && propInfo.needDirtyCheck) ){
					propValue = record[key];
					propOldValue = record.__STATE__.oldData[key];
					
					if( propInfo.listLinked ){ // 콤보나 리스트는 디폴트 값이 "-1"이다
						if( propValue == propOldValue ){ /*통과*/ }
						else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
						else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
						else { isChanged = true; }
					}
					else{
						isChanged = isChanged || (propValue != propOldValue);
					}
					
					//메모리 해제
					propOldValue = null; propValue = null;
				}
				
				//메모리 해제
				propInfo = null; key = null;
				
				if( isChanged ) break;
			}
			
			if( updateGu == "X" ){
				if( isChanged ) updateGu = "I";
			}
			else if( updateGu == "N" ){
				if( isChanged ) updateGu = "U";
			}
			else if( updateGu == "I" ){
				if( !isChanged ) updateGu = "X";
			}
			else if( updateGu == "U" ){
				if( !isChanged ) updateGu = "N";
			}
			
			this.dataSet.setState(rowNum, "updateGu", updateGu);
			
			// 메모리 해제
			propOldValue = null; propValue = null;
		}
		// 가저오기로 채워 젔으면 I-> X 로 돌아가서는 안된다
		else{
			if( updateGu == "X" ){
				this.dataSet.setState(rowNum, "updateGu", updateGu);
				
				propertyInfo = this.propertyInfosById[fieldId];
				
				// DirtyCheck이 필요 없으면 X인 경우 그대로 둔다
				// DirtyCheck이 필요하면 조건에 따라 I로 강제 조정 한다 
				if( propertyInfo.needDirtyCheck ){
					// 객체키인 경우 데이터 시트에 링크되어 있으면 시트가 변하면 변경으로 간주되어야 하므로 I로 강제조정한다
					if( propertyInfo.isKey ){
						if( propertyInfo.sheetLinked ) this.dataSet.setState(rowNum, "updateGu", "I");
					}
					else if( propertyInfo.isSeqKey ){
						// 통과한다
					}
					else{
						this.dataSet.setState(rowNum, "updateGu", "I"); //키가 아니면서 DirtyCheck이므로 I로 강제조정한다 
					}
				}
				
				propertyInfo = null;
			}
		}

		// this.dataUp 가 true 일때 updateGu값 바꾼후 같은값이면 바로 리턴시키키 위해(oldValue와 newValue가 같은 값이므로 집계 데이터를 갱신하지 않음)
		if( oldValue === value )
			continue;
		
		// 집계필드 갱신
		propertyInfo = this.propertyInfosById[fieldId];
		if( propertyInfo.isNumericType ){
			value = 1 * value;
			oldValue = 1 * oldValue;
			
			this._updateMaxMin(fieldId, oldValue, value, seq);
			this._updateSum(fieldId, oldValue, value);
		}
		
		//
		var key = null;
		for(var i = 0, propertyInfo = null; i < this.propertyCount; i++, propertyInfo = null){
			propertyInfo = this.propertyInfos[i];
			
			if( propertyInfo.propertyGu == "function" ){
				key = propertyInfo.fieldId;
				value = propertyInfo.formula();
				oldValue = record[key];
				
				if( value != oldValue ){
					record[key] = value;
					this.dataSet.setOldValue(rowNum, key, oldValue);
					
					if( propertyInfo.isNumericType ){
						value = 1 * value;
						this._updateMaxMin(key, oldValue, value, seq);
						this._updateSum(key, oldValue, value);
					}
				}
				
				oldValue = null; value = null; key = null;
			}
		}
		
		// 메모리 해제
		oldValue = null; updateGu = null; propertyInfo = null; json = null;
	}
	
	// 현재 Seq에 이벤트를 일으키기위해 setValue호출
	return this.setValue(fieldId, value);
};

/**
 * @deprecated since version 5.0, DataObject.sum()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 평균값을 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var totalScore = object.getSumOf("score");		
 */
DataObject.prototype.getSumOf = function(propertyId){
	// functionname : [DataObject.getSumOf]
	
	return this._getSumFunc("SUM", propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 평균값을 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var totalScore = object.sum("score");		
 */
DataObject.prototype.sum = function(propertyId){
	// functionname : [DataObject.sum]
	
	return this._getSumFunc("SUM", propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.average()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 합계를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var averageScore = object.getAvgOf("score");		
 */
DataObject.prototype.getAvgOf = function(propertyId){
	// functionname : [DataObject.getAvgOf]
	
	return this._getSumFunc("AVG", propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 합계를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var averageScore = object.average("score");		
 */
DataObject.prototype.average = function(propertyId){
	// functionname : [DataObject.average]
	
	return this._getSumFunc("AVG", propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.max()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최대값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var maxScore = object.getMaxOf("score");		
 */
DataObject.prototype.getMaxOf = function(propertyId){
	// functionname : [DataObject.getMaxOf]
	
	return this._getSumFunc("MAX",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최대값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var maxScore = object.max("score");		
 */
DataObject.prototype.max = function(propertyId){
	// functionname : [DataObject.max]
	
	return this._getSumFunc("MAX",propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.min()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최소값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var minScore = object.getMinOf("score");		
 */
DataObject.prototype.getMinOf = function(propertyId){
	// functionname : [DataObject.getMinOf]
	
	return this._getSumFunc("MIN",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최소값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var minScore = object.min("score");		
 */
DataObject.prototype.min = function(propertyId){
	// functionname : [DataObject.min]
	
	return this._getSumFunc("MIN",propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.upper()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직전값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var upperScore = object.getFormerValueOf("score");		
 */
DataObject.prototype.getFormerValueOf = function(propertyId){
	// functionname : [DataObject.getFormerValueOf]
	
	return this._getSumFunc("FORMER",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직전값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var upperScore = object.upper("score");		
 */
DataObject.prototype.upper = function(propertyId){
	// functionname : [DataObject.upper]
	
	return this._getSumFunc("FORMER",propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.next()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직후값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var nextScore = object.getNextValueOf("score");		
 */
DataObject.prototype.getNextValueOf = function(propertyId){
	// functionname : [DataObject.getNextValueOf]
	
	return this._getSumFunc("NEXT",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직후값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var nextScore = object.next("score");		
 */
DataObject.prototype.next = function(propertyId){
	// functionname : [DataObject.next]
	
	return this._getSumFunc("NEXT",propertyId);
};

/**
 * @description 
 *     레코드의 일부가 수정되어 업로드가 필요한 상태인지 리턴하는 함수이다.   
 *     
 * @return {Boolean} 		
 */
DataObject.prototype.needWrite = function(seq){
	// functionname : [DataObject.needWrite]
	
	var datas = this.dataSet.data;
	var needed = false;
	var rowNum = 0;
	
	for(rowNum = 0; rowNum < datas.length && !needed; rowNum++) {
		needed = (["I", "U", "D"].indexOf(this.getUpdateGu(rowNum + this.startSeq)) >= 0);
	}
	
	//메모리 해제
	data = null;
	
	return needed;
};
/**
 * @description	미결
 * @param 		{number}	seq
 * @return		{String}
 * @example		미결
 */
DataObject.prototype.recordNeedWrite = function(seq) {
	// functionname : [DataObject.recordNeedWrite]
	
	return (["I", "U", "D"].indexOf(this.dataSet.getState(seq - this.startSeq, "updateGu")) >= 0);
};

/**
 * @description 
 *     객체의 키필드가 채워졌는 지 파악하여 데이터를 Load할 수 있는지 여부를 리턴한다  
 *     
 * @return {Boolean} 		- 데이터 LOAD가 가능한 상태이면 true를 리턴한다.
 * @example 
 * 
 * 	if (object.canLoadData()){
 *    // 데이터 로드 동작
 *  }		
 */
DataObject.prototype.canLoadData = function(){
	// functionname : [DataObject.canLoadData]
	
	var data = this.dataSet.data[0];
	var propertyInfo = null;
	var needCancel = false;
	var propertyNum = 0;
	
	for(propertyNum = 0; propertyNum < this.propertyCount && !needCancel; propertyNum++, propertyInfo = null){
		propertyInfo = this.propertyInfos[propertyNum];
		
		if( !propertyInfo.isKeyField )
			continue;
		
		needCancel = (("" + data[propertyInfo.fieldId]) == "");
	}
	
	// 메모리 해제
	propertyInfo = null;
	data = null;

	return !needCancel;
};
//내부함수  JSDOC 안함 
DataObject.prototype._updateMaxMin = function(propertyId, oldValue, newValue, seq){
	// functionname : [DataObject._updateMaxMin]
	
	var rowNum = 0;
	var rowNum1 = 0;
	var seq1 = 0;
	var fieldId = null;
	var propertyInfo = null;
	var datas = null;
	var value = null;
	var max = null;
	
	// 숫자타입이 아니면 통과
	if( isNaN(newValue) )
		return;
	
	oldValue = parseFloat(1 * oldValue);
	newValue = parseFloat(1 * newValue);

	if (oldValue === newValue)
		return;

	rowNum = seq - this.startSeq;
	fieldId = propertyId;
	propertyInfo = this.propertyInfosById[propertyId];
	datas = this.dataSet.data;
	
	// MAX 갱신
	if( oldValue < newValue ){
		propertyInfo.max = (propertyInfo.max < newValue ? newValue : propertyInfo.max);
	}
	// 값이 줄어 들었고 기존값이 Max값이었다면 나머지 데이터를 판단해야 한다
	else if (oldValue > newValue && oldValue == propertyInfo.max){
		max = parseFloat(1 * datas[0][fieldId]);
		
		for(rowNum1 = 0; rowNum1 < this.dataSet.data.length; rowNum1++){
			if(rowNum1 == rowNum)
				continue;
			
			seq1 = rowNum1 + this.startSeq;
			
			if( ["D", "X", "E"].indexOf(this.getUpdateGu(seq1)) >= 0 )	// 삭제된데이터
				continue;

			value = parseFloat(1 * datas[rowNum1][fieldId]);
			max = value > max ? value : max;
		}
		
		propertyInfo.max = max;
	}

	// MIN 갱신
	if( oldValue > newValue ){
		propertyInfo.min = (propertyInfo.min > newValue ? newValue : propertyInfo.min);
	}
	else if( oldValue < newValue ){
		if( oldValue > propertyInfo.min ){	// 통과
		}
		// 값이 늘어 났고고 기존값이 Min값이었다면 나머지 데이터를 판단해야 한다
		else if( oldValue < newValue && oldValue == propertyInfo.max){
			min = parseFloat(1 * datas[0][fieldId]);

			for(rowNum1 = 0; rowNum1 < this.dataSet.data.length; rowNum1++){
				if( rowNum1 == rowNum )
					continue;
				
				seq1 = rowNum1 + this.startSeq;
				
				if( ["D", "X", "E"].indexOf(this.getUpdateGu(seq1)) >= 0 )	// 삭제된데이터
					continue;

				value = parseFloat(1 * datas[rowNum1][fieldId]);
				min = value < min ? value : min;
			}
			
			propertyInfo.min = min;
		}
	}
	
	//메모리 해제
	propertyInfo = null; fieldId = null; datas = null;

	return;
};

DataObject.prototype._updateSum = function(propertyId, oldValue, newValue){
	// functionname : [DataObject._updateSum]
	
	var propertyInfo = this.propertyInfosById[propertyId];
	var sumStr = "" + propertyInfo.sum;
	var newStr = "" + newValue;
	var oldStr = "" + oldValue;
	var sumPointCnt = (sumStr.indexOf(".") < 0) ? 0 : sumStr.length - (sumStr.indexOf(".") + 1);
	var newPointCnt = (newStr.indexOf(".") < 0) ? 0 : newStr.length - (newStr.indexOf(".") + 1);
	var oldPointCnt = (oldStr.indexOf(".") < 0) ? 0 : oldStr.length - (oldStr.indexOf(".") + 1);
	var decimalPoint = (sumPointCnt > newPointCnt ? sumPointCnt : (newPointCnt > oldPointCnt ? newPointCnt : oldPointCnt));
	var decimalValue = Math.pow(10, decimalPoint);
	
	propertyInfo.sum = 1 * ((((propertyInfo.sum * decimalValue) - (oldValue * decimalValue) + (newValue * decimalValue)) / decimalValue).toFixed(10));
	
	//메모리 해제
	oldStr = null; newStr = null; sumStr = null; propertyInfo = null;
	
	return;
}

//내부함수  JSDOC 안함 
DataObject.prototype._getSumFunc = function(functionName, pPropertyId){
	// functionname : [DataObject.getSumFunc]
	
	var propertyInfo = this.propertyInfosById[pPropertyId];
	var wResult = 0.0;
	var wReturn = "";
	
	if( !propertyInfo.isNumericType && functionName != "FORMER" && functionName != "NEXT" ){
		propertyInfo = null;
		return wReturn;
	}
	
	if( functionName == "SUM" ){
		wResult = propertyInfo.sum;
	}
	else if( functionName == "AVG" ){
		wResult = propertyInfo.sum / this.count;
	}
	else if( functionName == "MAX" ){
		wResult = propertyInfo.max;
	}
	else if( functionName == "MIN" ){
		wResult = propertyInfo.min;
	}
	else if( functionName == "CNT" ){
		wResult = this.count;
	}
	else if( functionName == "FORMER" ){
		wReturn = (this.seq == this.startSeq ? "" : this.dataSet.data[seq - 1][pPropertyId]);
	}
	else if( functionName == "NEXT" ){
		wReturn = (this.seq == this.maxSeq ? "" : this.dataSet.data[seq + 1][pPropertyId]);
	}

	if( functionName != "FORMER" && functionName != "NEXT" ){
		wReturn = "" + wResult;
	}
	
	//메모리 해제
	propertyInfo = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함 
DataObject.prototype.getLoadJSON = function(){
	// functionname : [DataObject.getLoadJSON]
	
	var wReturn = null;
	var list = [{}];
	var record = list[0];
	
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var c = 0;
	
	for(c = 0; c < propertyCount; c++){
		propertyInfo = this.propertyInfos[c];
		
		if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
			continue;
		
//		if (objectManager.sql) {
//			for (key in objectManager.sql[this.tableID]) {
//				record[key] = objectManager.sql[this.tableID][key];
//			}
//		}
//		else
		if( propertyInfo.isKey && !propertyInfo.isSeqKey )
			record[propertyInfo.fieldId] = this._getDBWritableKeyValue(this.startSeq, propertyInfo);
		
		propertyInfo = null;
	}
	
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	record = null;
	list.clear(); list = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함 
DataObject.prototype.getWriteJSON = function(){
	// functionname : [DataObject.getWriteJSON]
	
	var wReturn = null;
	var list = [];
	var record = null;
	
	var oldSeq = this.seq; //임시로 현재 시쿼스 번호 백업
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var updateGu = null;
	var seq = 0, idx = 0, r = 0; c = 0;
	var propertyInfo = null;
	
	for(r = 0, idx = 0; r < dataLength; r++){
		this.seq = r + this.startSeq;
		updateGu = this.getUpdateGu(this.seq);
		
		//삭제된데이터 제외
		if( ["N", "X", "E"].indexOf(updateGu) >= 0 )
			continue;
		
		if( this.hasNeedSkipFunction && this.fncNeedSkip() )
			continue;
		
		//레코드 복사
		record = JSON.parse(JSON.stringify(datas[r]));
		//레코드 데이터 변형
		record = this._getDBWritableRecord(record);
		//레코드 업데이트 구분 추가
		record["updategu"] = updateGu;
		
		//리스트에 추가
		list[idx++] = record;
		
		//메모리 해제
		record = null;
		updateGu = null;
	}
	
	this.seq = oldSeq; //백업한 시쿼스 번호로 복구
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	list.clear(); list = null;
	datas = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함 
DataObject.prototype.getDeleteJSON = function(){
	// functionname : [DataObject.getDeleteJSON]
	
	var wReturn = null;
	var list = [];
	var record = null;
	
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var updateGu = null;
	var seq = 0, r = 0, c = 0;
	
	for(r = 0; r < dataLength; r++){
		seq = r + this.startSeq;
		updateGu = this.getUpdateGu(seq);
		record = {};
		
		for(c = 0; c < propertyCount; c++, propertyInfo = null){
			propertyInfo = this.propertyInfos[c];
			
			if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
				continue;
			
			if( propertyInfo.isKey && !propertyInfo.isSeqKey )
				record[propertyInfo.fieldId] = this._getDBWritableKeyValue(seq, propertyInfo);
		}
		
		list[r] = record;
		
		record = null;
		updateGu = null;
	}
	
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	list.clear(); list = null;
	datas = null;
	
	return wReturn;
};

DataObject.prototype.getJsonData = function(){
	// functionname : [DataObject.getJsonData]
	
	var wReturn = null;
	var list = []; var record = null;
	var value = null; var updateGu = null;
	var oldSeq = this.seq; //임시로 현재 시쿼스 번호 백업
	var dataItems = this.dataSet.data;
	var dataItem = null; var dataOldItem = null;
	var dataCount = dataItems.length;
	var propertyCount = this.propertyCount;
	var propertyInfo = null; var propertyId = null;
	var i = 0, r = 0; c = 0;
	
	for(r = 0, i = 0; r < dataCount; r++, updateGu = null){
		this.seq = r + this.startSeq;
		updateGu = this.getUpdateGu(this.seq);
		
		//삭제된데이터 제외
		if( ["X", "E"].indexOf(updateGu) >= 0 )
			continue;
		
		//스킵조건
		if( this.hasNeedSkipFunction && this.fncNeedSkip() )
			continue;
		
		dataItem = dataItems[r];
		dataOldItem = dataItem.__STATE__.oldData;
		record = {"IUDFlag" : updateGu}; //레코드 업데이트 구분 추가
		
		//레코드에 데이터 추가
		for(c = 0; c < propertyCount; c++, propertyInfo = null, propertyId = null, value = null){
			propertyInfo = this.propertyInfos[c];
			propertyId = propertyInfo.fieldId;
			value = dataItem[propertyId];
			
			//null, NaN, undefined 인 경우, 빈문자열로 대체
			if( value == "NaN" || value == null || typeof value == "undefined" )
				value = "";
			
			//디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
			if( ("" + value).trim() == "" ){
				if( propertyInfo.isNumericType )
					value = 0;
				else if( !propertyInfo.permitNull )
					value = " ";
			}
			
			//파일인 경우 처리
			if( propertyInfo.propertyGu == "file" && value.length > 0 )
				if( !(value.length > 11 && /^\[.{8}_\}/.test(value)) )
					value = (value.trim().length > 0 ? jUploadPrefix : "") + value;
			
			//데이터 추가
			record[propertyId] = value;
			record[propertyId + "Old"] = dataOldItem[propertyId];
		}
		
		//리스트에 추가
		list[r] = record;
		
		//메모리 해제
		record = null;
		dataOldItem = null;
		dataItem = null;
	}
	
	//
	if( this.seqKeyFieldId.length > 0 ){
		var key = null; var control = null; var sheet = null;
		var rowNum = 0; var rowCount = 0; var seq = 0; var newSeq = 0;
		
		for(key in controls){
			control = controls[key];
			//
			if( typeof control.linkedObjects != "undefined" ){
				for(i = control.linkedObjects.length - 1; i >= 0; i--){
					if( control.linkedObjects[i] === this ){
						sheet = control;
						break;
		            }
		        }
		    }
			//
			if( sheet != null ){
				control = null; key = null;
				break;
		    }
			//
			control = null; key = null;
		}
		
		if( sheet != null ){
			for(i = 0, newSeq = this.startSeq; i < sheet.maxRows; i++, newSeq++, record = null){
				rowNum = i + sheet.startRowColNum;
				seq = sheet.getRowAttribute(rowNum, "objectSeq");
				
				record = list[seq - this.startSeq];
				record[this.seqKeyFieldId] = newSeq;
			}
			
			sheet = null;
		}
		
		list.sort(function(a, b){
			return (a[this.seqKeyFieldId] - b[this.seqKeyFieldId]);
		});
		
		for(i = 0, newSeq = this.startSeq, rowCount = list.length; i < rowCount; i++, record = null, updateGu = null){
			record = list[i];
			//
			if( typeof record == "undefined" ) continue;
			
			//업데이트 구분
			updateGu = record["IUDFlag"];
			//삭제된데이터
			if( ["D", "X", "E"].indexOf(updateGu) >= 0 ) continue;
			
			if( parseInt(1 * record[this.seqKeyFieldId + "Old"]) != newSeq ){
				if( updateGu == "X" )
					record["IUDFlag"] = "I";
				else if( updateGu == "N" )
					record["IUDFlag"] = "U";
			}
			
			record[this.seqKeyFieldId] = newSeq++;
		}
	}
	
	//
	for(i = list.length; i >= 0; i--){
		//
		if( typeof list[i] == "undefined" )
			list.splice(i, 1);
	}
	
	this.seq = oldSeq;				//백업한 시쿼스 번호로 복구
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	list.clear(); list = null;
	dataItems = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함
DataObject.prototype.getSelectCondition = function(){
	return (this.selectCondition != null) ? this.selectCondition : {};
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @param 		{String}	arrJSonObject
 * @return		{void}
 * @example		미결
 */
DataObject.prototype.loadData = function(arrJsonObject){
	// functionname : [DataObject.loadData]
	
	this.clear();
	
	var datas = this.dataSet.data;
	var data = null;
	var jsonObject = null;
	var propertyInfo = null;
	var fieldId = null;
	var jsonKey = null;
	var value = null;
	var recordSize = 0;
	var rowNum = 0;
	
	//
	for(rowNum = 0, recordSize = arrJsonObject.length; rowNum < recordSize; rowNum++){
		this.dataSet.insertData();
		this.dataSet.setState(rowNum, "updateGu", "N"); // 수정전상태는 "N"이다
		
		jsonObject = arrJsonObject[rowNum];
		data = datas[rowNum];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			for(jsonKey in jsonObject){
				if( ("" + fieldId).toLocaleLowerCase() == ("" + jsonKey).toLocaleLowerCase() ){
					value = jsonObject[jsonKey];
					
					data[fieldId] = value;
					this.dataSet.setOldValue(rowNum, fieldId, value);
					
					// 집계함수 계산
					if( propertyInfo.isNumericType ){
						value = 1 * value;
						propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
						propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//						propertyInfo.sum += value;
						this._updateSum(fieldId, 0, value);
					}
					
					value = null; jsonKey = null;
					
					break;
				}
				
				jsonKey = null;
			}
			
			propertyInfo = null; fieldId = null;
		}
		
		data = null; jsonObject = null;
	}
	
	var propNum = 0;
	var newSeq = 0;
	var oldSeq = this.seq;
	var dataCount = datas.length;
	
	//
	for(propNum = 0; propNum < this.propertyCount; propNum++, propertyInfo = null, fieldId = null){
		propertyInfo = this.propertyInfos[propNum];
		fieldId = propertyInfo.fieldId;
		
		if( !propertyInfo.isNumericType || propertyInfo.propertyGu != "function" )
			continue;
		
		for(rowNum = 0, newSeq = this.startSeq; rowNum < dataCount; rowNum++, newSeq++){
			data = datas[rowNum];
			
			this.seq = newSeq;
			value = propertyInfo.formula();
			
			data[fieldId] = value;
			this.dataSet.setOldValue(rowNum, fieldId, value);
			
			// 집계함수 계산
//			if( propertyInfo.isNumericType ){
				value = 1 * value;
				propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
				propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//				propertyInfo.sum += value;
				this._updateSum(fieldId, 0, value);
//			}
			
			value = null; data = null;
		}
	}
	
	this.seq = oldSeq;
	this.maxSeq = arrJsonObject.length - 1 + this.startSeq;
	this.count = dataCount;
	
	//객체로드한 경우 dni모드가 IUD로 설정되어야 함(IUD : false / D&I : true)
	this.dniMode = false;
	
	arrJsonObject.clear();
	arrJsonObject = null;
	datas = null;
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		actionType = OBJECT_DATA_RESET_BY_LOADDATA;
//		
//		this.fncDataResettedEvent(actionType, errorInfo);
//		if( errorInfo.code != 0 ){
//			// !!! 오류 메시지 
//			alert(errorInfo.message);
//		}
//		
//		actionType = null;
//		errorInfo = null;
//	}
	
	return;
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
DataObject.prototype.getLoadData = function(){
	// functionname : [DataObject.getLoadData]
	
	var uploadString = "Object:" + this.tableID + ";";
	var propertyInfo = null;
	var propertyNum = 0;
	
	for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++, propertyInfo = null){
		propertyInfo = this.propertyInfos[propertyNum];
		
		if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
			continue;
		
		if( propertyInfo.isKey && !propertyInfo.isSeqKey )
			uploadString += this._getDBWritableValue(this.startSeq, propertyInfo) + ",";
	}
	
	uploadString += ";";
	
	// 메모리 해제
	propertyInfo = null;
	
	return uploadString;
};
/**
 * @description	미결
 * @param 		{String}	pPropertyId
 * @return		{boolean}
 * @example		미결
 */
DataObject.prototype.getWriteData = function(){
	// functionname : [DataObject.getWriteData]
	
	var oldSeq = this.seq;
	var uploadString = "Object:" + this.tableID + ";";
	
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var updateGu = null;
	var rowNum = 0;
	var seq = 0;
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var propertyNum = 0;
	var tempStr = null;
	var fieldId = null;
	var oldValue = null;
	
	for(rowNum = 0; rowNum < dataLength; rowNum++, updateGu = null){
		this.seq = rowNum + this.startSeq;
		updateGu = this.getUpdateGu(this.seq);
		
		// 삭제된데이터
		if( ["N", "X", "E"].indexOf(updateGu) >= 0 )
			continue;
		
	    if( this.hasNeedSkipFunction && this.fncNeedSkip() )
	    	continue;
	    
		for(propertyNum = 0; propertyNum < propertyCount; propertyNum++){
			propertyInfo = this.propertyInfos[propertyNum];
			
			if( (propertyInfo.propertyGu == "field") ){
				uploadString += this._getDBWritableValue(this.seq, propertyInfo);
				uploadString += ",";
		    }
			else if( (propertyInfo.propertyGu == "file") ){
				tempStr = this._getDBWritableValue(this.seq, propertyInfo);
				
				if( tempStr.length == 0 ){
					// 생략
				}
				else if( tempStr.length > 11 && tempStr.substring(0,1) == "[" && tempStr.substring(9,11) == "_]" ){
					uploadString += tempStr;
				}
//				// 대상에서 모바일 이미지 처리시만 사용  
//				else if( tempStr.length > 11 && tempStr.substring(0,1) == "[" && tempStr.substring(10,11) == "]" ){
//		    		uploadString += tempStr;
//		    	}
				else{
					uploadString += (tempStr.trim().length > 0 ? jUploadPrefix : "") + tempStr;
				}
				
				uploadString += ",";
				tempStr = null;
			}
			
			propertyInfo = null;
		}
		
		uploadString += updateGu;
		
		for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++, propertyInfo = null){
			propertyInfo = this.propertyInfos[propertyNum];
			
			if( !propertyInfo.isKey || !propertyInfo.isSeqKey )
				continue;
			
			uploadString += ",";
			fieldId = propertyInfo.fieldId;
			oldValue = this.dataSet.getOldValue(rowNum, fieldId);
			
			if( oldValue == null || typeof oldValue == "undefined" )
				oldValue = "";
			
			if( propertyInfo.isNumericType )
				uploadString += ("" + oldValue == "") ? "0" : oldValue;
			else
				uploadString += ("" + oldValue == "") ? "null" : escapeParseString(oldValue);
			
			oldValue = null;
			fieldId = null;
			
			break;
		}
		
		uploadString += ";";
	}
	
	this.seq = oldSeq; // 화면의 시퀀그로 돌려 놓는다.
	
	//메모리 해제
	datas = null;
	
	return uploadString;
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
DataObject.prototype.getDeleteData = function(){
	// functionname : [DataObject.getDeleteData]
	
	var uploadString = "Object:" + this.tableID + ";";
	
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var propertyInfo = null;
	var updateGu = null;
	var propertyNum = 0;
	var rowNum = 0;
	var seq = 0;
	
	for(rowNum = 0; rowNum < dataLength; rowNum++, updateGu = null){
		seq = rowNum + this.startSeq;
		
		for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++, propertyInfo = null){
			propertyInfo = this.propertyInfos[propertyNum];
			
			if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
				continue;
			
			if( propertyInfo.isKey && !propertyInfo.isSeqKey )
				uploadString += this._getDBWritableValue(seq, propertyInfo) + ",";
		}
		uploadString += ";";
	}
	
	//메모리 해제
	datas = null;
	
	return uploadString;
};

//내부함수  JSDOC 안함 
DataObject.prototype._getDBWritableRecord = function(record){
	// functionname : [DataObject._getDBWritableRecord]
	
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var updateGu = null;
	var value = null;
	var c = 0;
	
	for(c = 0; c < propertyCount; c++){
		propertyInfo = this.propertyInfos[c];
		value = record[propertyInfo.fieldId];
		
		if( value == "NaN" || value == null || typeof value == "undefined" )
			value = "";
		
		//디폴트값 설정
		if( value == "" )
			value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
		else if( ("" + value) == "-1" && propertyInfo.linkedToListControl ) //콤보,리스트박스, 콤보셀이면서 값이 "-1"인것
			value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
		
		//디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
		if( ("" + value).trim() == "" ){
			if( propertyInfo.isNumericType )
				value = 0;
			else if( !propertyInfo.permitNull )
				value = " ";
		}
	    
//		//파싱문자의 Escaping
//		if( !propertyInfo.isNumericType )
//			value = escapeParseString(value);
		
		//파일인 경우 처리
		if( propertyInfo.propertyGu == "file" && value.length > 0 )
			if( !(value.length > 11 && /^\[.{8}_\}/.test(value)) )
				value = (value.trim().length > 0 ? jUploadPrefix : "") + value;
		
		record[propertyInfo.fieldId] = value;
		
		//이전 값 설정
//		if( !propertyInfo.isKey || !propertyInfo.isSeqKey )
		if( !propertyInfo.isKey && !propertyInfo.isSeqKey )
			continue;
		
		updateGu = record.__STATE__.updateGu;
//		value = record.__STATE__.oldData[propertyInfo.fieldId];
		value = (updateGu == "I") ? record[propertyInfo.fieldId] : record.__STATE__.oldData[propertyInfo.fieldId];
		value = (typeof value == "undefined") ? "" : value;
		
		if( propertyInfo.isNumericType )
			value = (isNaN(value) ? null : (("" + value === "") ? 0 : value));
		
		record[propertyInfo.fieldId + "Old"] = value;
		
		//메모리 해제
		value = null;
		propertyInfo = null;
	}
	
	return record;
};

//내부함수  JSDOC 안함 
DataObject.prototype._getDBWritableKeyValue = function(seq, propertyInfo){
	// functionname : [DataObject._getDBWritableValue]
	
	var rowNum = seq - this.startSeq;
	var value = this.dataSet.data[rowNum][propertyInfo.fieldId];
	
	if( value == "NaN" )
		value = "";
	
	if( value == "" )
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	else if( ("" + value) == "-1" && propertyInfo.linkedToListControl ) //콤보,리스트박스, 콤보셀이면서 값이 "-1"인것
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	
	// 디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
	if( ("" + value).trim() == "" ){
		if( propertyInfo.isNumericType )
			value = "0";
		else if( !propertyInfo.permitNull )
			value = " ";
	}
	
//	// 파싱문자의 Escaping
//	if( !propertyInfo.isNumericType )
//		value = escapeParseString(value);
	
	return value;
};

//내부함수  JSDOC 안함 
DataObject.prototype._getDBWritableValue = function(seq, propertyInfo){
	// functionname : [DataObject._getDBWritableValue]
	
	var rowNum = seq - this.startSeq;
	var value = this.dataSet.data[rowNum][propertyInfo.fieldId];
	
	if( value == "NaN" )
		value = "";
	
	if( value == "" )
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	else if( ("" + value) == "-1" && propertyInfo.linkedToListControl ) //콤보,리스트박스, 콤보셀이면서 값이 "-1"인것
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	
	// 디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
	if( ("" + value).trim() == "" ){
		if( propertyInfo.isNumericType )
			value = "0";
		else if( !propertyInfo.permitNull )
			value = " ";
	}
	
	// 파싱문자의 Escaping
	if( !propertyInfo.isNumericType )
		value = escapeParseString(value);
	
	return value;
};

//내부함수  JSDOC 안함 
//이발빠진 시퀀스 번호를 정비한다.
//oldSequence Value는 건들지않고 value만 갱신한다
/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
DataObject.prototype.arrangeSeq = function(){
	// functionname : [DataObject.arrangeSeq]
	
	var datas = this.dataSet.data;
	var updateGu = null;
	var rowNum = 0;
	var seq = 0;
	var oldSeq = 0;
	
	for(rowNum = 0; rowNum < this.dataSet.data.length; rowNum++) {
		updateGu = this.getUpdateGu(rowNum + this.startSeq);
//		seq++;

		if( ["D", "X", "E"].indexOf(updateGu) >= 0 ){	// 삭제된데이터
			continue;
		}
		
		if( this.seqKeyFieldId == "" ){
			this.dataSet.setState(rowNum, "tempSeqKey", ++seq);
		}
		else{
			seq++;
			oldSeq = this.dataSet.getOldValue(rowNum, this.seqKeyFieldId);
			
			if( parseInt(1 * oldSeq) != seq ){
				if( updateGu == "X" )
					this.dataSet.setState(rowNum, "updateGu", "I")
				else if( updateGu == "N" )
					this.dataSet.setState(rowNum, "updateGu", "U")
			}
			
			datas[rowNum][this.seqKeyFieldId] = seq;
		}
	}
	
	// 메모리 해제
	datas = null;
	
	return;
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
DataObject.prototype.sortBySeq = function(){
	// functionname : [DataObject.sortBySeq]
	
	var errorInfo = null;
	var datas = this.dataSet.data;
	
	if( this.seqKeyFieldId == "" ){
		datas.sort(function(a, b){
			return (a.__STATE__.tempSeqKey - b.__STATE__.tempSeqKey);
		});
	}
	else{
		datas.sort(function(a, b){
			return (a[this.seqKeyFieldId] - b[this.seqKeyFieldId]);
		});
	}
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_SORT, errorInfo);
//		
//		if(errorInfo.code != 0)
//			alert(errorInfo.message);
//	}
	
	return;
};

/**
 * @description 
 *     데이터 객체의 속성정보 개체
 * 
 * @constructor
 * 
 * @param {string} 	 id 	 	- 속성의 고유 아이디 (영문)
 * @param {string} 	 fieldId 	- 속성의 테이블 필드아이디
 * @param {string} 	 name 		- 속성명 (사용자 고유 언어)
 * 
 * @return {PropertyInfo} 		- 생성된 DataObject 개체
 * 
 */
function PropertyInfo(id, fieldId, name){
    this.id = id;
    this.fieldId = fieldId;
    this.name = name;
    this.propertyGu = ""; // field, service, function, file
    this.dataTypeName = "";
    this.isNumericType = false;
    this.isKey = false;
    this.isSeqKey = false;
    this.length = 0;
    this.formula = "";
    this.defaultValue = "";  //eval이 적용되는 산식
    this.permitNull = false;
    this.seqClear = false;
    this.linkedToListControl = false; // 콤보나 리스트, 콤보셀에 링크되었는지 여부
    this.needDirtyCheck = true;       // 사용자의 "화면 동작"과 관련 없는 속성값은 통과 : 변경을 체크하지 않는다
    this.sheetLinked= false;          // 데이터시트에 연결된 프로퍼티인지 구분 객체값 변경체크시 사용
    this.listLinked= false;           // 콤보와  리스트에 연결된 프로퍼티인지 구분  객체값변경체크시 사용
    this.isFillKey = false;
    this.sum = 0.0;                     // 연산에 필요한 값
    this.max = 0.0;
    this.min = 0.0;
};

/*
 *  주요 변경 내용으로 영향도 평가사항 
 *  
 *  0번 seq부터 데이터가 채워진다 .
 *  Easysheet 아닌 기존시트 코드와의 호환성 유지 하여야 한다 
 *  record는 data[rowNum]을 가리킨다 
 *  object는 seq를 사용하고, dataSet은 rowNum을 사용한다.
 *  
 *  3. seq는 0부터 시작하며 기존호환이 필요할 때는 "object.startSeq = 1;" 로 설정한다.
 *     업로드 되는 seq필드는 무조건 1부터 시작된다. seq속성과 seq필드는 다른 개념이다
 *  4. dniMode 추적할 것 
 * */
/**
 * @class TextBox 클래스
 * @constructor TextBox
 * 
 * @param controlId
 *            {String} 해당 컨트롤의 ID를 지정합니다.
 * @param controlName
 *            {String} 해당 컨트롤의 Name을 지정합니다.
 * @param tagObject
 *            {Object} 해당 컨트롤의 태그 객체를 지정합니다.
 * 
 * @return 객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>
 *         만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
 * 
 * @example var wControl = controls["textbox_3"] = new TextBox("textbox_3",
 *          "TextBox_3", document.getElementsByName("textbox_3")[0]);
 *          if(wControl.errorMsg != null){ //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요. }
 *  // 후속코드 생략...
 */
function TextBox(controlId, controlName, tagObject){
	if( tagObject == undefined || tagObject == null )
		return;
	
	// 상속선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	// 속성 선언부
	/**
	 * @description 텍스트 박스 입력값입니다.<br>
	 *              기본값 : 없음<br>
	 *              <br>
	 */
	this.value = "";
	/**
	 * @description 한글입력모드 입니다.<br>
	 *              기본값 : auto<br>
	 *              <br>
	 *              <table width="500"> <caption>imemode Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> auto </td>
	 *              <td> 한글입력 자동모드 입니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> active </td>
	 *              <td> 한글입력 활성화 모드 입니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> inactive </td>
	 *              <td> 한글입력 비활성화 모드 입니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.imemode = "auto";
	/**
	 * @description 표기형식 문자열입니다.<br>
	 *              기본값 : 없음<br>
	 *              <br>
	 */
//	this.dispFormat = (tagObject.getAttribute("displayformat") != undefined && tagObject.getAttribute("displayformat") != null ? tagObject.getAttribute("displayformat") : "");
	this.dispFormat = "";
	/**
	 * @description 표기형식 반올림 플래그 값이다.<br>
	 *              기본값 : 반올림<br>
	 *              <br>
	 */
	this.dispRound = 0; //DISPAY_FORMAT_ROUND(0) / DISPAY_FORMAT_CEIL(1) / DISPAY_FORMAT_FLOOR(2)
	/**
	 * @description 여러행 입력허용 플래그 값이다.<br>
	 *              기본값 : auto<br>
	 *              <br>
	 *              <table width="500"> <caption>multiLine Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 여러행 입력을 허용합니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 여러행 입력을 허용하지 않습니다.<br>
	 *              단일행으로만 입력이 가능합니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.multiLine = false;
	/**
	 * @description 컨트롤에 대한 주석입니다.<br>
	 *              기본값 : 없음<br>
	 *              <br>
	 */
	this.tag = "";
	/**
	 * @description 사용자가 컨트롤에 입력한 값이 확정되었을 때, 컨트롤에 입력된 값을 Key로 하여 데이터를 조회합니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isKeyControl Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 컨트롤 값에 의해 자료를 조회합니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 컨트롤 값에 의해 자료를 조회하지 않습니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isKeyControl  = false;
	/**
	 * @description 조회한 자료에서 Key 필드와 함께 추가로 조건을 주기위해 사용합니다.<br>
	 *              컨트롤에 화면채우기 설정이 되어있다면 Key필드와 컨트롤의 값에 만족하는 데이터를 화면에 채웁니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isFillControl Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 컨트롤에 값을 채웁니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 컨트롤에 값을 채우지 않습니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isFillControl = false;
	/**
	 * @description Clear나 확인버튼을 클릭하여 실행시키고 난 후 후속작업을 위해 컨트롤의 데이터를 비울지 설정합니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isClearControl Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> Clear 기능 실행 후 컨트롤의 값을 비웁니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> Clear 기능 실행하더라도 컨트롤의 값을 유지합니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isClearControl = false;
	/**
	 * @description 입력/조회 시트에서 줄추가/삭제시 컨트롤의 값을 비울지 설정합니다.<br>
	 *              줄 단위로 다른 값이 들어갈 데이터에 적용됩니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isSeqClearControl Variable
	 *              Value</caption> <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 줄추가/삭제시 컨트롤의 값을 비웁니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 줄추가/삭제를 하더라도 컨트롤의 값은 유지됩니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isSeqClearControl = false;
	/**
	 * @description 입력값에 대한 검사 조건입니다.<br>
	 *              기본값 : CHECKTYPE.NONE<br>
	 *              <br>
	 */
	this.checkType = 0;
	/**
	 * @description 미결
	 */
	this._isEnterKeyDown = -1;
	/**
	 * @description	미결
	 */
	this.maxLength = 60;
    this.picctlname = "";
	this.subPath = "";
    this.nozip = false;
    this.serverfilename = "";
    
    
    if( this.tagObject ){
    	var value = null;
    	
    	value = this.tagObject.getAttribute("displayformat");
    	this.dispFormat = (typeof value != "undefined" && value != null) ? value : this.dispFormat;
    	value = null;
    	
    	value = this.tagObject.getAttribute("displayround");
    	this.dispRound = (typeof value != "undefined" && value != null) ? value : this.dispRound;
    	value = null;
    	
    	value = this.tagObject.getAttribute("tag");
    	this.tag = (typeof value != "undefined" && value != null) ? value : "";
    	value = null;
    	
    	value = this.tagObject.getAttribute("checktype");
    	this.checkType = (typeof value != "undefined" && value != null) ? parseInt(value) : this.checkType;
    	value = null;
    	
    	value = this.tagObject.getAttribute("maxlength");
    	this.maxLength = (typeof value != "undefined" && value != null) ? (value * 1) : this.maxLength;
    	value = null;
    	
    	//maxLength 가 0 인 경우, 표시형식이 있다면 표시형식 자리수만큼 설정한다.
    	if( this.maxLength == 0 && this.dispFormat.length > 0 ){
    		this.maxLength = this.dispFormat.length;
    		this.tagObject.setAttribute("maxlength", this.maxLength);
    	}
    	
    	//자동완성 기능 끄기
    	this.tagObject.setAttribute("autocomplete", "off");
    	
    	this.isKeyControl = (tagObject.getAttribute("iskeycontrol") == "true");
    	this.isFillControl = (tagObject.getAttribute("isfillcontrol") == "true");
    	this.isClearControl = (tagObject.getAttribute("isclearcontrol") == "true");
    	this.isSeqClearControl = (tagObject.getAttribute("isseqclearcontrol") == "true");
	}
	
	tagObject.value = "";
	
//	this.tagObject.onkeypress = text_KeyPress;
//	this.tagObject.onkeydown = text_KeyDown;
//	this.tagObject.onkeyup = text_KeyUp;
//	this.tagObject.onfocus = text_Focus;
//	this.tagObject.onblur = text_Blur;
//	this.tagObject.onclick = text_Click;
//	this.tagObject.ondblclick = text_DoubleClick;

	// 이벤트 선언부
	setEventHandler(tagObject, "keypress", text_KeyPress);
	setEventHandler(tagObject, "keydown", text_KeyDown);
	setEventHandler(tagObject, "keyup", text_KeyUp);
	setEventHandler(tagObject, "focus", text_Focus);
	setEventHandler(tagObject, "blur", text_Blur);
	setEventHandler(tagObject, "click", text_Click);
	setEventHandler(tagObject, "dblclick", text_DoubleClick);
	
	// 사용자 이벤트
	this.hasChangeEvent = false;	this.fncChangeEvent = null;
	this.hasBlurEvent = false;		this.fncBlurEvent = null;
	this.hasFocusEvent = false;		this.fncFocusEvent = null;
	this.hasKeyUpEvent = false;		this.fncKeyUpEvent = null;
	this.hasKeyDownEvent = false;	this.fncKeyDownEvent = null;
	
	
	
	if( this.controlId.length > 0 ){
		this.hasChangeEvent = (typeof self[this.controlId + "_onchange"] == "function");
		if( this.hasChangeEvent ){
			this.fncChangeEvent = new Function("return function(){ return " + this.controlId + "_onchange(); }")();
		}
		
		this.hasBlurEvent = (typeof self[this.controlId + "_onblur"] == "function");
		if( this.hasBlurEvent ){
			this.fncBlurEvent = new Function("return function(){ return " + this.controlId + "_onblur(); }")();
		}
		
		this.hasFocusEvent = (typeof self[this.controlId + "_onfocus"] == "function");
		if( this.hasFocusEvent ){
			this.fncFocusEvent = new Function("return function(){ return " + this.controlId + "_onfocus(); }")();
		}

		this.hasKeyUpEvent = (typeof self[this.controlId + "_onkeyup"] == "function");
		if( this.hasKeyUpEvent ){
			this.fncKeyUpEvent = new Function("return function(keyCode, shiftDown, ctrlDown, altDown){ return " + this.controlId + "_onkeyup(keyCode, shiftDown, ctrlDown, altDown); }")();
		}		
		
		this.hasKeyDownEvent = (typeof self[this.controlId + "_onkeydown"] == "function");
		if( this.hasKeyDownEvent ){
			this.fncKeyDownEvent = new Function("return function(keyCode, shiftDown, ctrlDown, altDown){ return " + this.controlId + "_onkeydown(keyCode, shiftDown, ctrlDown, altDown); }")();
		}		
	}
};

TextBox.prototype = new ControlBase();	// 의미없음 코딩 편의기능을 활용하기 위함

/**
 * @description 텍스트박스 컨트롤의 ID를 반환합니다.
 * @param       em {Object} 텍스트박스 컨트롤 객체를 입력합니다.
 * @return      텍스트박스 컨트롤의 ID를 반환합니다.<br>
 *              만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl =
 *              searchControl_Text(document.getElementsByName("textbox_3")[0])
 *              if(wControl == null){ //옵션 버튼 컨트롤을 찾는데 실패하였습니다. } if(wControl ==
 *              false){ //텍스트박스으로 포커스를 지정합니다. }
 *  // 후속코드 생략...
 */
function searchControl_Text(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while(pEm.parentNode && !pEm.className.startsWith("TextBox"))
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("TextBox") )
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "TextBox"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "TextBox" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("TextBox"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("TextBox") )
			wReturn = getControlById(pEm.id);
	}
	
	//메모리 해제
	image = null;
	pEm = null;
	
	return wReturn;
};

/* 포커스 주기*/
/**
 * @description 링크 컨트롤에 포커스를 지정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @return      포커스 지정을 성공한다면 true를 반환합니다.<br>
 *              만약 에러가 발생한다면 false를 반환합니다.
 * @example     var wControl =
 *              searchControl_Text(document.getElementsByName("textbox_3")[0])
 *              if(wControl == null){ //텍스트박스 컨트롤을 찾는데 실패하였습니다. } if(wControl ==
 *              false){ //텍스트박스으로 포커스를 지정합니다. } //텍스트박스로 포커스를 지정합니다. if(
 *              txtbox.focus() == false ){ //focus 함수 동작 실패하였습니다. 에러처리 코드를 입력해주세요.
 *              //focus 함수 실패하거나 에러 발생시 focus 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *              wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.focus = function(){
	// functionname : [TextBox.focus]
	
	var wReturn = true;
	
	try{
		this.tagObject.focus();
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};

/* 한글지원*/
/**
 * @description 텍스트박스의 한글입력모드를 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       imemode {String} auto : 자동모드 / active : 활성화모드 / inactive : 비활성화모드
 * @return      한글모드입력 설정을 성공하면 true를 반환합니다. 만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //한글입력모드를 비활성화 합니다. if(
 *              wControl.setIMEMode("inactive") == false ) //setIMEMode 함수 동작
 *              실패하였습니다. 에러처리 코드를 입력해주세요. //setIMEMode 함수 실패하거나 에러 발생시 focus 메소드는
 *              false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setIMEMode = function(imemode){
	// functionname : [TextBox.setIMEMode]
	
	this.imemode = imemode;
	this.tagObject.style.imeMode = imemode; //( "active" : "auto" : "inactive");
};

/**
 * @description 텍스트박스 컨트롤의 체크조건에 따라 한글입력모드를 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       checkType  {Constant} ControlBase 클래스의 CHECKTYPE 상수를 참조하십시오.
 * @param       callAction
 * @return      검사조건 설정을 성공하면 true를 반환합니다. 만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //한글입력모드를 비활성화 합니다. if(
 *              wControl.setCheckType(this.CHECKTYPE.IMEMODE, ??) == false )
 *              //setCheckType 함수 동작 실패하였습니다. 에러처리 코드를 입력해주세요. //setCheckType 함수
 *              실패하거나 에러 발생시 setCheckType 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *              wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setCheckType = function(checkType, callAction){
	// functionname : [TextBox.setCheckType]
	
	this.checkType = checkType;
	
	if( this.checkType == this.CHECKTYPE.IMEMODE )
		this.setIMEMode("active");
	else if( this.checkType == this.CHECKTYPE.NONE )
		this.setIMEMode("auto");
	else
		this.setIMEMode("inactive");
	
	// 체크동작
	if( callAction ){
		/* */
	}
	
	return;
};

/**
 * @description 텍스트박스에 데이터를 표시할 형식 문자열을 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       dispFormat  {String} 텍스트박스에 데이터를 표시할 형식 문자열을 입력합니다.
 * @param       callAction
 * @return      형식문자열을 설정한다면 true 를 반환합니다. <br>
 *              만약 에러가 발생한다면 false를 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박스에 '####-##-##'로 표시할 형식
 *              문자열을 설정합니다. if( wControl.setDispFormat("####-##-##", ??) == false){
 *              //표시문자열 설정을 실패하였습니다. 에러처리 코드를 입력해주세요. //setDispFormat 함수 실패하거나 에러
 *              발생시 setDispFormat 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *              wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setDispFormat = function(dispFormat, callAction){
	// functionname : [TextBox.setDispFormat]
	
	this.dispFormat = dispFormat;
	
	if( this.dispFormat.length > 0 )
		this.tagObject.value = mask(this.value, this.dispFormat);
	else
		this.tagObject.value = this.value;
	
	// 체크동작
	if( callAction ){
		/* */
	}
	
	return;
};

/*
TextBox.prototype.setDispRound = function(round){
	// functionname : [TextBox.setDispRound]
	
	this.dispRound = round;
	
	var value = this.value;
	
	if( this.dispFormat.length > 0 ){
		
		this.tagObject.value = mask(value, this.dispFormat);
	}
	else{
		
		this.tagObject.value = value;
	}
	
	return;
};
*/

/**
 * @description 텍스트박스 입력값의 다행입력허용을 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       multiLine {Boolean} true : 다행입력을 허용합니다. / false : 다행입력을 허용안합니다.
 * @return      다행입력허용 설정을 성공하면 true를 반환합니다.<br>
 *              만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박그 컨트롤에 다행입력을 허용합니다. if(
 *              wControl.setMultiLine(true) == false ){ //다행입력 설정을 실패하였습니다. 에러처리 코드를
 *              입력해주세요. //setMultiLine 함수 실패하거나 에러 발생시 setMultiLine 메소드는 false 를
 *              반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setMultiLine = function(multiLine){
	// functionname : [TextBox.setMultiLine]
	
	this.multiLine = multiLine;
};

/**
 * @description 텍스트박스에 데이터를 입력합니다.<br>
 *              만약 표기문자열을 설정하였다면 표기문자열의 형식에 맞춰 입력됩니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       value {String} 텍스트박스에 입력할 데이터입니다.
 * @return      데이터입력을 성공하면 true를 반환합니다.<br>
 *              만약 에러가 발생할 경우 false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박스에 '위너소프트'가 입력됩니다. if(
 *              wControl.setValue("위너소프트") == false ){ //텍스트박스에 데이터를 입력하는데 실패하였습니다.
 *              에러처리 코드를 입력해주세요. //setValue 함수 실패하거나 에러 발생시 setValue 메소드는 false 를
 *              반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setValue = function(value){
	// functionname : [TextBox.setValue]
	
	var oldValue = this.value;
	var result = true;
	
	if( typeof value == "undefined" || value == null ) value = "";
	else if( typeof value != "string" ) value = "" + value;
	
	if( typeof oldValue == "undefined" || oldValue == null ) oldValue = "";
	else if( typeof oldValue != "string" ) oldValue = "" + oldValue;
	
	if( (!this.multiLine && oldValue == value)
		|| (this.multiLine && oldValue.replace(/\r/gi, "") == value.replace(/\r/gi, ""))
	){
		if( this.dispFormat.length > 0 ) this.tagObject.value = mask(value, this.dispFormat, this.dispRound);
		return true;
	}
	else{
		this.value = value;
		
		/*
		// 데이터 가저오기
		if( this.isKeyControl ){
			if( this.isFillControl )
				mustFillScreenAfterLoad = true;
			
			objectManager.fillkeyFieldValue = this.value;
			objectManager.loadData();
		}
		// 데이터 채우기
		if( this.value != "" ){
			if( !this.isKeyControl && this.isFillControl )
				objectManager.fillData();
		}
		*/
		
		// 체크조건
		if( !this.checkError() ){
			this.value = oldValue;
			this.tagObject.focus();
			return false;
		}
		
		// dataset 갱신 기능
		if( typeof ControlBase.prototype._UpdateDataset != "undefined" ){
			result = this._UpdateDataset();
			
			if( typeof result == "boolean" && !result ){
				//컨트롤 값 복구
				this.value = oldValue;
				this.tagObject.value = (this.dispFormat.length > 0) ? mask(oldValue, this.dispFormat, this.dispRound) : oldValue;
				this.tagObject.focus();
				return false;
			}
		}
		
		//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
		if( !this.passEvent ){
			// 사용자 코딩 추가영역을 호출한다
			if( this.hasChangeEvent ){
				result = this.fncChangeEvent();
				
				if( (typeof result == "boolean" && !result) || (typeof result == "undefined") ){
					// 컨트롤 값 복구
					this.value = oldValue;
					// dataset 갱신 기능
					if( typeof ControlBase.prototype._UpdateDataset != "undefined" ) this._UpdateDataset();
					//
					this.tagObject.value = (this.dispFormat.length > 0) ? mask(oldValue, this.dispFormat, this.dispRound) : oldValue;
					this.tagObject.focus();
					return false;
				}
			}
		}
		
		// 후속동작
		if( result ) this.tagObject.value = (this.dispFormat.length > 0) ? mask(this.value, this.dispFormat, this.dispRound) : this.value; 
	}
	
	
	return result;
};

/**
 * @description 텍스트박스에 데이터를 입력합니다.<br>
 *              만약 표기문자열을 설정하였더라도 표기문자열 형식에 맞춰 입력되지 않습니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       value {String} 텍스트박스에 입력할 데이터입니다.
 * @return      데이터입력을 성공하면 true를 반환합니다. 만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박스에 '위너소프트'가 입력됩니다. if(
 *              wControl.setCaption("위너소프트") == false ){ //텍스트박스에 데이터를 입력하는데
 *              실패하였습니다. 에러처리 코드를 입력해주세요. //setCaption 함수 실패하거나 에러 발생시 setCaption
 *              메소드는 false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setCaption = function(caption){
	// functionname : [TextBox.setCaption]
	
	//캡션 파라메터의 값이 없는 경우 빈문자열로 세팅하여 캡션을 지움
	if( typeof caption == "undefined" || caption == null ) caption = "";
	
	//캡션 설정
	this.caption = "" + caption;
	//캡션 텍스트박스 태그 객체에 설정
	this.tagObject.setAttribute("placeholder", this.caption);
};

/**
 * @description	미결
 * @param 		{String} 	 maxLength
 * @return		{undefined}
 * @example		미결
 */
TextBox.prototype.setMaxLength = function(maxLength){
	// functionname : [TextBox.setMaxLength]
	
	this.maxLength = maxLength;
	
	if( this.tagObject ){
		this.tagObject.setAttribute("maxlength", maxLength);
	}
};

/**
 * @name	 	TextBox#text_KeyUp
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_KeyUp(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var checkEvent = false;
	var result = true;

	//입력된 키 정보
	var wKeyCode = (e.which) ? e.which : e.keyCode;	// 키 코드
	var wCtrlDown = e.ctrlKey || e.metaKey;			// 컨트롤 // 커맨드(Mac지원)
	var wAltDown = e.altKey;						// 알트
	var wShiftDown = getShiftKeyPressed(e);			// 쉬프트

	//브라우저 버전이 IE8 이하 버전인 경우, 태그의 maxlength 속성을 지원하지 않으므로 스크립트에서 처리(IE 7, 8)
	if( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && (navigator.appVersion.indexOf("MSIE 7") > 0 || navigator.appVersion.indexOf("MSIE 8") > 0) ){
		if( !control.multiLine && control.maxLength * 1 > 0 && (em.value + "").length > control.maxLength * 1 && (wKeyCode != 9 || wKeyCode != 13) ){
			control = null; em = null;
			return false;
		}
	}

	/*
	if (control.dispFormat.length > 0){
		var wString = em.value.replace(/\-/g,"").replace(/\,/g,"").replace(/:/g,"");
		
		wCalculator.CalcuratedResult("Format(\"" + control.dispFormat + "\", \"" + wString + "\")")
		em.value = maskIn(wString, control.dispFormat)
	}
	*/
	
	var result = true;
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if (control.hasKeyUpEvent){
			result = control.fncKeyUpEvent(wKeyCode, wShiftDown, wCtrlDown, wAltDown);
		}
	}
	
	//메모리 해제
	control = null; em = null;
	
	return result;
};

/**
 * @name 		TextBox#text_KeyPress
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_KeyPress(e)
{
	e = window.event || e;
	
	var wKeyCode = (e.which ? e.which : e.keyCode);
	
	if( arrKeyCodes.indexOf(wKeyCode) >= 0 )
		return true;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	
	//브라우저 버전이 IE8 이하 버전인 경우, 태그의 maxlength 속성을 지원하지 않으므로 스크립트에서 처리(IE 7, 8)
	if( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && (navigator.appVersion.indexOf("MSIE 7") > 0 || navigator.appVersion.indexOf("MSIE 8") > 0) ){
		if( !control.multiLine && control.maxLength * 1 > 0 && (em.value + "").length > control.maxLength * 1 && (wKeyCode != 9 || wKeyCode != 13) ){
			control = null; em = null;
			return false;
		}
	}
	
	if( wKeyCode >= 48 && wKeyCode <= 57 ){	// 숫자코드
		// 모든경우에 OK
	}
	else if( control.checkType == control.CHECKTYPE.YMD
			|| control.checkType == control.CHECKTYPE.YM
			|| control.checkType == control.CHECKTYPE.YYYY
			|| control.checkType == control.CHECKTYPE.RESINUM
			|| control.checkType == control.CHECKTYPE.TAXNUM
			|| control.checkType == control.CHECKTYPE.POSTNUM
			|| control.checkType == control.CHECKTYPE.BARCODE
	){
		control = null; em = null;
		stopEvent(e); return true;
	}
	else if( control.checkType == control.CHECKTYPE.AMOUNT ){
		if( wKeyCode == 45 || wKeyCode == 46 ){	// 45 : "-", 46 : "."
			if( ("" + em.value).length != 0 ){
				control = null; em = null;
				stopEvent(e); return true;
			}
		}
		else{
			control = null; em = null;
			stopEvent(e); return true;
		}
	}
	else if( control.checkType == control.CHECKTYPE.NUMBER ){
		if( wKeyCode == 45 || wKeyCode == 46 ){	// 45 : "-", 46 : "."
			/* */
		}
		else{
			control = null; em = null;
			stopEvent(e); return true;
		}
	}
	
	stopPropagation(e);
	
	//메모리 해제
	control = null; em = null;
	
	return true;
}

/**
 * @name 		TextBox#text_KeyDown
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_KeyDown(e)
{
	//F5새로고침 방지 추가
	if( e.keyCode == 116 ){
		if( typeof e.preventDefault == "function" )
			e.preventDefault();
		else
			e.returnValue = false; // for IE
		
		return false;
	}
	
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var checkEvent = true;
	var result = true;

	//입력된 키 정보
	var wKeyCode = (e.which) ? e.which : e.keyCode;	// 키 코드
	var wCtrlDown = e.ctrlKey || e.metaKey;			// 컨트롤 // 커맨드(Mac지원)
	var wAltDown = e.altKey;						// 알트
	var wShiftDown = getShiftKeyPressed(e);			// 쉬프트

	//브라우저 버전이 IE8 이하 버전인 경우, 태그의 maxlength 속성을 지원하지 않으므로 스크립트에서 처리(IE 7, 8)
	if( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && (navigator.appVersion.indexOf("MSIE 7") > 0 || navigator.appVersion.indexOf("MSIE 8") > 0) ){
		if( !control.multiLine && control.maxLength * 1 > 0 && (em.value + "").length > control.maxLength * 1 && (wKeyCode != 9 || wKeyCode != 13) ){
			control = null; em = null;
			return false;
		}
	}
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		if (control.hasKeyDownEvent){
			result = control.fncKeyDownEvent(wKeyCode, wShiftDown, wCtrlDown, wAltDown);
			if( typeof result == "boolean" && result == false){
				stopEvent(e);
				control = null; em = null;
				return false;
			}		
		}
	}

	//키 동작
	if( wKeyCode == 9 ){
		if( wShiftDown ){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
		else{
			stopEvent(e);
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
	}
	else if( wKeyCode == 13 ){
		if( !control.multiLine ){
			stopEvent(e);
			control._isEnterKeyDown = wKeyCode;
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
	}
	
	stopPropagation(e);
	
	// e.returnValue = true;
	
	//메모리 해제
	control = null; em = null;
	
	return true;
};

/**
 * @name 		TextBox#text_Focus
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_Focus(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var checkEvent = false;
	var result = true;

	em.value = control.value;

	// 포커스를 받은 문장 전체를 수정할 수 있게 한다.
	// control.value는 포멧이 들어가지 않은 값이다
	if( !control.multiLine ){
		em.focus();
		em.select();
	}
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if (control.hasFocusEvent){
			control.fncFocusEvent();
		}
	}
	
	//메모리 해제
	control = null; em = null;
	
	return result;
};

/**
 * @name 		TextBox#text_Blur
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_Blur(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var displayFormat = control.dispFormat;
	var displayRound = control.dispRound;
	
	var checkEvent = false;
	var result = true;
	
	var wString = "";
	var wErrMsg = "";
	
	var oldValue = control.value;	var oVal = "" + oldValue;
	var newValue = em.value;		var nVal = "" + newValue;
	
	if( displayFormat.length > 0 ){
		if( displayFormat.indexOf("-") >= 0 )
			newValue = newValue.replace(/-/g,"");
		if( displayFormat.indexOf(",") >= 0 )
			newValue = newValue.replace(/,/g,"");
		if( displayFormat.indexOf(":") >= 0 )
			newValue = newValue.replace(/:/g,"");
		/*
		if( control.dispFormat.indexOf("/") >= 0 )
			newValue = newValue.replace(/\//g,"");
		*/
		if( displayFormat.indexOf("YY") != -1
			|| displayFormat.indexOf("MM") != -1
			|| displayFormat.indexOf("DD") != -1
			|| displayFormat.indexOf("Hh") != -1
			|| displayFormat.indexOf("Nn") != -1
			|| displayFormat.indexOf("Ss") != -1
			|| displayFormat.indexOf("mm") != -1
			|| displayFormat.indexOf("dd") != -1
			|| displayFormat.indexOf("hh") != -1
			|| displayFormat.indexOf("nn") != -1
			|| displayFormat.indexOf("ss") != -1
			|| displayFormat.indexOf("WK") != -1
			|| displayFormat.indexOf("wk") != -1
		){
			newValue = restoreDateFormatValue(newValue, displayFormat);
		}
	}
	
	control.value = newValue;
	
	if( (!control.multiLine && oVal == nVal)
		|| (control.multiLine && oVal.replace(/\r/gi, "") == nVal.replace(/\r/gi, ""))
	){
		em.value = (displayFormat.length > 0) ? mask(newValue, displayFormat, displayRound) : newValue;
	}
	else{
		if( !control.checkError() ){
			control.value = oldValue;
			em.focus();
			return false;
		}
	
		// dataset 갱신 기능
		if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
			result = control._UpdateDataset();
			
			if( typeof result == "boolean" && !result ){
				//컨트롤 값 복구
				control.value = oldValue;
				em.value = (displayFormat.length > 0) ? mask(oldValue, displayFormat, displayRound) : oldValue;
				em.focus();
				return false;
			}
		}
		
		//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
		if( !control.passEvent ){
			// 사용자 코딩 추가영역을 호출한다
			if( control.hasChangeEvent ){
				result = control.fncChangeEvent();
				//입력된 키 정보 복구
				control._isEnterKeyDown = -1;	
				
				if( (typeof result == "boolean" && !result)
					|| (typeof result == "undefined")
				){
					//컨트롤 값 복구
					control.value = oldValue;
					em.value = (displayFormat.length > 0) ? mask(oldValue, displayFormat, displayRound) : oldValue;
					// dataset 갱신 기능
					if( typeof ControlBase.prototype._UpdateDataset != "undefined" ) control._UpdateDataset();
					//
					em.focus();
					return false;
				}
			}
		}
		
		if( em.value.trim().length > 0 && displayFormat.length > 0 ){
			em.value = mask(newValue, displayFormat, displayRound);
		}
	}
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !control.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( control.hasBlurEvent ){
			result = control.fncBlurEvent();
			
			if( typeof result == "boolean" && result === false ){
				em.focus();
				return false;
			}
		}
	}
	
	return true;
};

/**
 * @name 		TextBox#text_Click
 * @event
 * @description	미결
 */
function text_Click(e)
{
	e = window.event || e;
//	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
//	var control = searchControl_Text(em);
};

/**
 * @name 		TextBox#text_DoubleClick
 * @event
 * @description	미결
 */
function text_DoubleClick(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);

	if( control.checkType == control.CHECKTYPE.YMD ){
		try{
			//showCalendar(em);
			popUpCalendar(em, em, 'yyyymmdd', '1');
		} catch(e){}
	}
	else if( control.checkType == control.CHECKTYPE.YM ){
		try{
			//popUpMonthCalendar(em);
			popUpCalendar(em,em,'yyyymm','2');
		} catch(e){}
	}
	else if( control.checkType == control.CHECKTYPE.YYYY ){
		try{
			//popUpYear(em);
			popUpCalendar(em,em,'yyyy','2');
		} catch(e){}
	}
	
	//메모리 해제
	control = null; em = null;
};
var BrowserDetect = {
	init: function () {
		this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
		this.version = this.searchVersion(navigator.userAgent)
			|| this.searchVersion(navigator.appVersion)
			|| "an unknown version";
		this.OS = this.searchString(this.dataOS) || "an unknown OS";
	},
	searchString: function (data) {
		for (var i=0;i<data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if (dataString.indexOf(data[i].subString) != -1)
					return data[i].identity;
			}
			else if (dataProp)
				return data[i].identity;
		}
		return true;
	},
	searchVersion: function (dataString) {
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return 0.0;
		return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
	},
	dataBrowser: [
  		{
			string: navigator.userAgent,
			subString: "Trident",
			identity: "Explorer",
			versionSearch: " rv"
		},
		{
			string: navigator.userAgent,
			subString: "Edge",
			identity: "Explorer",
			versionSearch: " Edge"
		},
		{
			string: navigator.userAgent,
			subString: "Chrome",
			identity: "Chrome"
		},
		{ 	string: navigator.userAgent,
			subString: "OmniWeb",
			versionSearch: "OmniWeb/",
			identity: "OmniWeb"
		},
		{
			string: navigator.vendor,
			subString: "Apple",
			identity: "Safari",
			versionSearch: "Version"
		},
		{
			string: navigator.userAgent,
			subString: "Opera",
			prop: window.opera,
			identity: "Opera",
			versionSearch: "Version"
		},
		{
			string: navigator.vendor,
			subString: "iCab",
			identity: "iCab"
		},
		{
			string: navigator.vendor,
			subString: "KDE",
			identity: "Konqueror"
		},
		{
			string: navigator.userAgent,
			subString: "Firefox",
			identity: "Firefox"
		},
		{
			string: navigator.vendor,
			subString: "Camino",
			identity: "Camino"
		},
		{		// for newer Netscapes (6+)
			string: navigator.userAgent,
			subString: "Netscape",
			identity: "Netscape"
		},
		{
			string: navigator.userAgent,
			subString: "MSIE",
			identity: "Explorer",
			versionSearch: "MSIE"
		},
		{
			string: navigator.userAgent,
			subString: "Gecko",
			identity: "Mozilla",
			versionSearch: "rv"
		},
		{ 		// for older Netscapes (4-)
			string: navigator.userAgent,
			subString: "Mozilla",
			identity: "Netscape",
			versionSearch: "Mozilla"
		}
	],
	dataOS : [
		{
			string: navigator.platform,
			subString: "Win",
			identity: "Windows"
		},
		{
			string: navigator.platform,
			subString: "Mac",
			identity: "Mac"
		},
		{
			   string: navigator.userAgent,
			   subString: "iPhone",
			   identity: "iPhone/iPod"
	    },
		{
			string: navigator.platform,
			subString: "Linux",
			identity: "Linux"
		}
	]

};

var browserDetect = BrowserDetect;
browserDetect.init();

var isMobile = {
	    Android: function() {
	        return navigator.userAgent.match(/Android/i);
	    },
	    BlackBerry: function() {
	        return navigator.userAgent.match(/BlackBerry/i);
	    },
	    iOS: function() {
	        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
	    },
	    Opera: function() {
	        return navigator.userAgent.match(/Opera Mini/i);
	    },
	    Windows: function() {
	        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);
	    },
	    any: function() {
	        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
	    }
};    // 강제로 ASYNC가 일어날 상황
    var AJAX_ASYNCMODE_BYFORCE  = true;
    var AJAX_ASYNCMODE_RELEASE = false;
    var syncModeByForce = AJAX_ASYNCMODE_RELEASE;

    var request_aborted = false;
    /**
     * @description	미결
     * @returns 	{boolean}
     * @example		미결
     */
    function newXMLHttpRequest() {
	    var xmlreq = false;
	    if (window.XMLHttpRequest) {
	        xmlreq = new XMLHttpRequest();
	    } else if (window.ActiveXObject) {
	        try {
	            xmlreq = new ActiveXObject("Msxml2.XMLHTTP");
	        } catch (e1) {
	            try {
	                xmlreq = new ActiveXObject("Microsoft.XMLHTTP");
	            } catch (e2) {
	            }
	        }
	    }
	     
	    return xmlreq;
	};

	/**
	 * @description	미결
	 * @param 		{number}	req
	 * @param 		{Object}	pObject
	 * @param 		{Object}	pFlag
	 * @returns 	{undefined}
	 * @example		미결
	 */
    function getReadyStateHandler(req, pObject, pFlag) {

  	  return function () {
  		  
  		if (req == null || req == undefined) return;
  		
  		progressMessage(req.readyState);

  		if (req.readyState == 4) {
  	    	//hideAjaxBox();
            if (request_aborted){
            	var message = getText("message_ajax_105", "서버와의 통신이 원활하지 않습니다. \r\n 다시 시도해 주세요.");
            	pObject.parseData(null, message, pFlag);
            	request_aborted = false;
            	//if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) req.abort();
            	
            	req.onreadystatechange = null;
            	req = null;
            	pObject = null;
            	pFlag = null;
            	
            	
            	hideAjaxBox();
                return;
            }
  	        if (req.status == 200) {
  	        	
  	            var wInfo = req.responseText;
  	            //window.clipboardData.setData("Text", wInfo);

                if (wInfo.trim().length == 0){
                	var message = getText("message_ajax_001", "서버에서 조회할 데이터가 없습니다.");
                	pObject.parseData(null, message, pFlag);
                	//if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) req.abort();
                	
                	req.onreadystatechange = null;
                	req = null;
                	pObject = null;
                	pFlag = null;
                	
                	hideAjaxBox();
                    return;
                }
                
                if (pFlag.substring(0,4).toLowerCase() == "text"){
    				pObject.parseData(wInfo, null, pFlag);
                	
                } else {
                	try {
     				   var jsonActionObject =  eval( "(" + wInfo + ")" );
   				       pObject.parseData(jsonActionObject, null, pFlag);
                	} catch (e){
                		//alert("임시테스팅 메시지입니다. \n 테스트기간: 2/21~2/25\n\n" + wInfo);
                	}
               }
               //if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) req.abort();

  	        } else {
            	var message = getAjaxStatusMessage(req.status);
            	
            	pObject.parseData(null, message);
  	        }
        	
        	if (BrowserDetect.browser == "Explorer" && BrowserDetect.version <= 6){
        		// 통과
        	} else {
        		req.onreadystatechange = null;
    	    	req = null;
    	    	pObject = null;
    	    	pFlag = null;
        	};

  	    	hideAjaxBox();
  	    }
  	  };
  	};
  	
  	/**
  	 * @description	미결
  	 * @param 		{Object}	pMethod
  	 * @param 		{Object}	pURL
  	 * @param 		{Object}	pQueryString
  	 * @param 		{Object}	pObject
  	 * @param 		{Object}	pFlag
  	 * @param 		{number}	pTimeout
  	 * @return		{void}
  	 * @example		미결
  	 */
	function ajaxCall(pMethod, pURL, pQueryString, pObject, pFlag, pTimeout) {
		
		// 강제 SYNC 모드이면 
		if (syncModeByForce == AJAX_ASYNCMODE_BYFORCE){
			ajaxCallSync(pMethod, pURL, pQueryString, pObject, pFlag, pTimeout)
			return;
		}
		
		// 여기에 메시지 박스를 넣는 것으로 통일한다 
		showAjaxBox("자료를 조회하는 중입니다.", 0);
		
		if (pTimeout == undefined) pTimeout = 10;
	    var xmlHttp = newXMLHttpRequest();
	    
	    var handlerFunction = getReadyStateHandler(xmlHttp, pObject, pFlag);
	    xmlHttp.onreadystatechange = handlerFunction;
	    
	    try {
	        if(pMethod=='GET'){
	                 xmlHttp.open(pMethod, pURL + "?" + pQueryString, true);
	                 if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
	         	       	xmlHttp.timeout = pTimeout * 1000;
	         	       	xmlHttp.ontimeout = function() {
	         	       		request_aborted = true; this.abort();
	         	       	    pObject = null;
	         	       	    //xmlHttp = null;
	         	        };
	                 }
	                 xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
	                 /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
	                 xmlHttp.setRequestHeader("Connection", "close");*/
	                 xmlHttp.send(null);
	                 
	         } else if(pMethod=='POST')  {
	                 xmlHttp.open(pMethod, pURL, true);
	                 if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
	         	       	xmlHttp.timeout = pTimeout * 1000;
	         	       	xmlHttp.ontimeout = function() {
	         	       		request_aborted = true; this.abort();
	         	       	    this.onreadystatechange = null;
	         	       	    pObject = null;
	         	       	    //xmlHttp = null;
	         	        }
	                 }
	                 if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 9) {
		            	 xmlHttp.setRequestHeader("X-UA-Compatible", "IE=EmulateIE8");
		            	 xmlHttp.setRequestHeader("Cache-Control", "no-store, no-cache, must-revalidate");
		            	 xmlHttp.setRequestHeader("Pragma", "no-cache");
		            	 xmlHttp.setRequestHeader("expires", "-1");
		             }
	                 xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
	                 /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
	                 xmlHttp.setRequestHeader("Connection", "close");*/
	                 xmlHttp.send(pQueryString);
	         }
	    } catch(e) {
  	    	hideAjaxBox();
	        alert(e);
	    }
		pObject = null;
		xmlHttp = null;

		return;
	};
	
	/**
	 * @description	미결
	 * @param		{Object}	pMethod
	 * @param		{Object}	pURL
	 * @param		{Object}	pQueryString
	 * @param		{Object}	pObject
	 * @param		{Object}	pFlag
	 * @param		{number}	pTimeout
	 * @return		{void}
	 * @example		미결
	 */
	function ajaxCallSync(pMethod, pURL, pQueryString, pObject, pFlag, pTimeout) {
		// 여기에 메시지 박스를 넣는 것으로 통일한다 
		showAjaxBox("자료를 조회하는 중입니다.", 0);

		if (pTimeout == undefined) pTimeout = 10;
        var xmlHttp = newXMLHttpRequest();
        
        var handlerFunction = getReadyStateHandler(xmlHttp, pObject, pFlag);
            if(pMethod=='GET'){
                try {
                    if(BrowserDetect.browser != "Firefox"){
                        xmlHttp.onreadystatechange = handlerFunction;
                    }
                    
                    xmlHttp.open(pMethod, pURL + "?" + pQueryString, false);
                    if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
		            	xmlHttp.timeout = pTimeout * 1000;
		            	xmlHttp.ontimeout = function() {
		            		request_aborted = true; this.abort();
	         	       	    this.onreadystatechange = null;
	         	       	    pObject = null;
	         	       	    //xmlHttp = null;
		                }
		            }
                    xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
                    /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
                    xmlHttp.setRequestHeader("Connection", "close");*/
                    xmlHttp.send(null);
                    if(BrowserDetect.browser == "Firefox"){
                        handlerFunction();
                    }
                } catch(e) {
                   alert(e);
                }
            } else if(pMethod=='POST')  {
                try {
                    if(BrowserDetect.browser != "Firefox"){
                        xmlHttp.onreadystatechange = handlerFunction;
                    }
                    
                    xmlHttp.open(pMethod, pURL, false);
                     if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 9) {
                         xmlHttp.setRequestHeader("X-UA-Compatible", "IE=EmulateIE8");
                         xmlHttp.setRequestHeader("Cache-Control", "no-store, no-cache, must-revalidate");
                         xmlHttp.setRequestHeader("Pragma", "no-cache");
                         xmlHttp.setRequestHeader("expires", "-1");
                     }
                     if (parseFloat(navigator.appVersion.substring(navigator.appVersion.indexOf("MSIE")+5)) >= 8) {
		            	 xmlHttp.timeout = pTimeout * 1000;
		            	 xmlHttp.ontimeout = function() {
		            		 request_aborted = true; this.abort();
		         	       	    this.onreadystatechange = null;
		         	       	    pObject = null;
		         	       	    //xmlHttp = null;
		            	 };
		             }
                     xmlHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
                     /*xmlHttp.setRequestHeader("Content-length", pQueryString.length);
                     xmlHttp.setRequestHeader("Connection", "close");*/
                     xmlHttp.send(pQueryString);
                     
                     if(BrowserDetect.browser == "Firefox"){
                         handlerFunction();
                     }
                 } catch(e) {
                       alert(e);
                 }
            }
            
     return;
};

/*
* 
* 
*/

var ajaxBoxCallingCount = 0;
var NEED_COUNT_UP = true;
var NEED_NOT_COUNT_UP = false;

/**
 * @description 미결
 * @param 		{String}	ment
 * @param 		{Number}	delayTime
 * @param 		{Number}	countUp
 * @return		{void}
 * @example		미결
 */
function showAjaxBox(ment, delayTime, countUp){  // countUp: ajaxBoxCallingCount을 증가
    if (delayTime == undefined) delayTime = 0;

    if (countUp == undefined) {
        countUp = NEED_COUNT_UP;
    } else if (typeof(countUp) == "boolean" && countUp == true) {
        countUp = NEED_COUNT_UP;
    } else if (typeof(countUp) == "Number" && countUp != 0) {
        countUp = NEED_COUNT_UP;
    } 

    if(countUp == NEED_COUNT_UP) {
    	ajaxBoxCallingCount++;
    }
    showProgressBar(ment);
    // setTimeout(function(){showProgressBar(ment);}, delayTime);

    //inProcess = true; // setTimeout가 뒤늦게 호출되었을 때, 보일지 구분
    return;
};

/**
 * @description	미결
 * @param 		{String}	ment
 * @return		{undefined}
 * @example		미결
 */
function showProgressBar(ment){
//   if (!inProcess) return;
   
//   debug.enable = true;
//   debug.print("======================================================");
//   debug.printStackTrace();

//   document.getElementsByName("ajaxBox")[0].style.display = "block";
   try {   
		//항상 화면 중앙에 나타나도록 한다
	   var yp=document.body.scrollTop;
	   var xp=document.body.scrollLeft;
	
	   var ws = 0;
	   var hs = 0;
	   
	   if( typeof( window.innerWidth ) == 'number' ) {
	       //Non-IE
	       ws = window.innerWidth;
	       hs = window.innerHeight;
	   } else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
	       //IE 6+ in 'standards compliant mode'
	       ws = document.documentElement.clientWidth;
	       hs = document.documentElement.clientHeight;
	   } else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {
	       //IE 4 compatible
	       ws = document.body.clientWidth;
	       hs = document.body.clientHeight;
	   }
	   
	   var ajaxBox = document.getElementById("ajaxBox");
	   var ajaxBoxMent = document.getElementById("ajaxBoxMent");
	   if (ajaxBoxMent.getElementsByTagName("DIV").length == 0){
		   ajaxBoxMent.innerHTML = "<DIV style='text-align:center;'>.</DIV>" +
		   						   "<img src='"+ getContextPath() + "/winnersoft/images/progressbar.gif'/>" +
		   						   "<BR/><span onclick='javascript:cancelJob();' onmouseover='this.style.fontWeight=\"bold\";this.style.color=\"#4169E1\"' onmouseout='this.style.color=\"#aaaaaa\"' style='font-size:12px;font-weight:bold;cursor:pointer;color:#aaaaaa'></span>";
	   }
	   
	   // 만약 구버전에서 ajaxBoxMent가 ajaxBox내에 있으면 다음으로 뺀다
	   if (ajaxBoxMent.parentNode == ajaxBox){
		   ajaxBox.removeChild(ajaxBoxMent);
		   ajaxBox.insertAdjacentElement('afterEnd', ajaxBoxMent);
	   }
	   
	   if(!ment) ment = getText("message_ajax_002", "잠시만 기다려 주세요");
	   ajaxBoxMent.getElementsByTagName("DIV")[0].innerText = ment;
		   
	   ajaxBox.style.position = "absolute";
	   ajaxBox.style.display = "block";
	   ajaxBox.style.zIndex = 20000;
	   ajaxBox.style.top = 0;
	   ajaxBox.style.left = 0;
	   ajaxBox.style.width = ws +'px';
//	   ajaxBox.style.height = hs-205 +'px';
	   ajaxBox.style.height = hs +'px';
	   ajaxBox.style.marginLeft = "-15px";
//	   ajaxBox.style.width = "100%";//ws +'px';
//	   ajaxBox.style.height = "100%";//hs +'px';
	   
	   ajaxBoxMent.style.position = "absolute";
	   ajaxBoxMent.style.display = "block";
	   ajaxBoxMent.style.zIndex = 20001;
//	   ajaxBoxMent.style.top = yp+(hs/2)-75-102 +'px';   // 파이어폭스, 크롬에서는  'px' 를 붙여줘야한다
	   ajaxBoxMent.style.top = yp+(hs/2)-71 +'px';   // 파이어폭스, 크롬에서는  'px' 를 붙여줘야한다
//	   ajaxBoxMent.style.top = yp+(hs/2)-75 +'px';   // 파이어폭스, 크롬에서는  'px' 를 붙여줘야한다
//	   ajaxBoxMent.style.left = xp+(ws/2)-75 +'px';	 	  
	   ajaxBoxMent.style.left = xp+(ws/2)-50 +'px';	 	  
	   
	   /*var compStyle = ajaxBoxMent.currentStyle ? ajaxBoxMent.currentStyle : getComputedStyle(ajaxBoxMent, null);
	   var wHeight = (compStyle != null &&  compStyle.height.length > 0 ? parseIntSize(compStyle.height) : 70);
	   var wWidth = (compStyle != null &&  compStyle.width.length > 0 ? parseIntSize(compStyle.width) : 400);

	   ajaxBoxMent.style.top  = yp + ((hs - wHeight)/2) +'px'; 
	   ajaxBoxMent.style.left = xp + ((ws - wWidth)/2) +'px';	 	    */
   
   } catch(e){
	   
	   alert(e);
	   
   }
};

/**
 * @description	미결
 * @param		{number}	countUp
 * @return		{void}
 * @example		미결
 */
function hideAjaxBox(countUp){
	
	if(countUp == undefined || typeof(countUp) != "boolean" ) {
		countUp = NEED_COUNT_UP;
	} 
	if (countUp == NEED_COUNT_UP) ajaxBoxCallingCount--;
	
    if (ajaxBoxCallingCount > 0) {
    	return;
    }
    
    hideAjaxBox_timer();
    //setTimeout(function(){hideAjaxBox_timer();}, 0);
    
    return;
};

/**
 * description	미결
 * return		{undefined}
 * example		미결
 */
function hideAjaxBox_timer(){
/*
	debug.enable = true;
	var busy = jobControler.busy;
	busy = busy || objectManager.busy;
	
	for (var wKey in batchWorks){
    	if (batchWorks[wKey] instanceof Function) continue;
    	busy = busy || batchWorks[wKey].busy;
    }
	for (var i = 0; i < charts.length; i++) {
		busy = busy || charts[i].busy;
	}
	for (var i = 0; i < crosssheets.length; i++) {
		busy = busy || crosssheets[i].busy;
	}
	for (var i = 0; i < pictures.length; i++) {
		busy = busy || pictures[i].busy;
	}
	for (var i = 0; i < reports.length; i++) {
		busy = busy || reports[i].busy;
	}
		
	if (busy) return;
 * */    
    
    
    
    document.getElementsByName("ajaxBox")[0].style.display = "none";
    document.getElementsByName("ajaxBoxMent")[0].style.display = "none";
    
   //inProcess = false;
};

//이벤트를 호출한다 (첫번째는 이벤트 함수명, 그다음들은 인수명)
/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
function callEvent(){
	var functionName =  arguments[0]; 
	
	var functionString =  functionName + "("; 
    for (var i = 1; i < arguments.length; i++)
    {
	   if (i > 1) functionString += ",";
	   
	   if (typeof(arguments[i]) == "string"){
		   functionString += "'" + arguments[i].replaceWord("\"", "").replaceWord("\n", "\\n").replaceWord("\'","\\\'") + "'";
	   } else {
		   functionString += arguments[i];
	   }
    }
    functionString +=  ")";

	var checkFunction = false;
	try {
    	if (eval(functionName)) checkFunction = true;
   } catch(e){}
    
   if (checkFunction){
   	eval(functionString);
   }
	    
    return;
};


/**
 * @description	미결
 * @param 		{String}	status
 * @returns 	{String}
 * @example		미결
 */
function getAjaxStatusMessage(status){
	var errInfo = "";

	if (status == 0) {
        errInfo = getText("message_ajax_0", "서버와의 통신이 원활하지 않습니다.\n서버와의 연결을 확인해 주세요.");
    } else if (status == 401) {
        errInfo = getText("message_ajax_401", "오류번호:401\n 권한이 없습니다.");
    } else if (status == 403) {
        errInfo = getText("message_ajax_403", "오류번호:403\n 접근이 금지되었습니다.");
    } else if (status == 404) {
        errInfo = getText("message_ajax_404", "오류번호:404\n URL주소가 잘못되었습니다. 서버가 응답하지 못합니다.."); 
    } else if (status == 301) {
        errInfo = getText("message_ajax_301", "오류번호:301\n URL주소가 영구적으로 변경되었습니다."); 
    } else if (status == 302) {
        errInfo = getText("message_ajax_302", "오류번호:302\n 주소는 맞지만 다른 서버의 URL/URI를 호출 할 수는 없습니다.");
    } else if (status == 305) {
        errInfo = getText("message_ajax_305", "오류번호:305\n 리소스에 접근하기 위하여는 프록시를 설정하여야 합니다.");
    } else if (status == 12001) {
        errInfo = getText("message_ajax_12001", "오류번호:ERROR_INTERNET_OUT_OF_HANDLES\n No more handles could be generated at this time.");	
    } else if (status == 12002) {
        errInfo = getText("message_ajax_12002", "오류번호:ERROR_INTERNET_TIMEOUT\n The request has timed out.");	
    } else if (status == 12003) {
        errInfo = getText("message_ajax_12003", "오류번호:ERROR_INTERNET_EXTENDED_ERROR\n An extended error was returned from the server.");	
    } else if (status == 12004) {
        errInfo = getText("message_ajax_12004", "오류번호:ERROR_INTERNET_INTERNAL_ERROR\n An internal error has occurred.");	
    } else if (status == 12005) {
        errInfo = getText("message_ajax_12005", "오류번호:ERROR_INTERNET_INVALID_URL\n The URL is invalid.");	
    } else if (status == 12006) {
        errInfo = getText("message_ajax_12006", "오류번호:ERROR_INTERNET_UNRECOGNIZED_SCHEME\n The URL scheme could not be recognized or is not supported.");	
    } else if (status == 12007) {
        errInfo = getText("message_ajax_12007", "오류번호:ERROR_INTERNET_NAME_NOT_RESOLVED\n The server name could not be resolved.");	
    } else if (status == 12008) {
        errInfo = getText("message_ajax_12008", "오류번호:ERROR_INTERNET_PROTOCOL_NOT_FOUND\n The requested protocol could not be located.");	
    } else if (status == 12009) {
        errInfo = getText("message_ajax_12009", "오류번호:ERROR_INTERNET_INVALID_OPTION\n A request to InternetQueryOption or InternetSetOption specified an invalid option value.");	
    } else if (status == 12010) {
        errInfo = getText("message_ajax_12010", "오류번호:ERROR_INTERNET_BAD_OPTION_LENGTH\n The length of an option supplied to InternetQueryOption or InternetSetOption is incorrect for the type of option specified.");	
    } else if (status == 12011) {
        errInfo = getText("message_ajax_12011", "오류번호:ERROR_INTERNET_OPTION_NOT_SETTABLE\n The request option cannot be set, only queried.");	
    } else if (status == 12012) {
        errInfo = getText("message_ajax_12012", "오류번호:ERROR_INTERNET_SHUTDOWN\n The Win32 Internet function support is being shut down or unloaded.");	
    } else if (status == 12013) {
        errInfo = getText("message_ajax_12013", "오류번호:ERROR_INTERNET_INCORRECT_USER_NAME\n The request to connect and log on to an FTP server could not be completed because the supplied user name is incorrect.");	
    } else if (status == 12014) {
    	errInfo = getText("message_ajax_12014", "오류번호:ERROR_INTERNET_INCORRECT_PASSWORD\n The request to connect and log on to an FTP server could not be completed because the supplied password is incorrect.");	
    } else if (status == 12015) {
        errInfo = getText("message_ajax_12015", "오류번호:ERROR_INTERNET_LOGIN_FAILURE\n The request to connect to and log on to an FTP server failed.");	
    } else if (status == 12016) {
        errInfo = getText("message_ajax_12016", "오류번호:ERROR_INTERNET_INVALID_OPERATION\n The requested operation is invalid.");	
    } else if (status == 12017) {
        errInfo = getText("message_ajax_12017", "오류번호:ERROR_INTERNET_OPERATION_CANCELLED\n The operation was canceled, usually because the handle on which the request was operating was closed before the operation completed.");	
    } else if (status == 12018) {
        errInfo = getText("message_ajax_12018", "오류번호:ERROR_INTERNET_INCORRECT_HANDLE_TYPE\n The type of handle supplied is incorrect for this operation.");	
    } else if (status == 12019) {
        errInfo = getText("message_ajax_12019", "오류번호:ERROR_INTERNET_INCORRECT_HANDLE_STATE\n The requested operation cannot be carried out because the handle supplied is not in the correct state.");	
    } else if (status == 12020) {
        errInfo = getText("message_ajax_12020", "오류번호:ERROR_INTERNET_NOT_PROXY_REQUEST\n The request cannot be made via a proxy.");	
    } else if (status == 12021) {
        errInfo = getText("message_ajax_12021", "오류번호:ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND\n A required registry value could not be located.");	
    } else if (status == 12022) {
        errInfo = getText("message_ajax_12022", "오류번호:ERROR_INTERNET_BAD_REGISTRY_PARAMETER\n A required registry value was located but is an incorrect type or has an invalid value.");	
    } else if (status == 12023) {
        errInfo = getText("message_ajax_12023", "오류번호:ERROR_INTERNET_NO_DIRECT_ACCESS\n Direct network access cannot be made at this time.");	
   	} else if (status == 12024) {
        errInfo = getText("message_ajax_12024", "오류번호:ERROR_INTERNET_NO_CONTEXT\n An asynchronous request could not be made because a zero context value was supplied.");	
   	} else if (status == 12025) {
        errInfo = getText("message_ajax_12025", "오류번호:ERROR_INTERNET_NO_CALLBACK\n An asynchronous request could not be made because a callback function has not been set.");	
   	} else if (status == 12026) {
        errInfo = getText("message_ajax_12026", "오류번호:ERROR_INTERNET_REQUEST_PENDING\n The required operation could not be completed because one or more requests are pending.");	
   	} else if (status == 12027) {
        errInfo = getText("message_ajax_12027", "오류번호:ERROR_INTERNET_INCORRECT_FORMAT\n The format of the request is invalid.");	
   	} else if (status == 12028) {
        errInfo = getText("message_ajax_12028", "오류번호:ERROR_INTERNET_ITEM_NOT_FOUND\n The requested item could not be located.");	
   	} else if (status == 12029) {
        errInfo = getText("message_ajax_12029", "오류번호:ERROR_INTERNET_CANNOT_CONNECT\n The attempt to connect to the server failed.");	
   	} else if (status == 12030) {
        errInfo = getText("message_ajax_12030", "오류번호:ERROR_INTERNET_CONNECTION_ABORTED\n The connection with the server has been terminated.");	
   	} else if (status == 12031) {
        errInfo = getText("message_ajax_12031", "오류번호:ERROR_INTERNET_CONNECTION_RESET\n The connection with the server has been reset.");	
   	} else if (status == 12032) {
        errInfo = getText("message_ajax_12032", "오류번호:ERROR_INTERNET_FORCE_RETRY\n Calls for the Win32 Internet function to redo the request.");	
   	} else if (status == 12033) {
        errInfo = getText("message_ajax_12033", "오류번호:ERROR_INTERNET_INVALID_PROXY_REQUEST\n The request to the proxy was invalid.");	
   	} else if (status == 12036) {
        errInfo = getText("message_ajax_12036", "오류번호:ERROR_INTERNET_HANDLE_EXISTS\n The request failed because the handle already exists.");	
   	} else if (status == 12037) {
   		errInfo = getText("message_ajax_12037", "오류번호:ERROR_INTERNET_SEC_CERT_DATE_INVALID\n SSL certificate date that was received from the server is bad. The certificate is expired.");	
   	} else if (status == 12038) {
   		errInfo = getText("message_ajax_12038", "오류번호:ERROR_INTERNET_SEC_CERT_CN_INVALID\n SSL certificate common name (host name field) is incorrect.");	
   	} else if (status == 12039) {
   		errInfo = getText("message_ajax_12039", "오류번호:ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR\n The application is moving from a non-SSL to an SSL connection because of a redirect.");	
   	} else if (status == 12040) {
   		errInfo = getText("message_ajax_12040", "오류번호:ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR\n The application is moving from an SSL to an non-SSL connection because of a redirect.");	
   	} else if (status == 12041) {
   		errInfo = getText("message_ajax_12041", "오류번호:ERROR_INTERNET_MIXED_SECURITY\n Indicates that the content is not entirely secure.");	
   	} else if (status == 12042) {
   		errInfo = getText("message_ajax_12042", "오류번호:ERROR_INTERNET_CHG_POST_IS_NON_SECURE\n The application is posting and attempting to change multiple lines of text on a server that is not secure.");	
   	} else if (status == 12043) {
   		errInfo = getText("message_ajax_12043", "오류번호:ERROR_INTERNET_POST_IS_NON_SECURE\n The application is posting data to a server that is not secure.");	
   	} else if (status == 12110) {
   		errInfo = getText("message_ajax_12110", "오류번호:ERROR_FTP_TRANSFER_IN_PROGRESS\n The requested operation cannot be made on the FTP session handle because an operation is already in progress.");	
   	} else if (status == 12111) {
   		errInfo = getText("message_ajax_12111", "오류번호:ERROR_FTP_DROPPED\n The FTP operation was not completed because the session was aborted.");	
   	} else if (status == 12150) {
   		errInfo = getText("message_ajax_12150", "오류번호:ERROR_HTTP_HEADER_NOT_FOUND\n The requested header could not be located.");	
   	} else if (status == 12151) {
   		errInfo = getText("message_ajax_12151", "오류번호:ERROR_HTTP_DOWNLEVEL_SERVER\n The server did not return any headers.");	
   	} else if (status == 12152) {
   		errInfo = getText("message_ajax_12152", "오류번호:ERROR_HTTP_INVALID_SERVER_RESPONSE\n The server response could not be parsed.");	
   	} else if (status == 12153) {
   		errInfo = getText("message_ajax_12153", "오류번호:ERROR_HTTP_INVALID_HEADER\n The supplied header is invalid.");	
   	} else if (status == 12154) {
   		errInfo = getText("message_ajax_12154", "오류번호:ERROR_HTTP_INVALID_QUERY_REQUEST\n The request made to HttpQueryInfo is invalid.");	
   	} else if (status == 12155) {
   		errInfo = getText("message_ajax_12155", "오류번호:ERROR_HTTP_HEADER_ALREADY_EXISTS\n The header could not be added because it already exists.");	
    } else if (status == 12156) {
    	errInfo = getText("message_ajax_12156", "오류번호:ERROR_HTTP_REDIRECT_FAILED\n The redirection failed because either the scheme changed or all attempts made to redirect failed");	
    } else {
    	errInfo = getText("message_ajax_999", "알 수 없는 오류\n 오류번호 : {0}", "" + status);
    }  
    return errInfo;
};



/* *****************************************************************************
*  XMLHttpIRequest : 아이프레임을 통한  리퀘스트 
* *****************************************************************************/
/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
function XMLHttpIRequest() {   
	
	this.name = "";
	this.parentNode = document.getElementById("IFrameLayer"); 
    this.method = "";
    this.url = "";
    this.queryString = "";
    
    this.contentType = "";
    this.contentLength = "";
    this.connection = "";
    this.async = true;
    
    this.responseText = "";
    this.readyState = 0;
    this.status = 0;
    
    this.onreadystatechange = null;

	// 이름을 먼저 만든다
    var name = ""; var i = 0;
    name = "IJAX_" + i;
    while(document.getElementsByName(name).length > 0){
    	name = "IJAX_" + (++i);
    }
	this.name = name;

    var iframe = document.createElement("iframe");  
    iframe.name = iframe.id = name;
    this.parentNode.appendChild(iframe);  


    iframe.doc = null;  
    if(iframe.contentDocument) iframe.doc = iframe.contentDocument;           // Firefox, Opera  
    else if(iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer  
    else if(iframe.document) iframe.doc = iframe.document;                    // Others?  
    if(iframe.doc == null)  
       throw getText("message_ajax_003", "문서가 발견되지 않았습니다. IFrame을 만들기 전에 DOM에 DIV(parent element)를 추가하세요"); 

    iframe.doc.open();  
    iframe.doc.close(); 
    
    this.iframe = iframe;
	
	this.open = function(pMethod, pURL, async){
    	// functionname : [XMLHttpIRequest.open]

    	this.method = pMethod;
    	
    	//페이지명에 "_Text"를 붙여서 스트럿츠가 부별하게 해준다.
    	var wUrl = pURL.substring(0,pURL.lastIndexOf(".")) + "_Text" + pURL.substring(pURL.lastIndexOf("."));

        this.async = async;
        if (this.method == "GET"){
            if (pURL.indexOf("?") == 0){
        	    this.url = pURL;
        	    this.queryString = "";
    	    } else {
        	    this.url = pURL.split("\?")[0];
        	    this.queryString = pURL.split("\?")[1];
    	    }

   		    return;
        } else {
        	this.url = pURL;
        	this.queryString = "";
    		return;
        }
        
        
    };
    
    //xmlHttp.setRequestHeader("Content-type", "text/plain; charset=UTF-8");
    this.setRequestHeader = function(headerName, HeaderValue){
    	// functionname : [XMLHttpIRequest.setRequestHeader]
    	if (headerName == "Content-type"){
    		this.contentType = HeaderValue;
    	} else if (headerName == "Content-length"){
    		this.contentLength = HeaderValue;
    	} else if (headerName == "Connection"){
    		this.connection = HeaderValue;
    	} 
    };
    this.send = function(pQueryString){
    	// functionname : [XMLHttpIRequest.send]
    	
    	var iframe = this.iframe;
    	
    	var iframe = this.iframe;
    	iframe.parentObject = this;
        iframe.onload = function(){
        	// functionname : [XMLHttpIRequest.onload]
        	
                this.parentObject.readyState = 4;
                this.parentObject.status = 200;
                this.parentObject.responseText = this.contentDocument.body.innerText;
                this.parentObject.onreadystatechange();
        };
        
        iframe.onreadystatechange = function(){
        	// functionname : [XMLHttpIRequest.onreadystatechange]
        	
	        if (this.readyState == 'complete') {
                this.parentObject.readyState = 4;
                this.parentObject.status = 200;
                this.parentObject.responseText = this.contentWindow.document.body.innerText;
                this.parentObject.onreadystatechange();
            }
        };

        if (this.method == "GET"){
        
        	if (pQueryString == null || pQueryString.trim().length == 0){
        		iframe.src = this.url;
        	} else {
        		iframe.src = this.url + "?" + pQueryString;
        	}
    	} else {
    	
            var frm = iframe.doc.createElement("form");  
            iframe.doc.body.appendChild(frm);  
            
            frm.method = this.method;
            frm.name   = frm.id ="frmbjax" ;
            frm.action = this.url;
            frm.enctype= this.contentType;

            var arrQueryInfos = parseQueryString(pQueryString);
            
            for (var i = 0; i < arrQueryInfos.length; i++){
        	    var QueryInfo = arrQueryInfos[i];
            	
                var wControl = iframe.doc.createElement("input");
                wControl.type = "hidden";  
                wControl.id   = wControl.name = QueryInfo.varName;
                wControl.value = QueryInfo.value;
                frm.appendChild(wControl);
            }
            
            this.frm = frm;
            
    		this.frm.submit();
    	}
    };
 };

 /**
  * @description	미결
  * @param			{String}	str
  * @return			{undefined}
  * @example		미결
  */
 function queryInfo(str){
	 var arrStr = str.split("=");
	 this.varName = arrStr[0];
	 this.value = decodeURIComponent(arrStr[1]);
 };
 
 /**
  * @description	미결
  * @param			{String}	query
  * @return			{String}
  * @example		미결
  */
 function parseQueryString(query){
	 var arrReturn = [];
	 var wQueryElements = query.split("&");
	 
	 var seq = 0;
	 for (var i = 0; i < wQueryElements.length; i++){
		 if (wQueryElements[i].trim().length == 0) continue;
		 if (wQueryElements[i].indexOf("=") == 0) continue;
		 
		 arrReturn[seq++] = new queryInfo(wQueryElements[i]);
	 }
	 
	 return arrReturn;
 };

 /**
  * @description	미결
  * @param 			{String}	readyState
  * @return			{undefined}
  * @example		미결
  */
function progressMessage(readyState){
   if (readyState == 1) {
	   showAjaxBox(getText("message_ajax_101", "서버에 연결중입니다."), 0, NEED_NOT_COUNT_UP);
   } else if (readyState == 2) {
	   showAjaxBox(getText("message_ajax_102", "데이터 요청이 시작되었습니다."), 0, NEED_NOT_COUNT_UP);
   } else if (readyState == 3) {
	   showAjaxBox(getText("message_ajax_103", "수신 중, 서버가 응답을 보내는 중임."), 0, NEED_NOT_COUNT_UP);
   } else if (readyState == 4) {
	   showAjaxBox(getText("message_ajax_104", "수신완료. 자료를 해석중입니다."), 0, NEED_NOT_COUNT_UP);
   } 
};	 


//로케일 메시지 =================================================================================
//사용방법 1(메시지만):         alert(getText("message_ajax_01"));  
//사용방법 2(메시지, 디폴트):  alert(getText("message_ajax_011", "no message"));
//사용방법 3(메시지, 디폴트, 문자열):  alert(getText("message_ajax_01", "{0} message", "XXX"));
//사용방법 4(메시지, 디폴트, 배열):  alert(getText("message_ajax_02", "no message", ["XXX", 2]));
//-----------------------------------------------------------------------------------------------
/**
 * @description	미결
 * @param		{Object}	key
 * @param		{Object}	defaultMsg
 * @param		{number}	params
 * @return		{String}
 * @example		미결
 */
function getText(key, defaultMsg, params){
	var wReturn = "";
	var msgObjectDefined = false;
    try {
    	wReturn = msgObject[key];
    	msgObjectDefined = true;
    } catch (e){}
    
	if (!msgObjectDefined || wReturn == undefined || wReturn == null || wReturn.length==0){
		if (defaultMsg != undefined && defaultMsg.length > 0){
			wReturn = defaultMsg;
		} else {
			wReturn = "";
		}
	}
	if (params != undefined){
		if (isArray(params)){
			for(var i = 0; i < params.length; i++){
				wReturn = wReturn.replaceWord("{" + i + "}", "" + params[i]);
			} 
		} else if (isString(params)){
			wReturn = wReturn.replaceWord("{0}", params);
			
		} else {
			wReturn = wReturn.replaceWord("{0}", "" + params);
			
		} 
	}
	
	return wReturn;
};

/*
 * NumberFormat 1.5.3
 * v1.5.3 - 29-September-2004
 * v1.5.2 - 27-August-2004
 * v1.5.1 - 13-February-2004
 * v1.5.0 - 20-December-2002
 * v1.0.3 - 23-March-2002
 * v1.0.2 - 13-March-2002
 * v1.0.1 - 20-July-2001
 * v1.0.0 - 13-April-2000
 * http://www.mredkj.com
 */
  
/*
 * NumberFormat -The constructor
 * num - The number to be formatted.
 *  Also refer to setNumber
 * inputDecimal - (Optional) The decimal character for the input
 *  Also refer to setInputDecimal
 */
 
/**
 * @description 미결
 * @param		{number}	pNum
 * @return		{string}
 * @example		미결
 */
function RateFormat(pNum){

	var num = new NumberFormat();
	num.setInputDecimal('.');
	num.setNumber(pNum); 
	num.setPlaces('2');
	num.setCurrencyValue('$');
	num.setCurrency(false);
	num.setCurrencyPosition(num.LEFT_OUTSIDE);
	num.setNegativeFormat(num.LEFT_DASH);
	num.setNegativeRed(false);
	num.setSeparators(true, ',', ',');
	return num.toFormatted();

};
/**
 * @description 미결
 * @param		{number}	pNum
 * @return		{string}
 * @example		미결
 */
function AmountFormat(pNum){

	var num = new NumberFormat();
	num.setInputDecimal('.');
	num.setNumber(pNum); 
	num.setPlaces('0');
	num.setCurrencyValue('\\');
	num.setCurrency(false);
	num.setCurrencyPosition(num.LEFT_OUTSIDE);
	num.setNegativeFormat(num.LEFT_DASH);
	num.setNegativeRed(false);
	num.setSeparators(true, ',', ',');
	
	return num.toFormatted();

};
 

/**
 * @description 미결
 * @param		{number}	Num
 * @param		{String}	inputDecimal
 * @return		{string}
 * @example		미결
 */
function NumberFormat(num, inputDecimal)
{
	// constants
	this.COMMA = ',';
	this.PERIOD = '.';
	this.DASH = '-'; // v1.5.0 - new - used internally
	this.LEFT_PAREN = '('; // v1.5.0 - new - used internally
	this.RIGHT_PAREN = ')'; // v1.5.0 - new - used internally
	this.LEFT_OUTSIDE = 0; // v1.5.0 - new - currency
	this.LEFT_INSIDE = 1;  // v1.5.0 - new - currency
	this.RIGHT_INSIDE = 2;  // v1.5.0 - new - currency
	this.RIGHT_OUTSIDE = 3;  // v1.5.0 - new - currency
	this.LEFT_DASH = 0; // v1.5.0 - new - negative
	this.RIGHT_DASH = 1; // v1.5.0 - new - negative
	this.PARENTHESIS = 2; // v1.5.0 - new - negative
	this.NO_ROUNDING = -1; // v1.5.1 - new

	// member variables
	this.num;
	this.numOriginal;
	this.hasSeparators = false;  // v1.5.0 - new
	this.separatorValue;  // v1.5.0 - new
	this.inputDecimalValue; // v1.5.0 - new
	this.decimalValue;  // v1.5.0 - new
	this.negativeFormat; // v1.5.0 - new
	this.negativeRed; // v1.5.0 - new
	this.hasCurrency;  // v1.5.0 - modified
	this.currencyPosition;  // v1.5.0 - new
	this.currencyValue;  // v1.5.0 - modified
	this.places;
	this.roundToPlaces; // v1.5.1 - new

	// external methods
	this.setNumber = setNumberNF;
	this.toUnformatted = toUnformattedNF;
	this.setInputDecimal = setInputDecimalNF; // v1.5.0 - new
	this.setSeparators = setSeparatorsNF; // v1.5.0 - new - for separators and decimals
	this.setCommas = setCommasNF;
	this.setNegativeFormat = setNegativeFormatNF; // v1.5.0 - new
	this.setNegativeRed = setNegativeRedNF; // v1.5.0 - new
	this.setCurrency = setCurrencyNF;
	this.setCurrencyPrefix = setCurrencyPrefixNF;
	this.setCurrencyValue = setCurrencyValueNF; // v1.5.0 - new - setCurrencyPrefix uses this
	this.setCurrencyPosition = setCurrencyPositionNF; // v1.5.0 - new - setCurrencyPrefix uses this
	this.setPlaces = setPlacesNF;
	this.toFormatted = toFormattedNF;
	this.toPercentage = toPercentageNF;
	this.getOriginal = getOriginalNF;
	this.moveDecimalRight = moveDecimalRightNF;
	this.moveDecimalLeft = moveDecimalLeftNF;

	// internal methods
	this.getRounded = getRoundedNF;
	this.preserveZeros = preserveZerosNF;
	this.justNumber = justNumberNF;
	this.expandExponential = expandExponentialNF;
	this.getZeros = getZerosNF;
	this.moveDecimalAsString = moveDecimalAsStringNF;
	this.moveDecimal = moveDecimalNF;
	this.addSeparators = addSeparatorsNF;

	// setup defaults
	if (inputDecimal == null) {
		this.setNumber(num, this.PERIOD);
	} else {
		this.setNumber(num, inputDecimal); // v.1.5.1 - new
	}
	this.setCommas(true);
	this.setNegativeFormat(this.LEFT_DASH); // v1.5.0 - new
	this.setNegativeRed(false); // v1.5.0 - new
	this.setCurrency(false); // v1.5.1 - false by default
	this.setCurrencyPrefix('$');
	this.setPlaces(2);
};

/*
 * setInputDecimal
 * val - The decimal value for the input.
 *
 * v1.5.0 - new
 */
/**
 * @description	미결
 * @param		{String}	val
 * @return		{undefined}
 * @example		미결
 */
function setInputDecimalNF(val)
{
	this.inputDecimalValue = val;
};

/*
 * setNumber - Sets the number
 * num - The number to be formatted
 * inputDecimal - (Optional) The decimal character for the input
 *  Also refer to setInputDecimal
 * 
 * If there is a non-period decimal format for the input,
 * setInputDecimal should be called before calling setNumber.
 *
 * v1.5.0 - modified
 */
/**
 * @description 미결
 * @param		{number}	Num
 * @param		{String}	inputDecimal
 * @return		{undefined}
 * @example		미결
 */
function setNumberNF(num, inputDecimal)
{
	if (inputDecimal != null) {
		this.setInputDecimal(inputDecimal); // v.1.5.1 - new
	}
	
	this.numOriginal = num;
	this.num = this.justNumber(num);
};

/*
 * toUnformatted - Returns the number as just a number.
 * If the original value was '100,000', then this method will return the number 100000
 * v1.0.2 - Modified comments, because this method no longer returns the original value.
 */
/**
 * @description 미결
 * @return		{number}
 * @example		미결
 */
function toUnformattedNF()
{
	return (this.num);
};

/*
 * getOriginal - Returns the number as it was passed in, which may include non-number characters.
 * This function is new in v1.0.2
 */
/**
 * @description 미결
 * @return		{number}
 * @example		미결
 */
function getOriginalNF()
{
	return (this.numOriginal);
};

/*
 * setNegativeFormat - How to format a negative number.
 * 
 * format - The format. Use one of the following constants.
 * LEFT_DASH   example: -1000
 * RIGHT_DASH  example: 1000-
 * PARENTHESIS example: (1000)
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	format
 * @return		{undefined}
 * @example		미결
 */
function setNegativeFormatNF(format)
{
	this.negativeFormat = format;
};

/*
 * setNegativeRed - Format the number red if it's negative.
 * 
 * isRed - true, to format the number red if negative, black if positive;
 *  false, for it to always be black font.
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	isRed
 * @return		{undefined}
 * @example		미결
 */
function setNegativeRedNF(isRed)
{
	this.negativeRed = isRed;
};

/*
 * setSeparators - One purpose of this method is to set a
 *  switch that indicates if there should be separators between groups of numbers.
 *  Also, can use it to set the values for the separator and decimal.
 *  For example, in the value 1,000.00
 *   The comma (,) is the separator and the period (.) is the decimal.
 *
 * Both separator or decimal are not required.
 * The separator and decimal cannot be the same value. If they are, decimal with be changed.
 * Can use the following constants (via the instantiated object) for separator or decimal:
 *  COMMA
 *  PERIOD
 * 
 * isC - true, if there should be separators; false, if there should be no separators
 * separator - the value of the separator.
 * decimal - the value of the decimal.
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	isC
 * @param		{String}	separator
 * @param		{String}	decimal
 * @return		{undefined}
 * @example		미결
 */
function setSeparatorsNF(isC, separator, decimal)
{
	this.hasSeparators = isC;
	
	// Make sure a separator was passed in
	if (separator == null) separator = this.COMMA;
	
	// Make sure a decimal was passed in
	if (decimal == null) decimal = this.PERIOD;
	
	// Additionally, make sure the values aren't the same.
	//  When the separator and decimal both are periods, make the decimal a comma.
	//  When the separator and decimal both are any other value, make the decimal a period.
	if (separator == decimal) {
		this.decimalValue = (decimal == this.PERIOD) ? this.COMMA : this.PERIOD;
	} else {
		this.decimalValue = decimal;
	}
	
	// Since the decimal value changes if decimal and separator are the same,
	// the separator value can keep its setting.
	this.separatorValue = separator;
};

/*
 * setCommas - Sets a switch that indicates if there should be commas.
 * The separator value is set to a comma and the decimal value is set to a period.
 * isC - true, if the number should be formatted with separators (commas); false, if no separators
 *
 * v1.5.0 - modified
 */
/**
 * @description 미결
 * @param		{String}	isC
 * @return		{undefined}
 * @example		미결
 */
function setCommasNF(isC)
{
	this.setSeparators(isC, this.COMMA, this.PERIOD);
};

/*
 * setCurrency - Sets a switch that indicates if should be displayed as currency
 * isC - true, if should be currency; false, if not currency
 */
/**
 * @description 미결
 * @param		{String}	isC
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyNF(isC)
{
	this.hasCurrency = isC;
};

/*
 * setCurrencyPrefix - Sets the symbol for currency.
 * val - The symbol
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyValueNF(val)
{
	this.currencyValue = val;
};

/*
 * setCurrencyPrefix - Sets the symbol for currency.
 * The symbol will show up on the left of the numbers and outside a negative sign.
 * cp - The symbol
 *
 * v1.5.0 - modified - This now calls setCurrencyValue and setCurrencyPosition(this.LEFT_OUTSIDE)
 */
/**
 * @description 미결
 * @param		{String}	cp
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyPrefixNF(cp)
{
	this.setCurrencyValue(cp);
	this.setCurrencyPosition(this.LEFT_OUTSIDE);
};

/*
 * setCurrencyPosition - Sets the position for currency,
 *  which includes position relative to the numbers and negative sign.
 * cp - The position. Use one of the following constants.
 *  This method does not automatically put the negative sign at the left or right.
 *  They are left by default, and would need to be set right with setNegativeFormat.
 *	LEFT_OUTSIDE  example: $-1.00
 *	LEFT_INSIDE   example: -$1.00
 *	RIGHT_INSIDE  example: 1.00$-
 *	RIGHT_OUTSIDE example: 1.00-$
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @param		{String}	cp
 * @return		{undefined}
 * @example		미결
 */
function setCurrencyPositionNF(cp)
{
	this.currencyPosition = cp;
};

/*
 * setPlaces - Sets the precision of decimal places
 * p - The number of places.
 *  -1 or the constant NO_ROUNDING turns off rounding to a set number of places.
 *  Any other number of places less than or equal to zero is considered zero.
 *
 * v1.5.1 - modified
 */
/**
 * @description 미결
 * @param		{String}	p
 * @return		{undefined}
 * @example		미결
 */
function setPlacesNF(p)
{
	this.roundToPlaces = !(p == this.NO_ROUNDING); // v1.5.1
	this.places = (p < 0) ? 0 : p; // v1.5.1 - Don't leave negatives.
};

/*
 * v1.5.2 - new
 *
 * addSeparators
 * The value to be formatted shouldn't have any formatting already.
 *
 * nStr - A number or number as a string
 * inD - Input decimal (string value). Example: '.'
 * outD - Output decimal (string value). Example: '.'
 * sep - Output separator (string value). Example: ','
 */
/**
 * @description 미결
 * @param		{String}	nStr
 * @param		{String}	inD
 * @param		{String}	outD
 * @param		{String}	sep
 * @return		{Object}
 * @example		미결
 */
function addSeparatorsNF(nStr, inD, outD, sep)
{
	nStr += '';
	var dpos = nStr.indexOf(inD);
	var nStrEnd = '';
	if (dpos != -1) {
		nStrEnd = outD + nStr.substring(dpos + 1, nStr.length);
		nStr = nStr.substring(0, dpos);
	}
	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(nStr)) {
		nStr = nStr.replace(rgx, '$1' + sep + '$2');
	}
	return nStr + nStrEnd;
};

/*
 * toFormatted - Returns the number formatted according to the settings (a string)
 *
 * v1.5.0 - modified
 * v1.5.1 - modified
 */
/**
 * @description 미결
 * @return		{Object}
 * @example		미결
 */
function toFormattedNF()
{	
	var pos;
	var nNum = this.num; // v1.0.1 - number as a number
	var nStr;            // v1.0.1 - number as a string
	var splitString = new Array(2);   // v1.5.0
	
	// round decimal places - modified v1.5.1
	// Note: Take away negative temporarily with Math.abs
	if (this.roundToPlaces) {
		nNum = this.getRounded(nNum);
		nStr = this.preserveZeros(Math.abs(nNum)); // this step makes nNum into a string. v1.0.1 Math.abs
	} else {
		nStr = this.expandExponential(Math.abs(nNum)); // expandExponential is called in preserveZeros, so call it here too
	}
	
	// v1.5.3 - lost the if in 1.5.2, so putting it back
	if (this.hasSeparators) {
		// v1.5.2
		// Note that the argument being passed in for inD is this.PERIOD
		//  That's because the toFormatted method is working with an unformatted number
		nStr = this.addSeparators(nStr, this.PERIOD, this.decimalValue, this.separatorValue);
	}
	
	// negative and currency
	// $[c0] -[n0] $[c1] -[n1] #.#[nStr] -[n2] $[c2] -[n3] $[c3]
	var c0 = '';
	var n0 = '';
	var c1 = '';
	var n1 = '';
	var n2 = '';
	var c2 = '';
	var n3 = '';
	var c3 = '';
	var negSignL = (this.negativeFormat == this.PARENTHESIS) ? this.LEFT_PAREN : this.DASH;
	var negSignR = (this.negativeFormat == this.PARENTHESIS) ? this.RIGHT_PAREN : this.DASH;
		
	if (this.currencyPosition == this.LEFT_OUTSIDE) {
		// add currency sign in front, outside of any negative. example: $-1.00	
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR;
		}
		if (this.hasCurrency) c0 = this.currencyValue;
	} else if (this.currencyPosition == this.LEFT_INSIDE) {
		// add currency sign in front, inside of any negative. example: -$1.00
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR;
		}
		if (this.hasCurrency) c1 = this.currencyValue;
	}
	else if (this.currencyPosition == this.RIGHT_INSIDE) {
		// add currency sign at the end, inside of any negative. example: 1.00$-
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR;
		}
		if (this.hasCurrency) c2 = this.currencyValue;
	}
	else if (this.currencyPosition == this.RIGHT_OUTSIDE) {
		// add currency sign at the end, outside of any negative. example: 1.00-$
		if (nNum < 0) {
			if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL;
			if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR;
		}
		if (this.hasCurrency) c3 = this.currencyValue;
	}

	nStr = c0 + n0 + c1 + n1 + nStr + n2 + c2 + n3 + c3;
	
	// negative red
	if (this.negativeRed && nNum < 0) {
		nStr = '<font color="red">' + nStr + '</font>';
	}

	return (nStr);
};

/*
 * toPercentage - Format the current number as a percentage.
 * This is separate from most of the regular formatting settings.
 * The exception is the number of decimal places.
 * If a number is 0.123 it will be formatted as 12.3%
 *
 * !! This is an initial version, so it doesn't use many settings.
 * !! should use some of the formatting settings that toFormatted uses.
 * !! probably won't want to use settings like currency.
 *
 * v1.5.0 - new
 */
/**
 * @description 미결
 * @return		{number}
 * @example		미결
 */
function toPercentageNF()
{
	nNum = this.num * 100;
	
	// round decimal places
	nNum = this.getRounded(nNum);
	
	return nNum + '%';
};

/*
 * Return concatenated zeros as a string. Used to pad a number.
 * It might be extra if already have many decimal places
 * but is needed if the number doesn't have enough decimals. 
 */
/**
 * @description 미결
 * @param		{String}	places
 * @return		{Object}
 * @example		미결
 */
function getZerosNF(places)
{
		var extraZ = '';
		var i;
		for (i=0; i<places; i++) {
			extraZ += '0';
		}
		return extraZ;
};

/*
 * Takes a number that JavaScript expresses in notational format
 * and makes it the full number (as a string).
 * e.g. Makes -1e-21 into -0.000000000000000000001
 *
 * If the value passed in is not a number (as determined by isNaN),
 * this function just returns the original value.
 *
 * Exponential number formats can include 1e21 1e+21 1e-21
 *  where 1e21 and 1e+21 are the same thing.
 *
 * If an exponential number is evaluated by JavaScript,
 * it will change 12.34e-9 to 1.234e-8,
 * which is a benefit to this method, because
 * it prevents extra zeros that occur for certain numbers
 * when using moveDecimalAsString
 *
 * Returns a string.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	origVal
 * @return		{String}
 * @example		미결
 */
function expandExponentialNF(origVal)
{
	if (isNaN(origVal)) return origVal;

	var newVal = parseFloat(origVal) + ''; // parseFloat to let JavaScript evaluate number
	var eLoc = newVal.toLowerCase().indexOf('e');

	if (eLoc != -1) {
		var plusLoc = newVal.toLowerCase().indexOf('+');
		var negLoc = newVal.toLowerCase().indexOf('-', eLoc); // search for - after the e
		var justNumber = newVal.substring(0, eLoc);
		
		if (negLoc != -1) {
			// shift decimal to the left
			var places = newVal.substring(negLoc + 1, newVal.length);
			justNumber = this.moveDecimalAsString(justNumber, true, parseInt(places));
		} else {
			// shift decimal to the right
			// Check if there's a plus sign, and if not refer to where the e is.
			// This is to account for either formatting 1e21 or 1e+21
			if (plusLoc == -1) plusLoc = eLoc;
			var places = newVal.substring(plusLoc + 1, newVal.length);
			justNumber = this.moveDecimalAsString(justNumber, false, parseInt(places));
		}
		
		newVal = justNumber;
	}

	return newVal;
};

/*
 * Move decimal right.
 * Returns a number.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	places
 * @return		{String}
 * @example		미결
 */
function moveDecimalRightNF(val, places)
{
	var newVal = '';
	
	if (places == null) {
		newVal = this.moveDecimal(val, false);
	} else {
		newVal = this.moveDecimal(val, false, places);
	}
	
	return newVal;
};

/*
 * Move decimal left.
 * Returns a number.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	places
 * @return		{String}
 * @example		미결
 */
function moveDecimalLeftNF(val, places)
{
	var newVal = '';
	
	if (places == null) {
		newVal = this.moveDecimal(val, true);
	} else {
		newVal = this.moveDecimal(val, true, places);
	}
	
	return newVal;
};

/*
 * moveDecimalAsString
 * This is used by moveDecimal, and does not run parseFloat on the return value.
 * 
 * Normally a decimal place is moved by multiplying by powers of 10
 * Multiplication and division in JavaScript can result in floating point limitations.
 * So use this method to move a decimal place left or right.
 *
 * Parameters:
 * val - The value to be shifted. Can be a number or a string,
 *  but don't include special characters. It should evaluate to a number.
 * left - If true, then move decimal left. If false, move right.
 * places - (optional) If not included, then use the objects this.places
 *  The purpose is so this method can be used independent of the state of the object.
 *
 * The regular expressions:
 * re1
 * Pad with zeros in case there aren't enough numbers to cover the spaces shift.
 * A left shift pads to the left, and a right shift pads to the right.
 * Can't just concatenate. There might be a negative sign or the value could be an exponential.
 *
 * re2
 * Switch the decimal.
 * Need the first [0-9]+ to force the search to start rightmost.
 * The \.? and [0-9]{} criteria are the pieces that will be switched
 *
 * Other notes:
 * This method works on exponential numbers, e.g. 1.7e-12
 * because the regular expressions only modify the number and decimal parts.
 *
 * Mozilla can't handle [0-9]{0} in the regular expression.
 *  Fix: Since nothing changes when the decimal is shifted zero places, return the original value.
 *
 * IE is incorrect if exponential ends in .
 *  e.g. -8500000000000000000000. should be -8.5e+21
 *  IE counts it as -8.5e+22
 *	Fix: Replace trailing period, if there is one, using replace(/\.$/, '').
 *
 * Netscape 4.74 cannot handle a leading - in the string being searched for the re2 expressions.
 *  e.g. /([0-9]*)(\.?)([0-9]{2})/ should match everything in -100.00 except the -
 *  but it matches nothing using Netscape 4.74.
 *  It might be a combination of the * ? special characters.
 *  Fix: (-?) was added to each of the re2 expressions to look for - one or zero times.
 *
 * Returns a string.
 *
 * v1.5.1 - new
 * v1.5.2 - modified
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	left
 * @param		{String}	places
 * @return		{String}
 * @example		미결
 */
function moveDecimalAsStringNF(val, left, places)
{
	var spaces = (arguments.length < 3) ? this.places : places;
	if (spaces <= 0) return val; // to avoid Mozilla limitation
			
	var newVal = val + '';
	var extraZ = this.getZeros(spaces);
	var re1 = new RegExp('([0-9.]+)');
	if (left) {
		newVal = newVal.replace(re1, extraZ + '$1');
		var re2 = new RegExp('(-?)([0-9]*)([0-9]{' + spaces + '})(\\.?)');		
		newVal = newVal.replace(re2, '$1$2.$3');
	} else {
		var reArray = re1.exec(newVal); // v1.5.2
		if (reArray != null) {
			newVal = newVal.substring(0,reArray.index) + reArray[1] + extraZ + newVal.substring(reArray.index + reArray[0].length); // v1.5.2
		}
		var re2 = new RegExp('(-?)([0-9]*)(\\.?)([0-9]{' + spaces + '})');
		newVal = newVal.replace(re2, '$1$2$4.');
	}
	newVal = newVal.replace(/\.$/, ''); // to avoid IE flaw
	
	return newVal;
};

/*
 * moveDecimal
 * Refer to notes in moveDecimalAsString
 * parseFloat is called here to clear away the padded zeros.
 *
 * Returns a number.
 *
 * v1.5.1 - new
 */
/**
 * @description 미결
 * @param		{String}	val
 * @param		{String}	left
 * @param		{String}	places
 * @return		{Number}
 * @example		미결
 */
function moveDecimalNF(val, left, places)
{
	var newVal = '';
	
	if (places == null) {
		newVal = this.moveDecimalAsString(val, left);
	} else {
		newVal = this.moveDecimalAsString(val, left, places);
	}
	
	return parseFloat(newVal);
};

/*
 * getRounded - Used internally to round a value
 * val - The number to be rounded
 * 
 *  To round to a certain decimal precision,
 *  all that should need to be done is
 *  multiply by a power of 10, round, then divide by the same power of 10.
 *  However, occasional numbers don't get exact results in most browsers.
 *  e.g. 0.295 multiplied by 10 yields 2.9499999999999997 instead of 2.95
 *  Instead of adjusting the incorrect multiplication,
 *  this function uses string manipulation to shift the decimal.
 *
 * Returns a number.
 *
 * v1.5.1 - modified
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{String}
 * @example		미결
 */
function getRoundedNF(val)
{
	val = this.moveDecimalRight(val);
	val = Math.round(val);
	val = this.moveDecimalLeft(val);
	
	return val;
};

/*
 * preserveZeros - Used internally to make the number a string
 * 	that preserves zeros at the end of the number
 * val - The number
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{String}
 * @example		미결
 */
function preserveZerosNF(val)
{
	var i;

	// make a string - to preserve the zeros at the end
	val = this.expandExponential(val);
	
	if (this.places <= 0) return val; // leave now. no zeros are necessary - v1.0.1 less than or equal
	
	var decimalPos = val.indexOf('.');
	if (decimalPos == -1) {
		val += '.';
		for (i=0; i<this.places; i++) {
			val += '0';
		}
	} else {
		var actualDecimals = (val.length - 1) - decimalPos;
		var difference = this.places - actualDecimals;
		for (i=0; i<difference; i++) {
			val += '0';
		}
	}
	
	return val;
};

/*
 * justNumber - Used internally to parse the value into a floating point number.
 * Replace all characters that are not 0-9, a decimal point, or a negative sign.
 *
 *  A number can be entered using special notation.
 *  For example, the following is a valid number: 0.0314E+2
 *
 * v1.0.2 - new
 * v1.5.0 - modified
 * v1.5.1 - modified
 * v1.5.2 - modified
 */
/**
 * @description 미결
 * @param		{String}	val
 * @return		{String}
 * @example		미결
 */
function justNumberNF(val)
{
	newVal = val + '';
	
	var isPercentage = false;
	
	// check for percentage
	// v1.5.0
	if (newVal.indexOf('%') != -1) {
		newVal = newVal.replace(/\%/g, '');
		isPercentage = true; // mark a flag
	}
		
	// Replace everything but digits - + ( ) e E
	var re = new RegExp('[^\\' + this.inputDecimalValue + '\\d\\-\\+\\(\\)eE]', 'g');	// v1.5.2	
	newVal = newVal.replace(re, '');
	// Replace the first decimal with a period and the rest with blank
	// The regular expression will only break if a special character
	//  is used as the inputDecimalValue
	//  e.g. \ but not .
	var tempRe = new RegExp('[' + this.inputDecimalValue + ']', 'g');
	var treArray = tempRe.exec(newVal); // v1.5.2
	if (treArray != null) {
	  var tempRight = newVal.substring(treArray.index + treArray[0].length); // v1.5.2
		newVal = newVal.substring(0,treArray.index) + this.PERIOD + tempRight.replace(tempRe, ''); // v1.5.2
	}
	
	// If negative, get it in -n format
	if (newVal.charAt(newVal.length - 1) == this.DASH ) {
		newVal = newVal.substring(0, newVal.length - 1);
		newVal = '-' + newVal;
	}
	else if (newVal.charAt(0) == this.LEFT_PAREN
	 && newVal.charAt(newVal.length - 1) == this.RIGHT_PAREN) {
		newVal = newVal.substring(1, newVal.length - 1);
		newVal = '-' + newVal;
	}
	
	newVal = parseFloat(newVal);
	
	if (!isFinite(newVal)) {
		newVal = 0;
  }
	
	// now that it's a number, adjust for percentage, if applicable.
  // example. if the number was formatted 24%, then move decimal left to get 0.24
  // v1.5.0 - updated v1.5.1
  if (isPercentage) {
  	newVal = this.moveDecimalLeft(newVal, 2);
  }
		
	return newVal;
};
    // CALC ?? ????? ?????                 
    var ArrFunctions = ["TIMEDIFF",
                     "DAYDIFF", "REPLACE", "WEEKDAY", "SORTDSC",  
                     "DAYADD", "ISNULL", "FORMER", "DAYSOF", "FORMAT",  
                     "INSTR", "ROUND", "FLOOR", "RIGHT", "MONTH", 
                     "FMONY", "FMONM", "COUNT", "RTRIM", "LTRIM",
                     "UCASE", "LCASE", "SPACE",
                     "KLEN", "LENB", "YEAR", "TRIM", "LEFT", 
                     "CEIL" ,"SORT", "TOPN", "LOWN",       
                     "AVG", "MAX", "MIN", "SUM", "ABS", "MOD", 
                     "MID", "VAL", "STR", "DAY", "LEN", "IIF", "NOW", "INT"
                     ];
    var FUNCTION_COUNT = 46;
    var ArrOperaters = ["^",  "*",  "/",  "\\", "MOD", 
                     "%",  "+",  "-",  "+",  "-", 
                     "&",  "<=", "=<", ">=", "=>", 
                     "<>", "!=", "=",  "<",  ">",
                     "BITAND", "BITOR", "LIKE", "NOT", "AND", "OR"];
                     
    var OPERATER_COUNT = 26;
    // LOGIC?? ????? ?????                 
  	var ArrTypes = ["SMALLINT","INTEGER","MONEY","FLOAT","CHAR","TEXT","DATETIME"];

  	/**
  	 * @class	EasyCalc
  	 * @constructor	
  	 * @description	미결
  	 * @param	{object}	pVariables
  	 * @return	{undefined}
  	 * @example	미결
  	 */
function EXOLogic(pVariables)
{
  	this.State = "";
	
  	this.ArrVNames = [];
  	this.ArrVTypes = [];
  	this.ArrVValues = [];
  	this.ArrVScope = [];
  	
  	this.ArrStringValues = [];
  	
  	// 산식 길이별 결과값 모음, 각 산식은 다시 신식을 키로하는 맵이 들어간다
  	this.arrResults = [];
  	
  	var wArrVariables = pVariables.split(";");

  	for (var i = 0; i < wArrVariables.length; i++){
  	  if (wArrVariables[i].trim().length == 0) break;
  	   
  	  var wArrInfo = wArrVariables[i].split(":");
  	  this.ArrVNames[i] = wArrInfo[0].toUpperCase();
  	  this.ArrVTypes[i] = wArrInfo[1].toUpperCase();
  	  this.ArrVValues[i] = wArrInfo[2];
  	  this.ArrVScope [i]= "0";
  	}
  	
  	wArrVariables.Clear();
  	
};
/**
 * @description	미결
 * @param	{object}	pStatement
 * @return  {string}
 * @example	미결
 */
    EXOLogic.prototype.ExecuteLogic = function(pStatement)
    {
        // functionname : [EXOLogic.ExecuteLogic]

    	var wStatement = pStatement + "";
		var wReturn = "";
    	
		// 산식결과값을 기록한다
		var lengthKey = "" + pStatement.length;
		if (!this.arrResults.hasKey(lengthKey)){
			this.arrResults[lengthKey] = [];
		} else {
			var arrResults1 = this.arrResults[lengthKey];
			if (arrResults1.hasKey(pStatement)){
				return arrResults1[pStatement];
			}			
			
		}

		// ????????? ???. 
    	wStatement = decomment(wStatement);
    
    	// ??????? ???? ???? , ??ı? ????? ?????? ??????. 
    	wStatement = this.Str2Temp(wStatement).trim();

    	wStatement = wStatement.replace(/\r\n/g," ").replace(/\t/g," ");
    	while(wStatement.indexOf(" ;") >= 0) wStatement=wStatement.replace(/\s;/g, ";");
    	while(wStatement.indexOf(";;") >= 0) wStatement=wStatement.replace(/;;/g, ";");
    	
    	// ?????? ?м???? ??? ?????????? ?????? ?????? ?????? ???
    	wStatement = wStatement.toUpperCase();
   	    wStatement = this.Statement2Variable(wStatement);

    	// ????????? ??????. 
		var wActionTag = [0];
    	wReturn =  this.ResultOfExecute(wStatement, wActionTag);
		
		this.ArrVNames.Clear();
		this.ArrVTypes.Clear();
		this.ArrVValues.Clear();
		this.ArrVScope.Clear();
		this.ArrStringValues.Clear();
		
		// 산식결과값을 기록한다
		var lengthKey = "" + pStatement.length;
		if (this.arrResults.hasKey()){
			this.arrResults[lengthKey] = [];
		}
		this.arrResults[lengthKey][pStatement] = wReturn;

		return wReturn;
    };
  	
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pActionTag
     * @return  {object}
     * @example	미결
     */   
    EXOLogic.prototype.ResultOfExecute = function(pStatement, pActionTag)
    {
        // functionname : [EXOLogic.ResultOfExecute]

    	var wStatement = pStatement + ""; 
    	
    	var w_nPoint = 0; var w_nSPoint = 0; 
    	var  w_nEPoint = 0;
    	
    	var wLogicUnit = ""; var wReturn = ""; 
    	var wLeft = ""; var wRight = "";
    	
    	
        wStatement = wStatement.trim();
		var wLength = [wStatement.length];
		
        if (!wStatement.endsWith(";")) wStatement = wStatement + ";";

    	while (true){
    		var wIsSimpleStatement = true;
            var wCutPos = new Array(99);
            
    		// IF ?????? ????? ?????? ??????. ?????? 
    		if (wStatement.startsWith("IF ")) {
    			if (this.IsIfLoop(wStatement, wLength, wCutPos)){
    				wIsSimpleStatement = false;
    				wLogicUnit = wStatement.substring(0, wLength[0]).trim();
                    
                    if (wLogicUnit.endsWith(";")) 
                        wLogicUnit = wLogicUnit.substring(0, wLogicUnit.length - 1);
    
    				wReturn = this.ResultOfIf(wLogicUnit, wCutPos, pActionTag);

    				if (pActionTag[0] == 1 || pActionTag[0] == 2) break;
    			}
    		
    		// FOR?????? ????? ?????? ??????.(??????) 
    		} else if (wStatement.startsWith("FOR ")){
    			if (this.IsForLoop(wStatement, wLength, wCutPos)){
    				wIsSimpleStatement = false;
    				wLogicUnit = wStatement.substring(0, wLength[0]).trim();
                    
                    if (wLogicUnit.endsWith(";")) 
                        wLogicUnit = wLogicUnit.substring(0, wLogicUnit.length - 1);
    
    				wReturn = this.ResultOfFor(wLogicUnit, wCutPos);
    			}
    		
    		// WHILE?????? ????? ?????? ??????.(??????) 
    		} else if (wStatement.startsWith("WHILE ")) {
    			if (this.IsWhileLoop(wStatement, wLength, wCutPos)){
    				wIsSimpleStatement = false;
    				wLogicUnit = wStatement.substring(0, wLength[0]).trim();
                    
                    if (wLogicUnit.endsWith(";")) 
                        wLogicUnit = wLogicUnit.substring(0, wLogicUnit.length - 1);
    				wReturn = this.ResultOfWhile(wLogicUnit, wCutPos);
    			}
    		}
    
    		// ??????д????? ??????? ( ":=" ?? ?¿쿬??)
    		if (wIsSimpleStatement) {
    			w_nPoint = wStatement.indexOf(";");					// ????????? ????? ?????? 
    			if (w_nPoint == -1) break;							// ??????? ????????? ?????? ?????? 
    
    			wLogicUnit = wStatement.substring(0, w_nPoint).trim();		// ??????? ?????. 
    			if (wLogicUnit.length > 0){					        // ????? ?????? ????????? ??? 
    				w_nPoint = wLogicUnit.indexOf(":=");			// ??????? ??? ??? o?? 
    				if (w_nPoint != -1) {
    					w_nSPoint = w_nPoint + 2;
    					w_nEPoint = wLogicUnit.length;
    
    					wLeft = wLogicUnit.substring(0, w_nPoint).trim();
    					wRight = wLogicUnit.substring(w_nSPoint, w_nEPoint).trim();

    					wReturn = this.CalcFormula(wRight);
    					this.SetVariable(wLeft, wReturn);
    				
    				} else if (wLogicUnit == "CONTINUE") {
    					pActionTag[0] = 1;
    
    				} else if (wLogicUnit == "BREAK") {
    					pActionTag[0] =  2;
    
    				} else {                                         // ??????? ??? ????? o?? 
    					wReturn = this.CalcFormula(wLogicUnit);
    				}
    			} else {
    				wReturn = "";
    			}
    
    		}
    		if (wIsSimpleStatement) {
    			wStatement = replaceFirstOne(wStatement, wLogicUnit + ";", "").trim();
    		} else {
   			wStatement = replaceFirstOne(wStatement, wLogicUnit, "").trim();
    		}
            
            // ????? ??????? ?????? ??????. 
    		if (wStatement.length == 0 || wStatement == ";" ) break;
    	}
    	return wReturn;
    };
    
    /* =============================================================
    	IF  ?????? ???? : IF ... THEN ( ... ) ELSE ( ...) -> ...???? ???μ????? ?????.
    	????? IF??           : If ...THEN ...ELSE ...;  -> ...???? ?ĸ? ???????. 
       =============================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{number}	pLength
     * @param	{object}	pArrCutPos
     * @return  {boolean}
     * @example	미결
     */
    EXOLogic.prototype.IsIfLoop = function(pStatement, pLength, pArrCutPos)
    {
        // functionname : [EXOLogic.IsIfLoop]

    	var wStart = 0; var wPosition = 0; var wPosition1 = 0;
    	
    	// ????? ???????? ???? ???? 
    	wStart = pStatement.indexOf("IF ");
    	var w_bCompleted = false;
    	var wReturn = true;
    	var w_nArrNum = 0;
    
    	// ???? ??| ????? THEN?? a?´?. 
    	// ????????? IF?? THEN??????? IF?? ????? ?????. ????? ????? ?????? ??? ???? ???. 
    	// ??? ????? THEN ???? ???? ???? ??? ????? ?????????Ŀ? a?? ?? 
    	while (true){
    		pArrCutPos[++w_nArrNum] = wStart + 3;
    
    		wPosition = pStatement.indexOf(" THEN", wStart);
    		wPosition1= pStatement.indexOf("(", wStart);
    				wIsSimpleStatement = false;
    		
    		while (wPosition1 >= 0 && wPosition > wPosition1){
    			wPosition1 = endOfBracket(pStatement, wPosition1);
    			wPosition = pStatement.indexOf(" THEN", wPosition1);
    			wPosition1= pStatement.indexOf("(",wPosition1);
    		}
    		
    		pArrCutPos[++w_nArrNum] = wPosition - 1;
    
    		//THEN ?????? ????? ?????? "IF ????"???. 
    		wPosition = findNext(pStatement, "(", wPosition + 5);
    		if (wPosition == -1) {
    			wReturn = false;
    			break;
    		}
    		pArrCutPos[++w_nArrNum] = wPosition + 1;
    		// THEN ?? ????? ?????? ?????? a?´? 
    		wPosition = endOfBracket(pStatement, wPosition);
    		pArrCutPos[++w_nArrNum] = wPosition - 1;
    
    		// ?? ?????? ELSE ???? ??????. ?????? ??? ?????. 
    		// ELSE ???  IF ?? ????? ?????? ?????? "("?? a?? ??????? ?????? ????? 
    		// ?????? ??? IF ???? ?????? ????. 
    		wPosition1 = wPosition + 1;
    		wPosition = pStatement.indexOf(" ELSE", wPosition);
   		
    		if (wPosition == -1) {
    			pLength[0] = wPosition1;
    			w_bCompleted = true;
    		} else {
    			wPosition += 5;


    			wPosition1 = findNext(pStatement, "IF ", wPosition);
    			if (wPosition1 == -1){
    				wPosition1 = findNext(pStatement, "(", wPosition);
    				if (wPosition == -1) {
    					w_bCompleted = true;
    					wReturn = false;
    					break;
    				}
    				pArrCutPos[++w_nArrNum] = wPosition1 + 1;
    
    				wPosition = endOfBracket(pStatement, wPosition1);
    				pArrCutPos[++w_nArrNum] = wPosition - 1;
    
    				pLength[0] = wPosition +1;
    				w_bCompleted = true;
    
    			} else {
    				wStart = wPosition1;
    			}
    		}
			
    		if (w_bCompleted) break;

    	}
    
    	pArrCutPos[0] = w_nArrNum;
    	return wReturn;
    };
    
    /* ==========================================================
    	For???? ???? :  
    		FOR X = 1 TO 31 STEP 1  ( ... )
    		FROM?? TO?? ?????? ?????? ?????????? ??????? STEP????? 
    		???? ???????? ???. STEP???? ???? ??????? ?????????. 
    		LOOP????? CONTINUE?? BREAK????? ???????. 
       ==========================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{number}	pLength
     * @param	{object}	pArrCutPos
     * @return  {boolean}
     * @example	미결
     */
    EXOLogic.prototype.IsForLoop = function(pStatement, pLength, pArrCutPos)
    {
        // functionname : [EXOLogic.IsForLoop]

    	// ????? ???????? ???? ???? 
    	var w_nStart = pStatement.indexOf("FOR ");
    	var w_nArrNum = 0;
    	var w_bReturn = true;
    
    	// ???? ??| ????? TO?? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nStart + 4;
    
    	var w_nPosition = pStatement.indexOf(" TO ", w_nStart);
    	if (w_nPosition == -1) {
    		return false;
    	}
    
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	//  STEP?? ????? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nPosition + 4;
    
    	w_nPosition = pStatement.indexOf(" STEP ", w_nPosition);
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	// "(" ?? ????? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nPosition + 6;
    
    	w_nPosition = pStatement.indexOf("(", w_nPosition);
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	//??????? ")"?? ????? a?´?. 
    	pArrCutPos[++w_nArrNum] = w_nPosition + 1;
    	w_nPosition = endOfBracket(pStatement, w_nPosition);
    	pLength[0] = w_nPosition - w_nStart + 1;
    	pArrCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	pArrCutPos[0] = w_nArrNum;
    
    	return w_bReturn;
    };
    
    /* ==========================================================
    	While???? ???? :
    		WHILE ( ... ) ( ... )
    		LOOP????? CONTINUE?? BREAK????? ???????. 
       ==========================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{number}	pLength
     * @param	{object}	pCutPos
     * @return  {boolean}
     * @example	미결
     */
    EXOLogic.prototype.IsWhileLoop = function(pStatement, pLength, pCutPos)
    {
        // functionname : [EXOLogic.IsWhileLoop]

    	// ????? ???????? ???? ???? 
    	var w_nStart = pStatement.indexOf("WHILE ");
    	var w_nArrNum = 0;
    	var w_bReturn = true;
    
    	// ???? ??| ????? "("?? a?´?. 
    	var w_nPosition = pStatement.indexOf("(", w_nStart);
    	if (w_nPosition == -1) {
    		return false;
    	}
    
    	//??????? ")"?? ????? a?´?. 
    	pCutPos[++w_nArrNum] = w_nPosition + 1;
    	w_nPosition = endOfBracket(pStatement, w_nPosition);
    	pCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	// ???? ?????? ?????? ????? "("?? a?´?. 
    	w_nPosition = pStatement.indexOf("(", w_nPosition);
    	if (w_nPosition == -1) {
    		return false;
    	}
    
    	//??????? ")"?? ????? a?´?. 
    	pCutPos[++w_nArrNum] = w_nPosition + 1;
    	w_nPosition = endOfBracket(pStatement, w_nPosition);
    	pLength[0] = w_nPosition - w_nStart +1;
    	pCutPos[++w_nArrNum] = w_nPosition - 1;
    
    	pCutPos[0] = w_nArrNum;
    
    	return w_bReturn;
    };
    
    /* ==========================================================
       p_nCutPos???? 0?? ?迭 ???? , 
       [???? ????, ??, True?? ???? ??]?? ??? ??????? 
       ???????? False?? ???? ?????? ??????. 
       ==========================================================*/
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pCutPos
     * @param	{object}	pActionTag
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ResultOfIf = function(pStatement, pCutPos, pActionTag)
    {
        // functionname : [EXOLogic.ResultOfIf]

    	var wReturn = "";
    	var wCount = pCutPos[0];
    	var wArrNum = 0;
    
    	pActionTag[0] = 0;
    	while (wArrNum < wCount){
    		var wPosition1 = pCutPos[++wArrNum];
    		var wPosition2 = pCutPos[++wArrNum];
    		var wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
			
    		var wTemp = this.CalcFormula(wStatement);
    		if (wTemp != "0"){
    			wPosition1 = pCutPos[++wArrNum];
    			wPosition2 = pCutPos[++wArrNum];
    
    			wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
				
    			wReturn = this.ResultOfExecute(wStatement, pActionTag);
    			break;
    
    		} else {
    			if (wArrNum == wCount - 2){				// False???? ??? ??? 
    					wReturn = "";
    					break;
    			} else if (wArrNum == wCount - 4){      //False???? ??? ??? 
    				wArrNum += 2;
    				wPosition1 = pCutPos[++wArrNum];
    				wPosition2 = pCutPos[++wArrNum];
    
    				wStatement = pStatement.substring(wPosition1, wPosition2 + 1);


    				wReturn = this.ResultOfExecute(wStatement, pActionTag);
    				break;
    
    			} else {
    				wArrNum += 2;
    			}
    		}
    	}
    
    	return wReturn;
    };
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pCutPos
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ResultOfFor = function(pStatement, pCutPos)
    {
        // functionname : [EXOLogic.ResultOfFor]

    	var wReturn = ""; 
    	var w_nCount = pCutPos[0];
    	var wArrNum = 0;
    	var wActionTag = [0];
    
    	// ???? ???? ??????? ??????. 
    	var wPosition1 = pCutPos[++wArrNum];
    	var wPosition2 = pCutPos[++wArrNum];
    	var wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	wPosition1 = wStatement.indexOf("=");
    	var wCritVName = wStatement.substring(0,wPosition1).trim();
    
    	wStatement = wStatement.substring(wPosition1 + 1).trim();


    	if (!isNumeric(wStatement)){
    		wStatement = this.CalcFormula(wStatement);
    	}

    	var wStartVal = val(wStatement);
    	// TO ?????? ?????? 
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	if (!isNumeric(wStatement)){
    		wStatement = this.CalcFormula(wStatement);
    	}
    	var w_dblEndVal = val(wStatement);
    
    	// STEP?????? ??????. 
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	wStatement = pStatement.substring(wPosition1, wPosition2).trim();
    	var w_dblStepVal = val(wStatement);
    
    	// ?????? ??????. 
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	wStatement = pStatement.substring(wPosition1, wPosition2).trim();
    
    	// ?????? ???? ?????? ???????. 
    	var w_dblVVar = wStartVal;
    	this.SetVariable(wCritVName, w_dblVVar + "");

    	while (true){
    		if (w_dblStepVal >= 0.0){
    			if (w_dblVVar > w_dblEndVal) break;
    		} else {
    			if (w_dblVVar < w_dblEndVal) break;
    		}
    
    		wReturn = this.ResultOfExecute(wStatement, wActionTag);

    		if (wActionTag[0] == 2) break;  //???? Continue(1)?? ????????? ?????? ???????? ?????. 
    
    		w_dblVVar += w_dblStepVal;
    		this.SetVariable(wCritVName, w_dblVVar + "");
    	}
    
    	return wReturn;
    };
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @param	{object}	pCutPos
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ResultOfWhile = function (pStatement, pCutPos)
    {
        // functionname : [EXOLogic.ResultOfWhile]

    	var wReturn = "";
    	var w_nCount = pCutPos[0];
    	var wArrNum = 0;
    	var wActionTag = [0];
    	
    	// ???? ???? ??????? ??????. 
    	var wPosition1 = pCutPos[++wArrNum];
    	var wPosition2 = pCutPos[++wArrNum];
    	var wCritStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	wPosition1 = pCutPos[++wArrNum];
    	wPosition2 = pCutPos[++wArrNum];
    	var wStatement = pStatement.substring(wPosition1, wPosition2 + 1);
    
    	// ?????? ???? ?????? ???????. 
    	var wRsltStatement = this.ResultOfExecute(wCritStatement, wActionTag);
    	while (wRsltStatement != "0"){
    		wReturn = this.ResultOfExecute(wStatement, wActionTag);
    		if (wActionTag[0] == 2) break;  //???? Continue(1)?? ????????? ?????? ???????? ?????. 
    		
    		wRsltStatement = this.ResultOfExecute(wCritStatement, wActionTag);
    	}
    
    	return wReturn;
    };
	
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.CalcFormula = function(pStatement)
    {
        // functionname : [EXOLogic.CalcFormula]

    	var wReturn = pStatement + "";
    	wReturn = this.Temp2ClacStr(this.ReplaceVariable(wReturn));
    
    	if (!isNumeric(wReturn)){
	        var wCalculator = new EXOCalculator();
    		wReturn = wCalculator.CalcuratedResult(wReturn);
    	}
    	return wReturn;
    };
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.Statement2Variable = function(pStatement)
    {
        // functionname : [EXOLogic.Statement2Variable]

    	var wStatement = pStatement + "";
    	while (wStatement.indexOf("GLOBAL  ") >= 0) {
    		wStatement = wStatement.replaceWord("GLOBAL  ","GLOBAL ");
    	}
    
    	for (var j = 0; j <= 1; j++){     // 0:?? ???? 1: ???????? 
    		for (i = 0; i < ArrTypes.length; i++){
    			var wType = ArrTypes[i];
    
    			var wPosition = 0;
    			while (true) {
    			    var wSearchName = (j == 0 ? "GLOBAL " + wType : wType) + " ";

    				wPosition = wStatement.indexOf(wSearchName, wPosition);
    				if (wPosition == -1) break;
    
    				var wSPosition = wPosition + wSearchName.length;
    
    				// ?????? ??????? ??????. 
    				wPosition1 = wStatement.indexOf(":= ", wSPosition);
    				wPosition2 = wStatement.indexOf(";", wSPosition);
    				
    				wPosition = (wPosition1 > 0 ? wPosition1 : wPosition2);
    
    				if (wPosition < 0) 
    					wPosition	= wStatement.length;
    
    				var wEPosition = wPosition - 1;
    
    				// ???????? ??????? 
    				var wName = wStatement.substring(wSPosition, wEPosition + 1).trim();
    
    				// ?????? ??????. 
    				this.AddVariable(wType, wName, j);
    			}
    			// ????θ? ??? ???????.
    			wStatement = wStatement.replaceWord(wSearchName, "");
    		}
    	}
        
    	return wStatement;
    };
    
    /**
     * @description	미결
     * @param	{string}	pType
     * @param	{string}	pName
     * @param	{object}	pScope
     * @return  {void}
     * @example	미결
     */
    EXOLogic.prototype.AddVariable = function(pType, pName, pScope)
    {
        // functionname : [EXOLogic.AddVariable]

    	// length????? ??????? ?????? ???? ?þ???
    	var wVariablesIndex = this.ArrVTypes.length; 

        this.ArrVTypes[wVariablesIndex] = pType;
    	this.ArrVNames[wVariablesIndex] = pName;
    	this.ArrVValues[wVariablesIndex] = "";
    	this.ArrVScope[wVariablesIndex] = pScope + "";

    	return;
    };
    
    /**
     * @description	미결
     * @param	{string}	pName
     * @param	{string}	pValue
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.SetVariable = function(pName, pValue)
    {
        // functionname : [EXOLogic.SetVariable]

    	var wFound = false;
    	var wVariablesIndex = -1;
    	
    	for (var i = 0; i < this.ArrVNames.length; i++){
    		if (pName == this.ArrVNames[i]){
    			wVariablesIndex = i;
    			wFound = true;
    			break;
    		}
    	}
    
    	if (!wFound) {
    	    this.State = getText("message_easycalc_001", "Error raised from EasyMaker Logic Engine's \"SetVariable\" routine \n \"{0}\" variable is not correct \n", [pName]);
    	} else {
    		this.ArrVValues[wVariablesIndex] = pValue;
    	}
    
    	return;
    };
    
    /*
    EXOLogic.prototype.GetVariable = function(pName)
    {
        // functionname : [EXOLogic.GetVariable]

    	var w_bFound = false;
    	var wRerurn = "";
    	var wVariablesIndex = -1;
    	
    	for (var i = 0; i < this.ArrVNames.length; i++){
    		if (pName == this.ArrVNames[i]){
    				wVariablesIndex = i;
    				w_bFound = true;
    				break;
    		}
    	}
    
    	if (!w_bFound) {
    	    this.State = "Error raised from EasyMaker Logic Engine's \"GetVaiable\" routine \r\n"
    	          + pName + " variable is not correct \r\n";
    	} else {
    		wRerurn = this.ArrVValues[wVariablesIndex];
    	}
    
    	return wRerurn;
    }
    */
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
    EXOLogic.prototype.ReplaceVariable = function(pStatement)
    {
        // functionname : [EXOLogic.ReplaceVariable]

    	var wStatement = pStatement + "";
    	if (isNumeric(wStatement) || pStatement == "#")
    		return wStatement;
    	
    	for (wLength = 30; wLength > 0; wLength--){
    		for (i = this.ArrVNames.length - 1; i >= 0; i--){
    			if (wLength == this.ArrVNames[i].length){
    			    var wName = this.ArrVNames[i];
    				var wType = this.ArrVTypes[i];
    				var wValue = this.ArrVValues[i];
    
    				if (wType == "CHAR" || wType == "TEXT") {
    				    wValue = "\"" + wValue + "\"";
    				}
    
    				wStatement = wStatement.replaceWord(wName, wValue);
    			}
    		}
    	}
    	return wStatement;
    };
    
    /*
    EXOLogic.prototype.GetVariableInfo = function()
    {
        // functionname : [EXOLogic.GetVariableInfo]

    	var wReturn = "";
    	for (i = this.ArrVNames.length - 1; i >= 0; i--){
    		if (this.ArrVScope[i] != "0") continue;
            wReturn += this.ArrVTypes[i] + ":" + this.ArrVNames[i] + ":" + this.ArrVValues[i] + ";";
    	}
    	return wReturn;
    };
    */
    
    /**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */
	EXOLogic.prototype.Str2Temp = function(pStatement)
	{
        // functionname : [EXOLogic.Str2Temp]

		var wStatement = pStatement + "";
		if (pStatement.indexOf("\"") == 0) return wStatement;
	
		this.ArrStringValues = [];
		
		var wArrStringValues = cutString(pStatement, "\"", "\"");
		
		for (var i = 0; i < wArrStringValues.length ; i++){
  		    this.ArrStringValues[i + 1] = wArrStringValues[i];
 			
 			var wTemp = "\"" + wArrStringValues[i] + "\"";
 			var wTemp1 = "STR_" + (i + 1);
 			wStatement = replaceFirstOne(wStatement, wTemp, wTemp1);
		}
			
		return wStatement;
	};
    
	/**
     * @description	미결
     * @param	{object}	pStatement
     * @return  {string}
     * @example	미결
     */ 
    EXOLogic.prototype.Temp2ClacStr = function(pStatement)
    {
        // functionname : [EXOLogic.Temp2ClacStr]

 		var wStatement = pStatement + "";

		for(var i = this.ArrStringValues.length - 1; i > 0; i--){
			var wTemp = "STR_" + i;
			wStatement = wStatement.replaceWord(wTemp, "\"" + this.ArrStringValues[i] + "\"");
	
			if (wStatement.indexOf("STR_") == -1) break;
		}
		return wStatement;
    };
    
    /**
    *     @description	미결
    *     @param	{object}	pStatement
    *     @param	{object}	pPosition
    *     @return	{number}
    *     @example	미결
    */
    function endOfBracket(pStatement, pPosition)
    {
    	var wReturn = 0;
    	var wLevel = 0;
    	var wBitStart = pPosition + 1;
    	var wBitEnd = 0;
    	var wCompleted = false;
    
    	if (pStatement.indexOf(")", pPosition + 1) == -1) return -1;
    
    	while(!wCompleted){
    		wBitEnd = pStatement.indexOf(")", wBitStart);
    		wBitStart = pStatement.indexOf("(", wBitStart);
    		
    		if (wBitStart == -1){
    			if (wLevel == 0) {
    				wCompleted = true;
    				wReturn = wBitEnd;
    			} else {
    				wBitStart = wBitEnd + 1;
    				wLevel--;
    			}
    		} else {
    			if (wBitStart > wBitEnd) {
    				if (wLevel == 0) {
    					wReturn = wBitEnd;
    					wCompleted = true;
    				} else {
    					wBitStart = wBitEnd + 1;
    					wLevel--;
    				}
    			} else {
    				wBitStart ++;
    				wLevel ++;
    			}
    		}
    	}
    
    	return wReturn;
    };
    
    /**
     * @class	EasyCalc
     * @constructor
     */	
function EXOCalculator() {
    this.State = "";
    this.StringValues = [];
    this.StringCount = 0;
};
/**
*     @description	미결
*     @return	{number}
*     @example	미결
*/
    EXOCalculator.prototype.test = function(){
        // functionname : [EXOCalculator.test]

	    //return Min("11","3","4","5","6","7","89","9","10","11");
	    return minOf(11,3,4,5,6,7,89,9,10,11);
    };
    
    /**
    *     @description	미결
    *     @param	{object}	pFormula
    *     @return	{string}
    *     @example	미결
    */
    EXOCalculator.prototype.CalcuratedResult = function(pFormula){
        // functionname : [EXOCalculator.CalcuratedResult]

        if (pFormula.length == 0) return "";
                           
        var wFormula = this.Str2Temp(pFormula);
        wFormula = decomment(wFormula); //??????? ???? 
        wFormula = wFormula.replace(/\r\n/g," ").toUpperCase(); //?????? ???? 
        
        var w_haveCondition = (wFormula.indexOf("IF ") != -1 && wFormula.indexOf(" THEN") != -1);
        if (!w_haveCondition){                 //??????? ???. 
            wFormula = this.Calcurate(wFormula);

        } else {
    	    var trueStatement = ""; 
    	    var falseStatement = "";
	        var wlCompleted = false;
    	    
            while (!wlCompleted){
                var IfPosition = wFormula.indexOf("IF ");
                var ThenPosition = wFormula.indexOf(" THEN");
	            var ElsePosition = 0;
                var wLength = wFormula.length;

                var CritStatement = wFormula.substring(IfPosition + 3, ThenPosition + 1);
                if (wFormula.indexOf(" ELSE") != -1){
                    ElsePosition = wFormula.indexOf(" ELSE");
                    var wPoint = minOf(ElsePosition - 1, wLength); 
                    trueStatement = wFormula.substring(ThenPosition + 5, wPoint + 2);
                    falseStatement = wFormula.substring(ElsePosition + 5, wLength);
                } else {
                    trueStatement = wFormula.substring(ThenPosition + 5, wLength);
                    falseStatement = "0";
                }

                var wWorkBuff = this.Calcurate(CritStatement);
                if (wWorkBuff == "-1"){
                        wFormula = this.Calcurate(trueStatement);
                        wlCompleted = true;
                } else if (falseStatement.indexOf("IF ") == -1 && 
                           falseStatement.indexOf(" THEN") == -1){
                        wFormula = this.Calcurate(falseStatement);
                        wlCompleted = true;
                } else {
                        wFormula = falseStatement;
                }
            }
        }
        wFormula = this.Temp2Str(wFormula);
        this.StringValues.Clear();
	
	    return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {object}
     * @example	미결
     */
    EXOCalculator.prototype.Calcurate = function(pFormula)
	{
        // functionname : [EXOCalculator.Calcurate]

	
        var wFormula = pFormula.trim();
        while (wFormula.indexOf(" (") >= 0)
        	wFormula = wFormula.replace(/ \(/g, "(");
        
       //????? ????? ?????? ??? ?????? ??????? ???? ??u??? 
        var p1 = 0; var p2 = 0;
        while (wFormula.indexOf("(") != -1){
            var wlReplaced = false;
            var p = wFormula.indexOf('(');
            var p1 = 0; 
            var p2 = 0;

            while(p != -1){
                p1 = p;
                p2 = wFormula.indexOf(')', p1);
                p = wFormula.indexOf('(', p1 + 1);
                if (p > p2) break;
            }

            for (var i = 0; i < FUNCTION_COUNT; i++){
                var wFunc = ArrFunctions[i];
                var wLength = wFunc.length;

                if (p1 >= wLength){
                    if (wFunc == wFormula.substring(p1- wLength, p1)){
                        var wOpTarget = wFormula.substring(p1 - wLength, p2 + 1);
                        var wTempResult = this.FuncOperate(wOpTarget);
                        wFormula = replaceFirstOne(wFormula, wOpTarget, wTempResult);

                        wlReplaced = true;
                        break;
                    }
                }
            }

            if (!wlReplaced){
                var wOpTarget = wFormula.substring(p1, p2 + 1);
                var wLength = wOpTarget.length;
                var wOpObject = wOpTarget.substring(1, wLength - 1);

                var wTempResult = this.MultiOperate(wOpObject);

                wFormula =replaceFirstOne(wFormula, wOpTarget, wTempResult);
            }
        }

        wFormula = wFormula.trim();

        if (!wFormula.isNum()){
            var wlCompleted = false;
            if (wFormula.startsWith("STR_"))
                wlCompleted = wFormula.substring(4).isNum();
            if (!wlCompleted) 
                wFormula = this.MultiOperate(wFormula);
        }

	    return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.MultiOperate = function(pFormula)
	{
        // functionname : [EXOCalculator.MultiOperate]

        if (pFormula.isNum()) return pFormula;
        if (pFormula.startsWith("STR_") && pFormula.substring(4).isNum()) return pFormula;

        var wFormula = pFormula.replaceWord(" ", "");
        if (wFormula.indexOf("NOT") != -1){
            wFormula = wFormula.replaceWord("NOT"," NOT ");
        }
        if (wFormula.indexOf("TRUE") != -1){
            wFormula = wFormula.replaceWord("TRUE", "-1");
        }
        if (wFormula.indexOf("FALSE") != -1){
            wFormula = wFormula.replaceWord("FALSE", "0");
        }
        
        var wBitStart = 0; var wBitEnd = 0;
        var wFound = false; 

        for (var OperateNum = 0; OperateNum < OPERATER_COUNT; OperateNum++){
            var Operater = ArrOperaters[OperateNum];

            var wIsAddSub = (Operater == "+" || Operater == "-");
            var StartPos = 1;
            var OperaterPos = wFormula.indexOf(Operater, StartPos);
            while (OperaterPos >= 0){
                if (wIsAddSub && isSign(wFormula, OperaterPos)){
                        StartPos = OperaterPos + 1;
                        OperaterPos = wFormula.indexOf(Operater, StartPos);
                        continue;
                }

                wFound = false;
                for (var i = OperaterPos - 1; i >= 0 ; i--){
                    wBitStart = 0;
                    if (wFormula.charAt(i) >= '0' && wFormula.charAt(i) <= '9') continue;
                    if (wFormula.charAt(i) == '+' || wFormula.charAt(i) == '-'){
                        if (wIsAddSub){
                            wBitStart = i;
                            break;
                        } else if (!isSign(wFormula, i)){
                            wBitStart = i + 1;
                            break;
                        }
                    }
                    
                    for (var j = 0; j < OPERATER_COUNT; j++){
                        var wTempOp = ArrOperaters[j];
                        if (wFormula.charAt(i) != wTempOp.charAt(0)) continue;
                        if (wTempOp.charAt(0) == '+' || wTempOp.charAt(0) == '-') continue;

                        var wTempLength = wTempOp.length;
                        if (wFormula.substring(i).startsWith(wTempOp)){
                            wBitStart = i + wTempLength;
                            wFound = true;
                            break;
                        }
                    }
                    if (wFound) break;
                }

                var wLength = wFormula.length;

                wFound = false;
                for (var i = OperaterPos + Operater.length; i < wLength; i++){
                    wBitEnd = wLength - 1;
                    if (wFormula.charAt(i) >= '0' && wFormula.charAt(i) <= '9') continue;

                    for (var j = 0; j < OPERATER_COUNT; j++){
                        var wTempOp = ArrOperaters[j];
                        if (wFormula.charAt(i) != wTempOp.charAt(0)) continue;
                        if ((wTempOp.charAt(0) == '+' || wTempOp.charAt(0) == '-') && 
                            isSign(wFormula, i)) continue;

                        if (wFormula.substring(i).startsWith(wTempOp)){
                            wBitEnd = i - 1;
                            wFound = true;
                            break;
                        }
                    }
                    if (wFound) break;
                }
                var OperateTaget = wFormula.substring(wBitStart, wBitEnd + 1);
                if (Operater != "NOT") 
                    OperateTaget = OperateTaget.trim();

                StartPos = wFormula.indexOf(OperateTaget); 
                var wTemp = this.BaseOperate(OperateTaget, Operater);
                wFormula = replaceFirstOne(wFormula, OperateTaget, wTemp);

                if (wFormula.indexOf("+-") != -1){
                    wFormula = wFormula.replace(/\+\-/g, "-");
                }
                if (wFormula.indexOf("--") != -1){
                    wFormula = wFormula.replace(/\-\-/g, "-");
                }
                OperaterPos = wFormula.indexOf(Operater, StartPos);
                if (OperaterPos == -1 && (wFormula.charAt(0) == '+' || wFormula.charAt(0) == '-'))
                    OperaterPos = wFormula.indexOf(Operater, 1);
            }
        }
        if (wFormula.charAt(0) == '+'){
            wFormula = wFormula.substring(1);
        }
	
	    return wFormula;
	    
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @param	{string}	pOprater
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.BaseOperate = function(pFormula, pOprater)
	{
        // functionname : [EXOCalculator.BaseOperate]

	    if (pFormula.indexOf(pOprater, 1) == -1) return pFormula;
	    
	    var  wReturn = "";
	    
        var wFormula = (pOprater != "NOT" ? pFormula.trim() : pFormula);
        var OperaterPosition = wFormula.indexOf(pOprater, 1);
        
        var s1 = wFormula.substring(0, OperaterPosition).trim();
        var s2 = wFormula.substring(OperaterPosition + pOprater.length).trim();
        if (s1.startsWith("+")) s1 = s1.substring(1);
        if (s2.startsWith("+")) s2 = s2.substring(1);

        if (pOprater.charAt(0) == '&' || 
            s1.startsWith("STR_") || s2.startsWith("STR_")){
            if (pOprater.charAt(0) == '+') pOprater = "&";
            wReturn = this.StringOperate(s1, s2, pOprater);

        } else {
            var v1 = (s1.length != 0 ? parseFloat(1 * s1) : 0.0);
            var v2 = (s2.length != 0 ? parseFloat(1 * s2) : 0.0);
            if (pOprater.charAt(0) == '+'){
                    wReturn = fncPlus(s1, s2);
            } else if (pOprater.charAt(0) == '-'){
                    wReturn = fncMinus(s1, s2);
            } else if (pOprater.charAt(0) == '*'){
                    wReturn = fncMultiply(s1, s2);
            } else if (pOprater.charAt(0) == '/'){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncDivide(s1, s2, 8, true);
                    } else {
                        wReturn = "0";
                    }
            } else if (pOprater.charAt(0) == '%'){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncMod(s1, s2, 0);
                    } else {
                        wReturn = s1;
                    }
            } else if (pOprater.charAt(0) == '^'){
            	wReturn = "1";
            	for(var i = 1; i <= parseInt(v2, 10);i++)
                    wReturn = fncMultiply(wReturn, s1);
                    
            } else if (pOprater.charAt(0) == '\\'){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncDivide(s1, s2, 8, true);
                    } else {
                        wReturn = "0";
                    }
                    wReturn = floor(wReturn, 1) + '';
                    
            } else if (pOprater == "MOD"){
                    if (v1 != 0.0 && v2 != 0.0){
                        wReturn = fncMod(s1, s2, 0);
                    } else {
                        wReturn = s1;
                    }
            } else if (pOprater == "BITAND"){
                    wReturn = (parseInt(v1, 10) & parseInt(v2, 10)) + '';
            } else if (pOprater == "BITOR"){
                    wReturn = (parseInt(v1, 10) | parseInt(v2, 10)) + '';
            } else if (pOprater == "<="){
            	    if (fncEqual(s1, s2)){ 
            	        wReturn = "-1";
            	    } else if (fncLarger(s2, s1)){
            	        wReturn = "-1";
            	    } else {
            	        wReturn = "0";
            	    }
            } else if (pOprater == ">="){
            	    if (fncEqual(s1, s2)){ 
            	        wReturn = "-1";
            	    } else if (fncLarger(s1, s2)){
            	        wReturn = "-1";
            	    } else {
            	        wReturn = "0";
            	    }
            } else if (pOprater == "<>"){
                    wReturn = ChangeStrB2I(!fncEqual(s1, s2));
            } else if (pOprater == "!="){
                    wReturn = ChangeStrB2I(!fncEqual(s1, s2));
            } else if (pOprater.charAt(0) == '='){
                    wReturn = ChangeStrB2I(fncEqual(s1, s2));
            } else if (pOprater.charAt(0) == '<'){
            	    wReturn = (fncLarger(s2, s1) ? "-1" : "0");
            } else if (pOprater.charAt(0) == '>'){
            	    wReturn = (fncLarger(s1, s2) ? "-1" : "0");
            } else if (pOprater == "AND"){
                    wReturn = ChangeStrB2I(v1 != 0 && v2 != 0);
            } else if (pOprater == "NOT"){
                    wReturn = ChangeStrB2I(v2 == 0);
            } else if (pOprater == "OR"){
                    wReturn = ChangeStrB2I(v1 != 0 || v2 != 0);
            }
        }

        wReturn=wReturn.toUpperCase();
        if ((pOprater.charAt(0) == '+' || pOprater.charAt(0) == '-') && 
                    wReturn.charAt(0) != '-'){
            wReturn = "+" + wReturn;
        }

	    return wReturn;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @param	{object}	pFormula2
     * @param	{object}	pOperater
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.StringOperate = function(pFormula1, pFormula2, pOperater)
	{
        // functionname : [EXOCalculator.StringOperate]

	    var wIsBoolType = true;
	    var wBooleanResult = false;
	
	    var wReturn = "";
	
        var wString1 = "";
        var wString2 = "";

        // ???? ????? ???? ?????? ??????
        pFormula1 = pFormula1.trim();
        if (pFormula1.startsWith("STR_")){
            wString1 = this.StringValues[parseInt(pFormula1.substring(4),10)];
        } else {
            wString1 = pFormula1;
        }

        pFormula2 = pFormula2.trim();
        if (pFormula2.startsWith("STR_")){
            wString2 = this.StringValues[parseInt(pFormula2.substring(4), 10)];
        } else {
            wString2 = pFormula2;
        }
        if (pOperater.charAt(0) == '&'){
            wReturn = this.TempString(wString1 + wString2);
            wIsBoolType = false;
        } else if (pOperater.startsWith("<=")){
            wBooleanResult = (wString1 <= wString2);
        } else if (pOperater.startsWith(">=")){
            wBooleanResult = (wString1 >= wString2);
        } else if (pOperater.startsWith("<>")){
            wBooleanResult = (wString1 != wString2);
        } else if (pOperater.charAt(0) == '='){
            wBooleanResult = (wString1 == wString2);
        } else if (pOperater.charAt(0) == '<'){
            wBooleanResult = (wString1 < wString2);
        } else if (pOperater.charAt(0) == '>'){
            wBooleanResult = (wString1 > wString2);
        } else if (pOperater.substring(0,4) == "LIKE"){
            wBooleanResult = checkLike(wString2, wString1);
        }

        if (wIsBoolType){
        	wReturn = (wBooleanResult? "-1" : "0");
        }
	
	    return wReturn;
	
	};
    
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.FuncOperate = function(pFormula)
	{
        // functionname : [EXOCalculator.FuncOperate]

        var wReturn = null;
        
        var wTemp = null; var wTemp1 = null;
        var wIntTemp = 0; var wIntTemp1 = 0;

        var wFormula = pFormula.replace(" ","");
        
        // ????κ? ?????
        var wPoint = wFormula.indexOf("(");
        var wFunction = wFormula.substring(0, wPoint).trim();

        wTemp = wFormula.substring(wPoint + 1);
        wTemp1 = wTemp.substring(0, wTemp.indexOf(")"));

        var wHaveString = (wTemp1.indexOf("STR_") != -1);
        var wArrParam = wTemp1.split(",");
        var wCount = wArrParam.length;
        
        // IIF의 처리
        if (wFunction == "IIF"){
        	wArrParam[0] = this.MultiOperate(wArrParam[0] + "");
        	wArrParam[1] = this.MultiOperate(wArrParam[1] + "");
        	wArrParam[2] = this.MultiOperate(wArrParam[2] + "");
        }
        // ????? ?????? ??????
		for(var i = 0; i < wCount; i++){
		    if (wArrParam[i].indexOf("STR_") >= 0){
		        wArrParam[i] = this.Array2String(wArrParam, i);
		    } else {
		        wArrParam[i] = val(wArrParam[i] + "");
		    }
        }
        // ??????? 
        if (wFunction == "SUM"){
            wReturn = sumOf(wArrParam); 
        } else if (wFunction == "AVG"){
            wReturn = avgOf(wArrParam); 
        
        } else if (wFunction == "MAX"){
            if (wHaveString){
                wReturn = this.TempString(maxOf(wArrParam)); 
            } else {
                wReturn = maxOf(wArrParam); 
            }
        } else if (wFunction == "MIN"){
            if (wHaveString){
                wReturn = this.TempString(minOf(wArrParam)); 
            } else {
                wReturn = minOf(wArrParam); 
            }

        } else if (wFunction == "ABS"){
            wReturn = abs(wArrParam[0]); 

        } else if (wFunction == "MOD"){
            wReturn = fncMod(wArrParam[0], wArrParam[1], 0); 

        } else if (wFunction == "ROUND"){
        	wIntTemp = parseInt(wArrParam[1], 10);
            wReturn = round(wArrParam[0], wIntTemp);

        } else if (wFunction == "CEIL"){
        	wIntTemp = parseInt(wArrParam[1], 10);
            wReturn = ceil(wArrParam[0], wIntTemp);

        } else if (wFunction == "INT"){
            wReturn = floor(wArrParam[0], 0);
            
        } else if (wFunction == "FLOOR"){
        	wIntTemp = parseInt(wArrParam[1],10);
            wReturn = floor(wArrParam[0], wIntTemp);

        } else if (wFunction == "COUNT"){
            wReturn = wCount + '';

        } else if (wFunction == "LEN"){
            wReturn = wArrParam[0].length + '';

        } else if (wFunction == "KLEN" || wFunction == "LENB"){
            wReturn = wArrParam[0].bytes() + '';

        } else if (wFunction == "INSTR"){
            var wBooleanTemp = false;
            if (wCount >=4){
                wBooleanTemp = (parseInt(wArrParam[3], 10) != 0);
            }

            wIntTemp = parseInt(wArrParam[0], 10) - 1;
            if (wIntTemp < 0) wIntTemp = 0;

            wTemp = wArrParam[0];
            wTemp1 = wArrParam[1];

            if (isDBCSPoint(wTemp, wIntTemp) != 0) wIntTemp++;

            wIntTemp = instrB(wTemp, wTemp1, wIntTemp, wBooleanTemp);

            wReturn = wIntTemp + '';

        } else if (wFunction == "REPLACE"){

            wIntTemp = 1; wIntTemp1 = 99999999;
            var wBooleanTemp = false;
            
            if (wCount >= 4)
                wIntTemp = parseInt(wArrParam[3], 10) - 1; // ReplaceNN????? 0?? ????? ???? ???? 
            if (wCount >= 5)
                wIntTemp1 = parseInt(wArrParam[4], 10);
            if (wCount >= 6)
                wBooleanTemp = (parseInt(wArrParam[5], 10) != 0);

            wReturn = this.TempString(replaceNN(wArrParam[0], wArrParam[1], wArrParam[2], wIntTemp, wIntTemp1, wBooleanTemp));

        } else if (wFunction == "MID"){
            wIntTemp  = parseInt(wArrParam[1],10);
            wIntTemp1 = (wCount == 3 ? parseInt(wArrParam[2], 10) : 1);

            wTemp = wArrParam[0];
            if (isDBCSPoint(wTemp, wIntTemp - 1) == 2){
                wIntTemp++; // wIntTemp1--;
            }
            wTemp1 = midB(wTemp, wIntTemp, wIntTemp1);

            wReturn = this.TempString(wTemp1);

        } else if (wFunction == "LEFT"){
            wIntTemp = parseInt(wArrParam[1], 10);

            wTemp = wArrParam[0];
            wTemp1 = leftB(wTemp, wIntTemp);

            wReturn = this.TempString(wTemp1);

        } else if (wFunction == "RIGHT"){
            wIntTemp = parseInt(wArrParam[1], 10);
            wTemp = wArrParam[0];

            wPoint = wTemp.length - wIntTemp ;
            wTemp1 = rightB(wTemp, wIntTemp);

            wReturn = this.TempString(wTemp1);

        } else if (wFunction == "SPACE"){
            wIntTemp = parseInt(wArrParam[0], 10);
            wReturn = this.TempString(repeatString(' ',wIntTemp));

        } else if (wFunction == "UCASE"){
            wReturn = this.TempString(wArrParam[0].toUpperCase());

        } else if (wFunction == "LCASE"){
            wReturn = this.TempString(wArrParam[0].toLowerCase());

        } else if (wFunction == "TRIM"){
            wReturn = this.TempString(wArrParam[0].trim());

        } else if (wFunction == "LTRIM"){
            wReturn = this.TempString(LTrim(wArrParam[0]));
            
        } else if (wFunction == "RTRIM"){
            wReturn = this.TempString(RTrim(wArrParam[0]));

        } else if (wFunction == "VAL"){
            wReturn = val(wArrParam[0]) + "";
            
        } else if (wFunction == "STR"){
            wReturn = this.TempString(wArrParam[0]);
            
        } else if (wFunction == "ISNULL"){
            wTemp = wArrParam[0];
            wReturn =  (wTemp == "\"\"" || wTemp == "") ? "-1" : "0";

        } else if (wFunction == "YEAR"){
            wReturn = wArrParam[0].substring(0, 4);
            
        } else if (wFunction == "MONTH"){
            wTemp = wArrParam[0].replace(/\-/g, "").substring(4, 6);
            wReturn = numberFormat(wTemp, "#0");
            
        } else if (wFunction == "DAY"){
            wTemp1 = wArrParam[0].replace(/\-/g, "").substring(wTemp1.length - 2);
            wReturn = numberFormat(wTemp, "#0");

        } else if (wFunction == "FMONY"){
            var wYM = wArrParam[0].replace(/\-/g, "");
            
            var wYY = parseInt(wYM.substring(0, 4), 10);
            var wMM = parseInt(wYM.substring(4, 6), 10);

            if (wMM == 1)  wYY--;

            wReturn = this.TempString(numberFormat(wYY, "0000"));

        } else if (wFunction == "FMONM"){
            var wYM = wArrParam[0].replace(/\-/g, "");
            
            var wYY = parseInt(wYM.substring(0, 4), 10);
            var wMM = parseInt(wYM.substring(4, 6), 10);
            
            wMM--;
            

            if (wMM == 0) wMM = 12;

            wReturn = this.TempString(numberFormat(wMM, "0000"));

        } else if (wFunction == "DAYDIFF"){
            wReturn = dayDiff(wArrParam[0], wArrParam[1]) + "";

        } else if (wFunction == "TIMEDIFF"){
            wReturn = timeDiff(wArrParam[0], wArrParam[1]) + "";
            wReturn = clearBehindZero(wReturn);

        } else if (wFunction == "DAYADD"){
            wIntTemp = parseInt(wArrParam[1],10);
            wTemp = dayAdd(wArrParam[0], wIntTemp);
            wReturn = this.TempString(wTemp);

        } else if (wFunction == "DAYSOF"){
            if (wCount == 2){
                wIntTemp  = parseInt(wArrParam[0], 10);
                wIntTemp1 = parseInt(wArrParam[1], 10);

            } else {
                wTemp = wArrParam[0].replace(/\-/g, "");
                wIntTemp = parseInt(wTemp.substring(4), 10);
                wIntTemp1 = parseInt(wTemp.substring(4, 6), 10);
            }
            wReturn = daysOf(wIntTemp, wIntTemp1) + "";

        } else if (wFunction == "WEEKDAY"){
            wReturn = weekDayOf(wArrParam[0]) + "";

        } else if (wFunction == "NOW"){
            wReturn = this.TempString(Now());

        } else if (wFunction == "IIF"){
            wIntTemp = parseInt(wArrParam[0], 10);
            if (wIntTemp == -1){
                wReturn = wArrParam[1];
            } else {
                wReturn = wArrParam[2];
            } 

        } else if (wFunction == "FORMAT"){
            wReturn = this.TempString(format(wArrParam[0], wArrParam[1]));

        } else if (wFunction == "SORT"){
            if (!wHaveString) {
                wReturn = this.TempString(func_SortASC_Num(wArrParam));
            } else {
                wReturn = this.TempString(func_SortASC_Str(wArrParam));
            }

        } else if (wFunction == "SORTDSC"){
            if (!wHaveString) {
                wReturn = this.TempString(func_SortDSC_Num(wArrParam));
            } else {
                wReturn = this.TempString(func_SortDSC_Str(wArrParam));
            }

        } else if (wFunction == "TOPN"){
		
            if (wHaveString) {
                wReturn = this.TempString(func_TopN_Str(wArrParam));
            } else {
                wReturn = this.TempString(func_TopN_Num(wArrParam));
            }

        } else if (wFunction == "LOWN"){
            if (wHaveString) {
                wReturn = this.TempString(func_LowN_Str(wArrParam));
            } else {
                wReturn = this.TempString(func_LowN_Num(wArrParam));
            }

        } else {
            wReturn = "" ;
        }
	
	    //????? ???????. 
	    return wReturn;
	
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {object}
     * @example	미결
     */
    EXOCalculator.prototype.Str2Temp = function(pFormula)
	{
        // functionname : [EXOCalculator.Str2Temp]

        if (pFormula.indexOf("\"") == -1) return pFormula;
        
        var wFormula = pFormula;

		this.ArrStringValues = cutString(pFormula, "\"", "\"");
		this.StringCount = this.ArrStringValues.length;

		if (this.ArrStringValues[this.ArrStringValues.length - 1].length == 0) this.StringCount--;
		for (var i = 0; i < this.StringCount ; i++){
  		    this.StringValues[i + 1] = this.ArrStringValues[i];
 			wFormula = replaceFirstOne(wFormula, "\"" + this.ArrStringValues[i] + "\"", "STR_" + (i + 1));
		}
	
		return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{object}	pFormula
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.Temp2Str = function(pFormula)
	{
        // functionname : [EXOCalculator.Temp2Str]

		if (pFormula.indexOf("STR_") == -1) return pFormula;
		
		var wFormula = pFormula || "";
		for(var i = this.StringCount; i > 0; i--){
			wFormula = wFormula.replaceWord("STR_" + i, this.StringValues[i]);
			if (wFormula.indexOf("STR_") == -1) break;
		}
		return wFormula;
	};
	
	/**
     * @description	미결
     * @param	{string}	pString
     * @return  {string}
     * @example	미결
     */
    EXOCalculator.prototype.TempString = function(pString)
	{
        // functionname : [EXOCalculator.TempString]

		this.StringValues[++this.StringCount] = pString;
		return  "STR_" + (this.StringCount);
	};
	
	/**
     * @description	미결
     * @param	{object}	pArray
     * @param	{number}	pIndex
     * @return  {object}
     * @example	미결
     */
	EXOCalculator.prototype.Array2String = function(pArray, pIndex)
	{
        // functionname : [EXOCalculator.Array2String]

		if (pArray[pIndex].length == 0) return "";
		return this.Temp2Str(this.MultiOperate(pArray[pIndex]));
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pFormula
	*     @return	{string}
	*     @example	미결
	*/
	function decomment(pFormula)
	{
		var wFormula = pFormula;
	
		if (wFormula.indexOf("//") != -1){
			wFormula = wFormula + "\r\n";
			wFormula = removeString(wFormula, "//", "\r\n");
		}
	
		if (wFormula.indexOf("/*") != -1 && 
			wFormula.indexOf("*/") != -1){
			wFormula = removeString(wFormula, "/*", "*/");
		}
	
		return wFormula;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_TopN_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";
		
		var wReturn = "";
		var wStringLen = 0;
	
		var wUpperBound = pArrParam.length - 1;
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wArrTemp = new Array(wUpperBound); //String
	
		for (var i = 0; i < wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i + 1];
		}
	
		wArrTemp.sort(compare);
		
		var j = 0;
		for (var i = wUpperBound - 1; i >= wUpperBound - wIntTemp ; i--){
			if (j++ > 0) wReturn += ",";
			wReturn += wArrTemp[i];
		}
		
	 	wArrTemp = null;
	 	
		return wReturn;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_LowN_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wReturn = "";
		var wStringLen = 0;
		
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wUpperBound = pArrParam.length - 1;
		var wArrTemp = new Array(wUpperBound);
		for (var i = 0; i < wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i + 1];
		}
	
		wArrTemp.sort(compare);
		
	    var j = 0;
		for (var i = 0; i <= wIntTemp - 1; i++){
			if (j++ > 0) wReturn += ",";
			wReturn += wArrTemp[i];
		}
		wArrTemp = null;
		
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_TopN_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wReturn = "";
		
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = [];
	
		for (var i = 0; i < wUpperBound ; i++){
			wArr_dbl[i] = val(pArrParam[i + 1]);
		}
	
		wArr_dbl.sort(compare);
	
		var j = 0;
		for (var i = wUpperBound - 1; i >= wUpperBound - wIntTemp; i--){
			if (j++ > 0) wReturn += ",";
			wReturn += clearBehindZero((wArr_dbl[i]) + '');
		}
		
		return wReturn;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_LowN_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wReturn = "";
		
	 	var wIntTemp = parseInt(pArrParam[0], 10);
	
		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = new Array(wUpperBound);
	
		for (var i = 0; i<= wUpperBound - 1; i++){
			wArr_dbl[i] = val(pArrParam[i + 1]);
		}
	
		wArr_dbl.sort(compare);
	
	    var j = 0;
		for (var i = 0; i <= wIntTemp - 1;i++){
	   	    if (j++ > 0) wReturn += ",";
			wReturn += clearBehindZero((wArr_dbl[i]) + '');
		}
	
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortASC_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";
	
		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
			wArr_dbl[i] = val(pArrParam[i]);
		}
	
		wArr_dbl.sort(compare);
	    
		var wReturn = "";
		for (var i = 0; i <= wUpperBound; i++){
			if (i > 0) wReturn += ",";
			wReturn += clearBehindZero((wArr_dbl[i]) + '');
		}
	
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortDSC_Num(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wUpperBound = pArrParam.length - 1;
		var wArr_dbl = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
			wArr_dbl[i] = val(pArrParam[i]);
		}

		wArr_dbl.sort(compare);
	
		var wReturn = "";
		for (var i = wUpperBound; i >= 0; i--){
			wReturn += clearBehindZero(wArr_dbl[i] + "");
			if (i > 0) wReturn += ",";
		}
	
		return wReturn;
	
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortDSC_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wUpperBound = pArrParam.length - 1;
		
		var wArrTemp = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i];
		}
	
		wArrTemp.sort(compare);
	
		var wReturn = "";
		for (var i = wUpperBound; i >= 0; i--){
			wReturn += wArrTemp[i];
			if (i > 0) wReturn += ",";
		}
		wArrTemp = null;
		
		return wReturn;
	};
	
	/**
	*     @description	미결
	*     @param	{object}	pArrParam
	*     @return	{string}
	*     @example	미결
	*/
	function func_SortASC_Str(pArrParam)
	{
		if (pArrParam <= 1) return "";

		var wUpperBound = pArrParam.length - 1;
		var wArrTemp = new Array(wUpperBound + 1);
	
		for (var i = 0; i <= wUpperBound; i++){
	  		wArrTemp[i] = pArrParam[i];
		}
	
		wArrTemp.sort(compare);
	
		var wReturn = "";
		for (var i = 0; i <= wUpperBound; i++){
			wReturn += wArrTemp[i];
			if (i < wUpperBound) wReturn += ",";
		}
		wArrTemp = null;
		
		return wReturn;
	};
	
	// Sort?? ???????
	/**
	*     @description	미결
	*     @param	{number}	a
	*     @param	{number}	b
	*     @return	{boolean}
	*     @example	미결
	*/
	function compare(a, b){
	    return a < b ? -1 : 
            a == b ? 0 : 1;

	};
	
	/**
	*     @description	미결
	*     @param	{number}	a
	*     @param	{number}	b
	*     @return	{boolean}
	*     @example	미결
	*/
	function compareKey(a, b){
	    return a.key < b.key ? -1 : 
            a.key == b.key ? 0 : 1;

	};

    // ?δ??????
    /* ---- ???? ????? ????? ???? ????? ---- */
	/**
	*     @description	미결
	*     @param	{string}	pChar
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
	function repeatString(pChar, pCount){
        var wReturn = "";
        for (var i = 0; i < pCount; i++) wReturn += pChar;
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @return	{string}
	*     @example	미결
	*/
   function clearFrontZero(pStrNum){
	    var wStrNum = "" + pStrNum;
        var wReturn = "0";
		
        // ????? 0 ????
        var wPos = -1;
        for (var i = 0; i < wStrNum.length; i++){
            if (wStrNum.charAt(i) != '0') {
                wPos = i;
                break;
            }
        }
        if (wPos != - 1)
            wReturn = wStrNum.substring(wPos);
		if (wReturn.charAt(0) == ".") wReturn = "0" + wReturn;

        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @return	{string}
	*     @example	미결
	*/
    function clearBehindZero(pStrNum){
	    var wStrNum = "" + pStrNum;
        if (wStrNum.indexOf('.') == -1)
            return wStrNum;
        
        // ????? 0 ????
        var wReturn = "0";
        var wPos = -1;
        for (var i = wStrNum.length - 1; i >= 0; i--){
            if (wStrNum.charAt(i) != '0') {
                wPos = i;
                break;
            } else if (wStrNum.charAt(i) == '.') {
                wPos = i - 1;
                break;
            }
        }
        if (wPos != - 1)
            wReturn = wStrNum.substring(0, wPos + 1);
        if (wReturn.endsWith("."))
            wReturn = wStrNum.substring(0, wReturn.length - 1);
            
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{boolean}
	*     @example	미결
	*/
    function fncLarger(pStrNumX, pStrNumY){
        var wReturn = false;
        var pStrNumX1 = ""; var pStrNumY1 = ""; var pStrNumX2 = ""; var pStrNumY2 = "";
        pStrNumX = pStrNumX + ""; 
		pStrNumY = pStrNumY + "";
		
        // ????? ??? ?и?
        var wPos = pStrNumX.indexOf(".");
        if (wPos > -1) {
        	pStrNumX1 = pStrNumX.substring(0, wPos);
        	pStrNumX2 = pStrNumX.substring(wPos + 1);
        } else {
        	pStrNumX1 = pStrNumX;
        	pStrNumX2 = "";
        }
        
        wPos = pStrNumY.indexOf(".");
        if (wPos > -1) {
        	pStrNumY1 = pStrNumY.substring(0, wPos);
        	pStrNumY2 = pStrNumY.substring(wPos + 1);
        } else {
        	pStrNumY1 = pStrNumY;
        	pStrNumY2 = "";
        }

        //????? ???? ??
        var wIsEqual = false;
        pStrNumX1 = clearFrontZero(pStrNumX1);
        pStrNumY1 = clearFrontZero(pStrNumY1);
        if (pStrNumX1.length > pStrNumY1.length){
            wReturn = true;
        } else if (pStrNumX1.length == pStrNumY1.length
                   && pStrNumX > pStrNumY){
            wReturn = true;
        } else if (pStrNumX1.length == pStrNumY1.length
                   && pStrNumX == pStrNumY){
            wIsEqual = true;     	
        }
        
        //????? ???? ??
        if (wIsEqual){
        	if (pStrNumX2 == ""){
        		wReturn = false;
        	} else if (pStrNumY2 == ""){
        		wReturn = true;
        	} else {
                wReturn = (pStrNumX2 > pStrNumY2);
            }
        }

        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{object}
	*     @example	미결
	*/
    function fncEqual(pStrNumX, pStrNumY){
        return (clearFrontZero(pStrNumX) == clearFrontZero(pStrNumY));
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{string}
	*     @example	미결
	*/
    function fncMultiply (pStrNumX, pStrNumY){
        // ????? ??? ?????. ??????? ??????? ?????  
        var wReturn = ""; 
	    pStrNumX = pStrNumX + "";
	    pStrNumY = pStrNumY + "";
        if (pStrNumX == "0" || pStrNumY == "0") return "0";
         
        // ????? ?????? a???
        var wVarX = new Array(5);
        var wVarY = new Array(5);
        var wMultiplyValue = 0; var wAddingNum = 0;var wFixingNum = 0;
        
        // ????? ???? o?? 
        var wMinusSign = ((pStrNumX.startsWith("-") && !pStrNumY.startsWith("-"))
                           || (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) );
        if (pStrNumX.startsWith("-")) pStrNumX = pStrNumX.substring(1);
        if (pStrNumY.startsWith("-")) pStrNumY = pStrNumY.substring(1);

        // ??????? ???? o?? 
        var wDotPosFromLeft = 0;
        var wDotPosFromRight = 0;
   
        wDotPosFromLeft = pStrNumX.indexOf('.');
        if (wDotPosFromLeft != -1) {
            wDotPosFromRight = pStrNumX.length - 1 -wDotPosFromLeft;
            pStrNumX = pStrNumX.substring(0, wDotPosFromLeft) + pStrNumX.substring(wDotPosFromLeft + 1);
        }
        
        wDotPosFromLeft = pStrNumY.indexOf('.');
        if (wDotPosFromLeft != -1) {
            wDotPosFromRight = wDotPosFromRight + pStrNumY.length - 1 -wDotPosFromLeft;
            pStrNumY = pStrNumY.substring(0, wDotPosFromLeft) + pStrNumY.substring(wDotPosFromLeft + 1);
        }

        // 15??? ????? ????? ??? 
        pStrNumX = repeatString('0', 15 - pStrNumX.length) + pStrNumX;
        pStrNumY = repeatString('0', 15 - pStrNumY.length) + pStrNumY;
        
        
        for (var i = 0; i < 5; i++){
             wVarX[i] = parseInt(pStrNumX.substring(3 * i, (3 * i) + 3), 10);
             wVarY[i] = parseInt(pStrNumY.substring(3 * i, (3 * i) + 3), 10);
        }
        wReturn = ""; wAddingNum = 0; wMultiplyValue = 0;
        for (var i = 0; i < 10; i++){
            if (i == 0){
                wMultiplyValue = wVarX[4] * wVarY[4];
            } else if (i == 1){
                wMultiplyValue = wAddingNum + (wVarX[3] * wVarY[4]) 
                                            + (wVarX[4] * wVarY[3]);
            } else if (i == 2){
                wMultiplyValue = wAddingNum + (wVarX[2] * wVarY[4]) 
                                            + (wVarX[3] * wVarY[3])  
                                            + (wVarX[4] * wVarY[2]);
            } else if (i == 3){
                wMultiplyValue = wAddingNum + (wVarX[1] * wVarY[4]) 
                                            + (wVarX[2] * wVarY[3])  
                                            + (wVarX[3] * wVarY[2]) 
                                            + (wVarX[4] * wVarY[1]);
            } else if (i == 4){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[4]) 
                                            + (wVarX[1] * wVarY[3])  
                                            + (wVarX[2] * wVarY[2]) 
                                            + (wVarX[3] * wVarY[1]) 
                                            + (wVarX[4] * wVarY[0]); 
            } else if (i == 5){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[3]) 
                                            + (wVarX[1] * wVarY[2]) 
                                            + (wVarX[2] * wVarY[1]) 
                                            + (wVarX[3] * wVarY[0]); 
            } else if (i == 6){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[2]) 
                                            + (wVarX[1] * wVarY[1]) 
                                            + (wVarX[2] * wVarY[0]); 
            } else if (i == 7){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[1]) 
                                            + (wVarX[1] * wVarY[0]); 
            } else if (i == 8){
                wMultiplyValue = wAddingNum + (wVarX[0] * wVarY[0]);
            } else if (i == 9){
                wMultiplyValue = wAddingNum;
            }
            
            wAddingNum = parseInt(wMultiplyValue / 1000,10);
            wFixingNum = wMultiplyValue % 1000;
            wReturn = numberFormat(("" + wFixingNum),"000") + wReturn;
        }
        
        // ????? ????
        if (wDotPosFromRight > 0){
            wDotPosFromLeft = wReturn.length - wDotPosFromRight;
            wReturn = wReturn.substring(0, wDotPosFromLeft) + "." + wReturn.substring(wDotPosFromLeft);
        }
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        
        // ????? 0 ????
        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
                
        // ??? ????
        if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;

       return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @param	{number}	pCalsToPos
	*     @return	{object}
	*     @example	미결
	*/
    function fncMod(pStrNumX, pStrNumY, pCalcToPos){
	
    	 var wReturn = fncDivide(pStrNumX, pStrNumY, pCalcToPos, false);
    	 wReturn = fncMultiply(wReturn, pStrNumY);
    	 wReturn = fncMinus(pStrNumX, wReturn);

         return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @param	{number}	pCalsToPos
	*     @param	{number}	pRoundUp
	*     @return	{string}
	*     @example	미결
	*/
    function fncDivide(pStrNumX, pStrNumY, pCalcToPos, pRoundUp){
        var wReturn = "";
        var wCurrentDigitPos = 0; var wDigitsGap = 0;
	    pStrNumX = pStrNumX + "";
	    pStrNumY = pStrNumY + "";

        // ????? ???? o?? 
        var wMinusSign = ((pStrNumX.startsWith("-") && !pStrNumY.startsWith("-"))
                              || (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) );
        if (pStrNumX.startsWith("-")) pStrNumX = pStrNumX.substring(1);
        if (pStrNumY.startsWith("-")) pStrNumY = pStrNumY.substring(1);

        // ?? ???? ???? ??????? ???
        var wDotPosFromLeftX = pStrNumX.indexOf('.');
        var wDotPosFromLeftY = pStrNumY.indexOf('.');
        var wDotPosFromRightX = 0;
        var wDotPosFromRightY = 0;
        
        if (wDotPosFromLeftX >= 0)
            wDotPosFromRightX = pStrNumX.length - wDotPosFromLeftX - 1;
        if (wDotPosFromLeftY >= 0)
            wDotPosFromRightY = pStrNumY.length - wDotPosFromLeftY - 1;
        if (wDotPosFromRightY > wDotPosFromRightX) {
            pStrNumX = pStrNumX + repeatString('0', wDotPosFromRightY - wDotPosFromRightX);
        } else if (wDotPosFromRightX > wDotPosFromRightY) {
            pStrNumY = pStrNumY + repeatString('0', wDotPosFromRightX - wDotPosFromRightY);
        }
        
        if ( wDotPosFromLeftX > 0)
            pStrNumX = pStrNumX.substring(0, wDotPosFromLeftX) + pStrNumX.substring(wDotPosFromLeftX + 1);
        if (wDotPosFromLeftY > 0)
            pStrNumY = pStrNumY.substring(0, wDotPosFromLeftY) + pStrNumY.substring(wDotPosFromLeftY + 1);
        wDigitsGap = pStrNumX.length - pStrNumY.length;


        
        // ???????? ?????? ??? 0?? ?????
        wCurrentDigitPos = 0;
        if (wDigitsGap < 0){
            pStrNumX = repeatString('0', (-1) * wDigitsGap) + pStrNumX;
        } else if (wDigitsGap > 0){
            wCurrentDigitPos = wDigitsGap;
        }
        wDigitsGap = pStrNumX.length - pStrNumY.length;
        
        // ?ð?????? ????? ???? ??? ???  
        var wCompared= new Array(10);   //String
        for (var i = 0; i < 10; i++){
            wCompared[i] = fncMultiply(pStrNumY, i + "");
		}
       
        // ??ø? ?????? ???? ???? ??? ??????. 
        var wValue;
        var j = 0;
        var wLenY = pStrNumY.length;
		
		
        pStrNumX = pStrNumX + "00000000000000000000000"; //???ο??궧 '0'?? ????? ????? ???????? ??????
        var wTarget = pStrNumX.substring(0, wLenY);
        for (; wCurrentDigitPos > ((-1) * pCalcToPos - 2); wCurrentDigitPos--){
           j++;
           wValue = 9; // ??? ?????? ??? ?????? ?? ???? 9?? ??
           for (i = 1; i <= 9; i++){
               if (fncLarger(wCompared[i], wTarget)){

                   wValue = i - 1;
                   break;
               }
           } 
           var wReminder = fncMinus(wTarget, wCompared[wValue]);
           if (wReminder == "0"){
               wTarget = pStrNumX.substring(wLenY + j - 1, wLenY + j);
           } else {
               wTarget = wReminder + pStrNumX.charAt(wLenY + j - 1);
           }
           wReturn += wValue + '';
        }
        
        if (pCalcToPos >= 0) {
            wDotPosFromLeftX = wReturn.length - pCalcToPos - 1;
            wReturn = wReturn.substring(0, wDotPosFromLeftX) + "." + wReturn.substring(wDotPosFromLeftX);
        } else if (pCalcToPos < 0) {
            wReturn = wReturn + repeatString('0', (-1) * pCalcToPos);
        }
		
        if (pRoundUp) { 
            wReturn = round(wReturn, pCalcToPos);
        } else {
            wReturn = floor(wReturn, pCalcToPos);
        }
        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;

        // ??? ????
        if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;

        return  wReturn;
   };
   
   /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{string}
	*     @example	미결
	*/
   function fncPlus(pStrNumX, pStrNumY){
       var wReturn = "";
       var wMinusSign = false;
	   pStrNumX = pStrNumX + "";
	   pStrNumY = pStrNumY + "";

       // ????? ???? o?? 
       if (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
           pStrNumY = pStrNumY.substring(1);
           return fncMinus(pStrNumX, pStrNumY);
       } else if (pStrNumX.startsWith("-") && !pStrNumY.startsWith("-")) {
           pStrNumX = pStrNumX.substring(1);
           return fncMinus(pStrNumY, pStrNumX);
       } else if (pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
           wMinusSign = true;
           pStrNumX = pStrNumX.substring(1);
           pStrNumY = pStrNumY.substring(1);
       }
       
       // ??????? ??????
       var wDigitsAfterDotX = 0;
       var wDigitsAfterDotY = 0;
       if (pStrNumX.indexOf('.') != -1) 
           wDigitsAfterDotX = pStrNumX.length - pStrNumX.indexOf('.') - 1;        
       if (pStrNumY.indexOf('.') != -1)
           wDigitsAfterDotY = pStrNumY.length - pStrNumY.indexOf('.') - 1;        
       var wDigitsPosition = (wDigitsAfterDotX > wDigitsAfterDotY ? wDigitsAfterDotX : wDigitsAfterDotY);
            
       var wDigitsGap = wDigitsAfterDotX - wDigitsAfterDotY;
       if (wDigitsGap < 0){
           pStrNumX = pStrNumX + repeatString('0', (-1) * wDigitsGap);
       } else if (wDigitsGap > 0){
           pStrNumY = pStrNumY + repeatString('0', wDigitsGap);
       }

       // ?? ???? ???? ??????? ???
       var wDotPosFromLeft = pStrNumX.indexOf('.');
       if (wDotPosFromLeft != -1)
           pStrNumX = pStrNumX.substring(0, wDotPosFromLeft) + pStrNumX.substring(wDotPosFromLeft + 1);
       wDotPosFromLeft = pStrNumY.indexOf('.');
       if (wDotPosFromLeft != -1)
           pStrNumY = pStrNumY.substring(0, wDotPosFromLeft) + pStrNumY.substring(wDotPosFromLeft + 1);
       
       // ????? ?????? a???
       var wVarX = new Array(10);
       var wVarY = new Array(10);
       var wPlusValue = 0; var wAddingNum = 0; var wFixingNum = 0;
       
       // 30??? ????? ????? ??? 
       pStrNumX = repeatString('0', 30 - pStrNumX.length) + pStrNumX;
       pStrNumY = repeatString('0', 30 - pStrNumY.length) + pStrNumY;
       
       for (var i = 0; i < 10; i++){
             wVarX[i] = parseInt(pStrNumX.substring(3 * i, (3 * i) + 3), 10);
             wVarY[i] = parseInt(pStrNumY.substring(3 * i, (3 * i) + 3), 10);
       }
        
       wReturn = ""; wAddingNum = 0; wPlusValue = 0;wFixingNum = 0;
       for (var i = 9; i >= 0; i--){
           wPlusValue = wAddingNum + wVarX[i] + wVarY[i];
           wAddingNum = parseInt(wPlusValue / 1000, 10);
           wFixingNum = wPlusValue % 1000;
           wReturn = numberFormat(wFixingNum + '',"000") + wReturn;
		   
        }
        if (wAddingNum > 0) 
            wReturn = wAddingNum + '' + wReturn;
        
        // ????? ????
        if (wDigitsPosition > 0){
            wDotPosFromLeft = wReturn.length - wDigitsPosition;
            wReturn = wReturn.substring(0, wDotPosFromLeft) + "." + wReturn.substring(wDotPosFromLeft);
        }
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        
        // ????? 0 ????
        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
                
        // ??? ????
        if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;
   
       return  wReturn;
   };
   
   /**
	*     @description	미결
	*     @param	{number}	pStrNumX
	*     @param	{number}	pStrNumY
	*     @return	{string}
	*     @example	미결
	*/
   function fncMinus(pStrNumX, pStrNumY){
        var wReturn = "";
        var wMinusSign = false;
		pStrNumX = pStrNumX + "";
		pStrNumY = pStrNumY + "";
        
        // ????? ???? o?? 
        if (!pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
            pStrNumY = pStrNumY.substring(1);
            return fncPlus(pStrNumX, pStrNumY);
        } else if (pStrNumX.startsWith("-") && !pStrNumY.startsWith("-")) {
            pStrNumY = "-" + pStrNumY;
            return fncPlus(pStrNumY, pStrNumX);
        } else if (pStrNumX.startsWith("-") && pStrNumY.startsWith("-")) {
            wMinusSign = true;
            pStrNumX = pStrNumX.substring(1);
            pStrNumY = pStrNumY.substring(1);
        }
       
        // ??????? ??????
        var wDigitsAfterDotX = 0;
        var wDigitsAfterDotY = 0;
        if (pStrNumX.indexOf('.') != -1) 
            wDigitsAfterDotX = pStrNumX.length - pStrNumX.indexOf('.') - 1;        
        if (pStrNumY.indexOf('.') != -1)
            wDigitsAfterDotY = pStrNumY.length - pStrNumY.indexOf('.') - 1;        
        var wDigitsPosition = (wDigitsAfterDotX > wDigitsAfterDotY ? wDigitsAfterDotX : wDigitsAfterDotY);
            

        // ?? ???? ???? ??????? ???
        var wDigitsGap = wDigitsAfterDotX - wDigitsAfterDotY;
        var wDotPosFromLeft = pStrNumX.indexOf('.');
        if (wDotPosFromLeft != -1)
            pStrNumX = pStrNumX.substring(0, wDotPosFromLeft) + pStrNumX.substring(wDotPosFromLeft + 1);
        wDotPosFromLeft = pStrNumY.indexOf('.');
        if (wDotPosFromLeft != -1)
            pStrNumY = pStrNumY.substring(0, wDotPosFromLeft) + pStrNumY.substring(wDotPosFromLeft + 1);
      
        if (wDigitsGap < 0){
               pStrNumX = pStrNumX + repeatString('0', (-1) * wDigitsGap);
        } else if (wDigitsGap > 0){
               pStrNumY = pStrNumY + repeatString('0', wDigitsGap);
        }

        // 15??? ????? ??? 
        pStrNumX = repeatString('0', 30 - pStrNumX.length) + pStrNumX;
        pStrNumY = repeatString('0', 30 - pStrNumY.length) + pStrNumY;

        var wStrNum = ""; 
        if (pStrNumX < pStrNumY && !wMinusSign){
            wStrNum  = pStrNumX;
            pStrNumX = pStrNumY;
            pStrNumY = wStrNum;
            wMinusSign = true;
        } else if (pStrNumX > pStrNumY && !wMinusSign){
            wMinusSign = false;
        } else if (pStrNumX < pStrNumY && wMinusSign){
            wStrNum  = pStrNumX;
            pStrNumX = pStrNumY;
            pStrNumY = wStrNum;
            wMinusSign = false;
        } else if (pStrNumX > pStrNumY && wMinusSign){
            wMinusSign = true;
        }
      
        // ????? ?????? a???
        var wVarX = new Array(10);
        var wVarY = new Array(10);
        var wMinusValue = 0; var wAddingNum = 0; var wFixingNum = 0;
         
         // 30??? ????? ??? 
         for (var i = 0; i < 10; i++){
              wVarX[i] = parseInt(pStrNumX.substring(3 * i, (3 * i) + 3), 10);
              wVarY[i] = parseInt(pStrNumY.substring(3 * i, (3 * i) + 3), 10);
         }
         
         wReturn = ""; wAddingNum = 0; wMinusValue = 0;

         for (var i = 9; i >= 0; i--){
             wMinusValue = wAddingNum + 1000 + wVarX[i] - wVarY[i];
             wAddingNum = parseInt(wMinusValue / 1000, 10) - 1;
             wFixingNum = wMinusValue % 1000;
             wReturn = numberFormat(wFixingNum + "","000") + wReturn;
         }
        
         // ????? ????
         if (wDigitsPosition > 0){
             wDotPosFromLeft = wReturn.length - wDigitsPosition;
             wReturn = wReturn.substring(0, wDotPosFromLeft) + "." + wReturn.substring(wDotPosFromLeft);
         }
         if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
         
         // ????? 0 ????
         wReturn = clearFrontZero(wReturn);
         wReturn = clearBehindZero(wReturn);
         if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
         if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
                
         // ??? ????
         if (wMinusSign && wReturn != "0") wReturn = "-" + wReturn;
 
         return  wReturn;
    };
   
    /* ---- ???? ????? ?????? ????? ---- */
    /**
	*     @description	미결
	*     @return	{string}
	*     @example	미결
	*/
    function Now()
    {
        var wReturn = "";
	    var d = new Date();
		wReturn = ""  + d.getFullYear() 
		        + "-" + (d.getMonth() < 9 ? "0" + (d.getMonth() + 1) : (d.getMonth() + 1) + '') 
		        + "-" + (d.getDate() < 10 ? "0" + d.getDate() : d.getDate() + '')
		        + " " + (d.getHours() < 10 ? "0" + d.getHours() : d.getHours() + '')
		        + ":" + (d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes() + '')
		        + ":" + (d.getSeconds() < 10 ? "0" + d.getSeconds() : d.getSeconds() + '');
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pYear
	*     @return	{number}
	*     @example	미결
	*/
    function isLeapYear(pYear)
    {
        return (new Date(pYear, 2, 0)).getDate() == 29;                             
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pYear
	*     @param	{number}	pMon
	*     @param	{number}	pDay
	*     @return	{object}
	*     @example	미결
	*/
    function DaysOfYear(pYear, pMon, pDay)
    {
        var wLastYearLastDate = (pYear - 1) + "1231";
        var TargetDate = ""  + pYear 
		               + (pMon < 10 ? "0" + pMon : pMon + '') 
		               + (pDay < 10 ? "0" + pDay : pDay + '');

        return dayDiff(wLastYearLastDate, TargetDate);
    };

    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @param	{number}	pPosition
	*     @return	{object}
	*     @example	미결
	*/
    function round(pStrNum, pPosition)
    {
    	//2016 04 20(차중훈) 수정 : pPosition 입력 안 한 경우 0으로 처리
    	pPosition = (typeof pPosition == "undefined") ? 0 : pPosition;
    	
        // ?????? ???? ???? 0?? ???δ?. 
        var wReturn = "0000000000" + pStrNum;
        if (wReturn.indexOf('.') == -1) wReturn += ".0000000000000";
		wReturn += "0000000000000";
        
        // ?????????? ????? ?? ??ø??????? ????? ??????. 
        var wDotPos = wReturn.indexOf('.');
        wReturn = wReturn.substring(0, wDotPos) + wReturn.substring(wDotPos + 1);
        // ??ø?????? ???. 
        wReturn = wReturn.substring(0, wDotPos + pPosition + 1);

        var wCharEnd = wReturn.charAt(wReturn.length - 1);
        wReturn = wReturn.substring(0, wReturn.length - 1);
        if (wCharEnd >= '5'){
            var len1 = wReturn.length;
            wReturn = fncPlus(wReturn, "1");
            var len2 = wReturn.length;
            
            if (len1 > len2) wReturn = repeatString("0",len1 - len2) + wReturn;         
        }
        // ??????? ??? ???δ?.
        if (pPosition > 0) {
            wDotPos = wReturn.length - pPosition;
            wReturn = wReturn.substring(0, wDotPos) + "." + wReturn.substring(wDotPos);
        } else if (pPosition <= 0) {
            wReturn = wReturn + repeatString('0', (-1) * pPosition);
        }

        wReturn = clearFrontZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @param	{number}	pPosition
	*     @return	{object}
	*     @example	미결
	*/
    function ceil(pStrNum, pPosition)
    {
        // ?????? ???? ???? 0?? ???δ?. 
        var wReturn = "0000000000" + pStrNum;
        if (wReturn.indexOf('.') == -1) wReturn += ".0000000000000";
		wReturn += "0000000000000";
        
        // ?????????? ????? ?? ??ø??????? ????? ??????. 
        var wDotPos = wReturn.indexOf('.');
        wReturn = wReturn.substring(0, wDotPos) + wReturn.substring(wDotPos + 1);
        
        // ?ø?????? ???. 
        wReturn = wReturn.substring(0, wDotPos + pPosition);
        wReturn = fncPlus(wReturn, "1");      
        
        // ??????? ??? ???δ?.
        if (pPosition > 0) {
            wDotPos = wReturn.length - pPosition;
            wReturn = wReturn.substring(0, wDotPos) + "." + wReturn.substring(wDotPos);
        } else if (pPosition <= 0) {
            wReturn = wReturn + repeatString('0', (-1) * pPosition);
        }

        wReturn = clearFrontZero(wReturn);
        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
         
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStrNum
	*     @param	{number}	pPosition
	*     @return	{object}
	*     @example	미결
	*/
    function floor(pStrNum, pPosition)
    {
        // ?????? ???? ???? 0?? ???δ?. 
        var wReturn = "0000000000" + pStrNum;
        if (wReturn.indexOf('.') == -1) wReturn += ".0000000000000";
		wReturn += "0000000000000";
        
        // ?????????? ????? ?? ??ø??????? ????? ??????. 
        var wDotPos = wReturn.indexOf('.');
        wReturn = wReturn.substring(0, wDotPos) + wReturn.substring(wDotPos + 1);
        
        // ?ø?????? ???. 
        wReturn = wReturn.substring(0, wDotPos + pPosition);
    
        // ??????? ??? ???δ?.
        if (pPosition > 0) {
            wDotPos = wReturn.length - pPosition;
            wReturn = wReturn.substring(0, wDotPos) + "." + wReturn.substring(wDotPos);
        } else if (pPosition <= 0) {
            wReturn = wReturn + repeatString('0', (-1) * pPosition);
        }

        wReturn = clearFrontZero(wReturn);
        wReturn = clearBehindZero(wReturn);

        if (wReturn.startsWith(".")) wReturn = "0" + wReturn;
        if (wReturn.endsWith(".")) wReturn = wReturn.substring(0, wReturn.length - 1) ;
        if (wReturn == "-0") wReturn = "0" ;
         
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{number}	num
	*     @return	{string}
	*     @example	미결
	*/
    function abs(num)
    {
        var wReturn = num + '';
        if (wReturn.startsWith("-")) wReturn = wReturn.substring(1);
        
        return wReturn;
    };

   /* ---- ???? ????? ????? ?????? ????? ---- */
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @param	{number}	pPosition
	*     @return	{boolean}
	*     @example	미결
	*/
    function isDBCSPoint(pString, pPosition)
    {
        var wReturn = 0;
        var str = pString;
        var wPosition = 0;
        for (var i = 0; i < str.length; i++) {
            var wISDBCSChar = str.charCodeAt(i) > 128;
            wPosition += wISDBCSChar ? 2 : 1;
            
            if (wISDBCSChar && wPosition == pPosition) {
                wReturn = 2;
                break;
            } else if (wISDBCSChar && wPosition > pPosition) {
                wReturn = 1;
                break;
            } else if (wPosition >= pPosition) {
                break;
            }
        }
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
    function leftB(pSource, pCount)
    {
        var wReturn = pSource;
        var str = pSource;
        var wCount = 0;
        for (var i = 0; i < str.length; i++) {
            var wISDBCSChar = str.charCodeAt(i)> 128;
            wCount += wISDBCSChar ? 2 : 1;
            
            if (wISDBCSChar && wCount > pCount) { 
                wReturn = str.substring(0, i) + " ";
                break;
            } else if (wCount >= pCount) {
                wReturn = str.substring(0, i + 1);
                break;
            }
        }
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
    function rightB(pSource, pCount)
    {
        var wReturn = pSource;
        var str = pSource;
        var wCount = 0;
        for (var i = str.length -1; i > 0; i--) {
            var wISDBCSChar = str.charCodeAt(i) > 128;
            wCount += wISDBCSChar ? 2 : 1;
            
            if (wISDBCSChar && wCount > pCount) {
                wReturn = str.substring(i+1) ;
                break;
            } else if (wCount >= pCount) {
                wReturn = str.substring(i);
                break;
            }
        }
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{number}	pStart
	*     @param	{number}	pCount
	*     @return	{string}
	*     @example	미결
	*/
    function midB(pSource, pStart, pCount)
    {
        var wReturn = pSource;
        var str = pSource;
        var wCount = 0;
		var wStartPoint = -1; var wEndPoint = pSource.length;
		
        for (var i = 0; i < str.length; i++) {
            var wISDBCSChar = str.charCodeAt(i)> 128;
            wCount += wISDBCSChar ? 2 : 1;
			

            if (wCount > pStart && wStartPoint == -1) {
                wStartPoint = i;
            }
			
            if (wCount == pStart + pCount) {
                wEndPoint = i + 1;
                break;
            } else if (wCount > pStart + pCount) {
                wEndPoint = i;
               break;
            } 
			
			
        }
		wReturn = str.substring(wStartPoint, wEndPoint);
		
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @param	{number}	pStartPos
	*     @param	{object}	pBinarySearch
	*     @return	{boolean}
	*     @example	미결
	*/
    function instrB(pSource, pTarget, pStartPos, pBinarySearch)
    {
        var wReturn = 0;
		var wPos = 0; 
		var wStartPoint = 0;
		var str = pSource;
		var wCount = 0;
		var wTarget = "" + pTarget;
		
        for (var i = 0; i < str.length; i++) {
            wCount += (str.charCodeAt(i)> 128) ? 2 : 1;
			
            if (wCount >= pStartPos) {
                wStartPoint = i; break;
            }
        }
		
        
        if (pBinarySearch){
            wPos = pSource.toUpperCase().indexOf(wTarget.toUpperCase(), wStartPoint);
        } else {
            wPos = pSource.indexOf(wTarget, wStartPoint);
        }
        if (wPos == -1) {
        	wReturn = 0;
        } else {
	        for (var i = 0; i <= wPos; i++) 
	            wReturn += (str.charCodeAt(i)> 128) ? 2 : 1;
		}
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @param	{string}	pString
	*     @return	{boolean}
	*     @example	미결
	*/
    function replaceFirstOne(pSource, pTarget, pString)
    {
        return pSource.replace(pTarget, pString);
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @param	{string}	pString
	*     @param	{number}	pStart
	*     @param	{number}	pCount
	*     @param	{object}	pBinarySearch
	*     @return	{string}
	*     @example	미결
	*/
    function replaceNN(pSource, pTarget, pString, pStart, pCount, pBinarySearch)
    {
        var wReturn = "";
        var wFoundCount = 0;
        var wReplaceCount = 0;
        var wPosNext = 0; var wPosBefore = 0;
        var wTarget = "" + pTarget;

        if (pBinarySearch){
            pSource = pSource.toUpperCase();
            wTarget = wTarget.toUpperCase();
        }
        var wPos = pSource.indexOf(wTarget);

        while (wPos != -1){
            
            wReturn += pSource.substring(wPosBefore, wPos);
            if (++wFoundCount >= pStart && wReplaceCount < pCount){
                wReturn += pString;
                wReplaceCount++;
            } else {
                wReturn += wTarget;
            }

            wPosBefore = wPos + wTarget.length;
            wPos = pSource.indexOf(wTarget, wPos + 1);
        }
        wReturn += pSource.substring(wPosBefore);
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pChar
	*     @return	{boolean}
	*     @example	미결
	*/
    function countOfChar(pSource, pChar)
    {
        var wCount = 0;
        var wPos = pSource.indexOf(pChar);
        while (wPos != -1){
            wCount++;
            wPos = pSource.indexOf(pChar, ++wPos);
        }
        return wCount;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget
	*     @return	{boolean}
	*     @example	미결
	*/
    function countOfStr(pSource, pTarget)
    {
        var wTarget = "" + pTarget;
    	var wCount = 0;
        var wPos = pSource.indexOf(wTarget);
        while (wPos != -1){
            wCount++;
            wPos = pSource.indexOf(wTarget, ++wPos);
        }
        return wCount;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @return	{object}
	*     @example	미결
	*/
    function RTrim(pSource)
    {
         return pSource.replace(/(\s*$)/, "");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @return	{object}
	*     @example	미결
	*/
    function LTrim(pSource)
    {
        return pSource.replace(/(^\s*)/, "");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @return	{object}
	*     @example	미결
	*/
    function isNumeric(pString)
    {
        if (pString.length == 0) return false;
        
        var wString = pString;
		wString = wString.trim();
		
		var wReturn =  wString.replace(/[^0-9]/g, "") == wString 
		            || (wString.charAt(0) == "-" && wString.substring(1).replace(/[^0-9]/g, "") == wString.substring(1));
		return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @param	{number}	pPosition
	*     @return	{boolean}
	*     @example	미결
	*/
    function isSign(pString, pPosition)
    {
        if (pPosition == 0) return true;
        
        var wResult = true;
        var wPos = pPosition - 1;
        var wChar = " ";
        var wString = "";
        while (0 <= wPos){
            wChar = pString.charAt(wPos);			
            if (wChar == " "){
                wPos--;
                continue;
            }
    
            // ???????? ?????? +-?? ??????.
            wResult = false;
            
            if (wChar == "*" || wChar == "/" || wChar == "\\" || wChar == "=" || 
                wChar == ">" || wChar == "+" || wChar == "-"  || wChar == "<" || 
                wChar == "(" || wChar == "," ){
                wResult = true;
            }
            if (1 <= wPos){
                wString = pString.substring(wPos - 1, wPos + 1).toUpperCase();
                if (wString == "OR") wResult = true;
            } 
            if (2 <= wPos) {
                wString = pString.substring(wPos - 2, wPos + 1).toUpperCase();
                if (wString == "AND" || wString == "MOD" ||wString == "NOT") wResult = true;
            }
            break;
        }
    
        return wResult;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @return	{boolean}
	*     @example	미결
	*/
    function val(pString)
    {
        if (typeof(pString) == "number") return pString;
        
        var wReturn = 0;
        var wPos = 0;
        var wString = "";
	
		while (pString.charAt(wPos) == " ") wPos++;
		
        var wChar = pString.charAt(wPos);
        if (wChar == '-'){
           wString += "-";
           wPos++;
        } else if (wChar == '+'){
           wPos++;
        }
        
        for (var i = wPos; i < pString.length; i++){
            wChar = pString.charAt(i);
            if (wChar == '.' || (wChar >= '0' && wChar <= '9')) {
                wString += wChar;
            }
        }
        
        if (wString.length > 0) 
            wReturn = parseFloat(1 * wString);
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	pBoolValue
	*     @return	{boolean}
	*     @example	미결
	*/
    function ChangeStrB2I(pBoolValue)
    {
        return (pBoolValue ? "-1" : "0");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pattern
	*     @param	{string}	text
	*     @return	{number}
	*     @example	미결
	*/
    function checkLike(pattern, text) {
        var wMask = pattern || "";
		var original = text || "";
		
		if (wMask.indexOf("\\"))
    		wMask = wMask.replace(/\\/g,"<XXXxxx>");
		if (wMask.indexOf("+"))
    		wMask = wMask.replace(/\+/g,"\\+");
		if (wMask.indexOf("$"))
    		wMask = wMask.replace(/\$/g,"\\$");
		if (wMask.indexOf("^"))
    		wMask = wMask.replace(/\^/g,"\\^");
		if (wMask.indexOf("."))
    		wMask = wMask.replace(/\./g,"\\.");
		if (wMask.indexOf("("))
    		wMask = wMask.replace(/\(/g,"\\(");
		if (wMask.indexOf(")"))
    		wMask = wMask.replace(/\)/g,"\\)");
		if (wMask.indexOf("["))
    		wMask = wMask.replace(/\[/g,"\\[");
		if (wMask.indexOf("]"))
    		wMask = wMask.replace(/\]/g,"\\]");
		if (wMask.indexOf("*"))
    		wMask = wMask.replace(/\*/g,".*");
		if (wMask.indexOf("?"))
    		wMask = wMask.replace(/\?/g,".");
		if (wMask.indexOf("<XXXxxx>"))
    		wMask = wMask.replace(/<XXXxxx>/g,"\\\\");
		
	    var re=new RegExp(wMask, "g");
	    var arrMatched = original.match(re);
		
		return arrMatched != null && arrMatched[0].length == original.length;

    };
    
    /**
	*     @description	미결
	*     @param	{string}	pString
	*     @return	{string}
	*     @example	미결
	*/
    function pressSpace(pString)
    {
        var wReturn = "";
        var wPos = 0;
		var wChar0 = "";
		var wChar1 = "";

        for (i = 0; i < pString.length; i++){
            wChar1 = pString.charAt(i);
            if (wChar0 != ' ' || wChar1 != ' ') {
                wReturn += wChar1;
            }
            wChar0 = wChar1;
        }
        
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget1
	*     @param	{string}	pTarget2
	*     @return	{string}
	*     @example	미결
	*/
    function cutString(pSource, pTarget1, pTarget2)
    {
        var wString = "";
        var wCount = 0;
        var wPos1 = pSource.indexOf(pTarget1);
        var wPos2 = 0;
        var wHaveNull = false;
       
        while (wPos1 != -1){
            wPos2 = pSource.indexOf(pTarget2, ++wPos1);
            if (wPos2 == -1) break;
            wString += pSource.substring(wPos1, wPos2); 
            if (wPos1 == wPos2) {wString += "$NULL$"; wHaveNull = true;} 
            wString += "/DV/"; 
            
            wPos1 = pSource.indexOf(pTarget1, ++wPos2);
        }
        
        var wArrReturn = wString.split("/DV/"); 
        
        if (wHaveNull){
            for (var i = 0; i < wArrReturn.length; i++){
            	if (wArrReturn[i] == "$NULL$"){
            		wArrReturn[i] = "";
            	}
            }
        }

        return wArrReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pSource
	*     @param	{string}	pTarget1
	*     @param	{string}	pTarget2
	*     @return	{string}
	*     @example	미결
	*/
    function removeString(pSource, pTarget1, pTarget2)
    {
        var wReturn = "";
        var wCount = 0;
        var wPos0 = 0;
        var wPos1 = pSource.indexOf(pTarget1);
        var wPos2 = 0;
        var wLen1 = pTarget1.length;
        var wLen2 = pTarget2.length;
        
        while (wPos1 != -1){
            wPos2 = pSource.indexOf(pTarget2, wPos1 + wLen1);
            if (wPos2 == -1) break;
            wReturn += pSource.substring(wPos0, wPos1); 
            
            wPos0 = wPos2 + wLen2; 
            wPos1 = pSource.indexOf(pTarget1, wPos0);
        }
        if (wPos0 < pSource.length)
          wReturn += pSource.substring(wPos0); 
        
        return wReturn;
    };
    
    /* =======================================================================
                ????? : "?????;NULL??????"   ????? : "?????:???? ???;0 ???;NULL???"
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pForamt
	*     @return	{string}
	*     @example	미결
	*/
    function format(pTarget, pFormat, pRound)
    {
        // ???? ???? u? 
        if (pTarget.length == 0 || pFormat.length == 0) return "";

        // ????????
        var wTarget = "" + pTarget;
        var wReturn = wTarget;
        var wLength = (pFormat.length < wTarget.length) ? wTarget.length : pFormat.length;
        var wType = 0; 
    
        // 1. ???? pFormat?? ?????? ??????.
        if( pFormat.indexOf('@') >= 0 ){
            wType = 1;
        } else if( pFormat.indexOf('&') >= 0 ){
            wType = 1;
        } else if( pFormat.indexOf("YY") != -1 ||
                   pFormat.indexOf("MM") != -1 || 
                   pFormat.indexOf("DD") != -1 ||
                   pFormat.indexOf("Hh") != -1 ||
                   pFormat.indexOf("Nn") != -1 ||
                   pFormat.indexOf("Ss") != -1 ||
                   pFormat.indexOf("mm") != -1 ||
                   pFormat.indexOf("dd") != -1 ||
                   pFormat.indexOf("hh") != -1 ||
                   pFormat.indexOf("nn") != -1 ||
                   pFormat.indexOf("ss") != -1 ||
                   pFormat.indexOf("WK") != -1 ||
                   pFormat.indexOf("wk") != -1
        ){
            wType = 3;
        } else {
            wType = 2;
        } 
    
        var wArrString = pFormat.split(";");
        var wFormatCnt = wArrString.length;
        
        // 2. ????????? ??츦 o?????. 
        if (wType == 2){
            if (wTarget.length == 0){
                if (wFormatCnt >= 4)
                    wReturn = wArrString[3];
            } else {
                pFormat = wArrString[0];
                if (wTarget == "0"){
                    if (wFormatCnt >= 3)
                        pFormat = wArrString[0];
                } else if (wTarget.startsWith("-")){
                    if (wFormatCnt >= 2)
                        pFormat = wArrString[1];
                }
                
                wReturn = numberFormat(wTarget, pFormat, pRound);
            }
        // 3. ???? ????? ??츦 o?????. 
        } else if (wType == 1){
            if (wTarget.length == 0){
                if (wFormatCnt >= 1)  
                    wReturn = wArrString[1];
            } else {
                pFormat = wArrString[0];
                wReturn = stringFormat(wTarget, pFormat);
            }
    
        // 4. ????????? ??츦 o?????. 
        } else if (wType == 3){
        	pFormat = wArrString[0];
        	wReturn = dateFormat(wTarget, pFormat);
        }
    
        return wReturn;
    };

    /* =======================================================================
       ????? : ?? -> "0", "#", ".", "%", ",",     ????? ->"- + $ ( )"   
                "X" : X????? ??????? ???
                " "ABC" " : ???????? ??????? ???? 
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @return	{string}
	*     @example	미결
	*/
    function numberFormat(pTarget, pFormat, pRound)
    {
        var wReturn = "";
        var wTarget =  "" + pTarget;
        var wLeft = 0; var wRight = 0; var wTLeft = 0; var wTRight = 0;
        var w_bInline = false;
        var w_bNegative = false;
        
        if( pFormat.indexOf(".") >= 0 ){
        	var formatPointAfter = pFormat.substring(pFormat.indexOf(".") + 1);
 			var formatPointCount = formatPointAfter.length;
 			var value = 1 * pTarget;
 			
 			if( pRound == DISPAY_FORMAT_CEIL ){
 				wTarget = "" + (Math.ceil(value * Math.pow(10, formatPointCount)) / Math.pow(10, formatPointCount));
 			}
 			else if( pRound == DISPAY_FORMAT_FLOOR ){
 				wTarget = "" + (Math.floor(value * Math.pow(10, formatPointCount)) / Math.pow(10, formatPointCount));
 			}
 			else{ /* pRound == DISPAY_FORMAT_ROUND */
 				wTarget = "" + (Math.round(value * Math.pow(10, formatPointCount)) / Math.pow(10, formatPointCount));
 			}
 			
 			value = null;
 			formatpointAfter = null;
        }
		
		// - ????? o??
        if (wTarget.startsWith("-")) {
            wTarget = wTarget.substring(1);
            w_bNegative = true;
        }
        
        //pFormat?? '%'?? ?????? ??? 100?? ???? ???´?. 
        if (pFormat.indexOf('%') >= 0) 
            wTarget = fncMultiply(wTarget, "100");
            
        // ??????? ???? ??????? ????? ??? ??? ????? ??? ??? ?и? 
        var wPos = pFormat.indexOf('.');
        if (wPos == -1){
            wLeft  = pFormat;
            wRight = "";
        } else {
            wLeft  = pFormat.substring(0, wPos);
            wRight = pFormat.substring(wPos + 1);
        }
        
        wPos = wTarget.indexOf('.');
        if (wPos == -1){
            wTLeft  = wTarget;
            wTRight = "";
        } else {
            wTLeft  = wTarget.substring(0, wPos);
            wTRight = wTarget.substring(wPos + 1);
        }
        
        // ????? ????? ??????? ??ø? 
        // ??????????? ??ø? ???
        var wCount2 = countOfChar(wRight, '0') + countOfChar(wRight, '#');
        //2016-07-07(수정) : 반올림 로직 제외
//        if (wCount2 > 1){
//            wTRight = wTRight + "0000000000000";
//            var wChar = wTRight.charAt(wCount2 - 1);
//            var wCharEnd = wTRight.charAt(wCount2);
//            wTRight = wTRight.substring(0, wCount2 - 1);
//            
//            if (wCharEnd >= '5'){
//                wTRight = wTRight + (++wChar);      
//            } else {
//                wTRight = wTRight + wChar;      
//            } 
//        }
    
        // Format??????? ??????? ????? ???´?. 
        var wCount1 = countOfChar(wLeft, '0') + countOfChar(wLeft, '#');
        var wLength = wTLeft.length;
        if (wLength < wCount1) {
            wTLeft = repeatString('0', wCount1 - wLength) + wTLeft; 
            wLength = wCount1;
        } else if (wLength > wCount1) {
            wPos = wLeft.indexOf('0');
            var wPosSharp = wLeft.indexOf('#');
            if (wPos == -1) {
               wPos = wPosSharp;
            } else if (wPosSharp > -1 && wPos > wPosSharp) {
               wPos = wPosSharp;
            }
            wLeft = wLeft.substring(0, wPos) 
                  + repeatString('#', wLength - wCount1) 
                  + wLeft.substring(wPos); 
        }
        wCount1 = wLeft.length;
        
        //??????? ??????? ???? 
        var p1 = 0; var t1 = 0; // p1:??????????? ??? t1: ??????????? ???
        var wPChar = ""; var wTChar = "";
        while (p1 < wCount1 || t1 < wLength){
            if (p1 < wCount1) wPChar = wLeft.charAt(p1);
            if (t1 < wLength) wTChar = wTLeft.charAt(t1);
            if (p1 >= wCount1){
                wReturn +=  wTChar;
                t1++;
    
            } else if (wPChar == '0'){
                if (wTChar == '0'){
                    wReturn +=  '0';
                } else {
                    wReturn +=  wTChar;
                }
                if (wTChar != '0') w_bInline = true;
                p1++; t1++;
    
            } else if (wPChar == '#') {
                if (wTChar != '0') {
                    wReturn +=  wTChar;
                } else if (w_bInline){
                    wReturn +=  wTChar;
                }
                if (wTChar != '0') w_bInline = true;
                p1++; t1++;
    
            } else if (wPChar == ',') {
                if (w_bInline)
                    wReturn +=  wPChar;
                p1++;
    
            } else {
                wReturn +=  wPChar;
                p1++;
            }
            
        }
    
        //??????? ??????? ???? 
        if (wCount2 > 0) wReturn += ".";
        
        wCount2 = wRight.length;
        wLength = wTRight.length;
        var p2 = 0; var t2 = 0; // p1:??????????? ??? t1: ??????????? ???
    
        while (p2 < wCount2){
            if (p2 < wCount2) wPChar = wRight.charAt(p2);
            if (t2 < wLength) wTChar = wTRight.charAt(t2);
            if (wPChar == '0'){
                if (t2 >= wLength  || wTChar == '0'){
                    wReturn +=  '0';
                } else { 
                   wReturn +=  wTChar;
                }
                p2++; 
                if (t2 < wLength) t2++;
                
            } else if (wPChar == '#') {
            	//if (t2 < wLength && wTChar != '0'){	// ex) 1.016 값이 1.16으로 나옴
            	if (t2 < wLength && (wTChar != '0' || (wTChar == '0' && countOfChar(wTRight.substring(t2+1),'0') != (wLength-(t2+1))))){
                    wReturn +=  wTChar;
                }
                p2++;
                if (t2 < wLength) t2++;
            } else {
                wReturn +=  wPChar;
                p2++;
            }
        }

        if (w_bNegative){
            wPos = wLeft.indexOf('0');
            var wPosSharp = wLeft.indexOf('#');
            if (wPos == -1) {
               wPos = wPosSharp;
            } else if (wPosSharp > -1 && wPos > wPosSharp) {
               wPos = wPosSharp;
            }
            wReturn = wReturn.substring(0, wPos) 
                  + "-" 
                  + wReturn.substring(wPos); 
            
        }
        if (wReturn.endsWith(".")) {
        	wReturn = wReturn.substring(0, wReturn.length - 1);
        }
        
        return wReturn;
    };


    /* =======================================================================
       ????? : "@" : ????? ??? ??? "&" :????? ??? ???? 
          "<" :?빮?? ">" : ????? "!":????????
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @return	{string}
	*     @example	미결
	*/
    function stringFormat(pTarget, pFormat)
    {
        var wReturn = "";
        var wTarget = "" + pTarget;
        var w_b2Upper = false; var w_b2Lower = false;
		var w_b2LAlign = false; var w_bInline = false;
    
        //?? ???? ??????? ???? ????  
        if (pFormat.startsWith("!")) {
            w_b2LAlign = true;
            pFormat = pFormat.substring(1);
        }
    
        if (pFormat.startsWith("<")) {
            w_b2Upper = true;
            pFormat = pFormat.substring(1);
        } else if (pFormat.startsWith(">")) {
            w_b2Lower = true;
            pFormat = pFormat.substring(1);
        }
    
        // ?ε???? ! ?? ?? ????츦 ??? ???? u? 
        if (pFormat.startsWith("!")) {
            w_b2LAlign = true;
            pFormat = pFormat.substring(1);
        }
    
        //Format??????? ??????? ????? ???´?. 
        var wLength = wTarget.bytes();
        var wCount = countOfChar(pFormat, '@') + countOfChar(pFormat, '&');
        if (wCount > wLength){
            if (w_b2LAlign) {
                wTarget = wTarget + repeatString(' ', wCount - wLength);
            } else {
                wTarget = repeatString(' ', wCount - wLength) + wTarget;
            }
        } else { 
            if (w_b2LAlign) { 
			    wTarget = leftB(wTarget, wCount);
            } else {
                wTarget = rightB(wTarget, wCount);
            }
        }
		
		
		
        //??????? ???? 
        var str = wTarget;
        var wCount = 0;
		var wPos = 0; var wFormatPos = 0;
		while (wPos < wTarget.length){
		    var wChar = wTarget.charAt(wPos);
			var wCharCode = wTarget.charCodeAt(wPos);
			
			if (pFormat.charAt(wFormatPos) == "@"){
			    wReturn += wChar;
				wPos++; wFormatPos++;
				if (wCharCode > 128) wFormatPos++;
				
			} else if (pFormat.charAt(wFormatPos) == "&"){
			    if (wChar != " ") wReturn += wChar;
				wPos++; wFormatPos++;
				if (wCharCode > 128) wFormatPos++;
				
			} else {
			    wReturn += pFormat.charAt(wFormatPos);
				wFormatPos++;
			}
		}
		
		
        if (w_b2Upper) {
            wReturn = wReturn.toUpperCase();
        } else if (w_b2Lower) {
            wReturn = wReturn.toLowerCase();
        }
    
        return wReturn;
    };


    /* =======================================================================
       ????? : "YYYY", "YY", "MM" , "DD" , "Hh", "Nn", "Ss", "mm" , "dd" , "hh", "nn", "ss", "WK", "Wk"
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @return	{string}
	*     @example	미결
	*/
    function dateFormat(pTarget, pFormat)
    {
        var wReturn = pFormat;
        // ??u????? ????? ?????? ??? ?ð???? ??????? ?????? 
//        var wTarget = replace2DateTimeType("" + pTarget);
        var wTarget = pTarget.replace(/\-/g, "");;
    
        //????? ???°? ???????? ?????? ????
        if (wReturn.indexOf("YYYY") >= 0)
            wReturn = wReturn.replaceWord("YYYY", wTarget.substring(0, 4));
        if (wReturn.indexOf("YY") >= 0)
            wReturn = wReturn.replaceWord("YY", wTarget.substring(2, 4));
        if (wReturn.indexOf("MM") >= 0)
            wReturn = wReturn.replaceWord("MM", wTarget.substring(4, 6));
        if (wReturn.indexOf("mm") >= 0)
            wReturn = wReturn.replaceWord("mm", numberFormat(wTarget.substring(4, 6), "#0"));
        if (wReturn.indexOf("DD") >= 0)
            wReturn = wReturn.replaceWord("DD", wTarget.substring(6, 8));
        if (wReturn.indexOf("dd") >= 0)
            wReturn = wReturn.replaceWord("dd", numberFormat(wTarget.substring(6, 8), "#0"));
        if (wReturn.indexOf("Hh") >= 0)
            wReturn = wReturn.replaceWord("Hh", wTarget.substring(8, 10));
        if (wReturn.indexOf("hh") >= 0)
            wReturn = wReturn.replaceWord("hh", numberFormat(wTarget.substring(8, 10), "#0"));
        if (wReturn.indexOf("Nn") >= 0)
            wReturn = wReturn.replaceWord("Nn", wTarget.substring(10, 12));
        if (wReturn.indexOf("nn") >= 0)
            wReturn = wReturn.replaceWord("nn", numberFormat(wTarget.substring(10, 12), "#0"));
        if (wReturn.indexOf("Ss") >= 0)
            wReturn = wReturn.replaceWord("Ss", wTarget.substring(12, 14));
        if (wReturn.indexOf("ss") >= 0)
            wReturn = wReturn.replaceWord("ss", numberFormat(wTarget.substring(12, 14), "#0"));
        if (wReturn.indexOf("WK") >= 0)
        	wReturn = wReturn.replaceWord("WK", getWeekCharacter(wTarget, "L"));
        if (wReturn.indexOf("wk") >= 0)
        	wReturn = wReturn.replaceWord("wk", getWeekCharacter(wTarget, "S"));
    
        return wReturn;
    };
	    
    /* =======================================================================
       ?????? ??? ????? ???? 
           "YYYY-MM-DD Hh:Nn:Ss"  "YYYY-MM-DD Hh:Nn"  "YYYY-MM-DD AM/PM Hh:Nn:Ss" 
           "YYYYMMDD Hh:Nn:Ss"  "YYYYMMDD Hh:Nn"  "YYYYMMDD AM/PM Hh:Nn:Ss" 
           "YYYY-MM-DD AM/PM Hh:Nn"   "YYYY-MM-DD" "YYYYMMDD", "YYMMDD" 
           "Hh:Nn:Ss" "Hh:Nn" "AM/PM Hh:Nn:Ss" "AM/PM Hh:Nn" 
      ========================================================================*/
    /**
	*     @description	미결
	*     @param	{object}	pDate
	*     @return	{string}
	*     @example	미결
	*/
    function replace2DateTimeType(pDate)
    {
        var wReturn = "";
        var wTemp;

        //????
        var wCount = pDate.length;
        wCount = (wCount < 21 ? 21 : wCount);
    
        //???? ??ø? ??????? ??????? 
		var now  = new Date(); // ????ð? ????????
		var year = now.getFullYear(); // ?? ????????
		var month= now.getMonth() + 1; // ?? ???????? (+1)
		var date = now.getDate(); // ??￥ ????????
		
        var wDate = "" + year 
		          + (month < 10 ? "0" : "") + month
			      + (date  < 10 ? "0" : "") + date;
		
        var wTarget = pressSpace(pDate).trim().toUpperCase();
    
        var wReturnLength = wTarget.length;
    
        if (wReturnLength == 22){     // YYYY-MM-DD AM/PM Hh:Nn:Ss
            if (!wTarget.substring(11, 13) == "AM"){
                wTemp = wTarget.substring(14, 16);
            } else {
                wTemp = (parseInt(wTemp,10) + 12) + "";
            }
            
            wReturn = wTarget.substring(0, 11)
                    +  wTemp
                    +  wTarget.substring(16, 22);
        
        } else if (wReturnLength == 20){      // YYYYMMDD AM/PM Hh:Nn:Ss
            if (wTarget.substring(9, 11) == "AM"){
                wTemp = wTarget.substring(12, 14);
            } else {
                wTemp = (parseInt(wTemp,10) + 12) + "";
            }
            
            wReturn = wTarget.substring(0, 4) + "-"
                    + wTarget.substring(4, 6) + "-"
                    + wTarget.substring(6, 9)
                    + wTemp;
                    + wTarget.substring(14, 20);
        
        } else if (wReturnLength == 19){      // YYYY-MM-DD AM/PM Hh:Nn
            if (wTarget.substring(11,13) != "AM" && 
                wTarget.substring(11,13) != "PM") {
                wReturn = wTarget;
            } else {
                if (wTarget.substring(11, 13) == "AM"){
                    wTemp = wTarget.substring(14, 16);
                } else {
                    wTemp = (parseInt(wTemp,10) + 12) + "";
                }
                wReturn = wTarget.substring(0, 11) + wTemp
                        + wTarget.substring(16, 19) + ":00";
            }
        
        } else if (wReturnLength == 17){      // YYYYMMDD Hh:Nn:Ss
            wReturn = wTarget.substring(0, 4) + "-"
                    +  wTarget.substring(4, 6) + "-"
                    +  wTarget.substring(6, 9)
                    +  wTarget.substring(9, 17);
        
        } else if (wReturnLength == 16){      // YYYY-MM-DD Hh:Nn
            wReturn = wTarget + ":00";
        
        } else if (wReturnLength == 14){      // YYYYMMDD Hh:Nn
            wReturn = wTarget.substring(0, 4) + "-"
                    +  wTarget.substring(4, 6) + "-"
                    +  wTarget.substring(6, 9)
                    +  wTarget.substring(9, 14)
                    +  ":00";
        
        } else if (wReturnLength == 10){      // YYYY-MM-DD
            wReturn = wTarget + " 00:00:00";
        
        } else if (wReturnLength == 8){       
            if (wTarget.indexOf('-') == -1 && wTarget.indexOf(':') == -1){        // YYYYMMDD
                wReturn = wTarget.substring(0, 4) + "-"
                        + wTarget.substring(4, 6) + "-"
                        + wTarget.substring(6, 8) + " 00:00:00";
			     
            } else if (wTarget.indexOf(":") > -1 &&  
			           wTarget.indexOf("AM") == -1 && wTarget.indexOf("PM") == -1){  // Hh:Nn:Ss
                wReturn = wDate + " " + wTarget;
                
            } else {        // AM/PM Hh:Nn
                if (wTarget.startsWith("AM")){
                    wTemp = wTarget.substring(3, 5);
                } else {
                    wTemp = (parseInt(wTemp,10) + 12) + "";
                }
                wReturn = wDate +  " " + wTemp + ":" + wTarget.substring(6, 8) + ":00";
            }
    
        } else if (wReturnLength == 6){       // YYMMDD
            wReturn = (wTarget.substring(0,2) >= "50" ? "20" : "19")
                    +  wTarget.substring(0, 2)
                    +  "-"
                    +  wTarget.substring(2, 4)
                    +  "-"
                    +  wTarget.substring(4, 6)
                    + " 00:00:00";
    
        } else if (wReturnLength == 5){       // Hh:Nn
            wReturn =  wDate + " " + wTarget + ":00";
    
        } else if (wReturnLength == 11){      // AM/PM Hh:Nn:Ss
            if (!wTarget.startsWith("AM")){
                wTemp = wTarget.substring(3, 5);
            } else {
                wTemp = (parseInt(wTemp,10) + 12) + "";
            }
            
            wReturn =  wDate + " " + wTemp + ":" + wTarget.substring(6, 11);
        } 
    
        return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	pTarget
	*     @param	{string}	pFormat
	*     @param	{number}	pPoint
	*     @return	{boolean}
	*     @example	미결
	*/
    function findNext(pStatement, pFind, pPoint)
    {
    	if (pStatement.length <= pPoint || pFind.length == 0) return -1;
    	
    	var wReturn = -1;
    	var wLength = pFind.length;
    
    	var p = pPoint;
    	while (p < pStatement.length){
    		if (pStatement.charAt(p) == ' ') {
    			p++;
    			continue;
    		} else if (pStatement.substring(p, p + wLength) == pFind){
    			wReturn = p;	
    		}
    		break;
    	}
    
    	return wReturn;
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{string}
	*     @example	미결
	*/
    function yearOf(dateStr){
    	return dateStr.substring(0, 4);
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function monthOf(dateStr){
        wTemp = dateStr.replace(/\-/g, "").substring(4, 6);
        return numberFormat(wTemp, "#0");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function dayOf(dateStr){
        var wTemp = dateStr.replace(/\-/g, "");
        wTemp = wTemp.substring(wTemp.length - 2);
        return numberFormat(wTemp, "#0");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function beforeYearOf(dateStr){
        var wYM = dateStr.replace(/\-/g, "");
        var wYY = parseInt(wYM.substring(0, 4), 10);
        var wMM = parseInt(wYM.substring(4, 6), 10);

        if (wMM == 1)  wYY--;

        return numberFormat(wYY, "0000");
    };
    
    /**
	*     @description	미결
	*     @param	{string}	dateStr
	*     @return	{object}
	*     @example	미결
	*/
    function beforeMonthOf(dateStr){
        var wYM = dateStr.replace(/\-/g, "");
        var wYY = parseInt(wYM.substring(0, 4), 10);
        var wMM = parseInt(wYM.substring(4, 6), 10);
        
        wMM--;

        if (wMM == 0) wMM = 12;

        return numberFormat(wMM, "0000");
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStart
	*     @param	{number}	pEnd
	*     @return	{number}
	*     @example	미결
	*/
    function dayDiff(pStart, pEnd)
    {
    	var wTemp = pStart.replace(/\-/g, "");
        var wYear = parseInt(wTemp.substring(0,4), 10);
        var wMonth = parseInt(wTemp.substring(4,6), 10) - 1;
        var wDate = parseInt(wTemp.substring(6,8), 10);
        var d1 = new Date(wYear, wMonth, wDate);

        wTemp = pEnd.replace(/\-/g, "");
        wYear = parseInt(wTemp.substring(0,4), 10);
        wMonth = parseInt(wTemp.substring(4,6), 10) - 1;
        wDate = parseInt(wTemp.substring(6,8), 10);
        var d2 = new Date(wYear, wMonth, wDate);

        
        return Math.round((d2.getTime() - d1.getTime()) / (24*60*60*1000));
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStart
	*     @param	{number}	pEnd
	*     @return	{number}
	*     @example	미결
	*/
    function dateDiff(pStart, pEnd){
        return dayDiff(pStart, pEnd);
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pStart
	*     @param	{number}	pEnd
	*     @return	{number}
	*     @example	미결
	*/
    function timeDiff(pStart, pEnd)
    {
        // "00000000 00:00:00" 형태로 변환
    	// var wStart = replace2DateTimeType("" + pStart);
        // var wEnd = replace2DateTimeType("" + pEnd);
         var wStart = pStart.replace(/\-/g, "");;
         var wEnd = pEnd.replace(/\-/g, "");;
    	
    	var wYear = parseInt(wStart.substring(0,4), 10);
        var wMonth = parseInt(wStart.substring(4,6), 10) - 1;
        var wDate = parseInt(wStart.substring(6,8), 10);
        var wHour = parseInt(wStart.substring(8,10), 10);
        var wMinute = parseInt(wStart.substring(10,12), 10);
        var wsecond = parseInt(wStart.substring(12,14), 10);
        var d1 = new Date(wYear, wMonth, wDate, wHour, wMinute, wsecond);

        wYear = parseInt(wEnd .substring(0,4), 10);
        wMonth = parseInt(wEnd .substring(4,6), 10) - 1;
        wDate = parseInt(wEnd .substring(6,8), 10);
        wHour = parseInt(wEnd .substring(8,10), 10);
        wMinute = parseInt(wEnd .substring(10,12), 10);
        wsecond = parseInt(wEnd .substring(12,14), 10);
        var d2 = new Date(wYear, wMonth, wDate, wHour, wMinute, wsecond);
        
        return Math.round((d2.getTime()  - d1.getTime()) / 1000);
    };    
    
    /* see common.js */
    /*
    function dayAdd(pStart, pAddCount){}
    */
    
    /**
	*     @description	미결
	*     @param	{number}	pYear
	*     @param	{number}	pMonth
	*     @return	{number}
	*     @example	미결
	*/
    function daysOf(pYear, pMonth){
        return (new Date(pYear,pMonth,0)).getDate();                             
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pDay
	*     @return	{number}
	*     @example	미결
	*/
    function weekDayOf(pDay){
    	var wTemp = pDay.replace(/\-/g, "");
    	
        var wYear = parseInt(wTemp.substring(0,4), 10);
        var wMonth = parseInt(wTemp.substring(4,6), 10) - 1;
        var wDate = parseInt(wTemp.substring(6,8), 10);
        
        return (new Date(wYear,wMonth,wDate)).getDay() + 1;                             
    };
    
    /**
	*     @description	미결
	*     @param	{number}	pDay
	*     @return	{number}
	*     @example	미결
	*/
    function weekDay(pDay){
        return weekDayOf(pDay);                             
    };
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function sort(){
    	var args = Array.prototype.slice.call(arguments);
        var wHaveString = false;
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? sortStrings(args).join(",") : sortValues(args).join(","));
    };
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function sortDesc(){
    	var args = Array.prototype.slice.call(arguments);
        var wHaveString = false;
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? reverseStrings(args).join(",") : reverseValues(args).join(","));
    } ;
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function topNOf(){
    	var args = Array.prototype.slice.call(arguments);
    	var n = args[0];
        var wHaveString = false;
        args.splice(0, 1); // 앞하나 줄임
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? topNStrings(n, args).join(",") : topNValues(n, args).join(","));
    	
    } ;
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function lowNOf(){
    	var args = Array.prototype.slice.call(arguments);
    	var n = args[0];
        var wHaveString = false;
        args.splice(0, 1); // 앞하나 줄임
        for (var i=0; i < args.length; i++)
        	wHaveString = wHaveString || (typeof(args[i])=="string");

    	return (wHaveString ? lowNStrings(n, args).join(",") : lowNValues(n, args).join(","));
    };
    
    /**
	*     @description	미결
	*     @param	{number}	a
	*     @param	{number}	b
	*     @return	{number}
	*     @example	미결
	*/
    function sortIt(a,b){
    	return(a-b);
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function sortValues(inputvalues){
    	inputvalues.sort(sortIt);
    	
    	return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function sortStrings(inputvalues){
    	inputvalues.sort();
        return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function reverseValues(inputvalues){
		inputvalues.sort(sortIt);
		inputvalues.reverse();
        return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function reverseStrings(inputvalues){
		inputvalues.sort();
		inputvalues.reverse();
        return inputvalues;
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function topNValues(n, inputvalues){
    	inputvalues.sort(sortIt); // 소트
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function topNStrings(n, inputvalues){
    	inputvalues.sort();
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function lowNValues(n, inputvalues){
    	inputvalues.sort(sortIt); // 소트
    	inputvalues.reverse();    // 도치
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
    /**
	*     @description	미결
	*     @param	{object}	n
	*     @param	{object}	inputvalues
	*     @return	{object}
	*     @example	미결
	*/
    function lowNStrings(n, inputvalues){
    	inputvalues.sort();
    	inputvalues.reverse();    // 도치
        return inputvalues.splice(0,n); // n개를 잘라냄
    };
    
	/**
	*     @description	미결]
	*     @return	{string}
	*     @example	미결
	*/
	function sumOf(){
    	var wArr = null;
    	var wVal = null;
    	var wSum = "0";
    	var wArrSize = 0;
    	var i = 0;
    	
    	if( typeof(arguments[0]) == "object" && arguments[0].length > 0 ){
    		wArr = arguments[0];
    		wArrSize = wArr.length;
    	}
    	else{
    		wArr = arguments;
    		wArrSize = arguments.length;
    	}
    	
    	for(i = 0; i < wArrSize; i++){
    		wVal = wArr[i];
    		wSum = fncPlus(wSum, ((wVal == null || typeof wVal == "undefined") ? "0" : "" + wVal));
    	}
    	
    	if( isNaN(wSum) ) wSum = NaN;
    	
    	//메모리 해제
    	wVal = null; wArr = null;
    	
    	return wSum;
    };
    
    /**
	*     @description	미결
	*     @return	{string}
	*     @example	미결
	*/
    function avgOf(){
 	   var wReturn = wSum = "0";

       if(typeof(arguments[0]) == "object" && arguments[0].length){
	       var wArr = arguments[0];
	       for (var i = 0; i < wArr.length; i++)
	          wSum = fncPlus(wSum, wArr[i] + "");
			  
	       wReturn = fncDivide(wSum, "" + wArr.length, 8, false);
		   
	   } else { 
	       for (var i = 0; i < arguments.length; i++)
	          wSum = fncPlus(wSum, arguments[i] + "");
			  
	       wReturn = fncDivide(wSum, "" + arguments.length, 8, false);
	   }
       
       if(isNaN(wReturn)) wReturn = NaN;
	   
       return wReturn;
    };
    
    /**
	*     @description	미결
	*     @return	{object}
	*     @example	미결
	*/
    function maxOf()
    {
       var wReturn;
       if(typeof(arguments[0]) == "object" && arguments[0].length){
    	   var wArr =  arguments[0];
    	   wReturn =  wArr[0];
           for (var i = 1; i <  wArr.length; i++)
              if (wArr[i] > wReturn) wReturn = wArr[i] ;
		   
	   } else { 
    	   wReturn =  arguments[0];
           for (var i = 1; i <  arguments.length; i++)
              if (arguments[i] > wReturn) wReturn = arguments[i] ;
	   }

       return wReturn;
    };
    
    /**
	*     @description	미결
	*     @return	{string}
	*     @example	미결
	*/
    function minOf()
    {
       var wReturn;
       if(typeof(arguments[0]) == "object" && arguments[0].length){
    	   var wArr =  arguments[0];
    	   wReturn =  wArr[0];
           for (var i = 1; i <  wArr.length; i++)
              if (wArr[i] < wReturn) wReturn = wArr[i] ;
		   
	   } else { 
    	   wReturn =  arguments[0];
           for (var i = 1; i <  arguments.length; i++)
              if (arguments[i] < wReturn) wReturn = arguments[i] ;
	   }
       return wReturn;
    };
    
    //===== 
    /**
	*     @description	미결
	*     @param	{string}	formula
	*     @return	{string}
	*     @example	미결
	*/
    function fillInfoToFormula(formula){
    	
    	formula = formula.replaceWord("[" + getText("message_usr_personalid", "사용자.사번")   + "]",       "" + USER_PERSONALID);
    	formula = formula.replaceWord("[" + getText("message_usr_personname", "사용자.성명")   + "]",     "\"" + USER_PERSONALNAME + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_cogu",       "사용자.회사")   + "]",       "" + USER_COGU);
    	formula = formula.replaceWord("[" + getText("message_usr_bon",        "사용자.사업장") + "]",       "" + USER_BON);
    	formula = formula.replaceWord("[" + getText("message_usr_part",       "사용자.부서")   + "]",       "" + USER_PART);
    	formula = formula.replaceWord("[" + getText("message_usr_organ",      "사용자.조직")   + "]",       "" + USER_ORGANIZATION);
    	formula = formula.replaceWord("[" + getText("message_usr_date",       "사용자.일자")   + "]",     "\"" + USER_DATE + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_month",      "사용자.년월")   + "]",       "" + USER_MONTH);
    	formula = formula.replaceWord("[" + getText("message_usr_year",       "사용자.년도")   + "]",       "" + USER_YEAR);
    	formula = formula.replaceWord("[" + getText("message_usr_seq",        "사용자.순번")   + "]",       "" + USER_SEQ);
    	formula = formula.replaceWord("[" + getText("message_usr_time",       "사용자.시간")   + "]",     "\"" + USER_TIME + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_userId",     "사용자.아이디") + "]",     "\"" + USER_USERID + "\"");
    	formula = formula.replaceWord("[" + getText("message_usr_ipAddr",     "사용자.아이피주소") + "]",   "" + USER_PERSONALID);
    	
    	
    	
    	for (var id in controls) {
    		if (typeof(controls[id])=="function") continue;
    		
    		var wControl = controls[id];
    		var controlString = getText("message_str_control","콘트롤");
    		var controlName = wControl.controlName;
    		
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		if (control.controlId.toLowerCase().indexOf("sheet_") >= 0){
        			for (var colNum = 1; colNum <= wControl.maxCols; colNum++){
        				cellType = wControl.columns[colNum].defaultCellType; 
                        if (cellType == CELLTYPE_DATE){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "\"" + wControl.getValue(colNum) + "\"");
                        } else if (cellType == CELLTYPE_EDIT){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "\"" + wControl.getValue(colNum) + "\"");
                        } else if (cellType == CELLTYPE_NUMBER){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_INTEGER){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_BUTTON){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_PICTURE){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "\"" + wControl.getValue(colNum) + "\"");
                        } else if (cellType == CELLTYPE_COMBOBOX){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } else if (cellType == CELLTYPE_CHECKBOX){
                            formula = formula.replaceWord("[" + controlString + "." + controlName + "." + colNum + "]",   "" + wControl.getValue(colNum));
                        } 
        			}
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		if (wControl instanceof CheckBox){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof ComboBox || wControl instanceof ListBox || wControl instanceof ListBoxW){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof Label){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof TextBox){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    		try {  // 클라스가 옶는 경우에 대비해서 오류 스킵
        		 if (wControl instanceof OptionButton){
                	formula = formula.replaceWord("[" + controlString + "." + controlName + "]",   "" + wControl.value);
        		} 
    		} catch(err){ }
    	}
    	for (var id in parameters) {
    		if (typeof(parameters[id])=="function") continue;
    		
    		if (typeof(parameters[id])=="number"){
            	formula = formula.replaceWord("[" + getText("message_str_parameter","파라메터") + "." + id + "]",   "" + parameters[id]);
    		} else {
            	formula = formula.replaceWord("[" + getText("message_str_parameter","파라메터") + "." + id + "]",   "\"" + parameters[id] + "\"");
    		}
    		
    	}
    	for (var id in objects) {
    		if (typeof(objects[id])=="function") continue;
    		
    		var wObject = objects[id];
    		
			for (var ndx = 1; ndx <= wObject.propertyCount; ndx++){
				var propertyId = wObject.propertyInfos[ndx].id;
				var propertyName = wObject.propertyInfos[ndx].name;
				
                if (wObject.propertyInfos[ndx].isNumericType){
                    formula = formula.replaceWord("[" + wObject.name + "." + propertyName + "]", "" + wObject.getValue(propertyId));          // 2017.08.18 지운학
                } else {
                    formula = formula.replaceWord("[" + wObject.name + "." + propertyName + "]", "\"" + wObject.getValue(propertyId) + "\""); // 2017.08.18 지운학
                } 
			}
    	}
    	return formula;
    	
    }
    /**
	*     @description	미결
	*     @param	{string}	formula
	*     @return	{string}
	*     @example	미결
	*/
    function FORMULAA(formula){
		return formulaA(formula);
    }
    /**
	*     @description	미결
	*     @param	{string}	formula
	*     @return	{string}
	*     @example	미결
	*/
    function formulaA(formula){
		return (new EXOCalculator()).CalcuratedResult(fillInfoToFormula(formula));
    };var inProcess = false;
var recordsets = [];
var batchWorks = [];

var PARAMTYPE_INPUT  = 1;
var PARAMTYPE_OUTPUT = 2;

/**
 * @description	미결
 * @param		{string}	pKey
 * @return  	{String}
 * @example		미결
 */
function getRecordsetByKey(pKey){
    var wFound = false;
    for (var wKey in recordsets){
    	if (this.recordsets[wKey] instanceof Function) continue;
        if (wKey == pKey){
            wFound = true;
            break;
        }
    }
    var wRecordset = null;
    
    if (wFound){
        wRecordset = recordsets[pKey];
    } else {
        wRecordset = new Recordset(pKey);
    }
    return wRecordset;
};

/**
 * @description	미결
 * @param		{Number}	sqlnum
 * @return  	{String}
 * @example		미결
 */
function getRecordsetBySqlNum(sqlnum){
    var wRecordset = null;
    for (var wKey in recordsets){
    	if (this.recordsets[wKey] instanceof Function) continue;
        if (recordsets[wKey].sqlnum == sqlnum){
        	wRecordset = recordsets[wKey];
            break;
        }
    }
    return wRecordset;
};
/**
 * @class	DataAction
 * @constructor
 */

function Recordset(id) {
	this.id = id;

	this.sqlnum = 0;
	this.sqlBuff = "";
	this.connectionID = "";
	this.encoded = "false";
	this.permitNullParam = false;
	this.parameters = [];

	this.commandType = "Recordset";
	this.clearData = true;
	this.updateRow = false;
	this.dniMode = true;
	this.useReset = true;
	this.needSync = false;
	this.errInfo = "";
	this.rowCount = 0;
	this.currentRow = -1;
	this.BOF = true;
	this.EOF = true;

	this.totalRowCount = 0;
	this.pageSize = 0;
	this.pageNum = 0;
	this.smode = "N";
	this.smore = "N";

	this.fields = [];
	this.recordNum = 0;
	this.recordNums = [];
	
	this.mappingRule = null;
	this._oldMappingRule = null;
	this._sheetDatas = null;
	this._jsonData = null;
	
	this._mapData = null;
	this._targetResetObjects = null;
	
	this.dataSet = new WsDataSet();

	this.casheMode = false;
	this.casheKey = "";

	recordsets[id] = this;

	this.AUIrecordList = null; // AUI 일때

	this.hasReceiveEvent = (typeof self[this.id + "_OnReceive"] == "function");
	if( this.hasReceiveEvent ){
		this.fncReceiveEvent = new Function("return function(){" + this.id + "_OnReceive();}")();
	}

	return this;
};

/**
 * @description	미결
 * @param	{string}	fieldName
 * @param	{string}	dataValue
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.setParameter = function(fieldName, dataValue){
    // functionname : [Recordset.setParameter]
	
    this.parameters[fieldName] = new Parameter(fieldName, dataValue);
    
    return;
};

/**
 * @description	미결
 * @param	{string}	fieldInfo
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.setFields = function(fieldInfo){
    // functionname : [Recordset.setFields]
	
	var wFieldNum = 0;
	var wReturn = true;
	var field = null;
	
	if( this.commandType == "Recordset" ){
		if (fieldInfo.trim().length == 0) return false;
		
		var fields = null;
		var fieldName = null;
		var fieldType = null;
		
		fields = fieldInfo.split(";");
		
		for(wFieldNum = 0; wFieldNum < fields.length; wFieldNum++){
			if( fields[wFieldNum].length == 0 ){
				wReturn = false;
				break;
			}
			
			field = fields[wFieldNum].split(":");
			fieldName = field[0];
			fieldType = (field[1] == "") ? 0 : parseInt(field[1]);
			
			this.fields[wFieldNum] = new Field(this, fieldName, fieldType);
			
			fieldType = null; fieldName = null; field = null;
		}
		
		fields = null;
	}
	else if( this.commandType == "Dataset" ){
		var wResult = null;
		
		for(wFieldNum = 0; wFieldNum < fieldInfo.length; wFieldNum++){
			field = fieldInfo[wFieldNum];
			
			if( typeof field != "object" || !("field" in field) || !("dataType" in field) ){
				wReturn = false;
				break;
			}
			
			wResult = this.dataSet.addField( fieldInfo );
			
			if( wResult == null || !wResult.result ){
				wReturn = false;
				break;
			}
			
			wResult = null; field = null;
		}
		
		wResult = null; field = null;
	}
    
    return wReturn;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.open = function() {
	// functionname : [Recordset.open]

	// 데이터를 리턴받는 경우 레코드셋을 미리 만들어 두고 이 루틴을 호출할 것
	var recordsetId = this.id;
	var ndx = 0;
	
	this.casheKey = "";
	
	for(var wKey in this.parameters){
		if( this.parameters[wKey] instanceof Function ) continue;
		this.casheKey += (ndx++ > 0 ? ":" : "");
		this.casheKey += this.parameters[wKey].value();
	}
	
//	if( this.id.length > 9 && this.id.substring(0, 9) == "fillList_" ){
//		if( dataCashes[this.sqlnum + ":" + this.casheKey] != undefined ){
//			this.setCashedData();
//			return;
//		}
//	}
	
	//가져오기시 조회한 데이터의 레코드 업데이트 구분을 설정
	if( this._targetResetObjects != null && typeof this._targetResetObjects != "undefined" ){
		var targetCount = this._targetResetObjects.length;
		if( targetCount > 0 ){
			var targetObject = null;
			var oldDniMode = null;
			
			for(ndx = 0; ndx < targetCount; ndx++, targetObject = null){
				targetObject = getObjectById(this._targetResetObjects[0]);
				
				if( targetObject == null ){
					continue;
				}
				if( oldDniMode != null && targetObject.dniMode != oldDniMode ){
					targetObject = null;
					return;
				}
				
				oldDniMode = this.dniMode = targetObject.dniMode;
			}
		}
	}
	
	// 한글 없이 영숫자이면 "GET"으로 호출하기 위하여 체크한다
	var needPost = false;
	for(var wKey in this.parameters){
		if( this.parameters[wKey] instanceof Function ) continue;
		needPost = needPost || hasHangul("" + this.parameters[wKey].value());
	}
	
	// 파라메터 정보에는 콜론이 하나 더 붙는다.
	var wParamInfo = this.casheKey + ":";
	var wQueryString = "lang=" + USER_LANGUAGE + "&cogu=" + USER_COGU
			+ "&personalId=" + USER_PERSONALID + "&sqlnum=" + this.sqlnum
			+ "&pageNum=" + this.pageNum + "&pageSize=" + this.pageSize
			+ "&permitNull=" + this.permitNullParam + "&smode=" + this.smode
			+ "&dniMode=" + this.dniMode + "&formid=" + USER_FORMID
			+ "&paramInfo=" + encodeURIComponent(wParamInfo) 
			+ "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	var queryURL = "/query.do";
	var queryFlag = "openRecordset";
	
	if( this.commandType == "Dataset" ){
		queryURL = "/query2.do";
		queryFlag = "openDataset";
	}
	
	if( TEST_MODE == undefined || !TEST_MODE ){
		if( jobControler.loadType == 1 || this.needSync ){
			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + queryURL, wQueryString, this, queryFlag);
		}
		else{
			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + queryURL, wQueryString, this, queryFlag);
		}
	}
	else{
		if( jobControler.loadType == 1 || this.needSync ){
			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + "/test/" + queryURL, wQueryString, this, queryFlag);
		}
		else{
			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + "/test/" + queryURL, wQueryString, this, queryFlag);
		}
	}
	
//	if( TEST_MODE == undefined || !TEST_MODE ){
//		if( jobControler.loadType == 1 || this.needSync ){
//			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + "/query.do", wQueryString, this, "openRecordset");
//		}
//		else{
//			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + "/query.do", wQueryString, this, "openRecordset");
//		}
//	}
//	else{
//		if( jobControler.loadType == 1 || this.needSync ){
//			ajaxCallSync((needPost ? "POST" : "GET"), getContextPath() + "/test/query.do", wQueryString, this, "openRecordset");
//		}
//		else{
//			ajaxCall((needPost ? "POST" : "GET"), getContextPath() + "/test/query.do", wQueryString, this, "openRecordset");
//		}
//	}
	
	return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.setCashedData = function(){
	// functionname : [Recordset.setCashedData]

	var dataCashe = dataCashes[this.sqlnum + ":" + this.casheKey];

	// 데이터 담기
	this.rowCount = dataCashe.rowCount;
	this.totalRowCount = dataCashe.totalRowCount;
	this.recordNums = dataCashe.recordNums.slice(0);

	if(this.commandType == "Recordset"){
		this.fields = [];
		for(var wFieldNum = 0; wFieldNum < dataCashe.fields.length; wFieldNum++) {
			this.fields[wFieldNum] = new Field(this, dataCashe.fields[wFieldNum].fieldName, dataCashe.fields[wFieldNum].datatype);
			this.fields[wFieldNum].datas = dataCashe.fields[wFieldNum].datas.slice(0);
		}		
	}
	else if( this.commandType == "Dataset" ){
		this.dataSet.setDataSet(dataCashe.dataSet);
	}

	// 레코드 변수 초기화
	this.currentRow = 0;
	this.BOF = true;
	this.EOF = (this.rowCount == 0);
	this.recordNum = this.recordNums[0];

	// 이벤트 일으키기
	if (this.hasReceiveEvent) {
		this.fncReceiveEvent();
	}
	
	// dni모드가 false인 객체의 레코드 상태를 수정
	if( this.useReset && this._targetResetObjects != null ){
		this.reset();
	}
	
	return;
};

/**
 * @description	미결
 * @param	{string}	jsonActionObject
 * @param	{string}	message
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.parseData = function(jsonActionObject, message){
	// functionname : [Recordset.parseData]

	// 오류 메시지 먼저 파악
	if( jsonActionObject == null ){
		this.errInfo = message;
		callEvent(this.id + "_OnReceiveErr", message);
		return;
	}

	// 오류정보 분석
	// 서버에서 메시지가 넘어오면 무조건오류이다
	if( typeof jsonActionObject.errorMsg != "undefined" && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
		this.errInfo = jsonActionObject.errorMsg;
		callEvent(this.id + "_OnReceiveErr", jsonActionObject.errorMsg);
		return;
	}

	if( typeof jsonActionObject.smore != "undefined" ){
		this.smore = jsonActionObject.smore;
	}
	
	if( this.commandType == "Recordset" ){
		// 서버데이터 분석
		this.rowCount = jsonActionObject.recordList.length;

		var fieldList = jsonActionObject.fieldList;
		var recordList = jsonActionObject.recordList;
		var fields = null;
		var wFieldNum = 0;
		var wRow = 0;
		
		for(wFieldNum = 0; wFieldNum < fieldList.length; wFieldNum++){
			this.fields[wFieldNum] = new Field(this, fieldList[wFieldNum].fieldName, fieldList[wFieldNum].datatype);
		}

		// 결과값 분석, 두번쨰 페이지 부터는 안 넘어온다. 처음 조회내용 유지
		if( this.smode == "N" && jsonActionObject.rowCount > 0 ){
			this.totalRowCount = jsonActionObject.rowCount;
		}
		else if( this.smode == "Y" ){
			this.totalRowCount = 9999999;
		}
		
		for(wRow = 0; wRow < recordList.length; wRow++){
			this.recordNums[wRow] = recordList[wRow].rowNum;
			
			fields = recordList[wRow].fields;
			
			for(var wCol = 0; wCol < fields.length; wCol++){
				if( fields[wCol] == null ){
					if( this.fields[wCol].dataType == SQL_TYPE_NUMERIC
						|| this.fields[wCol].dataType == SQL_TYPE_DECIMAL
						|| this.fields[wCol].dataType == SQL_TYPE_INTEGER
						|| this.fields[wCol].dataType == SQL_TYPE_SMALLINT
						|| this.fields[wCol].dataType == SQL_TYPE_FLOAT
						|| this.fields[wCol].dataType == SQL_TYPE_REAL
						|| this.fields[wCol].dataType == SQL_TYPE_DOUBLE )
					{
						this.fields[wCol].datas[wRow] = 0;
					}
					else{
						this.fields[wCol].datas[wRow] = "";
					}
				}
				else{
					this.fields[wCol].datas[wRow] = fields[wCol];
				}
			}
			
			fields = null;
		}
		
		this.recordNum = (typeof this.recordNums[0] != "undefined") ? this.recordNums[0] : 0;

		// 데이터 클리어
		for(wRow = 0; wRow < recordList.length; wRow++){
			recordList[wRow].fields.clear();
		}
		recordList.clear();	recordList = null;
		fieldList.clear();	fieldList = null;
	}
	else if( this.commandType == "Dataset" ){
		if( this.dataSet == null ){
			this.dataSet = new WsDataSet();
		}
		
		var wResult = this.dataSet.setData( jsonActionObject );
		if( wResult.result == null || !wResult.result ){
			wResult = null;
			return;
		}
		
		this.currentRow = 0;
		this.rowCount= this.dataSet.getCount();
		this.recordNum = (this.dataSet.getCount() > 0 && typeof this.dataSet.data[0].__STATE__ != "undefined") ? this.dataSet.data[0].__STATE__.rowNum : 0;
		
		// 결과값 분석, 두번쨰 페이지 부터는 안 넘어온다. 처음 조회내용 유지
		if( this.smode == "N" && jsonActionObject.rowCount > 0 )
			this.totalRowCount = jsonActionObject.rowCount;
		else if( this.smode == "N" && this.pageSize <= 0 && jsonActionObject.rowCount === 0 )
			this.totalRowCount = 0;
		else if( this.smode == "Y" )
			this.totalRowCount = 9999999;
		
		//field ID가 다른 매핑 정보가 있다면 매핑 데이터를 생성함
		this._remakeMappingData();
		
		wResult = null;
	}
	
	// 레코드 변수 초기화
	this.currentRow = 0;
	this.BOF = true;
	this.EOF = (this.rowCount == 0);
	
	// 객체 상태 reset 여부
	var doReset = (this.BOF != this.EOF);

	// 리스트 채우기 쿼리인 경우 페이지 격납
	if( this.id.length > 9 && this.id.substring(0, 9) == "fillList_" ){
		dataCashes[this.sqlnum + ":" + this.casheKey] = new DataCashe(this);
	}
	
	// 피벗 채우기 호출 
	if (typeof pivotAgent != "undefined" && pivotAgent.IsInPivotPool(this.id)){
		pivotAgent.RunPivot(this.id, this.dataSet);
	}

	// 이벤트 일으키기
	if (this.hasReceiveEvent) {
		this.fncReceiveEvent();
	}
	
	// dni모드가 false인 객체의 레코드 상태를 수정
	if( this.useReset && this._targetResetObjects != null ){
		this.reset();
	}

	//hideAjaxBox();

	return;
};

// 문자는 엑셀에서 따옴표 붙여 넘겨줄것
/**
 * @description	미결
 * @param	{string}	jsonArrayObject
 * @param	{string}	message
 * @return  {void}
 * @example	미결
 */
Recordset.prototype.parseDataExcel = function(jsonArrayObject, message) {
	// functionname : [Recordset.parseDataExcel]

	// 오류 메시지 먼저 파악
	if( jsonArrayObject == null ){
		this.errInfo = message;
		callEvent(this.id + "_OnReceiveErr", message);
		return;
	}

	// 서버데이터 분석
	this.rowCount = jsonArrayObject.length;
	if( this.rowCount == 0 ){
		alert(getText("message_dataAction_001", "엑셀로 변환된 결과값이 없습니다."));
		return;
	}
	var colCount = jsonArrayObject[0].length;
	if( colCount == 0 ){
		alert(getText("message_dataAction_001", "엑셀로 변환된 결과값이 없습니다."));
		return;
	}

	var arrColumnDatas = jsonArrayObject[0];
	for( var wFieldNum = 0; wFieldNum < colCount; wFieldNum++ ){
		var dataType = (typeof (arrColumnDatas[wFieldNum]) == "number" ? SQL_TYPE_DOUBLE : SQL_TYPE_VARCHAR);
		this.fields[wFieldNum] = new Field(this, "column" + wFieldNum, dataType);
	}

	this.totalRowCount = jsonArrayObject.rowCount;

	for(var wRow = 0; wRow < this.rowCount; wRow++){
		this.recordNums[wRow] = wRow;
		arrColumnDatas = jsonArrayObject[wRow];

		var fields = recordList[wRow].fields;
		for(var wCol = 0; wCol < colCount; wCol++){
			this.fields[wCol].datas[wRow] = arrColumnDatas[wCol];
		}
	}

	// 데이터 클리어
	for(var wRow = 0; wRow < this.rowCount; wRow++){
		jsonArrayObject[wRow].clear();
	}
	jsonArrayObject.clear();
	jsonArrayObject = null;

	// 레코드 변수 초기화
	this.currentRow = 0;
	this.BOF = true;
	this.EOF = (this.rowCount == 0);
	this.recordNum = this.recordNums[0];
	
//	//객체 상태 reset 여부
//	var doReset = (this.BOF != this.EOF && !this.updateRow);

	// 이벤트 일으키기
	if( this.hasReceiveEvent ){
		this.fncReceiveEvent();
	}
	
	// dni모드가 false인 객체의 레코드 상태를 수정
	if( this.useReset && this._targetResetObjects != null ){
		this.reset();
	}

	return;
};

/**
 * @description	미결
 * @param	{string}	fieldID
 * @return  {string}
 * @example	미결
 */
Recordset.prototype.field = function(fieldID) {
	// functionname : [Recordset.field]

	if( this.commandType == "Recordset" ){
		var wField = null;

		for (var wFieldNum = 0; wFieldNum < this.fields.length; wFieldNum++) {
			if (this.fields[wFieldNum].fieldName == fieldID) {
				wField = this.fields[wFieldNum];
			}
		}

		return wField;
	}
	else if( this.commandType == "Dataset" ){
		var value = this.dataSet.data[this.currentRow][fieldID];
		
		return {
			value : function(){
				return value;
			}
		};
	}

	return null;
};

// BOF가 아니라 첫번째 레코드를 이동한다는 점에 주의
/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.moveFirst = function() {
	// functionname : [Recordset.moveFirst]

	if( this.commandType == "Recordset" ){
		if( this.fields[0].datas.length == 0 ){
			this.currentRow = 0;
			this.recordNum = 0;
			
			return false;
		}
		
		this.currentRow = 0;
		this.recordNum = this.recordNums[this.currentRow];
	}
	else if( this.commandType == "Dataset" ){
		if( this.rowCount == 0 ){
			this.currentRow = 0;
			this.recordNum = 0;
			
			return false;
		}
		
		this.currentRow = 0;
		this.recordNum = this.dataSet.getState(this.currentRow, "rowNum");
		this.recordNum = typeof this.recordNum != "undefined" ? this.recordNum : 0;
	}
	
	return true;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.moveNext = function() {
	// functionname : [Recordset.moveNext]

	this.currentRow++;

	if( this.commandType == "Recordset" ){
		if( this.fields[0].datas.length <= this.currentRow ){
			this.EOF = true;
			this.currentRow = 0;
			this.recordNum = this.recordNums[0];
			
			return false;
		}
		
		this.recordNum = this.recordNums[this.currentRow];
	}
	else if( this.commandType == "Dataset" ){
		if( this.rowCount <= this.currentRow ){
			this.EOF = true;
			this.currentRow = 0;
			this.recordNum = 0;
			
			return false;
		}
		
		this.recordNum = this.dataSet.getState(this.currentRow, "rowNum");
		this.recordNum = typeof this.recordNum != "undefined" ? this.recordNum : 0;
	}

	return true;
};

/**
 * @description	미결
 * @param	{number}	pPageNum
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.setAbsolutePage = function(pPageNum) {
	// functionname : [Recordset.setAbsolutePage]

	this.currentRow = (pPageNum - 1) * this.pageSize;
	
	if( this.commandType == "Recordset" ){
		this.recordNum = this.recordNums[this.currentRow];
	}
	else{
		this.recordNum = this.dataSet.getState(this.currentRow, "rowNum");
		this.recordNum = typeof this.recordNum != "undefined" ? this.recordNum : 0;
	}
	
	return true;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
Recordset.prototype.close = function(){
	// functionname : [Recordset.close]
	var controlName = null;
	var i = 0;
	
	for(i = this.parameters.length - 1; i >= 0; i--){
	    this.parameters[i].destroy();
	    this.parameters.pop();
	}
	this.parameters = null;
	this.parameters = [];
	
	for(i = this.fields.length - 1; i >= 0; i--){
	    this.fields[i].destroy();
	    this.fields.pop();
	}
	this.fields = null;
	this.fields = [];
	
	for(i = this.recordNums.length - 1; i >= 0; i--){
	    this.recordNums.pop();
	}
	this.recordNums = null;
	this.recordNums = [];
	
	if( this.dataSet != null && typeof this.dataSet != "undefined" ){
		this.dataSet.clear(); 
	}
	this.dataSet = null;
	
	if( this._mapData != null ){
		for(controlName in this._mapData){
			if( typeof this._mapData[controlName] != "undefined" ){
				if( this._mapData[controlName] instanceof WsDataSet )
					this._mapData[controlName].clear();
				this._mapData[controlName] = null;
			}
			
			controlName = null;
		}
	}
	this._mapData = null;
	
//	if( this._targetResetObjects != null ){
//		this._targetResetObjects.clear();
//	}
//	this._targetResetObjects = null;
	this.dniMode = true;
//	this.useReset = true;
	
	this.errInfo = "";
	this.CallString = "";
	this.recordNum = 0;
	this.currentRow = -1;
	this.BOF = true;
	this.EOF = true;
	this.rowCount= 0;
//	this.totalRowCount = 0;
	this.smode = "N";
	this.smore = "N";
	
	this.errInfo = "";
	this.sqlBuff = "";
	this.connectionID = "";
	this.encoded = "false";
	this.pageSize = 0;
	this.pageNum = 0;
	
	if(this.AUIrecordList){
		var AUIrecordListLen = this.AUIrecordList.length - 1;
		for (var i = AUIrecordListLen; i >= 0; i--) {
			this.AUIrecordList[i] = null;
		}
	}
	this.AUIrecordList = null; // AUI 일때
	
	return true;
};

Recordset.prototype.setMapRule = function(mapRules){
	var controlName = null;
	var cellIndex = null;
	var formula = null;
	var colId = null;
	var mapObj = null;
	var i = 0;
	
	if( this._oldMapRule != null && JSON.stringify(this._oldMapRule) == JSON.stringify(mapRules) )
		return;
	
	this._oldMapRule = mapRules;
	
	if( this.mapRule == null || typeof this.mapRule == "undefined" )
		this.mapRule = {};
	
	for(i = 0; i < mapRules.length; i++){
		controlName = mapRules[i].control;
		cellIndex = mapRules[i].cell;
		formula = mapRules[i].formula;
		
		if( typeof this.mapRule[controlName] == "undefined" )
			this.mapRule[controlName] = {};
		
		if( typeof DataSet != "undefined" && typeof dataSets[controlName] != "undefined" ){
			this.mapRule[controlName].clear = mapRules[i].clear;
		}
		else{
			if( typeof cellIndex == "number" )
				colId = controls[controlName].getColId(cellIndex);
			else
				colId = cellIndex;
			
			mapObj = this.mapRule[controlName];
			mapObj[colId] = ((typeof formula == "undefined" || formula == null) ? null : new Function("recordset", formula));
			mapObj = null;
			colId = null;
		}
		
		formula = null; cellIndex = null; controlName = null;
	}
	
	return;
};

Recordset.prototype.setTargetResetObjects = function(targetResetObjects){
	if( typeof targetResetObjects == "string" ){
		this._targetResetObjects = [];
		
		if( targetResetObjects.length > 0 ){
			var targetObjectList = targetResetObjects.split(",");
			var targetObject = null;
			var targetObjectCount = targetObjectList.length;
			var i = 0;
			
			for(i = 0; i < targetObjectCount; i++, targetObject = null){
				targetObject = targetObjectList[i].replace(/(^\s*)|(\s*$)/g, "");
				
				if( targetObject.length <= 0 ){
					continue;
				}
				
				this._targetResetObjects.push(targetObject);
			}
			
			targetObjectList = null;
		}
	}
	else if( targetResetObjects == null ){
		this._targetResetObjects = null;
	}
};

Recordset.prototype._remakeMappingData = function(){
	//매핑 룰이 없다면 매핑 데이터를 생성하지 않음
	if( this.mapRule == null )
		return;
	
	if( typeof this._mapData == "undefined" || this._mapData == null )
		this._mapData = {};
	
	var controlName = null;
	var control = null;
	var fieldList = null;
	var recordList = null;
	var mapRuleObj = null;
	var record = null; oldRecord = null; var recordState = null;
	var data = null; oldData = null;
	var key = null;
	var recordCount = 0;
	var i = 0;
	
	for(controlName in this.mapRule){
		if( typeof DataSet != "undefined" && typeof dataSets[controlName] != "undefined" ){
			//데이터셋용 데이터는 별도로 생성하지 않음
			continue;
		}
		else{
			control = controls[controlName];
			
			if( this._mapData != null && typeof this._mapData[controlName] == "undefined" )
				this._mapData[controlName] = new WsDataSet();
			else
				this._mapData[controlName].clear();
			
			if( typeof control == "undefined" || typeof control.dataSet == "undefined" )
				continue;
			
			//매핑 정보
			mapRuleObj = this.mapRule[controlName];
			
			//필드정보 리스트 초기화
			fieldList = [];
			//필드정보 추가
			for(key in mapRuleObj){
				fieldList.push((key in this.dataSet.fieldInfos) ? this.dataSet.fieldInfos[key] : control.dataSet.fieldInfos[key]);
				key = null;
			}
			
			//레코드 리스트 초기화
			recordList = [];
			//레코드 리스트 생성
			for(i = 0, recordCount = this.rowCount; i < recordCount; i++, record = null, oldRecord = null, data = null, oldData = null){
				record = {};	//새 레코드 생성
				oldRecord = {};	//oldData 레코드 생성
				data = this.dataSet.data[i];
				oldData = data.__STATE__.oldData;
				
				//레코드에 데이터 추가
				for(key in mapRuleObj){
					record[key] = (mapRuleObj[key] == null) ? data[key] : mapRuleObj[key](this);
					oldRecord[key] = this.dniMode ? null : record[key];
					key = null;
				}
				if( typeof data.__STATE__ != "undefined" ){
					record["__STATE__"] = {};
					record.__STATE__.rowNum = data.__STATE__.rowNum;
					record.__STATE__.updateGu = data.__STATE__.updateGu;
					record.__STATE__.oldData = oldRecord;
				}
				
				//새 레코드 리스트에 추가
				recordList.push(record);
				
				this.moveNext();
			}
			
			//시트 데이터 추가
			this._mapData[controlName].setDataArray(recordList, fieldList);
			
			//레코드셋 현재행 초기화
			this.currentRow = 0;
			
			//메모리 초기화
			recordList.clear(); recordList = null;
			fieldList.clear(); fieldList = null;
			mapRuleObj = null; control = null;
		}
		
		//메모리 초기화
		controlName = null;
	}
};

Recordset.prototype.recalcMapRule = function(){
	this._remakeMappingData();
};

Recordset.prototype.getMappingData = function(sheetName){
	if( this._mapData == null ){
		if( this.mapRule != null )
			this._remakeMappingData();
		else
			return this.dataSet;
	}
	
	return this._mapData[sheetName];
};

Recordset.prototype.getSheetData = function(sheetName){
	return this.getMappingData(sheetName);
};

Recordset.prototype.setDataToDataset = function(dataSetName){
	var datasetMi = dataSets[dataSetName];
	var datasetUpdateCtrl = null;
	
	if( typeof DataSet != "undefined" && typeof datasetMi != "undefined"){
		datasetUpdateCtrl = datasetMi.instantUpdateControl;
		
		//데이터셋 컨트롤 업데이트 구분 막음
		datasetMi.setInstantUpdateControl(false);
		
		//클리어 구분에 따라 데이터 추가
		if( this.mapRule[dataSetName].clear )
			datasetMi.loadJsonQry( this.dataSet.data );	//load
		else
			datasetMi.appendJsonQry( this.dataSet.data );	//append
		
		//데이터셋 컨트롤 업데이트 구분 복구
		datasetMi.setInstantUpdateControl(datasetUpdateCtrl);
		
		//메모리 초기화
		datasetUpdateCtrl = null;
	}
};

Recordset.prototype.reset = function(){
	var objectId = null;
	var object = null;
	
	for(objectId in objects){
		object = objects[objectId];
		
		//예외처리
		if( typeof object == "function" )
			continue;
		//현재 가져오기 작업으로 영향이 미치는 객체만 리셋해야 하므로 이 가져오기에 의해 영향이 없는 객체는 건너뛴다
		if( this._targetResetObjects != null && this._targetResetObjects.indexOf(object.id) < 0 )
			continue;
		
		object.resetState();
		
		//메모리 해제
		object = null;
		objectId = null;
	}
};

/**
 * @constructor
 */
function Parameter(fieldName, dataValue) {
	this.fieldName = fieldName;
	this.datas = [dataValue];
	this.returnIndex = -1;
};

// 인수가 하나면 0번 줄에 들어가는 값이고, 둘이면, 줄번호와 값이다
/**
 * @description	미결
 * @return  {undefined}
 * @example	미결
 */
Parameter.prototype.setValue = function() {
	// functionname : [Parameter.setValue]

	var length = arguments.length;
	var wRow = 0;
	var wValue = null;

	if( length == 1 ){
		wValue = arguments[0];
	}
	else if( length == 2 ){
		wRow = arguments[0];
		wValue = arguments[1];
	}
	
	this.datas[wRow] = wValue;
};

// 인수가 없으면 0번 줄에 있으면 그줄에 들어간다
/**
 * @description	미결
 * @param	{number}	pRow
 * @return  {number}
 * @example	미결
 */
Parameter.prototype.value = function(pRow) {
	// functionname : [Parameter.value]

	var wRow = pRow || 0;

	return this.datas[wRow];
};

/**
 * @description	미결
 * @return  {undefined}
 * @example	미결
 */
Parameter.prototype.clear = function() {
	// functionname : [Parameter.clear]

	this.datas.clear();
};

/**
 * @description	미결
 * @param		{String}	recordset
 * @param		{Object}	fieldName
 * @param		{String}	dataType
 * @return  	{Undefined}
 * @example		미결
 */
function Field(recordset, fieldName, dataType) {
	this.recordset = recordset;
	this.fieldName = fieldName.toLowerCase();
	this.dataType = dataType;

	this.datas = [];
};

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
Field.prototype.value = function() {
	// functionname : [Field.value]

	var wValue = null;
	
	if( this.dataType == SQL_TYPE_INTEGER || this.dataType == SQL_TYPE_SMALLINT ){
		if( this.datas[this.recordset.currentRow] == undefined ){
			wValue = 0;
		}
		else{
			wValue = parseInt(1 * this.datas[this.recordset.currentRow]);
		}
	}
 	else if( this.dataType == SQL_TYPE_NUMERIC
 			|| this.dataType == SQL_TYPE_DECIMAL
			|| this.dataType == SQL_TYPE_FLOAT
			|| this.dataType == SQL_TYPE_REAL
			|| this.dataType == SQL_TYPE_DOUBLE )
 	{
		if( this.datas[this.recordset.currentRow] == undefined ){
			wValue = 0.0;
		}
		else{
			wValue = parseFloat(1.0 * this.datas[this.recordset.currentRow]);
		}
	}
 	else{
 		if( this.datas[this.recordset.currentRow] == undefined ){
			wValue = "";
		}
 		else{
			wValue = this.datas[this.recordset.currentRow];
		}
	}

	return wValue;
};

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
Field.prototype.setValue = function(value) {
	// functionname : [Field.setValue]

	return (this.datas[this.recordset.currentRow] = value);
};
/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
Field.prototype.destroy = function() {
	// functionname : [Field.destroy]

	this.recordset = null;

	this.datas.clear();
	this.datas = null;
	
	return;
};

/*******************************************************************************
 * ObjectManager Batch정보를 포함하여 객체를 삭제하거나 저장하는 역할을 한다
 ******************************************************************************/
/**
 * @description	미결
 * @return  	{Undefined}
 * @example		미결
 */
function ObjectManager() {
	this.deleteBatchId = "";
	this.deleteBatchParam = "";
	this.insertBatchId = "";
	this.insertBatchParam = "";
	this.callerCommandName = "";
	this.fillkeyFieldValue = "";

	this.batchWorkDelete = null;
	this.batchWorkInsert = null;
	this.dataloaded = false;		// fillObjectToScreen으로 데이터가 채워진 경우 true
	this.busy = false;
};

/**
 * @description	미결
 * @param	{string}	batchWork
 * @return  {undefined}
 * @example	미결
 */
ObjectManager.prototype.setBatchWorkDelete = function(batchWork) {
	// functionname : [ObjectManager.setBatchWorkDelete]

	this.batchWorkDelete = batchWork;
	this.deleteBatchId = batchWork.id;

	batchWork.inintialize();
};

/**
 * @description	미결
 * @param	{string}	batchWork
 * @return  {undefined}
 * @example	미결
 */
ObjectManager.prototype.setBatchWorkInsert = function(batchWork) {
	// functionname : [ObjectManager.setBatchWorkInsert]

	this.batchWorkInsert = batchWork;
	this.insertBatchId = batchWork.id;

	batchWork.inintialize();
};

// 서버데이터 공통 파싱 모듕
/**
 * @description	미결
 * @param	{string}	jsonActionObject
 * @param	{string}	message
 * @param	{string}	pFlag
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.parseData = function(jsonActionObject, message, pFlag){
	// functionname : [ObjectManager.parseData]
    
	this.busy = false;
	
	var checkFunction = false;
	var key = null;
	
	if( pFlag == "loadData" ){
		// 오류 메시지 먼저 파악 
		if( jsonActionObject == null ){
			callEvent("LoadObjects_OnFail", message);
			return;
		}
		
		// 오류정보 분석 
		// 서버에서 메시지가 넘어오면 무조건오류가 아니다, 성공메시지도 있다
		if( jsonActionObject.resultCode != "SUCCESS" ){
			if( jsonActionObject.message != undefined && jsonActionObject.message != null && jsonActionObject.message.length > 0 ){
				this.errInfo = jsonActionObject.message;
				callEvent("LoadObjects_OnFail", jsonActionObject.message);
				return;
			}
			if( jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
				this.errInfo = jsonActionObject.errorMsg;
				callEvent("LoadObjects_OnFail", jsonActionObject.errorMsg);
				return;
			}
		}
		
		// 서버데이터 분석
		// FAILED 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
		if( jsonActionObject.resultCode == "SUCCESS" ){
			for(key in jsonActionObject.mapResult){
				if( typeof(jsonActionObject.mapResult[key])=="function" ) continue;
				getObjectById(key).loadData(jsonActionObject.mapResult[key]);
				key = null;
			}
			
			callEvent("LoadObjects_OnComplete", jsonActionObject.message);
		}
		else if( jsonActionObject.resultCode == "FAILED" ){
			callEvent("LoadObjects_OnFail", jsonActionObject.message);
		}
	}
	
	if( pFlag == "deleteData" ){
		// 오류 메시지 먼저 파악 
		if( jsonActionObject == null ){
			callEvent("Object_DeleteFailed", message);
			return;
		}
		
		// 오류정보 분석 
		// 서버에서 메시지가 넘어오면 무조건오류가 아니다, 성공메시지도 있다
		if( jsonActionObject.resultCode != "SUCCESS" ){
			if( jsonActionObject.message != undefined && jsonActionObject.message != null && jsonActionObject.message.length > 0 ){
				this.errInfo = jsonActionObject.message;
				callEvent("Object_DeleteFailed", jsonActionObject.message);
				return;
			}
			if( jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
				this.errInfo = jsonActionObject.errorMsg;
				callEvent("Object_DeleteFailed", jsonActionObject.errorMsg);
				return;
			}
		}
		
		// 데이터분석
		for(key in jsonActionObject.mapResult){
			if( typeof(jsonActionObject.mapResult[key]) == "function" ) continue;
			
			if( this.batchWorkDelete )
				this.batchWorkDelete.setResult(key, jsonActionObject.mapResult[key]);
			
			key = null;
		}
		
		// 완료가 되었으면 object_DeleteCompleted()이벤트를 호출하고
		// FAILED 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
		if( jsonActionObject.resultCode == "SUCCESS" ){
			// 객체삭제 완료 이벤트 발생
			callEvent("Object_DeleteCompleted", jsonActionObject.message);
			
			// 삭제 배치완료 이벤트 먼저 발생
			if( this.batchWorkDelete )
				callEvent("batch" + this.batchWorkDelete.batchId + "_OnSuccess", jsonActionObject.message);
		}
		// 실패 메시지이면  object_DeleteFailed()이벤트를 호출한다
		else if( jsonActionObject.resultCode == "FAILED" ){
			callEvent("Object_DeleteFailed", jsonActionObject.message);
		}
		
		this.close();  
	}
	
	if( pFlag == "writeData" ){
		if( jsonActionObject == null ){
			callEvent("Object_WriteFailed", message);
			return;
		}
		
		// 오류정보 분석 
		if( jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
			this.errInfo = jsonActionObject.errorMsg;
			callEvent("Object_WriteFailed", jsonActionObject.errorMsg);
			return;
		}
		
		// 데이터분석
		for(key in jsonActionObject.mapResult){
			if( typeof(jsonActionObject.mapResult[key]) == "function" ) continue;
			
			if( this.batchWorkInsert )
				this.batchWorkInsert.setResult(key, jsonActionObject.mapResult[key]);
			
			key = null;
		}
		
		// 완료가 되었으면 object_WriteCompleted()이벤트를 호출하고
		// FAILED 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
		if( jsonActionObject.resultCode == "SUCCESS" ){
			// 배치완료 이벤트 먼저 발생
			callEvent("Object_WriteCompleted", jsonActionObject.message);
			
			// 객체저장완료 이벤트 발생
			if( this.batchWorkInsert )
//				callEvent("batch" + this.batchWorkInsert.batchId + "_OnSuccess", jsonActionObject.message);
				callEvent("batch" + this.batchWorkInsert.batchId + "_wrt_OnSuccess", jsonActionObject.message);
		}
		// 실패 메시지이면  object_WriteFailed()이벤트를 호출한다
		else if( jsonActionObject.resultCode == "FAILED" ){
			callEvent("Object_WriteFailed", jsonActionObject.message);
		}
	}
	
	// hideAjaxBox();
	
	return;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
ObjectManager.prototype.loadData = function(){
	// functionname : [ObjectManager.loadData]
	
	// 로드할 키 정보가 충분한지 점검한다 
	var canLoadData = true;
	for(var key in objects){
		if( typeof(objects[key]) == "function" ) continue;
		canLoadData = canLoadData && objects[key].canLoadData();
	}
	
	// 자동으로 호출되기 떄문에 되도록 메시지 박스를 뛰우지 않는다.
	if( !canLoadData ) return false;
	
	// 쿼리문자열을 만든다.
	// 로드할 객체의 키값들을 리턴한다
	var wQueryString = "lang=" + USER_LANGUAGE
					 + "&cogu=" + USER_COGU
					 + "&personalId=" + USER_PERSONALID;
	
//	var loadData = "";
//	for(var key in objects){
//		if( typeof(objects[key])=="function" ) continue;
//		if( loadData.length != 0 ) loadData += ";";
//		loadData += objects[key].getLoadData();
//	}
	
	var key = null;
	
	var loadData = {};
	var selectCondition = {};
	for(key in objects){
		if( typeof(objects[key]) == "function" ) continue;
		loadData[objects[key].tableID] = objects[key].getLoadJSON();
		selectCondition[objects[key].tableID] = objects[key].getSelectCondition();
		key = null;
	}
	
	wQueryString += "&data=" + this.encode64( JSON.stringify(loadData) );
	wQueryString += "&condition=" + this.encode64( JSON.stringify(selectCondition) );
	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	this.busy = true;
	
	// 화면을 Clear한다. 이때, 키항목을 제외하고 clear한다.
	clearForm(false);
	
	// 서버에 서비스를 의뢰한다  (formXXXXDataAction.java -> loadData Method) ajaxCallSync
//	showAjaxBox("선택하신 화면자료를 조회하는 중입니다.", 0);	
//	ajaxCallSync("POST", "/FlexFrame/form/FlexForm"+ "_" + USER_FORMID + "_Load.do", wQueryString, this, "loadData");
	if( typeof TEST_MODE == "undefined" || !TEST_MODE ){
		ajaxCallSync("POST", getContextPath()+"/" + USER_FORMID+ "_loadData.do", wQueryString, this, "loadData");
	} else {
		ajaxCallSync("POST", getContextPath()+"/test/" + USER_FORMID+ "_loadData.do", wQueryString, this, "loadData");
	}
	
	selectCondition = null;
	loadData = null;
	
	return true;
};

/**
 * @description	미결
 * @param	{string}	callerCommandName
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.deleteData = function(callerCommandName){
	// functionname : [ObjectManager.deleteData]
	
	// 컴맨드 단추가 속한 프래임의 하위 객체만이 대상이다 
	// 하위객체는 데이터 시트가 기준이 된다.
	// 데이터 시트가 없는 경우에는 컨트롤과 연결된 객체를 찾는다.
	if( callerCommandName != undefined && callerCommandName.length > 0 )
		this.callerCommandName = callerCommandName;
	else
		this.callerCommandName = "";
	
	// 배치정보를 만든다 
	var wParamInfo = "";
	var wQueryString = "lang=" + USER_LANGUAGE
					 + "&cogu=" + USER_COGU
					 + "&personalId=" + USER_PERSONALID 
					 + "&batchId=" + this.deleteBatchId
					 + "&batchParam=" + this.deleteBatchParam;
	
	// 쿼리문자열을 만든다.
	// 지워야할 객체의 키값들을 리턴한다
//	var deleteData = "";
//	if( this.callerCommandName.length > 0 ){
//		var commandControl = controls[callerCommandName];
//		for(var i = 0; i < commandControl.objectNames.length; i++){
//			deleteData += objects[commandControl.objectNames[i]].getDeleteData();
//		}
//		wQueryString += "&data=" + this.encode64(deleteData);
//	} else {
//		for(var id in objects){
//			if( typeof(objects[id])=="function" ) continue;
//			deleteData += objects[id].getDeleteData();
//		}
//		wQueryString += "&data=" + this.encode64(deleteData);
//	}
//	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	
	var commandControl = null;
	var id = null;
	var i = 0;
	
	var deleteData = {};
	if( this.callerCommandName.length > 0 ){
		commandControl = controls[callerCommandName];
		for(i = 0; i < commandControl.objectNames.length; i++){
			deleteData[objects[commandControl.objectNames[i]].tableID] = objects[commandControl.objectNames[i]].getDeleteJSON();
		}
		commandControl = null;
	}
	else{
		for(id in objects){
			if( typeof(objects[id]) == "function" ) continue;
			deleteData[objects[id].tableID] = objects[id].getDeleteJSON();
			id = null;
		}
	}
	
	wQueryString += "&data=" + this.encode64( JSON.stringify(deleteData) );
	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	this.busy = true;
	
	// 서버에 서비스를 의뢰한다  (formXXXXDataAction.java -> deleteData Method)
	//showAjaxBox("자료를 삭제중입니다", 0);
    if( typeof TEST_MODE == "undefined" || !TEST_MODE ){
    	ajaxCall("POST", getContextPath() + "/" + USER_FORMID + "_Delete.do", wQueryString, this, "deleteData");    
    } else {
    	ajaxCall("POST", getContextPath() + "/test/" + USER_FORMID + "_Delete.do", wQueryString, this, "deleteData");    
    }
    
    deleteData = null;
    
    return;
};

/**
 * @description	미결
 * @param	{string}	callerCommandName
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.writeData = function(callerCommandName){
	// functionname : [ObjectManager.writeData]
	
	// 컴맨드 단추가 속한 프래임의 하위 객체만이 대상이다 
	// 하위객체는 데이터 시트가 기준이 된다.
	// 데이터 시트가 없는 경우에는 컨트롤과 연결된 객체를 찾는다.
	var commandControl = null;
	if( callerCommandName != undefined && callerCommandName.length > 0 ){
		this.callerCommandName = callerCommandName;
		commandControl = controls[callerCommandName];
	}
	else{
		this.callerCommandName = "";
	}
	
	// 배치정보를 만든다 
	var wParamInfo = "";
	var wQueryString = "lang=" + USER_LANGUAGE
					 + "&cogu=" + USER_COGU
					 + "&personalId=" + USER_PERSONALID
					 + "&callerCommandName" + callerCommandName
					 + "&batchId=" + this.deleteBatchId
					 + "&batchParam=" + this.deleteBatchParam
					 + "&batchId2=" + this.insertBatchId
					 + "&batchParam2=" + this.insertBatchParam;
	
	// 객체 시퀀스를 시트를 기준으로 재정비한다.
	var control = null;
	var id = null;
	try{
		for(id in controls){
			control = controls[id];
			
			if( typeof(control)=="function" ) continue;
			
			if( control.controlId.toLowerCase().indexOf("sheet_") >= 0 && control.controlId.toLowerCase().indexOf("listsheet_") < 0 ){
				control.updateSeqFieldOfLinkedObject();
				// 시트 시퀀스도 같이 재정비한다. 
				//15.05.01 이지홍 추가
				control.updateObjectSeq();
			}
			
			id = null;
			control = null;
		}
	}
	catch(e){
		id = null;
		control = null;
		
		// AUIGrid인 경우 'control instanceof DataSheet' 에러
	}
	
	// dniMode 인겨우 seq 의 재부여
	var wObject = null;
	var id = null;
//	if (!this.dataloaded) {
		if( this.callerCommandName.length > 0 ){
			for(var i = 0; i < commandControl.objectNames.length; i++){
				//객체저장
				wObject = objects[commandControl.objectNames[i]];
				wObject.sortBySeq();
				wObject.arrangeSeq();
				wObject = null;
			}
		}
		else{
			for(id in objects) {
				if( typeof(objects[id]) == "function" ) continue;
				wObject = objects[id];
				wObject.sortBySeq();
				wObject.arrangeSeq();
				id = null;
				wObject = null;
			}
	    }
//	}
	id = null;
	wObject = null;
	
	// 객체별로 데이터를 불러와 인코딩한다.
//	var writeData = "";
//    if (this.callerCommandName.length > 0){
//    	for (var i=0; i < commandControl.objectNames.length;i++){
//    		writeData += objects[commandControl.objectNames[i]].getWriteData();
//    	}
//    } else {
//    	for (var id in objects) {
//    		if (typeof(objects[id])=="function") continue;
//    		writeData += objects[id].getWriteData();
//    	}
//    }
	
	var writeData = {};
	var dniModeQry = {}
	if( this.callerCommandName.length > 0 ){
		for(var i=0; i < commandControl.objectNames.length;i++){
			writeData[objects[commandControl.objectNames[i]].tableID] = objects[commandControl.objectNames[i]].getWriteJSON();
			dniModeQry[objects[commandControl.objectNames[i]].tableID] = objects[commandControl.objectNames[i]].dniMode;
		}
	}
	else{
		for(var id in objects){
			if( typeof(objects[id]) == "function" ) continue;
			writeData[objects[id].tableID] = objects[id].getWriteJSON();
			dniModeQry[objects[id].tableID] = objects[objects[id].tableID].dniMode;
		}
	}
	
	wQueryString += "&data=" + this.encode64( JSON.stringify(writeData) );
	wQueryString += "&dniMode=" + (this.dataloaded ? "0" : "1"); /* 2015.09.22 이지홍 */  
	wQueryString += "&dniModeQry=" + this.encode64( JSON.stringify(dniModeQry) );   
	wQueryString += "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
	this.busy = true;
	
	//window.clipboardData.setData("Text", this.encode64(writeData));
	// 서버에 서비스를 의뢰한다  (formXXXXDataAction.java -> writeData Method)
	//showAjaxBox("자료를 등록중입니다", 0);
//	alert("/FlexFrame/form/FlexForm" + USER_COGU + "_" + USER_FORMID + "_Write.action?"+wQueryString);
	//DebugCopy("/FlexFrame/form/FlexForm" + USER_COGU + "_" + USER_FORMID + "_Write.action?" + wQueryString);
//	ajaxCall("POST", "/FlexFrame/form/FlexForm" + USER_COGU + "_" + USER_FORMID + "Controller" +"_Write.do", wQueryString, this, "writeData");
	if( TEST_MODE == undefined || !TEST_MODE ){
		ajaxCall("POST", getContextPath() + "/" + USER_FORMID + "_Write.do", wQueryString, this, "writeData");
	} else{
		ajaxCall("POST", getContextPath() + "/test/" + USER_FORMID + "_Write.do", wQueryString, this, "writeData");
	}
	
    writeData = null;
    
    return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.fillData = function(){
	// functionname : [ObjectManager.fillData]
	
	if( typeof fillObjectToScreen == "function" ){
		fillObjectToScreen(this.fillkeyFieldValue);
		this.dataloaded = true;
	}
	
	return;
};

/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
ObjectManager.prototype.objectChanged = function(){
	// functionname : [ObjectManager.objectChanged]
	
	// 변화가 있는 객체만을 기록한다. (변화가 없으면 메시지만 뿌리고 빠진다.)
	var needWrite = false;
	var commandControl = null;
	
	if( this.callerCommandName.length > 0 ){
		commandControl = controls[this.callerCommandName];
		
		for(var i = 0; i < commandControl.objectNames.length; i++)
			needWrite = needWrite || objects[commandControl.objectNames[i]].needWrite();
		
		commandControl = null;
	}
	else{
		for(var id in objects){
			if( typeof(objects[id]) == "function" )
				continue;
			
			needWrite = needWrite || objects[id].needWrite();
		}
	}
	
	return needWrite;
};

/**
 * @description	미결
 * @param	{string}	data
 * @return  {string}
 * @example	미결
 */
ObjectManager.prototype.encode64 = function(data){
    // functionname : [ObjectManager.encode64]

	var wReturn = "";
	var index = 0;
	var input = encodeURIComponent(data);

	while (index < input.length) {
	   var charCode1 = input.charCodeAt(index++);
	   var charCode2 = input.charCodeAt(index++);
	   var charCode3 = input.charCodeAt(index++);

	   var newCode1 =   charCode1 >> 2;
	   var newCode2 = ((charCode1 & 3)  << 4) | (charCode2 >> 4);
	   var newCode3 = ((charCode2 & 15) << 2) | (charCode3 >> 6);
	   var newCode4 =   charCode3 & 63;

	   if (isNaN(charCode2))  newCode3 = 64;
       if (isNaN(charCode3))  newCode4 = 64;

       wReturn += USER_KEYSTR.charAt(newCode1) + USER_KEYSTR.charAt(newCode2) + USER_KEYSTR.charAt(newCode3) + USER_KEYSTR.charAt(newCode4);
	}

	return wReturn;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
ObjectManager.prototype.close = function(){
    // functionname : [ObjectManager.close]

	if (this.batchWorkDelete != null){
	    this.batchWorkDelete.close();
	    this.batchWorkDelete = null;
	}
	if (this.batchWorkInsert != null){
	    this.batchWorkInsert.close();
	    this.batchWorkInsert = null;
	}
	return;
};

/* ********************************************************************
 *   CALL BATCH WORK
 * ********************************************************************/
/**
 * @description	미결
 * @param		{String}	pKey
 * @param		{String}	batchId
 * @return  	{Object}
 * @example		미결
 */
function getBatchWorkByKey(pKey, batchId){
	if (batchId == undefined) batchId = pKey;
    var wFound = false;
    for (var wKey in batchWorks){
    	if (batchWorks[wKey] instanceof Function) continue;
        if (wKey == pKey){
            wFound = true;
            break;
        }
    }
    var batchWork = null;
    
    if (wFound){
        batchWork = batchWorks[pKey];
    } else {
    	batchWork = batchWorks[pKey] = new BatchWork(pKey);
    }
    batchWork.batchId = batchId;
    
    return batchWork;
};

/**
 * @description	미결
 * @param		{String}	id
 * @param		{String}	batchId
 * @return  	{String}
 * @example		미결
 */
function BatchWork(id, batchId){
    this.id = id;
    this.batchId = id;
    this.parameters = [];
    this.results = [];
    this.report = null;
    this.nextBatchId = "";
    this.skip = false;
    
    this.message = "";
    
	batchWorks[batchId] = this;  
	this.busy = false;
    return this;
};

/**
 * @description	미결
 * @param	{string}	fieldName
 * @param	{string}	dataValue
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.setParameter = function(fieldName, dataValue){
    // functionname : [BatchWork.setParameter]

	this.parameters[fieldName] = new Parameter(fieldName, dataValue);
    return;
};

/**
 * @description	미결
 * @param	{string}	resultName
 * @param	{string}	dataValue
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.setResult = function(resultName, dataValue){
    // functionname : [BatchWork.setResult]

    this.results[resultName] = dataValue;
    return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.execute = function(){
    // functionname : [BatchWork.execute]

    if (this.skip){
    	if (this.nextBatchId.length != 0){
    		setTimeout("getBatchWorkByKey('" + this.nextBatchId + "').execute();", 1);
    	}
		return;
     }
                       
    // 데이터를 리턴받는 경우 레코드셋을 미리 만들어 두고 이 루틴을 호출할 것 
    var wParamInfo = ""; var seq = 1;
    for (var wKey in this.parameters){
    	if (this.parameters[wKey] instanceof Function) continue;
    	
        wParamInfo  += "&parameter" + (seq++) + "=" 
                    + encodeURIComponent(this.parameters[wKey].value());
    }

    var wQueryString = "lang=" + USER_LANGUAGE
                    + "&cogu=" + USER_COGU
                    + "&userId=" + USER_USERID
                    + "&personalId=" + USER_PERSONALID
			        + "&batchId=" + this.batchId
			        + wParamInfo
			        + "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);

    this.busy = true;
	// showAjaxBox("작업중입니다. 잠시만기다려 주십시요", 0);
	   
	var batchWork = this;
    if (TEST_MODE == undefined || !TEST_MODE){
    	ajaxCall("POST", getContextPath()+"/run" + this.batchId + ".do", wQueryString, this, "execute");
    } else {
    	ajaxCall("POST", getContextPath()+"/test/run" + this.batchId + ".do", wQueryString, this, "execute");
    }
	
	return;
	
};

/**
 * @description	미결
 * @param	{object}	jsonActionObject
 * @param	{string}	message
 * @param	{object}	pFlag
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.parseData = function(jsonActionObject, message, pFlag){
    // functionname : [BatchWork.parseData]
    this.busy = false;
                       
	// 오류 메시지 먼저 파악 
	if (jsonActionObject == null){
		callEvent("batch" + this.id + "_OnFailure", message);
		return;
	}

	// 오류정보 분석 
	if (jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0){
		this.errInfo = jsonActionObject.errorMsg;
		callEvent("batch" + this.id + "_OnFailure", jsonActionObject.errorMsg);
		return;
	}
	
	// 구버전 메시지
	if (jsonActionObject.message != undefined && jsonActionObject.message != null && jsonActionObject.message.length > 0){
		this.errInfo = jsonActionObject.message;
		callEvent("batch" + this.id + "_OnFailure", jsonActionObject.message);
		return;
	}
	
	// 데이터분석
	for (var key in jsonActionObject.mapResult){
		if (typeof(jsonActionObject.mapResult[key])=="function") continue;
        this.setResult(key, jsonActionObject.mapResult[key]);
    }
	
	// 배치 스텝내 레포트 호출
	for (var key in this.results){
		if (!key.startsWith("executeOfBatch_")) continue;
		executeOfBatch(this.results[key]);
    }
    
   	// message 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
	var message = this.message;
	if (message.length == 0){
        callEvent("batch" + this.id + "_OnSuccess");
        
        // 연결리포트 수행
        if (this.report != null) this.report.execute();

	} else {
        callEvent("batch" + this.id + "_OnFailure", message);
	}
	
	return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.inintialize = function(){
    // functionname : [BatchWork.inintialize]

    for (var i = this.parameters.length - 1; i >= 0; i--) {
        this.parameters.pop();
     }
    this.parameters= null;
    this.parameters= [];
    
    for (var i = this.results.length - 1; i >= 0; i--) {
        this.results.pop();
     }
    this.results= null;
    this.results= [];
    this.nextBatchId = "";
    this.needSkip = false;
	return;	
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
BatchWork.prototype.close = function(){
    // functionname : [BatchWork.close]

	// hideAjaxBox();
    this.inintialize();
	return;
};

// 채번 정보 처리 객체
var isInNumberingProcess = false;
function NumberingSVC(){
	this.controlName = ""; // TextBox
	this.controlId = "";
	this.commandName = "";
	
	this.cogu=0;
	this.dbId="";
	this.objectId="";
	this.maxGu="";
	this.propertyId="";
	this.propertyType="";
	this.param = "";
	this.encoding = "";
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
NumberingSVC.prototype.callService = function(){
    // functionname : [NumberingSVC.callService]
    var wQueryString = "lang=" + USER_LANGUAGE
                     + "&cogu=" + USER_COGU
                     + "&maxGu=" + this.maxGu
                     + "&dbId=" + this.dbId
			         + "&objectId=" + this.objectId
			         + "&propertyId=" + this.propertyId
			         + "&propertyType=" +this.propertyType
			         + "&encoding=" +this.encoding
			         + "&param=" + encodeURIComponent(this.param)
			         + "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);

	//showAjaxBox("번호 채번 작업 중입니다. 잠시만 기다려 주십시요.", 0);
    ajaxCall("POST", getContextPath()+"/numbering.do", wQueryString, this, "numbering");
    
    return;
};

/**
 * @description	미결
 * @param	{object}	jsonActionObject
 * @param	{string}	message
 * @param	{object}	pFlag
 * @return  {void}
 * @example	미결
 */
NumberingSVC.prototype.parseData = function(jsonActionObject, message, pFlag){
    // functionname : [NumberingSVC.parseData]
	//hideAjaxBox();

	// 오류 메시지 먼저 파악 
	if (jsonActionObject == null){
        callEvent("numbering_" + this.controlId + "_failed", message);
		return;
	}

	// 오류정보 분석 
	if (jsonActionObject.errorMsg != undefined && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0){
		this.errInfo = jsonActionObject.errorMsg;
        callEvent("numbering_" + this.controlId + "_failed", jsonActionObject.errorMsg);
		return;
	}
	
	// 데이터분석 
   	// message 체크는 필요없는 부분이나 기존소스와의 호환을 위해 살려둠 
	var message = jsonActionObject.errorMsg;
	if (message.length == 0){
		isInNumberingProcess = true; // 채번중에는 가저오기, 객체로드 채우기능 동작이 일어나면 데이터가 손상될 수 있다
		controls[this.controlName].setValue(jsonActionObject.newNumber);
		isInNumberingProcess = false;
		
        callEvent("numbering_" + this.controlId + "_Completed", parseInt(1 * jsonActionObject.newNumber), this.commandName);
	} else {
        callEvent("numbering_" + this.controlId + "_failed", message);
	}
	
	return;
};

/**
 * @description	미결
 * @param		{Object}	recordset
 * @return  	{Undefined}
 * @example		미결
 */
//케시에 사용되는 목록
function DataCashe(recordset){
    this.sqlnum = recordset.sqlnum;
	this.key = recordset.key;
    this.rowCount= recordset.rowCount;
    this.totalRowCount = recordset.totalRowCount;

	this.recordNums = recordset.recordNums.slice(0);
	
	var wFields = recordset.fields;
    this.fields = [];
    for (var wFieldNum = 0; wFieldNum < wFields.length; wFieldNum++){
        this.fields[wFieldNum] = new Field(null, wFields[wFieldNum].fieldName, wFields[wFieldNum].datatype);
	    this.fields[wFieldNum].datas = wFields[wFieldNum].datas.slice(0);
    }
};

function executeOfBatch(info){
	try {
		if (BrowserDetect.browser == "Explorer") {
			var win = window.open("ViewReportLoad.do?fileName="+encodeURI(encodeURIComponent(info)), "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
		} else {
			var win = window.open("about:blank", "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
			if (!win) throw getText("message_report_001", "팝업이 차단 되었습니다. 레포트를 실행하시려면 팝업을 허용해 주세요. \n ※팝업차단허용방법: 브라우저 상단 메뉴바에서 [도구]-[팝업차단]-[팝업차단설정] 에서 허용할 웹사이트 주소란에 주소를 추가해 주시고 레포트를 실행해 주세요.");
			setTimeout(function (){
			win.document.write('<html><head><title>'+info.split("|")[2]+'</title><meta http-equiv="X-UA-Compatible" content="IE=Edge"/><style type="text/css">body{margin:0;padding:0;height:100%;}</style></head>');
			win.document.write('<body><iframe src="ViewReportLoad.do?fileName='+encodeURI(encodeURIComponent(info))+'" width="100%" height="100%" marginheight="0" marginwidth="0" border="0" frameborder="0" scrolling="no"></iframe></body></html>');
			}, 100);
		}
	} catch(e){
	    alert(e);
	}
	
	return;
};

/**
 * @class Flexformscripthead
 * @constructor Flexformscripthead
 * @description	미결
 */


/*******************************************************************************
    폼에대한 기초보안 조치 
*******************************************************************************/

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event
 * @returns		{Boolean}
 */
// 포커스 이벤트 
    document.onselectstart = function(e) {
    	// functionname : [document.onselectstart]
    	                   
        e = window.event || e;
    	var em =  (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
        if (em.tagName !="INPUT" && em.tagName !="TEXTAREA") return false; 
        return true;
    };
    
    /**
     * @description	미결
     * @returns		{Boolean}
     * @example		미결
     */
    // prevent user's right click();
    document.oncontextmenu = function(){ 
    	// functionname : [document.oncontextmenu]

    	//return true;
    	return false;
    };
    
    /**
     * @description	미결
     * @name		Flexformscripthead#
     * @event
     * @returns		{Boolean}
     */
    //글로벌 키다운
	document.onkeydown= function(e) {
		if(e.keyCode == 116) {
			if(typeof e.preventDefault == "function") {
				e.preventDefault();
			} else {
				e.returnValue = false; // for IE
			}
			return false;
		}
	};
	
	//Document Unload Event 추가
	if (window.attachEvent){
	    /*IE and Opera*/
	    window.attachEvent("onunload", unloadForm);
	}
	else if (document.addEventListener){
	    /*Chrome, FireFox*/
	    window.onbeforeunload = unloadForm;
	    /*IE 6, Mobile Safari, Chrome Mobile*/
	    window.addEventListener("unload", unloadForm, false);
	}
	else{
	    /*etc*/
	    document.addEventListener("unload", unloadForm, false);
	}

/*******************************************************************************
    폼 동작에 필요한 변수들 
*******************************************************************************/
    var jFormid = "";
    var jLinkid = "";
    var jMenuID = "";
    var jParams = "";
    var jGlobal = "";
    var jLoaded = false;
    var jCharInfo = "";
    var jTreeSQL = "";
    var FTPString = "";
    var wControl = null;
    var jUploadPrefix = "";
    var keyInfoStr = "";
    
    // IFRAME 기능으로 호출되었는지 여부
    var thisIsIframe = (self.parent && 
    		            self.parent.document.getElementsByName(self.name).length > 0 && 
    		            self.parent.document.getElementsByName(self.name)[0].tagName.toUpperCase() == "IFRAME");
    
/*******************************************************************************
    전역상수 
*******************************************************************************/
    
    var USER_BROWSER_NAME = navigator.appName.toLowerCase();  // ex:"microsoft internet explorer", "Netscape"
    var USER_BROWSER_VER  = parseFloat(navigator.appVersion);
//    var IS_IE9_OR_LOWER_VERSION = ( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && 
//                                    (navigator.appVersion.indexOf("MSIE 7") > 0 || 
//                                     navigator.appVersion.indexOf("MSIE 8") > 0 ||
//                                     navigator.appVersion.indexOf("MSIE 9") > 0));
    var IS_IE9_OR_LOWER_VERSION = (navigator.appVersion.indexOf("MSIE 7") >= 0
    								|| navigator.appVersion.indexOf("MSIE 8") >= 0
    								|| navigator.appVersion.indexOf("MSIE 9") >= 0);
    		
/*
 * Tree 동작에 필요한 상수
 */
    var tvwTreeLines = 0;
    var tvwRootLines = 1;
    
    var tvwFirst = 0;
    var tvwLast = 1;
    var tvwNext = 2;
    var tvwPrevious = 3;
    var tvwChild = 4;
    
    // 트리에 필요한 그림상수 변수
    var PLUS_NORMAL   = 0;
    var PLUS_BOTTOM   = 1;
    var MINUS_NORMAL  = 2;
    var MINUS_BOTTOM  = 3;
    var FOLDER_NORMAL = 4;
    var FOLDER_OPEN   = 5;
    var JOIN_NORMAL   = 6;
    var JOIN_BOTTOM   = 7;
    var LINE_BLANK    = 8;
    var EMPTY_ICON    = 9;
    var PAGE_ICON     = 10;

    // CROSS SHEET에 필요한 상수    
    // 선긋기에 필요한 상수 
    var RCTYPE_ISCOL = 1;
    var RCTYPE_ISROW = 1;
    var FONT_WIDTH   = 7; // 폰트 한바이트당 크기
    
    // 보이기 숨기기 구분
    var ACTION_SHOW = 1;
    var ACTION_HIDE = 2;
    
    // 트리에 필요한 상수
    var icons = new Array(6);
    icons[PLUS_NORMAL]       = new Image();
    icons[PLUS_NORMAL].src   = CONTEXT_ROOT + "/winnersoft/images/tree/plus.gif";
    icons[PLUS_BOTTOM]       = new Image();
    icons[PLUS_BOTTOM].src   = CONTEXT_ROOT + "/winnersoft/images/tree/plusbottom.gif";
    icons[MINUS_NORMAL]      = new Image();
    icons[MINUS_NORMAL].src  = CONTEXT_ROOT + "/winnersoft/images/tree/minus.gif";
    icons[MINUS_BOTTOM]      = new Image();
    icons[MINUS_BOTTOM].src  = CONTEXT_ROOT + "/winnersoft/images/tree/minusbottom.gif";
    icons[FOLDER_NORMAL]     = new Image();
    icons[FOLDER_NORMAL].src = CONTEXT_ROOT + "/winnersoft/images/tree/folder.gif";
    icons[FOLDER_OPEN]       = new Image();
    icons[FOLDER_OPEN].src   = CONTEXT_ROOT + "/winnersoft/images/tree/folderopen.gif";
    icons[JOIN_NORMAL]       = new Image();
    icons[JOIN_NORMAL].src   = CONTEXT_ROOT + "/winnersoft/images/tree/join.gif";
    icons[JOIN_BOTTOM]       = new Image();
    icons[JOIN_BOTTOM].src   = CONTEXT_ROOT + "/winnersoft/images/tree/joinbottom.gif";
    icons[LINE_BLANK]        = new Image();
    icons[LINE_BLANK].src    = CONTEXT_ROOT + "/winnersoft/images/tree/line.gif";
    icons[EMPTY_ICON]        = new Image();
    icons[EMPTY_ICON].src    = CONTEXT_ROOT + "/winnersoft/images/tree/empty.gif";
    icons[PAGE_ICON]         = new Image();
    icons[PAGE_ICON].src     = CONTEXT_ROOT + "/winnersoft/images/tree/page.gif";
    
    // 쿼리 데이터 타입
    var SQL_TYPE_NULL          = 0   ;
    var SQL_TYPE_CHAR          = 1   ;
    var SQL_TYPE_NUMERIC       = 2   ;
    var SQL_TYPE_DECIMAL       = 3   ;
    var SQL_TYPE_INTEGER       = 4   ;
    var SQL_TYPE_SMALLINT      = 5   ;
    var SQL_TYPE_FLOAT         = 6   ;
    var SQL_TYPE_REAL          = 7   ;
    var SQL_TYPE_DOUBLE        = 8   ;
    var SQL_TYPE_LONGVARCHAR   = -1  ;
    var SQL_TYPE_BINARY        = -2  ;
    var SQL_TYPE_VARBINARY     = -3  ;
    var SQL_TYPE_LONGVARBINARY = -4  ;
    var SQL_TYPE_BIGINT        = -5  ;
    var SQL_TYPE_TINYINT       = -6  ;
    var SQL_TYPE_BIT           = -7  ;
    var SQL_TYPE_VARCHAR       = 12  ;
    var SQL_TYPE_BOOLEAN       = 16  ;
    var SQL_TYPE_DATALINK      = 70  ;
    var SQL_TYPE_DATE          = 91  ;
    var SQL_TYPE_TIME          = 92  ;
    var SQL_TYPE_TIMESTAMP     = 93  ;
    var SQL_TYPE_OTHER         = 1111;
    var SQL_TYPE_JAVA_OBJECT   = 2000;
    var SQL_TYPE_DISTINCT      = 2001;
    var SQL_TYPE_STRUCT        = 2002;
    var SQL_TYPE_ARRAY         = 2003;
    var SQL_TYPE_BLOB          = 2004;
    var SQL_TYPE_CLOB          = 2005;
    var SQL_TYPE_REF           = 2006;

    // 가저오기중 시트채우기 실행중구분 : 시트갱신시 콘트롤 매번 시퀀스 바꿔가며 갱신 방지
    var FILLSTATE_NONE = 0;
	var FILLSTATE_SHEET = 1;
	var fillState = FILLSTATE_NONE;

	
    // 리스트박스 상수 선언부
    var LISTBOX_TYPE_OLDSINGSELECT = 0;
    var LISTBOX_TYPE_SINGSELECT    = 1;
    var LISTBOX_TYPE_MULTISELECT   = 2;
    var LISTBOX_TYPE_CHECKSELECT   = 3;
    var LISTBOX_TYPE_DATASELECT    = 4;
    
    // 시트채우기 모드
    var DATALISTBOX_SETITEM = 1;
    var DATALISTBOX_SETDATA = 2;
    
    // 데이터 저장 구분
    var LISTBOX_SAVE_SINGLE = 0;
    var LISTBOX_SAVE_MULTI  = 1;
    
    // ===== Timer Start  ====
	var TIMER_DISPLAY_NONE = 0;			// 표시 없음
	var TIMER_DISPLAY_USERTEXT = 1;		// 산식결과
	var TIMER_DISPLAY_IMAGEURL = 2;		// 이미지
	var TIMER_DISPLAY_TIMELEFT = 3;		// 남은시간 표시
	var TIMER_DISPLAY_CURRTIME = 4;		// 현재시간 표시
    // =====  Timer End   ====

/*******************************************************************************
    전역객체 
 *******************************************************************************/
    var wCalculator = new EXOCalculator();
    var wLogic      = new EXOLogic("");
    var objectManager = new ObjectManager();
/*******************************************************************************
    전역변수 
 *******************************************************************************/
    var arrKeyCodes=[8, 9, 16,17,18,19,20,27,33,34,35,36,37,38,39,40,91,92];
    // 8:백스페이스 9:Tab 
    // 16:shift 17 :ctl 18:alt 19:break 20 :caps 
    // 27 :esc 33:pageup 34:page down 35:End 36:Home 37:좌로 38:up 39:우로 40 : down 
    // 91:윈도우92:윈도우
    var objects     = []; //associative array
    var controls    = []; //associative array
    var parameters  = []; //associative array
    var dataCashes  = []; //associative array * 키는 sql번호:파라메터1:파라메터2:....:파라메터n
    var cachedimages= []; //associative array
    var charts		= [];
    var crosssheets = [];
    var pictures	= [];
    var reports  	= [];
    var DocDateControlName = ""; 
    var DocNumControlName = "";
    var DocTitleControlName = "";
    var uploadControls = []; // 파일업로드 정보가 들어 있는 곳
    
    // 마우스 이동에 관한 변수 
    var jClassName = "";
    var jObject = null;
    
    // 시트크기조절에 관한 변수
    var ResizeObject = null; 
    var wIsResizing = false;
    var mustFillScreenAfterLoad = false;
    
    // 시트 컬럼 이동에 관한 변수
    var wIsColumnMove = false;
    var wIsColumnMoving = false;
    var MoveObject = null;
    var moveOldColumn = 0;
    var moveScrollLeft = 0;
    
/*******************************************************************************
    전역함수 
 *******************************************************************************/
    /**
     * @description	미결
     * @returns		{Void}
     * @example		미결
     */
    function unloadForm(){
    	if (typeof EventCache != "undefined") EventCache.flush();
    	for (var id in controls) {
    		if (typeof(controls[id])=="function") continue;
    		delete controls[id];
    	}
    	for (var id in parameters) {
    		if (typeof(parameters[id])=="function") continue;
    		delete parameters[id];
    	}
//    	for (var id in objects) {
//    		if (typeof(objects[id])=="function") continue;
//    		objects[id].clear();
//    		delete objects[id];
//    	}
    	
    	icons.clear();
    	arrKeyCodes.clear();
    	jObject = null;
        ResizeObject = null;
        MoveObject = null;
        wLogic = null;
        wCalculator = null;
    	
    	return;
    };
    
    /**
     * @description	미결
     * @param		{String}	id
     * @returns		{String}
     * @example		미결
     */
    function getControlById(id) 
    {
    	var wReturn = null;
    	for (var wKey in controls){
    	if (controls[wKey] instanceof Function) continue;
    		if (controls[wKey].id == id){
    			wReturn = controls[wKey];
    			break;
    		}
    	}
    	return wReturn;
    };
    
    function getControlByTag(tag) 
    {
    	var wReturn = null;
    	
    	var pEm = tag;
    	while (pEm.parentNode && !pEm.id) {
    		pEm = pEm.parentNode;
    	}
    	if (pEm == null) return undefined;
    	
    	return getControlById(pEm.id);
    };
    
    /**
     * @description	미결
     * @returns		{Undefined}
     * @example		미결
     */
    function clearControls(){
    	for (var id in controls) {
    		if (typeof(controls[id])=="function") continue;
    		delete controls[id];
    	}
    };


    /**
     * @description	미결
     * @param		{Object}	em
     * @returns		{String}
     * @example		미결
     */
    function searchSheet(em){
    	var pEm = em;
    	var wReturn = null;
    	while (pEm.parentNode && !pEm.className.startsWith("DataSheet") && !pEm.className.startsWith("AUIDataSheet") && !pEm.className.startsWith("ListSheet") && !pEm.className.startsWith("CrossSheet")) {
    		pEm = pEm.parentNode;
    		if (pEm == null) return null;
    	}
    	if (pEm.className.startsWith("DataSheet") || pEm.className.startsWith("AUIDataSheet") || pEm.className.startsWith("ListSheet") || pEm.className.startsWith("CrossSheet")){ 
    	       wReturn = getControlById(pEm.id);
    	}
    	return wReturn;
    };
    	
    /**
     * @description	미결
     * @param		{Object}	em
     * @returns		{String}
     * @example		미결
     */
    function searchRow(em){
    	var wReturn = null;
    	
    	var parentEm = em;
    	while (parentEm.tagName != "TR") {  // TR테그가 없는 경우 document객체까지 서슬러 올라가게 된다
    		parentEm = parentEm.parentNode;
		    if (parentEm == null) return null;
    	}
    	if (parentEm.tagName == "TR" && parentEm.getAttribute("haveData") == "1") {
    		wReturn = searchSheet(em).dataTable.tBodies[0].rows[parentEm.rowIndex];
    	}
    	
    	return wReturn;
    };

    /**
     * @description	미결
     * @param		{Object}	em
     * @returns		{Object}
     * @example		미결
     */
    function searchCell(em){
//    	var wReturn = null;
    	
    	var parentEm = em;
    	
    	while (parentEm.parentNode.tagName != "TR") {  // TR테그가 없는 경우 document객체까지 서슬러 올라가게 된다
    		parentEm = parentEm.parentNode;
		    if (parentEm.parentNode == null) return null;
    	}
//    	if (parentEm.parentNode.tagName == "TR" && parentEm.parentNode.getAttribute("haveData") == "1") {
//    		wReturn = parentEm.parentNode;
//    	}
    	
    	return parentEm;
    };
    
    /**
     * @description	미결
     * @returns		{Void}
     * @example		미결
     */
    function loadParamFromQuery(){
    	if (this.location.href.split("?").length <= 1) return;
    	
    	var qryStr = this.location.href.split("?")[1];
    	arr = qryStr.split("&");
    	for (var i=0; i < arr.length;i++){
    		var arr1 = arr[i].split("=");
    		parameters[arr1[0]] = arr1[1];
    	}
    	return;
    };

/*******************************************************************************
    전역 이벤트 처리 
 *******************************************************************************/
    /**
     * @description	미결
     * @name		Flexformscripthead#
     * @event		
     * @returns		{Boolean}
     */
    // 시트에 공통되는 이벤트  : 마우스이벤트의 케치 
document.onmousedown = function(e) {
     e = window.event || e;
     
     //공통 이벤트 처리
     var em = e.toElement;
     if(em != undefined && em != null){
         var Sheets = document.getElementsByClassName("DataSheet");
         var sheetLen = Sheets.length;
         for(var i=0; i<sheetLen; i++){
        	 var sheetControl = searchSheet(Sheets[i]);
        	 if(sheetControl != null){
        		 sheetControl.setPickHeaderClass(-1, -1, "");
        	 }
         }
         
		 // 달력 div에서 일어난 이벤트인지 판단.
		 while(em != null && em.localName != null && em.localName != "html"){
			 if(em.getAttribute("ID") == "calendarDiv") return true;
			 em = em.parentNode;
		 }
		 // 펼쳐진 달력이 있다면 닫는다.
		 var calendarDiv = document.getElementById("calendarDiv");
		 if(calendarDiv != null && calendarDiv != undefined) {
			 if(calendarDiv.style.display != "none") closeNotActionCalendar();
		 }
     }

		
     if (e.button == 2) return false;
     var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     if (BrowserDetect.browser == "Chrome" && em.tagName == "HTML") return true; // 크롬에서 HTML Scroll 이 안먹는문제
     
     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmousedown(em);
//             stopPropagation(e);
//     }
     return wReturn;
};

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event		
 * @returns		{Boolean}
 */
document.onmousemove = function(e) {
	// functionname : [document.onmousemove]
	if (wIsResizing) {
		resizeCell(window.event.clientX, window.event.clientY);
		return true;
	}
	
	if (wIsColumnMove) {
		movingOfSheetColumn(window.event.clientX);
		return true;
	}
	
     e = window.event || e;
     var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     if(BrowserDetect.browser == "Firefox" && (em.className == "TabSel" || em.className == "TabGen")) return true; // 파이어폭스에서 탭 풍선도움말 문제

     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmousemove(em);
//             stopPropagation(e);
//     }

     return wReturn;
};

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event		
 * @returns		{Boolean}
 */
document.onmouseout=function(e) {
	// functionname : [document.onmouseout]
     e = window.event || e;
     em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     if(BrowserDetect.browser == "Firefox" && (em.className == "TabSel" || em.className == "TabGen")) return true; // 파이어폭스에서 탭 풍선도움말 문제
     
     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmouseout(em);
//             stopPropagation(e);
//     }

     return wReturn;
};

/**
 * @description	미결
 * @name		Flexformscripthead#
 * @event		
 * @returns		{Boolean}
 */
document.onmouseup = function(e) {
	// functionname : [document.onmouseup]
     e = window.event || e;
     
     // 셀 크기 조정 정보 초기화
     if(wIsResizing) {
			ResizeObject.table.parentNode.parentNode.setAttribute("cellsize", ResizeObject.cellSizes.join(";"));
			
			for(var i = ResizeObject.cellSizes.length - 1; i >= 0; i--) {
				ResizeObject.cellSizes.pop();
			}
			ResizeObject.cellSizes = null;
			ResizeObject.table = null;
			ResizeObject.tableRow = null;
			ResizeObject = null;
			
			wIsResizing = false;
			
			return false;
     }
     
     // 컬럼 이동 정보 초기화a
     if(wIsColumnMove) {
    	 movingOfSheetColumnSuccess();
    	 return false;
     }
	 
     if (e.button==2) return false;
     var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
     if (em == null) return false;
     if(em.className =="ComboBox" || em.className =="TextBox" || em.className == "CommandButton") return true;
     
     var wReturn = true;
//     if (em.tagName == "TD" && searchSheet(em) != null){
//             wReturn = Sheet_onmouseup(em);
//             stopPropagation(e);
//     }

     return wReturn;
};

/**
 * @description	미결
 * @param		{Object}
 * @returns		{Boolean}
 * @example		미결
 */
function preventbubble(evt){
	evt = evt || window.event;
	if (evt.stopPropagation){
		evt.stopPropagation();
		evt.preventDefault();
	}else if(typeof evt.cancelBubble != "undefined"){
		evt.cancelBubble = true;
		evt.returnValue = false;
	}
	return false;
};

///***************************************************************************
//     데이터시트 콘트롤의 이벤트 처리함수 부분이다
// ***************************************************************************/
//function Sheet_onmousedown(em) {
//
//	if (em.tagName != "TD" || 
//	    (em.className != "ColHead" && em.className != "lColHead" && em.className != "RowHead")) return false;
//	
//	var wTable = em.parentNode;
//	while(wTable.tagName != "TABLE") wTable = wTable.parentNode;
//	
//	var dir = getDirection(em);
//	if (dir == "") {
//		return;
//	}
//	wIsResizing = true;
//	
//	ResizeObject = new resizeObject();
//	
//	ResizeObject.em = em;
//	ResizeObject.dir = dir;
//	
//	ResizeObject.grabx = window.event.clientX;
//	ResizeObject.graby = window.event.clientY;
//	
//	ResizeObject.width = em.offsetWidth;
//	ResizeObject.height = em.offsetHeight;
//	ResizeObject.left = em.offsetLeft;
//	ResizeObject.top = em.offsetTop;
//	
//	ResizeObject.table = wTable;
//	ResizeObject.tableWidth = wTable.style.pixelWidth;
//	
//	var wArr = wTable.parentNode.parentNode.getAttribute("cellsize").split(";");  ///
//	
//	ResizeObject.cellSizes = new Array(wArr.length);
//	for (var i = 0; i < wArr.length; i++) ResizeObject.cellSizes[i] = parseInt(wArr[i]);
//	
//	ResizeObject.colCount = ResizeObject.cellSizes.length;
//	ResizeObject.headerRows = parseInt(wTable.parentNode.parentNode.getAttribute("headerrows"));
//	
//	var wRowIndex = em.parentNode.rowIndex + em.rowSpan - 1; 
//	
//	ResizeObject.tableRow = wTable.rows[wRowIndex];
//	ResizeObject.rowHeight = wTable.rows[wRowIndex].offsetHeight;
//	
//	return;
//};

//function Sheet_onmouseup(em) {
//	if (ResizeObject != null){
//		ResizeObject.table.parentNode.parentNode.setAttribute("cellsize", ResizeObject.cellSizes.join(";"));
//		
//		for(var i = ResizeObject.cellSizes.length - 1; i >= 0; i--) ResizeObject.cellSizes.pop();
//		ResizeObject.cellSizes = null;
//		ResizeObject.table = null;
//		ResizeObject.tableRow = null;
//		ResizeObject = null;
//		
//		wIsResizing = false;
//		
//		return false;
//	} 
//	
//	if(em == null) {
//		em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
//	}
//	
//	if (em.tagName=="TD" && (em.className == "ColHead" || em.className == "lColHead")){
//		    var wSheet = searchSheet(em);
//		    var wResult = wSheet.sortTable(em);
//		    wSheet.setResultOfSort(wResult); 
//		    return false;
//	    
//	} else if (em.tagName=="TD" && em.className == "RowHead"){
//	    var wSheet = searchSheet(em);
//	    var wMoveOverTR = searchRow(em);
//	    
//	    if (wMoveOverTR != null) {
//	        
//	       //클릭한 줄이 삭제된 경우
//	        if (wSheet.clickedTR && wSheet.clickedTR.rowIndex == -1){
//	            wSheet.clickedTR = null;
//	        }
//	
//	        if (wSheet.clickedTR ) 
//	            wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//	        wSheet.setRowClass(wMoveOverTR.rowIndex, "SelectedStyle");
//	        
//	        wSheet.clickedTR = wMoveOverTR;
//	        wSheet.lastTRClass="SelectedStyle";
//	        
//	        if (wSheet instanceof ListSheet){
//	        	wSheet.selectRow(em);
//	        } else if (wSheet.controlId.toLowerCase().indexOf("sheet_") >= 0 && wSheet.controlId.toLowerCase().indexOf("listsheet_") < 0){
//	            wSheet.click(em);
//	        }           
//		}
//		
//	    return false;
//	    
//	} else  if(em.tagName == "TD"){
//	
//	    var wSheet = searchSheet(em);
//	    if (wSheet instanceof ListSheet){
//	        var wMoveOverTR = searchRow(em);
//	        if (wMoveOverTR != null) {
//	            if (wSheet.clickedTR) 
//	                wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//	            wSheet.setRowClass(wMoveOverTR.rowIndex, "SelectedStyle");
//	            
//	            wSheet.clickedTR = wMoveOverTR;
//	            wSheet.lastTRClass="SelectedStyle";
//	            
//	            wSheet.selectRow(em);
//	    	}
//	    } else if (wSheet instanceof DataSheet){
//	        var wMoveOverTR = searchRow(em);
//	        if (wSheet.clickedTR && wSheet.clickedTR.rowIndex >= 0) 
//	            wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//	        
//            wSheet.clickedTR = wMoveOverTR;
//            wSheet.lastTRClass=wSheet.getOddEvenStyle(wMoveOverTR.rowIndex);
//	        wSheet.click(em);
//	
//	    }
//	}
//	
//	return true;
//};

//function Sheet_onmousemove(em) {
//
//	if (em.className == "ColHead" || em.className == "lColHead" || em.className == "RowHead"){
//		
//		if (wIsResizing){
//		    resizeCell(window.event.clientX, window.event.clientY);
//		    return true;
//	    } else {
//		    str = getDirection(em);
//		    if (str == "") {
//		    	em.style.cursor = "";
//		    } else {
//		    	str += "-resize";
//		    	em.style.cursor = str;
//		    }
//		}
//		
//	} 
//	var wMoveOverTR = searchRow(em);
//	
//	if (wMoveOverTR != null) {
//	    var sheetObject = searchSheet(em);
//	    wMoveOverTR = sheetObject.dataTable.tBodies[0].rows[wMoveOverTR.rowIndex];
//	    
//	    if (sheetObject.moveOverTR != wMoveOverTR){
//	        sheetObject.moveOverTR = wMoveOverTR;
//	        sheetObject.lastTRClass = sheetObject.moveOverTR.className;
//	        
//	        sheetObject.setRowClass(wMoveOverTR.rowIndex, "MoveStyle");
//	    }
//	}
//	
//	return true;       
//};
//
//function Sheet_onmouseout(em) {
//
//	var wMoveOverTR = searchRow(em);
//	if (wMoveOverTR != null) {
//	    var wSheet = searchSheet(em);
//	    wSheet.setRowClass(wMoveOverTR.rowIndex, wSheet.lastTRClass);
//	}
//	
//	em.style.cursor = "";
//	
//	return true;
//};

/***************************************************************************
  데이터시트 콘트롤의 공통함수 부분이다
***************************************************************************/
var oldscrollTop = 0;
var oldscrollLeft = 0;
var scrollmode = 0;

/**
 * @description	미결
 * @param		{Object}	em
 * @returns		{Void}
 * @example		미결
 */
function scrollAction(em){
	var wTables = em.parentNode.getElementsByTagName("table");
	
	for(var i=0; i<wTables.length; i++){
		var wTable = wTables[i];
		var wTableName = wTables[i].getAttribute("name");
		
		 if(wTableName == "dataTable") {
			 wTable.style.top = (-1) * em.scrollTop + 'px';
			 wTable.style.left = (-1) * em.scrollLeft + 'px';
		 }
		 else if(wTableName == "colHeadTable") wTable.style.left = (-1) * em.scrollLeft + 'px';
		 else if(wTableName == "leftRowTable") wTable.style.top = (-1) * em.scrollTop + 'px';
		 else if(wTableName == "rightRowTable") wTable.style.top = (-1) * em.scrollTop + 'px';
		 else if(wTableName == "bottomCenterTable") wTable.style.left = (-1) * em.scrollLeft + 'px';
	}
	
	var wSheet = searchSheet(em);
    wSheet._setEditControlPosition();
    wSheet.scrollAction(em.scrollTop, em.scrollLeft);

    return;

};

/**
 * @description	미결
 * @param		{Object}	em
 * @returns		{Void}
 * @example		미결
 */
function crossSheetscrollAction(em){
	var wTables = em.parentNode.getElementsByTagName("table");
	wTables[DATA_TABLE].style.top = (-1) * em.scrollTop + 'px';
	wTables[DATA_TABLE].style.left = (-1) * em.scrollLeft + 'px';
	wTables[COL_TABLE].style.left = (-1) * em.scrollLeft + 'px';
	wTables[ROW_TABLE].style.top = (-1) * em.scrollTop + 'px';
	
    return;

};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function resizeObject() {
	this.dir = ""; 
	this.grabx = null; 
	this.graby = null;
	this.width = null;
	this.height = null;
	this.left = null;
	this.top = null;
	
	this.table = null;
	this.tableWidth = null;
	this.cellSizes = null;
	this.ColCount = 0;
	
	this.tableRow = null;
	this.rowHeight = null;
	
	this.cellIndex = 0;
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function moveObject() {
	this.grabx = null; 
	this.pickColumn = 0;
	this.pickCell = null;
	this.pickTableName = "";
	this.changeColumn = 0;
	this.sheet = null;
	this.emTr = null;
	this.cellSizes = [];
	this.mergeRow = 0;
	this.emTrIndex = 0;
	this.div = null;
	this.browserX = 0;
};

/**
 * @description	미결
 * @param		{Object}	em
 * @returns		{String}
 * @example		미결
 */
function getDirection(em) {
	var xPos, yPos, offset, dir;
	dir = "";
	
	if(navigator.userAgent.indexOf('Firefox') >= 0){
		offset = em.offsetParent;
		var offsetHeight = 0;
		var offsetWidth = 0;

		while (offset) {
			offsetHeight += offset.offsetTop;
			offsetWidth += offset.offsetLeft;
			offset = offset.offsetParent;
		}

		xPos = event.pageX - em.offsetLeft - offsetWidth;
		yPos = event.pageY - em.offsetTop - offsetHeight;		
		
	}else{
		xPos = window.event.offsetX;
		yPos = window.event.offsetY;
		offset = 8;		
	}
	
	if (yPos > em.offsetHeight-offset) dir = "s";
	if (xPos > em.offsetWidth-offset) dir += "e";	
	
	return dir;
};

/**
 * @description	미결
 * @param		{Number}	pClientX
 * @param		{Number}	pClientY
 * @returns		{Undefined}
 * @example		미결
 */
function resizeCell(pClientX, pClientY){
//	var xPos, yPos, str;
//	var xMin = 2; var yMin = 19; 
//	var wWidth = 0;
	var isRight = false;
	wIsResizing = true;
	
	var wTable = ResizeObject.em.parentNode;
	while(wTable.tagName != "TABLE") wTable = wTable.parentNode;
	
	if(wTable.getAttribute("name").match(/right/) != null) isRight = true;
	
	var wControl = controls[wTable.parentNode.parentNode.getAttribute("ctlname")];
	var wHeadSpanInfo = wControl.headSpanInfo;
	
	if (ResizeObject.dir.indexOf("e") != -1) {
		// 위치이동량을 계산한다
	    var wIncrementX = pClientX - ResizeObject.grabx;
		
		// 바뀐 셀번호를 구한다
		var wRow = ResizeObject.em.parentNode;
		var wCellIndex = ResizeObject.em.cellIndex;
		var wChangedColNum = getColNum(wHeadSpanInfo, wRow.rowIndex>1&&wCellIndex==0?0:wRow.rowIndex, wCellIndex);
		if (ResizeObject.cellSizes[wChangedColNum] + wIncrementX < 1) return;

		ResizeTableWidth(wControl, wChangedColNum, wIncrementX, isRight);
	    
		ResizeObject.grabx = pClientX;
		ResizeObject.tableWidth += wIncrementX;
	}
	if (ResizeObject.dir.indexOf("s") != -1){
	    var wIncrementY = pClientY - ResizeObject.graby;
	    wIncrementY = wIncrementY / searchSheet(wTable).rowsPerDataRow;
	    
//		if (ResizeObject.rowHeight + wIncrementY < 19) return;
//		var scrollHeight = wControl.tagObject.getElementsByTagName("DIV")[0].style.height.match(/\d+/)[0] - 19;
		// ResizeObject.tableRow.height = (ResizeObject.rowHeight + wIncrementY)+'px'
		//20110415 변겸함 chrome 적용
	  	ResizeObject.tableRow.setAttribute("height",ResizeObject.rowHeight + wIncrementY); 
		ResizeTableHeight(ResizeObject.table, ResizeObject.tableRow.rowIndex, ResizeObject.rowHeight + wIncrementY);
		
		ResizeObject.graby = pClientY;
		ResizeObject.rowHeight += wIncrementY;
	}
};

/**
 * @description	미결
 * @param		{Object}	control
 * @param		{Number}	colNum
 * @param		{Number}	changeSize
 * @param		{Boolean}	isRight
 * @returns		{Undefined}
 * @example		미결
 */
function ResizeTableWidth(control, colNum, changeSize, isRight) {
	var wHeaderRows = ResizeObject.headerRows;
	var wTables = control.tagObject.getElementsByTagName("table");
	var frozenRight = searchSheet(wTables[0]).frozenColsRight;
	
//	colNum +=  ResizeObject.cellIndex;
	// 표의 사이즈 정보를 바꾸어 준다
    ResizeObject.cellSizes[colNum] += changeSize;
    var repeat = false;
    var repeatWidth = "";

    for (var i = 0; i < wTables.length; i++){
		var wTable = wTables[i];
		var notRight = wTable.getAttribute("name").match(/right/i) == null;
		
		if(!notRight && !isRight) continue;
		if(notRight && isRight) {
			repeat = true;
			continue;
		}
		
		var wTableSizeChanged = false;
		var wWidth = 0;
		for (var wRowNum=0; wRowNum < wHeaderRows; wRowNum++){
		    var wRow = wTable.tBodies[0].rows[wRowNum];
			var wCellIndex = getcellIndex(control.headSpanInfo, wRowNum, colNum);
			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다 
			if (wCellIndex >= wTable.rows[wRowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
			
		    // Span을 감안하여 셀사이즈를 부여한다.
			var wCell = wRow.cells[wCellIndex];
		    var wColSpan = wCell.colSpan;
		    wWidth = 0;
		    for (var j = 0 ; j < wColSpan; j++) {
		    	var wColNum = colNum + j;
		    	wWidth += ResizeObject.cellSizes[wColNum];
		    	if (j > 0) wWidth++;
		    }
		    wWidth = wWidth + "px";
	
		    wRow.cells[wCellIndex].style.width = wWidth;
		    repeatWidth = wWidth;
		    wTableSizeChanged = true;
		}
		if (wTableSizeChanged){
			wTable.style.width = (wWidth.match(/\d+/)[0]*1) + "px";
		}
	}
    // 우고정이 있을 경우 데이터 테이블 셀 크기를 다시 조정해준다.
    if(repeat){
    	colNum = colNum+frozenRight;
    	for (var i = 0; i < wTables.length; i++){
    		var wTable = wTables[i];
    		var notRight = wTable.getAttribute("name").match(/right/i) == null;
    		
    		if(!notRight) continue;
    		
    		var wTableSizeChanged = false;
    		for (var wRowNum=0; wRowNum < wHeaderRows; wRowNum++){
    			var wRow = wTable.tBodies[0].rows[wRowNum];
    			var wCellIndex = getcellIndex(control.headSpanInfo, wRowNum, colNum);
    			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다 
    			if (wCellIndex >= wTable.rows[wRowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
    			
    			// Span을 감안하여 셀사이즈를 부여한다.
    			
    			wRow.cells[wCellIndex].style.width = repeatWidth;
    			wTableSizeChanged = true;
    		}
    		if (wTableSizeChanged){
    			wTable.style.width = (repeatWidth.match(/\d+/)[0]*1) + "px";
    		}
    	}
    }
    
    // 스크롤을 위한 사이즈 조정
	control.resetScroll();
};

/**
 * @description	미결
 * @param		{Object}	pTable
 * @param		{Number}	pRowNum
 * @param		{Number}	pSize
 * @returns		{Undefined}
 * @example		미결
 */
function ResizeTableHeight(pTable, pRowNum, pSize) {
	var wTables = pTable.parentNode.getElementsByTagName("table");
	var control = controls[wTables[0].parentNode.parentNode.getAttribute("ctlname")];
	
	var perDataRows = searchSheet(wTables[0]).rowsPerDataRow;
	
	for (var i = 0; i < wTables.length; i++){
		var wTable = wTables[i];
		
		if(/bottom/.test(wTable.getAttribute("name"))) {
			wTable.style.top = control.dataTable.scrollHeight + 1 + "px";
			continue;
		}
//		if (wTable == pTable) continue;
		if (wTable.tBodies[0].rows.length - 1 < pRowNum) continue;
		
		//wTable.tBodies[0].rows[pRowNum].height = pSize;
		for(var j=0; j<perDataRows; j++){
			wTable.tBodies[0].rows[pRowNum - j].setAttribute("height",pSize);
		}
	} 
    
    // 스크롤을 위한 사이즈 조정
	control.resetScroll();
};

/**
 * @description	미결
 * @param		{Number}	pClientX
 * @returns		{Void}
 * @example		미결
 */
// 컬럼 이동 함수
function movingOfSheetColumn(pClientX){
	// 현재 마우스의 가로 위치에 시트의 left 값을 빼서 계산
	MoveObject.div.style.left = (pClientX + MoveObject.grabx) + "px";
	MoveObject.pickCell.className = "MovePickCell";
	
	var wSheet = MoveObject.sheet; // 시트객체
	var scrollPanel = MoveObject.sheet.scrollPanel; // 스크롤 div
	var sheetSize = MoveObject.browserX * (-1); // 바꿔야 할 td태그의 위치 계산용
	var pickTableName = MoveObject.pickTableName; // 현재 td태그의 테이블 Name 값
	
	// 좌측 또는 우측 고정열이 아닐 경우에만 현재 시트의 스크롤 위치를 계산한다.
	if(pickTableName == "colHeadTable"){
		sheetSize += scrollPanel.scrollLeft * (-1);
	}
	// 우측 고정 테이블 일때 스크롤 최대 값을 항상 준다.
	else if(pickTableName == "rightColHeadTable"){
		sheetSize += MoveObject.sheet.scrollPanel.clientWidth - MoveObject.sheet.scrollPanel.scrollWidth;
	}
	
	// 마우스의 이동값과 셀 사이즈로 바뀔 td태그의 index를 찾아낸다.
	var columnLength = MoveObject.cellSizes.length;
	for(var i=0; i<columnLength; i++){
		sheetSize += (MoveObject.cellSizes[i]*1) + 1;
		if(sheetSize >= pClientX){
			MoveObject.changeColumn = i - MoveObject.mergeRow;
			break;
		}
	}
	
	// 0. 이동에 필요한 변수
	var rightColNum = 0; // 우고정열은 논리적인 셀번호와 물리적인 셀번호가 달라 우측고정번호를 계산해 줘야한다.
	var moveTdLeft = pClientX + MoveObject.grabx; // 마우스로 이동하는셀의 left 값
	
	// 우고정열 이동시 rightColNum 을 넣어준다.
	if(pickTableName == "rightColHeadTable"){
		rightColNum = wSheet.frozenColsRight;
		moveTdLeft -= MoveObject.sheet.scrollPanel.getElementsByTagName("div")[0].clientWidth - MoveObject.emTr.clientWidth+14; // 743
	}
	
	var changeColNum = MoveObject.changeColumn - rightColNum; // 셀이동으로 인해 위치가 변경되는 셀의 colNum
	
	// 2. 논리에 맞지않는 상황일때 리턴
	if(moveOldColumn == MoveObject.changeColumn || MoveObject.changeColumn<1 ||
	   pickTableName != "leftColHeadTable" && MoveObject.changeColumn <= wSheet.frozenCols && wSheet.leftRowTable != null ||
	   pickTableName != "rightColHeadTable" && MoveObject.changeColumn >= wSheet.frozenColsRight && wSheet.rightRowTable != null ||
	   pickTableName == "leftColHeadTable" && MoveObject.changeColumn > wSheet.frozenCols ||
	   pickTableName == "rightColHeadTable" && MoveObject.changeColumn < wSheet.frozenColsRight){
		   // 리턴 하기 전에 changeColumn 을 유효한 colNum 으로 바꿔준다.
		   MoveObject.changeColumn = moveOldColumn;
		   return;
	}
	
	// 3. scrollTo 함수 호출 (열단위 만 동작한다.)
	if(pickTableName == "colHeadTable") wSheet.scrollTo(0, changeColNum);
	
	// 5. 마우스가 컬럼 경계선을 이동했는지 판단하기 위한 변수에 새로 이동된 컬럼을 대입
	moveOldColumn = changeColNum;
	
	return;
}

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
// 컬럼 이동 완료
function movingOfSheetColumnSuccess(){
	var wSheet = MoveObject.sheet;
	var perDataRow = wSheet.rowsPerDataRow;
	var headRow = wSheet.headRows;
	var pickColNum = MoveObject.pickColumn; // 이동시킨 셀의 최초 Physical ColNum
	var changeColNum = MoveObject.changeColumn + MoveObject.mergeRow; // 이동시킨 셀의 바뀐 Physical ColNum
	var wTables = wSheet.tagObject.getElementsByTagName("table");
	var rightColNum = 0;
	var wTr = null;
	var wTableName = "";
	var realRowMerge = 1;
	
	MoveObject.pickCell.className = "ColHead";
	MoveObject.div.parentNode.removeChild(MoveObject.div);
	
	// 1. 셀 사이즈 재조정 및 sheetCol 값 변경
	if(pickColNum != changeColNum && changeColNum>0){
		// 셀 사이즈 재조정
		var headCells =wSheet.colHeadTable.rows[0].cells;
		var headCellLength = headCells.length;
		var cellSize = ""; 
		
		for (var i=0; i<headCellLength; i++){
			cellSize += headCells[i].clientWidth + ";";
		}
		
		wSheet.tagObject.setAttribute("cellsize", cellSize);
	
		// sheetCol 값 변경
		var sheetColumns = wSheet.columns;
		var logical = null;
		var logicalNum = []; 
		var Num=0;
		
		// 변경된 셀들의 LogicalNum을 배열에 저장 후 해당 LogicalNum의 sheetCol을 바꿔준다.
		if(/right/i.test(MoveObject.pickTableName)) realRowMerge = 0;
		for(var j=1; j<=perDataRow; j++){
			var wRow = j+headRow-1;
			// 오른쪽 이동시 LogicalNum 저장 
			for(var i=pickColNum+1; i<=changeColNum; i++){
				logical = wSheet.colNumOf(wRow, (j>1? i-realRowMerge: i), CONV_HARD_LOGICAL);
				logicalNum.push(logical);
				if(i == changeColNum){
					logical = wSheet.colNumOf(wRow, (j>1? pickColNum-realRowMerge: pickColNum), CONV_HARD_LOGICAL);
					logicalNum.push(logical);
				}
			}
			// 왼쪽 이동시 LogicalNum 저장 
			for(var i=changeColNum; i<pickColNum; i++){
				if(i == changeColNum){
					logical = wSheet.colNumOf(wRow, (j>1? pickColNum-realRowMerge: pickColNum), CONV_HARD_LOGICAL);
					logicalNum.push(logical);
				}
				logical = wSheet.colNumOf(wRow, (j>1? i-realRowMerge: i), CONV_HARD_LOGICAL);
				logicalNum.push(logical);
			}
			// 배열에 저장한 LogicalNum 으로 시트컬럼 변경
			for(var sColNum=pickColNum; sColNum<=changeColNum; sColNum++,Num++){
				sheetColumns[logicalNum[Num]].sheetCol = sColNum;
			}
			for(var sColNum=changeColNum; sColNum<=pickColNum; sColNum++,Num++){
				sheetColumns[logicalNum[Num]].sheetCol = sColNum;
			}
		}
		
		logicalNum = null;
	}
	
	// 2. 루핑을 돌며 모든 테이블의 td태그 이동
	for(var i=0; i<wTables.length; i++){
		if(pickColNum == changeColNum || changeColNum<=0) break;
		rightColNum = 0;
		wTableName = wTables[i].getAttribute("name");
		
		if(/right/i.test(wTableName)) rightColNum = wSheet.frozenColsRight;
		
		wTr = wTables[i].getElementsByTagName("tr");
		
		if(wTr[0].cells[pickColNum - rightColNum] == undefined || wTr[0].cells[changeColNum - rightColNum] == undefined) continue;
		
		for(var j=0; j<wTr.length; j++){
			realRowMerge = 0;
			// 두번째 줄부터는 줄번호가 RowSpan된상태이므로 한줄이 없다.
			var wRowNum = (j ) % perDataRow + 1;
			if (wRowNum > 1 && rightColNum < 1) --realRowMerge;
			
			var picIndex = pickColNum - rightColNum + realRowMerge;
			var changeIndex = changeColNum - rightColNum + realRowMerge;
			
			if(changeColNum + realRowMerge > pickColNum + realRowMerge){
				wTr[j].insertBefore(wTr[j].cells[picIndex], wTr[j].cells[changeIndex + 1]);
			}else if(changeColNum + realRowMerge - rightColNum - 1 >= 0){
				wTr[j].insertBefore(wTr[j].cells[picIndex], wTr[j].cells[changeIndex - 1].nextSibling);
			}else{
				wTr[j].insertBefore(wTr[j].cells[picIndex], wTr[j].cells[changeIndex]);
			}
		}
	}
	
	// 4. MoveObject 초기화
	MoveObject = null; 
	
	// 5. 전역 변수 초기화
	wIsColumnMove = false;
	wIsColumnMoving = false;
	moveOldColumn = 0;
	moveScrollLeft = 0;
	
	return;
}

/*********************************************************************
 *   셀틀의 스펜상태를 분해하기위한 객체및 함수   
     <<< 사용방법 >>>
     var wTable = document.getElementsByName("sampleTable")[0];
     var wHeadSpanInfos = getHeadSpanInfo(wTable);

     alert(getColNum(wHeadSpanInfos,4,2));
     alert(getcellIndex(wRows,4,getColNum(wHeadSpanInfos,4,2)));
* ********************************************************************/

/**
 * @description	미결
 * @param		{Number}	rowSpan
 * @param		{Number}	colSpan
 * @param		{Number}	colNum
 * @param		{String}	cellIndex
 * @returns		{Undefined}
 * @example		미결
 */
function cellSpanInfo(rowSpan, colSpan, colNum, cellIndex){
    this.rowSpan = rowSpan;
    this.colSpan = colSpan;
    this.colNum  = colNum;
    this.cellIndex = cellIndex;
};

/**
 * @description	미결
 * @param		{String}	wRows
 * @returns		{Undefined}
 * @example		미결
 */
function fillBlankCell(wRows){
    for (var rowNum=0; rowNum < wRows.length; rowNum++){
        var wCells = wRows[rowNum];
        for (var colNum=0;colNum < wCells.length;colNum++){
            var wCellSpanInfo = wCells[colNum];
            
            if (wCellSpanInfo.colSpan > 1){
                // 같은 줄 뒷셀들의 셀번호를 늘려 끼어들 수 있도록 한다. 
                for(var i = wCellSpanInfo.colNum + 1; i < wCells.length;i++){
                    wCells[i].colNum += (wCellSpanInfo.colSpan - 1);
                }
                // 빈칼럼들을 추가한다 
                for(var i = 1; i < wCellSpanInfo.colSpan;i++){
                   var indertPos = wCellSpanInfo.colNum + i;
                   wCells.splice(indertPos, 0, new cellSpanInfo(wCellSpanInfo.rowSpan, 1, indertPos, wCellSpanInfo.colNum));
                }
            }
            
            if (wCellSpanInfo.rowSpan > 1){
               // 아래줄에 rowSpan-1만큼의 줄에 빈셀을 삽입한다.
               for (var i=1;i < wCellSpanInfo.rowSpan;i++){
                    var belowRowNum = rowNum + i;
                    var belowRowCells = wRows[belowRowNum];
                    
                    if (colNum < belowRowCells.length){
                        // 같은 줄 뒷셀들의 셀번호를 늘려 끼어들 수 있도록 한다. 
                        for(var j = colNum; j < belowRowCells.length;j++){
                            belowRowCells[j].colNum++;
                        }
                        // 한칸을 삽입한다
                        belowRowCells.splice(colNum, 0, new cellSpanInfo(1, 1, colNum, -1, false));
                    
                    } else {
                        belowRowCells[belowRowCells.length] = new cellSpanInfo(1, 1, belowRowCells.length, -1);
                    }
                    
               }
            }
        }
    }

};

/**
 * @description	미결
 * @param		{Object}	table
 * @returns		{String}
 * @example		미결
 */
function getHeadSpanInfo(table) {
    var wRows = [];
    var tableLen = table.rows.length;
    
    // rowspan 정보를 담기위한 배열 default값(0) 을 미리 생성한다.
    var rowSpanArr = []; 
    for(var rnum=0; rnum<tableLen; rnum++){
        var colLength = table.rows[rnum].cells.length;
        rowSpanArr[rnum] = [];
        for(var cnum=0; cnum<colLength; cnum++){
        	rowSpanArr[rnum][cnum] = 0;
        }
    }

    for (var wRowNum=0; wRowNum < tableLen; wRowNum++){
        var wRow = [];
        wRows[wRowNum] = wRow;
        
        var cells = table.rows[wRowNum].cells;
        var cellsLen = cells.length;
        var rowSpan = 0; // rowSpan 값
        var colSpan = 0; // colSpan 값
        var rowSpanCnt = 0; // 누적된 rolSpan
        var colSpanCnt = 0; // 누적된 colSpan
        for (var wColNum=0; wColNum <  cellsLen; wColNum++){
            var wCell =  cells[wColNum];
            colSpan = wCell.colSpan;
            rowSpan = wCell.rowSpan;
            
            for(var i=0; i<colSpan; i++){
            	// 컬럼 번호 생성
            	// colSpan 된만큼 같은 cellIndex 값의 colNum을 넣어주기 위해 누적된 span값과 현재 span값을 더해준다.
            	var colNum = wColNum + i + colSpanCnt;
            	
            	// rowSpan이 되어 있다면 해당 rowSpan이 적용되는 줄에서 사용할수 있게 span 된만큼의 줄에 값1 을 넣어준다.
        		for(var j=1; j<rowSpan; j++){
        			rowSpanArr[wRowNum + j][colNum] = 1;
        		};
        		
        		// 현재줄에 rowSpan 되어 있는 셀이 있는지 체크 후 있다면 rowSpanCnt에 span값 1을 누적
        		rowSpanCnt += rowSpanArr[wRowNum][colNum];
        		
        		// 배열에 정보를 넣어준다.
            	wRow[colNum] = new cellSpanInfo(rowSpan, colSpan, colNum, wColNum - rowSpanCnt);
            }
            
            // colSpan값 누적
            colSpanCnt += (colSpan - 1);
        };
    }
    //fillBlankCell(wRows);
    
    return wRows;
};

/**
 * @description	미결
 * @param		{Number}	wRows
 * @param		{String}	rowIndex
 * @param		{String}	cellIndex
 * @returns		{Number}
 * @example		미결
 */
function getColNum(wRows, rowIndex, cellIndex){
    var wReturn = -1;
    
    for (var i = wRows[rowIndex].length - 1; i >= 0;i--){
        if (wRows[rowIndex][i].cellIndex == cellIndex){
            wReturn = wRows[rowIndex][i].colNum;
            break;
        }
    }
    return wReturn;
};

/**
 * @description	미결
 * @param		{Number}	wRows
 * @param		{String}	rowIndex
 * @param		{Number}	colNum
 * @returns		{String}
 * @example		미결
 */
// 시트콜트롤의 getCellIndex(em) 과는 대소문자 차이 
function getcellIndex(wRows, rowIndex, colNum){
    var wReturn = -1;
    
    for (var i = 0; i < wRows[rowIndex].length;i++){
        if (wRows[rowIndex][i].colNum == colNum){
            wReturn = wRows[rowIndex][i].cellIndex;
            break;
        }
    }
    return wReturn;

};

/**
 * @description	미결
 * @param		{Object}	statement
 * @returns		{Object}
 * @example		미결
 */
function RepalceVariable(statement){
	var wStatement = statement.replace(/\r/g," ").replace(/\n/g," ");
    if (wStatement.indexOf("[" + STRING_PARAM)){
    	for (var key in parameters){ 
			if (typeof(parameters[key])=="function") continue;
    		wStatement = wStatement.replaceWord("[" + STRING_PARAM + key + "]", parameters[key]);
    	}
    }
	
	if (wStatement.indexOf("&crlf;") >= 0) 
		wStatement = wStatement.replaceWord("&crlf;", mCoGu);

	if (wStatement.indexOf("[" + STRING_CONTROL)){
    	for (var key in controls){
			if (typeof(controls[key])=="function") continue;
    		wStatement = wStatement.replaceWord("[" + STRING_CONTROL + key + "]", controls[key]);
    	} 
    }

    if (wStatement.indexOf("[" + STRING_USER)){
    	if (wStatement.indexOf(STRING_USER_COGU) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_COGU, mCoGu);
    	if (wStatement.indexOf(STRING_USER_BON) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_BON, mBon);
    	if (wStatement.indexOf(STRING_USER_DATE) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_DATE, mdate);
    	if (wStatement.indexOf(STRING_USER_PARTCODE) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PARTCODE, mPartCode);
    	if (wStatement.indexOf(STRING_USER_PARTNAME) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PARTNAME, mPartName);
    	if (wStatement.indexOf(STRING_USER_ORGACODE) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_ORGACODE, mOrgaCode);
    	if (wStatement.indexOf(STRING_USER_ORGANAME) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_ORGANAME, mOrgaName);
    	if (wStatement.indexOf(STRING_USER_SEQ) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_SEQ, mSeq);
    	if (wStatement.indexOf(STRING_USER_PERSONALID) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PERSONALID, mPersonalId);
    	if (wStatement.indexOf(STRING_USER_PERSONALNAME) >= 0) 
    		wStatement = wStatement.replaceWord(STRING_USER_PERSONALNAME, mPeraonalName);
    }
    
    return wStatement;
};

/**
 * @description	미결
 * @param		{Object}	formula
 * @returns		{Undefined}
 * @example		미결
 */
// 다른 프레임으로 분산된 산식기 호출
function calc(formula){
	var frame = document.getElementsByName("calcPage")[0];
	if (frame != undefined && frame.contentWindow.calc){
	    return frame.contentWindow.calc(formula);
	} else {
		return wLogic.ExecuteLogic(formula);
	}
};

/**
 * @description	미결
 * @param		{Object}	formula
 * @param		{Object}	format
 * @returns		{Undefined}
 * @example		미결
 */
function calcFormatByNum(formula, format){
	var frame = document.getElementsByName("calcPage")[0];
	
	if (frame != undefined && frame.contentWindow.calc){
	    return frame.contentWindow.numberFormat(formula, format);
	} else {
		return numberFormat(formula, format);
	}
};


/* **********************************************************************
 *   가저오기 작업 순차적인 수행을 위해 컨트롤러
 *   지정한 순서대로 가저온다  
 *   Setting 과정에서 발생한 가저오기는 연시 대기작업에 넣어 계속적으로 가저오도록 한다 
 *   Setting 과정에서 발생한 콘트롤 채우기 동작은 대기열에 넣었다가 "fillControl" 문자열을 만나면 일괄수행
 * **********************************************************************/

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function JobControler(){
	this.jobNameList = [];
	this.callerNameList = [];
	this.pageNumList = [];
	this.calledNameList = [];
	this.controlNameToFocus = "";
	this.isWaiting = false;
	this.loadType = 0;
	this.busy = false;
	this.loadType = 0;   // 1: 객체로드  2: 가저오기만으로 구성
};

var jobControler = new JobControler();

// 가저오기 작업목록을 추가한다.  (예:자가소비내역가져오기;소비내역합계가져오기;clear;)
/**
 * @description 미결
 * @param		{string}	jobListString
 * @param		{string}	callerControlName
 * @param		{number}	pageNum
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.reserveJobs = function(jobListString, callerControlName, pageNum){
    // functionname : [JobControler.reserveJobs]
	
	if (pageNum == undefined) pageNum = 0;
	
	var jobNameList = (jobListString || "").split(";");
	if (jobNameList[jobNameList.length-1].length == 0) {
		jobNameList.pop();
	}

	var controlName = callerControlName || "";
	var callerNameList = new Array(jobNameList.length);
	for (var i=0; i < callerNameList.length; i++) {
		callerNameList[i] = controlName;
	}
	
	var pageNumList = new Array(jobNameList.length);
	for (var i=0; i < pageNumList.length; i++) {
		pageNumList[i] = pageNum;
	}
	
	
	// 예약작업이 없을 경우 첫번데이터를 채워 삭제하고 진행할 수 있도록 한다.
	if (this.jobNameList.length == 0){
		this.jobNameList = [null];
		this.callerNameList = [null];
		this.pageNumList = [null];
	}
	

	this.jobNameList = this.jobNameList.concat(jobNameList);
	this.callerNameList = this.callerNameList.concat(callerNameList);
	this.pageNumList = this.pageNumList.concat(pageNumList);
	
	return;
};

/**
 * @description 미결
 * @return		{string}
 * @example		미결
 */
JobControler.prototype.hasJob = function(){
	// functionname : [JobControler.hasJob]

	// this.jobNameList.length는 기본적으로 1이다
	return this.jobNameList.length > 0;

};

//채우기 작업목록을 추가한다.  
/**
 * @description 미결
 * @param		{string}	controlId
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.reserveFiller = function(controlId){
	// functionname : [JobControler.reserveFiller]

	this.reserveJobs("fillControl:" + controlId, "");

return;
};

/**
 * @description 미결
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.notifyComplete = function(){
	// functionname : [JobControler.notifyComplete]
	                   
	this.jobNameList.splice(0, 1);
	this.callerNameList.splice(0, 1);
	this.pageNumList.splice(0, 1);
	this.calledNameList.splice(0, 1);
	
   	if (this.jobNameList.length == 0){
   		this.busy = false;

		// hideAjaxBox();
	} else {
		this.executeNext();
	}
	return;
};

/**
 * @description 미결
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.cancel = function(){
	// functionname : [JobControler.cancel]
  this.jobNameList.clear();
	this.callerNameList.clear();
	this.pageNumList.clear();
	this.calledNameList.clear();
	this.controlNameToFocus = "";
	
	this.busy = false;
	// hideAjaxBox();
	return;
};

/**
 * @description 미결
 * @param		{string}	jobListString
 * @param		{string}	callerControlName
 * @param		{number}	pageNum
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.open = function(jobListString, callerControlName, pageNum){
    // functionname : [JobControler.open]
	
	this.busy = true;
    
    // 화면의 데이터 로드타입 파악
    this.checkLoadType();
    // 진행중 메시지를 보여준다
    //showAjaxBox(jobListString + " 조회 중입니다.", 0);

    
	if (pageNum == undefined) pageNum = 0;
	var canExecute = (this.jobNameList.length == 0);
	
	var controlName = callerControlName || "";
	var jobNameList = (jobListString || "").split(";");
	

	if (jobNameList[jobNameList.length-1].length == 0) {
		jobNameList.pop();

	}
	
	var callerNameList = new Array(jobNameList.length);
	var pageNumList = new Array(jobNameList.length);

	for (var i=0; i < jobNameList.length; i++) {
		callerNameList[i] = controlName;
		pageNumList[i] = pageNum;
	}
	

	this.jobNameList = this.jobNameList.concat(jobNameList);
	this.callerNameList = this.callerNameList.concat(callerNameList);
	this.pageNumList = this.pageNumList.concat(pageNumList);
	
	if (!this.isWaiting && canExecute)	{
		this.execute();
	}
	return;
};

/**
 * @description 미결
 * @param		{string}	jobListString
 * @param		{string}	callerControlName
 * @param		{number}	pageNum
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.isCurrentJob = function(jobListString, callerControlName, pageNum){
	if (this.jobNameList.length == 0) return false;
	return (this.jobNameList[0] == jobListString && this.callerNameList[0] == callerControlName && this.pageNumList[0] == pageNum);
};

/**
 * @description 미결
 * @param		{string}	controlId
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.fillControl = function(controlId){
	// functionname : [JobControler.fillControl]
	                   
	this.open("fillControl:" + controlId, "");

return;
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.execute = function(){
    // functionname : [JobControler.execute]

	this.executeNext();
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.executeNext = function(){
    // functionname : [JobControler.executeNext]

    // 객체채우기 중이면 대기
    if (this.isWaiting) return;

    if (this.jobNameList.length == 0) return;
    
    // calledNameList를 둔 이유는 release시 재 호출을 막기위해
    var index = 0;
    if (this.calledNameList.length > 0){
    	var nextJobFound = false;
    	for (var i = 0; i < this.jobNameList.length;i++){
    		index = i;
    		if (this.calledNameList.indexOf(this.jobNameList[i]) < 0){
    			nextJobFound = true;
    			break;
    		}
    	}
    	if (!nextJobFound) return;
    }
	
	var jobName = this.jobNameList[index];
	var callerName = this.callerNameList[index];
	var pageNum = this.pageNumList[index];
	
	this.calledNameList[this.calledNameList.length] = jobName;
	
	if (jobName.startsWith("fillControl:")){
		var controlName = jobName.substring(12);
		//eval("fillList_" + controlName + "()");
		if (typeof self["fillList_" + controlName] != "undefined"){
			self["fillList_" + controlName]();
		}
	} else if (pageNum != 0) {
		//eval("fillJob_" + jobName + "(\"" + callerName + "\"," + pageNum + ")");
		if (typeof self["fillJob_" + jobName] != "undefined"){
			self["fillJob_" + jobName](callerName, pageNum);
		}
	} else {
		//eval("fillJob_" + jobName + "(\"" + callerName + "\")");
		if (typeof self["fillJob_" + jobName] != "undefined"){
			self["fillJob_" + jobName](callerName);
		}
	}

};

// 객체 로드 작업중 가저오기 방지용
/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
JobControler.prototype.wait = function(){
    // functionname : [JobControler.wait]
	
	this.isWaiting = true;	
};

//객체 로드 작업중 가저오기 재개용
JobControler.prototype.release = function(){
    // functionname : [JobControler.release]

	this.isWaiting = false;	
	if (this.jobNameList.length == 0){
		this.busy = false;
		//hideAjaxBox();
	} else {
		this.executeNext();
	}
};

/**
 * @description 미결
 * @param		{string}	jobListString
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.close = function(jobListString){
    // functionname : [JobControler.close]

    var index = this.jobNameList.indexOf(jobListString);

	this.jobNameList.splice(index, 1);
	this.callerNameList.splice(index, 1);
	this.pageNumList.splice(index, 1);
	
    index = this.calledNameList.indexOf(jobListString);
	this.calledNameList.splice(index, 1);
	
	// 모든작업이 끝난 것이 확인되면 포커스를 주고 빠진다
	if (this.jobNameList.length == 0){
		if (this.controlNameToFocus.length > 0 && controls[this.controlNameToFocus].focus) controls[this.controlNameToFocus].focus();
		this.controlNameToFocus = "";
		this.busy = false;

		//hideAjaxBox();
	} else {
		this.executeNext();
	}
	return;
};

/**
 * @description 미결
 * @return		{void}
 * @example		미결
 */
JobControler.prototype.checkLoadType = function(){
    // functionname : [JobControler.close]
    if (this.loadType != 0) return;
	for (var id in controls) {
		var control = controls[id];
		if (typeof(control)=="function") continue;
		if (control.isKeyControl){
			this.loadType = 1;
			return;
		}
	}
    
	this.loadType = 2;
	return;
};
/* **********************************************************************
*   확인 단추등에 따른 화면 클리어 
* **********************************************************************/
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function clearScreen(){
	location.reload(true);
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function clearSeqScreen(){
    // 콘트롤 값들을 지운다 
	for (var id in controls) {
		if (typeof(controls[id])=="function") continue;
		var wControl = controls[id];
		if (wControl.isSeqClearControl){
			if (wControl instanceof TextBox) wControl.setValue("");
			if (wControl instanceof ComboBox || wControl instanceof ListBox) wControl.setValueToDefault();
			if (wControl instanceof CheckBox) wControl.setValue(0);
			if (wControl instanceof OptionButton) wControl.setValue(0);
			if (wControl.controlId.toLowerCase().indexOf("sheet_") >= 0) {
				wControl.clear();
				wControl.setMaxRows(1);
				wControl.moveTo(1,1);
			}
		}
		if ((wControl instanceof ComboBox || wControl instanceof ListBox) && wControl.callerControlName != "form"){
			wControl.clear();
		}
	}
	
	// 디폴트값 처리
	for (var id in controls) {
		if (typeof(controls[id])=="function") continue;
		var wControl = controls[id];
		if (wControl.isSeqClearControl && wControl.defaultValue.length == 0){
			var value = eval(wControl.defaultValue);
			if (wControl instanceof TextBox) wControl.setValue(value);
			if (wControl instanceof ComboBox || wControl instanceof ListBox) wControl.setValue(value);
			if (wControl instanceof CheckBox)  wControl.setValue(value);
			if (wControl instanceof OptionButton) wControl.setValue(value);
		}
	}
	// 객체 디폴트값처리
	var properties = null;
	for (var id in objects) {
		if (typeof(objects[id])=="function") continue;
		properties = objects[id].recordset[wObject.seq].properties;
		var propertyInfos = objects[id].propertyInfos;
		for (var i=1; i < propertyInfos.length; i++){
			var value = eval(propertyInfos[i].defaultValue);
			var id = propertyInfos[i].id;
			properties[id].value = value;
		}
	}
	
	// Seq추가시 지우지 않는 기존 콘트롤값 승계
	for (var id in objects) {
		if (typeof(objects[id])=="function") continue;
		var propertyInfos = objects[id].propertyInfos;
		for (var i=1; i < propertyInfos.length; i++){
			var propertyInfo = propertyInfos[i];
			for (var j=0; j < propertyInfo.linkControlNames.length; j++){
				var control = controls[propertyInfo.linkControlNames[j]];
				if (!control.isSeqClearControl && (wControl.controlId.toLowerCase().indexOf("sheet_") >= 0)){
					properties[id].value = control.value;
				}
			}
		}
	}
};


/* *****************************************************************************
 *     DEBUG SECTION
 * *****************************************************************************/
    var debugTime = null;
    /**
     * @description	미결
     * @param		{String}	msg
     * @returns		{Undefined}
     * @example		미결
     */
    function checkTime(msg){
    	
    	var checkTime = new Date().getTime();      //시작시간 체크(단위 ms)
    	if (debugTime != null){
        	var nDiff = checkTime - debugTime;      //두 시간차 계산(단위 ms)
    		console.log(getText("message_flexformscripthead_001", "{0}\n execution time: {1}ms", [msg, nDiff]));
    	}
    	debugTime = checkTime;
    }

    /**
     * @description	미결
     * @returns		{Undefined}
     * @example		미결
     */
	function Debugger(){
		this.debugLayer = null;
		this.xPos = "800px";
		this.enable = false;

	} 
	
	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.setLayer = function() {
        // functionname : [Debugger.setLayer]

		if (!this.enable) return;
		if (this.debugLayer == null){
			if (document.getElementsByName("DebugLayer") && document.getElementsByName("DebugLayer").length > 0){
				this.debugLayer = document.getElementsByName("DebugLayer")[0];
				this.debugLayer.style.left = this.xPos;
			} else {
				return;
			}
		}
		if (this.debugLayer){
			this.debugLayer.style.display = "block";
		}
	};
	
	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.print = function() {
        // functionname : [Debugger.print]

		if (!this.enable) return;

		this.setLayer();
		
		if (this.debugLayer == null) return;
	    var msg = "";
	    for (var i = 0; i < arguments.length;i++) msg += arguments[i] + ",&nbsp;";
	    this.debugLayer.innerHTML = this.debugLayer.innerHTML + "<BR/>" + msg;
	};

	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.clear = function() {
        // functionname : [Debugger.clear]

		if (!this.enable) return;

		if (this.debugLayer == null) return;
		this.debugLayer.innerHTML = "";
    	this.hide();
	};

	/**
	 * @description 미결
	 * @return		{undefined}
	 * @example		미결
	 */
	Debugger.prototype.hide = function() {
        // functionname : [Debugger.hide]

		if (!this.enable) return;

		if (this.debugLayer == null) return;
		this.debugLayer.style.left = "-10000px";
		this.debugLayer.style.display = "none";
	};

	/**
	 * @description 미결
	 * @return		{void}
	 * @example		미결
	 */
	Debugger.prototype.copy = function() {
        // functionname : [Debugger.copy]

		if (arguments.length == 0) return;
	    var wString = "" + arguments[0];
	    
	    if (window.clipboardData) // IE 
	    { 
	        // var txt = window.clipboardData.getData('Text');         
	        var result = window.clipboardData.setData('Text', wString); 
	    } 
	    return;
	};

	/**
	 * @description 미결
	 * @return		{String}
	 * @example		미결
	 */
	Debugger.prototype.getStackTrace = function() {
        // functionname : [Debugger.getStackTrace]

		var callstack = [];
		  var isCallstackPopulated = false;
		  try {
		    i.dont.exist+=0; //doesn't exist- that's the point
		  } catch(e) {
		    if (e.stack) { //Firefox, Chrome
		    	if (BrowserDetect.browser == "Chrome"){
		    	  var cutStart = 0;
		  	      var lines = e.stack.split('\n');
			      for (var i=0, len=lines.length; i<len; i++) {
			        if (lines[i].match(/^\s*[A-Za-z0-9\-._\s\$]+\(/)) {
			        	if (lines[i].indexOf("printStackTrace") > 0){
			        		cutStart = lines[i].indexOf("printStackTrace");
			        	}
			        	
			            callstack.push(lines[i].substring(cutStart, lines[i].indexOf("(")).trim());
			        }
			      }

			      //Remove call to printStackTrace()
			      callstack.shift();
			      isCallstackPopulated = true;
			      
		    	} else { //Firefox
		  	      var lines = e.stack.split('\n');
			      for (var i=0, len=lines.length; i<len; i++) {
			        if (lines[i].match(/^\s*[A-Za-z0-9\-_\$]+\(/)) {
			          callstack.push(lines[i]);
			        }
			      }
			      

			      //Remove call to printStackTrace()
			      callstack.shift();
			      isCallstackPopulated = true;
		    	}
		    }
		    else if (window.opera && e.message) { //Opera
		      var lines = e.message.split('\n');
		      for (var i=0, len=lines.length; i<len; i++) {
		        if (lines[i].match(/^\s*[A-Za-z0-9\-_\$]+\(/)) {
		          var entry = lines[i];
		          //Append next line also since it has the file info
		          if (lines[i+1]) {
		            entry += " at " + lines[i+1];
		            i++;
		          }
		          callstack.push(entry);
		        }
		      }
		      //Remove call to printStackTrace()
		      callstack.shift();
		      isCallstackPopulated = true;
		    }
		  }
		  if (!isCallstackPopulated) { //IE and Safari

		    var currentFunction = arguments.callee.caller;
		    while (currentFunction) {
		      var fn = currentFunction.toString();
		      var fname = fn.substring(fn.indexOf("function") + 8, fn.indexOf('(')).trim(); // || 'anonymous';
		      var index = fn.indexOf("functionname : [");
		      if (fname.length == 0 && index > 0){
		    	  fname = fn.substring(index + 16, fn.indexOf("]"));
		      }
		      
		      fname = fname || 'anonymous';
		      
		      if (callstack.indexOf(fname) >= 0) break;
		      
		      callstack.push(fname);
		      
		      currentFunction = currentFunction.caller;
		    }
		  }
		  
		  
		  for(var i = 0; i < callstack.length;i++){
			  if (callstack[i].startsWith("Debugger.")){
				  callstack.shift();
			  }
		  }
		  return callstack;
	};
	
	/**
	 * @description 미결
	 * @return		{void}
	 * @example		미결
	 */
	Debugger.prototype.printStackTrace = function() {
        // functionname : [Debugger.printStackTrace]

		if (!this.enable) return;
		
		var callstack = this.getStackTrace();
		if (callstack.length > 0){
		    this.print(callstack.reverse().join('<br/>'));
		}
		
		return;
	};

	/**
	 * @description 미결
	 * @param		{string}	functionName
	 * @return		{boolean}
	 * @example		미결
	 */
	Debugger.prototype.isCallerFunction = function(functionName) {
        // functionname : [Debugger.isCallerFunction]

		var wReturn = false;
		
		var callstack = this.getStackTrace();
		for (var i = 0; i < callstack.length; i++){
			if (callstack[i].trim() == functionName){
				wReturn = true; break;
			}
		}
		
		return wReturn;
	};

	var debug = new Debugger();


	/* *****************************************************************************
	*  MAKE FILE UPLOAD AGENT
	   arguments : parentNode: iframe's parentName name:iframe's name
	               linkname: textbox controlName for filename
	               picname : picture controls name for preeview
	               ftpDir  : ftp upload directory under gw root dir 
	* *****************************************************************************/
	/**
	 * @description	미결
	 * @param		{Object}	parentNode
	 * @param		{String}	name
	 * @param		{String}	linkname
	 * @param		{String}	picname
	 * @param		{Object}	ftpDir
	 * @param		{Boolean}	noftp
	 * @param		{Boolean}	nozip
	 * @param		{Object}	directUploadGu
	 * @returns		{Undefined}
	 * @example		미결
	 */
	function IFrame_Upload(parentNode, name, linkname, picname, ftpDir, noftp, nozip, directUploadGu) {
		this.noftp = (noftp == undefined ? false : noftp);
		this.nozip = (nozip == undefined ? false : nozip);
		
	    if(parentNode == null){
	        parentNode = document.body;  
	        try {
	    	    parentNode.removeChild(document.getElementsByName(name)[0]);
	        } catch (e){}
	    } else {
	        if (document.getElementsByName(name).length != 0){
	        	removeTag(document.getElementsByName(name)[0]);
	        }
	    }

//	    var iframe = document.createElement("iframe");  
//	    iframe.name = iframe.id   = name;
//	    iframe.linkname=linkname;
//	    iframe.picname=picname;
//	    iframe.directuploadgu = directUploadGu;
//	    parentNode.appendChild(iframe);  
	    parentNode.innerHTML = "<iframe name='" + name + "' id='" + name + "' src='about:blank'></iframe>";
	    var iframe = parentNode.childNodes[0];
	    iframe.setAttribute("linkname", linkname);
	    iframe.setAttribute("picname",  picname);
	    iframe.setAttribute("directUploadGu", directUploadGu); 

	    iframe.doc = null;  

	    if(iframe.contentDocument)                // Firefox, Opera  
	       iframe.doc = iframe.contentDocument;  

	    else if(iframe.contentWindow)             // Internet Explorer  
	       iframe.doc = iframe.contentWindow.document;  

	    else if(iframe.document)                  // Others?  
	       iframe.doc = iframe.document;  

	    if(iframe.doc == null)  
	       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

	    iframe.doc.open();  
	    iframe.doc.close();  
	    
//	    var frm = iframe.doc.createElement("<form method='post' name='frmupload"+name+"' action='fileUpload.do?id="+name+"' enctype='multipart/form-data'>");  
	    var frm = iframe.doc.createElement("form");
	    frm.method = "post";
	    frm.name = "frmupload"+name;
	    frm.action = "fileUpload.do?id="+name;
	    frm.enctype = "multipart/form-data";
//	    iframe.doc.body.appendChild(frm);  
	    parentNode.appendChild(frm);  
	    /*frm.method ="POST" ;
	     frm.enctype="multipart/form-data";
	   frm.name   = frm.id ="frmupload" ;
	    frm.action ="fileUpload2.action" ; */ // fileUpload2.action은 압축하지 않고 올리기 fileUpload2.action는 압축하여 올리기
	    this.frm = frm;
	     
	    var inputctltemp = iframe.doc.createElement("input");
	    inputctltemp.type = "file";  
	    inputctltemp.name = inputctltemp.id  ="upload" ;
	    
	    var inputctl = iframe.doc.createElement("input");
	    inputctl.type = "file";  
	    inputctl.name = inputctl.id  ="upload" ;
	    inputctl.linkname=linkname;
	    inputctl.picname=picname;	    
	    inputctl.directuploadgu = directUploadGu;
	    
	    frm.appendChild(inputctl);
	    this.inputctl = inputctl;

	    var dirctl = iframe.doc.createElement("input");
	    dirctl.type = "hidden";  
	    dirctl.name="uploadSubDir" ;
	    dirctl.id  ="uploadSubDir" ;
	    dirctl.value = ftpDir;
	     
	    frm.appendChild(dirctl);
	    
	    var filenamectl = iframe.doc.createElement("input");
	    filenamectl.type = "hidden";  
	    filenamectl.name="uploadFileName" ;
	    filenamectl.id  ="uploadFileName" ;
	    filenamectl.value = "";
	     
	    frm.appendChild(filenamectl);
	    
	    var uploadPrefixctl = iframe.doc.createElement("input");
	    uploadPrefixctl.type = "hidden";  
	    uploadPrefixctl.name="uploadPrefix" ;
	    uploadPrefixctl.id  ="uploadPrefix" ;
	    uploadPrefixctl.value = "";
	     
	    frm.appendChild(uploadPrefixctl);
	    
	    var noftpctl = iframe.doc.createElement("input");
	    noftpctl.type = "hidden";  
	    noftpctl.name="noftp" ;
	    noftpctl.id  ="noftp" ;
	    noftpctl.value = this.noftp;
	     
	    frm.appendChild(noftpctl);
	    
	    var nozipctl = iframe.doc.createElement("input");
	    nozipctl.type = "hidden";  
	    nozipctl.name="nozip" ;
	    nozipctl.id  ="nozip" ;
	    nozipctl.value = this.nozip;
	     
	    frm.appendChild(nozipctl);
	    
	    iframe.onload = function(){
	    	// functionname : [IFrame_Upload.onload]

	        if (this.picname.length != 0){
	        	var picDir = parent.getControlById(this.linkname).value;
		        //var picDir = parent.document.getElementById(this.linkname).value;
	            parent.controls[this.picname].setPicture("file:///" + picDir);
	        }
	        removeTag(document.getElementsByName(this.name)[0]);
	    };
	    iframe.onreadystatechange = function(){
	    	// functionname : [IFrame_Upload.onreadystatechange]

		    if (this.readyState == 'complete') {
		        if (this.picname.length != 0){
		        	var picDir = parent.getControlById(this.linkname).tag;
		            //var picDir = parent.document.getElementById(this.linkname).tag;
		            parent.controls[this.picname].setPicture("file:///" + picDir);
		        }
		        removeTag(document.getElementsByName(this.name)[0]);
		    }
		};
	    
	    inputctl.onchange = function(){
	    	// functionname : [IFrame_Upload.onchange]

	        var filePath = this.value;
			if (this.value.indexOf("\\fakepath\\") >= 0) {
				this.select();
				if (document.selection)
					filePath = document.selection.createRange().text.toString();
				else 
					filePath = this.files[0].name;
				this.blur();
		    }
	    
	        var fileName = "";
	        if (filePath.indexOf("\\") > 0) {
	            fileName = filePath.split("\\")[filePath.split("\\").length -1];
	        }
	        
//	        var fileTag = timeEncodeString();
//	        this.document.getElementsByName("uploadFileName")[0].value = fileName;
	        
	        //parent.getControlById(this.linkname).setValue(fileName);
	        //parent.getControlById(this.linkname).tag = filePath;
	        controls[this.linkname].setValue(filePath);
	        //parent.document.getElementById(this.linkname).tag = filePath;
	        
	        if (this.picname.length != 0){
	        	
	        	
	            parent.controls[this.picname].setPicture("file:///" + filePath);
	        }
	        
	        if (this.directuploadgu == true){
	        	if (jUploadPrefix.length == 0) {
	         		jUploadPrefix = timeEncodeString();
	        	}
	        	this.parentNode.uploadPrefix.value = jUploadPrefix;
		        this.parentNode.submit();
	        }
		};
	    
	    this.selectFile = function(){
	    	// functionname : [IFrame_Upload.selectFile]
	    	
	    	this.inputctl.click();
	    };
	    
	    this.uploadFile = function(){
	    	// functionname : [IFrame_Upload.uploadFile]
	        this.frm.uploadPrefix.value = jUploadPrefix;

	    	this.frm.submit();
	    };
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
/* *****************************************************************************
*  INFORMATION OBJECT FOR GENERATING EXCEL    
* *****************************************************************************/
function xlGenerationInfo(){
	this.colsNum = 0;
	this.rowsNum = 0;
	this.rowsColors = "";
	this.colsWidth = "";
	this.data = "";
	
	this.fixRows = 0;
	this.fixCols = 0;
	this.decimal = "";
	this.sheetType = 0;		/* 0: EasySheet, 1: CrossSheet */
	this.align = "";		/* SHEET_ALIGN_LEFT:0, SHEET_ALIGN_RIGHT:1, SHEET_ALIGN_CENTER:2 */
	this.format = "";
};

/* *****************************************************************************
*  MAKE EXCEL FILE AGENT(name:iframe's name, func:click time callBack function  
* *****************************************************************************/
/**
 * @description	미결
 * @param		{Object}	parentNode
 * @param		{String}	name
 * @param		{Object}	generationInfo
 * @param		{String}	templateXLSFileName
 * @param		{String}	paramsJXLS
 * @returns		{Undefined}
 * @example		미결
 */
function IFrame_Excel(parentNode, name, generationInfo, templateXLSFileName, paramsJXLS, downFileName) {  
    if(parentNode == null){
        parentNode = document.body;  
        try {
    	    parentNode.removeChild(document.getElementsByName(name)[0]);
        } catch (e){}
    } else {
        if (document.getElementsByName(name).length != 0){
        	removeTag(document.getElementsByName(name)[0]);
        }
    }

    var iframe = document.createElement("iframe");  
    iframe.name = iframe.id   = name;
    parentNode.appendChild(iframe);  

    iframe.doc = null;  

    if(iframe.contentDocument) iframe.doc = iframe.contentDocument;           // Firefox, Opera  
    else if(iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer  
    else if(iframe.document) iframe.doc = iframe.document;                    // Others?  
    if(iframe.doc == null)  
       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

    iframe.doc.open();  
    iframe.doc.close();  
    
    var frm = iframe.doc.createElement("form");  
    iframe.doc.body.appendChild(frm);  
    frm.method ="POST" ;
    frm.name   = frm.id ="frmExcel" ;
    frm.action ="excelDownload.do" ;
    // frm.enctype="multipart/form-data";
    frm.enctype="application/x-www-form-urlencoded";
    this.frm = frm;
    
    var wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "lang" ;
    wControl.value = USER_LANGUAGE;
    frm.appendChild(wControl);

    var wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "colsNum" ;
    wControl.value = generationInfo.colsNum;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "rowsNum" ;
    wControl.value = generationInfo.rowsNum;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "rowsColors" ;
    wControl.value = generationInfo.rowsColors;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "colsWidth" ;
    wControl.value = generationInfo.colsWidth;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "data" ;
    wControl.value = generationInfo.data;
    frm.appendChild(wControl);
     
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "templateXLSFileName" ;
    wControl.value = templateXLSFileName;
    frm.appendChild(wControl);
     
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "paramsJXLS" ;
    wControl.value = paramsJXLS;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "decimal" ;
    wControl.value = generationInfo.decimal;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "sheetType" ;
    wControl.value = generationInfo.sheetType;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "formName" ;
    wControl.value = downFileName;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "align" ;
    wControl.value = generationInfo.align;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "format" ;
    wControl.value = generationInfo.format;
    frm.appendChild(wControl);
    
    wControl = iframe.doc.createElement("input");
    wControl.type = "hidden";  
    wControl.id   = wControl.name = "rowsLevels" ;
    wControl.value = generationInfo.rowsLevels;
    frm.appendChild(wControl);
    
   iframe.onload = function(){
    	// functionname : [IFrame_Excel.uploadFile]
	   
	   setTimeout(function (){removeTag(document.getElementsByName(this.name)[0]);},100);
    };
    iframe.onreadystatechange = function(){
    	// functionname : [IFrame_Excel.onreadystatechange]

        if (this.readyState == 'complete') {
        	removeTag(document.getElementsByName(this.name)[0]);
        }
    };

    this.submit = function(){
    	// functionname : [IFrame_Excel.submit]

    	this.frm.submit();
    };
 } ;

/* *****************************************************************************
*  MAKE FILE DOWNLOAD AGENT  
		parentNode : invisible DIV
		name       : iframe's unduplicated name 
		action     : servlet or action which returns file stream
		params     : need Parameter Object's Array 	  
		
     SAMPLE CODE   :
    	var parent = document.getElementsByName("X")[0];
		var action = "/FlexFrame/certi/certiGenerate.action" ;
		var params = [];
		params[0] = new Parameter("coGu", 3);
		params[1] = new Parameter("yy", 2011);
		
		var iFrame_DownLoad = new IFrame_DownLoad(parent, "XXX", action, params);
		iFrame_DownLoad.submit();
* *****************************************************************************/
 /**
  * @description	미결
  * @param		{Object}	parentNode
  * @param		{String}	name
  * @param		{Object}	action
  * @param		{Object}	params
  * @returns		{Undefined}
  * @example		미결
  */
 function IFrame_DownLoad(parentNode, name, action, params) {  
    if(parentNode == null){
        parentNode = document.body;  
        try {
    	    parentNode.removeChild(document.getElementsByName(name)[0]);
        } catch (e){}
    } else {
        if (document.getElementsByName(name).length != 0){
        	removeTag(document.getElementsByName(name)[0]);
        }
    }
    var iframe = document.createElement("iframe");  
    iframe.name = iframe.id   = name;
    parentNode.appendChild(iframe);  

    iframe.doc = null;  

    if(iframe.contentDocument) iframe.doc = iframe.contentDocument;           // Firefox, Opera  
    else if(iframe.contentWindow) iframe.doc = iframe.contentWindow.document; // Internet Explorer  
    else if(iframe.document) iframe.doc = iframe.document;                    // Others?  
    if(iframe.doc == null)  
       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

    iframe.doc.open();  
    iframe.doc.close();  
    
    var frm = iframe.doc.createElement("form");  
    iframe.doc.body.appendChild(frm);  
    frm.method ="POST" ;
    frm.name   = frm.id ="frmdownload" ;
    frm.action = action ;
    frm.enctype="application/x-www-form-urlencoded";
    this.frm = frm;

    for (var key in params){
		if (typeof(params[key])=="function") continue;

		var wControl = iframe.doc.createElement("input");
	    wControl.type = "hidden";  
	    wControl.id   = wControl.name = params[key].fieldName ;
	    wControl.value = params[key].datas[0];
	    frm.appendChild(wControl);
        
    }

   this.submit = function(){
    	// functionname : [IFrame_DownLoad.submit]

    	this.frm.submit();
    };
} ;

/**
 * @description	미결
 * @param		{String}	scriptPath
 * @param		{String}	callBackString
 * @returns		{Undefined}
 * @example		미결
 */
function ScriptManager(scriptPath, callBackString){
	this.scriptPath = scriptPath;
	this.callBackString = callBackString;
	this.busy = false;
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
ScriptManager.prototype.getScript = function(){
    // functionname : [ScriptManager.getScript]

	var wQueryString = "scriptPath=" 
    	             + this.scriptPath 
			         + "&lang=" + USER_LANGUAGE
    	             + "&tm=" + (new Date()).valueOf();
	this.busy = true;
	ajaxCall("POST", getContextPath() + "/groupware/form/getScript.do", wQueryString, this, "textScript");
};

/**
 * @description 미결
 * @param		{object}	info
 * @param		{object}	message
 * @param		{object}	pFlag
 * @return		{void}
 * @example		미결
 */
ScriptManager.prototype.parseData = function(info, message, pFlag){
	// functionname : [ChartBox.parseData]
   	this.busy = false;
	// 오류 메시지 먼저 파악 
	if (info == null){
		return;
	}
	
    globalEval(info);
    globalEval(this.callBackString);
    
	return;
};

/**
 * @description	미결
 * @param		{String}	src
 * @returns		{Undefined}
 * @example		미결
 */
var globalEval = function globalEval(src) {
    // functionname : [globalEval]
    if (window.execScript) {
        window.execScript(src);
        return null;
    }
    var fn = function() {
        window.eval.call(window, src);
    };
    fn();
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
 function setFireFoxEvent(){
	 // Firefox 에서 event 값을 가져오기 위하여 아래코드를 추가한다 
	 if(navigator.userAgent.indexOf('Firefox') >= 0){ 
	        (function(){
	            var events = ["mousedown", "mouseover", "mouseout", "mousemove", "mousedrag", "click", "dblclick", "keypress", "keydown", "keyup","focus","blur","resize","message"];  
	        	for (var i = 0; i < events.length; i++){
	        	    window.addEventListener(events[i], function(e){ window.event = e;}, true);
	        	}
	        }());
	 };
	 
	 // InnerText 속성을 사용하기 위하여
	 setInnerTextProperty();
 };
 
 /**
  * @description	미결
  * @name			flexformscripthead#getSrcElement
  * @event
  * @returns		{String}
  */
 // Firefox 에서 event 값을 캐취하지 방식이 틀려 firefox 와 다른브라우져에서 쓰는 방식으로 나눔. 
 function getSrcElement(e){
 var srcElement=null;
 
    if(navigator.userAgent.indexOf('Firefox') >= 0){
 		srcElement = e.target;
 	} else {
 		srcElement = e.srcElement;
 	}
 	return srcElement;
 };
 
 /**
  * @description	미결
  * @param			{Object}	element
  * @param			{String}	eventname
  * @param			{Object}	func
  * @returns		{Void}
  * @example		미결
  */
 function setEventHandler(element, eventname, func){

     if (BrowserDetect.browser == "Firefox"){
         // FIrefox의 addEventListener는 onload,onmouseover,onmouseout 에만 적용된다, 나머지는 이 루틴 활용할 것
//         if (eventname != "load" && eventname != "mouseover" && eventname != "mousemove" && eventname != "mouseout" && eventname != "change"&& eventname != "resize") {
    	 if(eventname != "load" && eventname != "message" && eventname != "mouseover" && eventname != "mousemove" && eventname != "mouseout" && eventname != "mouseup" && eventname != "change" && eventname != "dblclick" && eventname != "resize") {
             // 주의 다른 범주내의 함수는 쓸 수 없고 window내의 함수만 쓸 수 있다
             element.setAttribute("on" + eventname, func.name + "(event);");
             return;
         } else  if (eventname == "mousewheel"){
	    	 eventname = "DOMMouseScroll";
	     }
     }

          
 	if (element.addEventListener){  // DOM2: FF, Opera, Chrome
 		element.addEventListener(eventname, func, false);
     
     // IE에서 changedlqpsxmsms propertychange의 value변화값 체크로 확실히 한다.
     } else if (element.attachEvent){ // IE 5+
         if (eventname == "change"){
                 element.attachEvent("onpropertychange", function(e){
                         // Get event details for IE
                         if (!e) e = window.event;

                         if (e.propertyName == 'value' && func != null)
                             func(e);
                     });
         } else {
 		    element.attachEvent("on" + eventname, func);
         }
     } else { // IE 4
         if (eventname == "change"){
             element.onpropertychange = func;
         } else {
 	        element["on" + eventname] = func;
         }
     }
 	
 	EventCache.add(element, eventname, func, false);
 	return;
 };
 
 /* 20161230 추가(차중훈) */
 function removeEventHandler(element, eventname, func){
	 if(element == null) return;
	 
	 var eventNameWithOn = "on" + eventname;
	 
	 if( BrowserDetect.browser == "Firefox" ){
         // FIrefox의 addEventListener는 onload,onmouseover,onmouseout 에만 적용된다, 나머지는 이 루틴 활용할 것
    	 if( eventname != "load"		&& 
    		 eventname != "message"		&& 
    		 eventname != "mouseover"	&& 
    		 eventname != "mousemove"	&& 
    		 eventname != "mouseout"	&& 
    		 eventname != "mouseup"		&& 
    		 eventname != "change"		&& 
    		 eventname != "dblclick"	&& 
    		 eventname != "resize" ){
             // 주의 다른 범주내의 함수는 쓸 수 없고 window내의 함수만 쓸 수 있다
             element.removeAttribute(eventNameWithOn);
             return;
         }
    	 else if( eventname == "mousewheel" ){
	    	 eventname = "DOMMouseScroll";
	     }
     }
	 
	 if( element.removeEventListener ){	// DOM2: FF, Opera, Chrome
		 element.removeEventListener(eventname, func, false);
	 }
	 else if( element.detachEvent ){	// IE 5+
//		 if (eventname == "change"){
//			 eventNameWithOn = "onpropertychange";
//		 }
		 element.detachEvent(eventNameWithOn, func);
	 }
	 else{	// IE 4
		 if(eventname == "change"){
			 element.onpropertychange = null;
		 }
		 else{
			 element[eventNameWithOn] = null;
		 }
	 }
	 
	 return;
 }
 /* 20161230 추가(차중훈) */
 
 /**
  * @description	미결
  * @param			{Object}	element
  * @param			{String}	eventname
  * @param			{Object}	func
  * @returns		{Void}
  * @example		미결
  */
 function setTouchEventHandler(element, eventname, func){
	//터치이벤트
     var mc = Hammer(element, {
         touchAction: 'pan-x pan-y'
     });
     mc.get('pan').set({ direction: Hammer.DIRECTION_ALL });
     mc.get('swipe').set({ direction: Hammer.DIRECTION_ALL });
     
     if(eventname == "scroll"){
    	 mc.on("pan swipe rotate pinch tap doubletap press", function(ev) {
//         console.log("델타x : "+ev.deltaX +" , 델타Y : "+ev.deltaY +" , ev : "+ev);
    		 var scrollDiv = element.getElementsByTagName("div")[0];
    		 var scroll_Y = ev.deltaY/2;
    		 var scroll_X = ev.deltaX/2;
    		 
    		 if(Math.abs(scroll_Y) >= Math.abs(scroll_X)){
    			 scrollDiv.scrollTop += (-1) * scroll_Y;
    		 }else{
    			 scrollDiv.scrollLeft += (-1) * scroll_X;
    		 }
    		 
    		 // 스마트 그리드 동작을 위해 scrollAction 호출
    		 var wSheet = searchSheet(scrollDiv);
        	 if(wSheet == undefined || wSheet == null) return;
    	     wSheet.scrollAction(scrollDiv.scrollTop, scrollDiv.scrollLeft);
    	 });
     }

     
	 return;
 };

 /**
  * @description	미결
  * @param			{Object}	evt
  * @returns		{Object}
  * @example		미결
  */
function getShiftKeyPressed(evt){
    return evt.shiftKey; 
}

/**
 * @description	미결
 * @param		{Object}	evt
 * @returns		{Boolean}
 * @example		미결
 */
function getCtrlPressed(evt){
	    return evt.ctrlKey || evt.metaKey; // Mac support
} 

/**
 * @description	미결
 * @param		{Object}	evt
 * @returns		{Object}
 * @example		미결
 */
function getAltPressed(evt){
	    return evt.altKey;
}

/**
 * @description	미결
 * @param		{Object}	pem
 * @param		{Object}	em
 * @returns		{Object}
 * @example		미결
 */
function removeElement(pem, em) {
    pem.removeChild(em);
}

/**
 * @description	미결
 * @name		flexformscripthead#getButtonElement
 * @event
 * @returns		{}
 */
function getButtonElement(e){
    var srcElement=0;
    if(USER_BROWSER_NAME == "firefox" || USER_BROWSER_NAME == "netscape"){
      if( e == 0){
    		srcElement = 1;
      }
	} else {
		srcElement = e;
	}
	return srcElement;
}

/* ************************************************************************
*   상위 화면에서  객체 조회 호출시 동작 설정
*   * "조회"라는 가저오기가 있어야 한다 
* ************************************************************************/
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function executeDisplayJob(){
	var checkEvent = false;
	try {
   	if (eval("fillJob_조회")) checkEvent = true;
   } catch(e){}
   
   if (checkEvent){
   	jobControler.open("조회;");
   }    
};

var commonButtons = []; //associative array
/**
 * @description	미결
 * @param		{Number}	strName
 * @returns		{Void}
 * @example		미결
 */
function callCommonButton(strName){
	commonButtons[strName].click();
	return;
};

/**
 * @description	미결
 * @param		{Object}	control
 * @returns		{Void}
 * @example		미결
 */
function setCommonButton(control){
	for (var wKey in commonButtons){
		if (commonButtons[wKey] == control){
			var keyControl = document.getElementsByName(wKey)[0];
			if(keyControl != undefined && keyControl != null){
				document.getElementsByName(wKey)[0].style.display = (control.enabled ? "block" : "none");
			}
			break;
		}
	}
	return;
};

/* ************************************************************************
*   인라인 메시지박스
* ************************************************************************/
/**
 * @description	미결
 * @param		{String}	msg
 * @returns		{Void}
 * @example		미결
 */
function inlineMessage(msg){
	try {
		if( typeof parent.frames["bottomFrame"] != "undefined"){
			parent.frames["bottomFrame"].tabsMsgPrint(msg);
		}
		else{
			alert(msg);
		}
	} catch(e){
		alert(msg);
	}
	
	return;
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
function clearInlineMessage(){
	try {
		if( typeof parent.frames["bottomFrame"] != "undefined")
			parent.frames["bottomFrame"].tabsMsgPrint("");
	} catch(e){}
	
	return;
};

/* ************************************************************************
*   엔터키 동작설정 
*   * 지정콘트롤의 다음 순번의 콘트롤중 Enable상태인 것을 찾는다
* ************************************************************************/
/**
 * @description	미결
 * @param		{String}	pControlName
 * @returns		{Void}
 * @example		미결
 */
function setFocusToNextControl(pControlName){
	var found = false;
	for (var i = tabInfos.indexOf(pControlName) + 1; i < tabInfos.length; i++){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
//		if (wControl.enabled && wControl.visible && 
//				!(BrowserDetect.browser == "Firefox" && wControl.tagObject.clientHeight == 0) &&
//				!(BrowserDetect.browser == "Safari" && wControl.tagObject.clientHeight == 0)) {
		if (wControl.enabled && wControl.visible && wControl.tagObject.clientHeight != 0) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	if (found) return; 
	for (var i = 0; i < tabInfos.indexOf(pControlName); i++){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	return;
};

/**
 * @description	미결
 * @param		{String}	pControlName
 * @returns		{Void}
 * @example		미결
 */
function setFocusToFormerControl(pControlName){
	var found = false;
	for (var i = tabInfos.indexOf(pControlName) - 1; i >=0 ; i--){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	
	if (found) return; 
	for (var i =  tabInfos.length - 1; i > tabInfos.indexOf(pControlName); i--){
		var controlName = tabInfos[i];
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible) {
			if (wControl.focus && wControl.focus()){
				found = true;
				break;
			}
		}
	}
	
	
	return;
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
function setFocusToFirstControl(){
//	var found = false;
	self.focus();
	
	for (var i = 0; i < tabInfos.length; i++){
		var controlName = tabInfos[i];
		if (controlName == null || controlName.trim().length == 0) continue;
		
		var wControl = controls[controlName];
		if (wControl.enabled && wControl.visible && 
				!(BrowserDetect.browser == "Firefox" && wControl.tagObject.clientHeight == 0) &&
				!(BrowserDetect.browser == "Safari" && wControl.tagObject.clientHeight == 0)) {
			if ( wControl.focus 	){
				setTimeout(function(){
					wControl.focus();
				}, 500);
//				found = true;
				return wControl;
			}
		}
	}
	return;
};

/**
 * @description	미결
 * @param		{Object}	event
 * @returns		{Undefined}
 * @example		미결
 */
// 이벤트 겐슬에 관한 함수
// 상위로 전달되는 버블링 단계의 방지
function stopPropagation(event){
	
    if (event.stopPropagation){
       event.stopPropagation();
    } else {
       event.cancelBubble = true;
    }
};

/**
 * @description	미결
 * @param		{Object}	event
 * @returns		{Undefined}
 * @example		미결
 */
// 이벤트의 디폴트 후속 동작을 취소
function preventDefault(event) {
    if (event.preventDefault){
       event.preventDefault();
    } else {
       event.returnValue = false;
    }
};

/**
 * @description	미결
 * @param		{Object}	event
 * @returns		{Undefined}
 * @example		미결
 */
// 두가지 다
function stopEvent(event){
    stopPropagation(event);
    preventDefault(event);
};

/**
 * @description	미결
 * @param		{Object}	editor
 * @returns		{String}
 * @example		미결
 */
// IE 커서의 위치가처오기 나머지 네개 브라우저는 em.selectionStart,  em.selectionEnd 속성가능
function synGetCaret(editor) {
	var selectionStart = 0; selectionEnd = 0;
    if(document.selection){
    	// The current selection
    	var range = document.selection.createRange();
    	var stored_range = range.duplicate();
    	
    	stored_range.moveToElementText( element );
    	stored_range.setEndPoint( 'EndToEnd', range );
    	
    	selectionStart = stored_range.text.length - range.text.length;
    	selectionEnd = element.selectionStart + range.text.length;
    }
    
    return {"selectionStart":selectionStart, "selectionEnd":selectionEnd};
}

/**
 * @description	미결
 * @param		{Object}	data
 * @returns		{String}
 * @example		미결
 */
function escapeParseString(data){
    var wString = "" + data;
    wString = wString.replaceWord(",", "<comma>");
    wString = wString.replaceWord(";", "<sclon>");
    wString = wString.replaceWord(":", "<clon>");
	wString = wString.replaceWord("&", "<amp>");
	wString = wString.replaceWord("%", "<percent>");
	wString = wString.replaceWord("?", "<question>");
    
    return wString;	
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
// 로케일 찾기 
function setLocale(){
	
	if (USER_LANGUAGE != undefined && USER_LANGUAGE.trim().length > 0){
		return;
	} 
	
	
	if ( navigator ) {
		var wLanguge = "BrowserLanguage_";
	    if ( navigator.language ) {
	    	wLanguge += navigator.language;
	    }
	    else if ( navigator.browserLanguage ) {
	    	wLanguge += navigator.browserLanguage;
	    }
	    else if ( navigator.systemLanguage ) {
	    	wLanguge += navigator.systemLanguage;
	    }
	    else if ( navigator.userLanguage ) {
	    	wLanguge += navigator.userLanguage;
	    }
	    
	    USER_LANGUAGE = wLanguge;
	}
	
	return; 
}

/**
 * @description	미결
 * @param		{Object}	el
 * @returns		{Number}
 * @example		미결
 */
// 텍스트박스에서 커서위치 찾기
function getCaretPosition(el) {
	  if (el.selectionStart) {
	    return el.selectionStart;
	  } else if (document.selection) {
		  try { el.focus(); } catch(e){}

	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }

	    var re = el.createTextRange(),
	        rc = re.duplicate();
	    re.moveToBookmark(r.getBookmark());
	    rc.setEndPoint('EndToStart', re);

	    return rc.text.length;
	  } 
	  return 0;
}
/**
 * @description	미결
 * @param		{Object}	el
 * @returns		{Number}
 * @example		미결
 */
function getCaretLength(el) {
	  if (el.selectionStart) {
	    return (el.selectionEnd - el.selectionStart);
	  } else if (document.selection) {
		  try { el.focus(); } catch(e){}

	    var r = document.selection.createRange();
	    if (r == null) {
	      return 0;
	    }
	    return r.text.length;
	  } 
	  return 0;
}

//---------------------------------------------------------------------------------------
//파이어폭스에서 innerText 인식이 안되는 경우
//이 함수를 먼저 읽히게 하면 innerText 를 사용할 수 있음
//---------------------------------------------------------------------------------------
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function setInnerTextProperty() {
 if(typeof HTMLElement != "undefined" && typeof HTMLElement.prototype.__defineGetter__ != "undefined") {
     HTMLElement.prototype.__defineGetter__("innerText",function() {
         if(this.textContent) {
             return(this.textContent);
         } 
         else {
             var r = this.ownerDocument.createRange();
             r.selectNodeContents(this);
             return r.toString();
         }
     });
     
     HTMLElement.prototype.__defineSetter__("innerText",function(sText) {
         this.innerHTML = sText;
     });
 }
}

//insertAdjacentHTML(), insertAdjacentText() and insertAdjacentElement()
//for Netscape 6/Mozilla by Thor Larholm me@jscript.dk
//Usage: include this code segment at the beginning of your document
//before any other Javascript contents.
/**
 * @description	미결
 * @param		{String}	where
 * @param		{String}	parseNode
 * @returns		{Undefined}
 * @example		미결
 */
if(typeof HTMLElement!="undefined" && !
HTMLElement.prototype.insertAdjacentElement){
 HTMLElement.prototype.insertAdjacentElement = function (where,parsedNode){
     switch (where){
     case 'beforeBegin':
         this.parentNode.insertBefore(parsedNode,this);
         break;
     case 'afterBegin':
         this.insertBefore(parsedNode,this.firstChild);
         break;
     case 'beforeEnd':
         this.appendChild(parsedNode);
         break;
     case 'afterEnd':
         if (this.nextSibling) 
             this.parentNode.insertBefore(parsedNode,this.nextSibling);
         else 
        	 this.parentNode.appendChild(parsedNode);
         break;
     }
 };

 /**
  * @description 미결
  * @param		{object}	where
  * @param		{object}	htmlStr
  * @return		{undefined}
  * @example		미결
  */
 HTMLElement.prototype.insertAdjacentHTML = function (where,htmlStr) {
     var r = this.ownerDocument.createRange();
     r.setStartBefore(this);
     var parsedHTML = r.createContextualFragment(htmlStr);
     this.insertAdjacentElement(where,parsedHTML);
 };

 /**
  * @description 미결
  * @param		{object}	where
  * @param		{object}	txtStr
  * @return		{undefined}
  * @example		미결
  */
 HTMLElement.prototype.insertAdjacentText = function (where,txtStr) {
     var parsedText = document.createTextNode(txtStr);
     this.insertAdjacentElement(where,parsedText);
 };
}


/*	Implement array.push for browsers which don't support it natively.
	Please remove this if it's already in other code */
if(Array.prototype.push == null){
	Array.prototype.push = function(){
		for(var i = 0; i < arguments.length; i++){
			this[this.length] = arguments[i];
		};
		return this.length;
	};
};

/*	Event Cache uses an anonymous function to create a hidden scope chain.
	This is to prevent scoping issues. */
var EventCache = function(){
	var listEvents = [];
	
	return {
		listEvents : listEvents,
	
		add : function(node, sEventName, fHandler, bCapture){
			listEvents.push(arguments);
		},
	
		flush : function(){
			var i, item;
			for(i = listEvents.length - 1; i >= 0; i = i - 1){
				item = listEvents[i];
				
				if(item[0].removeEventListener){
					item[0].removeEventListener(item[1], item[2], item[3]);
				};
				
				/* From this point on we need the event names to be prefixed with 'on" */
				if(item[1].substring(0, 2) != "on"){
					item[1] = "on" + item[1];
				};
				
				if(item[0].detachEvent){
					item[0].detachEvent(item[1], item[2]);
				};
				
				item[0][item[1]] = null;
			};
		}
	};
}();

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
/*  *****  로컬 스토리지 사용 _모바일 ***** */
function supports_html5_storage() {
    try {
    	return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
    	return false;
    }
};
/*  *****  사용의 사례 _모바일 *****
 * 
// 스토리지 이벤트 부여  
if (window.addEventListener) {
	window.addEventListener("storage", handle_storage, false);
} else {
	window.attachEvent("onstorage", handle_storage);
};

function handle_storage(e) {
	if (!e) { e = window.event; }
}

// 메모리 사용 _모바일
document.addEventListener("deviceready", onDeviceReady, false);
function onDeviceReady() {
    window.localStorage.setItem("key", "value");
    
    var keyname = window.localStorage.key(i);
    // keyname is now equal to "key"
    
    var value = window.localStorage.getItem("key");
    // value is now equal to "value"
    
    window.localStorage.removeItem("key");
    
    window.localStorage.setItem("key2", "value2");
    
    window.localStorage.clear();
    // localStorage is now empty
}

*/ 
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
// 폼리사이징 이벤트 함수 _모바일
var resizeTimer = 0;
function doResize(){
    if (resizeTimer) clearTimeout(resizeTimer);
    resizeTimer = setTimeout(doResizeEnd, 500);
}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function doResizeEnd(){
    var w = window;
    var d = document;
    var e = d.documentElement;
    var g = d.getElementsByTagName('body')[0];
    var w = w.innerWidth || e.clientWidth || g.clientWidth;
    var h = w.innerHeight|| e.clientHeight|| g.clientHeight;
    w = parseIntSize(w); h = parseIntSize(h);
      
    document_onresize(w, h);
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function ActivateResizeEvent(){
	setEventHandler(window, "resize", function(e){
	    e = window.event || e;
	    doResize();
	});

};


//화면간 메시지교환 동작에 필요한 선언과 함수들
//모달폼 전역변수 선언
var modalDialogWindow = null;
var modalCommandId = "";  //command_NNN_onclick() 이벤트에서 대입
var modalArguments = ";";

/**
 * @description	미결
 * @name		flexformscripthead#postMessageController
 * @event
 * @returns		{Undefined}
 */
//postMessage 방식의 리턴값 받기
function postMessageController(e) {
	if (e.data == "loaded"){				// 차일드에서 받는 부모폼폼코딩
		//window.setTimeout("postArgument();", 1);
		postArgument();
	} else if (e.data.endsWith(";POST")){	// 부모폼에서 받는 차일드폼 코딩
		modalArguments = e.data;
	} else {								// 차일드에서 받는 부모폼폼코딩
		if( typeof self["setReturnValue_" + modalCommandId] == "function" ){
			eval("setReturnValue_" + modalCommandId + "(e.data);"    );
//			self["setReturnValue_" + modalCommandId](e.data);
		}
	}
}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function postArgument(){
	if(modalDialogWindow != null) modalDialogWindow.postMessage(modalCommandId + ";POST", '*');
}
//POST MESSAGE EVENT를 붙인다
setEventHandler(window, "message", postMessageController);

//Post 방식으로 다이얼로그 팝업을 호출했을 경우 팝업 호출 정보를 가져오는 함수
function getPostArgument(){
	return modalCommandId + ";POST";
}

/**
 * @description	미결
 * @returns		{Number}
 * @example		미결
 */
function findHighestZIndex()
{
	var elements = document.getElementsByTagName("*");
	var highest = 0;
	var elementLength = elements.length - 1;
	var elementStyle = null;
	var elementZIndex = 0;
	
	for (var i = 0; i < elementLength; i++) {
		elementStyle = elements[i].currentStyle;
		comp = elementStyle ? elementStyle : getComputedStyle(elements[i], null);
		elementZIndex = comp.zIndex;
	    if (parseInt(elementZIndex) > highest) {
	    	highest = parseInt(elementZIndex);
	    }
	}
	
    return highest;
}

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
//160119 김남용 Frame에으로 팝업화면 호출후 종료버튼 및 값넘겨주기시  종료처리하기위해 추가.
function parentFrameCtlName(){
	var ctlName = "";
	
	if(thisIsIframe){
	    var pEm = self.parent.document.getElementsByName(self.name)[0];
	  	while (pEm.parentNode && !pEm.className.startsWith("Frame_") ) {
	  		pEm = pEm.parentNode;
	  	}
	  	if (pEm != null){
	  	   ctlName = pEm.getAttribute("ctlname");
	  	}
	}
	return ctlName;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
/* 페이지 사이즈 체크 함수*/
function getVisibleDocWidth() {
	  if (self.innerHeight) {
	    return self.innerWidth;
	  }

	  if (document.documentElement && document.documentElement.clientWidth) {
	    return document.documentElement.clientWidth;
	  }

	  if (document.body) {
	    return document.body.clientWidth;
	  }
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function getVisibleDocHeight() {
	  if (self.innerHeight) {
	    return self.innerHeight;
	  }

	  if (document.documentElement && document.documentElement.clientHeight) {
	    return document.documentElement.clientHeight;
	  }

	  if (document.body) {
	    return document.body.clientHeight;
	  }
}



//유저 정보 및 추가 사용자 세션 정보 불러오기
var userInfoLoader = null;

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function UserInfoLoader(){
	this.contextPath = getContextPath();
	this.addItemKeys = [];
	
	//사용자 이벤트
	//1. 유저정보 로드 전 처리
	this.hasLoadBefore = false;
	this.fncLoadBefore = null;
	
	this.hasLoadBefore = (typeof self["userInfo_onLoadBrfore"] != "undefined");
	if( this.hasLoadBefore ){
		this.fncLoadBefore = new Function("return function(){ return userInfo_onLoadBrfore(); }")();
	}
	
	//2.유저정보 로드 후 처리
	this.hasLoadCompleted = false;
	this.fncLoadCompleted = null;
	
	this.hasLoadCompleted = (typeof self["userInfo_onLoadCompleted"] != "undefined");
	if( this.hasLoadCompleted ){
		this.fncLoadCompleted = new Function("return function(jsonObject){ return userInfo_onLoadCompleted(jsonObject); }")();
	}
};

/**
 * @description 미결
 * @return		{undefined}
 * @example		미결
 */
UserInfoLoader.prototype.loadData = function(){
	//유저정보 로드 전 처리
	if( this.hasLoadBefore ){
		this.fncLoadBefore();
	}
	
	ajaxCallSync("POST", this.contextPath + "/loadUserInfo.do", "", this, "");
};

/**
 * @description 미결
 * @param		{object}	jsonObject
 * @param		{string}	message
 * @return		{boolean}
 * @example		미결
 */
UserInfoLoader.prototype.parseData = function(jsonObject, message){
	//기본 유저정보 설정
	USER_COGU			= jsonObject.USER_COGU;
	USER_BON			= jsonObject.USER_BON;
	USER_PART     		= jsonObject.USER_PART;
	USER_ORGANIZATION	= jsonObject.USER_ORGANIZATION;
	USER_PERSONALID		= jsonObject.USER_PERSONALID;
	USER_PERSONALNAME	= jsonObject.USER_PERSONALNAME;
//	USER_DATE			= jsonObject.USER_DATE;
//	USER_YEAR			= parseInt(USER_DATE.substring(0,4), 10);
//	USER_MONTH			= parseInt(USER_DATE.substring(0,6), 10);
//	USER_TIME			= jsonObject.USER_TIME;
	USER_USERID			= jsonObject.USER_USERID;
	USER_IPADDR			= jsonObject.USER_IPADDR;
	USER_LANGUAGE		= jsonObject.USER_LANGUAGE;
	USER_MESSAGE		= jsonObject.USER_MESSAGE;
	
	//유저정보 로드 후 처리
	if( this.hasLoadCompleted ){
		this.fncLoadCompleted(jsonObject);
	}
	
	return true;
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function settingUserInfos(){
	if( userInfoLoader == null )
		userInfoLoader = new UserInfoLoader();
	
	userInfoLoader.loadData();
}



//setEventHandler(document, "unload", function(){ alert("Document Unload!!!"); return true; });
/**
 * @description 
 *     EasyMaker Vertical Data Sheet For Big Data.
 * 
 * @constructor
 * 
 * @param {string} 	 controlId 	 - 콘트롤 고유 아이디 (영문)
 * @param {string} 	 controlName - 콘트롤 명 (사용자 고유 언어)
 * @param {HTMLNode} tagObject   - HTML 본문중의 매칭되는 HTML DOM Node. 
 * @return {Object} - 생성된 EasySheet 개체
 * @exception 널값 예외
 * 
 */
function ControlBase(controlId, controlName, tagObject){
	this.controlId = controlId;
	this.id = controlId;            // id와 controlId는 혼용가능
	this.controlName = controlName;
	this.tagObject = tagObject;
    /**
     *   @description  사용자가 컨트롤에 입력한 값에 의한 체크조건을 설정하는 값입니다.<br><br>
     *                 <table width="500">
     *                   <caption>CHECKTYPE 상수 정보</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">CHECKTYPE Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> NONE </td>
     *                          <td> 체크조건이 없습니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> FORMULA </td>
     *                          <td> 산식체크 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> YYYY </td>
     *                          <td> 년도 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> YM </td>
     *                          <td> 년월 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> YMD </td>
     *                          <td> 년월일 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> RESINUM </td>
     *                          <td> 주민등록번호 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> TAXNUM </td>
     *                          <td> 사업자등록번호 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> POSTNUM </td>
     *                          <td> 우편번호 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> _EMPTY </td>
     *                          <td> 사용안함 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> AMOUNT </td>
     *                          <td> 금액</td>
     *                       </tr>
     *                       <tr>
     *                          <td> NUMBER </td>
     *                          <td> 숫자 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> IMEMODE </td>
     *                          <td> 한글 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> ENGLNUM </td>
     *                          <td> 영문 + 숫자</td>
     *                       </tr>
     *                       <tr>
     *                          <td> BARCODE </td>
     *                          <td> 바코드 </td>
     *                       </tr>
     *                       <tr>
     *                          <td> PASSWORD </td>
     *                          <td> 패스워드 </td>
     *                       </tr>
     *                 </table>
     *   @example      ControlBase.checkType = ControlBase.CHECKTYPE.YYYY;
     */
	// 상수선언부
    this.CHECKTYPE = {
    		NONE 	: 0,
    		FORMULA : 1,
    		YYYY 	: 2,
    		YM   	: 3,
    		YMD 	: 4,
    		RESINUM : 5,
    		TAXNUM  : 6,
    		POSTNUM : 7,
    		_EMPTY  : 8,
    		AMOUNT  : 9,
    		NUMBER  : 10,
    		IMEMODE : 11,
    		ENGLNUM : 12,
    		BARCODE : 13,
    		PASSWORD: 14};
	
    /**
     *   @description  사용자가 컨트롤에 입력한 값이 확정되었을 때, 컨트롤에 입력된 값을 Key로 하여 데이터를 조회합니다.<br>
     *                 기본값: false<br><br>
     *                 <table width="500">
     *                   <caption>isKeyControl Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값에 의해 자료를 조회합니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값에 의해 자료를 조회하지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */  
    this.isKeyControl = false;
    /**
     *   @description      조회한 자료에서 Key 필드와 함께 추가로 조건을 주기위해 사용합니다.<br>
     *                     컨트롤에 화면채우기 설정이 되어있다면 Key필드와 컨트롤의 값에 만족하는 데이터를 화면에 채웁니다.<br>
     *                     기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isFillControl Variable Value</caption>
     *                       <thead>
     *                          <tr>
     *                              <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                              <td> true </td>
     *                              <td> 컨트롤에 값을 채웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> false </td>
     *                              <td> 컨트롤에 값을 채우지 않습니다. </td>
     *                           </tr>
     *                     </table><br>
     */    
    this.isFillControl = false;
    /**    
     *   @description      Clear나 확인버튼을 클릭하여 실행시키고 난 후 후속작업을 위해 컨트롤의 데이터를 비울지 설정합니다.<br>
     *                     기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isClearControl Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                                <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                               <td> true </td>
     *                              <td> Clear 기능 실행 후 컨트롤의 값을 비웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                                <td> false </td>
     *                              <td> Clear 기능 실행하더라도 컨트롤의 값을 유지합니다. </td>
     *                           </tr>
     *                     </table><br>
     */    
    this.isClearControl = false;
    /**
     *   @description      입력/조회 시트에서 줄추가/삭제시 컨트롤의 값을 비울지 설정합니다.<br>
     *                     줄 단위로 다른 값이 들어갈 데이터에 적용됩니다.<br>기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isSeqClearControl Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                                <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                               <td> true </td>
     *                              <td> 줄추가/삭제시 컨트롤의 값을 비웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> false </td>
     *                              <td> 줄추가/삭제를 하더라도 컨트롤의 값은 유지됩니다. </td>
     *                           </tr>
     *                     </table><br>
     */ 
    this.isSeqClearControl = false;
    /**
     *   @description  컨트롤의 기본값을 지정합니다.<br>
     *                 eval 명령으로 실행할 수 있는 산식도 들어갈 수 있습니다<br>기본값 : 없음<br><br>
     */
    this.defaultValue = "";       // eval명령으로 샐행할 수 있는 산식이 들어간다 
    /**
     *   @description  다른 컨트롤에 연관되어 출력되는 데이터가 다른 컨트롤의 값에 따라 변하는 경우 다른 컨트롤의 이름을 지정합니다.<br>기본값 : 없음<br><br>
     */ 
    this.callerControlName = "";  // 콘트롤 채우기를 호출하는 콘트롤명
    /**
     *   @description  사용자가 입력한 컨트롤의 데이터입니다.<br>기본값 : 없음<br><br>
     */ 
    this.value = null;
    this.image = "";
    /**
     *   @description  컨트롤의 배경색입니다.<br>기본값 : #FFFFFF<br><br>
     */ 
	this.backColor = "#FFFFFF";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨색입니다.<br>기본값 : #000000<br><br>
     */
	this.foreColor ="#000000";
    /**
     *   @description  컨트롤의 기능 활성화/비활성화 설정합니다.<br>기본값 : true<br><br>
     *                 <table width="500">
     *                   <caption>visible Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤이 보입니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤이 안 보입니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.visible = true;
    /**
     *   @description  컨트롤의 기능 활성화/비활성화 설정합니다.<br>기본값 : true<br><br>
     *                 <table width="500">
     *                   <caption>enabled Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤을 활성화 시킵니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤을 비활성화 시킵니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.enabled = true;
	this.readOnly = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터를 정렬합니다.<br>
     *                 기본값 : "left"<br><br>
     *                 <table width="500">
     *                   <caption>enabled Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> left </td>
     *                          <td> 왼쪽 정렬. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> center </td>
     *                          <td> 가운데 정렬. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> right </td>
     *                          <td> 오른쪽 정렬. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.alignment = "left";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨굵기를 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontBold Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 글씨 굵기를 굵게합니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 글씨 굵기를 굵게하지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontBold = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글꼴을 기울임꼴로 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontItalic Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값의 글꼴을 기울임꼴로 설정합니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값의 글꼴을 기울이지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontItalic = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨체를 설정합니다.<br>
     *                 기본값 : false<br><br>
     */
	this.fontName = "";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글씨크기를 설정합니다.<br>
     *                 기본값 : 9<br>
     *                 단  위 : pt<br><br>
     */
	this.fontSize = 9;  //pt
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글자 중간에 가로줄을 그을지 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontStrikethru Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값의 글자 중간에 가로줄을 긋습니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값의 글자 중간에 가로줄을 긋지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontStrikethru = false;
    /**
     *   @description  사용자가 입력한 컨트롤 데이터의 글자에 밑줄을 그을지 설정합니다.<br>
     *                 기본값 : false<br><br>
     *                 <table width="500">
     *                   <caption>fontBold Variable Value</caption>
     *                   <thead>
     *                      <tr>
     *                          <th align="left">Value</th>
     *                          <th align="left">Description</th>
     *                       </tr>
     *                    </thead>
     *                    <tbody>
     *                       <tr>
     *                          <td> true </td>
     *                          <td> 컨트롤 값의 글자에 밑줄을 긋습니다. </td>
     *                       </tr>
     *                       <tr>
     *                          <td> false </td>
     *                          <td> 컨트롤 값의 글자에 밑줄을 긋지 않습니다. </td>
     *                       </tr>
     *                 </table><br>
     */
	this.fontUnderline = false;
	this.fontColor = "#000000";
    /**
     *   @description  컨트롤에 도움말을 넣을지 설정합니다.<br>
     *                 기본값 : 없음<br><br>
     */
	this.toolTipText = "";
	
	this.oldbgcolor = "";
	this.oldcolor = "";
    
    // 드래그 드롭 관련 부분
    this.draggable	= false;
    this.droppable	= false;
    this.outerDroppable	= false;     
    this.hasDragStartEvent = false;	this.fncDragStartEvent = null;
    this.hasDragMoveEvent = false;	this.fncDragMoveEvent = null;
    this.hasDragEndEvent = false;	this.fncDragEndEvent = null;
    this.hasDragEnterEvent = false;	this.fncDragEnterEvent = null;
    this.hasDragOverEvent = false;	this.fncDragOverEvent = null;
    this.hasDragLeaveEvent = false;	this.fncDragLeaveEvent = null;
    this.hasDropEndEvent = false;	this.fncDropEndEvent = null;

    this.hasDragStartEvent = (typeof self[this.controlId + "_ondragstart"] != "undefined");
    if (this.hasChangeEvent){ this.fncDragStartEvent = new Function( "return function (event) { return " + this.controlId + "_ondragstart(event); }")(); }
    this.hasDragMoveEvent = (typeof self[this.controlId + "_ondragmove"] != "undefined");
    if (this.hasDragMoveEvent){ this.fncDragMoveEvent = new Function( "return function (event) { return " + this.controlId + "_ondragmove(event); }")(); }
    this.hasDragEndEvent = (typeof self[this.controlId + "_ondragend"] != "undefined");
    if (this.hasDragEndEvent){ this.fncDragEndEvent = new Function( "return function (event) { return " + this.controlId + "_ondragend(event); }")(); }

    this.hasDragEnterEvent = (typeof self[this.controlId + "_ondragenter"] != "undefined");
    if (this.hasDragEnterEvent){ this.fncDragEnterEvent = new Function( "return function (event, srcControlName, arrFiles, arrFileTypes) { return " + this.controlId + "_ondragenter(event, srcControlName, arrFiles, arrFileTypes); }")(); }
    this.hasDragOverEvent = (typeof self[this.controlId + "_ondragover"] != "undefined");
    if (this.hasDragOverEvent){ this.fncDragOverEvent = new Function( "return function (event, srcControlName, arrFiles, arrFileTypes) { return " + this.controlId + "_ondragover(event, srcControlName, arrFiles, arrFileTypes); }")(); }
    this.hasDragLeaveEvent = (typeof self[this.controlId + "_ondragleave"] != "undefined");
    if (this.hasDragLeaveEvent){ this.fncDragLeaveEvent = new Function( "return function (event, srcControlName, arrFiles, arrFileTypes) { return " + this.controlId + "_ondragleave(event, srcControlName, arrFiles, arrFileTypes); }")(); }
    this.hasDropEndEvent = (typeof self[this.controlId + "_ondropend"] != "undefined");
    if (this.hasDropEndEvent){ 
    	this.fncDropEndEvent = new Function( 
    			"return function (event, srcControlName, arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet) " + 
    			        "{ " + 
    			           "return " + this.controlId + "_ondropend(event, srcControlName, arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet); " + 
    			        "}"
        )(); 
    }
    
    this.hasValidateEvent = (typeof self[this.controlId + "_onvalidate"] != "undefined");
    if (this.hasValidateEvent) { this.fncValidateEvent = new Function( "return function (event) { return " + this.controlId + "_onvalidate(event); }")(); }
    
    
	if (tagObject){
    	var cssStyle = getStyle(this.tagObject);
    	var image = tagObject.getAttribute("image");
    	var className = tagObject.className;
    	
    	this.image = (image != null && image !== "") ? image : className.substring(0, className.indexOf(" "));
    	this.backColor = (cssStyle.backgroundColor ? cssStyle.backgroundColor : "#FFFFFF");
    	this.foreColor =(cssStyle.color ? cssStyle.color : "#000000");
    	this.visible = (cssStyle.display ? cssStyle.display != "none" : (cssStyle.left ? cssStyle.left != "-10000px" : true));
    	this.enabled = !(this.tagObject.disabled ? this.tagObject.disabled : this.tagObject.getAttribute("disabled"));
    	this.readOnly = (this.tagObject.readOnly ? this.tagObject.readOnly : this.tagObject.hasAttribute("readOnly"));
    	this.alignment = (cssStyle.textAlign ? cssStyle.textAlign : "left");
    	this.fontBold = (cssStyle.fontWeight == "bold");
    	this.fontItalic = (cssStyle.fontStyle == "italic"); 
    	this.fontName = (cssStyle.fontFamily ? cssStyle.fontFamily : "");
    	this.fontSize = (cssStyle.fontSize ? parseIntSize(cssStyle.fontSize) : 9);
    	this.fontStrikethru = (cssStyle.textDecoration == "line-through");
    	this.fontUnderline = (cssStyle.textDecoration == "underline");
    	this.fontColor = (cssStyle.color ? cssStyle : "#000000");
    	this.toolTipText = (this.tagObject.title ? this.tagObject.title : "");
    	this.zIndex = (cssStyle.zIndex ? cssStyle.zIndex : 0);
    	this.oldbgcolor = this.backColor;
    	this.oldcolor = this.fontColor;
    	
    	image = null; className = null;
    	cssStyle = null;

    	//Enabled가 false인 경우
    	if( !this.enabled ){
//    		this.tagObject.style.backgroundColor="#d2d0d0";
    		this.tagObject.classList.remove(this.image);
    		this.tagObject.classList.add(this.image+"-disabled");
        }
    	
        // Drag Drop 이벤트 선언부
        setEventHandler(this.tagObject, "dragstart",   control_DragStart);
        setEventHandler(this.tagObject, "drag",        control_Drag);
        setEventHandler(this.tagObject, "dragend",     control_DragEnd);

        setEventHandler(this.tagObject, "dragenter",   control_DragEnter);
        setEventHandler(this.tagObject, "dragover",    control_DragOver);
        setEventHandler(this.tagObject, "dragleave",   control_DragLeave);
        setEventHandler(this.tagObject, "drop",        control_Drop);
    } 
    /**
     *   @description  컨트롤에 표시문자열을 지정합니다.<br>
     *                 기본값 : 없음<br><br>
     */
	this.caption = "";
    /**`
     *   @description  tagObject의 태그 속성 객체입니다.<br>
     *                 컨트롤의 html 태그 속성값에 대한 설정을 할 수 있습니다<br><br>
     *   @example      this.tagObject.style.fontWeight = "bold";
     *                 this.tagObject.style.fontStyle = "italic";
     */
    this.style = "";  // EasyMaker에서 스타일 기능 추가시 사용
    this.tag = "";
    /**
     *   @description  사용자가 입력한 컨트롤 데이터에 대한 타입을 설정합니다.<br>
     *                 타입은 상수로 선언된 CHECKTYPE으로 설정합니다.<br>
     *                 기본값 : 0<br><br>
     */
    this.checkType = 0;
    /**
     *       @name           ControlBase#fncValidateEvent
     *       @event
     *       @description    컨트롤의 데이터, 상태등이 변경되었을 때 발생하는 사용자 이벤트 메소드입니다.<br>유저가 추가한 이벤트 코드를 실행하는 함수입니다.
     */
	this.dataBinds = [];     	// 데이터 링크된 콘트롤들 
	this.bindDataset = "";
	this.innerDataset = "";
	
	this.passEvent = false;		//사용자 이벤트 동작 여부(true:동작안함 / false:동작함)
};

ControlBase.prototype.setDataBind = function(){
	var args = Array.prototype.slice.call(arguments);
	var argCount = args.length;
	var dataset = null; var col = null; var codeCol = null;
	var bindInfo = null;
	
	if( argCount == 2 ){
		dataset = args[0];
		col = args[1];
		
		//예외처리
		if( typeof dataset != "string" || (typeof dataset == "string" && dataset.length == 0) ){
			args.clear(); args = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof col != "string" || (typeof col == "string" && col.length == 0) ){
			args.clear(); args = null; col = null; dataset = null; //메모리 해제
			return;
		}
	}
	else if( argCount == 3 ){
		dataset = args[0];
		col = args[1];
		codeCol = args[2];
		
		//예외처리
		if( typeof dataset != "string" || (typeof dataset == "string" && dataset.length == 0) ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof col != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof codeCol != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
	}
	else{
		args.clear(); args = null;
		return;
	}
	
	var regexp = /^ListBox[ABCD]{0,1}$/;
	var image = (regexp.test(this.image) ? "List1" : this.image);
	
	//바인드 정보 생성
	bindInfo = new BindInfo(dataset, col, image, this.controlName);
	
	//콤보 또는 리스트박스의 경우 내부값 연결 컬럼 설정
	if( codeCol != null && (typeof codeCol == "string" && codeCol.length > 0) )
		bindInfo.colId_value = codeCol;
	
	//컨트롤에 바인드 정보 설정
	//파라메터가 2개인 경우 : 연결데이터셋, 연결 컬럼
	if( argCount == 2 )
		this.dataBinds[dataset] = bindInfo;
	//파라메터가 3개인 경우 : 연결데이터셋, 내부값 연결 컬럼, 텍스트 연결 컬럼
	else if( argCount == 3 )
		this.dataBinds[dataset + "_" + col] = bindInfo;
	
	//데이터셋에 바인드 정보 설정
	dataSets[dataset].dataBinds[this.controlName] = bindInfo;
	
	//메모리 해제
	bindInfo = null; image = null; regexp = null;
	codeCol = null; col = null; dataset = null;
	args = null;
};

ControlBase.prototype.setInnerBind = function(){
	var args = Array.prototype.slice.call(arguments);
	var argCount = args.length;
	var dataset = null; var col = null; var codeCol = null;
	var bindInfo = null;
	
	if( argCount == 3 ){
		dataset = args[0];
		col = args[1];
		codeCol = args[2];
		
		//예외처리
		if( typeof dataset != "string" || (typeof dataset == "string" && dataset.length == 0) ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof col != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
		if( typeof codeCol != "string" ){
			args.clear(); args = null; codeCol = null; col = null; dataset = null; //메모리 해제
			return;
		}
	}
	else{
		args.clear(); args = null; //메모리 해제
		return;
	}
	
	var regexp = /^ListBox[ABCD]{0,1}$/;
	var image = (regexp.test(this.image) ? "List1" : this.image);
	
	//바인드 정보 생성
	bindInfo = new BindInfo(dataset, col, image, this.controlName);
	
	//콤보 또는 리스트박스의 경우 내부값 연결 컬럼 설정
	if( codeCol != null && (typeof codeCol == "string" && codeCol.length > 0) )
		bindInfo.colId_value = codeCol;
	
	//this.innerBinds[dataset + "_" + col] = bindInfo;
	
	//데이터셋에 바인드 정보 설정
	dataSets[dataset].innerBinds[this.controlName] = bindInfo;
	
	//메모리 해제
	bindInfo = null; image = null; regexp = null;
	codeCol = null; col = null; dataset = null;
	args = null;
};

//cellNum은 생략될 수 있다
/*
ControlBase.prototype.addLinkInfo = function(objectName, propertyName, cellNum){
	var newPropertyIndex = this.linkPropertyNames.length + 1;
	
	if (cellNum == undefined){
		this.linkPropertyNames[newPropertyIndex] = "" + objectName + "." + propertyName;
	} else {
		this.linkPropertyNames[newPropertyIndex] = cellNum + ":" + objectName + "." + propertyName;
	}
	return;
}

ControlBase.prototype.setLinkedProperties = function(value, cellNum, objectSeq){
	var objectName = "";
	var propertyName = "";
	
	for(var i=0; i < this.linkPropertyNames.length; i++){
		if (cellNum != undefined){
			var wCellNum = parseInt(this.linkPropertyNames[i].split(":")[0]);
			if (wCellNum != cellNum){
				continue;
			}
			objectName   = this.linkPropertyNames[i].split(".")[0].split(":")[1];
			propertyName = this.linkPropertyNames[i].split(".")[1];
		} else {
			objectName   = this.linkPropertyNames[i].split(".")[0];
			propertyName = this.linkPropertyNames[i].split(".")[1];
		}
		
		var wObject = objects[objectName];
		if (objectSeq != undefined){
			// 이벤트 없이 값의 변화만 유도
			wObject.recordset[objectSeq].properties[propertyName].value = value;
		} else {
			// 값의 변화후 후속작업까지 호출된다
			if (wObject.getValue(propertyName) != value){
				wObject.setValue(propertyName, value);
			}
		}
	}
	return;
}
*/

/**
*     @description  컨트롤의 배경색을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        backColor     {String}     <br> 배경색으로 지정할 컬러코드 값입니다.<br>컬러코드는 &로 시작하며 &를 포함하여 총 8자리입니다.
*     @return       배경색 지정에 성공하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환하게 됩니다.
*     @example      var wControls = controls["base_1"];
*      //배경색 코드를 &HBCB0A8 로 지정합니다.
*      if( false == wControls.setBackColor("&HBCB0A8") ){
*           //배경색 지정에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setBackColor 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setBackColor = function(backColor){
	// functionname : [Control.setBackColor]

	this.backColor = backColor;
	this.tagObject.style.backgroundColor = backColor;
	
	// 하위 테그들의 백칼러 조정
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.style.backgroundColor = backColor;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].style.backgroundColor = backColor;
			
		}
	}
};

/**
*     @description  컨트롤의 전경색을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        foreColor     {String}      <br>전경색으로 지정할 컬러코드 값입니다.<br>컬러코드는 &로 시작하며 &를 포함하여 총 8자리입니다.
*     @return       전경색 지정에 성공하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환하게 됩니다.
*     @example      var wControls = controls["base_1"];
*      //전경색 코드를 &HBCB0A8 로 지정합니다.
*      if( false == wControls.setForeColor("&HBCB0A8") ){
*           //전경색 지정에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setForeColor 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setForeColor = function(foreColor){
	// functionname : [Control.setForeColor]

	this.foreColor = foreColor;
	this.tagObject.style.color = foreColor;
	
	// 하위 테그들의 글자색 조정
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.style.color = foreColor;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].style.color = foreColor;
			
		}
	}
};

var _layerPopupBackgroundDiv = null;

/**
*     @description  컨트롤의 보이기 설정값을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        visible     {Boolean}       <br>true : 컨트롤을 화면상에 보입니다.<br>fasle : 컨트롤을 화면상에 보이지 않습니다.
*     @return       보이기 설정값 지정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //보이기 설정값을 false로 지정하여 컨트롤을 숨깁니다.
*      if( false == wControls.setVisible(false) ){
*           //컨트롤 숨기기에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setVisible 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setVisible = function(visible){
	// functionname : [Control.setVisible]

	if (this.visible == visible) return;
	this.visible = visible;

	var obj =  this.tagObject;
	var comp = obj.currentStyle ? obj.currentStyle : getComputedStyle(obj, null);
	
    if (("" + comp.position).toLowerCase() == "absolute" || ("" + comp.position).toLowerCase() == "relative"){
    	if (visible){
    		if (obj.style.left == "-10000px"){
    			obj.style.left = obj.getAttribute("xposition");
    		}
    	} else {
    		obj.setAttribute("xposition", obj.style.left);
    		obj.style.left = "-10000px";
    	}
    	this.tagObject.style.display = (visible ? "block" : "none");
    } else {
    	this.tagObject.style.display = (visible ? "inline" : "none");
    }
    
    var isFrameBoxType = false;
    try {isFrameBoxType = this instanceof FrameBox;} catch(e){}
	if (isFrameBoxType){
	    if (visible){
	    	if (this.controlName == "layerPopup"){
	    		_layerPopupBackgroundDiv = document.getElementsByName("_layerPopupBackgroundDiv")[0];
	    		if( _layerPopupBackgroundDiv ){
	    			_layerPopupBackgroundDiv.style.display = "block";	    			
	    			_layerPopupBackgroundDiv.style.zIndex = 9998;
	    			controls["layerPopup"].tagObject.zIndex = 9999;
	    		}
	    	}
	    	
	    	var contentObj = this.tagObject.querySelector(".content > div");
	    	if( contentObj != null && typeof contentObj != "undefined" ){
	    		var childList = contentObj.children;
	    		var childItem = null;
	    		var childCount = 0;
	    		var className = null;
	    		var control = null;
	    		var i = 0;
	    		
	    		for(i = 0, childCount = childList.length; i < childCount; i++, childItem = null, className = "", control = null){
	    			childItem = childList[i];
	    			className = ("" + childItem.getAttribute("class"));
	    			control = controls[("" + childItem.getAttribute("ctlname"))];
	    			
	    			if( className.indexOf("DataSheet") >= 0 ){
	    				if( control != null && typeof control != "undefined" ){
	    					if( typeof control.setPosition == "function" ) control.setPosition();
	    					if( typeof control.resize == "function" ) control.resize();
	    				}
	    			}
	    		}
	    		
	    		childList = null; contentObj = null;
	    	}
	    	
		    if (this.hasOpenEvent) {
		    	this.fncOpenEvent();
		    }
	    } else {
	    	if (this.controlName == "layerPopup"){
	    		_layerPopupBackgroundDiv = document.getElementsByName("_layerPopupBackgroundDiv")[0];
	    		if( _layerPopupBackgroundDiv ){
	    			_layerPopupBackgroundDiv.style.display = "none";	    			
	    			_layerPopupBackgroundDiv.style.zIndex = -10;
	    			controls["layerPopup"].tagObject.zIndex = "auto";
	    		}
	    	}
    	    if (this.hasCloseEvent) {
    	    	this.fncCloseEvent();
    	    }
	    }
	}
};

/**
*     @description  컨트롤의 전경색을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        foreColor     {String}      <br>전경색으로 지정할 컬러코드 값입니다.<br>컬러코드는 &로 시작하며 &를 포함하여 총 8자리입니다.
*     @return       전경색 지정에 성공하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환하게 됩니다.
*     @example      var wControls = controls["base_1"];
*      //전경색 코드를 &HBCB0A8 로 지정합니다.
*      if( false == wControls.setForeColor("&HBCB0A8") ){
*           //전경색 지정에 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setForeColor 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setEnabled = function(enabled){
	// functionname : [Control.setEnabled]

	this.enabled = enabled;
	// 하위 테그들의 글자색 조정
    this.tagObject.disabled = !enabled;
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.disabled = !enabled;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].disabled = !enabled;
			
		}
	}
	
	/**
	 * 2016-07-13 김재익
     * 콘트롤동작 투명도 조정 -> 배경색 조정
     */
	if (!enabled) {
		//this.tagObject.style.opacity = "0.6";
		//this.tagObject.style.filter = "Alpha(Opacity=60)";
		//this.oldbgcolor =this.tagObject.style.backgroundColor;
		//this.oldcolor= this.tagObject.style.color ;  		
//		this.tagObject.style.backgroundColor="#d2d0d0";
		this.tagObject.classList.remove(this.image);
		this.tagObject.classList.add(this.image+"-disabled");
		//this.tagObject.style.color="#f1f1f1";	
    } else {
    	//this.tagObject.style.opacity = "";
    	//this.tagObject.style.filter = "";
    	this.tagObject.style.backgroundColor =this.oldbgcolor;
    	this.tagObject.classList.remove(this.image+"-disabled");
    	this.tagObject.classList.add(this.image);
    	//this.tagObject.style.color = this.oldcolor;    	
    	
    }
};

ControlBase.prototype.setReadOnly = function(readOnly){
	// functionname : [Control.setReadOnly]
	
	this.readOnly = readOnly;
	
	if( typeof this.readOnly != "undefined" )
		this.tagObject.readOnly = readOnly;
	else{
		if( readOnly )
			this.tagObject.setAttribute("readOnly", "");
		else
			this.tagObject.removeAttribute("readOnly");
	}
};

/* 좌우로 정렬 
 * default :left, (left,right, center)
 */   
/**
*     @description  컨트롤의 데이터를 정렬합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        alignment       {Boolean}       <br>"left" : 왼쪽정렬 합니다.<br>"right" : 오른쪽정렬 합니다.<br>"center" : 가운데정렬 합니다.
*     @return       데이터 정렬을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터를 가운데정렬하기 위하여 "center"를 설정하였습니다.
*      if( false == wControls.setAlignment("center") ){
*           //데이터 정렬을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setAlignment 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setAlignment = function(alignment){
		// functionname : [Control.setAlignment]

	this.alignment = alignment;
    this.tagObject.style.textAlign = alignment;
};

/* 굵은 글씨체 
* default :normal, (bold,normal)
*/   
/**
*     @description  컨트롤 데이터의 글꼴 굵기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontBold       {Boolean}        <br>true : 글꼴의 굵기를 굵게합니다.<br>false : 글꼴의 굵기를 굵게하지 않습니다.
*     @return       글꼴 굵기 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터 글꼴을 굵게하기 위하여 true를 설정하였습니다.
*      if( false == wControls.setFontBold(true) ){
*           //데이터의 글꼴 굵기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontBold 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontBold = function(fontBold){
	// functionname : [Control.setFontBold]

	this.fontBold = fontBold;
    wValue = (fontBold ? "bold" : "normal");
    this.tagObject.style.fontWeight = wValue;
};

/* 기운 글씨체 
* default :normal, (italic,normal)
*/   
/**
*     @description  컨트롤 데이터의 글꼴 기울기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontItalic      {Boolean}       <br>true : 글꼴을 기울게합니다.<br>false : 글꼴의 기울게하지 않습니다.
*     @return       글꼴 기울기 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터 글꼴을 기울게하기 위하여 true를 설정하였습니다.
*      if( false == wControls.setFontItalic(true) ){
*           //데이터의 글꼴 기울기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontItalic 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/  
ControlBase.prototype.setFontItalic = function(fontItalic){
	// functionname : [Control.setFontItalic]

	this.fontItalic = fontItalic;
    wValue = (fontItalic ? "italic" : "normal");
    this.tagObject.style.fontStyle = wValue;
};

/* 글씨체 */   
/**
*     @description  컨트롤 데이터의 글씨체를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontName        {String}        <br>글씨체 명을 입력합니다.
*     @return       글씨체 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터의 글씨체를 "돋움체"로 설정하였습니다.
*      if( false == wControls.setFontName("돋움체") ){
*           //데이터의 글씨체 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontName 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/  
ControlBase.prototype.setFontName = function(fontName){
	// functionname : [Control.setFontName]

	this.fontName = fontName;
    this.tagObject.style.fontFamily = fontName;
};

/* 글씨크기 */   
/**
*     @description  컨트롤 데이터의 글씨 크기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontSize        {Number}        <br>글씨체의 크기를 입력합니다.
*     @return       글씨 크기 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터의 글씨 크기를 15로 설정하였습니다.
*      if( false == wControls.setFontSize(15) ){
*           //데이터의 글씨체 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontSize 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontSize = function(fontSize){
	// functionname : [Control.setFontSize]

	this.fontSize = fontSize;
    this.tagObject.style.fontSize = fontSize + "pt";
};

/* 취소 글씨체 */   
/**
*     @description  컨트롤 데이터에 취소선을 그을지 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontStrikethru      {Boolean}       <br>true : 데이터에 취소선을 긋습니다.<br>false : 데이터에 취소선을 긋지 않습니다.
*     @return       취소선 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터에 취소선을 긋습니다.
*      if( false == wControls.setFontStrikethru(true) ){
*           //데이터에 취소선 긋기를 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontStrikethru 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontStrikethru = function(fontStrikethru){
	// functionname : [Control.setFontStrikethru]

	this.fontStrikethru = fontStrikethru;
	if (fontStrikethru){
        this.tagObject.style.textDecoration = "line-through";
	} else {
        this.tagObject.style.textDecoration = "none";
	}
};

/* 밑줄 글씨체 */   
/**
*     @description  컨트롤 데이터에 밑줄을 그을지 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        fontUnderline       {Boolean}       <br>true : 데이터에 밑줄을 긋습니다.<br>false : 데이터에 밑줄을 긋지 않습니다.
*     @return       밑줄 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //데이터에 밑줄을 긋습니다.
*      if( false == wControls.setFontUnderline(true) ){
*           //데이터에 밑줄 긋기를 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontUnderline 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setFontUnderline = function(fontUnderline){
	// functionname : [Control.setFontUnderline]

	this.fontUnderline = fontUnderline;
	if (fontUnderline){
        this.tagObject.style.textDecoration = "underline";
	} else {
        this.tagObject.style.textDecoration = "none";
	}
};

/* 글자 색 */   
ControlBase.prototype.setFontColor = function(fontColor){
	// functionname : [Control.setFontColor]

	this.fontColor = fontColor ? fontColor : "#000000";
	if (fontColor){
        this.tagObject.style.color = fontColor;
	} else {
        this.tagObject.style.color = "#000000";
	}
};

/**
*     @description  컨트롤에 사용자 도움말(말풍선)을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        toolTipText         {String}        컨트롤에 설정할 도움말입니다.
*     @return       도움말 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //도움말 "도움말 입니다."을 추가합니다.
*      if( false == wControls.setToolTipText("도움말 입니다.") ){
*           //도움말 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setFontUnderline 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
/* 도움말 */   
ControlBase.prototype.setToolTipText = function(toolTipText){
	// functionname : [Control.setToolTipText]

	this.toolTipText = toolTipText;
	
	// 하위 테그들의 도움말 조정
	this.tagObject.title = toolTipText;
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.title = toolTipText;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].title = toolTipText;
		}
	}
};

/* 표시문자열 */   
/**
*     @description  컨트롤의 표시문자열을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        caption         {String}        컨트롤의 표시문자열입니다.
*     @return       표시문자열 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //컨트롤의 표시문자열을 "목록보기"로 변경합니다.
*      if( false == wControls.setCaption("목록보기") ){
*           //표시문자열 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setCaption 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setCaption = function(caption){
	// functionname : [Control.setCaption]

	this.caption = caption;
    this.tagObject.innerText = caption;
};

/**
*     @description  컨트롤에 넣을 주석을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param        tag         {String}        컨트롤의 주석입니다.
*     @return       주석 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //주석을 "목록보기로 변경합니다.
*      if( false == wControls.setTag("목록을 보는 컨트롤") ){
*           //주석 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //에러 발생시 setTag 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.setTag= function(tag){
	// functionname : [Control.setTag]

	this.tag = tag;
	return;
};

/**
*     @description  체크 조건에 의해 컨트롤의 데이터를 검사합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @return       체크 조건에 의한 검사 결과가 맞다면 true를 반환합니다.<br>검사 결과가 맞지 않는다면 false를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*     @example      var wControls = controls["base_1"];
*      //컨트롤의 데이터를 검사합니다.
*      if( false == wControls.checkError() ){
*           //컨트롤의 데이터가 체크조건에 맞지 않습니다. 에러처리 코드를 입력해주세요.
*           //검사결과가 맞지 않거나 에러 발생시 checkError 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControls.errorMsg 필드로 확인할 수 있습니다.
*      }
*/
ControlBase.prototype.checkError = function(){
	// functionname : [Control.checkError]
	
	var err = 0;
	var wText = this.value;
	
	if( ("" + wText).length == 0 ) return true;
	
	try{
		//데이타의 속성에 비추어 오류를 점검한다
		switch( this.checkType ){
			case this.CHECKTYPE.YYYY: 
				if( hasHangul(wText) )		throw 8;
				if( !CheckYear(wText) )		throw 3;
				break;
			case this.CHECKTYPE.YM: 
				if( hasHangul(wText) )		throw 8;
				if( !CheckMonth(wText) )	throw 2;
				break;
			case this.CHECKTYPE.YMD: 
				if( hasHangul(wText) )		throw 8;
				if( !CheckDate(wText) )		throw 1;
				break;
			case this.CHECKTYPE.RESINUM: 
				if( hasHangul(wText) ) 			throw 8;
				if( !IsResidentNumber(wText) )	throw 4;
				break;
			case this.CHECKTYPE.TAXNUM: 
				if( hasHangul(wText) ) 		throw 8; 
				if( !IsTaxNumber(wText) ) 	throw 5; 
				break;
			case this.CHECKTYPE.POSTNUM: 
				if( hasHangul(wText) ) 		throw 8;
				if( wText.length < 5 
					|| wText.length > 6 )	throw 6;  
				break;
			case this.CHECKTYPE.IMEMODE:
				break;
			case this.CHECKTYPE.ENGLNUM:
			case this.CHECKTYPE.PASSWORD:
				if( hasHangul(wText) )		throw 8; 
				break;
			case this.CHECKTYPE.AMOUNT:
			case this.CHECKTYPE.NUMBER:
				if( hasHangul(wText) )		throw 8; 
				if( !("" + wText).isNum() )	throw 9; 
				break;
		}
	    
		// 이 자리에 산식체크로직이 들어간다
		// 사용자 코딩 추가영역을 호출한다

		if (this.hasValidateEvent){
			var result = this.fncValidateEvent();
			if( result === false )
				return false;
		}

		return true;
    }
	catch(err){
		switch(err){
			case 1:	
				alert(getText("message_controlbase_001", "날짜입력이 틀렸습니다. 날짜를 지우거나 고치십시요"));
				break;
			case 2:
				alert(getText("message_controlbase_002", "년월입력이 틀렸습니다. 년월를 지우거나 고치십시요"));
				break;
			case 3:
				alert(getText("message_controlbase_003", "년도입력이 틀렸습니다. 년도를 지우거나 고치십시요"));
				break;
			case 4:
				alert(getText("message_controlbase_004", "주민등록번호가 맞지 않습니다. 주민등록번호를 지우거나 고치십시요"));
				break;
			case 5:
				alert(getText("message_controlbase_005", "사업자등록번호가 맞지 않습니다. 사업자등록번호를 지우거나 고치십시요"));
				break;
			case 6:
				alert(getText("message_controlbase_006", "우편번호입력이 틀렸습니다. 우편번호를 지우거나 고치십시요"));
				break;
			case 8:
				alert(getText("message_controlbase_007", "한글이 입력되었습니다."));
				break;
			case 9:
				alert(getText("message_controlbase_008", "금액형태에 맞지 않습니다."));
				break;
			default:
				alert(getText("message_controlbase_009", "위치: ControlBase.checkError\n에러번호:{0}\n에러정보:\n{1}", [err.number, err.description]));
		}
	}
	
	return false;
};
/**
*     @description	미결
*     @param	{number}	zIndex
*     @return	{String}
*     @example	미결
*/
ControlBase.prototype.setZIndex = function(zIndex){
	// functionname : [Control.setZIndex]
	
	var wReturn = false;
	var oldZIndex = this.zIndex;
	
	try{
		this.zIndex = zIndex;
		this.tagObject.style.zIndex = zIndex;
		wReturn = true;
	}
	catch(err){
		this.zIndex = oldZIndex;
	}
	
	return wReturn;
};

/**
*     @description	미결
*     @param	{object}	zOrder
*     @return	{string}
*     @example	미결
*/
ControlBase.prototype.setZOrder = function(zOrder){
	// functionname : [Control.setZOrder]
	
	return this.setZIndex(zOrder);
};

/**
 *     @description	미결
 *     @param	{string}	className
 *     @return	{void}
 *     @example	미결
 */
ControlBase.prototype.addClass = function(className){
	// functionname : [Control.addClass]
	
	//예외처리
	if( typeof className != "string" )	//클래스 명이 문자열이 아닌 경우 예외처리함
		return;
	
	var classStr = null;
	var classItems = null;
	
	//클래스 속성 구함
	classStr = this.tagObject.getAttribute("class");
	
	//기존 클래스 속성이 없는 경우
	if( classStr == null ){
		classStr = className;
	}
	//기존 클래스 속성이 있는 경우 
	else{
		//클래스 속성 양 끝 공백 제거
		classStr = ("" + classStr).replace(/(^\s*)|(\s*$)/g, "");
		//공백 구분 문자열로 배열 생성
		classItems = classStr.split(" ");
		
		//클래스 속성 문자열에 클래스명이 없다면 추가
		if( classItems.indexOf(className) < 0 )
			classItems.push(className);
		
		//메모리 해제
		classStr = null;
		
		//클래스 문자열 생성
		classStr = classItems.join(" ").replace(/\s+/g, " ");
	}
	
	//클래스 명 사이의 공백 중 2개 이상 띄어진 공백이 있는 경우 1개 공백으로 바꿔 클래스 속성 설정
	this.tagObject.setAttribute("class", classStr);
	
	//메모리 해제
	classItems.clear(); classItems = null;
	classStr = null;
};

/**
 *     @description	미결
 *     @param	{string}	className
 *     @return	{void}
 *     @example	미결
 */
ControlBase.prototype.removeClass = function(className){
	// functionname : [Control.addClass]
	
	//예외처리
	if( typeof className != "string" )	//클래스 명이 문자열이 아닌 경우 예외처리함
		return;

	//클래스 속성 구함
	var classStr = this.tagObject.getAttribute("class");
	var classItems = null;
	var classIndex = 0;
	
	//기존 클래스 속성이 있는 경우에만 클래스를 제거할 수 있음
	if( classStr != null ){
		//클래스 속성 양 끝 공백 제거 후, 클래스 명 사이 공백 중 2개 이상 골백을 1개 공백으로 변환
		classStr = ("" + classStr).replace(/(^\s*)|(\s*$)/g, "").replace(/\s+/g, " ");
		//클래스 구분자인 1개 공백을 기준으로 배열로 변환
		classItems = classStr.split(" ");
		//클래스명 체크
		classIndex = classItems.indexOf(className);
		
		//클래스가 있는 경우
		if( classIndex >= 0 ){
			//클래스 제거
			classItems[classIndex] = "";
			//메모리 해제
			classStr = null;
			
			//클래스 배열을 다시 구분자인 1개 공백으로 합침
			classStr = classItems.join(" ").replace(/\s+/g, " ").replace(/(^\s*)|(\s*$)/g, "");
			
			//클래스 설정
			this.tagObject.setAttribute("class", classStr);
		}
		
		//메모리 해제
		classItems = null;
		classStr = null;
	}
};

// 드래그 드롭 관련 부분
ControlBase.prototype.setDraggable = function(draggable){
	// functionname : [Control.setDraggable]
	
	this.tagObject.setAttribute("draggable", "true");
	return this.draggable = draggable;
};
//드래그 드롭 관련 부분
ControlBase.prototype.setDroppable = function(droppable){
	// functionname : [Control.setDroppable]
	return this.droppable = droppable;
};
//드래그 드롭 관련 부분
ControlBase.prototype.setOuterDroppable = function(outerDroppable){
	// functionname : [Control.setOuterDroppable]
	return this.outerDroppable = outerDroppable;
};

// 드래그쪽 이벤트 호출
function control_DragStart(e){
	// functionname : [control_DragStart]

	e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    if (!control.draggable) return false;
    
    e.dataTransfer.setData("text", control.controlName);
    
    if (control.hasChangeEvent){
    	control.fncDragStartEvent(e);
    	var result = control.fncDragStartEvent(e);
    	if (typeof result != "undefined" && result === false) return false;
    }
    
	return true;
}

function control_Drag(e){
	// functionname : [control_Drag]
	
    e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    if (!control.draggable) return false;
    
    if (control.hasDragMoveEvent){
    	control.fncDragMoveEvent(e);
    }
    
	return true;
}

function control_DragEnd(e){
	// functionname : [control_DragEnd]
	
	     e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    if (!control.draggable) return false;
    
    if (control.hasDragEndEvent){
    	control.fncDragEndEvent(e);
    }
    
	return true;
}

//드롭쪽 이벤트 호출
function control_DragEnter(e){
	// functionname : [control_DragEnter]
	
    e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
        
    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        
        for (var i=0; i < fileLength; i++){
        	arrFileTypes[i] = e.dataTransfer.files[i].type;
        }
        
        if (control.hasDragEnterEvent){
        	control.fncDragEnterEvent(e, "", arrFiles, arrFileTypes);
        }    
    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        
        if (control.hasDragEnterEvent){
        	control.fncDragEnterEvent(e, srcControlName, [], []);
        }    
    }
	
	return true;
}
function control_DragOver(e){
	// functionname : [control_DragOver]
	
    e = window.event || e;
    e.preventDefault();
    
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);
    
    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        
        for (var i=0; i < fileLength; i++){
        	arrFileTypes[i] = e.dataTransfer.files[i].type;
        }
        
        if (control.hasDragOverEvent){
        	control.fncDragOverEvent(e, "", arrFiles, arrFileTypes);
        }    
    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        
        if (control.hasDragOverEvent){
        	control.fncDragOverEvent(e, srcControlName, [], []);
        }    
    }
	
	return true;
}
function control_DragLeave(e){
	// functionname : [control_DragLeave]
	
    e = window.event || e;
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);

    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        
        for (var i=0; i < fileLength; i++){
        	arrFileTypes[i] = e.dataTransfer.files[i].type;
        }
        
        if (control.hasDragLeaveEvent){
        	control.fncDragLeaveEvent(e, "", arrFiles, arrFileTypes);
        }    
    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        
        if (control.hasDragLeaveEvent){
        	control.fncDragLeaveEvent(e, srcControlName, [], []);
        }    
    }

	return true;
}

function control_Drop(e){
	// functionname : [control_Drop]
	
    e = window.event || e;
    e.preventDefault();
    
    
    var em = e.srcElement ? e.srcElement : e.target;
    var control = getControlByTag(em);

    var fileLength = e.dataTransfer.files.length;
    if (fileLength > 0){
    	if (!control.outerDroppable) return false;
        var arrFiles = e.dataTransfer.files;
        var arrFileTypes = [];
        var arrIsImage = [];
        var arrIsText = [];
        var arrIsSheet = [];
          
        
        for (var i=0; i < fileLength; i++){
        	var fileType = e.dataTransfer.files[i].type;
        	arrFileTypes[i] = fileType;
        	arrIsImage[i] = fileType.match(/image.*/);
        	arrIsText[i]  = fileType.match(/text.*/);
        	arrIsSheet[i] = fileType.match(/application.*.ms-excel/) || 
        	                fileType.match(/application.*.sheet/);
        }
        
        if (control.hasDropEndEvent){
        	control.fncDragLeaveEvent(e, "", arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet);
        }
        
        // 기본 드롭동작 수행
        _defaultDropTask_outer(arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet);

    } else {
    	if (!control.droppable) return false;
        var srcControlName = e.dataTransfer.getData("text");
        var targetControlName = control.controlName;
        var optionItem = null;
        var result = false;
        
        if (control.hasDragLeaveEvent){
        	var result = control.fncDropEndEvent(e, srcControlName, [], [], [], [], []);
        	if (typeof result != "undefined" && result === false) return false;
        }  
        
        // 기본 드롭동작 수행
        _defaultDropTask_inner(e, srcControlName, targetControlName, optionItem);
        
    }
	return true;
}

// 드롭시 정해진 동작 
function _defaultDropTask_inner(e, srcControlName, targetControlName, optionItem){
	
	var srcControl    = controls[srcControlName];
	var targetControl = controls[targetControlName];
	
	var srcElement    = srcControl.tagObject;
	var targetElement = targetControl.tagObject;
		
	var data = typeof Label != "undefined" && srcControl instanceof Label ? { text: srcControl.value }:
		       typeof TextBox != "undefined" && srcControl instanceof TextBox && !srcControl.multiLine  ? { text: srcElement.value.substring(srcElement.selectionStart, srcElement.selectionEnd)} : 
			   typeof TextBox != "undefined" && srcControl instanceof TextBox && srcControl.multiLine  ? { text: srcElement.value} : 
			   typeof ComboBox != "undefined" && srcControl instanceof ComboBox ? {value: srcControl.value, text: srcControl.text} : 
			   typeof ListBox != "undefined" && srcControl instanceof ListBox && srcControl.listType != LISTBOX_TYPE_DATASELECT ? { value: srcControl.value, text: srcControl.text} : 
			   typeof ListBox != "undefined" && srcControl instanceof ListBox && srcControl.listType != LISTBOX_TYPE_DATASELECT ? { value: optionItem.value, text: optionItem.text } : 
			   typeof CheckBox != "undefined" && srcControl instanceof CheckBox ? {value: srcControl.value, text: srcControl.caption} : 
			   typeof OptionButton != "undefined" && srcControl instanceof OptionButton ? {value: srcControl.value, text: srcControl.caption} : 
			   typeof PictureBox != "undefined" && srcControl instanceof PictureBox ? {src: srcElement.getElementsByTagName("IMG")[0].src} : 
			   typeof ListSheet != "undefined" && srcControl instanceof ListSheet ? {src: srcElement.getValue()} : 
			   typeof TextBox2 != "DataSheet" && srcControl instanceof DataSheet ? {src: srcElement.getValue()} : 
			   typeof TreeView != "undefined" && srcControl instanceof TreeView ? {value: srcControl.selectedItem.value, text: srcControl.selectedItem.text} : 
			   typeof Linker != "undefined" && srcControl instanceof Linker ? {src: srcControl.url} : 
			   {};
			   
	if (typeof Label != "undefined" && targetControl instanceof Label){
		if (typeof data.text != "undefined"){
			targetControl.setCaption(data.text);
		} else if (typeof data.value != "undefined"){
			targetControl.setCaption(data.value);
		} else if (typeof data.src != "undefined"){
			targetControl.setCaption(data.src);
		} 
		
	} else if (typeof TextBox != "undefined" && targetControl instanceof TextBox){
		if (typeof data.text != "undefined"){
			targetControl.setValue(data.text);
		} else if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		} else if (typeof data.src != "undefined"){
			targetControl.setValue(data.src);
		} 
		
	} else if (typeof ComboBox != "undefined" && targetControl instanceof ComboBox){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		} else if (typeof data.text != "undefined"){
			targetControl.setText(data.text);
		} 
		
	} else if (typeof ListBox != "undefined" && targetControl instanceof ListBox  && targetControl.listType != LISTBOX_TYPE_DATASELECT){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		} else if (typeof data.text != "undefined"){
			targetControl.setText(data.text);
		} 
		
	} else if (typeof ListBox != "undefined" && targetControl instanceof ListBox  && targetControl.listType == LISTBOX_TYPE_DATASELECT){
		if (typeof data.text != "undefined" && typeof data.value != "undefined"){
			targetControl.addItem(data.text, data.value);
		} else if (typeof data.value != "undefined"){
			targetControl.addItem(data.value, data.value);
		} else if (typeof data.text != "undefined"){
			targetControl.addItem(data.text, data.text);
		} 
		
	} else if (typeof CheckBox != "undefined" && targetControl instanceof CheckBox){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof OptionButton != "undefined" && targetControl instanceof OptionButton){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof PictureBox != "undefined" && targetControl instanceof PictureBox){
		if (typeof data.url != "undefined"){
			targetControl.setValue(data.url);
		}
		
	} else if (typeof ListSheet != "undefined" && targetControl instanceof ListSheet){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof DataSheet != "undefined" && targetControl instanceof DataSheet){
		if (typeof data.value != "undefined"){
			targetControl.setValue(data.value);
		}
		
	} else if (typeof DataSheet != "Linker" && targetControl instanceof Linker){
		if (typeof data.url != "undefined"){
			targetControl.setValue(data.url);
		}
        if (typeof data.text != "undefined"){
			targetControl.setCaption(data.text);
		} 		
		
	} else if (typeof DataSheet != "IFrame" && targetControl instanceof Linker){
		if (typeof data.url != "undefined"){
			targetControl.setValue(data.url);
		}
	}
	
	return;
}

function _defaultDropTask_outer(arrFiles, arrFileTypes, arrIsImage, arrIsText, arrIsSheet){
	
	// 소스와 타겟별 기본 동작을 입힌다.
	/*
       "text/plain", 
       "application/octet-stream", 
       "application/microdata+json", 
       "text/uri-list",
       "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
       "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
       "application/vnd.ms-powerpoint"
       "audio/x-ms-wma"
	 * */
	return;
}
var turnOffYearSpan = false;     // true = Only show This Year and Next, false = show +/- 5 years
var weekStartsOnSunday = false;  // true = Start the week on Sunday, false = start the week on Monday

var calendar_display_time = true;


var todayStringFormat = getText("message_calendar_001", "오늘 날짜 : [year]년[monthString]월[day]일  [todayString]");
var pathToImages = getContextPath() + "/winnersoft/images/calendar/";	

var speedOfSelectBoxSliding = 200;	
var intervalSelectBox_minutes = 5;	

var calendar_offsetTop = 0;		
var calendar_offsetLeft = 0;	
var calendarDiv = false;
var calendarMMDiv = false;
var MSIE = false;
var Opera = false;
var WTagId='';
var CType = 1;
if(navigator.userAgent.indexOf('MSIE')>=0 && navigator.userAgent.indexOf('Opera')<0)MSIE=true;
if(navigator.userAgent.indexOf('Opera')>=0)Opera=true;

		var monthArray = [
		                  getText("message_calendar_002", '1월'),
		                  getText("message_calendar_003", '2월'),
		                  getText("message_calendar_004", '3월'),
		                  getText("message_calendar_005", '4월'),
		                  getText("message_calendar_006", '5월'),
		                  getText("message_calendar_007", '6월'),
		                  getText("message_calendar_008", '7월'),
		                  getText("message_calendar_009", '8월'),
		                  getText("message_calendar_010", '9월'),
		                  getText("message_calendar_011", '10월'),
		                  getText("message_calendar_012", '11월'),
		                  getText("message_calendar_013", '12월')];
		var monthArrayShort = ['1','2','3','4','5','6','7','8','9','10','11','12'];
		var dayArray = [
		                getText("message_calendar_014", '일'),
		                getText("message_calendar_015", '월'),
		                getText("message_calendar_016", '화'),
		                getText("message_calendar_017", '수'),
		                getText("message_calendar_018", '목'),
		                getText("message_calendar_019", '금'),
		                getText("message_calendar_020", '토')];
		var weekString = getText("message_calendar_021", '주');
		var todayString = '';

if (weekStartsOnSunday) {
   var tempDayName = dayArray[6];
   for(var theIx = 6; theIx > 0; theIx--) {
      dayArray[theIx] = dayArray[theIx-1];
   }
   dayArray[0] = tempDayName;
}



var daysInMonthArray = [31,28,31,30,31,30,31,31,30,31,30,31];
var currentMonth;
var currentYear;
var currentHour;
var currentMinute;
var calendarContentDiv;
var returnDateTo;
var returnFormat;
var activeSelectBoxMonth;
var activeSelectBoxYear;
var activeSelectBoxHour;
var activeSelectBoxMinute;

var iframeObj = false;
var iframeObj2 =false;

/**
 * @description	미결
 * @param		{String}	where2fixit
 * @returns		{Undefined}
 * @example		미결
 */
function EIS_FIX_EI1(where2fixit)
{

		if(!iframeObj2)return;
		iframeObj2.style.display = 'block';
		iframeObj2.style.height =document.getElementById(where2fixit).offsetHeight+1;
		iframeObj2.style.width=document.getElementById(where2fixit).offsetWidth;
		iframeObj2.style.left=getleftPos(document.getElementById(where2fixit))+1-calendar_offsetLeft;
		iframeObj2.style.top=getTopPos(document.getElementById(where2fixit))-document.getElementById(where2fixit).offsetHeight-calendar_offsetTop;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function EIS_Hide_Frame()
{		
	if(iframeObj2)iframeObj2.style.display = 'none';}
var returnDateToYear;
var returnDateToMonth;
var returnDateToDay;
var returnDateToHour;
var returnDateToMinute;

var inputYear;
var inputMonth;
var inputDay;
var inputHour;
var inputMinute;
var calendarDisplayTime = false;

var selectBoxHighlightColor = '#D60808'; 
var selectBoxRolloverBgColor = '#ffffff'; 

var selectBoxMovementInProgress = false;
var activeSelectBox = false;

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
function cancelCalendarEvent()
{
	return false;
}
/**
 * @description	미결
 * @param		{Number}	inputYear
 * @returns		{Undefined}
 * @example		미결
 */
function isLeapYear(inputYear)
{
	if(inputYear%400==0||(inputYear%4==0&&inputYear%100!=0)) return true;
	return false;

}
var activeSelectBoxMonth = false;
var activeSelectBoxDirection = false;

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightMonthYear()
{
	if(activeSelectBoxMonth)activeSelectBoxMonth.className='';
	activeSelectBox = this;


	if(this.className=='monthYearActive'){
		this.className='';
	}else{
		this.className = 'monthYearActive';
		activeSelectBoxMonth = this;
	}

	if(this.innerHTML.indexOf('-')>=0 || this.innerHTML.indexOf('+')>=0){
		if(this.className=='monthYearActive')
			selectBoxMovementInProgress = true;
		else
			selectBoxMovementInProgress = false;
		if(this.innerHTML.indexOf('-')>=0)activeSelectBoxDirection = -1; else activeSelectBoxDirection = 1;

	}else selectBoxMovementInProgress = false;

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showMonthDropDown()
{
	if(document.getElementById('monthDropDown').style.display=='block'){
		document.getElementById('monthDropDown').style.display='none';
				EIS_Hide_Frame();
	}else{
		document.getElementById('monthDropDown').style.display='block';
		document.getElementById('yearDropDown').style.display='none';
		document.getElementById('hourDropDown').style.display='none';
		document.getElementById('minuteDropDown').style.display='none';
			if (MSIE)
		{ EIS_FIX_EI1('monthDropDown')}

	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showYearDropDown()
{    
	if(document.getElementById('yearDropDown').style.display=='block'){
		document.getElementById('yearDropDown').style.display='none';
				EIS_Hide_Frame();
	}else{
		document.getElementById('yearDropDown').style.display='block';
		document.getElementById('monthDropDown').style.display='none';
		document.getElementById('hourDropDown').style.display='none';
		document.getElementById('minuteDropDown').style.display='none';
			if (MSIE)
		{ EIS_FIX_EI1('yearDropDown')}


	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showHourDropDown()
{
	if(document.getElementById('hourDropDown').style.display=='block'){
		document.getElementById('hourDropDown').style.display='none';

				EIS_Hide_Frame();
	}else{
		document.getElementById('hourDropDown').style.display='block';
		document.getElementById('monthDropDown').style.display='none';
		document.getElementById('yearDropDown').style.display='none';
		document.getElementById('minuteDropDown').style.display='none';
				if (MSIE)
		{ EIS_FIX_EI1('hourDropDown')}

	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function showMinuteDropDown()
{
	if(document.getElementById('minuteDropDown').style.display=='block'){
		document.getElementById('minuteDropDown').style.display='none';

				EIS_Hide_Frame();
	}else{
		document.getElementById('minuteDropDown').style.display='block';
		document.getElementById('monthDropDown').style.display='none';
		document.getElementById('yearDropDown').style.display='none';
		document.getElementById('hourDropDown').style.display='none';
				if (MSIE)
		{ EIS_FIX_EI1('minuteDropDown')}

	}

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function selectMonth()
{
	document.getElementById('calendar_month_txt').innerHTML = this.innerHTML
	currentMonth = this.id.replace(/[^\d]/g,'');

	document.getElementById('monthDropDown').style.display='none';
	//// fix for EI frame problem on time dropdowns 09/30/2006
				EIS_Hide_Frame();
	for(var no=0;no<monthArray.length;no++){
		document.getElementById('monthDiv_'+no).style.color='';
	}
	this.style.color = selectBoxHighlightColor;
	activeSelectBoxMonth = this;
	writeCalendarContent();

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function selectMinute()
{
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function selectYear()
{
	document.getElementById('calendar_year_txt').innerHTML = this.innerHTML
	currentYear = this.innerHTML.replace(/[^\d]/g,'');
	document.getElementById('yearDropDown').style.display='none';
				EIS_Hide_Frame();
	if(activeSelectBoxYear){
		activeSelectBoxYear.style.color='';
	}
	activeSelectBoxYear=this;
	this.style.color = selectBoxHighlightColor;
	writeCalendarContent();

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918
//좌우측버튼 클릭시 월변경처리
function switchMonth()
{

	if(this.src.indexOf('left')>=0){
		if(CType == 1){
			currentMonth=currentMonth-1;;
			if(currentMonth<0){
				currentMonth=11;
				currentYear=currentYear-1;
			}
		}else if(CType == 2){
			currentYear=currentYear-1;
		}
	}else{
		if(CType == 1){		
			currentMonth=currentMonth+1;;
			if(currentMonth>11){
				currentMonth=0;
				currentYear=currentYear/1+1;
			}
		}else if(CType == 2){
			currentYear=currentYear/1+1;
		}
	}

	//달력만들기 실행
	writeCalendarContent();
}

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
function createMonthDiv(){
	var div = document.createElement('DIV');
	div.className='monthYearPicker';
	div.id = 'monthPicker';
	for(var no=0;no<monthArray.length;no++){
		var subDiv = document.createElement('DIV');
		subDiv.innerHTML = monthArray[no];
		subDiv.onmouseover = highlightMonthYear;
		subDiv.onmouseout = highlightMonthYear;
		subDiv.onclick = selectMonth;
		subDiv.id = 'monthDiv_' + no;
		subDiv.style.width = '37px';
    //20110404 추가
    //  	subDiv.style.cssText ='float:left;	margin-right:1px;';	
    subDiv.style.cssText='float:none;	clear:both;		padding:1px;	margin:1px;		cursor:pointer;';
		subDiv.onselectstart = cancelCalendarEvent;
		div.appendChild(subDiv);
		if(currentMonth && currentMonth==no){
			subDiv.style.color = selectBoxHighlightColor;
			activeSelectBoxMonth = subDiv;
		}
	}
	return div;
}

/**
 * @description	미결
 * @name		calendar#changeSelectBoxYear
 * @event		
 * @param		{Object}	inputObj
 * @returns		{Undefined}
 * @example		미결
 */
function changeSelectBoxYear(e,inputObj)
{
	if(!inputObj)inputObj =this;
	var yearItems = inputObj.parentNode.getElementsByTagName('DIV');
	if(inputObj.innerHTML.indexOf('-')>=0){
		var startYear = yearItems[1].innerHTML/1 -1;
		if(activeSelectBoxYear){
			activeSelectBoxYear.style.color='';
		}
	}else{
			var startYear = "";
		if (inputObj.name == "up") 
			startYear = yearItems[1].innerHTML/1 -1;
		else
			startYear = yearItems[1].innerHTML/1 +1;
			
		if(activeSelectBoxYear){
			activeSelectBoxYear.style.color='';

		}
	}

	for(var no=1;no<yearItems.length-1;no++){
		yearItems[no].innerHTML = startYear+no-1;
		yearItems[no].id = 'yearDiv' + (startYear/1+no/1-1);

	}
	if(activeSelectBoxYear){
		activeSelectBoxYear.style.color='';
		if(document.getElementById('yearDiv'+currentYear)){
			activeSelectBoxYear = document.getElementById('yearDiv'+currentYear);
			activeSelectBoxYear.style.color=selectBoxHighlightColor;
		}
	}
}

/**
 * @description	미결
 * @name		calendar#changeSelectBoxHour
 * @event		
 * @param		{Object}	inputObj
 * @returns		{Undefined}
 * @example		미결
 */
function changeSelectBoxHour(e,inputObj)
{
alert(" e =" + e +" inputObj : " + inputObj);
	if(!inputObj)inputObj = this;

	var hourItems = inputObj.parentNode.getElementsByTagName('DIV');
	if(inputObj.innerHTML.indexOf('-')>=0){
		var startHour = hourItems[1].innerHTML/1 -1;
		if(startHour<0)startHour=0;
		if(activeSelectBoxHour){
			activeSelectBoxHour.style.color='';
		}
	}else{
		var startHour = hourItems[1].innerHTML/1 +1;
		if(startHour>14)startHour = 14;
		if(activeSelectBoxHour){
			activeSelectBoxHour.style.color='';

		}
	}
	var prefix = '';
	for(var no=1;no<hourItems.length-1;no++){
		if((startHour/1 + no/1) < 11)prefix = '0'; else prefix = '';
		hourItems[no].innerHTML = prefix + (startHour+no-1);

		hourItems[no].id = 'hourDiv' + (startHour/1+no/1-1);

	}
	if(activeSelectBoxHour){
		activeSelectBoxHour.style.color='';
		if(document.getElementById('hourDiv'+currentHour)){
			activeSelectBoxHour = document.getElementById('hourDiv'+currentHour);
			activeSelectBoxHour.style.color=selectBoxHighlightColor;;
		}
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateYearDiv()
{
    var yearSpan = 5;
    if (turnOffYearSpan) {
       yearSpan = 0;
    }
	var div = document.getElementById('yearDropDown');
	var yearItems = div.getElementsByTagName('DIV');
	for(var no=1;no<yearItems.length-1;no++){
		yearItems[no].innerHTML = currentYear/1 -yearSpan + no;
		if(currentYear==(currentYear/1 -yearSpan + no)){
			yearItems[no].style.color = selectBoxHighlightColor;
			activeSelectBoxYear = yearItems[no];
		}else{
			yearItems[no].style.color = '';
		}
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateMonthDiv()
{
	for(no=0;no<12;no++){
		document.getElementById('monthDiv_' + no).style.color = '';
	}

	document.getElementById('monthDiv_' + currentMonth).style.color = '#000000';
	activeSelectBoxMonth = 	document.getElementById('monthDiv_' + currentMonth);
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateHourDiv()
{

	var div = document.getElementById('hourDropDown');
	var hourItems = div.getElementsByTagName('DIV');

	var addHours = 0;
	if((currentHour/1 -6 + 1)<0){
		addHours = 	(currentHour/1 -6 + 1)*-1;
	}
	for(var no=1;no<hourItems.length-1;no++){
		var prefix='';
		if((currentHour/1 -6 + no + addHours) < 10)prefix='0';
		hourItems[no].innerHTML = prefix +  (currentHour/1 -6 + no + addHours);
		if(currentHour==(currentHour/1 -6 + no)){
			hourItems[no].style.color = selectBoxHighlightColor;
			activeSelectBoxHour = hourItems[no];
		}else{
			hourItems[no].style.color = '';
		}
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function updateMinuteDiv()
{
	for(no=0;no<60;no+=intervalSelectBox_minutes){
		var prefix = '';
		if(no<10)prefix = '0';

		document.getElementById('minuteDiv_' + prefix + no).style.color = '';
	}
	if(document.getElementById('minuteDiv_' + currentMinute)){
		document.getElementById('minuteDiv_' + currentMinute).style.color = selectBoxHighlightColor;
		activeSelectBoxMinute = document.getElementById('minuteDiv_' + currentMinute);
	}
}


/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
function createYearDiv()
{

	if(!document.getElementById('yearDropDown')){
		var div = document.createElement('DIV');
		div.className='monthYearPicker';
		div.style.cursor='pointer';
	}else{
		var div = document.getElementById('yearDropDown');
		var subDivs = div.getElementsByTagName('DIV');
		for(var no=0;no<subDivs.length;no++){
			subDivs[no].parentNode.removeChild(subDivs[no]);
		}
	}


	var d = new Date();
	if(currentYear){
		d.setFullYear(currentYear);
	}

	var startYear = d.getFullYear()/1 - 5;

    var yearSpan = 10;
	if (! turnOffYearSpan) {
    	var subDiv = document.createElement('DIV');
    	subDiv.innerHTML = '&nbsp;&nbsp;▲ ';
    	subDiv.style.cursor='pointer';
    	subDiv.id = subDiv.name = "up";
    	subDiv.onclick = changeSelectBoxYear;
    	subDiv.onmouseover = highlightMonthYear;
    	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
    	subDiv.onselectstart = cancelCalendarEvent;
    	div.appendChild(subDiv);
    } else {
       startYear = d.getFullYear()/1 - 0;
       yearSpan = 2;
    }

	for(var no=startYear;no<(startYear+yearSpan);no++){
		var subDiv = document.createElement('DIV');
		subDiv.innerHTML = no;
		subDiv.onmouseover = highlightMonthYear;
		subDiv.onmouseout = highlightMonthYear;
		subDiv.onclick = selectYear;
		subDiv.id = 'yearDiv' + no;
		subDiv.onselectstart = cancelCalendarEvent;
		div.appendChild(subDiv);
		if(currentYear && currentYear==no){
			subDiv.style.color = selectBoxHighlightColor;
			activeSelectBoxYear = subDiv;
		}
	}
	if (! turnOffYearSpan) {
    	var subDiv = document.createElement('DIV');
    	subDiv.innerHTML = '&nbsp;&nbsp;▼';
    	subDiv.style.cursor='pointer';    	
    	subDiv.id = subDiv.name = "down";
    	subDiv.onclick = changeSelectBoxYear;
    	subDiv.onmouseover = highlightMonthYear;
    	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
    	subDiv.onselectstart = cancelCalendarEvent;
    	div.appendChild(subDiv);
	}
	return div;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function slideCalendarSelectBox()
{
	if(selectBoxMovementInProgress){
		if(activeSelectBox.parentNode.id=='hourDropDown'){
			changeSelectBoxHour(false,activeSelectBox);
		}
		if(activeSelectBox.parentNode.id=='yearDropDown'){
			changeSelectBoxYear(false,activeSelectBox);
		}

	}
	setTimeout('slideCalendarSelectBox()',speedOfSelectBoxSliding);

}

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
function createHourDiv()
{
	if(!document.getElementById('hourDropDown')){
		var div = document.createElement('DIV');
		div.className='monthYearPicker';
	}else{
		var div = document.getElementById('hourDropDown');
		var subDivs = div.getElementsByTagName('DIV');
		for(var no=0;no<subDivs.length;no++){
			subDivs[no].parentNode.removeChild(subDivs[no]);
		}
	}

	if(!currentHour)currentHour=0;
	var startHour = currentHour/1;
	if(startHour>14)startHour=14;

	var subDiv = document.createElement('DIV');
	subDiv.innerHTML = '&nbsp;&nbsp;- ';
	subDiv.onclick = changeSelectBoxHour;
	subDiv.onmouseover = highlightMonthYear;
	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
	subDiv.onselectstart = cancelCalendarEvent;
	div.appendChild(subDiv);


	var subDiv = document.createElement('DIV');
	subDiv.innerHTML = '&nbsp;&nbsp;+ ';
	subDiv.onclick = changeSelectBoxHour;
	subDiv.onmouseover = highlightMonthYear;
	subDiv.onmouseout = function(){ selectBoxMovementInProgress = false;};
	subDiv.onselectstart = cancelCalendarEvent;
	div.appendChild(subDiv);

	return div;
}
/* This function creates the minute div at the bottom bar */

/**
 * @description	미결
 * @returns		{String}
 * @example		미결
 */
function createMinuteDiv()
{
	if(!document.getElementById('minuteDropDown')){
		var div = document.createElement('DIV');
		div.className='monthYearPicker';
	}else{
		var div = document.getElementById('minuteDropDown');
		var subDivs = div.getElementsByTagName('DIV');
		for(var no=0;no<subDivs.length;no++){
			subDivs[no].parentNode.removeChild(subDivs[no]);
		}
	}
	var startMinute = 0;
	var prefix = '';
	for(var no=startMinute;no<60;no+=intervalSelectBox_minutes){

		if(no<10)prefix='0'; else prefix = '';
		var subDiv = document.createElement('DIV');
		subDiv.innerHTML = prefix + no;
		subDiv.onmouseover = highlightMonthYear;
		subDiv.onmouseout = highlightMonthYear;
		subDiv.onclick = selectMinute;
		subDiv.id = 'minuteDiv_' + prefix +  no;
		subDiv.onselectstart = cancelCalendarEvent;
		div.appendChild(subDiv);
		if(currentYear && currentYear==no){
			subDiv.style.color = selectBoxHighlightColor;
			activeSelectBoxYear = subDiv;
		}
	}
	return div;
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightSelect()
{
	if(this.className=='selectBox'){
		this.className = 'selectBoxOver';
		this.getElementsByTagName('IMG')[0].src = pathToImages + 'over_bottom_arrow.png';

	}else if(this.className=='selectBoxOver'){
		this.className = 'selectBox';
		this.getElementsByTagName('IMG')[0].src = pathToImages + 'down.png';
	
	}
}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightSelect2()
{
	var wUrl;
	if(this.className=='weekdaynum' || this.className=='activeDay' ){
		this.className = this.className +'Over';
		wUrl = pathToImages + 'calendar_over.jpg';
		this.style.backgroundImage = "url("+wUrl+")";

	}else if(this.className=='weekdaynumOver' || this.className=='activeDayOver'){
		this.className = this.className.replace('Over', '');
		if(this.className == 'weekdaynum'){
			wUrl = pathToImages + 'daily_block_background.gif';	
		}else{
			wUrl = pathToImages + 'checked_today.png';
		}
		
		this.style.backgroundImage = "url("+wUrl+")";		
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightArrow()
{
	if(this.src.indexOf('over')>=0){
		//if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left.gif';
		//if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right.gif';
		if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left.png';
		if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right.png';
	}else{
		//if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left_over.gif';
		//if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right_over.gif';
		if(this.src.indexOf('left')>=0)this.src = pathToImages + 'cal_left_over.png';
		if(this.src.indexOf('right')>=0)this.src = pathToImages + 'cal_right_over.png';
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightClose()
{
	if(this.src.indexOf('over')>=0){
		this.src = pathToImages + 'cal_close.gif';
	}else{
		this.src = pathToImages + 'cal_close_over.gif';
	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918 달력 close
//시트와 컨트롤에 데이타 넣기
function closeCalendar(){
	try {
		parent.controls[IFrame_1].tagObject.style.height = IFrame_1_height + 'px';
	} catch (e) {}

	document.getElementById('yearDropDown').style.display='none';
	if(CType == 1) document.getElementById('monthDropDown').style.display='none';
	if(CType == 1) document.getElementById('hourDropDown').style.display='none';
	if(CType == 1) document.getElementById('minuteDropDown').style.display='none';

	calendarDiv.style.zIndex = 0;
	calendarDiv.style.display='none';
	if(iframeObj){
		iframeObj.style.display='none';
			EIS_Hide_Frame();}
	if(activeSelectBoxMonth)activeSelectBoxMonth.className='';
	if(activeSelectBoxYear)activeSelectBoxYear.className='';
	//20110407  textbox에 강제적으로 값을 넣어준다.이유는 기존 달력의 포커스를 잃어 버리는 경우에만 
	//값이 들어가는데 변경된 달력의 경우 달력을 클릭하면 포커스가 바로 잃어 버리기때문에이다.
	if(returnDateTo.id.match(/^[a-zA-Z]+/)[0] == "shtTextsheet"){
		var wSheet = controls["Sheet"+returnDateTo.id.match(/_\d+/)[0]];
		//var wSheet = controls[document.getElementById("Sheet"+returnDateTo.id.match(/_\d+/)[0]).attributes.name.nodeValue];
		wSheet.setValue(wSheet.currentRow,wSheet.currentCol,returnDateTo.value.split(specialChars).join(""));
	}else{
		var cal_ctl = controls[returnDateTo.getAttribute("ctlname")];
		var specialChars = /[~!\#$^&*\=+|:;?"<,.>'-\/]/;
		cal_ctl.setValue(returnDateTo.value.split(specialChars).join(""));
		
	}

	//document.getElementById(WTagId).select();
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function closeNotActionCalendar(){
	try {
		parent.controls[IFrame_1].tagObject.style.height = IFrame_1_height + 'px';
	} catch (e) {}

	document.getElementById('yearDropDown').style.display='none';
	document.getElementById('monthDropDown').style.display='none';
	document.getElementById('hourDropDown').style.display='none';
	document.getElementById('minuteDropDown').style.display='none';

	calendarDiv.style.zIndex = 0;
	calendarDiv.style.display='none';
	if(iframeObj){
		iframeObj.style.display='none';
			EIS_Hide_Frame();}
	if(activeSelectBoxMonth)activeSelectBoxMonth.className='';
	if(activeSelectBoxYear)activeSelectBoxYear.className='';
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918 상단 달력 만들기
function writeTopBar()
{
/* 상단 테그 생성
 * 
 */
	
	var topBar = document.createElement('DIV');
//	topBar.className = 'topBar';
	topBar.style.backgroundImage = pathToImages+"caledar_x-repeat_bg.gif";
	topBar.id = 'topBar';
	
	//150916 김남용 백그라운드 색상변경
	topBar.style.cssText ='	height:25px; padding:5px; background-color:#d23000; ';
	calendarDiv.appendChild(topBar);
   /*
	var img = document.createElement('IMG');
	img.style.cssText ='width:100%;	height:25px;';
	img.src = pathToImages + 'caledar_x-repeat_bg.gif';
	topBar.appendChild(img);
	*/
	// Left arrow
	var leftDiv = document.createElement('DIV');
	//20110404 추가	
	//leftDiv.style.cssText ='float:left;	margin-right:1px;';
	//150916 Left
	if(CType == 1 ){
//		leftDiv.style.cssText ='float:left;	margin-left: 5px;';
		leftDiv.style.cssText ='float:left;	margin-left: 20px;margin-top:7px;';		
	}else if(CType == 2 ){
		leftDiv.style.cssText ='float:left;	margin-left: 12px;margin-top:7px;';
	} 
	

	
	var img = document.createElement('IMG');
	img.style.cssText = 'cursor:pointer;';
	//img.src = pathToImages + 'cal_left.gif';
	img.src = pathToImages + 'cal_left.png';
	img.onmouseover = highlightArrow;
	img.onclick = switchMonth;
	img.onmouseout = highlightArrow;
	leftDiv.appendChild(img);
	topBar.appendChild(leftDiv);
	if(Opera)leftDiv.style.width = '16px';
	
	// Year selector
	var yearDiv = document.createElement('DIV');
  //20110404 추가
	//yearDiv.style.cssText ='float:left;	margin-right:1px;width:50px;';	
	yearDiv.style.cssText ='float:left;	width:50px;top: 2px;left: 23px;font-weight:bold;';
	
	//150916 년도 
	if(CType == 1 ){
		yearDiv.style.cssText ='float:left;	width:50px;top: 5px;left: 23px;font-weight:bold;';
	}else if(CType == 2 ){
		yearDiv.style.cssText ='float:left; top: 5px;left: 25px;font-weight:bold; FONT-FAMILY: 나눔고딕;	font-size:15px;';
	} 
	
	yearDiv.onmouseover = highlightSelect;
	yearDiv.onmouseout = highlightSelect;
	yearDiv.onclick = showYearDropDown;
	var span = document.createElement('SPAN');

	span.innerHTML = currentYear;
	span.id = 'calendar_year_txt';
	span.style.cssText ='margin-right:2px;'; // 2011-06-21 추가
	yearDiv.appendChild(span);
	topBar.appendChild(yearDiv);

	var img = document.createElement('IMG');
	img.src = pathToImages + 'down.png';
  //20110404 추가		
	//img.style.cssText = 'float:right;cursor:pointer';
	img.style.cssText = 'cursor:pointer';
	img.style.marginTop= '5px';
	yearDiv.appendChild(img);
	yearDiv.className = 'selectBox';

  // 리스트 년 만들기.
	var yearPicker = createYearDiv();
	yearPicker.style.left = '55px';
	yearPicker.style.top = yearDiv.offsetTop + yearDiv.offsetHeight + 1 + 'px';
	yearPicker.style.width = '35px';
	yearPicker.id = 'yearDropDown';
	calendarDiv.appendChild(yearPicker);

/*
	var img = document.createElement('IMG');
	img.src = pathToImages + 'cal_close.gif';
  //20110404 추가	
	img.style.cssText = 'float:right;cursor:pointer';	
	img.onmouseover = highlightClose;
	img.onmouseout = highlightClose;
	img.onclick = closeNotActionCalendar;
	topBar.appendChild(img);
	if(!document.all){
		img.style.position = 'absolute';
		img.style.right = '2px';
	}
*/	
  //	
	
	// Month selector
	// 150616 년월일 달력일때문 실행
	//
		var monthDiv = document.createElement('DIV');
		calendarMMDiv=monthDiv;
		monthDiv.id = 'monthSelect';
	  //20110404 추가	
		//monthDiv.style.cssText ='float:left;	margin-right:5px;width:50px;';
		monthDiv.style.cssText ='float:left;	width:35px;top: 5px;left: 23px;font-weight:bold;';
		monthDiv.onmouseover = highlightSelect;
		monthDiv.onmouseout = highlightSelect;
		monthDiv.onclick = showMonthDropDown;
		var span = document.createElement('SPAN');
		span.innerHTML = monthArray[currentMonth];
		span.id = 'calendar_month_txt';
		monthDiv.appendChild(span);
	
		var img = document.createElement('IMG');
		img.src = pathToImages + 'down.png';
	  //20110404 추가	
		img.style.cssText = 'float:right; position:absolute; right:0px; cursor:pointer;margin-top:5px;';	
		monthDiv.appendChild(img);
		monthDiv.className = 'selectBox';
	
		topBar.appendChild(monthDiv);

	  // 리스트 월 만들기.
		var monthPicker = createMonthDiv();
		monthPicker.style.left = '108px';
		monthPicker.style.top = monthDiv.offsetTop + monthDiv.offsetHeight + 1 + 'px';
		monthPicker.style.width ='35px';
		monthPicker.id = 'monthDropDown';
		calendarDiv.appendChild(monthPicker);
		if(CType == 1){
			calendarMMDiv.style.display = 'block';
		}else{
			calendarMMDiv.style.display = 'none';
		}

		// Right arrow
	var rightDiv = document.createElement('DIV');
  //20110404 추가	
	//rightDiv.style.cssText ='float:left;	margin-right:1px;';			
	//150916 
	rightDiv.style.cssText ='float:left;	margin-left: 50px;margin-top:7px;';

	var img = document.createElement('IMG');
	img.style.cssText = 'cursor:pointer;';	
	//img.src = pathToImages + 'cal_right.gif';
	img.src = pathToImages + 'cal_right.png';	
	img.onclick = switchMonth;
	img.onmouseover = highlightArrow;
	img.onmouseout = highlightArrow;
	rightDiv.appendChild(img);
	if(Opera)rightDiv.style.width = '16px';
	topBar.appendChild(rightDiv);
	//


}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//달력만들기. 달력선택
function writeCalendarContent()
{
	var calendarContentDivExists = true;
	if(!calendarContentDiv){
		calendarContentDiv = document.createElement('DIV');
		calendarDiv.appendChild(calendarContentDiv);
		calendarContentDivExists = false;
	}
	currentMonth = currentMonth/1;
	var d = new Date();

	d.setFullYear(currentYear);
	d.setDate(1);
	d.setMonth(currentMonth);

	var dayStartOfMonth = d.getDay();
	if (! weekStartsOnSunday) {
      if(dayStartOfMonth==0)dayStartOfMonth=7;
      dayStartOfMonth;
   }

	document.getElementById('calendar_year_txt').innerHTML = currentYear;
	// 150616 년월일 달력일때문 실행
	if(CType == 1){
		document.getElementById('calendar_month_txt').innerHTML = monthArray[currentMonth];
	}

	var existingTable = calendarContentDiv.getElementsByTagName('TABLE');
	if(existingTable.length>0){
		calendarContentDiv.removeChild(existingTable[0]);
	}
	//숫자요일 만들 테이블 생성
	var calTable = document.createElement('TABLE');
	calTable.width = '100%';
	calTable.cellSpacing = '0';
	calTable.borderCollapse = 'initial';
	calendarContentDiv.appendChild(calTable);


	var calTBody = document.createElement('TBODY');
	calTable.appendChild(calTBody);
	var row = calTBody.insertRow(-1);
	row.className = 'calendar_week_row';

	//요일 만들기 .. 월화수목금토일..
	// 150616 년월일 달력일때문 실행
	if(CType == 1){
		for(var no=0;no<dayArray.length;no++){
			var cell = row.insertCell(-1);
			cell.innerHTML = dayArray[no];
			//1509016 추가		
			cell.id="wn_weekdaynm";
		}
	}
//	else if(CType == 2){
//		for(var no=0;no<=monthArray.length;no++){
//			var row;
//			var cell;
//			if(no == 4 || no == 8){
//				row = calTBody.insertRow(-1);
//			}
//			cell = row.insertCell(-1);
//			cell.innerHTML = monthArray[no];		
//			cell.id="wn_weekdaynm";
//		}		
//	}
	
	// 150616 년월일 달력일때문 실행
	if(CType == 1){
		var row = calTBody.insertRow(-1);

		//첫번째줄 1일이 해당하는 요월에 맞게 셋팅 . 7이면 실행안함(시작이 일요일 이기때문에)
		if(dayStartOfMonth != 7){
		  	for(var no=0;no<dayStartOfMonth;no++){
		  		var cell = row.insertCell(-1);
		  		cell.innerHTML = '&nbsp;';
//				cell.id="wn_weekdaydefalut";  	
		  		cell.style.backgroundImage=pathToImages+"daily_block_background.gif"
				cell.style.borderLeft="1px solid #bebebe";
				cell.style.borderTop="1px solid #bebebe";				
		  	}
		  }
	
		var colCounter = dayStartOfMonth;
		
		var daysInMonth = daysInMonthArray[currentMonth];
		if(daysInMonth==28){
			if(isLeapYear(currentYear))daysInMonth=29;
		}
		var lastAddRow=7;
		var wOlecolCounter;
		var wLineOk=0;
		for(var no=1;no<=daysInMonth;no++){
			d.setDate(no-1);
			//alert(colCounter);
			if(colCounter>0 && colCounter%7==0){
				var row = calTBody.insertRow(-1);
				cell.style.borderRight=" 1px solid #bebebe";
				lastAddRow=7;	
				var wOlecolCounter  = (daysInMonth - (colCounter-dayStartOfMonth)) + (colCounter-dayStartOfMonth);
				if((no+6) >= daysInMonth ){
					//alert(wOlecolCounter+" , " +dayStartOfMonth+" , " + daysInMonth );
					wLineOk=1;
				}
			}
			//if(no > 28){
			//	alert(no + " ,  " +colCounter);	
			//}
			
			var cell = row.insertCell(-1);
			if(currentYear==inputYear && currentMonth == inputMonth && no==inputDay){
				cell.className='activeDay';
				//150916 선택시 글자색 변경
				cell.style.color='#0000ff';
//				cell.style.backgroundImage="url(winnersoft/images/calendar/checked_today.png)";
				cell.style.backgroundImage=pathToImages+"checked_today.png";
				cell.style.backgroundRepeat="no-repeat";
			}else{
				cell.className="weekdaynum";			
//				cell.style.backgroundImage="url(winnersoft/images/calendar/daily_block_background.gif)";	
				cell.style.backgroundImage=pathToImages+"daily_block_background.gif";	
			}
			// 요일숫자 넣기 1 ,2 ,3 ,4....
		  
			cell.innerHTML = no;
			cell.onclick = pickDate;
			cell.onmouseover = highlightSelect2;
			cell.onmouseout = highlightSelect2;
			cell.style.borderLeft=" 1px solid #bebebe";
			cell.style.borderTop=" 1px solid #bebebe";
			//1509016 추가
			cell.id="wn_weekdaynum";  	
			if(colCounter%7==0 || colCounter%7==6){
				cell.style.color='#ff0000';				
			}
			

			//150921 달력 마지막일자이후 빈공란 셋팅
			if(wLineOk ==1){
				cell.style.borderBottom="1px solid #bebebe";	
			}			
			if(daysInMonth == no){
				//cell.style.borderRight=" 1px solid #bebebe";
				cell.style.borderTop=" 1px solid #bebebe";					
				//alert(lastAddRow);
			  	for(var no1=1;no1<lastAddRow;no1++){
			  		var cell = row.insertCell(-1);
//					cell.id="wn_weekdaydefalut";  
			  		cell.style.backgroundImage=pathToImages+"daily_block_background.gif"
					cell.style.borderLeft="1px solid #bebebe";
					cell.style.borderTop="1px solid #bebebe";
					cell.style.borderBottom="1px solid #bebebe";					
			  	}
				cell.style.borderRight="1px solid #bebebe";
			}
			
			//마지막줄 추가
			lastAddRow= lastAddRow -1;
			colCounter++;
		}
	}else if(CType == 2){
		// 150916 년월달력
		var row = calTBody.insertRow(-1);
		var daysInMonth = daysInMonthArray[currentMonth];
		if(daysInMonth==28){
			if(isLeapYear(currentYear))daysInMonth=29;
		}
	
		for(var no=0;no<monthArrayShort.length;no++){
			d.setDate(no-1);
			
			if(no == 4 || no == 8){
				var row = calTBody.insertRow(-1);
				cell.style.borderRight="1px solid #bebebe";				
			}
			var cell = row.insertCell(-1);
			if(currentYear==inputYear && monthArrayShort[no] == (inputMonth+1) ){
				cell.className='activeDay';
				//150916 선택시 글자색 변경
				cell.style.color='#0000ff';
//				cell.style.backgroundImage="url(winnersoft/images/calendar/checked_today.png)";
				cell.style.backgroundImage=pathToImages+"checked_today.png";
				cell.style.backgroundRepeat="no-repeat";
			}else{
				cell.className="weekdaynum";				
//				cell.style.backgroundImage="url(winnersoft/images/calendar/daily_block_background.gif)";	
				cell.style.backgroundImage=pathToImages+"daily_block_background.gif";	
			}
			
			cell.innerHTML = monthArrayShort[no];
			cell.onclick = pickMm;
		
			//1509016 추가
			cell.style.width="25%";
			//cell.style.height="28px"; 
			cell.onmouseover = highlightSelect2;
			cell.onmouseout = highlightSelect2;			
			cell.id="wn_weekdaynum";
			cell.style.borderLeft="1px solid #bebebe";
			cell.style.borderTop="1px solid #bebebe";
			//150921 년월 보더 색상주기 
			if(no == 3 || no == 7 ||  no == 11){			
				cell.style.borderRight="1px solid #bebebe";				
			}
			if(no > 7) cell.style.borderBottom="1px solid #bebebe";
		}
	}
	
	if(!document.all){
		if(calendarContentDiv.offsetHeight)
			document.getElementById('topBar').style.top = calendarContentDiv.offsetHeight + document.getElementById('timeBar').offsetHeight + document.getElementById('timeBar').offsetHeight + document.getElementById('topBar').offsetHeight -1 + 'px';
		else{
			document.getElementById('topBar').style.top = '';
			document.getElementById('topBar').style.bottom = '0px';
		}
	}

	if(iframeObj){
		if(!calendarContentDivExists)setTimeout('resizeIframe()',350);else setTimeout('resizeIframe()',10);
	}
}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function resizeIframe()
{
	iframeObj.style.width = calendarDiv.offsetWidth + 'px';
	iframeObj.style.height = calendarDiv.offsetHeight + 'px' ;


}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function pickTodaysDate()
{
	var d = new Date();

	currentMonth = d.getMonth();
	currentYear = d.getFullYear();
	pickDate(false,d.getDate());

}

/**
 * @description	미결
 * @name		calendar#pickDate
 * @event
 * @param		{Object}	inputDay	
 * @returns		{Undefined}
 * @example		미결
 * 
 */
function pickDate(e,inputDay)
{
	var month = currentMonth/1 +1;

	if(month<10)month = '0' + month;
	var day;
	if(!inputDay && this)day = this.innerHTML; else day = inputDay;

	if(day/1<10)day = '0' + day;
	//데이터셋팅

	if(returnFormat){
		returnFormat = returnFormat.replace('dd',day);
		returnFormat = returnFormat.replace('mm',month);
		returnFormat = returnFormat.replace('yyyy',currentYear);
		returnFormat = returnFormat.replace('hh',currentHour);
		returnFormat = returnFormat.replace('ii',currentMinute);
		returnFormat = returnFormat.replace('d',day/1);
		returnFormat = returnFormat.replace('m',month/1);
		returnDateTo.value = returnFormat;
		returnDateTo.setAttribute("value", returnFormat);
		
		try{
	
			returnDateTo.onchange();

		}catch(e){

		}
	}else{
		for(var no=0;no<returnDateToYear.options.length;no++){
			if(returnDateToYear.options[no].value==currentYear){
				returnDateToYear.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToMonth.options.length;no++){
			if(returnDateToMonth.options[no].value==parseInt(month)){
				returnDateToMonth.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToDay.options.length;no++){
			if(returnDateToDay.options[no].value==parseInt(day)){
				returnDateToDay.selectedIndex=no;
				break;
			}
		}
		if(calendarDisplayTime){
			for(var no=0;no<returnDateToHour.options.length;no++){
				if(returnDateToHour.options[no].value==parseInt(currentHour)){
					returnDateToHour.selectedIndex=no;
					break;
				}
			}
			for(var no=0;no<returnDateToMinute.options.length;no++){
				if(returnDateToMinute.options[no].value==parseInt(currentMinute)){
					returnDateToMinute.selectedIndex=no;
					break;
				}
			}
		}
	}
	closeCalendar();
}

/**
 * @description	미결
 * @name		calendar#pickMm
 * @event
 * @param		{Object}	inputMm	
 * @returns		{Undefined}
 * @example		미결
 * 
 */
function pickMm(e,inputMm)
{
	var month = currentMonth/1 +1;
	if(!inputMm && this)month = this.innerHTML; else month = inputMm;
	if(month/1<10)month = '0' + month;
	//데이터셋팅
	if(returnFormat){
		returnFormat = returnFormat.replace('mm',month);
		returnFormat = returnFormat.replace('yyyy',currentYear);
		returnDateTo.value = returnFormat;
		returnDateTo.setAttribute("value", returnFormat);
		
		try{
	
			returnDateTo.onchange();

		}catch(e){

		}
	}else{
		for(var no=0;no<returnDateToYear.options.length;no++){
			if(returnDateToYear.options[no].value==currentYear){
				returnDateToYear.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToMonth.options.length;no++){
			if(returnDateToMonth.options[no].value==parseInt(month)){
				returnDateToMonth.selectedIndex=no;
				break;
			}
		}
		for(var no=0;no<returnDateToDay.options.length;no++){
			if(returnDateToDay.options[no].value==parseInt(day)){
				returnDateToDay.selectedIndex=no;
				break;
			}
		}
		if(calendarDisplayTime){
			for(var no=0;no<returnDateToHour.options.length;no++){
				if(returnDateToHour.options[no].value==parseInt(currentHour)){
					returnDateToHour.selectedIndex=no;
					break;
				}
			}
			for(var no=0;no<returnDateToMinute.options.length;no++){
				if(returnDateToMinute.options[no].value==parseInt(currentMinute)){
					returnDateToMinute.selectedIndex=no;
					break;
				}
			}
		}
	}
	closeCalendar();
}

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
function writeTimeBar()
{
	var timeBar = document.createElement('DIV');
	timeBar.id = 'timeBar';
	timeBar.className = 'timeBar';

	var subDiv = document.createElement('DIV');
	subDiv.innerHTML = 'Time:';
	//timeBar.appendChild(subDiv);

	// Year selector
	var hourDiv = document.createElement('DIV');
	hourDiv.onmouseover = highlightSelect;
	hourDiv.onmouseout = highlightSelect;
	hourDiv.onclick = showHourDropDown;
	hourDiv.style.width = '30px';

	var hourPicker = createHourDiv();
	hourPicker.style.left = '130px';
	hourPicker.style.width = '35px';
	hourPicker.id = 'hourDropDown';
	calendarDiv.appendChild(hourPicker);

	// Add Minute picker

	// Year selector
	var minuteDiv = document.createElement('DIV');
	minuteDiv.onmouseover = highlightSelect;
	minuteDiv.onmouseout = highlightSelect;
	minuteDiv.onclick = showMinuteDropDown;
	minuteDiv.style.width = '30px';

	var minutePicker = createMinuteDiv();
	minutePicker.style.left = '167px';
	//minutePicker.style.top = monthDiv.offsetTop + monthDiv.offsetHeight + 1 + 'px';
	minutePicker.style.width = '35px';
	minutePicker.id = 'minuteDropDown';
	calendarDiv.appendChild(minutePicker);


	return timeBar;

}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function writeBottomBar()
{
/* 하단 현재일자 셋팅
 * 
 */
	
	var d = new Date();
	var bottomBar = document.createElement('DIV');

	bottomBar.id = 'bottomBar';

	bottomBar.style.cursor = 'pointer';
//	bottomBar.className = 'todaysDate';
	bottomBar.style.backgroundImage = pathToImages+"daily_block_background.gif";
	bottomBar.style.display = 'none';
	if(CType == 1){
		bottomBar.style.width = '203px';
	}else if(CType == 2){
		bottomBar.style.width = '148px';
	}
	
		// var todayStringFormat = '[todayString] [dayString] [day] [monthString] [year]';	;;

	var subDiv = document.createElement('DIV');
	subDiv.onclick = pickTodaysDate;
	subDiv.id = 'todaysDateString';
	subDiv.style.width = (calendarDiv.offsetWidth - 95) + 'px';
	var day = d.getDay();
	if (! weekStartsOnSunday) {
      if(day==0)day = 7;
      day--;
   }

	var bottomString = todayStringFormat;

	bottomString = bottomString.replace('[monthString]',monthArrayShort[d.getMonth()]);
	bottomString = bottomString.replace('[day]',d.getDate());
	bottomString = bottomString.replace('[year]',d.getFullYear());
	bottomString = bottomString.replace('[dayString]',dayArray[day].toLowerCase());
	bottomString = bottomString.replace('[todayString]',todayString);

	//현재일자 셋팅
	subDiv.innerHTML = todayString + ': ' + d.getDate() + '. ' + monthArrayShort[d.getMonth()] + ', ' +  d.getFullYear() ;
	
	subDiv.innerHTML = bottomString ;

	bottomBar.appendChild(subDiv);

	var timeDiv = writeTimeBar();
	bottomBar.appendChild(timeDiv);

	calendarDiv.appendChild(bottomBar);



}
/**
 * @description	미결
 * @param		{Object}	inputObj
 * @returns		{Number}
 * @example		미결
 */
function getTopPos(inputObj)
{

  var returnValue = inputObj.offsetTop + inputObj.offsetHeight;
  while((inputObj = inputObj.offsetParent) != null)returnValue += inputObj.offsetTop;
  return returnValue + calendar_offsetTop;
}

/**
 * @description	미결
 * @param		{Object}	inputObj
 * @returns		{Number}
 * @example		미결
 */
function getleftPos(inputObj)
{
  var returnValue = inputObj.offsetLeft;
  while((inputObj = inputObj.offsetParent) != null)returnValue += inputObj.offsetLeft;
  return returnValue + calendar_offsetLeft;
}

/**
 * @description	미결
 * @param		{Object}	inputObj
 * @returns		{Undefined}
 * @example		미결
 */
function positionCalendar(inputObj)
{
	calendarDiv.style.left = getleftPos(inputObj) + 'px';
	calendarDiv.style.top = getTopPos(inputObj) + 'px';
	if(iframeObj){
		iframeObj.style.left = calendarDiv.style.left;
		iframeObj.style.top =  calendarDiv.style.top;
		//// fix for EI frame problem on time dropdowns 09/30/2006
		iframeObj2.style.left = calendarDiv.style.left;
		iframeObj2.style.top =  calendarDiv.style.top;
	}

}
/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
//150918 달력 전체모양 만들기
function initCalendar()
{
	if(MSIE){
		iframeObj = document.createElement('IFRAME');
		iframeObj.style.filter = 'alpha(opacity=0)';
		iframeObj.style.position = 'absolute';
		iframeObj.border='0px';
		iframeObj.style.border = '0px';
		//iframeObj.style.backgroundColor = '#4598ff';

		iframeObj2 = document.createElement('IFRAME');
		iframeObj2.style.position = 'absolute';
		iframeObj2.border='0px';
		iframeObj2.style.border = '0px';
		iframeObj2.style.height = '1px';
		iframeObj2.style.width = '1px';

		document.body.appendChild(iframeObj2);  // gfb move this down AFTER the .src is set
		document.body.appendChild(iframeObj);
	}

	calendarDiv = document.createElement('DIV');
	calendarDiv.id = 'calendarDiv';
	calendarDiv.class = 'calendarDiv';
	calendarDiv.style.zIndex = 1000;
	if(CType == 1){
	//150921 하단 현재 날짜 안보이도록 display:none로  변경 
//		calendarDiv.style.cssText ='position:absolute;	width:205px;	border:0px solid #EAEAEA;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔고딕;	font-size:12px;	padding-bottom:20px;	visibility:hidden; ';	
		calendarDiv.style.cssText ='position:absolute;	width:205px;	border:0px solid #EAEAEA;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';
	}else if(CType == 2){
		calendarDiv.style.cssText ='position:absolute;	width:150px;	border:0px solid #858BFF;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';		
	}
    	
    slideCalendarSelectBox();
	document.body.appendChild(calendarDiv);
	//달력 오늘날짜 하단태그
	//if(CType == 1){
		writeBottomBar();
	//}
	//달력 상단 년,월 선택 태그
	writeTopBar();



	if(!currentYear){
		var d = new Date();
		currentMonth = d.getMonth();
		currentYear = d.getFullYear();
	}
	
	//데이터 입력 
	writeCalendarContent();



}

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function setTimeProperties()
{
	if(!calendarDisplayTime){
		document.getElementById('timeBar').style.display='none';
		document.getElementById('timeBar').style.visibility='hidden';
		if(CType == 1)document.getElementById('todaysDateString').style.width = '100%';


	}else{
		document.getElementById('timeBar').style.display='block';
		document.getElementById('timeBar').style.visibility='visible';
		if(CType == 1)document.getElementById('todaysDateString').style.width = '115px';
	}
}

/**
 * @description	미결
 * @param		{Number}	a
 * @param		{Number}	b
 * @returns		{Number}
 * @example		미결
 */
function calendarSortItems(a,b)
{
	return a/1 - b/1;
}

/**
 * @description	미결
 * @param		{Object}	inputField
 * @param		{Object}	inputControl
 * @param		{Object}	format
 * @param		{Object}	type
 * @param		{Number}	displayTime
 * @param		{Number}	timeInput
 * @returns		{Undefined}
 * @example		미결
 */
function popUpCalendar(inputField,inputControl,format,type,displayTime,timeInput)
{
// type:1(년월일) , type:2(년월) , type:3(년도)  

	CType = type;
	WTagId = inputField.id;  
	var controlValue = inputControl.value;

	if(displayTime)calendarDisplayTime=true; else calendarDisplayTime = false;

	if(controlValue.length>=6){ //dates must have at least 6 digits...
       if(!controlValue.match(/^[0-9]*?$/gi)){

 			var items = inputField.value.split(/[^0-9]/gi);
			var positionArray = new Array();
			positionArray['m'] = format.indexOf('mm');
			if(positionArray['m']==-1)positionArray['m'] = format.indexOf('m');
			positionArray['d'] = format.indexOf('dd');
			if(positionArray['d']==-1)positionArray['d'] = format.indexOf('d');
			positionArray['y'] = format.indexOf('yyyy');
			positionArray['h'] = format.indexOf('hh');
			positionArray['i'] = format.indexOf('ii');

			var positionArrayNumeric = Array();
			positionArrayNumeric[0] = positionArray['m'];
			positionArrayNumeric[1] = positionArray['d'];
			positionArrayNumeric[2] = positionArray['y'];
			positionArrayNumeric[3] = positionArray['h'];
			positionArrayNumeric[4] = positionArray['i'];


			positionArrayNumeric = positionArrayNumeric.sort(calendarSortItems);
			var itemIndex = -1;
			currentHour = '00';
			currentMinute = '00';
			
			var tmpDay = 0;
			
			for(var no=0;no<positionArrayNumeric.length;no++){
				if(positionArrayNumeric[no]==-1)continue;
				itemIndex++;
				if(positionArrayNumeric[no]==positionArray['m']){
					currentMonth = items[itemIndex]-1;
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['y']){
					currentYear = items[itemIndex];
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['d']){
					tmpDay = items[itemIndex];
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['h']){
					currentHour = items[itemIndex];
					continue;
				}
				if(positionArrayNumeric[no]==positionArray['i']){
					currentMinute = items[itemIndex];
					continue;
				}
			}

			currentMonth = currentMonth / 1;
			tmpDay = tmpDay / 1;

		}else{
			var monthPos = format.indexOf('mm');
			currentMonth = controlValue.substr(monthPos,2)/1 -1;


			var yearPos = format.indexOf('yyyy');
			currentYear = controlValue.substr(yearPos,4);
			var dayPos = format.indexOf('dd');
			tmpDay = controlValue.substr(dayPos,2);

			var hourPos = format.indexOf('hh');
			if(hourPos>=0){
				tmpHour = controlValue.substr(hourPos,2);
				currentHour = tmpHour;
			}else{
				currentHour = '00';
			}
			var minutePos = format.indexOf('ii');
			if(minutePos>=0){
				tmpMinute = controlValue.substr(minutePos,2);
				currentMinute = tmpMinute;
			}else{
				currentMinute = '00';
			}
		}

	}else{
		var d = new Date();
		//년도
		currentYear = d.getFullYear();
		//월
		currentMonth = d.getMonth();
		//일
		tmpDay = d.getDate();
		//분
		currentHour = '08';
		//초
		currentMinute = '00';

	}
	
	//년도
	inputYear = currentYear;
	//월
	inputMonth = currentMonth;
	//일
	inputDay = tmpDay/1;

/* 최초 클릭시 태그를 생성여부 체크 */
	if(!calendarDiv){
		initCalendar();
			
	}else{

		if(calendarDiv.style.display=='block'){
			closeNotActionCalendar();
			return false;
		}
		//calendarDiv.remove();
		//initCalendar();
		if(CType == 1){
			//150921 하단 현재 날짜 안보이도록 display:none로  변경 
				calendarDiv.style.cssText ='position:absolute;	width:205px;	border:0px solid #EAEAEA;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';
				calendarMMDiv.style.display = 'block';	
		}else if(CType == 2){
				calendarDiv.style.cssText ='position:absolute;	width:150px;	border:0px solid #858BFF;	padding:1px;	background-color: #FDFDFD;  FONT-FAMILY: 나눔바른고딕;	font-size:12px;	padding-bottom:0px;	visibility:hidden; ';		
				calendarMMDiv.style.display = 'none';	
				//$('#monthSelect').css({"display":"none"});
				//monthDiv.style.display = 'none';
			}		
		writeCalendarContent();
	}

	returnFormat = format;
	returnDateTo = inputField;
	positionCalendar(inputField);
	calendarDiv.style.zIndex = 1000;
	calendarDiv.style.visibility = 'visible';
	calendarDiv.style.display = 'block';

	if(iframeObj){
		iframeObj.style.display = '';
		iframeObj.style.height = '140px';
		iframeObj.style.width = '195px';
		
		iframeObj2.style.display = '';
		iframeObj2.style.height = '140px';
		iframeObj2.style.width = '195px';
	}

	setTimeProperties();
	updateYearDiv();
	updateMonthDiv();
	updateMinuteDiv();
	updateHourDiv();
	document.getElementById(WTagId).select();
	document.getElementById(WTagId).blur();

    var wleft = inputField.offsetLeft;
    var wtop = inputField.offsetTop;
    
    var pem = inputField.offsetParent;
    while(pem.tagName != "BODY"){
    	wleft += pem.offsetLeft;
    	wtop += pem.offsetTop;
        
        pem = pem.offsetParent;
    }
    
    
    var winHeight = 0;
    var winWidth  = 0;
    
	if (window.innerHeight)
		winHeight=window.innerHeight;
	else if (document.documentElement && document.documentElement.clientHeight)
		winHeight=document.documentElement.clientHeight;
	else if (document.body)
		winHeight=document.body.clientHeight;
	
	if (window.innerWidth)
		winWidth=window.innerWidth;
	else if (document.documentElement && document.documentElement.clientWidth)
		winWidth=document.documentElement.clientWidth;
	else if (document.body)
		winWidth=document.body.clientWidth;
    
    var documentScrollTop = document.documentElement.scrollTop;
    var documentScrollLeft = document.documentElement.scrollLeft;
    
    if (wtop > documentScrollTop + winHeight - calendarDiv.clientHeight -20) {
        calendarDiv.style.top = (documentScrollTop + winHeight - calendarDiv.clientHeight -20) + "px";
    }
    if (wleft > documentScrollLeft + winWidth - calendarDiv.clientWidth - 20) {
        calendarDiv.style.left = (documentScrollLeft + winWidth - calendarDiv.clientWidth -20) + "px";
    }
}

/**
 * @description	미결
 * @param		{Object}	yearInput
 * @param		{Object}	monthInput
 * @param		{Object}	dayInput
 * @param		{Object}	hourInput
 * @param		{Object}	minuteInput
 * @param		{Object}	buttonObj
 * @returns		{Undefined}
 * @example		미결
 */
function displayCalendarSelectBox(yearInput,monthInput,dayInput,hourInput,minuteInput,buttonObj)
{
	if(!hourInput)calendarDisplayTime=false; else calendarDisplayTime = true;

	currentMonth = monthInput.options[monthInput.selectedIndex].value/1-1;
	currentYear = yearInput.options[yearInput.selectedIndex].value;
	if(hourInput){
		currentHour = hourInput.options[hourInput.selectedIndex].value;
		inputHour = currentHour/1;
	}
	if(minuteInput){
		currentMinute = minuteInput.options[minuteInput.selectedIndex].value;
		inputMinute = currentMinute/1;
	}

	inputYear = yearInput.options[yearInput.selectedIndex].value;
	inputMonth = monthInput.options[monthInput.selectedIndex].value/1 - 1;
	inputDay = dayInput.options[dayInput.selectedIndex].value/1;

	if(!calendarDiv){
		initCalendar();
	}else{
		writeCalendarContent();
	}

	returnDateToYear = yearInput;
	returnDateToMonth = monthInput;
	returnDateToDay = dayInput;
	returnDateToHour = hourInput;
	returnDateToMinute = minuteInput;




	returnFormat = false;
	returnDateTo = false;
	positionCalendar(buttonObj);
	calendarDiv.style.zIndex = 1000;
	calendarDiv.style.visibility = 'visible';
	calendarDiv.style.display = 'block';
	if(iframeObj){
		iframeObj.style.display = '';
		iframeObj.style.height = calendarDiv.offsetHeight + 'px';
		iframeObj.style.width = calendarDiv.offsetWidth + 'px';
		//// fix for EI frame problem on time dropdowns 09/30/2006
		iframeObj2.style.display = '';
		iframeObj2.style.height = calendarDiv.offsetHeight + 'px';
		iframeObj2.style.width = calendarDiv.offsetWidth + 'px'
	}
	setTimeProperties();
	updateYearDiv();
	updateMonthDiv();
	updateHourDiv();
	updateMinuteDiv();

}
/**
 *   @autor   winnersoft korea
 *   @version 5.0
 *   @see     winnersoft.co.kr
 */


/**
 * @description 
 *     EasyMaker Vertical Data Object For Big Data.
 * 
 * @constructor
 * 
 * @param {string} 	 id 	 	- 콘트롤 고유 아이디 (영문)
 * @param {string} 	 tableID 	- 데이터가 들어갈 테이블 명
 * @param {string} 	 name 		- 객체명 (사용자 고유 언어)
 * 
 * @return {DataObject} - 생성된 DataObject 개체
 * 
 * @exception 널값 예외
 * 
 * @example 
 *     // 콘트롤 고유 아이디 "student", 테이블명: "TBL_STUDENT" 인 "학생" 객체
 *     var object = new DataObject("student", "TBL_STUDENT", "학생");
 */
function DataObject(id, tableID, name){
	/** [읽기 전용] 메모리 데이터 셋 <br/> dataSet은 고유값으로서 변경될 수 없다.
	 *  @type {DataSet}  
	 *  */  	
	this.dataSet = new WsDataSet();
	this.dataSet.deleteDataPolicy = WSDATASET_DELETE_POLICY.LEAVE_RECORD_IN_DATA;
	
	/** [읽기 전용] 데이터를 구성하는 각 필드의 정보가 기록되는 배열, 0 부터 채워진다 
	 *  @type {PropertyInfo[]}  
	 *  */  	
    this.propertyInfos = [];
    
    
	/** [읽기 전용] 데이터를 구성하는 각 필드의 정보가 기록되는 연관배열, 만들어진 순서로 채워진다  
	 *  @type {PropertyInfo[]}  
	 *  */  	
    this.propertyInfosById = {};  	// propertyInfos의 복사판 Id로 인덱싱하기 위헤필요
    
	/** [읽기 전용] 데이터를 구성하는 필드의 갯수 
	 *  @type {PropertyInfo[]}  
	 *  */  	
    this.propertyCount = 0;
    
	/** 
	 *  dni는 Delete aNd Insert 를 의미한다. 
	 *  화면에 있는 모든 데이터에 대하여 각 레코드의 키에 해당하는 데이터를 지우고 <br/>
	 *  새로운 데이터를 Insert 하는 형태로 서버상 데이터가 갱신 된다 <br/>
	 *  데이터를 서버데이터와 같은 형태로 '로드'한 상태인 경우 false이며 데이터의 변화에 따라 IUD(Insert, Update, Delete)동작을 하게 된다.<br/>
	 *  가져오기, 배치작업등으로 채운 경우 true이다. 이때는 DI(Delete, Insert)동작을 하게 된다.<br/> 
	 *  '로드'작업 이외의 동작으로 데이터를 채운후 "dniMode = true;" 로 설정하면 IUD 동작을 한다. 
	 *  
	 *   EasyMaker의 객체 메뉴에서 "갱신유형 - 전체" 가 선택된 경우 this.dniMode 는 true,
	 *                         "갱신유형 - 수정분"이 선택된 경우 this.dniMode 는 false,
	 *                         둘 다 선택되지 않은 경우는 this.dniMode 는 true 가 된다 
	 *  @type {Boolean}  
	 *  */  	
    this.dniMode = true; 			// 객체 속성이 dni 모드가 아니면 false
    
    /** @deprecated since version 5.0, [읽기 전용] AUI시트에서 줄추가된 데이터를 수정할때 해당속성이 true로 들어온다 
	 *  @type {Boolean}  
     * */
    this.newData = false;
       
    /** @deprecated since version 5.0, [읽기 전용] AUI시트에서 이 속성이 true 이면 setValue 함수에서 바로 리턴  
	 *  @type {Boolean}  
     * */
    this.notSetValue = false; 		
    
    /** @deprecated since version 5.0, [읽기 전용] AUI시트에서 이 속성이 true 이면 setValue 함수에서 같은 값이더라도 바로 리턴하지 않고 data updateGu 갱신 후 리턴  
	 *  @type {Boolean}  
     * */
    this.dataUp = false;
    
	/** [읽기 전용] 데이터셋 중 현재 레코드를 가리키는 순번
	 *  @type {Number}  
	 *  */  	
    this.seq = 0;
    
	/** [읽기 전용] 객체내 데이터셋의 레코드를 가리키는 순번중 최대값 , count속성값과 같다. 
	 *  @type {Number}  
	 *  */  	
    this.maxSeq = 0;				// count 정도의 역할 밖에는 안함 
    
	/** [읽기 전용] 객체내 데이터셋의 레코드 수  
	 *  @type {Number}  
	 *  */  	
    this.count = 0;               	// 집계함수 연산에 필요한 값
    
	/** [읽기 전용] 객체내 데이터셋의 레코드를 가리키는 순번의 시작 값, startSeq == 1 인 경우 1번부터 순번이 시작된다 
	 *  @type {Number=0}  
	 *  */  	
    this.startSeq = 1;				// 행과 열의 시작 번호 디폴트는 1이다 (기존 호환)

	/** [읽기 전용] 화면내에서 객체를 대표하는 ID 
	 *  @type {String}  
	 *  */  	
    this.id = id;
    
	/** [읽기 전용] 화면내에서 객체를 저장하는 Table의 ID
	 *  @type {String}  
	 *  */  	
    this.tableID = tableID;
    
	/** [읽기 전용] 화면내에서 객체를 대표하는 이름
	 *  @type {String}  
	 *  */  	
    this.name = name;
    
	/** [읽기 전용] 
	 * 객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 되는 속성의 ID. <br/> 
	 * 대량의 데이터를 로드해서 기준을 바꾸어 가며 화면에 표시하고 작업할 때 사용한다. <br/>
	 * fillKeyfieldId 과 fillKeyFieldName 은 같은 값이다. 
	 *  @type {String}  
	 *  */  	
    this.fillKeyfieldId = "";     
    
	/** [읽기 전용] 
	 * 객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 되는 속성의 필드명. <br/> 
	 * fillKeyfieldId 과 fillKeyFieldName 은 같은 값이다. 
	 *  @type {String}  
	 *  */  	
    this.fillKeyFieldName = "";
    
    
	/** [읽기 전용] 
	 * 객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 필드의 현재값<br/>
	 * 객체데이터중 이값과 같은 값을 가진 데코드만 화면에 채워지게 된다.  
	 *  @type {String}  
	 *  */  	
    this.fillkeyFieldValue = "";
    
    
	/** [읽기 전용] 
	 * 각레코드를 구분하는 필드를 시퀀스키필드(sequance key field)라고 하며, <br/>
	 * seqKeyFieldId속성은 시퀀스키필드의 속성 ID값을 의미한다. 
	 *  @type {String}  
	 *  */  	
    this.seqKeyFieldId = "";
    
    this.selectCondition = null;
    
    objects[name] = this;
    
    // 이벤트 또는 사용자 함수 처리부
	/** 
	 * 데이터나 속성 변경시 이벤트를 일으킬 것인지 여부를 지정한다  <br/>
	 * false: 이벤트를 발생시키지 않는다.
	 *  @type {Boolean}  
	 *  */  	
	this.FireEvent = true;		// 이벤트를 일으킬 것인지 여부
    
   	/**
	 * 레코드간 이동전 동작 취소가 가능한 이벤트 (CanSeqChange)
	 *
	 * @event DataObject#SeqChange
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 * @property {Number} oldSeq 	- 이동전 줄번호 
	 * @property {Number} seq 		- 이동후 줄번호
	 */
    this.hasCanSeqChangeEvent = (typeof self[this.id + "_CanSeqChange"] != "undefined");
    this.fncCanSeqChangeEvent = !this.hasCanSeqChangeEvent ? null : new Function("return function (oldSeq, seq) { return " + this.id + "_CanSeqChange(oldSeq, seq);}")();

   	/**
	 * 레코드간 이동후 발생하는 이벤트 (SeqChange)
	 *
	 * @event DataObject#SeqChange
	 * @type {Object}
 	 * @property {Number} oldSeq 	- 이동전 줄번호 
	 * @property {Number} seq 		- 이동후 줄번호
	 */
    this.hasSeqChangeEvent = (typeof self[this.id + "_onSeqChange"] != "undefined");
    this.fncSeqChangeEvent = !this.hasSeqChangeEvent ? null : new Function("return function (oldSeq, seq) { return " + this.id + "_onSeqChange(oldSeq, seq);}")();

   	/**
	 * 데이터의 값이 변경전 사용자 체크 코딩이 가능한 이벤트 
	 *
	 * @event DataObject#change
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 * @property {String} 						fieldId - 변경된 데이터의 필드ID
	 * @property {String|Number|Boolean|Object} newValue - 변경후 데이터 
	 * @property {String|Number|Boolean|Object} oldValue - 변경전 데이터 
	 */
    this.hasCanChangeEvent = (typeof self[this.id + "_CanChange"] != "undefined");
    this.fncCanChangeEvent = !this.hasCanChangeEvent ? null : new Function("return function (fieldId, newValue, oldValue) { return " + this.id + "_CanChange(fieldId, newValue, oldValue);}")();

   	/**
	 * 데이터의 값이 변경되었을 때 발생하는 이벤트 
	 *
	 * @event DataObject#change
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 * @property {String} 						fieldId - 변경된 데이터의 필드ID
	 * @property {String|Number|Boolean|Object} newValue - 변경후 데이터 
	 * @property {String|Number|Boolean|Object} oldValue - 변경전 데이터 
	 */
    this.hasChangeEvent = (typeof self[this.id + "_onChange"] != "undefined");
    this.fncChangeEvent = !this.hasChangeEvent ? null : new Function("return function (fieldId, newValue, oldValue) { return " + this.id + "_onChange(fieldId, newValue, oldValue);}")();
    if (!this.hasChangeEvent){  // 구버전 이벤트 대소문자 호환을 위한 코딩
    	this.hasChangeEvent = (typeof self[this.id + "_onchange"] != "undefined");
    	this.fncChangeEvent = !this.hasChangeEvent ? null : new Function("return function (fieldId, newValue, oldValue) { return " + this.id + "_onchange(fieldId, newValue, oldValue);}")();
    }

   	/**
	 * 줄 추가전 발생하는 이벤트 .
	 *
	 * @event DataObject#CanAddRecord
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 */
    this.hasCanAddRecordEvent = (typeof self[this.id + "_onCanAddRecord"] != "undefined");
    this.fncCanAddRecordEvent = !this.hasCanAddRecordEvent ? null : new Function("return function () { return " + this.id + "_onCanAddRecord();}")();
    
   	/**
	 * 줄 추가시 발생하는 이벤트 .
	 *
	 * @event DataObject#AddRecord
	 * @type {Object}
	 */
    this.hasAddRecordEvent = (typeof self[this.id + "_onAddRecord"] != "undefined");
    this.fncAddRecordEvent = !this.hasAddRecordEvent ? null : new Function("return function () { return " + this.id + "_onAddRecord();}")();

   	/**
	 * 줄 삭제전 발생하는 이벤트 .
	 *
	 * @event DataObject#CanDeleteRecord
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 */
    this.hasCanDeleteRecordEvent = (typeof self[this.id + "_onCanDeleteRecord"] != "undefined");
    this.fncCanDeleteRecordEvent = !this.hasCanDeleteRecordEvent ? null : new Function("return function () { return " + this.id + "_onCanDeleteRecord();}")();
    
   	/**
	 * 줄 삭제시 발생하는 이벤트 .
	 *
	 * @event DataObject#DeleteRecord
	 * @type {Object}
	 */
    this.hasDeleteRecordEvent = (typeof self[this.id + "_onDeleteRecord"] != "undefined");
    this.fncDeleteRecordEvent = !this.hasDeleteRecordEvent ? null : new Function("return function () { return " + this.id + "_onDeleteRecord();}")();
    
    //  
   	/**
	 * ChangeEvent , addrow, delrow가 발생되지 않는 대량 데이터 변경시 발생하는 이벤트 .
	 *
	 * @event DataObject#DataResetted
	 * @type {Object}
     * @return {Boolean} - 동작 취소 여부(false: 후속 동작이 취소된다) 
	 */
    this.hasDataResettedEvent = (typeof self[this.id + "_onDataResetted"] != "undefined");
    this.fncDataResettedEvent = !this.hasDataResettedEvent ? null : new Function("return function (actionType, error) { return " + this.id + "_onDataResetted(actionType, error);}")();
    
    // ----- 소스내 SKIP 함수가 있으면 참조 --------- 
    this.hasNeedSkipFunction = (typeof self[this.id + "_needSkip"] != "undefined");
    this.fncNeedSkip = !this.hasNeedSkipFunction ? null : new Function("return function () { return " + this.id + "_needSkip();}")();

};

/**
 * @description 			
 *     객체ID로 객체를 선택한다.
 *     예를 들어 '학생' 이란 객체의 ID가 'student'인 경우 
 *     objects['학생'] 또는 getObjectById('student')로 찾게 된다.
 *     
 * @param {String}		id 	- 선택할 객체의 ID
 * 
 * @returns {DataObject}	- 선택돤 객체 
 * 
 * @example
 *     var student = getObjectById("student");       // 학생 객체를 선색
 */
function getObjectById(id){
	var key = null;
	
	for(key in objects){
		if( objects[key] instanceof Function )
			continue;
		
		if( objects[key].id === id )
			return objects[key];
		
		key = null; 
	}
	
	return null;
};

/**
 * @description 
 *     객체에 필드 속성을 추가한다 
 * 
 * @param  {String}		id			추가된 속성의 식별자 ID <br/>
 * @param  {String}		fieldId		추가된 속성의 FieldID(= 식별자 ID) <br/>
 * @param  {String}		name		추가될 속성의 이름 <br/>
 * @param  {String}		propertyGu	추가될 속성의 형태 field,file,function, ... <br/>
 * @param  {String}		dataTypeName	추가될 속성의 데이터형 <br/>
 * @param  {String}		isKey		속성이 키필드 역할을 하는 지 구분 <br/> false: 키필드가 아니다, true: 키필드이다, seq: 순번키필드이다 <br/>
 * @param  {String}		formula		레코드가 생성될 때 디폴트 값을 지정하는 산식  <br/>
 * @param  {Boolean}	permitNull	해당 속성이 널값을 허용하는지 여부  <br/>
 * 
 * @return {propertyInfo} 			추가된 propertyInfo 객체 

 * @example 
 * 	var propertyInfo = object.addProperty ("studentid", "studentid", "학번", "field", "String", "true", "", false);
 */
DataObject.prototype.addProperty = function(id, fieldId, name, propertyGu, dataTypeName, isKey, formula, permitNull){
	// functionname : [DataObject.addProperty]
	
	var propertyInfo = null;
	var functionName = null;
	
	/*	프로퍼티 정보는 데이터 셋에 포함되지 않는 정보는 가져간다
	 *	추가되었을때 데이터 셋에 없으면 추가해 준다
	 */
	
	propertyInfo = new PropertyInfo(id, fieldId, name);
	
//	this.propertyInfos[++this.propertyCount] = propertyInfo;
	this.propertyInfos[this.propertyCount++] = propertyInfo;
	this.propertyInfosById[id] = propertyInfo;
	
	propertyInfo.id = id;
	propertyInfo.fieldId = fieldId;
	propertyInfo.name = name;
	propertyInfo.propertyGu = propertyGu;
	propertyInfo.dataTypeName = dataTypeName;
	propertyInfo.isKey = (isKey === "false" ? false : true); // true/false/seq;
	propertyInfo.isSeqKey = (isKey === "seq" ? true : false); // true/false/seq;
//	propertyInfo.formula = formula;
//	propertyInfo.defaultValue = formula;
	propertyInfo.permitNull = permitNull;
	
	if( formula.length > 0 ){
		propertyInfo.formula = new Function("return " + formula + ";");
		propertyInfo.defaultValue = new Function("return " + formula + ";");
	}
	
//	if (propertyInfo.isSeqKey == "seq"){
//		this.seqKeyFieldId = fieldId;
//	}
	if( propertyInfo.isSeqKey ){
		this.seqKeyFieldId = fieldId;
	}

	var numericTypes = [
        "short", "long", "single", "double", "currency", "bit", "byte", "guid" /* MDB */
        , "smallint", "int", "real", "float", "money", "smallmoney", "bit", "tinyint", "uniqueidentifier", "timestamp", "decimal", "numeric" /* MSSQL */
        , "decimal", "money", "integer", "serial", "smallint", "smallfloat", "float" /* Informix */
        , "float", "number" /* Oracle */
        , "bit", "bit auto_increment", "tinyint", "tinyint unsigned", "tinyint auto_increment", "tinyint unsigned auto_increment", "bigint"
        , "bigint unsigned", "bigint auto_increment", "bigint unsigned auto_increment", "decimal", "integer", "integer unsigned", "int", "int unsigned", "mediumint"
        , "mediumint unsigned", "integer auto_increment", "integer unsigned auto_increment", "int auto_increment"
        , "int unsigned auto_increment", "mediumint auto_increment", "mediumint unsigned auto_increment", "smallint"
        , "smallint unsigned", "smallint auto_increment", "smallint unsigned auto_increment", "double", "double auto_increment", "float"
        , "float auto_increment", "double", "double auto_increment", "year" /* MySQL */
	];

	propertyInfo.isNumericType = (numericTypes.indexOf(dataTypeName.toLowerCase()) >= 0);

	functionName = fieldId.substring(0,1).toUpperCase() + fieldId.substring(1);
	
	if( propertyGu == "field" && functionName != "Seq" ){
		this["set" + functionName] = new Function("return function (value) { return this.setValue(\"" + fieldId + "\", value);}")();
		this["get" + functionName] = new Function("return function() { return this.getValue(\"" + fieldId + "\");}")();
		this["set" + functionName + "All"] = new Function("return function (value) { return this.setValueAll(\"" + fieldId + "\", value);}")();
	}
	// 배치호출
	else if( propertyGu == "service" ){
		/* */
	}
	else if( propertyGu == "function" ){
		this["get" + functionName] = new Function("return function() { return " + formula + ";}")();
	}
	// 파일동작
	else if( propertyGu == "file" ){
		this["set" + functionName] = new Function("return function (value) { return this.setValue(\"" + fieldId + "\", value);}")();
		this["get" + functionName] = new Function("return function() { return this.getValue(\"" + fieldId + "\");}")();
		this["set" + functionName + "All"] = new Function("return function (value) { return this.setValueAll(\"" + fieldId + "\", value);}")();
	}
	
	//메모리 해제
	functionName = null;
	
	// 채우기 필수 키정보 채우기
	if( ("," + keyInfoStr).indexOf("," + this.id + "_" + id + ",") > 0 ){
		propertyInfo.isFillKey = true;
	}
	
	// 데이터셋에 필드 추가
	this.dataSet.addField({
		field: id
		, fieldId: name
		, dataType: (propertyInfo.isNumericType ? "number" : "string")
	}); // ??? 데이터세트와 시트, 객체의 데이터 타입을 정리하여 소스 정비 할 것
	
	return propertyInfo;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋을 교체한다 .
 * 
 * @param  {Object}		dataSet	추가될 데이터를 포함하는 데이터셋 정보 <br/>
 * @return {Object} 				오류정보룰 포함하는 개체 <br/>
 * 									- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.setDataSet(anotherDataset);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.setDataSet = function(dataset){
	// functionname : [DataObject.setDataSet]
	
	var rtnObject = null;
	var errorInfo = null;
	
	this.clear();
	
	// 객체 데이터셋 데이터 갱신
	rtnObject = this.dataSet.setDataSet(dataset);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
//	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = this.startSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_SETDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋에 데이터를 추가한다 .
 * 
 * @param  {Object}		dataSet	추가될 데이터를 포함하는 데이터셋 정보 <br/>
 * @return {Object} 				오류정보룰 포함하는 개체 <br/>
 * 									- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.setDataSet(anotherDataset);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.appendDataSet = function(dataset){
	// functionname : [DataObject.appendDataSet]
	
	var rtnObject = null;
	var errorInfo = null;
	
	//객체 데이터셋 데이터 추가
	rtnObject = this.dataSet.appendDataSet(dataset);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = oldSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_APPENDDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋을 교체한다 .
 * 
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 리스트(배열) <br/>
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 컬럼 정보 <br/>
 * @return {Object} 			오류정보룰 포함하는 개체 <br/>
 * 								- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.setDataArray(anotherDataArray, fieldInfo);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.setDataArray = function(dataArray, fieldInfo){
	// functionname : [DataObject.setDataArray]
	
	if( typeof fieldInfo == "undefined" ){
		fieldInfo = this.dataSet.columnInfos;
	}
	
	var rtnObject = null;
	var errorInfo = null;
	
	this.clear();
	
	// 객체 데이터셋 데이터 갱신
	rtnObject = this.dataSet.setDataArray(dataArray, fieldInfo);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
//	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = this.startSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_SETDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋에 데이터를 추가한다 .
 * 
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 리스트(배열) <br/>
 * @param  {Object}		Array	추가될 데이터를 포함하는 데이터 컬럼 정보 <br/>
 * @return {Object} 			오류정보룰 포함하는 개체 <br/>
 * 								- {result: true/false, errorMsg: "사용자메시지"}<br/>
 * @example 
 * var rtnObject = object.appendDataArray(anotherDataArray, fieldInfo);
 * 
 * // 오류를 리턴하는 경우의 처리 
 * if (rtnObject.result == false){
 *     alert(rtnObject.errorMsg);
 * }
 */
DataObject.prototype.appendDataArray = function(dataArray, fieldInfo){
	// functionname : [DataObject.appendDataArray]
	
	if( typeof fieldInfo == "undefined" ){
		fieldInfo = this.dataSet.columnInfos;
	}
	
	var rtnObject = null;
	var errorInfo = null;
	
	//객체 데이터셋 데이터 추가
	rtnObject = this.dataSet.appendDataArray(dataArray, fieldInfo);
	
	var propertyInfo = null;
	var fieldInfoKey = null;
	var fieldId = null;
	var dataList = this.dataSet.data;
	var dataRecord = null;
	var dataLength = dataList.length;
	var isSame = false;
	var newSeq = this.startSeq;
	var oldSeq = this.seq;
	var i = 0;
	
	for(i = 0; i < dataLength; i++, newSeq++){
		dataRecord = dataList[i];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			if( !propertyInfo.isNumericType ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			if( propertyInfo.propertyGu == "field" ){
				for(fieldInfoKey in this.dataSet.fieldInfos){
					if( fieldId.toLocaleLowerCase() == fieldInfoKey.toLocaleLowerCase() ){
						isSame = true; break;
					}
					fieldInfoKey = null;
				}
			}
			else if( propertyInfo.propertyGu == "function" ){
				this.seq = newSeq;
				dataRecord[fieldId] = propertyInfo.formula();
				isSame = true;
			}
			
			if( !isSame ){
				propertyInfo = null; fieldId = null;
				continue;
			}
			
			value = 1 * dataRecord[fieldId];
			propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
			propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//			propertyInfo.sum += value;
			this._updateSum(fieldId, 0, value);
			
			value = null; propertyInfo = null; fieldId = null;
		}
		
		dataRecord = null;
	}
	
	this.seq = oldSeq;
	this.count = dataLength;
	
	// 사용자 코딩 추가영역을 호출한다
	if( rtnObject.result == true ){
		if( this.FireEvent && this.hasDataResettedEvent ){
			errorInfo = {code: 0, message: ""};
			
			this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_APPENDDATASET, errorInfo);
			
			// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
			if( errorInfo.code > 0 )
				alert(errorInfo.message);
			
			// 메모리 해제
			errorInfo = null;
		}
	}
	
	return rtnObject;
};

/**
 * @description 
 *     DataSet정보를 받아 객체내 데이터셋에서 데이터셋을 삭제하고 초기화한다.
 * 
 * @return {Void}
 * @example 
 * 	var rtnObject = object.removeDataSet();
 */
DataObject.prototype.removeDataSet = function(){
	// functionname : [DataObject.removeDataSet]
	
	var errorInfo = null;
	
	// 데이터셋 초기화
	this.dataSet.clear();
	this.dataSet = null;
	this.dataSet = new WsDataSet();
	
	this.maxSeq = 0;
    this.seq = 0;
    this.count = 0;
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.FireEvent && this.hasDataResettedEvent ){
		errorInfo = {code: 0, message: ""};
		
		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_REMOVEDATASET, errorInfo);
		
		// 서브루틴에서 메시지 표시한 오류는 (-)로 넘어 오도록 한다.
		if( errorInfo.code > 0 )
			alert(errorInfo.message);
		
		// 메모리 해제
		errorInfo = null;
	}
	
	return;
};

/**
 * @description 
 *     객체 데이터를 시트 컨트롤에 갱신한다.
 * 
 * @param  {String}		sheetName	데이터를 갱신할 시트명
 * @return {Boolean} 				시트 데이터를 갱신한다면 true를 리턴
 * @example 
 * var result = object.updateDataLinkedSheet("Sheet_1");
 */
DataObject.prototype.updateDataLinkedSheet = function( sheetName ){
	//예외처리
	//1. 시트 명 파라메터가 없는 경우 예외처리
	if( typeof sheetName == "undefined" || sheetName == null )
		return false;
	
	var control = null;
	var linkedObjectList = null;
	var linkedObjectSize = 0;
	var isLinkedSheet = false;
	var i = 0, j = 0;
	
	//2. 시트 컨트롤이 없는 경우 예외처리
	control = controls["" + sheetName];
	if( typeof control == "undefined" || control == null )
		return false;
	//3. 시트에 연결된 객체가 없는 경우 예외처리
	linkedObjectList = control.linkedObjects;
	if( typeof linkedObjectList == "undefined" || linkedObjectList == null )
		return false;
	//4. 시트에 연결된 객체 중 자신(객체)이 없는 경우 예외처리
	for(i = 0, linkedObjectSize = linkedObjectList.length && !isLinkedSheet; i < linkedObjectSize; i++){
		isLinkedSheet = (linkedObjectList[i] === this);
	}
	if( !isLinkedSheet ){
		linkedObjectList = null; control = null;
		return false;
	}
	
	var linkedObjectId = this.id;
	var propertyCount = this.propertyCount;
	var columnCount = control.columns.length;
	var columnInfo = null;
	var needMappingData = false;
	
	//객체 프로퍼티와 열결된 시트 컬럼ID 체크
	for(i = 0; i < columnCount && !needMappingData; i++){
		columnInfo = control.columns[i];
		
		//객체 프로퍼티와 연결된 컬럼이 없는 경우
		if( !(linkedObjectId in columnInfo.linkedPropertys) )
			continue;
		//객체 프로퍼티와 연결된 컬럼의 아이디가 다르면 매핑데이터 생성 필요
		if( columnInfo.colId != columnInfo.linkedPropertys[linkedObjectId] )
			needMappingData = true;
		
		//메모리 해제
		columnInfo = null;
	}
	
	var remakeDataset = null;
	var recordLength = this.dataSet.getCount();
	var recordList = null;
	var recordItem = null;
	var dataRow = null;
	
	//매핑데이터 생성 여부 체크하여 데이터 생성
	if( needMappingData ){
		remakeDataset = new WsDataSet();
		remakeDataset.deleteDataPolicy = WSDATASET_DELETE_POLICY.LEAVE_RECORD_IN_DATA;
		recordList = [];
		
		for(i = 0; i < recordLength; i++){
			recordItem = recordList[i] = {};
			dataRow = this.dataSet.data[i];
			
			for(j = 0; j < columnCount; j++){
				columnInfo = control.columns[j];
				if( !linkedObjectId in columnInfo.linkedPropertys ) continue;
				recordItem[columnInfo.colId] = dataRow[columnInfo.linkedPropertys[linkedObjectId]];
				columnInfo = null;
			}
			
			if( typeof dataRow.__STATE__ != "undefined" ){
				recordItem.__STATE__ = {"updateGu" : dataRow.__STATE__.updateGu};
			}
			
			dataRow = null; recordItem = null;
		}
		
		remakeDataset.setDataArray(recordList);
		recordLength = remakeDataset.getCount();
		
		//메모리 해제
		recordList.clear(); recordList = null;
		linkedObjectId = null;
	}
	else{
		remakeDataset = this.dataSet;
	}
	
	//시트 데이터 갱신
	control._updateDataSetByLinkedObject(remakeDataset);
	//시트 objectSeq 갱신
	if( this.seqKeyFieldId.length > 0 ){
		var oldSeq = this.seq;
		
		for(i = this.startSeq, j = control.startRowColNum; i <= recordLength; i++, j++){
			this.seq = i;
			control.rows(j).objectSeq = this.getValue(this.seqKeyFieldId);
		}
		
		this.seq = oldSeq;
	}
	else{
		for(i = this.startSeq, j = control.startRowColNum; i <= recordLength; i++, j++){
			control.rows(j).objectSeq = i;
		}
	}
	
	//메모리 해제
	control = null;
	if( remakeDataset !== this.dataSet ) remakeDataset.clear();
	remakeDataset = null; linkedObjectList = null;
	
	return true;
};

DataObject.prototype.resetState = function(){
	//예외처리
	//아래의 경우 객체 레코드의 상태를 수정하지 않음
	// 1. 객체로드로 조회한 경우
	// 2. 객체의 dni모드가 true인 경우 
	if( objectManager.dataloaded || this.dniMode ) return;
	
	var resetUpdateGuList = ["N", "I", "U"];
	
	//
	var propertyInfos = this.propertyInfos;
	var propertyCount = this.propertyCount;
	var propertyId = null;
	var recordList = this.dataSet.data;
	var recordSize = recordList.length;
	var record = null;
	var recordOld = null;
	var updateGu = null;
	var i = 0; var j = 0;
	
	for(i = 0; i < recordSize; i++){
		record = recordList[i];
		recordOld = record.__STATE__.oldData;
		updateGu = record.__STATE__.updateGu;
		
		if( resetUpdateGuList.indexOf(updateGu) >= 0 ){
			//현재 레코드의 데이터와 이전 데이터를 일치시킴.
			for(j = 0; j < propertyCount; j++, propertyId = null){
				propertyId = propertyInfos[j].id;
				recordOld[propertyId] = record[propertyId];
			}
			//업데이트 구분을 N으로 설정
			record.__STATE__.updateGu = "N";
		}
		
		//메모리 해제
		updateGu = null; recordOld = null; record = null;
	}
	
	//메모리 해제
	recordList = null;
	propertyInfos = null;
	resetUpdateGuList = null;
	
	/*
	//객체와 연결된 시트 컨트롤의 데이터를 갱신
	var key = null;
	var control = null;
	//현재 화면에 시트 컨트롤이 존재하는 경우에만 갱신
	if( typeof EasySheet != "undefined" ){
		for(key in controls){
			control = controls[key];
			//컨트롤이 시트인 경우에만 갱신
			if( control instanceof EasySheet ){
				for(i = control.linkedObjects.length - 1; i >= 0; i--){
					if( control.linkedObjects[i].id == this.id ){
						this.updateDataLinkedSheet(control.controlName);
//						this.setSeq(this.startSeq);
					}
	            }
	        }
			//메모리 해제
			control = null; key = null;
		}
	}
	*/
};

/**
 * @description 
 *     데이터를 clear하면 전체줄을 모두 지우고 한줄을 추가한다. <br/>
 *     객체의 모든 설정이 초기화 된다 .<br/>
 *     <br/>
 *     이때 객체의 설정된 속성 정보는 계속 유효하다. <br/>
 * 
 * @return {Void}  

 * @example 
 * 	object.clear();
 */
DataObject.prototype.clear = function(){
	// functionname : [DataObject.clear]
	
	var propertyInfo = null;
	var propertyNum = 0;
	var errorInfo = null;
	
	this.dataSet.clearData(); 
	
	this.maxSeq = 0;
	this.seq = 0;
	this.count = 0;		// 집계함수 연산에 필요한 값
	
	for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++){
		propertyInfo = this.propertyInfos[propertyNum /*+ this.startSeq*/];
		
		if( propertyInfo.isNumericType ){
			propertyInfo.min = 0;
			propertyInfo.max = 0;
			propertyInfo.sum = 0;
		}
		
		// 메모리 해제
		propertyInfo = null;
	}
	
	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_CLEAR, errorInfo);
//		
//		if( errorInfo.code != 0 ){
//			alert(errorInfo.message);
//		}
//		
//		// 메모리 해제
//		errorInfo = null;
//	}
	
	return;
};

/**
 * @description 
 *     현재 포커싱되어 처리중인 레코드가 아직 아무 작업도 진행되지 않고 비어 있는지 여부를 말해주는 함수. <br/>

 * @return {Boolean}		- 비어있는 레코드이면 true를 리턴한다 
 * @example 
 * 	// 빈줄이면 메시지를 보여 준다. 
 * 	if (object.isEmpty()){
 *  	alert("아직 처리되지 않은 레코드입니다.");
 * 	}
 */
DataObject.prototype.isEmpty = function(){
	// functionname : [DataObject.isEmpty]
	
	return (
		this.dataSet.data.length == 0
		|| (this.dataSet.data.length == 1 && ["X", "D"].indexOf(this.getUpdateGu(this.seq)) >= 0)
	);
};

/**
 * @description 
 *     해당 순번에 해당하는 레코드의 IUD 상태를 리턴한다   
 *     
 * @return {String} 		
 */
DataObject.prototype.getUpdateGu = function(seq) {
	// functionname : [DataObject.getUpdateGu]
	
	return this.dataSet.getState((seq - this.startSeq), "updateGu");
}
/**
 * @description 
 *     해당 순번에 해당하는 레코드의 IUD 상태를 설정한다   
 *     
 * @return {String} 		
 */
DataObject.prototype.setUpdateGu = function(seq, updateGu) {
	// functionname : [DataObject.setUpdateGu]
	
	return this.dataSet.setState((seq - this.startSeq), "updateGu", updateGu);
}

/**
 * @description 
 *     객체로 "Load"동작을 통해서 데이터를 가져온 후 화면에 채우는 기준이 되는 속성의 ID를 채운다. <br/> 
 *     대량의 데이터를 로드해서 기준을 바꾸어 가며 화면에 표시하고 작업할 때 사용한다. <br/>

 * @return {Void}
 * @example 
 * 	// studentId 필드를 채우기의 기준으로 삼는다. 
 * 	object.setFillKeyFieldId("studentId");
 */
DataObject.prototype.setFillKeyFieldId = function(fieldId){
	// functionname : [DataObject.setFillKeyFieldId]
	
	this.fillKeyFieldName = fieldId;
	this.fillKeyFieldId = fieldId;
};

/** 
 * @deprecated since version 5.0, object.setFillKeyFieldId() 로 대체 
 * */
DataObject.prototype.setFillKeyFieldName = function(fieldId){
	// functionname : [DataObject.setFillKeyFieldName]
	
	this.setFillKeyFieldId(fieldId);
};

/**
 * @description 
 *     인수로 받은 순번에 해당하는 레코드를 찾아 순번 필드값을 갱신한다. <br/>
 *     순번과 순번 필드의 개념은 다르다. 
 * 
 * @param  {Number}	seq			변경항 데이터의 순번 <br/>
 * @param  {Number}	seqValue	새로운 순번 값 <br/>
 * 
 * @return {Void} 
 * @example 
 * 
 * 	object.updateSeqField(1, 100);		// 1번 레코드의 순번 값을 100으로 변경한다
 */
DataObject.prototype.updateSeqField = function(seq, seqValue){
	// functionname : [DataObject.updateSeqField]
	
	var rowNum = 0;
	var oldSeq = 0;
	
	if( this.seqKeyFieldId == "" ){
		rowNum = seq - this.startSeq;
		
		this.dataSet.setState(rowNum, "tempSeqKey", seqValue);
    }
	else{
		oldSeq = this.seq;
		
		this.seq = seq;
		this.setValue(this.seqKeyFieldId, seqValue);
		this.seq = oldSeq;
	}
	
	return;
};

/**
 * @description 
 * 		현재 포커싱되어 처리중인 레코드에서 인수로 지정한 레코드로 이동하는 함수이다.<br/>
 *  
 * @return {Void}		
 * @example 
 * 	// 1번 Seq로 데이터를 이동한다. 
 * 	object.setSeq(1);
 */
DataObject.prototype.setSeq = function(seq){
	// functionname : [DataObject.setSeq]
	
	if( this.seq == seq )
		return true;
	
	if( seq > this.maxSeq - 1 + this.startSeq ){
		alert(getText("message_object_001", "현재의 줄 수{0}보다 클 수는 없습니다.", [this.maxSeq]));
		return false;
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanSeqChangeEvent ){
		if( !this.fncCanSeqChangeEvent(this.seq, seq) )
			return false;
	} 	

	var result = true;
	var oldSeq = this.seq;
	
	this.seq = seq;
	
//	// seq이면 _onSeqChanged이벤트를 호출하지 않는다
//	if( seq == this.startSeq ) return;
	
	if( this.FireEvent && this.hasSeqChangeEvent ){
		result = this.fncSeqChangeEvent(oldSeq, seq);
		
		if( typeof result == "boolean" && !result ){
			this.seq = oldSeq;
			return false;
		}
	}
	
	return true;
};

/**
 * @description 
 * 		현재 포커싱되어 처리중인 레코드 다음의 유효레코드로 이동하고 이동한 레코드의 seq값을 돌려주는 함수이다.<br/>
 * 		다음 줄이 삭제된 레코드인 경우 제외하고 다음 유효한 레코드로 이동하게 된다. 
 * 		이떄 유효한 레코드가 없으면 첫레코드로 되돌아 간다.
 *  
 * @return {Boolean}		- 비어있는 레코드이면 true를 리턴한다 
 * @example 
 * 	// 빈줄이면 메시지를 보여 준다. 
 * 	var seq = object.isEmpty();
 */
DataObject.prototype.moveNext = function(){
	// functionname : [DataObject.moveNext]
	
	var haveNextData = false;
	var seq = 0;
	var oldSeq = this.seq;
	var nextSeq = 0;
	var rowNum = 0;
	
	if( this.fillkeyFieldValue.length == 0 ){
		for(seq = this.seq + 1; seq < this.dataSet.data.length && !haveNextData; seq++){
			rowNum = seq - this.startSeq;
			
			if( ["X","D"].indexOf(this.getUpdateGu(seq)) < 0 ){
				haveNextData = true;
				nextSeq = seq;
			}
		}
	}
	else{
		for(seq = this.seq + 1; seq < this.dataSet.data.length && !haveNextData; seq++){
			rowNum = seq - this.startSeq;
			
			if( ["X","D"].indexOf(this.getUpdateGu(seq)) < 0 ){
				if( this.dataSet.data[rowNum][this.fillKeyFieldId] == this.fillkeyFieldValue ){
					haveNextData = true;
					nextSeq = seq;
				}
			}
		}
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanSeqChangeEvent ){
		if( !this.fncCanSeqChangeEvent(this.seq, nextSeq) )
			return false;
	}
	
	if( haveNextData )
		this.seq = nextSeq;
	else
		this.seq = this.startSeq;	// 다음 레코드가 없으면 처음으로 돌아간다.
	
	if( this.FireEvent && this.hasSeqChangeEvent )
		this.fncSeqChangeEvent(oldSeq, this.seq);
	
	return haveNextData;
};

/**
 * @description 
 *     객체에 레코드를 한 줄 추가한다. 
 * @param  {Boolean}	withEvents		AddRecord 이벤트를 발생시킬것인지 여부 
 * @return {Number} 					추가된 레코드의 순번을 리턴한다. 
 * @example 
 * 
 * 	var seq = object.addNewData();		// AddRecord 이벤트 발생
 * 	var seq = object.addNewData(false);	// AddRecord 이벤트 발생 안함 
 * 
 */
DataObject.prototype.addNewData = function(withEvents){
	// functionname : [DataObject.addNewData]
	
	if( typeof withEvents == "undefined" )
		withEvents = true;
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanAddRecordEvent && withEvents ){
		if( !this.fncCanAddRecordEvent() ){
			return -1;
		}
	}
	
	var rtnObject = null;
	var oldSeq = this.seq;
	var newSeq = 0;
	
	// 줄추가후 시퀀스를 바꿔 데이터를 넣기 위해서 원래 시퀀스에서 잠시 이동한다.
	rtnObject = this.dataSet.insertData();
	
	if( rtnObject.result == false ){
		alert(rtnObject.errorMsg);
		return -1;
	}
	else{
		this.dataSet.setState(rtnObject.recordIndex, "updateGu", "X");
	}
	
	this.maxSeq++;
	this.count++;
	this.seq = this.maxSeq;		// this.setSeq(this.maxSeq)를 사용하면 큰일남 seq-row대응전에 seqChange이벤트가 일어나  없는 objectseq를 참조
	
	if( this.seqKeyFieldId == "" )
		this.dataSet.setState(this.seq - this.startSeq, "tempSeqKey", this.seq);
	else {
		var fireEvent_Mem = this.FireEvent;
		this.FireEvent = withEvents;		
		this.setValue(this.seqKeyFieldId, this.seq);
		this.FireEvent = fireEvent_Mem;		
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.FireEvent && this.hasAddRecordEvent && withEvents ){
		this.fncAddRecordEvent();
	}
	
	// 화면은 아직 원래의 객체를 가리키고 있으므로 원래의 시퀀스로 환원한다
	newSeq = this.seq;
	this.seq = oldSeq;
	
	// 메모리 해제
	rtnObject = null;
	
	return newSeq;
};

/**
 * @description 
 *     인수로 받은 순번에 해당하는 레코드를 찾아 삭제한다 <br/>
 *     데이터가 삭제되는 것은 아니며 삭제 플레그가 붙고, 다른 함수의 처리과정에서 제외된다. 
 * @param  {Number}	seq			변경항 데이터의 순번 <br/>
 * @return {Void} 
 * @example 
 * 
 * 	object.deleteSeq(1);		// 1번 레코드를 삭제한다
 * 
 */
DataObject.prototype.deleteSeq = function(seq){
	// functionname : [DataObject.deleteSeq]
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanDeleteRecordEvent ){
		if( !this.fncCanDeleteRecordEvent() )
			return -1;
	}
	
	var data = null;
	var key = null;
	var propertyInfo = null;
	var oldValue = null;
	var rowNum = 0;
	
	// 집계필드 갱신
	rowNum = seq - this.startSeq;
	data = this.dataSet.data[rowNum];
	
	for(key in data){
		//필드의 기본정보 __XXXX__를 레코드에 추가하지 않음
		if( /^__.*__$/.test(key) )
			continue;
		
		propertyInfo = this.propertyInfosById[key];
		oldValue = data[key];
		
		if( propertyInfo.isNumericType ){
			this._updateMaxMin(key, oldValue, 0, seq);
//			propertyInfo.sum -= oldValue;
			this._updateSum(key, oldValue, 0);
		}
	}
	
	this.dataSet.deleteData(rowNum);
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.FireEvent && this.hasDeleteRecordEvent ){
		this.fncDeleteRecordEvent();
	}
	
	this.count--;
	
	return;
};

/**
 * @description 
 *     두개의 순번을 받아 서로 위치를 바꾼다.  
 * 
 * @param  {Number}	seqFrom		맞바꿀 앞레코드의 순번 <br/>
 * @param  {Number}	seqTo		맞바꿀 뒷레코드의 순번 <br/>
 * 
 * @return {Void} 
 * @example 
 * 
 * 	object.changeSeq(1,2);		// 1번 레코드와 2번 레코드의 위치를 바꾼다 
 * 
 */
DataObject.prototype.changeSeq = function(seqFrom, seqTo){
	// functionname : [DataObject.changeSeq]
	
	var rowNumFrom = 0;
	var rowNumTo = 0;
	var recordFrom = null;
	var recordTo = null;
	var errorInfo = null;
	
	rowNumFrom = seqFrom - this.startSeq;
	rowNumTo = seqTo - this.startSeq;
	recordFrom = JSON.parse(JSON.stringify(this.dataSet.data[rowNumFrom]));
	recordTo = JSON.parse(JSON.stringify(this.dataSet.data[rowNumTo]));
	
	this.dataSet.data[rowNumFrom] = null;
	this.dataSet.data[rowNumFrom] = recordTo;
	this.dataSet.data[rowNumTo] = null;
	this.dataSet.data[rowNumTo] = recordFrom;
	
	// 메모리 해제
	recordTo = null; recordFrom = null;
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_CHANGESEQ, errorInfo);
//		
//		if( errorInfo.code != 0 ){
//			alert(errorInfo.message);
//		}
//		
//		// 메모리 해제
//		errorInfo = null;
//	}
};

/**
 * @description 
 *     인수로 받은 순번에 해당하는 레코드를 찾아 직전 레코드 값으로 데이터를 채운다  <br/>
 * @param  {Number}	seq			변경항 데이터의 순번 <br/>
 * @return {Void} 
 * @example 
 * 
 * 	copyUpperData(2);		// 2번 레코드의 각 프로퍼티의 값을 1번 레코드의 각 프로퍼티의 값으로 채운다.
 */
DataObject.prototype.copyUpperData = function(seq){
	// functionname : [DataObject.copyUpperData]
	
	if( seq <= this.startSeq )
		return;
	
	var rowNum = 0;
	var recordFrom = null;
	var recordTo = null;
	var key = null;
	var propertyInfo = null;
	var newValue = null;
	var oldValue = null;
	var data = null;
	
	//레코드에 필드 추가
	rowNum = seq - this.startSeq;
	recordFrom = this.dataSet.data[rowNum - 1];
	recordTo = this.dataSet.data[rowNum];
	
	for(key in recordTo){
		//필드의 기본정보 __XXXX__를 레코드에 추가하지 않음
		if(/^__.*__$/.test(key))
			continue;
		
		propertyInfo = this.propertyInfosById[key];
		oldValue = recordTo[key];
		newValue = recordFrom[key];
		data = {};
		data[key] = newValue;
		
//		this.setValue(key, newValue);
		this.dataSet.updateData(rowNum, data);
		
		if( propertyInfo.isNumericType ){
			this._updateMaxMin(key, oldValue, newValue, seq);
//			propertyInfo.sum += newValue - oldValue;
			this._updateSum(key, oldValue, newValue);
		}
		
		//메모리 해제
		data = null; newValue = null; oldValue = null; propertyInfo = null; key = null;
	}
	
	// 메모리 해제
	oldValue = null; newValue = null; propertyInfo = null; key = null;
	dataAfter = null; dataBefore = null;
	
	return;
};

/**
 * @description 
 *     순번정보를 지정하여 전체적으로 순번을 조정하게 한다.
 *     순번을 ":"로 연결한 문자열이나 순번의 배열을 받아 순서를 조정한다.
 * @param  {String|Number[]}	순번을 ":"로 연결한 문자열이나 순번의 배열<br/>
 * @return {Void} 
 * @example 
 * 
 * 	object.adjustOrder("1:4:5:3:2");		// 현재 1,2,3,4,5번 레코드를 다시 1,4,5,3,2 순서로 위치를 조정한다 
 * 	object.adjustOrder([1, 4, 5, 3, 2]);	// 현재 1,2,3,4,5번 레코드를 다시 1,4,5,3,2 순서로 위치를 조정한다 
 * 
 */
DataObject.prototype.adjustOrder = function(orderInfo){
	// functionname : [DataObject.adjustOrder]
	
	var orders = null;
	var result = true;
	
	orders = Array.isArray(orderInfo) ? orderInfo : orderInfo.split(":");
	
	if( orders.length != this.dataSet.getCount() )
		return false;
	
	var errorInfo = null;
	var datasOrigin = null;
	var datasTemp = null;
	var rowNum = 0;
	var seq = 0;
	var i = 0;
	
	datasOrigin = JSON.parse(JSON.stringify(this.dataSet.data));
	datasTemp = [];
	
	for(i = 0; i < orders.length; i++){
		seq = parseInt(1* orders[i]);
		rowNum = seq - this.startSeq;
		
		datasTemp.push(JSON.parse(JSON.stringify(datasOrigin[rowNum])));
	}
	
//	for(i = datas.length-1; i >= 0; i--)
//		datas.pop();
	
	this.dataSet.clearData();
	this.dataSet.data = null;
	this.dataSet.data = JSON.parse(JSON.stringify(datasTemp));
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent("adjustOrder", errorInfo);
//		
//		if( errorInfo.code != 0 ){
//			alert(errorInfo.message);
//			result = false;
//			
//			//이전 상태로 복구
//			this.dataSet.data.clearData();
//			this.dataSet.data = null;
//			this.dataSet.data = JSON.parse(JSON.stringify(datasOrigin));
//		}
//		
//		// 메모리 해제
//		errorInfo = null;
//	}
	
	// 이전 데이터 복사본 비움
	for(i = datasOrigin.length-1; i >= 0; i--)
		datasOrigin.pop();
	// 정렬 데이터  비움
	for(i = datasTemp.length-1; i >= 0; i--)
		datasTemp.pop();
	//메모리 해제
	datasOrigin = null; datasTemp = null; orders = null;
	
	return result;
};

/**
 * @description 
 *     현재 레코드에서 지정된 속성의 값을 리턴한다. 
 * 
 * @param  {String}						fieldId		찾을 값의 FieldID<br/>
 * 
 * @return {String|Number|Boolean|Object} 			현재 

 * @example 
 * 	var value = object.getValue("studentid");
 */
DataObject.prototype.getValue = function(fieldId){
	// functionname : [DataObject.getValue]
	
	var value = this.dataSet.data[this.seq - this.startSeq][fieldId];
	
	//만약 데이터가 null 또는 undefined 라면 빈 문자열로 수정함
	if( value == null || typeof value == "undefined" )
		value = "";
	
	return value;
};


/**
 * @description 
 *     현재 레코드에서 지정된 속성의 값을 변경한다. 
 * 
 * @param  {String}							fieldId		변경할 칼럼의 FieldID<br/>
 * @param  {String|Number|Boolean|Object}	value		변경할 칼럼값<br/>
 * 
 * @return {Boolean} 						현재 

 * @example 
 * 	var success = object.setValue("studentid", "20010101");
 */
DataObject.prototype.setValue = function(fieldId, value){
	// functionname : [DataObject.setValue]
	
//	if (this.notSetValue) return true;
	
	if( this.seq < this.startSeq )
		return false;
	
	var result = false;
	var rowNum = 0;
	var record = null;
	var oldValue = null;
	var updateGu = null;
	var json = null;
	var propertyInfo = null;
	var oldMax = null;
	var oldMin = null;
	
//	if( this.propertyInfosById[fieldId].isNumericType ){
//		value = 1 * value;
//	}
	
	rowNum = this.seq - this.startSeq;
	record = this.dataSet.data[rowNum];
	oldValue = record[fieldId];	// 기존 데이터 메모
//	updateGu = record.__STATE__.updateGu;
	updateGu = this.dataSet.getState(rowNum, "updateGu");
	propertyInfo = this.propertyInfosById[fieldId];
	
	if( oldValue === value && !this.dataUp )		// this.dataUp == true 이면 같은 값이더라도 업데이트 한다
		return true;
	
	// 사용자 코딩 추가영역을 호출한다
	if( this.hasCanChangeEvent ){
		result = this.fncCanChangeEvent(fieldId, value);
		
		if( typeof result == "boolean" && !result )
			return false;
	}
	
	// 새로운 값으로 변경
	json = {};
	json[fieldId] = value;
	
	this.dataSet.updateData(rowNum, json);
	
	if( objectManager.dataloaded || !this.dniMode){
		var isChanged = false;
		var key = null, propInfo = null;
		var propValue = null, propOldValue = null;
		
		for(key in record){
			propInfo = this.propertyInfosById[key];
			
			// 키가 아니고 어느 콘트롤엔가 연결된 속성만 대상으로 Dirty를 파악한다.
			if( typeof propInfo != "undefined" && (!(propInfo.isKey || propInfo.isSeqKey) && propInfo.needDirtyCheck) ){
				propValue = record[key];
				propOldValue = record.__STATE__.oldData[key];
				
				if( propInfo.listLinked ){ // 콤보나 리스트는 디폴트 값이 "-1"이다
					if( propValue == propOldValue ){ /*통과*/ }
					else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
					else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
					else { isChanged = true; }
				}
				else{
					isChanged = isChanged || (propValue != propOldValue);
				}
				
				//메모리 해제
				propOldValue = null; propValue = null;
			}
			
			//메모리 해제
			propInfo = null; key = null;
			
			if( isChanged ) break;
		}
		
		if( updateGu == "X" ){
			if( isChanged ) updateGu = "I";
		}
		else if( updateGu == "N" ){
			if( isChanged ) updateGu = "U";
		}
		else if( updateGu == "I" ){
			if( !isChanged ) updateGu = "X";
		}
		else if( updateGu == "U" ){
			if( !isChanged ) updateGu = "N";
		}
		
		this.dataSet.setState(rowNum, "updateGu", updateGu);
	}
	// 가저오기로 채워 젔으면 I-> X 로 돌아가서는 안된다
	else{
		if( updateGu == "X" ){
			this.dataSet.setState(rowNum, "updateGu", updateGu);
			
			// DirtyCheck이 필요 없으면 X인 경우 그대로 둔다
			// DirtyCheck이 필요하면 조건에 따라 I로 강제 조정 한다 
			if( propertyInfo.needDirtyCheck ){
				// 객체키인 경우 데이터 시트에 링크되어 있으면 시트가 변하면 변경으로 간주되어야 하므로 I로 강제조정한다
				if( propertyInfo.isKey ){
					if( propertyInfo.sheetLinked ) this.dataSet.setState(rowNum, "updateGu", "I");
				}
				else if( propertyInfo.isSeqKey ){
					// 통과한다
				}
				else{
					this.dataSet.setState(rowNum, "updateGu", "I"); // 키가 아니면서 DirtyCheck이므로 I로 강제조정한다 
				}
			}
		}
	}
	
	// this.dataUp 가 true 일때 updateGu값 바꾼후 같은값이면 바로 리턴시키키 위해
	if( oldValue === value )
		return true;
	
	// 집계필드 갱신
	if( propertyInfo.isNumericType ){
		value = 1 * value;
		oldValue = 1 * oldValue;
		
		oldMax = propertyInfo.max;
		oldMin = propertyInfo.min;
		
		this._updateMaxMin(fieldId, oldValue, value, this.seq);
//		propertyInfo.sum += value - oldValue;
		this._updateSum(fieldId, oldValue, value);
	}
	
	var funcFieldInfos = [];
	var funcFieldInfo = null;
	var key = null; var value = null; var oldValue = null;
	var i = 0;
	
	//프로퍼티 구분이 function이면서 데이터타입이 number인 프로퍼티의 데이터, 집계데이터를 갱신한다
	for(i = 0, propertyInfo = null; i < this.propertyCount; i++, propertyInfo = null){
		propertyInfo = this.propertyInfos[i];
		
		if( propertyInfo.isNumericType && propertyInfo.propertyGu == "function" ){
			key = propertyInfo.fieldId;
			value = propertyInfo.formula();
			oldValue = record[key];
			
			if( value != oldValue ){
				funcFieldInfo = {};
				funcFieldInfo["fieldId"] = key;
				funcFieldInfo["value"] = value;
				funcFieldInfo["oldValue"] = oldValue;
				funcFieldInfo["oldMin"] = propertyInfo.min;
				funcFieldInfo["oldMax"] = propertyInfo.max;
				funcFieldInfos.push(funcFieldInfo);
				
				record[key] = value;
				this.dataSet.setOldValue(rowNum, key, oldValue);
				
				value = 1 * value;
				propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
				propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//				propertyInfo.sum += value - oldValue;
				this._updateSum(key, oldValue, value);
				
				funcFieldInfo = null;
			}
			
			oldValue = null; value = null; key = null;
		}
	}
	
	// 사용자 코딩 추가영역을 호출한다
	if( fillState == FILLSTATE_NONE ){
		if( this.FireEvent && this.hasChangeEvent ){
			result = this.fncChangeEvent(fieldId, value, oldValue);
			
			//리턴 결과가 false인 경우 이전 상태로 복구함
			if( typeof result == "boolean" && !result ){
				//이전 데이터로 복구
				json[fieldId] = oldValue;
				this.dataSet.updateData(rowNum, json);
				
				//집계필드 복구
				if( propertyInfo.isNumericType ){
					propertyInfo.max = oldMax;
					propertyInfo.min = oldMin;
//					propertyInfo.sum = propertyInfo.sum - value + oldValue;
					this._updateSum(fieldId, value, oldValue);
				}
				
				//프로퍼티 구분이 function이면서 데이터타입이 number인 프로퍼티 집계 데이터 복구
				for(i = 0, funcFieldInfo = null, propertyInfo = null; i < funcFieldInfos.length; i++, funcFieldInfo = null, propertyInfo = null){
					funcFieldInfo = funcFieldInfos[i];
					propertyInfo = this.propertyInfosById[funcFieldInfo.fieldId]
					
					record[funcFieldInfo.fieldId] = funcFieldInfo.oldValue;
					
					propertyInfo.min = funcFieldInfo.oldMin;
					propertyInfo.max = funcFieldInfo.oldMax;
//					propertyInfo.sum = propertyInfo.sum - funcFieldInfo.value + funcFieldInfo.oldValue;
					this._updateSum(funcFieldInfo.fieldId, value, oldValue);
				}
				
				//메모리 해제
				funcFieldInfos.clear(); funcFieldInfos = null;
				propertyInfo = null; json = null; oldValue = null; record = null;
				
				return false;
			}
		}
	}
	
	//메모리 해제
	funcFieldInfos.clear(); funcFieldInfos = null;
	propertyInfo = null; json = null; updateGu = null; oldValue = null; record = null;
	
	return true;
};

/**
 * @description 
 *     현재 레코드에서 지정된 속성의 값을 변경한다. <br/>
 *     전체 줄 속의 프로퍼티 값을 동시에 갱신하는 경우 사용
 * 
 * @param  {String}							fieldId		변경할 칼럼의 FieldID<br/>
 * @param  {String|Number|Boolean|Object}	value		변경할 칼럼값<br/>
 * 
 * @return {Boolean} 						오류 발생여부 

 * @example 
 * 	var success = object.setValueAll ("studentAge", 1);
 */
DataObject.prototype.setValueAll = function(fieldId, value){
	// functionname : [DataObject.setValueAll]
	
	var rowNum = 0;
	var seq = 0;
	var record = null;
	var recordCount = 0;
	var oldValue = null;
	var updateGu = null;
	var json = null;
	var propertyInfo = null;
	
	// 먼저 전체 데이터를 바꾼다
	for(rowNum = 0, recordCount = this.dataSet.data.length; rowNum < recordCount; rowNum++, record = null){
		seq = rowNum + this.startSeq;
		
		// 아래에서 setValue를 처리하기 위해서, 여기서 고치면 이벤트가 일어날 수 없다.
		if( rowNum == this.seq - this.startSeq )
			continue;
		
		// 삭제된데이터
		if( ["D", "E"].indexOf(this.getUpdateGu(seq)) >= 0 )
			continue;
		
		record = this.dataSet.data[rowNum];
		oldValue = record[fieldId]; //기존 데이터 메모
		updateGu = this.dataSet.getState(rowNum, "updateGu");
		
		// this.dataUp == true 이면 같은 값이더라도 업데이트 한다
		if( oldValue === value && !this.dataUp )
			continue;
		
		// 새로운 값으로 변경
		json = {};
		json[fieldId] = value;
		
		this.dataSet.updateData(rowNum, json);
		
		// updateGu 갱신
		if( objectManager.dataloaded || !this.dniMode){
			var isChanged = false;
			var key = null, propInfo = null;
			var propValue = null, propOldValue = null;
			
			for(key in record){
				propInfo = this.propertyInfosById[key];
				
				// 키가 아니고 어느 콘트롤엔가 연결된 속성만 대상으로 Dirty를 파악한다.
				if( typeof propInfo != "undefined" && (!(propInfo.isKey || propInfo.isSeqKey) && propInfo.needDirtyCheck) ){
					propValue = record[key];
					propOldValue = record.__STATE__.oldData[key];
					
					if( propInfo.listLinked ){ // 콤보나 리스트는 디폴트 값이 "-1"이다
						if( propValue == propOldValue ){ /*통과*/ }
						else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
						else if( propValue == "-1" && propOldValue == "" ){ /*통과*/ }
						else { isChanged = true; }
					}
					else{
						isChanged = isChanged || (propValue != propOldValue);
					}
					
					//메모리 해제
					propOldValue = null; propValue = null;
				}
				
				//메모리 해제
				propInfo = null; key = null;
				
				if( isChanged ) break;
			}
			
			if( updateGu == "X" ){
				if( isChanged ) updateGu = "I";
			}
			else if( updateGu == "N" ){
				if( isChanged ) updateGu = "U";
			}
			else if( updateGu == "I" ){
				if( !isChanged ) updateGu = "X";
			}
			else if( updateGu == "U" ){
				if( !isChanged ) updateGu = "N";
			}
			
			this.dataSet.setState(rowNum, "updateGu", updateGu);
			
			// 메모리 해제
			propOldValue = null; propValue = null;
		}
		// 가저오기로 채워 젔으면 I-> X 로 돌아가서는 안된다
		else{
			if( updateGu == "X" ){
				this.dataSet.setState(rowNum, "updateGu", updateGu);
				
				propertyInfo = this.propertyInfosById[fieldId];
				
				// DirtyCheck이 필요 없으면 X인 경우 그대로 둔다
				// DirtyCheck이 필요하면 조건에 따라 I로 강제 조정 한다 
				if( propertyInfo.needDirtyCheck ){
					// 객체키인 경우 데이터 시트에 링크되어 있으면 시트가 변하면 변경으로 간주되어야 하므로 I로 강제조정한다
					if( propertyInfo.isKey ){
						if( propertyInfo.sheetLinked ) this.dataSet.setState(rowNum, "updateGu", "I");
					}
					else if( propertyInfo.isSeqKey ){
						// 통과한다
					}
					else{
						this.dataSet.setState(rowNum, "updateGu", "I"); //키가 아니면서 DirtyCheck이므로 I로 강제조정한다 
					}
				}
				
				propertyInfo = null;
			}
		}

		// this.dataUp 가 true 일때 updateGu값 바꾼후 같은값이면 바로 리턴시키키 위해(oldValue와 newValue가 같은 값이므로 집계 데이터를 갱신하지 않음)
		if( oldValue === value )
			continue;
		
		// 집계필드 갱신
		propertyInfo = this.propertyInfosById[fieldId];
		if( propertyInfo.isNumericType ){
			value = 1 * value;
			oldValue = 1 * oldValue;
			
			this._updateMaxMin(fieldId, oldValue, value, seq);
			this._updateSum(fieldId, oldValue, value);
		}
		
		//
		var key = null;
		for(var i = 0, propertyInfo = null; i < this.propertyCount; i++, propertyInfo = null){
			propertyInfo = this.propertyInfos[i];
			
			if( propertyInfo.propertyGu == "function" ){
				key = propertyInfo.fieldId;
				value = propertyInfo.formula();
				oldValue = record[key];
				
				if( value != oldValue ){
					record[key] = value;
					this.dataSet.setOldValue(rowNum, key, oldValue);
					
					if( propertyInfo.isNumericType ){
						value = 1 * value;
						this._updateMaxMin(key, oldValue, value, seq);
						this._updateSum(key, oldValue, value);
					}
				}
				
				oldValue = null; value = null; key = null;
			}
		}
		
		// 메모리 해제
		oldValue = null; updateGu = null; propertyInfo = null; json = null;
	}
	
	// 현재 Seq에 이벤트를 일으키기위해 setValue호출
	return this.setValue(fieldId, value);
};

/**
 * @deprecated since version 5.0, DataObject.sum()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 평균값을 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var totalScore = object.getSumOf("score");		
 */
DataObject.prototype.getSumOf = function(propertyId){
	// functionname : [DataObject.getSumOf]
	
	return this._getSumFunc("SUM", propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 평균값을 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var totalScore = object.sum("score");		
 */
DataObject.prototype.sum = function(propertyId){
	// functionname : [DataObject.sum]
	
	return this._getSumFunc("SUM", propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.average()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 합계를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var averageScore = object.getAvgOf("score");		
 */
DataObject.prototype.getAvgOf = function(propertyId){
	// functionname : [DataObject.getAvgOf]
	
	return this._getSumFunc("AVG", propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 합계를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var averageScore = object.average("score");		
 */
DataObject.prototype.average = function(propertyId){
	// functionname : [DataObject.average]
	
	return this._getSumFunc("AVG", propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.max()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최대값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var maxScore = object.getMaxOf("score");		
 */
DataObject.prototype.getMaxOf = function(propertyId){
	// functionname : [DataObject.getMaxOf]
	
	return this._getSumFunc("MAX",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최대값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var maxScore = object.max("score");		
 */
DataObject.prototype.max = function(propertyId){
	// functionname : [DataObject.max]
	
	return this._getSumFunc("MAX",propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.min()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최소값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var minScore = object.getMinOf("score");		
 */
DataObject.prototype.getMinOf = function(propertyId){
	// functionname : [DataObject.getMinOf]
	
	return this._getSumFunc("MIN",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 최소값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var minScore = object.min("score");		
 */
DataObject.prototype.min = function(propertyId){
	// functionname : [DataObject.min]
	
	return this._getSumFunc("MIN",propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.upper()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직전값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var upperScore = object.getFormerValueOf("score");		
 */
DataObject.prototype.getFormerValueOf = function(propertyId){
	// functionname : [DataObject.getFormerValueOf]
	
	return this._getSumFunc("FORMER",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직전값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var upperScore = object.upper("score");		
 */
DataObject.prototype.upper = function(propertyId){
	// functionname : [DataObject.upper]
	
	return this._getSumFunc("FORMER",propertyId);
};

/**
 * @deprecated since version 5.0, DataObject.next()로 대체
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직후값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var nextScore = object.getNextValueOf("score");		
 */
DataObject.prototype.getNextValueOf = function(propertyId){
	// functionname : [DataObject.getNextValueOf]
	
	return this._getSumFunc("NEXT",propertyId);
};

/**
 * @description 
 *     인수로 받은 property Id 에 해당하는 필드의 값의 직후값를 리턴한다
 * @param  {String}	propertyId
 * @return {Number} 
 * @example 
 * 
 * 	var nextScore = object.next("score");		
 */
DataObject.prototype.next = function(propertyId){
	// functionname : [DataObject.next]
	
	return this._getSumFunc("NEXT",propertyId);
};

/**
 * @description 
 *     레코드의 일부가 수정되어 업로드가 필요한 상태인지 리턴하는 함수이다.   
 *     
 * @return {Boolean} 		
 */
DataObject.prototype.needWrite = function(seq){
	// functionname : [DataObject.needWrite]
	
	var datas = this.dataSet.data;
	var needed = false;
	var rowNum = 0;
	
	for(rowNum = 0; rowNum < datas.length && !needed; rowNum++) {
		needed = (["I", "U", "D"].indexOf(this.getUpdateGu(rowNum + this.startSeq)) >= 0);
	}
	
	//메모리 해제
	data = null;
	
	return needed;
};
/**
 * @description	미결
 * @param 		{number}	seq
 * @return		{String}
 * @example		미결
 */
DataObject.prototype.recordNeedWrite = function(seq) {
	// functionname : [DataObject.recordNeedWrite]
	
	return (["I", "U", "D"].indexOf(this.dataSet.getState(seq - this.startSeq, "updateGu")) >= 0);
};

/**
 * @description 
 *     객체의 키필드가 채워졌는 지 파악하여 데이터를 Load할 수 있는지 여부를 리턴한다  
 *     
 * @return {Boolean} 		- 데이터 LOAD가 가능한 상태이면 true를 리턴한다.
 * @example 
 * 
 * 	if (object.canLoadData()){
 *    // 데이터 로드 동작
 *  }		
 */
DataObject.prototype.canLoadData = function(){
	// functionname : [DataObject.canLoadData]
	
	var data = this.dataSet.data[0];
	var propertyInfo = null;
	var needCancel = false;
	var propertyNum = 0;
	
	for(propertyNum = 0; propertyNum < this.propertyCount && !needCancel; propertyNum++, propertyInfo = null){
		propertyInfo = this.propertyInfos[propertyNum];
		
		if( !propertyInfo.isKeyField )
			continue;
		
		needCancel = (("" + data[propertyInfo.fieldId]) == "");
	}
	
	// 메모리 해제
	propertyInfo = null;
	data = null;

	return !needCancel;
};
//내부함수  JSDOC 안함 
DataObject.prototype._updateMaxMin = function(propertyId, oldValue, newValue, seq){
	// functionname : [DataObject._updateMaxMin]
	
	var rowNum = 0;
	var rowNum1 = 0;
	var seq1 = 0;
	var fieldId = null;
	var propertyInfo = null;
	var datas = null;
	var value = null;
	var max = null;
	
	// 숫자타입이 아니면 통과
	if( isNaN(newValue) )
		return;
	
	oldValue = parseFloat(1 * oldValue);
	newValue = parseFloat(1 * newValue);

	if (oldValue === newValue)
		return;

	rowNum = seq - this.startSeq;
	fieldId = propertyId;
	propertyInfo = this.propertyInfosById[propertyId];
	datas = this.dataSet.data;
	
	// MAX 갱신
	if( oldValue < newValue ){
		propertyInfo.max = (propertyInfo.max < newValue ? newValue : propertyInfo.max);
	}
	// 값이 줄어 들었고 기존값이 Max값이었다면 나머지 데이터를 판단해야 한다
	else if (oldValue > newValue && oldValue == propertyInfo.max){
		max = parseFloat(1 * datas[0][fieldId]);
		
		for(rowNum1 = 0; rowNum1 < this.dataSet.data.length; rowNum1++){
			if(rowNum1 == rowNum)
				continue;
			
			seq1 = rowNum1 + this.startSeq;
			
			if( ["D", "X", "E"].indexOf(this.getUpdateGu(seq1)) >= 0 )	// 삭제된데이터
				continue;

			value = parseFloat(1 * datas[rowNum1][fieldId]);
			max = value > max ? value : max;
		}
		
		propertyInfo.max = max;
	}

	// MIN 갱신
	if( oldValue > newValue ){
		propertyInfo.min = (propertyInfo.min > newValue ? newValue : propertyInfo.min);
	}
	else if( oldValue < newValue ){
		if( oldValue > propertyInfo.min ){	// 통과
		}
		// 값이 늘어 났고고 기존값이 Min값이었다면 나머지 데이터를 판단해야 한다
		else if( oldValue < newValue && oldValue == propertyInfo.max){
			min = parseFloat(1 * datas[0][fieldId]);

			for(rowNum1 = 0; rowNum1 < this.dataSet.data.length; rowNum1++){
				if( rowNum1 == rowNum )
					continue;
				
				seq1 = rowNum1 + this.startSeq;
				
				if( ["D", "X", "E"].indexOf(this.getUpdateGu(seq1)) >= 0 )	// 삭제된데이터
					continue;

				value = parseFloat(1 * datas[rowNum1][fieldId]);
				min = value < min ? value : min;
			}
			
			propertyInfo.min = min;
		}
	}
	
	//메모리 해제
	propertyInfo = null; fieldId = null; datas = null;

	return;
};

DataObject.prototype._updateSum = function(propertyId, oldValue, newValue){
	// functionname : [DataObject._updateSum]
	
	var propertyInfo = this.propertyInfosById[propertyId];
	var sumStr = "" + propertyInfo.sum;
	var newStr = "" + newValue;
	var oldStr = "" + oldValue;
	var sumPointCnt = (sumStr.indexOf(".") < 0) ? 0 : sumStr.length - (sumStr.indexOf(".") + 1);
	var newPointCnt = (newStr.indexOf(".") < 0) ? 0 : newStr.length - (newStr.indexOf(".") + 1);
	var oldPointCnt = (oldStr.indexOf(".") < 0) ? 0 : oldStr.length - (oldStr.indexOf(".") + 1);
	var decimalPoint = (sumPointCnt > newPointCnt ? sumPointCnt : (newPointCnt > oldPointCnt ? newPointCnt : oldPointCnt));
	var decimalValue = Math.pow(10, decimalPoint);
	
	propertyInfo.sum = 1 * ((((propertyInfo.sum * decimalValue) - (oldValue * decimalValue) + (newValue * decimalValue)) / decimalValue).toFixed(10));
	
	//메모리 해제
	oldStr = null; newStr = null; sumStr = null; propertyInfo = null;
	
	return;
}

//내부함수  JSDOC 안함 
DataObject.prototype._getSumFunc = function(functionName, pPropertyId){
	// functionname : [DataObject.getSumFunc]
	
	var propertyInfo = this.propertyInfosById[pPropertyId];
	var wResult = 0.0;
	var wReturn = "";
	
	if( !propertyInfo.isNumericType && functionName != "FORMER" && functionName != "NEXT" ){
		propertyInfo = null;
		return wReturn;
	}
	
	if( functionName == "SUM" ){
		wResult = propertyInfo.sum;
	}
	else if( functionName == "AVG" ){
		wResult = propertyInfo.sum / this.count;
	}
	else if( functionName == "MAX" ){
		wResult = propertyInfo.max;
	}
	else if( functionName == "MIN" ){
		wResult = propertyInfo.min;
	}
	else if( functionName == "CNT" ){
		wResult = this.count;
	}
	else if( functionName == "FORMER" ){
		wReturn = (this.seq == this.startSeq ? "" : this.dataSet.data[seq - 1][pPropertyId]);
	}
	else if( functionName == "NEXT" ){
		wReturn = (this.seq == this.maxSeq ? "" : this.dataSet.data[seq + 1][pPropertyId]);
	}

	if( functionName != "FORMER" && functionName != "NEXT" ){
		wReturn = "" + wResult;
	}
	
	//메모리 해제
	propertyInfo = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함 
DataObject.prototype.getLoadJSON = function(){
	// functionname : [DataObject.getLoadJSON]
	
	var wReturn = null;
	var list = [{}];
	var record = list[0];
	
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var c = 0;
	
	for(c = 0; c < propertyCount; c++){
		propertyInfo = this.propertyInfos[c];
		
		if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
			continue;
		
//		if (objectManager.sql) {
//			for (key in objectManager.sql[this.tableID]) {
//				record[key] = objectManager.sql[this.tableID][key];
//			}
//		}
//		else
		if( propertyInfo.isKey && !propertyInfo.isSeqKey )
			record[propertyInfo.fieldId] = this._getDBWritableKeyValue(this.startSeq, propertyInfo);
		
		propertyInfo = null;
	}
	
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	record = null;
	list.clear(); list = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함 
DataObject.prototype.getWriteJSON = function(){
	// functionname : [DataObject.getWriteJSON]
	
	var wReturn = null;
	var list = [];
	var record = null;
	
	var oldSeq = this.seq; //임시로 현재 시쿼스 번호 백업
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var updateGu = null;
	var seq = 0, idx = 0, r = 0; c = 0;
	var propertyInfo = null;
	
	for(r = 0, idx = 0; r < dataLength; r++){
		this.seq = r + this.startSeq;
		updateGu = this.getUpdateGu(this.seq);
		
		//삭제된데이터 제외
		if( ["N", "X", "E"].indexOf(updateGu) >= 0 )
			continue;
		
		if( this.hasNeedSkipFunction && this.fncNeedSkip() )
			continue;
		
		//레코드 복사
		record = JSON.parse(JSON.stringify(datas[r]));
		//레코드 데이터 변형
		record = this._getDBWritableRecord(record);
		//레코드 업데이트 구분 추가
		record["updategu"] = updateGu;
		
		//리스트에 추가
		list[idx++] = record;
		
		//메모리 해제
		record = null;
		updateGu = null;
	}
	
	this.seq = oldSeq; //백업한 시쿼스 번호로 복구
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	list.clear(); list = null;
	datas = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함 
DataObject.prototype.getDeleteJSON = function(){
	// functionname : [DataObject.getDeleteJSON]
	
	var wReturn = null;
	var list = [];
	var record = null;
	
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var updateGu = null;
	var seq = 0, r = 0, c = 0;
	
	for(r = 0; r < dataLength; r++){
		seq = r + this.startSeq;
		updateGu = this.getUpdateGu(seq);
		record = {};
		
		for(c = 0; c < propertyCount; c++, propertyInfo = null){
			propertyInfo = this.propertyInfos[c];
			
			if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
				continue;
			
			if( propertyInfo.isKey && !propertyInfo.isSeqKey )
				record[propertyInfo.fieldId] = this._getDBWritableKeyValue(seq, propertyInfo);
		}
		
		list[r] = record;
		
		record = null;
		updateGu = null;
	}
	
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	list.clear(); list = null;
	datas = null;
	
	return wReturn;
};

DataObject.prototype.getJsonData = function(){
	// functionname : [DataObject.getJsonData]
	
	var wReturn = null;
	var list = []; var record = null;
	var value = null; var updateGu = null;
	var oldSeq = this.seq; //임시로 현재 시쿼스 번호 백업
	var dataItems = this.dataSet.data;
	var dataItem = null; var dataOldItem = null;
	var dataCount = dataItems.length;
	var propertyCount = this.propertyCount;
	var propertyInfo = null; var propertyId = null;
	var i = 0, r = 0; c = 0;
	
	for(r = 0, i = 0; r < dataCount; r++, updateGu = null){
		this.seq = r + this.startSeq;
		updateGu = this.getUpdateGu(this.seq);
		
		//삭제된데이터 제외
		if( ["X", "E"].indexOf(updateGu) >= 0 )
			continue;
		
		//스킵조건
		if( this.hasNeedSkipFunction && this.fncNeedSkip() )
			continue;
		
		dataItem = dataItems[r];
		dataOldItem = dataItem.__STATE__.oldData;
		record = {"IUDFlag" : updateGu}; //레코드 업데이트 구분 추가
		
		//레코드에 데이터 추가
		for(c = 0; c < propertyCount; c++, propertyInfo = null, propertyId = null, value = null){
			propertyInfo = this.propertyInfos[c];
			propertyId = propertyInfo.fieldId;
			value = dataItem[propertyId];
			
			//null, NaN, undefined 인 경우, 빈문자열로 대체
			if( value == "NaN" || value == null || typeof value == "undefined" )
				value = "";
			
			//디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
			if( ("" + value).trim() == "" ){
				if( propertyInfo.isNumericType )
					value = 0;
				else if( !propertyInfo.permitNull )
					value = " ";
			}
			
			//파일인 경우 처리
			if( propertyInfo.propertyGu == "file" && value.length > 0 )
				if( !(value.length > 11 && /^\[.{8}_\}/.test(value)) )
					value = (value.trim().length > 0 ? jUploadPrefix : "") + value;
			
			//데이터 추가
			record[propertyId] = value;
			record[propertyId + "Old"] = dataOldItem[propertyId];
		}
		
		//리스트에 추가
		list[r] = record;
		
		//메모리 해제
		record = null;
		dataOldItem = null;
		dataItem = null;
	}
	
	//
	if( this.seqKeyFieldId.length > 0 ){
		var key = null; var control = null; var sheet = null;
		var rowNum = 0; var rowCount = 0; var seq = 0; var newSeq = 0;
		
		for(key in controls){
			control = controls[key];
			//
			if( typeof control.linkedObjects != "undefined" ){
				for(i = control.linkedObjects.length - 1; i >= 0; i--){
					if( control.linkedObjects[i] === this ){
						sheet = control;
						break;
		            }
		        }
		    }
			//
			if( sheet != null ){
				control = null; key = null;
				break;
		    }
			//
			control = null; key = null;
		}
		
		if( sheet != null ){
			for(i = 0, newSeq = this.startSeq; i < sheet.maxRows; i++, newSeq++, record = null){
				rowNum = i + sheet.startRowColNum;
				seq = sheet.getRowAttribute(rowNum, "objectSeq");
				
				record = list[seq - this.startSeq];
				record[this.seqKeyFieldId] = newSeq;
			}
			
			sheet = null;
		}
		
		list.sort(function(a, b){
			return (a[this.seqKeyFieldId] - b[this.seqKeyFieldId]);
		});
		
		for(i = 0, newSeq = this.startSeq, rowCount = list.length; i < rowCount; i++, record = null, updateGu = null){
			record = list[i];
			//
			if( typeof record == "undefined" ) continue;
			
			//업데이트 구분
			updateGu = record["IUDFlag"];
			//삭제된데이터
			if( ["D", "X", "E"].indexOf(updateGu) >= 0 ) continue;
			
			if( parseInt(1 * record[this.seqKeyFieldId + "Old"]) != newSeq ){
				if( updateGu == "X" )
					record["IUDFlag"] = "I";
				else if( updateGu == "N" )
					record["IUDFlag"] = "U";
			}
			
			record[this.seqKeyFieldId] = newSeq++;
		}
	}
	
	//
	for(i = list.length; i >= 0; i--){
		//
		if( typeof list[i] == "undefined" )
			list.splice(i, 1);
	}
	
	this.seq = oldSeq;				//백업한 시쿼스 번호로 복구
	wReturn = JSON.stringify(list);	//메모리와 서버에서 데이터 변형 문제로 문자열로 변환
	
	//메모리 해제
	list.clear(); list = null;
	dataItems = null;
	
	return wReturn;
};

//내부함수  JSDOC 안함
DataObject.prototype.getSelectCondition = function(){
	return (this.selectCondition != null) ? this.selectCondition : {};
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @param 		{String}	arrJSonObject
 * @return		{void}
 * @example		미결
 */
DataObject.prototype.loadData = function(arrJsonObject){
	// functionname : [DataObject.loadData]
	
	this.clear();
	
	var datas = this.dataSet.data;
	var data = null;
	var jsonObject = null;
	var propertyInfo = null;
	var fieldId = null;
	var jsonKey = null;
	var value = null;
	var recordSize = 0;
	var rowNum = 0;
	
	//
	for(rowNum = 0, recordSize = arrJsonObject.length; rowNum < recordSize; rowNum++){
		this.dataSet.insertData();
		this.dataSet.setState(rowNum, "updateGu", "N"); // 수정전상태는 "N"이다
		
		jsonObject = arrJsonObject[rowNum];
		data = datas[rowNum];
		
		for(fieldId in this.propertyInfosById){
			propertyInfo = this.propertyInfosById[fieldId];
			
			for(jsonKey in jsonObject){
				if( ("" + fieldId).toLocaleLowerCase() == ("" + jsonKey).toLocaleLowerCase() ){
					value = jsonObject[jsonKey];
					
					data[fieldId] = value;
					this.dataSet.setOldValue(rowNum, fieldId, value);
					
					// 집계함수 계산
					if( propertyInfo.isNumericType ){
						value = 1 * value;
						propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
						propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//						propertyInfo.sum += value;
						this._updateSum(fieldId, 0, value);
					}
					
					value = null; jsonKey = null;
					
					break;
				}
				
				jsonKey = null;
			}
			
			propertyInfo = null; fieldId = null;
		}
		
		data = null; jsonObject = null;
	}
	
	var propNum = 0;
	var newSeq = 0;
	var oldSeq = this.seq;
	var dataCount = datas.length;
	
	//
	for(propNum = 0; propNum < this.propertyCount; propNum++, propertyInfo = null, fieldId = null){
		propertyInfo = this.propertyInfos[propNum];
		fieldId = propertyInfo.fieldId;
		
		if( !propertyInfo.isNumericType || propertyInfo.propertyGu != "function" )
			continue;
		
		for(rowNum = 0, newSeq = this.startSeq; rowNum < dataCount; rowNum++, newSeq++){
			data = datas[rowNum];
			
			this.seq = newSeq;
			value = propertyInfo.formula();
			
			data[fieldId] = value;
			this.dataSet.setOldValue(rowNum, fieldId, value);
			
			// 집계함수 계산
//			if( propertyInfo.isNumericType ){
				value = 1 * value;
				propertyInfo.min = (propertyInfo.min > value ? value : propertyInfo.min);
				propertyInfo.max = (propertyInfo.max < value ? value : propertyInfo.max);
//				propertyInfo.sum += value;
				this._updateSum(fieldId, 0, value);
//			}
			
			value = null; data = null;
		}
	}
	
	this.seq = oldSeq;
	this.maxSeq = arrJsonObject.length - 1 + this.startSeq;
	this.count = dataCount;
	
	//객체로드한 경우 dni모드가 IUD로 설정되어야 함(IUD : false / D&I : true)
	this.dniMode = false;
	
	arrJsonObject.clear();
	arrJsonObject = null;
	datas = null;
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		actionType = OBJECT_DATA_RESET_BY_LOADDATA;
//		
//		this.fncDataResettedEvent(actionType, errorInfo);
//		if( errorInfo.code != 0 ){
//			// !!! 오류 메시지 
//			alert(errorInfo.message);
//		}
//		
//		actionType = null;
//		errorInfo = null;
//	}
	
	return;
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
DataObject.prototype.getLoadData = function(){
	// functionname : [DataObject.getLoadData]
	
	var uploadString = "Object:" + this.tableID + ";";
	var propertyInfo = null;
	var propertyNum = 0;
	
	for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++, propertyInfo = null){
		propertyInfo = this.propertyInfos[propertyNum];
		
		if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
			continue;
		
		if( propertyInfo.isKey && !propertyInfo.isSeqKey )
			uploadString += this._getDBWritableValue(this.startSeq, propertyInfo) + ",";
	}
	
	uploadString += ";";
	
	// 메모리 해제
	propertyInfo = null;
	
	return uploadString;
};
/**
 * @description	미결
 * @param 		{String}	pPropertyId
 * @return		{boolean}
 * @example		미결
 */
DataObject.prototype.getWriteData = function(){
	// functionname : [DataObject.getWriteData]
	
	var oldSeq = this.seq;
	var uploadString = "Object:" + this.tableID + ";";
	
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var updateGu = null;
	var rowNum = 0;
	var seq = 0;
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var propertyNum = 0;
	var tempStr = null;
	var fieldId = null;
	var oldValue = null;
	
	for(rowNum = 0; rowNum < dataLength; rowNum++, updateGu = null){
		this.seq = rowNum + this.startSeq;
		updateGu = this.getUpdateGu(this.seq);
		
		// 삭제된데이터
		if( ["N", "X", "E"].indexOf(updateGu) >= 0 )
			continue;
		
	    if( this.hasNeedSkipFunction && this.fncNeedSkip() )
	    	continue;
	    
		for(propertyNum = 0; propertyNum < propertyCount; propertyNum++){
			propertyInfo = this.propertyInfos[propertyNum];
			
			if( (propertyInfo.propertyGu == "field") ){
				uploadString += this._getDBWritableValue(this.seq, propertyInfo);
				uploadString += ",";
		    }
			else if( (propertyInfo.propertyGu == "file") ){
				tempStr = this._getDBWritableValue(this.seq, propertyInfo);
				
				if( tempStr.length == 0 ){
					// 생략
				}
				else if( tempStr.length > 11 && tempStr.substring(0,1) == "[" && tempStr.substring(9,11) == "_]" ){
					uploadString += tempStr;
				}
//				// 대상에서 모바일 이미지 처리시만 사용  
//				else if( tempStr.length > 11 && tempStr.substring(0,1) == "[" && tempStr.substring(10,11) == "]" ){
//		    		uploadString += tempStr;
//		    	}
				else{
					uploadString += (tempStr.trim().length > 0 ? jUploadPrefix : "") + tempStr;
				}
				
				uploadString += ",";
				tempStr = null;
			}
			
			propertyInfo = null;
		}
		
		uploadString += updateGu;
		
		for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++, propertyInfo = null){
			propertyInfo = this.propertyInfos[propertyNum];
			
			if( !propertyInfo.isKey || !propertyInfo.isSeqKey )
				continue;
			
			uploadString += ",";
			fieldId = propertyInfo.fieldId;
			oldValue = this.dataSet.getOldValue(rowNum, fieldId);
			
			if( oldValue == null || typeof oldValue == "undefined" )
				oldValue = "";
			
			if( propertyInfo.isNumericType )
				uploadString += ("" + oldValue == "") ? "0" : oldValue;
			else
				uploadString += ("" + oldValue == "") ? "null" : escapeParseString(oldValue);
			
			oldValue = null;
			fieldId = null;
			
			break;
		}
		
		uploadString += ";";
	}
	
	this.seq = oldSeq; // 화면의 시퀀그로 돌려 놓는다.
	
	//메모리 해제
	datas = null;
	
	return uploadString;
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
DataObject.prototype.getDeleteData = function(){
	// functionname : [DataObject.getDeleteData]
	
	var uploadString = "Object:" + this.tableID + ";";
	
	var datas = this.dataSet.data;
	var dataLength = datas.length;
	var propertyInfo = null;
	var updateGu = null;
	var propertyNum = 0;
	var rowNum = 0;
	var seq = 0;
	
	for(rowNum = 0; rowNum < dataLength; rowNum++, updateGu = null){
		seq = rowNum + this.startSeq;
		
		for(propertyNum = 0; propertyNum < this.propertyCount; propertyNum++, propertyInfo = null){
			propertyInfo = this.propertyInfos[propertyNum];
			
			if( ["field", "file"].indexOf(propertyInfo.propertyGu) < 0 )
				continue;
			
			if( propertyInfo.isKey && !propertyInfo.isSeqKey )
				uploadString += this._getDBWritableValue(seq, propertyInfo) + ",";
		}
		uploadString += ";";
	}
	
	//메모리 해제
	datas = null;
	
	return uploadString;
};

//내부함수  JSDOC 안함 
DataObject.prototype._getDBWritableRecord = function(record){
	// functionname : [DataObject._getDBWritableRecord]
	
	var propertyInfo = null;
	var propertyCount = this.propertyCount;
	var updateGu = null;
	var value = null;
	var c = 0;
	
	for(c = 0; c < propertyCount; c++){
		propertyInfo = this.propertyInfos[c];
		value = record[propertyInfo.fieldId];
		
		if( value == "NaN" || value == null || typeof value == "undefined" )
			value = "";
		
		//디폴트값 설정
		if( value == "" )
			value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
		else if( ("" + value) == "-1" && propertyInfo.linkedToListControl ) //콤보,리스트박스, 콤보셀이면서 값이 "-1"인것
			value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
		
		//디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
		if( ("" + value).trim() == "" ){
			if( propertyInfo.isNumericType )
				value = 0;
			else if( !propertyInfo.permitNull )
				value = " ";
		}
	    
//		//파싱문자의 Escaping
//		if( !propertyInfo.isNumericType )
//			value = escapeParseString(value);
		
		//파일인 경우 처리
		if( propertyInfo.propertyGu == "file" && value.length > 0 )
			if( !(value.length > 11 && /^\[.{8}_\}/.test(value)) )
				value = (value.trim().length > 0 ? jUploadPrefix : "") + value;
		
		record[propertyInfo.fieldId] = value;
		
		//이전 값 설정
//		if( !propertyInfo.isKey || !propertyInfo.isSeqKey )
		if( !propertyInfo.isKey && !propertyInfo.isSeqKey )
			continue;
		
		updateGu = record.__STATE__.updateGu;
//		value = record.__STATE__.oldData[propertyInfo.fieldId];
		value = (updateGu == "I") ? record[propertyInfo.fieldId] : record.__STATE__.oldData[propertyInfo.fieldId];
		value = (typeof value == "undefined") ? "" : value;
		
		if( propertyInfo.isNumericType )
			value = (isNaN(value) ? null : (("" + value === "") ? 0 : value));
		
		record[propertyInfo.fieldId + "Old"] = value;
		
		//메모리 해제
		value = null;
		propertyInfo = null;
	}
	
	return record;
};

//내부함수  JSDOC 안함 
DataObject.prototype._getDBWritableKeyValue = function(seq, propertyInfo){
	// functionname : [DataObject._getDBWritableValue]
	
	var rowNum = seq - this.startSeq;
	var value = this.dataSet.data[rowNum][propertyInfo.fieldId];
	
	if( value == "NaN" )
		value = "";
	
	if( value == "" )
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	else if( ("" + value) == "-1" && propertyInfo.linkedToListControl ) //콤보,리스트박스, 콤보셀이면서 값이 "-1"인것
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	
	// 디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
	if( ("" + value).trim() == "" ){
		if( propertyInfo.isNumericType )
			value = "0";
		else if( !propertyInfo.permitNull )
			value = " ";
	}
	
//	// 파싱문자의 Escaping
//	if( !propertyInfo.isNumericType )
//		value = escapeParseString(value);
	
	return value;
};

//내부함수  JSDOC 안함 
DataObject.prototype._getDBWritableValue = function(seq, propertyInfo){
	// functionname : [DataObject._getDBWritableValue]
	
	var rowNum = seq - this.startSeq;
	var value = this.dataSet.data[rowNum][propertyInfo.fieldId];
	
	if( value == "NaN" )
		value = "";
	
	if( value == "" )
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	else if( ("" + value) == "-1" && propertyInfo.linkedToListControl ) //콤보,리스트박스, 콤보셀이면서 값이 "-1"인것
		value = (typeof propertyInfo.defaultValue == "function") ? propertyInfo.defaultValue() : propertyInfo.defaultValue;
	
	// 디폴트값을 대입한 후에도 값이 ""이면 필요한 조치
	if( ("" + value).trim() == "" ){
		if( propertyInfo.isNumericType )
			value = "0";
		else if( !propertyInfo.permitNull )
			value = " ";
	}
	
	// 파싱문자의 Escaping
	if( !propertyInfo.isNumericType )
		value = escapeParseString(value);
	
	return value;
};

//내부함수  JSDOC 안함 
//이발빠진 시퀀스 번호를 정비한다.
//oldSequence Value는 건들지않고 value만 갱신한다
/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
DataObject.prototype.arrangeSeq = function(){
	// functionname : [DataObject.arrangeSeq]
	
	var datas = this.dataSet.data;
	var updateGu = null;
	var rowNum = 0;
	var seq = 0;
	var oldSeq = 0;
	
	for(rowNum = 0; rowNum < this.dataSet.data.length; rowNum++) {
		updateGu = this.getUpdateGu(rowNum + this.startSeq);
//		seq++;

		if( ["D", "X", "E"].indexOf(updateGu) >= 0 ){	// 삭제된데이터
			continue;
		}
		
		if( this.seqKeyFieldId == "" ){
			this.dataSet.setState(rowNum, "tempSeqKey", ++seq);
		}
		else{
			seq++;
			oldSeq = this.dataSet.getOldValue(rowNum, this.seqKeyFieldId);
			
			if( parseInt(1 * oldSeq) != seq ){
				if( updateGu == "X" )
					this.dataSet.setState(rowNum, "updateGu", "I")
				else if( updateGu == "N" )
					this.dataSet.setState(rowNum, "updateGu", "U")
			}
			
			datas[rowNum][this.seqKeyFieldId] = seq;
		}
	}
	
	// 메모리 해제
	datas = null;
	
	return;
};

//내부함수  JSDOC 안함 
/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
DataObject.prototype.sortBySeq = function(){
	// functionname : [DataObject.sortBySeq]
	
	var errorInfo = null;
	var datas = this.dataSet.data;
	
	if( this.seqKeyFieldId == "" ){
		datas.sort(function(a, b){
			return (a.__STATE__.tempSeqKey - b.__STATE__.tempSeqKey);
		});
	}
	else{
		datas.sort(function(a, b){
			return (a[this.seqKeyFieldId] - b[this.seqKeyFieldId]);
		});
	}
	
//	// 사용자 코딩 추가영역을 호출한다
//	if( this.FireEvent && this.hasDataResettedEvent ){
//		errorInfo = {code:0, message:""};
//		
//		this.fncDataResettedEvent(OBJECT_DATA_RESET_BY_SORT, errorInfo);
//		
//		if(errorInfo.code != 0)
//			alert(errorInfo.message);
//	}
	
	return;
};

/**
 * @description 
 *     데이터 객체의 속성정보 개체
 * 
 * @constructor
 * 
 * @param {string} 	 id 	 	- 속성의 고유 아이디 (영문)
 * @param {string} 	 fieldId 	- 속성의 테이블 필드아이디
 * @param {string} 	 name 		- 속성명 (사용자 고유 언어)
 * 
 * @return {PropertyInfo} 		- 생성된 DataObject 개체
 * 
 */
function PropertyInfo(id, fieldId, name){
    this.id = id;
    this.fieldId = fieldId;
    this.name = name;
    this.propertyGu = ""; // field, service, function, file
    this.dataTypeName = "";
    this.isNumericType = false;
    this.isKey = false;
    this.isSeqKey = false;
    this.length = 0;
    this.formula = "";
    this.defaultValue = "";  //eval이 적용되는 산식
    this.permitNull = false;
    this.seqClear = false;
    this.linkedToListControl = false; // 콤보나 리스트, 콤보셀에 링크되었는지 여부
    this.needDirtyCheck = true;       // 사용자의 "화면 동작"과 관련 없는 속성값은 통과 : 변경을 체크하지 않는다
    this.sheetLinked= false;          // 데이터시트에 연결된 프로퍼티인지 구분 객체값 변경체크시 사용
    this.listLinked= false;           // 콤보와  리스트에 연결된 프로퍼티인지 구분  객체값변경체크시 사용
    this.isFillKey = false;
    this.sum = 0.0;                     // 연산에 필요한 값
    this.max = 0.0;
    this.min = 0.0;
};

/*
 *  주요 변경 내용으로 영향도 평가사항 
 *  
 *  0번 seq부터 데이터가 채워진다 .
 *  Easysheet 아닌 기존시트 코드와의 호환성 유지 하여야 한다 
 *  record는 data[rowNum]을 가리킨다 
 *  object는 seq를 사용하고, dataSet은 rowNum을 사용한다.
 *  
 *  3. seq는 0부터 시작하며 기존호환이 필요할 때는 "object.startSeq = 1;" 로 설정한다.
 *     업로드 되는 seq필드는 무조건 1부터 시작된다. seq속성과 seq필드는 다른 개념이다
 *  4. dniMode 추적할 것 
 * */
/**
 * @class TextBox 클래스
 * @constructor TextBox
 * 
 * @param controlId
 *            {String} 해당 컨트롤의 ID를 지정합니다.
 * @param controlName
 *            {String} 해당 컨트롤의 Name을 지정합니다.
 * @param tagObject
 *            {Object} 해당 컨트롤의 태그 객체를 지정합니다.
 * 
 * @return 객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>
 *         만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
 * 
 * @example var wControl = controls["textbox_3"] = new TextBox("textbox_3",
 *          "TextBox_3", document.getElementsByName("textbox_3")[0]);
 *          if(wControl.errorMsg != null){ //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요. }
 *  // 후속코드 생략...
 */
function TextBox(controlId, controlName, tagObject){
	if( tagObject == undefined || tagObject == null )
		return;
	
	// 상속선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	// 속성 선언부
	/**
	 * @description 텍스트 박스 입력값입니다.<br>
	 *              기본값 : 없음<br>
	 *              <br>
	 */
	this.value = "";
	/**
	 * @description 한글입력모드 입니다.<br>
	 *              기본값 : auto<br>
	 *              <br>
	 *              <table width="500"> <caption>imemode Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> auto </td>
	 *              <td> 한글입력 자동모드 입니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> active </td>
	 *              <td> 한글입력 활성화 모드 입니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> inactive </td>
	 *              <td> 한글입력 비활성화 모드 입니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.imemode = "auto";
	/**
	 * @description 표기형식 문자열입니다.<br>
	 *              기본값 : 없음<br>
	 *              <br>
	 */
//	this.dispFormat = (tagObject.getAttribute("displayformat") != undefined && tagObject.getAttribute("displayformat") != null ? tagObject.getAttribute("displayformat") : "");
	this.dispFormat = "";
	/**
	 * @description 표기형식 반올림 플래그 값이다.<br>
	 *              기본값 : 반올림<br>
	 *              <br>
	 */
	this.dispRound = 0; //DISPAY_FORMAT_ROUND(0) / DISPAY_FORMAT_CEIL(1) / DISPAY_FORMAT_FLOOR(2)
	/**
	 * @description 여러행 입력허용 플래그 값이다.<br>
	 *              기본값 : auto<br>
	 *              <br>
	 *              <table width="500"> <caption>multiLine Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 여러행 입력을 허용합니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 여러행 입력을 허용하지 않습니다.<br>
	 *              단일행으로만 입력이 가능합니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.multiLine = false;
	/**
	 * @description 컨트롤에 대한 주석입니다.<br>
	 *              기본값 : 없음<br>
	 *              <br>
	 */
	this.tag = "";
	/**
	 * @description 사용자가 컨트롤에 입력한 값이 확정되었을 때, 컨트롤에 입력된 값을 Key로 하여 데이터를 조회합니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isKeyControl Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 컨트롤 값에 의해 자료를 조회합니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 컨트롤 값에 의해 자료를 조회하지 않습니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isKeyControl  = false;
	/**
	 * @description 조회한 자료에서 Key 필드와 함께 추가로 조건을 주기위해 사용합니다.<br>
	 *              컨트롤에 화면채우기 설정이 되어있다면 Key필드와 컨트롤의 값에 만족하는 데이터를 화면에 채웁니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isFillControl Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 컨트롤에 값을 채웁니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 컨트롤에 값을 채우지 않습니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isFillControl = false;
	/**
	 * @description Clear나 확인버튼을 클릭하여 실행시키고 난 후 후속작업을 위해 컨트롤의 데이터를 비울지 설정합니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isClearControl Variable Value</caption>
	 *              <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> Clear 기능 실행 후 컨트롤의 값을 비웁니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> Clear 기능 실행하더라도 컨트롤의 값을 유지합니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isClearControl = false;
	/**
	 * @description 입력/조회 시트에서 줄추가/삭제시 컨트롤의 값을 비울지 설정합니다.<br>
	 *              줄 단위로 다른 값이 들어갈 데이터에 적용됩니다.<br>
	 *              기본값 : false<br>
	 *              <br>
	 *              <table width="500"> <caption>isSeqClearControl Variable
	 *              Value</caption> <thead>
	 *              <tr>
	 *              <th align="left">Value</th>
	 *              <th align="left">Description</th>
	 *              </tr>
	 *              </thead> <tbody>
	 *              <tr>
	 *              <td> true </td>
	 *              <td> 줄추가/삭제시 컨트롤의 값을 비웁니다. </td>
	 *              </tr>
	 *              <tr>
	 *              <td> false </td>
	 *              <td> 줄추가/삭제를 하더라도 컨트롤의 값은 유지됩니다. </td>
	 *              </tr>
	 *              </table><br>
	 */
	this.isSeqClearControl = false;
	/**
	 * @description 입력값에 대한 검사 조건입니다.<br>
	 *              기본값 : CHECKTYPE.NONE<br>
	 *              <br>
	 */
	this.checkType = 0;
	/**
	 * @description 미결
	 */
	this._isEnterKeyDown = -1;
	/**
	 * @description	미결
	 */
	this.maxLength = 60;
    this.picctlname = "";
	this.subPath = "";
    this.nozip = false;
    this.serverfilename = "";
    
    
    if( this.tagObject ){
    	var value = null;
    	
    	value = this.tagObject.getAttribute("displayformat");
    	this.dispFormat = (typeof value != "undefined" && value != null) ? value : this.dispFormat;
    	value = null;
    	
    	value = this.tagObject.getAttribute("displayround");
    	this.dispRound = (typeof value != "undefined" && value != null) ? value : this.dispRound;
    	value = null;
    	
    	value = this.tagObject.getAttribute("tag");
    	this.tag = (typeof value != "undefined" && value != null) ? value : "";
    	value = null;
    	
    	value = this.tagObject.getAttribute("checktype");
    	this.checkType = (typeof value != "undefined" && value != null) ? parseInt(value) : this.checkType;
    	value = null;
    	
    	value = this.tagObject.getAttribute("maxlength");
    	this.maxLength = (typeof value != "undefined" && value != null) ? (value * 1) : this.maxLength;
    	value = null;
    	
    	//maxLength 가 0 인 경우, 표시형식이 있다면 표시형식 자리수만큼 설정한다.
    	if( this.maxLength == 0 && this.dispFormat.length > 0 ){
    		this.maxLength = this.dispFormat.length;
    		this.tagObject.setAttribute("maxlength", this.maxLength);
    	}
    	
    	//자동완성 기능 끄기
    	this.tagObject.setAttribute("autocomplete", "off");
    	
    	this.isKeyControl = (tagObject.getAttribute("iskeycontrol") == "true");
    	this.isFillControl = (tagObject.getAttribute("isfillcontrol") == "true");
    	this.isClearControl = (tagObject.getAttribute("isclearcontrol") == "true");
    	this.isSeqClearControl = (tagObject.getAttribute("isseqclearcontrol") == "true");
	}
	
	tagObject.value = "";
	
//	this.tagObject.onkeypress = text_KeyPress;
//	this.tagObject.onkeydown = text_KeyDown;
//	this.tagObject.onkeyup = text_KeyUp;
//	this.tagObject.onfocus = text_Focus;
//	this.tagObject.onblur = text_Blur;
//	this.tagObject.onclick = text_Click;
//	this.tagObject.ondblclick = text_DoubleClick;

	// 이벤트 선언부
	setEventHandler(tagObject, "keypress", text_KeyPress);
	setEventHandler(tagObject, "keydown", text_KeyDown);
	setEventHandler(tagObject, "keyup", text_KeyUp);
	setEventHandler(tagObject, "focus", text_Focus);
	setEventHandler(tagObject, "blur", text_Blur);
	setEventHandler(tagObject, "click", text_Click);
	setEventHandler(tagObject, "dblclick", text_DoubleClick);
	
	// 사용자 이벤트
	this.hasChangeEvent = false;	this.fncChangeEvent = null;
	this.hasBlurEvent = false;		this.fncBlurEvent = null;
	this.hasFocusEvent = false;		this.fncFocusEvent = null;
	this.hasKeyUpEvent = false;		this.fncKeyUpEvent = null;
	this.hasKeyDownEvent = false;	this.fncKeyDownEvent = null;
	
	
	
	if( this.controlId.length > 0 ){
		this.hasChangeEvent = (typeof self[this.controlId + "_onchange"] == "function");
		if( this.hasChangeEvent ){
			this.fncChangeEvent = new Function("return function(){ return " + this.controlId + "_onchange(); }")();
		}
		
		this.hasBlurEvent = (typeof self[this.controlId + "_onblur"] == "function");
		if( this.hasBlurEvent ){
			this.fncBlurEvent = new Function("return function(){ return " + this.controlId + "_onblur(); }")();
		}
		
		this.hasFocusEvent = (typeof self[this.controlId + "_onfocus"] == "function");
		if( this.hasFocusEvent ){
			this.fncFocusEvent = new Function("return function(){ return " + this.controlId + "_onfocus(); }")();
		}

		this.hasKeyUpEvent = (typeof self[this.controlId + "_onkeyup"] == "function");
		if( this.hasKeyUpEvent ){
			this.fncKeyUpEvent = new Function("return function(keyCode, shiftDown, ctrlDown, altDown){ return " + this.controlId + "_onkeyup(keyCode, shiftDown, ctrlDown, altDown); }")();
		}		
		
		this.hasKeyDownEvent = (typeof self[this.controlId + "_onkeydown"] == "function");
		if( this.hasKeyDownEvent ){
			this.fncKeyDownEvent = new Function("return function(keyCode, shiftDown, ctrlDown, altDown){ return " + this.controlId + "_onkeydown(keyCode, shiftDown, ctrlDown, altDown); }")();
		}		
	}
};

TextBox.prototype = new ControlBase();	// 의미없음 코딩 편의기능을 활용하기 위함

/**
 * @description 텍스트박스 컨트롤의 ID를 반환합니다.
 * @param       em {Object} 텍스트박스 컨트롤 객체를 입력합니다.
 * @return      텍스트박스 컨트롤의 ID를 반환합니다.<br>
 *              만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl =
 *              searchControl_Text(document.getElementsByName("textbox_3")[0])
 *              if(wControl == null){ //옵션 버튼 컨트롤을 찾는데 실패하였습니다. } if(wControl ==
 *              false){ //텍스트박스으로 포커스를 지정합니다. }
 *  // 후속코드 생략...
 */
function searchControl_Text(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while(pEm.parentNode && !pEm.className.startsWith("TextBox"))
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("TextBox") )
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "TextBox"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "TextBox" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("TextBox"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("TextBox") )
			wReturn = getControlById(pEm.id);
	}
	
	//메모리 해제
	image = null;
	pEm = null;
	
	return wReturn;
};

/* 포커스 주기*/
/**
 * @description 링크 컨트롤에 포커스를 지정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @return      포커스 지정을 성공한다면 true를 반환합니다.<br>
 *              만약 에러가 발생한다면 false를 반환합니다.
 * @example     var wControl =
 *              searchControl_Text(document.getElementsByName("textbox_3")[0])
 *              if(wControl == null){ //텍스트박스 컨트롤을 찾는데 실패하였습니다. } if(wControl ==
 *              false){ //텍스트박스으로 포커스를 지정합니다. } //텍스트박스로 포커스를 지정합니다. if(
 *              txtbox.focus() == false ){ //focus 함수 동작 실패하였습니다. 에러처리 코드를 입력해주세요.
 *              //focus 함수 실패하거나 에러 발생시 focus 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *              wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.focus = function(){
	// functionname : [TextBox.focus]
	
	var wReturn = true;
	
	try{
		this.tagObject.focus();
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};

/* 한글지원*/
/**
 * @description 텍스트박스의 한글입력모드를 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       imemode {String} auto : 자동모드 / active : 활성화모드 / inactive : 비활성화모드
 * @return      한글모드입력 설정을 성공하면 true를 반환합니다. 만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //한글입력모드를 비활성화 합니다. if(
 *              wControl.setIMEMode("inactive") == false ) //setIMEMode 함수 동작
 *              실패하였습니다. 에러처리 코드를 입력해주세요. //setIMEMode 함수 실패하거나 에러 발생시 focus 메소드는
 *              false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setIMEMode = function(imemode){
	// functionname : [TextBox.setIMEMode]
	
	this.imemode = imemode;
	this.tagObject.style.imeMode = imemode; //( "active" : "auto" : "inactive");
};

/**
 * @description 텍스트박스 컨트롤의 체크조건에 따라 한글입력모드를 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       checkType  {Constant} ControlBase 클래스의 CHECKTYPE 상수를 참조하십시오.
 * @param       callAction
 * @return      검사조건 설정을 성공하면 true를 반환합니다. 만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //한글입력모드를 비활성화 합니다. if(
 *              wControl.setCheckType(this.CHECKTYPE.IMEMODE, ??) == false )
 *              //setCheckType 함수 동작 실패하였습니다. 에러처리 코드를 입력해주세요. //setCheckType 함수
 *              실패하거나 에러 발생시 setCheckType 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *              wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setCheckType = function(checkType, callAction){
	// functionname : [TextBox.setCheckType]
	
	this.checkType = checkType;
	
	if( this.checkType == this.CHECKTYPE.IMEMODE )
		this.setIMEMode("active");
	else if( this.checkType == this.CHECKTYPE.NONE )
		this.setIMEMode("auto");
	else
		this.setIMEMode("inactive");
	
	// 체크동작
	if( callAction ){
		/* */
	}
	
	return;
};

/**
 * @description 텍스트박스에 데이터를 표시할 형식 문자열을 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       dispFormat  {String} 텍스트박스에 데이터를 표시할 형식 문자열을 입력합니다.
 * @param       callAction
 * @return      형식문자열을 설정한다면 true 를 반환합니다. <br>
 *              만약 에러가 발생한다면 false를 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박스에 '####-##-##'로 표시할 형식
 *              문자열을 설정합니다. if( wControl.setDispFormat("####-##-##", ??) == false){
 *              //표시문자열 설정을 실패하였습니다. 에러처리 코드를 입력해주세요. //setDispFormat 함수 실패하거나 에러
 *              발생시 setDispFormat 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *              wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setDispFormat = function(dispFormat, callAction){
	// functionname : [TextBox.setDispFormat]
	
	this.dispFormat = dispFormat;
	
	if( this.dispFormat.length > 0 )
		this.tagObject.value = mask(this.value, this.dispFormat);
	else
		this.tagObject.value = this.value;
	
	// 체크동작
	if( callAction ){
		/* */
	}
	
	return;
};

/*
TextBox.prototype.setDispRound = function(round){
	// functionname : [TextBox.setDispRound]
	
	this.dispRound = round;
	
	var value = this.value;
	
	if( this.dispFormat.length > 0 ){
		
		this.tagObject.value = mask(value, this.dispFormat);
	}
	else{
		
		this.tagObject.value = value;
	}
	
	return;
};
*/

/**
 * @description 텍스트박스 입력값의 다행입력허용을 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       multiLine {Boolean} true : 다행입력을 허용합니다. / false : 다행입력을 허용안합니다.
 * @return      다행입력허용 설정을 성공하면 true를 반환합니다.<br>
 *              만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박그 컨트롤에 다행입력을 허용합니다. if(
 *              wControl.setMultiLine(true) == false ){ //다행입력 설정을 실패하였습니다. 에러처리 코드를
 *              입력해주세요. //setMultiLine 함수 실패하거나 에러 발생시 setMultiLine 메소드는 false 를
 *              반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setMultiLine = function(multiLine){
	// functionname : [TextBox.setMultiLine]
	
	this.multiLine = multiLine;
};

/**
 * @description 텍스트박스에 데이터를 입력합니다.<br>
 *              만약 표기문자열을 설정하였다면 표기문자열의 형식에 맞춰 입력됩니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       value {String} 텍스트박스에 입력할 데이터입니다.
 * @return      데이터입력을 성공하면 true를 반환합니다.<br>
 *              만약 에러가 발생할 경우 false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박스에 '위너소프트'가 입력됩니다. if(
 *              wControl.setValue("위너소프트") == false ){ //텍스트박스에 데이터를 입력하는데 실패하였습니다.
 *              에러처리 코드를 입력해주세요. //setValue 함수 실패하거나 에러 발생시 setValue 메소드는 false 를
 *              반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setValue = function(value){
	// functionname : [TextBox.setValue]
	
	var oldValue = this.value;
	var result = true;
	
	if( typeof value == "undefined" || value == null ) value = "";
	else if( typeof value != "string" ) value = "" + value;
	
	if( typeof oldValue == "undefined" || oldValue == null ) oldValue = "";
	else if( typeof oldValue != "string" ) oldValue = "" + oldValue;
	
	if( (!this.multiLine && oldValue == value)
		|| (this.multiLine && oldValue.replace(/\r/gi, "") == value.replace(/\r/gi, ""))
	){
		if( this.dispFormat.length > 0 ) this.tagObject.value = mask(value, this.dispFormat, this.dispRound);
		return true;
	}
	else{
		this.value = value;
		
		/*
		// 데이터 가저오기
		if( this.isKeyControl ){
			if( this.isFillControl )
				mustFillScreenAfterLoad = true;
			
			objectManager.fillkeyFieldValue = this.value;
			objectManager.loadData();
		}
		// 데이터 채우기
		if( this.value != "" ){
			if( !this.isKeyControl && this.isFillControl )
				objectManager.fillData();
		}
		*/
		
		// 체크조건
		if( !this.checkError() ){
			this.value = oldValue;
			this.tagObject.focus();
			return false;
		}
		
		// dataset 갱신 기능
		if( typeof ControlBase.prototype._UpdateDataset != "undefined" ){
			result = this._UpdateDataset();
			
			if( typeof result == "boolean" && !result ){
				//컨트롤 값 복구
				this.value = oldValue;
				this.tagObject.value = (this.dispFormat.length > 0) ? mask(oldValue, this.dispFormat, this.dispRound) : oldValue;
				this.tagObject.focus();
				return false;
			}
		}
		
		//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
		if( !this.passEvent ){
			// 사용자 코딩 추가영역을 호출한다
			if( this.hasChangeEvent ){
				result = this.fncChangeEvent();
				
				if( (typeof result == "boolean" && !result) || (typeof result == "undefined") ){
					// 컨트롤 값 복구
					this.value = oldValue;
					// dataset 갱신 기능
					if( typeof ControlBase.prototype._UpdateDataset != "undefined" ) this._UpdateDataset();
					//
					this.tagObject.value = (this.dispFormat.length > 0) ? mask(oldValue, this.dispFormat, this.dispRound) : oldValue;
					this.tagObject.focus();
					return false;
				}
			}
		}
		
		// 후속동작
		if( result ) this.tagObject.value = (this.dispFormat.length > 0) ? mask(this.value, this.dispFormat, this.dispRound) : this.value; 
	}
	
	
	return result;
};

/**
 * @description 텍스트박스에 데이터를 입력합니다.<br>
 *              만약 표기문자열을 설정하였더라도 표기문자열 형식에 맞춰 입력되지 않습니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param       value {String} 텍스트박스에 입력할 데이터입니다.
 * @return      데이터입력을 성공하면 true를 반환합니다. 만약 에러가 발생할 경우, false 반환합니다.
 * @example     var wControl = controls["textbox_3"]; //텍스트박스에 '위너소프트'가 입력됩니다. if(
 *              wControl.setCaption("위너소프트") == false ){ //텍스트박스에 데이터를 입력하는데
 *              실패하였습니다. 에러처리 코드를 입력해주세요. //setCaption 함수 실패하거나 에러 발생시 setCaption
 *              메소드는 false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
TextBox.prototype.setCaption = function(caption){
	// functionname : [TextBox.setCaption]
	
	//캡션 파라메터의 값이 없는 경우 빈문자열로 세팅하여 캡션을 지움
	if( typeof caption == "undefined" || caption == null ) caption = "";
	
	//캡션 설정
	this.caption = "" + caption;
	//캡션 텍스트박스 태그 객체에 설정
	this.tagObject.setAttribute("placeholder", this.caption);
};

/**
 * @description	미결
 * @param 		{String} 	 maxLength
 * @return		{undefined}
 * @example		미결
 */
TextBox.prototype.setMaxLength = function(maxLength){
	// functionname : [TextBox.setMaxLength]
	
	this.maxLength = maxLength;
	
	if( this.tagObject ){
		this.tagObject.setAttribute("maxlength", maxLength);
	}
};

/**
 * @name	 	TextBox#text_KeyUp
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_KeyUp(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var checkEvent = false;
	var result = true;

	//입력된 키 정보
	var wKeyCode = (e.which) ? e.which : e.keyCode;	// 키 코드
	var wCtrlDown = e.ctrlKey || e.metaKey;			// 컨트롤 // 커맨드(Mac지원)
	var wAltDown = e.altKey;						// 알트
	var wShiftDown = getShiftKeyPressed(e);			// 쉬프트

	//브라우저 버전이 IE8 이하 버전인 경우, 태그의 maxlength 속성을 지원하지 않으므로 스크립트에서 처리(IE 7, 8)
	if( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && (navigator.appVersion.indexOf("MSIE 7") > 0 || navigator.appVersion.indexOf("MSIE 8") > 0) ){
		if( !control.multiLine && control.maxLength * 1 > 0 && (em.value + "").length > control.maxLength * 1 && (wKeyCode != 9 || wKeyCode != 13) ){
			control = null; em = null;
			return false;
		}
	}

	/*
	if (control.dispFormat.length > 0){
		var wString = em.value.replace(/\-/g,"").replace(/\,/g,"").replace(/:/g,"");
		
		wCalculator.CalcuratedResult("Format(\"" + control.dispFormat + "\", \"" + wString + "\")")
		em.value = maskIn(wString, control.dispFormat)
	}
	*/
	
	var result = true;
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if (control.hasKeyUpEvent){
			result = control.fncKeyUpEvent(wKeyCode, wShiftDown, wCtrlDown, wAltDown);
		}
	}
	
	//메모리 해제
	control = null; em = null;
	
	return result;
};

/**
 * @name 		TextBox#text_KeyPress
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_KeyPress(e)
{
	e = window.event || e;
	
	var wKeyCode = (e.which ? e.which : e.keyCode);
	
	if( arrKeyCodes.indexOf(wKeyCode) >= 0 )
		return true;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	
	//브라우저 버전이 IE8 이하 버전인 경우, 태그의 maxlength 속성을 지원하지 않으므로 스크립트에서 처리(IE 7, 8)
	if( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && (navigator.appVersion.indexOf("MSIE 7") > 0 || navigator.appVersion.indexOf("MSIE 8") > 0) ){
		if( !control.multiLine && control.maxLength * 1 > 0 && (em.value + "").length > control.maxLength * 1 && (wKeyCode != 9 || wKeyCode != 13) ){
			control = null; em = null;
			return false;
		}
	}
	
	if( wKeyCode >= 48 && wKeyCode <= 57 ){	// 숫자코드
		// 모든경우에 OK
	}
	else if( control.checkType == control.CHECKTYPE.YMD
			|| control.checkType == control.CHECKTYPE.YM
			|| control.checkType == control.CHECKTYPE.YYYY
			|| control.checkType == control.CHECKTYPE.RESINUM
			|| control.checkType == control.CHECKTYPE.TAXNUM
			|| control.checkType == control.CHECKTYPE.POSTNUM
			|| control.checkType == control.CHECKTYPE.BARCODE
	){
		control = null; em = null;
		stopEvent(e); return true;
	}
	else if( control.checkType == control.CHECKTYPE.AMOUNT ){
		if( wKeyCode == 45 || wKeyCode == 46 ){	// 45 : "-", 46 : "."
			if( ("" + em.value).length != 0 ){
				control = null; em = null;
				stopEvent(e); return true;
			}
		}
		else{
			control = null; em = null;
			stopEvent(e); return true;
		}
	}
	else if( control.checkType == control.CHECKTYPE.NUMBER ){
		if( wKeyCode == 45 || wKeyCode == 46 ){	// 45 : "-", 46 : "."
			/* */
		}
		else{
			control = null; em = null;
			stopEvent(e); return true;
		}
	}
	
	stopPropagation(e);
	
	//메모리 해제
	control = null; em = null;
	
	return true;
}

/**
 * @name 		TextBox#text_KeyDown
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_KeyDown(e)
{
	//F5새로고침 방지 추가
	if( e.keyCode == 116 ){
		if( typeof e.preventDefault == "function" )
			e.preventDefault();
		else
			e.returnValue = false; // for IE
		
		return false;
	}
	
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var checkEvent = true;
	var result = true;

	//입력된 키 정보
	var wKeyCode = (e.which) ? e.which : e.keyCode;	// 키 코드
	var wCtrlDown = e.ctrlKey || e.metaKey;			// 컨트롤 // 커맨드(Mac지원)
	var wAltDown = e.altKey;						// 알트
	var wShiftDown = getShiftKeyPressed(e);			// 쉬프트

	//브라우저 버전이 IE8 이하 버전인 경우, 태그의 maxlength 속성을 지원하지 않으므로 스크립트에서 처리(IE 7, 8)
	if( navigator.appName.toLowerCase().indexOf("microsoft") >= 0 && (navigator.appVersion.indexOf("MSIE 7") > 0 || navigator.appVersion.indexOf("MSIE 8") > 0) ){
		if( !control.multiLine && control.maxLength * 1 > 0 && (em.value + "").length > control.maxLength * 1 && (wKeyCode != 9 || wKeyCode != 13) ){
			control = null; em = null;
			return false;
		}
	}
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		if (control.hasKeyDownEvent){
			result = control.fncKeyDownEvent(wKeyCode, wShiftDown, wCtrlDown, wAltDown);
			if( typeof result == "boolean" && result == false){
				stopEvent(e);
				control = null; em = null;
				return false;
			}		
		}
	}

	//키 동작
	if( wKeyCode == 9 ){
		if( wShiftDown ){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
		else{
			stopEvent(e);
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
	}
	else if( wKeyCode == 13 ){
		if( !control.multiLine ){
			stopEvent(e);
			control._isEnterKeyDown = wKeyCode;
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
	}
	
	stopPropagation(e);
	
	// e.returnValue = true;
	
	//메모리 해제
	control = null; em = null;
	
	return true;
};

/**
 * @name 		TextBox#text_Focus
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_Focus(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var checkEvent = false;
	var result = true;

	em.value = control.value;

	// 포커스를 받은 문장 전체를 수정할 수 있게 한다.
	// control.value는 포멧이 들어가지 않은 값이다
	if( !control.multiLine ){
		em.focus();
		em.select();
	}
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if (control.hasFocusEvent){
			control.fncFocusEvent();
		}
	}
	
	//메모리 해제
	control = null; em = null;
	
	return result;
};

/**
 * @name 		TextBox#text_Blur
 * @event
 * @return		{boolean}
 * @description	미결
 */
function text_Blur(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);
	var displayFormat = control.dispFormat;
	var displayRound = control.dispRound;
	
	var checkEvent = false;
	var result = true;
	
	var wString = "";
	var wErrMsg = "";
	
	var oldValue = control.value;	var oVal = "" + oldValue;
	var newValue = em.value;		var nVal = "" + newValue;
	
	if( displayFormat.length > 0 ){
		if( displayFormat.indexOf("-") >= 0 )
			newValue = newValue.replace(/-/g,"");
		if( displayFormat.indexOf(",") >= 0 )
			newValue = newValue.replace(/,/g,"");
		if( displayFormat.indexOf(":") >= 0 )
			newValue = newValue.replace(/:/g,"");
		/*
		if( control.dispFormat.indexOf("/") >= 0 )
			newValue = newValue.replace(/\//g,"");
		*/
		if( displayFormat.indexOf("YY") != -1
			|| displayFormat.indexOf("MM") != -1
			|| displayFormat.indexOf("DD") != -1
			|| displayFormat.indexOf("Hh") != -1
			|| displayFormat.indexOf("Nn") != -1
			|| displayFormat.indexOf("Ss") != -1
			|| displayFormat.indexOf("mm") != -1
			|| displayFormat.indexOf("dd") != -1
			|| displayFormat.indexOf("hh") != -1
			|| displayFormat.indexOf("nn") != -1
			|| displayFormat.indexOf("ss") != -1
			|| displayFormat.indexOf("WK") != -1
			|| displayFormat.indexOf("wk") != -1
		){
			newValue = restoreDateFormatValue(newValue, displayFormat);
		}
	}
	
	control.value = newValue;
	
	if( (!control.multiLine && oVal == nVal)
		|| (control.multiLine && oVal.replace(/\r/gi, "") == nVal.replace(/\r/gi, ""))
	){
		em.value = (displayFormat.length > 0) ? mask(newValue, displayFormat, displayRound) : newValue;
	}
	else{
		if( !control.checkError() ){
			control.value = oldValue;
			em.focus();
			return false;
		}
	
		// dataset 갱신 기능
		if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
			result = control._UpdateDataset();
			
			if( typeof result == "boolean" && !result ){
				//컨트롤 값 복구
				control.value = oldValue;
				em.value = (displayFormat.length > 0) ? mask(oldValue, displayFormat, displayRound) : oldValue;
				em.focus();
				return false;
			}
		}
		
		//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
		if( !control.passEvent ){
			// 사용자 코딩 추가영역을 호출한다
			if( control.hasChangeEvent ){
				result = control.fncChangeEvent();
				//입력된 키 정보 복구
				control._isEnterKeyDown = -1;	
				
				if( (typeof result == "boolean" && !result)
					|| (typeof result == "undefined")
				){
					//컨트롤 값 복구
					control.value = oldValue;
					em.value = (displayFormat.length > 0) ? mask(oldValue, displayFormat, displayRound) : oldValue;
					// dataset 갱신 기능
					if( typeof ControlBase.prototype._UpdateDataset != "undefined" ) control._UpdateDataset();
					//
					em.focus();
					return false;
				}
			}
		}
		
		if( em.value.trim().length > 0 && displayFormat.length > 0 ){
			em.value = mask(newValue, displayFormat, displayRound);
		}
	}
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !control.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( control.hasBlurEvent ){
			result = control.fncBlurEvent();
			
			if( typeof result == "boolean" && result === false ){
				em.focus();
				return false;
			}
		}
	}
	
	return true;
};

/**
 * @name 		TextBox#text_Click
 * @event
 * @description	미결
 */
function text_Click(e)
{
	e = window.event || e;
//	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
//	var control = searchControl_Text(em);
};

/**
 * @name 		TextBox#text_DoubleClick
 * @event
 * @description	미결
 */
function text_DoubleClick(e)
{
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Text(em);

	if( control.checkType == control.CHECKTYPE.YMD ){
		try{
			//showCalendar(em);
			popUpCalendar(em, em, 'yyyymmdd', '1');
		} catch(e){}
	}
	else if( control.checkType == control.CHECKTYPE.YM ){
		try{
			//popUpMonthCalendar(em);
			popUpCalendar(em,em,'yyyymm','2');
		} catch(e){}
	}
	else if( control.checkType == control.CHECKTYPE.YYYY ){
		try{
			//popUpYear(em);
			popUpCalendar(em,em,'yyyy','2');
		} catch(e){}
	}
	
	//메모리 해제
	control = null; em = null;
};
/**
 * @class 콤보박스를 만들어주는 클래스
 * @contructor ComboBox Class생성자 함수
 * @param controlId	 	해당 컨트롤의 ID를 지정합니다.
 * @param controlName	해당 컨트롤의 Name을 지정합니다.
 * @param tagObject		해당 컨트롤의 태그 객체를 지정합니다.
 * @return 반환값 없음, 에러발생시 undefined 를반환함
 * @example var wControl = controls["ComboBox_1"]
 * 			if(wContorl.errMsg !=null){
 * 		//객체 생성에 실패하였습니다. 에러처리 코드를 입력해주세요.
 *  }
 *  	//후속코드생략..
 */
function ComboBox(controlId, controlName, tagObject){ 
	// 상속 선언부
	this.base = ControlBase;              			//부모클래스 지정
	this.base(controlId, controlName, tagObject);   //부모클래스 생성자호출
	
	// 상수 선언부
	
	// 속성 선언부
//	this.value = (this.tagObject.options.length > 0) ? this.tagObject.options[0].value : -1;
//	this.text = (this.tagObject.options.length > 0) ? this.tagObject.options[0].text : "";
	this.value = "";
	this.text = "";
	this.index = -1;
	
	this.reservedValue = "";
	this.reservedText = "";
	
	this.haveFixedTopItem = false;
	this.topItemValue = null;
	this.topItemText = null;
	
	this.valueField = "";
	this.textField = "";
	
	
	//2019-04-11 jaeik Safari브라우저 일 경우 select box 높이 재설정
	if (BrowserDetect.browser == "Safari") {
		this.tagObject.style.height = getComputedStyleSize(tagObject).height.replace("px","") - 12 + "px";
		this.tagObject.style.lineHeight = getComputedStyleSize(tagObject).height.replace("px","") - 12 + "px";
	}
	
	this.isKeyControl  = (tagObject.getAttribute("iskeycontrol")  == "true");
	this.isFillControl = (tagObject.getAttribute("isfillcontrol")  == "true");
	this.isClearControl = (tagObject.getAttribute("isclearcontrol")  == "true");
	this.isSeqClearControl = (tagObject.getAttribute("isseqclearcontrol")  == "true");
	this.checkType = parseInt(tagObject.getAttribute("checktype"));
	this.selectWhenOnlyItem= false;// 속성: selectonerecord인경우 처리
	this.stateClear = false;
	
	/**
	 * @description 미결
	 */
	this.editable = false;
	
	if( this.tagObject ){
		this.tagObject.selectedIndex = -1;
		
		//상단항목추가 설정 체크
		var options = this.tagObject.options;
		if( options.length > 0 ){
			var fixedTopItem = this.tagObject.options[0];
			if( (fixedTopItem.getAttribute("fixedtopitem") === "true") ){
				this.haveFixedTopItem = true;
				this.topItemValue = fixedTopItem.value;
				this.topItemText = fixedTopItem.text;
			}
			fixedTopItem = null;
		}
		options = null;
	}
	
	// 자체 이벤트 선언부 
	this.hasChangeEvent = false;	this.fncChangeEvent = null;
	this.hasFocusEvent = false;		this.fncFocusEvent = null;
	this.hasBlurEvent = false;		this.fncBlurEvent = null;
	this.hasClearEvent = false;		this.fncClearEvent = null;
	/**
	 *  @name           ComboBox#fncChangeEvent
	 *  @event
	 *  @description    ComboBox의 값이바뀌면 발생하는 이벤트 메소드입니다.
	 */
	this.hasChangeEvent = (typeof self[this.controlId + "_onchange"] != "undefined");
	if (this.hasChangeEvent){
		this.fncChangeEvent = new Function("return function () { return " + this.controlId + "_onchange(); }")();
	}
	/**
	 *  @name           ComboBox#fncFocusEvent
	 *  @event
	 *  @description    ComboBox의 포커스가 지정되면 발생하는 이벤트 메소드 입니다.
	 */
	this.hasFocusEvent = (typeof self[this.controlId + "_onfocus"] != "undefined");
	if (this.hasFocusEvent){
		this.fncFocusEvent = new Function("return function () { return " + this.controlId + "_onfocus(); }")();
	}
	/**
	 *  @name           ComboBox#fncBlurEvent
	 *  @event
	 *  @description    ComboBox의 포커스가 해제되면 발생하는 이벤트 메소드입니다.
	 */
	this.hasBlurEvent = (typeof self[this.controlId + "_onblur"] != "undefined");
	if (this.hasBlurEvent){
		this.fncBlurEvent = new Function("return function () { return " + this.controlId + "_onblur(); }")();
	}
	/**
	 *  @name           ComboBox#fncClearEvent
	 *  @event
	 *  @description    ComboBox의 항목이 비워졌을 때 발생하는 이벤트 메소드입니다.
	 */
	this.hasClearEvent = (typeof self[this.controlId + "_onclear"] != "undefined");
	if (this.hasClearEvent){
		this.fncClearEvent = new Function("return function () { return " + this.controlId + "_onclear(); }")();
	}
	
	// 이벤트 선언부
	setEventHandler(this.tagObject, "keydown",   combo_KeyDown);
	setEventHandler(this.tagObject, "change",    combo_Change);
	setEventHandler(this.tagObject, "focus",     combo_Focus);
	setEventHandler(this.tagObject, "blur",      combo_Blur);
	setEventHandler(this.tagObject, "mouseover", combo_MouseOver);
	
	// Edit 설정부
	/**
	 * @description 미정
	 */
	this.selectedItemNum = -1;
	
	makeComboEditControl();
    
	this.comboDiv = null;
	//
	if( BrowserDetect.browser == "Explorer"
		&& !isNaN(parseFloat(BrowserDetect.version))
		&& parseFloat(BrowserDetect.version) < 9
	){
		this.comboDiv = document.createElement(
				"<div id='_$_ComboDiv_' name='_$_ComboDiv_' class='dropdownlist' "
				+ "style='position:absolute; left:-10000px; width: 10px;height:240px; display:none; font-size: 13.3333px;'/></div>"
		);
	}
	else{
		var div = this.comboDiv = document.createElement("div");
		div.id				= "_$_ComboDiv_";
		div.name			= "_$_ComboDiv_";
		div.className		= "dropdownlist";
		div.style.display	= "none";
		div.style.position	= "absolute";
		div.style.left		= "-10000px";
		div.style.width		= "10px";
		div.style.height	= "240px";
		div.style.fontSize	= "12px";
		div = null;
	}
	// 콤보 리스트가 서버에서 조회되어 채워진 경우
	var options = this.tagObject.options;
	var optCnt = options.length;
	if( this.comboDiv && optCnt > 0){
		var option = null;
		var optStr = "";
		var i = 0;
		
		for(i = 0; i < optCnt; i++, option = null){
			option = options[i];
			optStr += "<a onmousedown='sel(event);'>" + option.text + "</a>\r\n";
		}
		
		this.comboDiv.innerHTML = optStr;
		
		optStr = null;
		options = null;
	}
};

ComboBox.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함
/**
 * @description 태그객체에서 콤보박스의 ID를 찾아 반환합니다. 
 * @param em {Object} ID를 찾을 element 입니다.
 * @return 태그객체의 ID를 반환합니다.,에러발생시 undefined를 반환합니다.
 * 
 */
function searchControl_ComboBox(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var className = null;
	var wReturn = null;
	
//	while (pEm.parentNode && !pEm.className.startsWith("ComboBox")) 
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("ComboBox") ){
//		wReturn = getControlById(pEm.id);
//	}
	
	while(pEm.parentNode && pEm.tagName != "body" && image !== "ComboBox"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "ComboBox" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("ComboBox"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("ComboBox") )
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/**
 * @description 선택된 ComboBox에 focus를 줍니다.
 * @return {boolean} 선택되었다면 true 그렇지않다면 false를 반환합니다
 * @example constorls["ComboBox_1"].focus();
 */
/* 포커스 주기*/
ComboBox.prototype.focus = function(){ 	
	// functionname : [ComboBox.focus]
	var wReturn = true;
	
	try{
		if( this.editable ){
			// 편집콘트롤을 세팅 
			setComboEditControl(this);
			self["_$_ComboEdit_"].focus();
		}
		else{
			this.tagObject.focus();
		}
		
		// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
		if( !this.passEvent ){
			// 사용자 코딩 추가영역을 호출한다
			if( this.hasFocusEvent ){
				var result = this.fncFocusEvent();
				if( typeof result == "boolean" )
					return result;
			}
		}
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};

/**
 * @description  ComboBox에 내용을 채웁니다.
 * @param value {Object} option으로 들어올 값
 * @return {boolean} 내용이 성공적으로 채워졌으면 true, 실패했다면 false를 반환합니다.
 * @example controls["ComboBox_1"].setValue(value);
 */
ComboBox.prototype.setValue = function(value){ 	
	// functionname : [ComboBox.setValue]
	
	if( this.listCount() == 0 ) {
		this.reservedValue = value;
		return false;
	}
	
//	if( parseInt(1 * value) == 0 && !this.haveZeroValue() )
	if( (1 * value) == 0 && !this.haveZeroValue() )
		value = "";
	
	var oldValue = this.value;
	var oldText = this.text;
	var oldIndex = this.index;
	
	//seq 변경시 값은 바뀌지 않아도 콘트롤의 상태는 바꾸어줄 상황이 있다
	var selectedIndex = this.tagObject.selectedIndex;
	var control_value = (selectedIndex == -1 ? "" : ("" + this.tagObject.options[selectedIndex].value));
	var control_text = (selectedIndex == -1 ? "" : ("" + this.tagObject.options[selectedIndex].text));
	
	if( (("" + oldValue == "" + value) && ("" + control_value == "" + value))
		&& (("" + oldText == "" + this.topItemText) && ("" + control_text == "" + this.topItemText) && (this.topItemText !== ""))
	){
		//메모리 해제
		control_text = null; controlvalue = null;
		oldValue = null; oldText = null;
		return true;
	}
	
	var wOptions = null;
	var found = false;
	
	if( value === "" && this.topItemValue !== "" ){
		this.value = "";
		this.text = "";
		this.index = -1;
		this.tagObject.selectedIndex = this.index;
		found = true;
	}
	else{
		wOptions = this.tagObject.options;
		
		this.stateClear = true;
		for(var i = 0; i < wOptions.length; i++){
			if( wOptions[i].value == value ){
				wOptions[i].selected = true;
				this.value = value;
				this.text = wOptions[i].text;
				this.index = i;
				found = true;
				break;
			}
		}
		this.stateClear = false;
		
		wOptions = null;
	}
	
	if( !found ){
		this.reservedValue = value;
	    /**
	     * @description    콤보박스의 선택 값을 나타냅니다.<br>
        *                   기본값 : -1 (선택 안함)<br><br>
        *                   <table width="500">
        *                       <caption>value Variable Value</caption>
        *                       <thead>
        *                 	        <tr>
        *                 			    <th align="left">Value</th>
        *                 			    <th align="left">Description</th>
        *                 		    </tr><br>
	    */
		this.value = "";
	    /**
	     * @description    콤보박스의 보여질 문자를 나타냅니다.<br>
        *                   기본값 : null <br><br>
        *                   <table width="500">
        *                       <caption>text Variable Value</caption>
        *                       <thead>
        *                 	        <tr>
        *                 			    <th align="left">Value</th>
        *                 			    <th align="left">Description</th>
        *                 		    </tr>
        *                 	    </thead>
        *                   <br>
	    */
		this.text = "";
	    /**
	     * @description 미결
	     */
		this.index = -1;
		this.tagObject.selectedIndex = -1;
		
		if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
			var datasetId = null;
			var key = null;
			for(key in this.dataBinds){
				if( typeof this.dataBinds[key] == "function" ) continue;
				if( typeof BindInfo != "undefined" && this.dataBinds[key] instanceof BindInfo ){
					datasetId = this.dataBinds[key].datasetId;
					break;
				}
			}
			if( datasetId != null ){
				dataSets[datasetId].instantUpdateControl = false;
				this._UpdateDataset();
				dataSets[datasetId].instantUpdateControl = true;
			}
			//메모리 해제
			key = null; datasetId = null;
		}
		
		//메모리 해제
		controlvalue = null; oldValue = null; oldText = null;
		
		return false;
	}
    
    if( ("" + oldValue != "" + this.value) || (oldIndex != this.index) ){ // 내부값이 변경된 상황
	    if( !this.checkError() ){
			this.value = oldValue;
			this.text = oldText;
			this.index = oldIndex;
			this.tagObject.selectedIndex = oldIndex;
			if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
			this.tagObject.focus();
			//메모리 해제
			controlvalue = null; oldValue = null; oldText = null;
			return false;
	    }
	    
	    // dataset 갱신 기능 
	    if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" )
	    	this._UpdateDataset();
	    
	    //passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
    	if( !this.passEvent ){
		    // 사용자 코딩 추가영역을 호출한다
    		if( this.hasChangeEvent ){
    			var result = this.fncChangeEvent();
    			if( result === false ){
    				this.value = oldValue;
    				this.text = oldText;
    				this.index = oldIndex;
    				this.tagObject.selectedIndex = oldIndex;
    				if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
    				this.tagObject.focus();
    				//메모리 해제
    				controlvalue = null; oldValue = null; oldText = null;
    				return false;
    			}
    		}
    	}
    }
    
	if( this.editable && this.visible ){
		self["_$_ComboEdit_"].style.display = "none";
		setComboEditControl(this);
	}
    
    //메모리 해제
    controlvalue = null; oldValue = null; oldText = null;
	
    return true;
};

/**
 * @description ComboBox에 겉값으로 보여질 문자를 설정합니다.
 * @param text {String}  ComboBox에 겉값으로 보여질 문자열입니다.
 * @return {boolean} 성공했다면 true, 실패했다면 false,<br>에러발생시 undefined를 반환합니다.
 * @example contorls["ComboBox_1"].setText("콤보박스");
 */
ComboBox.prototype.setText = function(text){
	// functionname : [ComboBox.setText]
	
	if( this.listCount() == 0 ) {
		this.reservedText = text;
		return false;
	}
	
	var oldValue = this.value;
	var oldText = this.text;
	var oldIndex = this.index;
	
	if( oldText == text && this.topItemText !== "" ){
		oldText = null; oldValue = null;
		return true;
	}
	
	var wOptions = null;
	var found = false;
	
	if( text === "" && !this.haveEmptyText() ){
		this.value = "";
		this.text = "";
		this.index = -1;
		this.tagObject.selectedIndex = this.index;
		found = true;
	}
	else{
		wOptions =  this.tagObject.options;
		
		this.stateClear = true;
		for(var i = 0; i < wOptions.length; i++){
			if( wOptions[i].text == text ){
				wOptions[i].selected = true;
				this.text = wOptions[i].text;
				this.value = wOptions[i].value;
				this.index = i;
				found = true;
				break;
			}
		}
		this.stateClear = false;
		
		wOptions = null;
	}
	
	if( !found ){
		this.reservedText = text;
		this.value = "";
		this.text = "";
		this.index = -1;
		this.tagObject.selectedIndex = -1;
		
		if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
			var datasetId = null;
			for(var key in this.dataBinds){
				if( typeof this.dataBinds[key] == "function" ) continue;
				if( typeof BindInfo != "undefined" && this.dataBinds[key] instanceof BindInfo ){
					datasetId = this.dataBinds[key].datasetId;
					break;
				}
			}
			if( datasetId != null ){
				dataSets[datasetId].instantUpdateControl = false;
				this._UpdateDataset();
				dataSets[datasetId].instantUpdateControl = true;
			}
			datasetId = null;
		}
		
		return false;
	}
	
	if( ("" + oldText != "" + this.text) || (oldIndex != this.index) ){		// 내부값이 변경된 상황
		if( !this.checkError() ){
			this.value = oldValue;
			this.text = oldText;
			this.index = oldIndex;
			this.tagObject.selectedIndex = oldIndex;
			if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
			this.tagObject.focus();
			return false;
		}
		
		// dataset 갱신 기능 
		if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" )
			this._UpdateDataset();
		
		// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
		if( !this.passEvent ){
			// 사용자 코딩 추가영역을 호출한다
			if( this.hasChangeEvent ){
				var result = this.fncChangeEvent();
				if( result === false ){
					this.value = oldValue;
					this.text = oldText;
					this.index = oldIndex;
					this.tagObject.selectedIndex = oldIndex;
					if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
					this.tagObject.focus();
					return false;
				}
			}
		}
	}
	
	if( this.editable && this.visible ){
		self["_$_ComboEdit_"].style.display = "none";
		setComboEditControl(this);
	}
	
    // 관련객체 프로퍼티 채우기
    // this.setLinkedProperties(text, 1);
    /*
    // 데이터 가저오기
    if (this.isKeyControl){
        if (this.isFillControl){
        	mustFillScreenAfterLoad = true;
        }
        objectManager.fillkeyFieldValue = this.value;
     	objectManager.loadData();
    }
    
    // 데이터 채우기
    if (!this.isKeyControl && this.isFillControl){
    	objectManager.fillData();
    }
    */
	
	return true;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
ComboBox.prototype.setValueToDefault = function(){
	// functionname : [ComboBox.setValueToDefault]
	
	var wOptions =  this.tagObject.options;
	var value = null;
	
	//콤보 내 목록이 없다면 기본값을 예약값으로 설정하고 콤보 값 초기화
	if( wOptions.length == 0 ){
		this.reservedValue = this.defaultValue;
		this.value = "";
		this.text = "";
		this.index = -1;
		this.tagObject.selectedIndex = -1;
		return false;
	}
	else if( wOptions.length == 1 && this.selectWhenOnlyItem ){
		return this.setIndex(0);
	}
	
	//기본값이 없는 경우
	if( this.defaultValue.length == 0 ){
		this.setIndex(-1);
		return false;
	}
	
	value = this.defaultValue;
	
	//기본값이 0이지만 콤보 내 항목 중 0이 없는 경우
	if( parseInt(1 * value) == 0 && !this.haveZeroValue() ){
		this.setIndex(-1);
		return false;
	}
	
	this.setValue(this.defaultValue);
	
	return true;
};

/**
 * @description ComboBox에 option을 추가합니다.
 * @param pText {String} option에 겉값으로 보여질 문자 입니다.
 * @param pData	{Object} option에 속값으로 설정될 값입니다.
 * @return 반환값없음, 에러발생시 undefined를 반환합니다.
 * @example controls["ComboBox_1"].addItem("abc",abc);
 */
ComboBox.prototype.addItem = function(pText, pData){
	// functionname : [ComboBox.addItem]
    
	var oldIndex = this.tagObject.selectedIndex;
	var opt = document.createElement("option");
	opt.value = pData;
	opt.text = pText;
	
	this.tagObject.options.add(opt);
	
	var anchor = null;
	if( typeof this.comboDiv != "undefined" && this.comboDiv != null ){
		anchor = document.createElement("a");
		anchor.text = pText;
		setEventHandler(anchor, "mousedown", sel);
		
		this.comboDiv.appendChild(anchor);
	}
	
	//이전 인덱스로 이동
	this.tagObject.selectedIndex = oldIndex;
	
	anchor = null;
	opt = null;
	
	return true;
};
/**
 * @description	미결
 * @param	{String}	pText	option에 겉값으로 보여질 문자 입니다.
 * @param	{Object}	pData
 * @param	{Object}	pIndex
 * @return	{undefined}
 * @example	미결
 */
ComboBox.prototype.insertItem = function(pText, pData, pIndex){
	// functionname : [ComboBox.insertItem]
	
	var opt = document.createElement("option");
	opt.value = pData;
	opt.text = pText;
	
	var anchor = null;
	if( typeof this.comboDiv != "undefined" && this.comboDiv != null ){
		anchor = document.createElement("a");
		anchor.text = pText;
		setEventHandler(anchor, "mousedown", sel);
	}
	
	var isNumRegx = /^\d+$/;
	
	//인덱스 파라메터가 0 이상인 정수인지 체크하여 0 이상인 경우 해당 인덱스 앞에 추가하지만 인덱스가 올바르지 않은 경우 맨 뒤에 추가
	if( !(isNumRegx.test(pIndex + "")) ){
		this.tagObject.options.add(opt);
		
		if( anchor != null ){
			this.comboDiv.appendChild(anchor);
		}
	}
	else{
		this.tagObject.insertBefore(opt, this.tagObject.childNodes[pIndex]);
		
		if( anchor != null ){
			var options = this.comboDiv.querySelectorAll("a");
			this.comboDiv.insertBefore(anchor, options[pIndex]);
			options = null;
		}
	}
	
	isNumRegx = null; anchor = null; opt = null;
    
    return true;
};

/**
 * @description	미결
 * @param	{Object}	pIndex
 * @return	{Object}
 * @example	미결
 */
ComboBox.prototype.selectIndex = function(pIndex){
	// functionname : [ComboBox.selectIndex]
	
	return this.setIndex(pIndex);
};

/**
 * @description 미결
 * @param	{Object}	pIndex
 * @return 	{boolean}
 * @example 미결
 */
ComboBox.prototype.setIndex = function(pIndex){
	// functionname : [ComboBox.setIndex]
	
	var result = true;
	var oldIndex = this.index;
	var oldValue = this.value;
	var oldText = this.text;
	
	if( oldIndex == pIndex && this.tagObject.selectedIndex == pIndex ){
		return true;
	}
	
	var wOptions = this.tagObject.options;
	
	if(0 > pIndex || wOptions.length <= pIndex){
		if(this.tagObject){
			this.value = "";
			this.text = "";
			this.index = -1;
			this.tagObject.selectedIndex = -1;
			
			if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
				var datasetId = null;
				for(var key in this.dataBinds){
					if( typeof this.dataBinds[key] == "function" ) continue;
					if( typeof BindInfo != "undefined" && this.dataBinds[key] instanceof BindInfo ){
						datasetId = this.dataBinds[key].datasetId;
						break;
					}
				}
				if( datasetId != null ){
					dataSets[datasetId].instantUpdateControl = false;
					this._UpdateDataset();
					dataSets[datasetId].instantUpdateControl = true;
				}
			}
		}
		
		result = false;
	}
	else{
		//콤보박스 항목 선택 및 콤보박스 객체의 value와 text property 갱신
		wOptions[pIndex].selected = true;
		this.value = wOptions[pIndex].value;
		this.text = wOptions[pIndex].text;
		this.index = pIndex * 1;
		
		if( !this.checkError() ){
			this.value = oldValue;
			this.text = oldText;
			this.index = oldIndex;
			this.tagObject.selectedIndex = oldIndex;
			
			if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
			
			return false;
		}
		
		// dataset 갱신 기능 
		if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
			this._UpdateDataset();
		}
		
		// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
		if( !this.passEvent ){
			// 사용자 코딩 추가영역을 호출한다
			if( this.hasChangeEvent ){
				var result = this.fncChangeEvent();
				if( result === false ){
					this.value = oldValue;
					this.text = oldText;
					this.tagObject.selectedIndex = oldIndex;
					
					if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
					
					return false;
				}
			}
		}
		
		if( this.editable && this.visible ){
	    	self["_$_ComboEdit_"].style.display = "none";
	    	setComboEditControl(this);
	    }
	}
	
	return result;
};
/**
 * @description ComboBox의 지정한 option을 삭제합니다.
 * @param pData {Object} 지워질option의 값입니다.
 * @return 반환값 없음, 에러발생시 undefined를 반환합니다.
 * @example controls["ComboBox_1"].removeItem(abc);
 */
ComboBox.prototype.removeItem = function(pData){
	// functionname : [ComboBox.removeItem]
	
	var wOptions = this.tagObject.options;
	var wOption = null;
	var deleteIndex = -1;
	var i = 0;
	
	if( ("" + pData).length > 0 ){
		for(i = wOptions.length - 1; i >= 0; i--, wOption = null){
			wOption = wOptions[i];
			
			if( wOption.value == pData ){
				wOptions.remove(i);
				deleteIndex = i;
				wOption = null;
				break;
			}
		}
	}
	
	if( typeof this.comboDiv != "undefined" && this.comboDiv != null ){
		var options = this.comboDiv.getElementsByTagName("a");
		var option = options[deleteIndex];
		
		removeEventHandler(option, "mousedown", sel);
		option.parentNode.removeChild(option);
		
		option = null;
		options = null;
	}
    
//	var aTagItems = this.comboDivClone.innerHTML.split("\n");
//	var aTagItemLength = aTagItems.length;
//	if(aTagItemLength > 0 && aTagItemLength > i && i >= 0){
//		removeEventHandler(aTagItems[i], "mousedown", sel);
//		aTagItems.splice(i, 1);
//		
//		this.comboDivClone.innerHTML = aTagItems.join("\r\n");
//		
//		for(i = aTagItemLength - 1; i >= 0; i--) aTagItems.pop();
//	}
//	aTagItems = null;
};
/**
 * @description	미결
 * @param	{object}	pData
 * @param	{object}	objectId
 * @return  {string}
 * @example	미결
 */
ComboBox.prototype.textOfData = function(pData, objectId){
	// functionname : [ComboBox.textOfData]

	var wReturn = "";
    var i = 0;
	               	
//	var checkEvent = false;
//	try {
//		if (eval("getCasheKey_" + this.controlId)) checkEvent = true;
//	} catch(e){}
//	
//	if (checkEvent){
//		var recordsetKey = "fillList_" + this.controlId;
//	    var casheKey = eval("getCasheKey_" + this.controlId + "(objectId);");
//	    var wArrKey = casheKey.split(":");
//	    
//	    // SQL번호만 있는 경우 콜론을 붙여준다
//	    if (casheKey.indexOf(":") < 0) casheKey += ":";
//        
//	    var recordset = getRecordsetByKey(recordsetKey);
//	    if (recordset.casheKey != casheKey){
//	        var dataCashe = dataCashes[casheKey];
//	        
//	        if (dataCashe == undefined){
//	        	// casheMode가 설정되면 리스트는 갱신안되고 캐시에만 저장된다
//	        	recordset.casheMode = true;
//	    		recordset.sqlnum = wArrKey[0];
//                
//	        	for (var i=1; i < wArrKey.length; i++){
//		    		recordset.setParameter("param" + i, wArrKey[i]);
//	        	}
//	        	// syncMode로 호출 된다
//	    		recordset.open();
//	    		// 호출후 recordsetKey + "_OnReceive"가 수행된다
//	    		
//	    		recordset.casheMode = false; 
//	    		dataCashe = dataCashes[casheKey];
//	        }
//	        else{
//	        	for (i = 0; i < dataCashe.rowCount; i++){
//	        		if (dataCashe.fields[0].datas[i] == pData){
//	        			wReturn = dataCashe.fields[1].datas[i];
//	        			break;
//	        		}
//	        	}
//	        	
//	        	return wReturn; 
//	        }	       
//	    }
//	}

    var wOptions = this.tagObject.options;
    
    for(i = wOptions.length - 1; i >= 0; i--){
    	if( ("" + pData).length > 0 && wOptions[i].value == pData ){
    		wReturn = wOptions[i].text;
            break;
        }
    }
    
    return wReturn;
};
/**
 * @description ComboBox에 속해있는 option의 갯수를 반환합니다.
 * @return {Integer} option의 갯수를 반환합니다.
 * @example contorls["ComboBox_1"].listCount();
 */
ComboBox.prototype.listCount = function(){
	// functionname : [ComboBox.listCount]

	return this.tagObject.options.length;
};
/**
 * @description ComboBox에 속해있는option들을 모두 지웁니다.
 * @return {boolean} clear성공시 true 실패시false를 반환한다.
 * @example contorls["ComboBox"].clear();
 */
ComboBox.prototype.clear = function(){
	// functionname : [ComboBox.clear]
	
	var haveComboDiv = (typeof this.comboDiv != "undefined" && this.comboDiv != null);
	var wOptions = this.tagObject.options;
	var wOption = null;
	var i = 0;
	
	this.stateClear = true;
	
	//리스트 클리어
	for(i = wOptions.length - 1; i >= 0; i--){
	    wOptions.remove(i);
	}
	
	//전체선택 코드와 텍스트 값이 모두 존재하는 경우에 전체선택  항목 추가
	if( this.haveFixedTopItem === true ){
		wOption = document.createElement("option");
		wOption.value = this.topItemValue;
		wOption.text = this.topItemText;
		//항목 추가
		wOptions.add(wOption);
	}
	
	//메모리 해제
	wOption = null;
	wOptions = null;
	
	//편집 콤보박스용 Div가 존재하는 경우
	if( haveComboDiv === true ){
		var options = this.comboDiv.getElementsByTagName("a");
		var option = null;
		
		//리스트 클리어
		for(i = options.length - 1; i >= 0; i--, option = null){
			option = options[i];
			removeEventHandler(option, "mousedown", sel);    			
		}
		this.comboDiv.innerHTML = "";
		
		//전체선택 코드와 텍스트 값이 모두 존재하는 경우에 전체선택  항목 추가
		if( this.haveFixedTopItem === true ){
			option = document.createElement("a");
			option.text = this.topItemText;
			setEventHandler(option, "mousedown", sel);
			//항목 추가
			this.comboDiv.appendChild(option);
		}
		
		//메모리 해제
		option = null;
		options = null;
	}
	
	this.stateClear = false;
	
//	this.value= "-1";
//	this.text = "";
	this.value = "";
	this.text = "";
	this.index = -1;
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasClearEvent ){
			var result = this.fncClearEvent();
			if( typeof result == "boolean" ) return result;
		}
	}
	
	return true;
};

ComboBox.prototype.clearWithNoEvnets = function(){
	// functionname : [ComboBox.clearWithNoEvnets]
	
	var haveSelectAllm = ( (this.topItemText != null && typeof this.topItemText != "undefined") && (this.topItemValue != null && typeof this.topItemValue != "undefined") );
	var haveComboDiv = (typeof this.comboDiv != "undefined" && this.comboDiv != null);
	
	var wOptions = this.tagObject.options;
	var wOption = null;
	var i = 0;
	
	this.stateClear = true;
	
	//리스트 클리어
	for(i = wOptions.length - 1; i >= 0; i--){
	    wOptions.remove(i);
	}
	
	//전체선택 코드와 텍스트 값이 모두 존재하는 경우에 전체선택  항목 추가
	if( this.haveFixedTopItem === true ){
		wOption = document.createElement("option");
		wOption.value = this.topItemValue;
		wOption.text = this.topItemText;
		//항목 추가
		wOptions.add(wOption);
	}
	
	//메모리 해제
	wOption = null;
	wOptions = null;
	
	//편집 콤보박스용 Div가 존재하는 경우
	if( typeof this.comboDiv != "undefined" && this.comboDiv != null ){
		var options = this.comboDiv.getElementsByTagName("a");
		var option = null;
		
		//리스트 클리어
		for(i = options.length - 1; i >= 0; i--, option = null){
			option = options[i];
			removeEventHandler(option, "mousedown", sel);    			
		}
		this.comboDiv.innerHTML = "";
		
		//전체선택 코드와 텍스트 값이 모두 존재하는 경우에 전체선택  항목 추가
		if( this.haveFixedTopItem === true ){
			option = document.createElement("a");
			option.text = this.topItemText;
			setEventHandler(option, "mousedown", sel);
			//항목 추가
			this.comboDiv.appendChild(option);
		}
		
		//메모리 해제
		option = null;
		options = null;
	}
	
	this.stateClear = false;
	
	return true;
};

ComboBox.prototype.setLists = function(recordset){
	// functionname : [ComboBox.setLists]
	
	// 화면에 없는 데이터 가저오기인 경우
	if( recordset.casheMode ) return;
	
	if( this.reservedValue != "" || this.reservedText != "" )
		this.clearWithNoEvnets();	// 클리어 이벤트에서 콘트롤 값과 객체값을 바꾸지 않도록 한다
	else
		this.clear();
	
	/* 선택(-1) 무조건 추가하는 로직 제거
	// 데이터 하나만 있을때 무조건 선택하는 경우는 "(선택)"을 만들지 않음
	if(this.selectWhenOnlyItem){	// 통과	
	}
	else{
		//this.addItem("(선택)","-1");
	}
	*/
	
	var optList = [];
	var i = 0;
	
	//콤보 리스트 생성
	if( recordset.commandType == "Dataset" ){
		if( (typeof this.valueField == "string" && this.valueField.length > 0) || 
			(typeof this.textField == "string" && this.textField.length > 0)
		){
			var vField = (this.valueField.length > 0) ? this.valueField : this.textField;
			var tField = (this.textField.length > 0) ? this.textField : this.valueField;
			var list = recordset.dataSet.data;
			var listSize = list.length;
			var record = null; var text = null; var value = null;
			
			for(i = 0; i < listSize; i++, record = null, text = null, value = null){
				record = list[i];
				text = record[tField];
				value = record[vField];
				
				this.addItem(text, value);
				optList[i] = "<a onmousedown='sel(event);'>" + text + "</a>\r\n";
			}
			
			list = null; tField = null; vField = null;
		}
	}
	else{
		if( recordset.fields.length == 1 ){
			var text = null;
			
			while(!recordset.EOF){
				text = recordset.fields[0].value();
				
				this.addItem(text, text);
				optList.push("<a onmousedown='sel(event);'>" + text + "</a>");
				
				recordset.moveNext();
				
				text = null;
			}
		}
		else{
			var text = null; var value = null;
			
			while(!recordset.EOF){
				text = recordset.fields[1].value();
				value = recordset.fields[0].value();
				
				this.addItem(text, value);
				optList.push("<a onmousedown='sel(event);'>" + text + "</a>");
				
				recordset.moveNext();
				
				value = null; text = null;
			}
		}
	}
	
	if( typeof this.comboDiv != "undefined" && this.comboDiv != null ){
		this.comboDiv.innerHTML = optList.join("\r\n");
	}
	
	//메모리 해제
	optList.clear();
	optList = null;
	
	//콤보 항목이 1개이고 '단일레코드선택' 속성이 true로 설정되었다면, 첫번째 항목을 선택한다 
	if( recordset.rowCount == 1 && this.selectWhenOnlyItem ){
//		this.setValue(recordset.fields[0].datas[0]); //recordset.fields[필드번호].datas[레코드번호]
		this.setIndex(0); //첫번째 콤보 항목을 자동으로 선택한다
	}
//	else if( this.reservedValue != "-1" ){
//		// 리스팅을 다시 했으면 무조건 "_onchange" 이벤트가 일어나야 한다 
//		// 그러려고 값을 -1로 대입한다
//    	this.value = "-1";
//    	this.text = "";
//    	this.setValue(this.reservedValue);
//	}
	else if( this.reservedValue != "" ){
		this.value = "";
		this.text = "";
		this.index = -1;
    	this.setValue(this.reservedValue);
    }
//	else if( this.reservedText != "" ){
//		// 리스팅을 다시 했으면 무조건 "_onchange" 이벤트가 일어나야 한다 
//		// 그러려고 값을 -1로 대입한다
//		this.value = "-1";
//		this.text = "";
//		this.setText(this.reservedText);
//	}
	else if( this.reservedText != "" ){
    	this.value = "";
    	this.text = "";
    	this.index = -1;
    	this.setText(this.reservedText);
    }
	else{
		this.setValueToDefault();
    }
	
	recordset.close();
    
//	this.reservedValue = "-1";
//	this.reservedText = "";
	this.reservedValue = "";
	this.reservedText = "";
	
	return true;
};

// 화면로드시만 일어나는 기능으로 디폴트값선택등 추가기능은 생략
ComboBox.prototype.setDefaultLists = function(listsStr, itemsStr){
	// functionname : [ComboBox.setDefaultLists]
	
	if( typeof itemsStr == "undefined" || (typeof itemsStr == "string" && itemsStr.trim().length == 0) ){
		//itemsStr = listsStr;
	}
	
	listsStr = listsStr.replace(/,/g,"<COMMA>");
	itemsStr = itemsStr.replace(/,/g,"<COMMA>");
	
	var wOptions = this.tagObject.options;
	var wOption = null;
	var wOptionCnt = wOptions.length;
	var i = 0;
	
	if( wOptionCnt > (this.haveFixedTopItem === true ? 1 : 0) ){
		for(i = 0; i < wOptionCnt; i++, wOption = null){
			wOption = wOptions[i];
			listsStr += "<COMMA>" + wOption.text;
			itemsStr += "<COMMA>" + wOption.value;
		}
	}

	var arrayLists = listsStr.split("<COMMA>");
	var arrayItems = itemsStr.split("<COMMA>");
	var arrayListCnt = arrayLists.length;
	
	this.clear();
    
    for(i = 0; i < arrayListCnt; i++){
    	//if (i == 0) this.value = arrayItems[i]; // 초기값 셋팅
    	this.addItem(arrayLists[i], arrayItems[i]);
    }
	
	this.setValueToDefault();
	
//	this.reservedValue = "-1";
//	this.reservedText = "";
	this.reservedValue = "";
	this.reservedText = "";
	
	arrayItems.clear(); arrayItems = null;
	arrayLists.clear(); arrayLists = null;
	
	return true;
}

ComboBox.prototype.haveZeroValue = function(){
	// functionname : [ComboBox.haveZeroValue]

	var wReturn = false;
    var wOptions = this.tagObject.options;
    var wOption = null;
    
    for(var i = wOptions.length - 1; i >= 0; i--, wOption = null){
    	wOption = wOptions[i];
    	
    	if( wOption.value == "0" ){
    		wReturn = true;
    		wOption = null;
    		break;
    	}
    }
    
    wOptions = null;
    
    return wReturn;
};

ComboBox.prototype.haveEmptyText = function(){
	// functionname : [ComboBox.haveEmptyText]

	var wReturn = false;
    var wOptions = this.tagObject.options;
    var wOption = null;
    
    for(var i = wOptions.length - 1; i >= 0; i--, wOption = null){
    	wOption = wOptions[i];
    	
    	if( wOption.text == "" ){
    		wReturn = true;
    		wOption = null;
    		break;
    	}
    }
    
    wOptions = null;
    
    return wReturn;
};

ComboBox.prototype.textFound = function(textLinked){
    // functionname : [ComboBox.textFound]
    
    var wReturn = false;
    var text = textLinked || "";
	var wOptions =  this.tagObject.options;
	var wOption = null;
	
	for(var i = wOptions.length - 1; i >= 0; i--, wOption = null){
		wOption = wOptions[i];
		
		if( wOption.text == text ){
			wReturn = true;
			wOption = null;
			break;
		}
	}
	
	wOptions = null;
	text = null;
    	
    return wReturn;
};

ComboBox.prototype.setFixedTopItem = function(pText, pData){
	// functionname : [ComboBox.setFixedTopItem]
	
	//상단항목추가 설정이 true가 아니라면 추가하지 않음
	if( this.haveFixedTopItem == false ) return;
	
	//전체선택 텍스트 값이 비어있거나 null인 경우
	if( pText == null || typeof pText == "undefined" ) pText = "";
	//전체선택 코드 값이 비어있거나 null인 경우
	if( pData == null || typeof pData == "undefined" ) pData = "";
	
	this.topItemText = pText;
	this.topItemValue = pData;
	
	var option = this.tagObject.options[0];
	option.text = pText;
	option.value = pData;
	option = null;
	
	//만약 전체선택 값과 현재 콤보의 값이 같다면 setValue 함수 호출함
	if( this.value === pData ){
		this.setValue(pData);
	}
};

/**
 * @name ComboBox#combo_Focus
 * @event
 * @return	{boolean}
 * @description	미결
 */
function combo_Focus(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
	var control = searchControl_ComboBox(em);

    if( control.editable ){
    	// 편집콘트롤을 세팅 
    	setComboEditControl(control);
    	
    	stopEvent(e);
    	
        var comboEdit = self["_$_ComboEdit_"];  // ??????
        comboEdit.focus();
        
        comboEdit = null;
        control = null;
		em = null;
        
		return false;
	}
    
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !control.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( control.hasFocusEvent ){
			var result = control.fncFocusEvent();
			if( typeof result == "boolean" ){
				control = null;
				em = null;
				return result;
			}
		}
	}
	
	control = null;
	em = null;
	
	return true;
};
/**
 * @name ComboBox#combo_Blur
 * @event
 * @return	{boolean}
 * @description	미결
 */
function combo_Blur(e){
    e = window.event || e;
    
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
	var control = searchControl_ComboBox(em);
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !control.passEvent ){
	    // 사용자 코딩 추가영역을 호출한다
	    if( control.hasBlurEvent ){
	    	var result = control.fncBlurEvent();
	    	if( typeof result == "boolean" ){
	    		control = null;
	    		em = null;
	    		return result;
	    	}
	    }
	}
	
	control = null;
	em = null;
   
    return true;
};
/**
 * @name ComboBox#combo_Change
 * @event
 * @return	{boolean}
 * @description	미결
 */
function combo_Change(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_ComboBox(em);
	
	if( control.stateClear )
		return false;
	
	var wOptions = (navigator.userAgent.indexOf('Firefox') >= 0 ? em.parentNode.options : em.options); 
	var wOption = null;
	var oldValue = control.value;
	var oldText = control.text;
	var oldIndex = control.index;
	var newValue = "";
	var newText = "";
	var newIndex = -1;
	var optCnt = wOptions.length;
	var i = 0;
	
	for(i = 0; i < optCnt; i++, wOption = null){
		wOption = wOptions[i];
		
		if( wOption.selected == true ){
			newValue = wOption.value;
			newText = wOption.text;
			newIndex = i;
			
			wOption = null;
			
			break;
		}
	}
	
	if( ("" + oldValue == "" + newValue) && (1 * oldIndex == 1 * newIndex) ){
		newText = null; newValue = null; oldText = null; oldValue = null;
		wOptions = null; control = null; em = null;
		return true;
	}
	
	control.value = newValue;
	control.text = newText;
	control.index = newIndex;
	
	// dataset 갱신 기능 
	if( typeof ControlBase.prototype._UpdateDataset != "undefined" && newIndex >= 0 ){
		result = control._UpdateDataset();
		
		if( typeof result == "boolean" && !result ){
			control.value = oldValue;
			control.text = oldText;
			control.index = oldIndex;
			
			//컨트롤 태그 선택 복구
			em.value = oldValue;
			
			//메모리 해제
			newText = null; newValue = null; oldText = null; oldValue = null;
			wOptions = null; control = null; em = null;
			
			return false;
		}
	}
    
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !control.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( control.hasChangeEvent ){
			var result = control.fncChangeEvent();
			
			if( result === false ){
				control.value = oldValue;
				control.text = oldText;
				control.index = oldIndex;
				
				//컨트롤 태그 선택 복구
				em.value = oldValue;
				
				//데이터셋 데이터 복구
				if( typeof ControlBase.prototype._UpdateDataset != "undefined" ) control._UpdateDataset();
				
				//메모리 해제
				newText = null; newValue = null; oldText = null; oldValue = null;
				wOptions = null; control = null; em = null;
				
				return false;
			}
		}
	}
	
	//메모리 해제
	newText = null; newValue = null; oldText = null; oldValue = null;
	wOptions = null; control = null; em = null;
	
	return true;
};
/**
 * @name ComboBox#combo_KeyDown
 * @event
 * @return	{boolean}
 * @description	미결
 */
function combo_KeyDown(e){
	//F5새로고침 방지 추가
	if( e.keyCode == 116 ){
		stopEvent(e);
		return false;
	}
	
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var wKeyCode = e.which || e.keyCode;
	var control = searchControl_ComboBox(em);

	if( wKeyCode == 9 ){
		if( getShiftKeyPressed(e) ){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
		else{
			stopEvent(e);
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			control = null; em = null;
			return true;
		}
	}
	else if( wKeyCode == 13 ){
		stopEvent(e);
		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
		control = null; em = null;
		return true;
	}
	
	//F1 - F8  키다운시 공통버튼 동작
	try{
		if(shortCutFunc(e,true)){ 
			stopEvent(e);
			control = null; em = null;
			return true;
		}
	} catch(e){}
	
	stopEvent(e);
	
	control = null;
	em = null;
	
	return true;
};



/*
 *	Editable ComboBox 
 */
/**
 * @name ComboBox#combo_MouseOver
 * @event
 * @return	{boolean}
 * @description	미결
 */
function combo_MouseOver(e){
	e = window.event || e;
    
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_ComboBox(em);
	
	if( !control.editable ){
		control = null; em = null;
		return true;
	}
	
	var comboEdit = self["_$_ComboEdit_"];
	var comboTarget = comboEdit.getAttribute("target");
	var controlName = control.controlName;

	//현재 편집중인 콤보가 아니면 덥개 콘트롤을 세팅 
    if( comboEdit.style.display !== "block"
    	|| controlName !== comboTarget
    ){
    	setComboCover(control);
    }
    
    stopEvent(e);
    
    comboTarget = null; controlName = null; comboEdit = null;
    control = null; em = null;
    
    return true;
};

/**
 * @name ComboBox#comboEdit_onBlur
 * @event
 * @return	{boolean}
 * @description	미결
 */
function comboEdit_onBlur(e){
	e = window.event || e;
	
	var comboEdit = self["_$_ComboEdit_"];
	var controlName = comboEdit.getAttribute("target");
	var control = null;
	
	if( controlName != null && controlName.length > 0 ){
		control = controls[controlName];
		
		control.tagObject.disabled = false;
		
		if( control.comboDiv.style.display === "block" ){
			//setTimeout(hidecomboDiv, 300);
			hidecomboDiv();
		}
	}
	
	stopEvent(e);
	
	control = null; controlName = null;
	comboEdit = null;
	
	return true;
};

/**
*     @description	미결
*     @return	{undefined}
*     @example	미결
*/
function fillOptions(){
	var controlName = self["_$_ComboEdit_"].getAttribute("target");
	var control = controls[controlName];
	var comboDivObj = control.comboDiv;
    var tagObject = control.tagObject;
	var options= tagObject.options;
	var option = null;
	var optCnt = options.length;
	var i = 0;
	
	for(i = 0; i < optCnt; i++, option = null){
		option = options[i];
 	    innerHTML += "<a onmousedown='sel(event);'>" + option.text + "</a>\r\n";
	}
	
	comboDivObj.innerHTML = innerHTML;
	
	if( tagObject.selectedIndex >= 0 )
		selectItem(tagObject.selectedIndex);
	else
		selectItem(0);
	
	options = null; tagObject = null; comboDivObj = null;
	control = null; controlName = null;
 }

/**
 * @name ComboBox#sel
 * @event
 * @description	미결
 */
function sel(e){
	e = e || window.event;	
	
	var el = e.srcElement ? e.srcElement : e.target;
	
	selectItem(el);
	
	var controlName = self["_$_ComboEdit_"].getAttribute("target");
	var control = controls[controlName];
	var options = control.tagObject.options;
	var option = null;
	var optCnt = options.length;
	var i = 0;
	
	for(i = 0; i < optCnt; i++, option = null){
		option = options[i];
		
		if( option.text == el.innerText ){
			//control.tagObject.selectedIndex = i;
			control.setIndex(i);
			break;
		}
	}
	
	options = null; control = null; 
	controlName = null; el = null;
	
	return true;
}

/**
 *	@description	미결
 *	@param			{object}	varItem
 *	@return			{undefined}
 *	@example		미결
 */
function selectItem(varItem){
	var controlName = self["_$_ComboEdit_"].getAttribute("target");
	var control = null;
	var comboDivObj = null;
	
	if( controlName != null && controlName.length > 0 ){
		control = controls[controlName];
		comboDivObj = control.comboDiv;
	}
	else{
		comboBoxName = null;
		return;
	}
	
	var nodes = comboDivObj.getElementsByTagName("A");
	var node = null;
	var selectedItemNum = control.selectedItemNum;
	var item = null;
	var index = -1;
    
	if( typeof varItem == "number" ){
		index = varItem;
		item = nodes[index];
	}
	else if( typeof varItem == "object" ){
		if( typeof varItem.tagName != "undefined" && varItem.tagName.toUpperCase() == "A" ){
			item = varItem;
			
			var nodeCnt = nodes.length;
			var i = 0;
			
			for(i = 0; i < nodeCnt; i++, node = null){
				node = nodes[i];
				
				if( item == node ){
					index = i;
					node = null;
					break;
				}
			}
		}
	}
	
    if( typeof item == "undefined" ) return;
    
    //index
	if( selectedItemNum != index ){
		if( selectedItemNum >= 0 )
			nodes[selectedItemNum].className = "";
		
		item.className = "blueback";
	}
	
	control.selectedItemNum = index; 
	
	item.scrollIntoView(false);
	
	item = null; nodes = null;
	comboDivObj = null; control = null; controlName = null;
}

/**
 * @name ComboBox#comboEdit_onkeyup
 * @event
 * @return	{boolean}
 * @description	미결
 */
function comboEdit_onkeyup(e){
	e = e || window.event;
	
	var keyCode = e.which || e.keyCode;
	if( keyCode == 38 || keyCode == 40 ) return true;
	
	var ua = navigator.userAgent.toLowerCase(); 
	var isSafari = (ua.indexOf('safari') != -1 && ua.indexOf('chrome') == -1);
	if( isSafari && keyCode == 229 ){
		sel(e);
		ua = null;
		return true;
	}
	
	var comboEdit = self["_$_ComboEdit_"];
	var controlName = comboEdit.getAttribute("target");
	var control = null;
	var comboDivObj = null;
	var selectedItemNum = -1;
	
	if( controlName != null && controlName.length > 0 ){
		control = controls[controlName];
		comboDivObj = controls[controlName].comboDiv;
		selectedItemNum = control.selectedItemNum;
	}
	else{
		controlName = null; comboEdit = null; ua = null;
		return false;
	}
	
	var nodes = comboDivObj.getElementsByTagName("A");
	var node = null;
	var inHtml = null;
	var comboVal = comboEdit.value.toLowerCase();
	var isFirst = true;
	var nodeCount = nodes.length;
	var i = 0;
	
	for(i = 0; i < nodeCount; i++, node = null, inHtml = null){
		node = nodes[i];
		inHtml = node.innerHTML.toLowerCase();
		node.className = "";
		
		if( inHtml.indexOf(comboVal) >= 0 ){
			node.style.display = 'block';
			
			if( isFirst ){
				node.className = "blueback";
				control.selectedItemNum = i;
			}
			
			isFirst = false;
		}
		else{
			node.style.display = 'none';
		}
	}
	
	nodes = null; comboDivObj = null; control = null;
	controlName = null; comboEdit = null; ua = null;
	
	return true;
}

/**
 * @name ComboBox#comboEdit_onkeydown
 * @event
 * @return	{boolean}
 * @description	미결
 */
function comboEdit_onkeydown(e){
	e = e || window.event;
	
	var keyCode = e.which || e.keyCode;
	var comboEdit = self["_$_ComboEdit_"];
	var controlName = comboEdit.getAttribute("target");
	var control = controls[controlName];
	var comboDiv = control.comboDiv;
	var nodes = comboDiv.getElementsByTagName("A");
	var node = null;
	var selectedItemNum = control.selectedItemNum;
	var i = 0;
	
	if( keyCode == 9 ){
		var shiftKeyPressed = getShiftKeyPressed(e);
		
		setTimeout(function(){
			(function(pComboDiv, pControlName, pShiftKeyPressed){
				if( pComboDiv.style.display === "block" )
					hidecomboDiv();
				if( pShiftKeyPressed )
					setFocusToFormerControl(pControlName);
				else
					setFocusToNextControl(pControlName);
	 		})(comboDiv, controlName, shiftKeyPressed);
		}, 0);
		
		stopEvent(e);
		
		nodes = null; control = null; comboEdit = null;
//		comboDiv = null; controlName = null;
		
		return false;
	}
	
	if( keyCode == 13 ){
		if( selectedItemNum >= 0 ){
			//nodes[selectedItemNum].click();   // 사파리 에러 
			var text = nodes[selectedItemNum].innerHTML
			var options = control.tagObject.options;
			var option = null;
			var optionCount = options.length;
			
			for(i = 0; i < optionCount; i++, option = null){
				option = options[i];
				
				if( option.text == text ){
					control.setIndex(i);
					option = null;
					break;
				}
			}
			
			options = null; text = null;
		}
		
		control.tagObject.disabled = false;
		
		setTimeout(function(){
			(function(pComboDiv, pControlName){
				if( pComboDiv.style.display === "block" )
					hidecomboDiv();
				setFocusToNextControl(pControlName);
			})(comboDiv, controlName);
		}, 0);
		
		stopEvent(e);
		
		nodes = null; control = null; comboEdit = null;
//		comboDiv = null; controlName = null; 
		
		return false;
	}
	else{
		// 콘트롤 판넬 보이기 
		if( comboDiv.style.display === "none" ){
//			// 다른 Edit Combo가 포커스된상태에서  또다른 Edit Combo 선택시, 포커스가 변경안되고 comboEdit의 위치만 이동한다.
//			// 선택시 타겟이 다르면 리스트를 새로운 콘트롤로 이동시킨다 .
//			if( comboEdit.getAttribute("target") !== comboDiv.getAttribute("target") )
//				fillOptions();
			
			setcomboDiv(control);
			
			if( keyCode == 32 ){
				stopEvent(e);
				
				nodes = null; comboDiv = null; control = null;
				controlName = null; comboEdit = null;
				
				return false;
			}
		}
	}
	
	if( keyCode != 38 && keyCode != 40 ){
		nodes = null; comboDiv = null; control = null;
		controlName = null; comboEdit = null;
		
		return true;
	}
	
	// Move Selection Up
	var nodeCount = nodes.length;
	var newIndex = -1;
	
	if( keyCode == 38 ){		// UP
		for(i = selectedItemNum - 1; i >= 0; i--, node = null){
			node = nodes[i];
			
			if( node.style.display == '' || node.style.display == 'block' ){
				newIndex = i;
				node = null;
				break;
			}
		}
	}
	else if( keyCode == 40 ){	// DOWN
		for(i = selectedItemNum + 1; i < nodeCount; i++, node = null){
			node = nodes[i];
			
			if( node.style.display == '' || node.style.display == 'block' ){
				newIndex = i;
				node = null;
				break;
			}
		}
	}
	
	if( newIndex >= 0 ) selectItem(newIndex);
	
	nodes = null; comboDiv = null; control = null;
	controlName = null; comboEdit = null;
	
	return true;
};

/**
 * @name ComboBox#comboEdit_onmouseup
 * @event
 * @return	{boolean}
 * @description	미결
 */
function comboEdit_onmouseup(e){
	var comboEdit = self["_$_ComboEdit_"];
	var controlName = comboEdit.getAttribute("target");
	var control = null;
	var comboDiv = null;
	
	if( controlName != null && controlName.length > 0 ){
		control = controls[controlName];
		comboDiv = control.comboDiv;
	}
	else{
		controlName = null; comboEdit = null;
		return;
	}
	
	// 콘트롤 판넬 보이기 
	if( comboDiv.style.display !== "block" ){
		setcomboDiv(control);
	}
	
	stopEvent(e);
	
	comboDiv = null; control = null;
	controlName = null; comboEdit = null;
	
	return true;
}

/**
 * @name ComboBox#comboCover_MouseOver
 * @event
 * @return	{boolean}
 * @description	미결
 */
function comboCover_MouseOver(e){
	// 아래 콤보 동작을 막음
	stopEvent(e);
	
	return false;
}

/**
 * @name ComboBox#comboCover_MouseOut_1
 * @event
 * @return	{boolean}
 * @description	미결
 */
function comboCover_MouseOut(e){
	e = window.event || e;
	
	hideComboCover();
	
	stopEvent(e);
	
	return true;
}

function comboCover_onmouseup(e){
	var comboCover = self["_$_ComboCover_"];
	var comboEdit = self["_$_ComboEdit_"];
	var controlName = comboCover.getAttribute("target");
	var control = controls[controlName];
	
	if( control.enabled || !control.tagObject.disabled ){
		hideComboCover();
		
		// 다른 Edit Combo가 포커스된상태에서  또다른 Edit Combo 선택시, 포커스가 변경안되고 comboEdit의 위치만 이동한다.
		// 선택시 타겟이 다르면 리스트를 새로운 콘트롤로 이동시킨다. 
		setComboEditControl(control);
		
		var selectedItemNum = control.selectedItemNum;
		var nodes = control.comboDiv.getElementsByTagName("A");
		var node = null; var inHtml = null;
		var comboVal = comboEdit.value.toLowerCase();
		var nodeCount = nodes.length;
		var i = 0;
		
		for(i = 0; i < nodeCount; i++){
			node = nodes[i];
			inHtml = node.innerHTML.toLowerCase();
			node.className = "";
			
			if( inHtml.indexOf(comboVal) >= 0 ){
				node.style.display = 'block';
				
				if( i == selectedItemNum )
					node.className = "blueback";
			}
			else{
				node.style.display = 'none';
			}
			
			node = null; inHtml = null;
		}
		
		setcomboDiv(control);
		selectItem(selectedItemNum);
		
		comboEdit.focus();
		
		nodes = null;
	}
	
	stopEvent(e);
	
	control = null; controlName = null;
	comboEdit = null; comboCover = null;
	
	return true;
}

/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
function makeComboEditControl(){
	if( typeof self["_$_ComboEdit_"] != "undefined" )
		return;
	
	var oChild = null;
	
	//
	if( BrowserDetect.browser == "Explorer"
		&& !isNaN(parseFloat(BrowserDetect.version))
		&& parseFloat(BrowserDetect.version) < 9
	){
		oChild = document.createElement(
					"<input  id='_$_ComboEdit_' name='_$_ComboEdit_' type='text' class='comboEdit'"
					+ "style='position:absolute; left:-10000px; width: 10px; height:16px; display:none; border:none; padding-left:4px; padding-top:2px;'/>"
		);
	}
	else{
		oChild = document.createElement("input");
		oChild.id					= "_$_ComboEdit_";
		oChild.name					= "_$_ComboEdit_";
		oChild.className			= "comboEdit";
		oChild.style.display		= "none";
		oChild.style.position		= "absolute";
		oChild.style.left			= "-10000px";
		oChild.style.width			= "10px";
		oChild.style.height			= "16px";
		oChild.style.border			= "none";
		oChild.style.paddingLeft	= "4px";
//		oChild.style.paddingTop		= "2px";
		oChild.style.marginTop		= "2px";
		oChild.style.marginBottom	= "2px";
	}
	
	setEventHandler(oChild, "keydown", comboEdit_onkeydown);
	setEventHandler(oChild, "blur",    comboEdit_onBlur);
	setEventHandler(oChild, "mouseup", comboEdit_onmouseup);
	setEventHandler(oChild, "keyup",   comboEdit_onkeyup);
	
	/*
	setEventHandler(oChild, "focus", comboEdit_onFocus);
	setEventHandler(oChild, "mouseout",  comboEdit_MouseOut);
	*/
	
	oChild.setAttribute("target", "");
	
	self["_$_ComboEdit_"] = oChild;
	
	//
	if( typeof self["_$_ComboCover_"] != "undefined" )
		return;
	
	if( BrowserDetect.browser == "Explorer"
		&& !isNaN(parseFloat(BrowserDetect.version))
		&& parseFloat(BrowserDetect.version) < 9
	){
		oChild = document.createElement(
					"<div id='_$_ComboCover_' name='_$_ComboCover_' class='comboCover' "
					+ "style='position:absolute; left:-10000px; width: 10px;height:20px; display:none;"
					+ "background_color: black; opacity : 0; filter: alpha(opacity=0); -moz-opacity:0; -khtml-opacity: 0;'/></div>"
		);
	}
	else{
		oChild = document.createElement("div");
		oChild.id						= "_$_ComboCover_";
		oChild.name						= "_$_ComboCover_";
		oChild.className				= "comboCover";
		oChild.style.display			= "none";
		oChild.style.position			= "absolute";
		oChild.style.left				= "-10000px";
		oChild.style.width				= "10px";
		oChild.style.height				= "20px";
		oChild.style.backgroundColor	= "black";
		oChild.style.opacity			= "0";
		oChild.style.filter				= "alpha(opacity=0)";
		oChild.style.MozOpacity			= "0";
		oChild.style.KhtmlOpacity		= "0";
	}
	
	setEventHandler(oChild, "mouseover", comboCover_MouseOver); 
	setEventHandler(oChild, "mouseout",  comboCover_MouseOut);
	setEventHandler(oChild, "mouseup",   comboCover_onmouseup);
	
	self["_$_ComboCover_"] = oChild;
	
	oChild = null;
	
	return;
}

/**
 * @description	미결
 * @param	{object}	control
 * @return	{void}
 * @example	미결
 */
function setComboEditControl(control){
	var comboEdit = self["_$_ComboEdit_"];
	var currentTargetName = comboEdit.getAttribute("target");
	
	if( control.controlName == currentTargetName ){
		if( comboEdit.style.display == "block" )
			return;
	}
	else{
		if( currentTargetName != null && currentTargetName.length > 0 )
			controls[currentTargetName].tagObject.disabled = false;    	
	}
	
	var tagObject = control.tagObject;
	tagObject.disabled = true;
    
	if( tagObject.selectedIndex >= 0 )
		comboEdit.value = tagObject.options[tagObject.selectedIndex].text;
	else
		comboEdit.value = "";
	
	comboEdit.style.left		= (tagObject.offsetLeft + 1) + "px"; 
	comboEdit.style.top			= (tagObject.offsetTop + 1) + "px";
	comboEdit.style.width		= (tagObject.offsetWidth - 24) + "px";
//	comboEdit.style.height		= (tagObject.offsetHeight - 5) + "px";
	comboEdit.style.height		= (tagObject.offsetHeight - 6) + "px";
	comboEdit.style.fontFamily	= getStyleProp(tagObject, "font-family");
	comboEdit.style.fontSize	= getStyleProp(tagObject, "font-size");
	comboEdit.style.display		= "block";
	comboEdit.setAttribute("target", control.controlName);
	
	var parentNode = tagObject.parentNode;
	parentNode.appendChild(comboEdit);
	
	parentNode = null; tagObject = null;
	currentTargetName = null; comboEdit = null;
	
	return;
}

/**
 * @description	미결
 * @param	{object}	control
 * @return	{void}
 * @example	미결
 */
function setcomboDiv(control){
	var comboDiv = control.comboDiv;
	var tagObject = control.tagObject;
	
//	if( comboDiv.parentNode != document.body )
//		document.body.appendChild(comboDiv);
	
	document.body.appendChild(comboDiv);
	
	comboDiv.setAttribute("target", control.controlName);
	comboDiv.style.left			= (getOffsetLeft(tagObject) + 1) + "px";  
	comboDiv.style.top			= (getOffsetTop(tagObject) + tagObject.offsetHeight + 1) + "px";
	comboDiv.style.width		= (tagObject.offsetWidth - 4) + "px";
	comboDiv.style.height		= "240px";
	comboDiv.style.fontFamily	= getStyleProp(tagObject, "font-family");
	comboDiv.style.fontSize		= getStyleProp(tagObject, "font-size");
	comboDiv.style.zIndex		= 9990;
	comboDiv.style.display		= "block";
	
	tagObject = null; comboDiv = null;
	
	return;
}

/**
 * @description	미결
 * @return	{void}
 * @example	미결
 */
function hidecomboDiv(){
	var comboEdit = self["_$_ComboEdit_"];
	var controlName = comboEdit.getAttribute("target");
	
	comboEdit.style.left = "-10000px";
	comboEdit.style.display = "none";
	
	if( typeof controlName == "string" && controlName.length > 0){
		var comboBox = controls[controlName];
		var comboDiv = comboBox.comboDiv;
		
		comboDiv.style.left		= "-10000px";
		comboDiv.style.display	= "none";
		comboDiv.setAttribute("target", "");
		
		comboDiv.parentNode.removeChild(comboDiv);
		
		comboDiv = null;
		comboBox = null;
	}
	
	targetControlName = null; comboEdit = null;
	
	return;
}

/**
 * @description	미결
 * @param	{object}	control
 * @return	{void}
 * @example	미결
 */
function setComboCover(control){
	var comboCover = self["_$_ComboCover_"];
	var currentTargetName = comboCover.getAttribute("target");
	
	if( control.controlName == currentTargetName ){
		if( comboCover.style.display == "block" )
			return;
	}
	else{
		// 직전 콘트롤의 풀어준다 사파리등 상관없이 모두 가능
		if( currentTargetName != null ){
			var control = controls[currentTargetName];
			control.tagObject.disabled = false;
			control = null;
		}
	}
	
	var tagObject = control.tagObject;
	tagObject.disabled = true;
	
	comboCover.style.left		= (tagObject.offsetLeft - 1) + "px";  // ??? 
	comboCover.style.top		= (tagObject.offsetTop - 1) + "px";
	comboCover.style.width		= (tagObject.offsetWidth + 2) + "px";
	comboCover.style.height		= (tagObject.offsetHeight + 2) + "px";
	comboCover.style.display	= "block";
	comboCover.setAttribute("target", control.controlName);
	
	var parentNode = tagObject.parentNode;
	parentNode.appendChild(comboCover);
	
	parentNode = null;
	tagObject = null;
	currentTargetName = null;
	comboCover = null;
	
	return;
}

/**
 * @description	미결
 * @return	{void}
 * @example	미결
 */
function hideComboCover(){
	var comboCover = self["_$_ComboCover_"];
	comboCover.style.left = "-10000px";
	comboCover.style.display = "none";
	
	var controlName = comboCover.getAttribute("target");
	var control = controls[controlName];
	var tagObject = control.tagObject;
	tagObject.disabled = false;
	
	tagObject = null; control = null;
	controlName = null; comboCover = null;
	
	return;
}
/*
 *	Editable ComboBox 
 */



/*
 *	Dataset Binding
 */
ComboBox.prototype._updateLists = function(pLists){
	// functionname : [ComboBox._updateLists]
	
	var listLength = 0;
	
	//예외처리
	if( !(pLists instanceof Array) ) return;
	if( (listLength = pLists.length) == 0) return;
	
	var optItem = null;
	var optObj = null;
	var optStr = "";
	var i = 0;
	
	for(i = 0; i < listLength; i++){
		optItem = pLists[i];
		
		optObj = document.createElement("option");
		optObj.value = optItem.value;
		optObj.text = optItem.text;
		this.tagObject.options.add(optObj);
		
		optStr += "<a onmousedown='sel(event);'>" + optItem.text + "</a>\r\n";
		
		optObj = null;
		optItem = null;
	}
	
	this.comboDiv.innerHTML = optStr;
	
	while(pLists.length > 0){
		optItem = pLists.pop();
		optItem = null;
	}
	
	pLists = null;
	
	return;
};/**
 * @class ListBox를 만들어주는 클래스
 * @constructor Listbox
 * @param controlId
 *            {String} Control의 id를 입니다.
 * @param controlName
 *            {String} Control의 name을 입니다.
 * @param tagObject
 *            {Object} 태그객체 입니다.
 * @example var wControl = controls["ListBox_1"] if(wContorl.errMsg !=null){
 *          //객체 생성에 실패하였습니다. 에러처리 코드를 입력해주세요. } //후속코드생략..
 */
function ListBox(controlId, controlName, tagObject){
	// 상속 선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	// 상수 선언부
	
	// 속성 선언부
	this.value = "";
	this.text = "";
	this.index = -1;
	this.reservedValue = "";
	this.reservedText = "";
	
	this.isKeyControl  = (tagObject.getAttribute("iskeycontrol")  == "true");
	this.isFillControl = (tagObject.getAttribute("isfillcontrol")  == "true");
	this.isClearControl = (tagObject.getAttribute("isclearcontrol")  == "true");
	this.isSeqClearControl = (tagObject.getAttribute("isseqclearcontrol")  == "true");
	this.checkType = parseInt(tagObject.getAttribute("checktype"));
	this.stateClear = false;
	
	// 자체 이벤트 선언부 
    this.hasChangeEvent = false;	this.fncChangeEvent = null;
    this.hasFocusEvent = false;		this.fncFocusEvent = null;
    this.hasBlurEvent = false;		this.fncBlurEvent = null;
    this.hasClearEvent = false;		this.fncClearEvent = null;
    this.hasAddItemEvent = false;	this.fncAddItemEvent = null;
    
	this.hasChangeEvent = (typeof self[this.controlId + "_onchange"] != "undefined");
	if( this.hasChangeEvent ){
		this.fncChangeEvent = new Function("return function(){ return " + this.controlId + "_onchange(); }")();
	}
	this.hasFocusEvent = (typeof self[this.controlId + "_onfocus"] != "undefined");
	if( this.hasFocusEvent ){
		this.fncFocusEvent = new Function("return function(){ return " + this.controlId + "_onfocus(); }")();
	}
	this.hasBlurEvent = (typeof self[this.controlId + "_onblur"] != "undefined");
	if( this.hasBlurEvent ){
		this.fncBlurEvent = new Function("return function(){ return " + this.controlId + "_onblur(); }")();
	}
	this.hasClearEvent = (typeof self[this.controlId + "_onclear"] != "undefined");
    if( this.hasClearEvent ){
    	this.fncClearEvent = new Function("return function(){ return " + this.controlId + "_onclear(); }")();
    }
	this.hasAddItemEvent = (typeof self[this.controlId + "_onadditem"] != "undefined");
	if( this.hasAddItemEvent ){
		this.fncAddItemEvent = new Function("return function(){ return " + this.controlId + "_onadditem(); }")();
	}
	
	// 이벤트 선언부
	setEventHandler(this.tagObject, "keydown", list_KeyDown);
	setEventHandler(this.tagObject, "change", list_Change);
	setEventHandler(this.tagObject, "focus", list_Focus);
	setEventHandler(this.tagObject, "blur", list_Blur);
};

ListBox.prototype = new ControlBase();	// 의미없음 코딩 편의기능을 활용하기 위함

/**
 * @description 태그객체의 ID가 ListBox인것을 찾습니다.
 * @param em
 *            {Object} ID를 찾을 element 입니다.
 * @return 찾은ID를 반환합니다, 에러발생시 undefined를 반환합니다.
 */
function searchControl_ListBox(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var className = null;
	var wReturn = null;
	
//	while (pEm.parentNode && !pEm.className.startsWith("ListBox")) 
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("ListBox") ) 
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && pEm.tagName != "body" && image !== "ListBox"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "ListBox" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("ListBox")) 
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("ListBox") )
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/* 포커스 주기*/
/**
 * @description ListBox포커스를 지정합니다.
 * @return {Boolean} 선택되었으면 true를 반환합니다<br>
 *         에러발생시 undefined를 반환합니다.
 * @example controls["ListBox_1"].focus();
 */
ListBox.prototype.focus = function(){
	// functionname : [ListBox.focus]
	
	var wReturn = true;
	
	try{
		this.tagObject.focus();
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};
/**
 * @description ListBox안의 내용을 추가합니다.
 * @param value
 *            {Object} option의 속값으로 채워질 값
 * @returns {Boolean}
 * @example controls["ListBox"].setValue(value);
 */
ListBox.prototype.setValue = function(value){
	// functionname : [ListBox.setValue]
	
	if( parseInt(1 * value) == 0 && !this.haveZeroValue() )
		value = "";

	var oldValue = this.value;
	var oldText = this.text;
	var oldIndex = this.index;

	var selectedIndex = this.tagObject.selectedIndex;
	var controlvalue = (selectedIndex == -1 ? "" : this.tagObject.options[selectedIndex].value + "");

	if( "" + oldValue == "" + value && "" + controlvalue == "" + value )
		return true;

	var wOptions = this.tagObject.options;
	var found = false;
	
	this.stateClear = true;
	for(var i = 0; i < wOptions.length; i++){
		if( wOptions[i].value == value ){
			wOptions[i].selected = true;
			this.value = value;
			this.text = wOptions[i].text;
			this.index = i;
			found = true;
			break;
		}
	}
	this.stateClear = false;
	
	if( !found ){
		this.reservedValue = value;
		this.value = "";
		this.text = "";
		this.index = -1;
		this.tagObject.selectedIndex = -1;
		
		if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
			var datasetId = null;
			for(var key in this.dataBinds){
				if( typeof this.dataBinds[key] == "function" ) continue;
				if( typeof BindInfo != "undefined" && this.dataBinds[key] instanceof BindInfo ){
					datasetId = this.dataBinds[key].datasetId;
					break;
				}
			}
			if( datasetId != null ){
				dataSets[datasetId].instantUpdateControl = false;
				this._UpdateDataset();
				dataSets[datasetId].instantUpdateControl = true;
			}
		}
		
		return false;
	}
	
	if( !this.checkError() ){
		this.value = oldValue;
		this.text = oldText;
		this.index = oldIndex;
		this.tagObject.value = oldValue;
		if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
		this.tagObject.focus();
		return false;
	}
	
	// dataset 갱신 기능 
	if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" )
		this._UpdateDataset();
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasChangeEvent ){
			var result = this.fncChangeEvent();
			if( result === false ){
				this.value = oldValue;
				this.text = oldText;
				this.index = oldIndex;
				this.tagObject.value = oldValue;
				this.tagObject.focus();
				return false;
			}
		}
	}
	
	// 관련객체 프로퍼티 채우기
	// this.setLinkedProperties(value, 2);
	/*
	// 데이터 가저오기
	if (this.value != -1){
	    if (this.isKeyControl){
	        if (this.isFillControl){
	        	mustFillScreenAfterLoad = true;
	        }
	        objectManager.fillkeyFieldValue = this.value;
	     	objectManager.loadData();
	    }
	    
	    // 데이터 채우기
	    if (!this.isKeyControl && this.isFillControl){
	    	objectManager.fillData();
	    }
	}
	*/
	
	return true;
};

/**
 * @description	미결
 * @param		{Object}	value
 * @returns		{Boolean}
 * @example 	미결
 */
ListBox.prototype.setValueToDefault = function(){
	// functionname : [ListBox.setValueToDefault]
	
	var wOptions = this.tagObject.options;
	
	if( wOptions.length == 0 )
		return true;
	
	if( this.defaultValue.length == 0 ){
		this.setValue("");
		return false;
	}
	
	var value = this.defaultValue;
	
	if( parseInt(1 * value) == 0 && !this.haveZeroValue() ){
		this.setValue("");
		return false;
	}
	
	return this.setValue(this.defaultValue);
};

/**
 * @description ListBox의 겉값으로 사용될 문자를 지정된 문자로 설정합니다.
 * @param text
 *            {String} 겉값으로 보여질 문자.
 * @return {Boolean} 문자열 설정 성공시 true,실패시 false를 반환 합니다.
 * @example controls["ListBox_1"].setText(text);
 */
ListBox.prototype.setText = function(text){
	// functionname : [ListBox.setText]
	
	var oldValue = this.value;
	var oldText = this.text;
	var oldIndex = this.index;
	
	if( oldText == text )
		return true;
	
	var wOptions = this.tagObject.options;
	var found = false;
	
	for(var i = 0; i < wOptions.length; i++){
		if( wOptions[i].text == text ){
			wOptions[i].selected = true;
			this.text = (i == 0 ? "" : text);
			this.value = wOptions[i].value;
			this.index = i;
			found = true;
			break;
		}
	}
	
	if( !found ){
		this.reservedText = text;
		this.value = "";
		this.text = "";
		this.index = -1;
		this.tagObject.selectedIndex = -1;
		
		if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
			var datasetId = null;
			for(var key in this.dataBinds){
				if( typeof this.dataBinds[key] == "function" ) continue;
				if( typeof BindInfo != "undefined" && this.dataBinds[key] instanceof BindInfo ){
					datasetId = this.dataBinds[key].datasetId;
					break;
				}
			}
			if( datasetId != null ){
				dataSets[datasetId].instantUpdateControl = false;
				this._UpdateDataset();
				dataSets[datasetId].instantUpdateControl = true;
			}
		}
		
		return false;
	}
	
	if( !this.checkError() ){
		this.value = oldValue;
		this.text = oldText;
		this.index = oldIndex;
		this.tagObject.value = oldValue;
		if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
		this.tagObject.focus();
		return false;
	}

	// dataset 갱신 기능 
	if (typeof(ControlBase.prototype._UpdateDataset) != "undefined"){
		this._UpdateDataset();
	}
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasChangeEvent ){
			var result = this.fncChangeEvent();
			if( result === false ){
				this.value = oldValue;
				this.text = oldText;
				this.index = oldIndex;
				this.tagObject.value = oldValue;
				if( !this.passEvent && typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) this._UpdateDataset();
				this.tagObject.focus();
				return false;
			}
		}
	}
	
	// 관련객체 프로퍼티 채우기
	// this.setLinkedProperties(text, 1);
	/*
	// 데이터 가저오기
	if (this.isKeyControl){
	    if (this.isFillControl){
	    	mustFillScreenAfterLoad = true;
	    }
	    objectManager.fillkeyFieldValue = this.value;
	 	objectManager.loadData();
	}
	
	// 데이터 채우기
	if (!this.isKeyControl && this.isFillControl){
		objectManager.fillData();
	}
	*/
	
	return true;
};
/**
 * @description ListBox에 option을 추가합니다.
 * @param pText
 *            {String} 겉으로 보여질 문자열을 받아옵니다.
 * @param pData
 *            {Integer} 속값으로 채워질 값을 받아옵니다.
 * @return 반환값없음, 에러발생시 undefined를 반환합니다.
 * @example controls["ListBox"].addItem("text",data);
 */
ListBox.prototype.addItem = function(pText, pData){
	// functionname : [ListBox.addItem]
	
	var opt = document.createElement("option");
	opt.value = pData;
	opt.text = pText;
	
	this.tagObject.options.add(opt);
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasAddItemEvent ){
			this.fncAddItemEvent();
		}
	}
};
/**
 * @description	미결
 * @param		{String}	pText
 * @param		{Objert}	pData
 * @param		{Object}	pIndex
 * @return		{undefined}
 * @example		미결
 */
ListBox.prototype.insertItem = function(pText, pData, pIndex){
	// functionname : [ComboBox.insertItem]

    var opt = document.createElement("option");
    opt.value = pData;
    opt.text = pText;
    
    //인덱스가 0보다 큰 자연수가 아니라면 맨 끝에 항목 추가
    var isNumRegx = /^\d+$/;
    if( !isNumRegx.test(pIndex + "") ){
    	this.tagObject.options.add(opt);    	
    }
    else{
    	this.tagObject.insertBefore(opt, this.tagObject.childNodes[pIndex]);
    }
    
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasAddItemEvent ){
			this.fncAddItemEvent();
		}
	}
};

/**
 * @description 리스트에있는 해당목록을 지웁니다.
 * @param pData
 *            {Object} option에서 지워질 값입니다.
 * @return 반환값 없음, 에러발생시 undefined를 반환합니다
 * @example controls["ListBox"].removeItem(Data);
 */
ListBox.prototype.removeItem = function(pData){                  
	// functionname : [ListBox.removeItem]
	
	var wOptions =  this.tagObject.options;

	for(var i = wOptions.length - 1; i >= 0; i--){
		if( ("" + pData).length > 0 && wOptions[i].value == pData ){
			wOptions.remove(i);
			break;
		}
	}
};

/**
 * @description	미결
 * @param		{Object}	pData
 * @param		{Object}	objectId
 * @return		{Object}
 * @example		미결
 */
ListBox.prototype.textOfData = function(pData, objectId){
	// functionname : [ListBox.textOfData]
	
	var wReturn = "";
	var i = 0;
	
	/*
	var checkEvent = false;
	try {
		if (eval("getCasheKey_" + this.controlId)) checkEvent = true;
	} catch(e){}
	
	if (checkEvent){
		var recordsetKey = "fillList_" + this.controlId;
	    var casheKey = eval("getCasheKey_" + this.controlId + "(objectId);");
	    var wArrKey = casheKey.split(":");
	    
	    // SQL번호만 있는 경우 콜론을 붙여준다
	    if (casheKey.indexOf(":") < 0) casheKey += ":";
        
	    var recordset = getRecordsetByKey(recordsetKey);
	    if (recordset.casheKey != casheKey){
	        var dataCashe = dataCashes[casheKey];
	        
	        if (dataCashe == undefined){
	        	// casheMode가 설정되면 리스트는 갱신안되고 캐시에만 저장된다
	        	recordset.casheMode = true;
	    		recordset.sqlnum = wArrKey[0];
                
	        	for (var i=1; i < wArrKey.length; i++){
		    		recordset.setParameter("param" + i, wArrKey[i]);
	        	}
	        	// syncMode로 호출 된다
	    		recordset.open();
	    		// 호출후 recordsetKey + "_OnReceive"가 수행된다
	    		
	    		recordset.casheMode = false; 
	    		dataCashe = dataCashes[casheKey];
	        }
	        else{
	        	for (i = 0; i < dataCashe.rowCount; i++){
	        		if (dataCashe.fields[0].datas[i] == pData){
	        			wReturn = dataCashe.fields[1].datas[i];
	        			break;
	        		}
	        	}
	        	
	        	return wReturn; 	        	
	        }
	    }
	}
	*/
	
	var wOptions = this.tagObject.options;
    
	for(i = wOptions.length - 1; i >= 0; i--){
		if( ("" + pData).length > 0 && wOptions[i].value == pData ){
			wReturn = wOptions[i].text;
			break;
		}
	}
	
	return wReturn;
};
/**
 * @description 리스트의 option의 갯수를 반환합니다.
 * @returns {Integer} 리스트의 갯수를 반환합니다.
 * @example controls["ListBox_1"].listCount();
 */
ListBox.prototype.listCount = function(){
	// functionname : [ListBox.listCount]
	
	return this.tagObject.options.length;
};
/**
 * @description 리스트박스의 내용을 모두 지웁니다.
 * @return {boolean} 성공시true를 반환합니다.
 * @example controls["ListBox_1"].clear();
 */
ListBox.prototype.clear = function(){
	// functionname : [ListBox.clear]

	var wOptions =  this.tagObject.options;
	
	this.stateClear = true;
	for(var i = wOptions.length - 1 ; i >= 0; i--){
		wOptions.remove(i);
	}
	this.stateClear = false;
	
	this.value= "";
	this.text= "";
	this.index = -1;

	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasClearEvent ){
			var result = this.fncClearEvent();
			if( typeof(result) == "boolean" )
				return result;
		}
	}
	
	return true;
};
/**
 * @description 가져오기로 리스트박스의 내용을 채웁니다.
 * @param recordset{Object}
 * @return 반환값없음
 * @example control["ListBox_1"].setList(recordset);
 */
ListBox.prototype.setLists = function(recordset){
	// functionname : [ListBox.setLists]
	
	// 화면에 없는 데이터 가저오기인 경우
	if( recordset.casheMode ) return;
	
	this.clear();
	
	if( recordset.fields.length == 1 ){
		while(!recordset.EOF){
			this.addItem(recordset.fields[0].value(), recordset.fields[0].value());
			recordset.moveNext();
		}
	}
	else{
		while(!recordset.EOF){
			this.addItem(recordset.fields[1].value(), recordset.fields[0].value());
			recordset.moveNext();
		}
	}
	
	recordset.close();
	
	if( this.reservedValue != "" ){
		this.value = "";
    	this.text = "";
    	this.index = -1;
		this.setValue(this.reservedValue);
	}
	else if( this.reservedText != "" ){
		this.value = "";
    	this.text = "";
    	this.index = -1;
    	this.setText(this.reservedText);
	}
	else if( this.value != "" ){
		this.setValue(this.value);
	}
	else{
		this.setValueToDefault();
	}
	
	this.reservedValue = "";
	this.reservedText = "";
		
	return true;
};

//화면로드시만 일어나는 기능으로 디폴트값선택등 추가기능은 생략
/**
 * @description	미결
 * @param		{String}	listsStr
 * @param		{String}	itemsStr
 * @return		{Boolean}
 * @example		미결
 */
ListBox.prototype.setDefaultLists = function(listsStr, itemsStr){
	// functionname : [ListBox.setDefaultLists]
	
	if( itemsStr == undefined || itemsStr.trim().length == 0 ){
		//itemsStr = listsStr;
	}
	
	var wOptions = null;
	var i = 0;
	
	if( this.listCount() > 0 ){
		wOptions = this.tagObject.options;
		
		for(var i = 0; i < wOptions.length; i++){
			listsStr += "," + wOptions[i].text;
			itemsStr += "," + wOptions[i].value;
		}
	}
	
	var arrayLists = listsStr.split(",");
	var arrayItems = itemsStr.split(",");

	this.clear();
	
	for(i = 0; i < arrayLists.length; i++){
		//if (i == 0) this.value = arrayItems[i]; // 초기값 셋팅
		this.addItem(arrayLists[i], arrayItems[i]);
	}
	
	this.setValueToDefault();

//	this.reservedValue = "-1";
//	this.reservedText = "";
	
	this.reservedValue = "";
	this.reservedText = "";
	
	return true;
};

ListBox.prototype.haveZeroValue = function(){
	// functionname : [ListBox.haveZeroValue]
	
	var wReturn = false;
	var wOptions =  this.tagObject.options;
	
	for(var i = wOptions.length - 1; i >= 0; i--){
		if( wOptions[i].value == "0" ){
			wReturn = true; break;
		}
	}
	
	return wReturn;
};

/**
 * @description	미결
 * @name		Listbox#list_Focus
 * @event
 * @returns		{Boolean}
 */
function list_Focus(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_ListBox(em);
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasFocusEvent ){
			var result = this.fncFocusEvent();
			if( typeof(result) == "boolean" )
				return result;
		}
	}
	
	return true;
}

/**
 * @description	미결
 * @name		Listbox#list_Blur
 * @event
 * @returns		{Boolean}
 */
function list_Blur(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_ListBox(em);
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasBlurEvent ){
			var result = this.fncBlurEvent();
			if( typeof(result) == "boolean" )
				return result;
		}
	}
	
	return true;
}
/**
 * @description	미결
 * @name		Listbox#list_Change
 * @event
 * @returns		{Boolean}
 */
function list_Change(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_ListBox(em);
	
	if( control.stateClear )
		return false;
	
	var wOptions = (navigator.userAgent.indexOf('Firefox') >= 0 ? em.parentNode.options : em.options);
	
	var oldValue = control.value;
	var oldText = control.text;
	var oldIndex = control.index;
	var newValue = "";
    var newText = "";
    var newIndex = -1;
    var i = 0;
	
	for(i = 0; i < wOptions.length; i++){
		if( wOptions[i].selected == true ){
			newValue  = wOptions[i].value;
			newText = wOptions[i].text;
			newIndex = i;
			break;
		}
	}
	
	if( "" + oldValue == "" + newValue )
		return true;
	
	control.value = newValue;
	control.text = newText;
	control.index = newIndex;
	
	// dataset 갱신 기능 
	if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
		control._UpdateDataset();
	}
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasChangeEvent ){
			var result = this.fncChangeEvent();
			if( result === false ){
				control.value = oldValue;
				control.text = oldText;
				control.index = oldIndex;
				control.tagObject.value = oldValue;
				if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ) control._UpdateDataset();
				return false;
			}
		}
	}
	
	return true;
};

/*
function list_KeyDown(){ 
	var wKeyCode = event.keyCode;
	
	if (wKeyCode == 13) event.keyCode = 9;
	return true;
};
*/

/**
 * @description	미결
 * @name		Listbox#list_KeyDown
 * @event
 * @returns		{Boolean}
 */
function list_KeyDown(e){
	//F5새로고침 방지 추가
	if( e.keyCode == 116 ){
		if( typeof e.preventDefault == "function" )
			e.preventDefault();
		else
			e.returnValue = false; // for IE
		
		return false;
	}  
	
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_ListBox(em);
	var wKeyCode = e.keyCode;
	
	if( wKeyCode == 9 ){
		if( getShiftKeyPressed(e) ){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
			return true;
		}
		else{
			stopEvent(e);
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			return true;
		}
	}
	else if( wKeyCode == 13 ){
		stopEvent(e);
		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
		return true;
	}
	
	stopPropagation(e);
	
	// e.returnValue = true;
	
	return true;
};



/*
 *	Dataset Binding
 */
ListBox.prototype._updateLists = function(pLists){
	// functionname : [ListBox._updateLists]
	
	var listLength = 0;
	
	//예외처리
	if( !(pLists instanceof Array) ) return;
	if( (listLength = pLists.length) == 0) return;
	
	var optItem = null;
	var optObj = null;
	var optStr = "";
	var i = 0;
	
	for(i = 0; i < listLength; i++){
		optItem = pLists[i];
		optObj = document.createElement("option");
		optObj.value = optItem.value;
		optObj.text = optItem.text;
		
		this.tagObject.options.add(optObj);
		
		optObj = null;
		optItem = null;
	}
	
	optObj = null;
	optItem = null;
	
	while(pLists.length > 0){
		optItem = pLists.pop();
		optItem = null;
	}
	pLists = null;
	
	return;
};/**
 *   @autor   winnersoft korea
 *   @version 5.0
 *   @see     winnersoft.co.kr
 *   
 * @description 미결
 * 
 * @constructor
 * 
 * @param {string} 	 controlId 	 - 콘트롤 고유 아이디 (영문)
 * @param {string} 	 controlName - 콘트롤 명 (사용자 고유 언어)
 * @param {HTMLNode} tagObject   - HTML 본문중의 매칭되는 HTML DOM Node. 
 * @return {Object} - 생성된 EasySheet 개체
 * @exception 널값 예외
 * @example 미결
 * 
 */
function ListBoxW(controlId, controlName, tagObject){
	// xsl만들때 listType 타입할떄 그대로 사용.
	// 상속 선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	this.listType = LISTBOX_TYPE_SINGSELECT;		// 1 = singselect , 2 = multiselect , 3 = checkselect , 4 = dataselect 
    if (tagObject.className=="ListBoxA"){
    	this.listType = LISTBOX_TYPE_SINGSELECT;
    } else if (tagObject.className=="ListBoxB"){
    	this.listType = LISTBOX_TYPE_MULTISELECT;
    } else if (tagObject.className=="ListBoxC"){
    	this.listType = LISTBOX_TYPE_CHECKSELECT;
    } else if (tagObject.className=="ListBoxD"){
    	this.listType = LISTBOX_TYPE_DATASELECT;
    }
    this.listSaveType = (tagObject.getAttribute("listsavetype") == "" ? 0 : parseInt(tagObject.getAttribute("listsavetype")));
    this.numericInnerType = (tagObject.getAttribute("numericinnertype") == null || tagObject.getAttribute("numericinnertype") == "true");
    this.VALUE_WHEN_NOT_SELECTED = (this.listType == LISTBOX_TYPE_DATASELECT || !this.numericInnerType ? "" : "-1");
    
    // 자식객체생성
    this.options = new Options(tagObject, this.listType);
    
    // 속성 선언부
    this.currentIndex = 0;        // 최종적으로 선택된 항목을 가르킨다. [0 부터 시작]
    this.critIndex = 0;           // Shift의 경우 범위를 주기위해 활용. 범위의 첫 인덱스
    this._hasBlankItem = false;
    this.inputMode = DATALISTBOX_SETITEM;

    this.value = this.VALUE_WHEN_NOT_SELECTED;
    this.text = "";
    this.tag = "";
    this.subPath = "";
    this.noftp = false;
    this.nozip = false;

    this.reservedValue = this.VALUE_WHEN_NOT_SELECTED;
    this.isKeyControl  = (tagObject.getAttribute("iskeycontrol")  == "true");
    this.isFillControl = (tagObject.getAttribute("isfillcontrol")  == "true");
    this.isClearControl = (tagObject.getAttribute("isclearcontrol")  == "true");
    this.isSeqClearControl = (tagObject.getAttribute("isseqclearcontrol")  == "true");
    
    this.checkType = parseInt(tagObject.getAttribute("checktype"));
    
    // 이벤트 선언부
    this.listDIV = null;
    var  childDIV = this.listDIV = this.tagObject.getElementsByTagName("div")[0];
    setEventHandler(this.tagObject, "click",    ListBoxW_onclick);
    setEventHandler(this.tagObject, "keydown",  ListBoxW_KeyDown);
    setEventHandler(this.tagObject, "focus",    ListBoxW_Focus);
    setEventHandler(this.tagObject, "blur",     ListBoxW_Blur);
    
    // 리스트 최상단 메시지 설정, 리스트 타입별 동작 설정
    // 1. 데이터 리스트 타입은 데이터가 미리 채워진 경우는 없으며 메시지 한줄을 먼저 추가한다
    if (this.listType == LISTBOX_TYPE_DATASELECT){
    	// 더블클릭시 파일을 다운하기 위한 이벤트 설정
        setEventHandler(childDIV, "dblclick", ListBoxW_Dblclick);
        
        this.value= ""; this.text= "";
        
        // 데이터 리스트인 경우 화면의 시퀀스 1에 맞추기 위하여 기본적으로 하나의 레코드는 넣어준다
        //this.options.add(new Option("", "(선택하세요)"));
        //this._hasBlankItem = true;
        this.currentIndex = this.options.length - 1;
        this._hasBlankItem = false;
        
    // 단일항 선택타입인 경우 선택안함으로 취소할 수 있도록 헤준다    
    } else if(this.listType == LISTBOX_TYPE_SINGSELECT){
//    	if (this.options.length > 0){
//    		this.options.setItem(0, this.VALUE_WHEN_NOT_SELECTED, "(선택안함)")
//    	} else {
//            this.options.add(new Option(this.VALUE_WHEN_NOT_SELECTED, "(선택안함)"));
//    	}
    	
    // 다항선택과 체크항 선택의 경우에는 디폴트항이 필요없다. 토글해서 선택 안하면 된다.    
    } else if(this.listType == LISTBOX_TYPE_MULTISELECT || this.listType == LISTBOX_TYPE_CHECKSELECT){
//    	if (this.options.length > 0){
//    		this.options.remove(0)
//    	}
    } 
};

ListBoxW.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함
/**
 * @description	미결
 * @param		{Object}	em
 * @return		{String}
 * @example		미결
 */
function searchControl_ListBoxW(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	var classNames = ["ListBoxA", "ListBoxB", "ListBoxC", "ListBoxD"];
	
//	while(pEm.parentNode && classNames.indexOf(pEm.className) < 0)
//		pEm = pEm.parentNode;
//	if( classNames.indexOf(pEm.className) >= 0 )
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && classNames.indexOf(image) < 0){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( classNames.indexOf(image) >= 0 ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && classNames.indexOf(pEm.className) < 0)
			pEm = pEm.parentNode;
		
		if( classNames.indexOf(pEm.className) >= 0 )
			wReturn = getControlById(pEm.id);
	}
	
	classNames.clear(); classNames = null;
	image = null;
	pEm = null;
	
	return wReturn;
};

//자식
/**
 * @description	미결
 * @param		{String}	value
 * @param		{String}	text
 * @return		{String}
 * @example		미결
 */
function Option(value,text){
  this.value = value;
  this.text = text;
  this.selected = false;
  this.objectSeq = 0;
};

//부모
/**
 * @description	미결
 * @param		{Object}	tagObject
 * @param		{Object}	listType
 * @return		{undefined}
 * @example		미결
 */
function Options(tagObject, listType){
    this.length = 0;
    this.items = [];
    this.tagObject = tagObject;
    this.controlName = tagObject.getAttribute("ctlname");
    this.listDIV = this.tagObject.getElementsByTagName("div")[0];
    this.listType =listType;
    
    // tagObject 속의 최초 option 채우기
    var wOptions = this.tagObject.getElementsByTagName("div")[0].getElementsByTagName("div");
    for (var i = 0; i < wOptions.length; i++){
        var opt = wOptions[i];
        var wText = (BrowserDetect.browser == "Firefox" ? opt.textContent : opt.innerText);
        
        this.items[i] = new Option(opt.getAttribute("value"), wText);
        this.length++;
    } 
};

// Option 아이템 추가
/**
 * @description	미결
 * @param		{object}	option
 * @return  	{void}
 * @example		미결
 */
Options.prototype.add = function(option){
	// functionname : [ListBox.Options.add]
	
	this.items[this.length++] = option;
	
	if( this.listType == LISTBOX_TYPE_CHECKSELECT ){
		// 테그만들기
		var childDIV = document.createElement("div");
		
		childDIV.setAttribute("value", option.value);
		childDIV.setAttribute("top","1px");            
		childDIV.innerHTML = "<input type=\"checkbox\" style=\"height:12px;cursor: pointer;\" />" + option.text;
		childDIV.style.height="15px";
		childDIV.style.width=this.listDIV.style.width;
		childDIV.style.cursor = "pointer";
		childDIV.style.textOverflow = "ellipsis";
		childDIV.style.overflow = "hidden";
		
		// 태그 붙이기
		this.listDIV.appendChild(childDIV);
	}
	else{
		// 테그만들기
		var childDIV = document.createElement("div");
		
		childDIV.innerHTML = option.text;
		childDIV.setAttribute("value", option.value);
		childDIV.setAttribute("top","1px");
		childDIV.style.height="15px";
		childDIV.style.width=this.listDIV.style.width;
		childDIV.style.cursor = "pointer";
		childDIV.style.textOverflow = "ellipsis";
		childDIV.style.overflow = "hidden";
		
		// 태그 붙이기
		this.listDIV.appendChild(childDIV);
	}
	
	return;
};

// Options 아이템 삭제 ??? 0 부터인지 체크 
/**
 * @description	미결
 * @param		{String}	index
 * @return  	{void}
 * @example		미결
 */
Options.prototype.remove = function(index){
	// functionname : [ListBox.Options.remove]
	
	this.items[index] = null;
	this.items.splice(index, 1);
	this.length-- ;
	
	// 자식div찾기  자식div지우기
	var childDIV = this.listDIV.getElementsByTagName("div")[index];
	
	if( typeof childDIV != "undefined" ){
		this.listDIV.removeChild(childDIV);
	}
	
	return;
};


//강제로 Options 아이템 값,텍스트 바꾸기
/**
 * @description	미결
 * @param		{String}	index
 * @param		{String}	value
 * @param		{string}	text
 * @return 		{void}
 * @example		미결
 */
Options.prototype.setItem = function(index, value, text){
	this.items[index].value = value;
	this.items[index].text = text;
	
	var childDIV = this.listDIV.getElementsByTagName("div")[index];
	
	if( this.listType == LISTBOX_TYPE_CHECKSELECT ){
		childDIV.setAttribute("value", option.value);
		childDIV.innerHTML = "<input type=\"checkbox\" style=\"height:12px;cursor: pointer;\" />" + text;
	}
	else{
		childDIV.setAttribute("value", value);
		childDIV.innerHTML = text;
	}
	
	return;
};

/* 포커스 주기*/
/**
 * @description	미결
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.focus = function(){
	// functionname : [ListBox.focus]
	
	var wReturn = true;
	
	try{
		this.listDIV.focus();
		this.selectItem(this.currentIndex);
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};

/**
 * @description	미결
 * @param		{String}	value
 * @param		{boolean}	needUpdateDataset
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.setValue = function(value, needUpdateDataset){
	// functionname : [ListBox.setValue]
    
	// 데이터리스트는 setValue 메서드를 허용하지 않고 오직 addItem만으로 값을 넣는다
	// 단일레코드로 저장하는 타입인 경우 setValue 메서드로 리스트목록을 채운다.
	if( this.listType == LISTBOX_TYPE_DATASELECT ){
		if( this.listSaveType == LISTBOX_SAVE_SINGLE ){
			if( "" + this.value == "" + value ) return false;
			
			var arrStrings = ("" + value).split(",");
			
			for(var i = 0; i < arrStrings.length; i++){
				if( arrStrings[i].length == 0 ) continue;
				var text = (hasTimeEncodeString(arrStrings[i]) ? timeDecodeString(arrStrings[i]) : arrStrings[i]);
				this.addItem(text, arrStrings[i]);
			}
		}
		
		return true;
	}
	
	if( parseInt(1 * value) == 0 && !this.haveZeroListValue() ){
		value = this.VALUE_WHEN_NOT_SELECTED;
	}
	
	// 멀티선택이나 체크선택의 경우 디폴트값이 목록에 없다. 따라서 클리어 처리 해 주어야 한다
	if( this.listType == LISTBOX_TYPE_MULTISELECT || this.listType == LISTBOX_TYPE_CHECKSELECT ){
		if( value == this.VALUE_WHEN_NOT_SELECTED ){
			this.clearSelection();
			return true;
		}
	}
	
	var oldValue = this.value;
	var oldText = this.text;
	
	if( "" + oldValue == "" + value )
		return true;
	
	// 값을 주려는 데 콘트롤이 아직 채워 지지 않았다.
	if( !this.valueFound(value) ){
		this.reservedValue = value;
		return false;
	}
	
	//임시로 콘트롤 값을 채우고(콘트롤 외양은 변화없음) 오류체크
	this.value = value;
	this.text = this.getTextLinked();
	
	if( !this.checkError() ){
		this.value = oldValue;
		this.text = oldText;
		this.focus();
		return false;
	}
	
	// 사용자 코딩 추가영역을 호출한다
	this.raiseChangeEvent();
	
	// 콘트롤의 보이는 모습을 갱신한다. 
	this.clearSelection();			// 선택을 모두 해제하고 
	this.setValueLinked(value);		// 새로운 항목만 선택
	
	// dataset 갱신 기능 
	if( typeof needUpdateDataset == "undefined" || needUpdateDataset == true ){
		if( this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI ){
			if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
				this._UpdateDataset(this.currentIndex + 1);
			}
		}
	}
	
	return true;
};

/**
 * @description	미결
 * @return 		{boolean}
 * @example		미결
 */
ListBoxW.prototype.raiseChangeEvent = function(){
	// functionname : [ListBox.raiseChangeEvent]
	
	var checkEvent = false;
	
	try{
		if( eval(this.controlId + "_onchange") ) checkEvent = true;
	} catch(e){}
	
	if( checkEvent ){
		var result = eval(this.controlId + "_onchange();");
		if( typeof(result)=="boolean" ){
			if( result == false ){
				this.value = oldValue;
				this.text = oldText;
				this.focus();
				return false;
			}
		}
	}
};

/**
 * @description	미결
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.setValueToDefault = function(){
    // functionname : [ListBox.setValueToDefault]
	
    if (this.options.length == 0) return false;	
	
	if (this.defaultValue.length==0){
	    this.setValue(this.VALUE_WHEN_NOT_SELECTED);
        return true;
	}
	var value = this.defaultValue;
	
	if (parseInt(1 * value) == 0 && !this.haveZeroListValue()){
		this.setValue(this.VALUE_WHEN_NOT_SELECTED);
        return true;
	}
	
	this.setValue(this.defaultValue);

    return true;
};

/* 겉값주기*/
/**
 * @description	미결
 * @param		{string}	text
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.setText = function(text){
    // functionname : [ListBox.setText]   
	
	// 데이터리스트는 setText 메서드를 허용하지 않고 오직 addItem만으로 값을 넣는다
    if (this.listType == LISTBOX_TYPE_DATASELECT){
   	    return true;
    }

	// 멀티선택이나 체크선택의 경우 디폴트값이 목록에 없다. 따라서 클리어 처리 해 주어야 한다
	if (this.listType == LISTBOX_TYPE_MULTISELECT || this.listType == LISTBOX_TYPE_CHECKSELECT){
		if (text == ""){
			this.clearSelection();   
			// clearSelection내에도 value, text값을 재 설정하는 기능이 있다
			// 아래 로직을 타지 않아도 좋다
	    	return true;
		}
	}


	var oldValue = this.value; var oldText = this.text;
    if (oldText == text) return true;
    

    if (!this.textFound(text)) {
        // 리스트에 값을 주려는 데 콘트롤이 아직 채워 지지 않았다.
    	return false;
    } 

    //임시로 콘트롤 값을 채우고(콘트롤 외양은 변화없음) 오류체크
    this.text = text;
	this.value = this.getValueLinked();

    if (!this.checkError()){
 	    this.value = oldValue;  this.text = oldText;
 	    this.focus();
    	return false;
    }

    // 사용자 코딩 추가영역을 호출한다
	var checkEvent = false;
	try {
    	if (eval(this.controlId + "_onchange")) checkEvent = true;
    } catch(e){}
    
    if (checkEvent){
	   var result = eval(this.controlId + "_onchange();");
       if (typeof(result)=="boolean"){
    	   if (result==false){
        	   this.value = oldValue;  this.text = oldText;
        	   this.focus();
    	       return false;
    	   }
       }
    }

    // 콘트롤의 보이는 모습을 갱신한다. 
    this.clearSelection();                   // 선택을 모두 해제하고 
    this.setTextLinked(text);                // 새로운 항목만 선택

	// dataset 갱신 기능 
    if (typeof needUpdateDataset == "undefined" || needUpdateDataset == true){
    	if (this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI){
    		if (typeof(ControlBase.prototype._UpdateDataset) != "undefined"){
    			this._UpdateDataset(this.currentIndex + 1);
    		}
    	}
    }
    
    
    return true;
};

/* 값추가하기*/ 
/**
 * @description	미결
 * @param		{string}	pText
 * @param		{String}	pData
 * @param		{boolean}	needUpdateDataset
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.addItem = function(pText, pData, needUpdateDataset){
    // functionname : [ListBox.addItem]
    
    // 데이터 리스트에서 빈레코드가 있는 경우 빈레코드를 없에고 항목을 추가한다                   
    if (this.listType == LISTBOX_TYPE_DATASELECT && this._hasBlankItem){
        var wOptions =  this.options;
        for (var i = wOptions.length - 1 ; i >= 0; i--){
            wOptions.remove(i, false);  // false: needUpdateDataset
        }
    }

    this.options.add(new Option(pData, pText));
    this.currentIndex = this.options.length - 1;
    this._hasBlankItem = false;
    
    if (this.listType == LISTBOX_TYPE_DATASELECT){
        // 데이터를 채우는 중에는 루핑을 방지하기 위하여 항목추가이벤트를 일으키지 않음
        if (this.inputMode == DATALISTBOX_SETDATA) return;

        // 데이터 리스트인 경우 additem이벤트에서 객체를 처리하기 위하여 값을 갱신함
        if (this.listSaveType == LISTBOX_SAVE_SINGLE){
            this.text = this.getValueLinked(true); 
            this.value = this.getTextLinked(true);
            this.raiseChangeEvent();
            
        } else if (this.listSaveType == LISTBOX_SAVE_MULTI){
            this.text = pText; this.value = pData;
        }
    }

    var checkEvent = false;
	try {
	    if (eval(this.controlId + "_onadditem")) checkEvent = true;
	} catch(e){}
	    
	if (checkEvent){
	     var result = eval(this.controlId + "_onadditem(" + this.currentIndex + ")");
	}
	
	// dataset 현재줄 추가 기능 
    if (typeof needUpdateDataset == "undefined" || needUpdateDataset == true){
    	if (this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI){
    		if (typeof(ControlBase.prototype._UpdateDatasetAddRow) != "undefined"){
    			this._UpdateDatasetAddRow();
    			this._UpdateDataset(this.currentIndex + 1);
    		}
    	}
    }
	
    return ;
};

/**
 * @description	미결
 * @param		{String}	pData
 * @param		{string}	objectId
 * @return  	{string}
 * @example		미결
 */
ListBoxW.prototype.textOfData = function(pData, objectId){
	// functionname : [ListBox.textOfData]

	var wReturn = "";
    var i = 0;
	               	
	var checkEvent = false;
	try {
		if (eval("getCasheKey_" + this.controlId)) checkEvent = true;
	} catch(e){}
	
	if (checkEvent){
		var recordsetKey = "fillList_" + this.controlId;
	    var casheKey = eval("getCasheKey_" + this.controlId + "(objectId);");
	    var wArrKey = casheKey.split(":");
	    
	    // SQL번호만 있는 경우 콜론을 붙여준다
	    if (casheKey.indexOf(":") < 0) casheKey += ":";
        
	    var recordset = getRecordsetByKey(recordsetKey);
	    if (recordset.casheKey != casheKey){
	        var dataCashe = dataCashes[casheKey];
	        
	        if (dataCashe == undefined){
	        	// casheMode가 설정되면 리스트는 갱신안되고 캐시에만 저장된다
	        	recordset.casheMode = true;
	    		recordset.sqlnum = wArrKey[0];
                
	        	for (var i=1; i < wArrKey.length; i++){
		    		recordset.setParameter("param" + i, wArrKey[i]);
	        	}
	        	// syncMode로 호출 된다
	    		recordset.open();
	    		// 호출후 recordsetKey + "_OnReceive"가 수행된다
	    		
	    		recordset.casheMode = false; 
	    		dataCashe = dataCashes[casheKey];
	        }
	        for (i = 0; i < dataCashe.rowCount; i++){
	       	    if (dataCashe.fields[0].datas[i] == pData){
	       		    wReturn = dataCashe.fields[1].datas[i];
	                break;
	            }
	        }
	       
	        return wReturn; 
	    }
	}

    var wOptions =  this.options;
    for (i = wOptions.items.length - 1; i >= 0; i--){
    	if (("" + pData).length > 0 && wOptions[i].items.value == pData){
    		wReturn = wOptions.items[i].text;
            break;
        }
    }
    
    return wReturn;
};


/* 값수정하기*/
/**
 * @description	미결
 * @param		{string}	pText
 * @param		{String}	pData
 * @param		{boolean}	needUpdateDataset
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.updateItem = function(pText, pData, needUpdateDataset){
    // functionname : [ListBox.addItem]
    
    this.currentIndex = this.indexOfText(pText);
    this.options.items[this.currentIndex].value = pData;
    
    // 데이터 리스트인 경우 updateitem이벤트에서 객체를 처리하기 위하여 값을 갱신함
    if (this.listSaveType == LISTBOX_SAVE_SINGLE){
        this.text = this.getValueLinked(true); 
        this.value = this.getTextLinked(true);
        this.raiseChangeEvent();
        
    } else if (this.listSaveType == LISTBOX_SAVE_MULTI){
        this.text = pText; this.value = pData;
    }

    var checkEvent = false;
	try {
	    if (eval(this.controlId + "_onupdateitem")) checkEvent = true;
	} catch(e){}
	    
	if (checkEvent){
	     var result = eval(this.controlId + "_onupdateitem(" + this.currentIndex + ")");
	}

	// dataset 갱신 기능 
    if (typeof needUpdateDataset == "undefined" || needUpdateDataset == true){
    	if (this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI){
    		if (typeof(ControlBase.prototype._UpdateDataset) != "undefined"){
    			this._UpdateDataset(this.currentIndex + 1);
    		}
    	}
    }

	
    return ;
};

/* 값삭제하기*/
/**
 * @description	미결
 * @param		{String}	pData
 * @param		{boolean}	needUpdateDataset
 * @return  	{undefined}
 * @example		미결
 */
ListBoxW.prototype.removeItem = function(pData, needUpdateDataset){
    // functionname : [ListBox.removeItem]
      var wOptions =  this.options;
      var nRow = -1;
      for (var i = wOptions.length - 1; i >= 0; i--){
      	if (("" + pData).length > 0 && wOptions.items[i].value == pData){
              wOptions.remove(i);
              nRow = i;
              break;
          }
      }
      
      // dataset 현재줄 삭제 기능 
      if (nRow >= 0){
    	    if (typeof needUpdateDataset == "undefined" || needUpdateDataset == true){
    	    	if (this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI){
    	    		if (typeof(ControlBase.prototype._UpdateDatasetDelRow) != "undefined"){
    	    			this._UpdateDatasetDelRow(nRow + 1);
    	    		}
    	    	}
    	    }
      }
};


/* 리스트박스의 등록된 아이템의 갯수*/
/**
 * @description	미결
 * @return  	{number}
 * @example		미결
 */
ListBoxW.prototype.listCount = function(){
    // functionname : [ListBox.listCount]

	return this.options.length;
};

/* 리스트박스의 초기화*/
/**
 * @description	미결
 * @param		{boolean}	needUpdateDataset
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.clear = function(needUpdateDataset){
    // functionname : [ListBox.clear]

    var i = 0;
    var wOptions =  this.options;
    for (i = wOptions.length - 1 ; i >= 0; i--){
        wOptions.remove(i);
    }
    
    this.value= this.VALUE_WHEN_NOT_SELECTED; this.text= "";
    
    // 데이터 리스트인 경우 화면의 시퀀스 1에 맞추기 위하여 기본적으로 하나의 레코드는 넣어준다
    if (this.listType == LISTBOX_TYPE_DATASELECT){
        //this.options.add(new Option("", "(선택하세요)"));
    	//this._hasBlankItem = true;
        this.currentIndex = this.options.length - 1;
    	this._hasBlankItem = false;
        
        this.text = ""; this.value = "";
        
    }

	// dataset 현재줄 아래로 이동 기능 
    if (typeof needUpdateDataset == "undefined" || needUpdateDataset == true){
    	if (this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI){
    		if (typeof(ControlBase.prototype._UpdateDatasetClear) != "undefined"){
    			this._UpdateDatasetClear();
    		}
    	}
    }
    
    // 사용자 코딩 추가영역을 호출한다
	var checkEvent = false;
	try {
    	if (eval(this.controlId + "_onclear")) checkEvent = true;
    } catch(e){}
    
    if (checkEvent){
 	   var result = eval(this.controlId + "_onclear();");
       if (typeof(result)=="boolean") return result;
    }
    
    return true;
};

/* 리스트 박스에 모든값채우기 */
/**
 * @description	미결
 * @param		{object}	recordset
 * @param		{boolean}	needUpdateDataset
 * @return 		{void}
 * @example		미결
 */
ListBoxW.prototype.setLists = function(recordset, needUpdateDataset){
    // functionname : [ListBox.setLists]
	
	// 화면에 없는 데이터 가저오기인 경우
	if (recordset.casheMode) return;
	

	this.clear();
	
	if( recordset.commandType == "Dataset" ){
		var dataSet = recordset.dataSet;
		var fieldInfos = dataSet.fieldInfos;
		var vField = fieldInfos.CODE.field;
		var tField = fieldInfos.CODE_NAME.field;
		var data = null;
		var i = 0;
		
		for(i = 0; i < recordset.rowCount; i++, data = null){
			data = dataSet.data[i];
			this.addItem(data[tField], data[vField]);
		}
		
		dataSet = null; fieldInfos = null;
		tField = null; vField = null;
		data = null; 
	}
	else {
		if (recordset.fields.length == 1){
			while (!recordset.EOF){
				this.addItem(recordset.fields[0].value(), recordset.fields[0].value());
				recordset.moveNext();
			}
		} else {
			while (!recordset.EOF){
				this.addItem(recordset.fields[1].value(), recordset.fields[0].value());
				recordset.moveNext();
			}
		}
	}
	
    recordset.close();
    
    if (this.reservedValue != this.VALUE_WHEN_NOT_SELECTED){
    	this.setValue(this.reservedValue);
    }else {
    	this.setValueToDefault();
    }
    this.reservedValue = this.VALUE_WHEN_NOT_SELECTED;
    
	//Dataset을 사용하지 않은 경우
    if (typeof needUpdateDataset == "undefined" || needUpdateDataset == true){
    	if (this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI){
    		if(typeof(ControlBase.prototype._UpdateDatasetList) != "undefined"){
    			this._UpdateDatasetList();
    		}
    	}
    }
    
    
    return;
};

//화면로드시만 일어나는 기능으로 디폴트값선택등 추가기능은 생략
/**
 * @description	미결
 * @param		{String}	listsStr
 * @param		{String}	itemsStr
 * @return 		{boolean}
 * @example		미결
 */
ListBoxW.prototype.setDefaultLists = function(listsStr, itemsStr){
	// functionname : [ListBoxW.setDefaultLists]
	
	if( typeof itemsStr == "undefined" || (typeof itemsStr == "string" && itemsStr.trim().length == 0) ){
		//itemsStr = listsStr;
	}
	
	listsStr = listsStr.replace(/,/g,"<COMMA>");
	itemsStr = itemsStr.replace(/,/g,"<COMMA>");
	
	var i = 0;
	var wOptions = this.tagObject.getElementsByTagName("div")[0].getElementsByTagName("div");
	
	if( wOptions.length > 0 ){
		for(i = 0; i < wOptions.length; i++){
			listsStr += "<COMMA>" + wOptions[i].textContent;
			itemsStr += "<COMMA>" + wOptions[i].getAttribute("value");
		}
	}

	var arrayLists = listsStr.split("<COMMA>");
	var arrayItems = itemsStr.split("<COMMA>");
	
	this.clear();
    
    for(i = 0; i < arrayLists.length; i++){
    	this.addItem(arrayLists[i], arrayItems[i]);
    }
	
	this.setValueToDefault();
	
	this.reservedValue = "";
	this.reservedText = "";
	
	return true;
}

/*리스트 박스에 값있는지 여부 체크*/
/**
 * @description	미결
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.haveZeroListValue = function(){
    // functionname : [ListBox.haveZeroListValue]

	var wReturn = false;
    var wOptions =  this.options;
    for (var i = wOptions.length - 1 ; i >= 0; i--){
   		if ("" + wOptions.items[i].value != "0") continue;
   			wReturn = true;
   			break;
   		
    }
	  return wReturn;
};

/**
 * @description	미결
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getListType = function (){
    // functionname : [ListBox.getListType]
  return this.listType;
};

/**
 * @description	미결
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getCurrentIndex = function (){
    // functionname : [ListBox.getCurrentIndex]
    return this.currentIndex;
};

/**
 * @description	미결
 * @param		{number}	pLeft
 * @param		{number}	pTop
 * @param		{number}	pWidth
 * @param		{number}	pHeight
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.moveWindow= function(pLeft,pTop,pWidth,pHeight){
    // functionname : [ListBox.moveWindow]

    this.height = pHeight;
    this.tagObject.style.height=pHeight+'px';
 
    
    this.width = pWidth;
    this.tagObject.style.width=pWidth+'px';
 
    
    this.left = pLeft;
    this.tagObject.style.left=pLeft+'px';
 
    
    this.top = pTop;
    this.tagObject.style.top = pTop+'px';
 
    return;
};

/* 리스트박스에 포커스주기*/
/**
 * @description	미결
 * @return		{boolean}
 * @example		미결
 */
function ListBoxW_Focus(){

	  var control = searchControl_ListBoxW(getSrcElement(event));
    // 사용자 코딩 추가영역을 호출한다
  	var checkEvent = false;
	  try {
      	if (eval(control.controlId + "_onfocus")) checkEvent = true;
      } catch(e){}
    
      if (checkEvent){
	    var result = eval(control.controlId + "_onfocus();");
        if (typeof(result)=="boolean") return result;
      }
    return true;
};

/* 리스트박스에 포커스잃었을때*/
/**
 * @description	미결
 * @return		{boolean}
 * @example		미결
 */
function ListBoxW_Blur(){
	var control = searchControl_ListBoxW(getSrcElement(event));
    // 사용자 코딩 추가영역을 호출한다
	var checkEvent = false;
	try {
    	if (eval(control.controlId + "_onblur")) checkEvent = true;
    } catch(e){}
    
    if (checkEvent){
	   var result = eval(control.controlId + "_onblur();");
       if (typeof(result)=="boolean") return result;
    }
   
    return true;
};

/* 리스트박스에 키다운이 발생했을경우*/
/**
 * @name		ListBoxW#ListBoxW_KeyDown
 * @event
 * @return		{boolean}
 * @description 미결
 */
function ListBoxW_KeyDown(e)
{
	var evt = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var em  = getSrcElement(evt);
    
    var control = searchControl_ListBoxW(em);
    
    var wKeyCode = evt.keyCode;
    if (wKeyCode == 9){
		if (getShiftKeyPressed(evt)){
			stopEvent(evt);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
	   		return true;
		} else {
    		stopEvent(evt);
    		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
    		return true;
		}
    } else if (wKeyCode == 13){
		stopEvent(evt);
		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
		return true;
    } else if (evt.keyCode != 38 && evt.keyCode != 40 && evt.keyCode != 46) {     // 아래위 방향키가 아니면 스킵한다.
		stopEvent(evt);
        return true;
    }

    if (evt.keyCode == 46) {     // 삭제키
    	if (control.listType != LISTBOX_TYPE_DATASELECT) return false;    	
    }    
    // ctrl, alt 키가 눌려있으면 스킵한다
    if (getCtrlPressed(evt)) return true;
    if (getAltPressed(evt)) return true;
   
    // 삭제키가 눌린경우의 조치
    if (evt.keyCode == 46) {
    	if (control.currentIndex == -1) return false;
        var checkEvent = false;
        try {
            if (eval(control.controlId + "_onremoveitem")) checkEvent = true;
        } catch(e){}
            
        if (checkEvent){
             var result = eval(control.controlId + "_onremoveitem(" + control.currentIndex + ")");
             if (typeof(result)=="boolean" && !result) {
            	return false;
             }
        }

        
        if (control.options.length > 1) {
            control.options.remove(control.currentIndex);
            
            // dataset 현재줄 삭제 기능 
            if (control.listType == LISTBOX_TYPE_DATASELECT && control.listSaveType == LISTBOX_SAVE_MULTI){
            	if (typeof(ControlBase.prototype._UpdateDatasetDelRow) != "undefined"){
            		control._UpdateDatasetDelRow(control.currentIndex + 1);
            	}
            }
        } else {
            // 데이터가 하나이면 디폴트 처리를 하게 하기 위해서
        	control.clear();
        }                  
        
      	control.currentIndex = -1;
      	
        if (control.listSaveType == LISTBOX_SAVE_SINGLE){
        	control.text = control.getValueLinked(true); 
        	control.value = control.getTextLinked(true);
        	control.raiseChangeEvent();
        } else if (control.listSaveType == LISTBOX_SAVE_MULTI){
        	control.text = ""; control.value = "";
        }
      	
    	return true;
    }
    

    var delta = (evt.keyCode == 38 ? -1 : 1);
    var newIndex = control.currentIndex + delta;
    
    // 범위를 초과하는 이동은 방지한다.
    if (newIndex >= control.options.length) return false;
    if (newIndex < 0) return false;
    
    // 선택을 모두 해제하고 
    control.clearSelection();
    if (!getShiftKeyPressed(evt)){
        control.selectItem(newIndex);    // 새로운 항목만 선택
        
    } else if (control.listType == LISTBOX_TYPE_SINGSELECT || control.listType == LISTBOX_TYPE_DATASELECT){
        control.selectItem(newIndex);            // 새로운 항목만 선택
        
    } else if (control.listType == LISTBOX_TYPE_MULTISELECT || control.listType == LISTBOX_TYPE_CHECKSELECT){
        control.selectItem(control.critIndex, newIndex);   // 기준 ~새로운 항목만 선택
    } 

    preventbubble(evt);
    
    return true;
};

/**
 * @name		ListBoxW#ListBoxW_onclick
 * @event
 * @return		{boolean}
 * @description 미결
 */
function ListBoxW_onclick(e){
    var evt=window.event || e;
    var em = getSrcElement(evt);
    
    var control = searchControl_ListBoxW(em);
    if (em == control.listDIV) return false; // 항목이 하닌 바탕이 클릭된 경우 캔슬한다
    
    // 체크타입에서 체크가 클릭된 경우 상위 DIV로 대치
	//""=1;
    if (em.tagName.toUpperCase() == "INPUT") {
    	em = em.parentNode;
    }
    
    var checkEvent = false;
    try {
        if (eval(control.controlId + "_onclick")) checkEvent = true;
    } catch(e){}
        
    if (checkEvent) {
    	var result = eval(control.controlId + "_onclick()");
        if (typeof(result)=="boolean" && !result) {
        	return false;
        }
    }

    var newIndex = getItemIndex(em, "DIV");
    
    if (control.listType == LISTBOX_TYPE_SINGSELECT || control.listType == LISTBOX_TYPE_DATASELECT){
    	if (getCtrlPressed(evt)){
    		if (control.options.items[newIndex].selected){
                control.clearSelection(newIndex); 
            } else {
            	control.clearSelection();
                control.selectItem(newIndex);
            }
    	} else {
    		control.clearSelection();                // 선택을 모두 해제하고 
	        control.selectItem(newIndex);            // 새로운 항목만 선택
    	}
        
    } else if (control.listType == LISTBOX_TYPE_MULTISELECT){
        if (getShiftKeyPressed(evt)){
            control.clearSelection();                          // 선택을 모두 해제하고 
            control.selectItem(control.critIndex, newIndex);   // 기준 ~새로운 항목만 선택
        
        } else if (getCtrlPressed(evt)){
            // 새로운 항목만 토글
            if (control.options.items[newIndex].selected){
                control.clearSelection(newIndex); 
            } else {
                control.selectItem(newIndex);
            }
        
        } else {
            control.clearSelection();                // 선택을 모두 해제하고 
            control.selectItem(newIndex);            // 새로운 항목만 선택
        }
    } else if (control.listType == LISTBOX_TYPE_CHECKSELECT){
        // 새로운 항목만 토글
        if (control.options.items[newIndex].selected){
            control.clearSelection(newIndex); 
        } else {
            control.selectItem(newIndex);
        }
    } 
    
    // 사용자 코딩 추가영역을 호출한다
    control.raiseChangeEvent();

    return true;
    
};

/**
 * @description	미결
 * @param		{String}	index
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.clearSelection = function(index){
    // functionname : [ListBox.clearSelection]
    
    var fromIndex = (index == undefined ? 0 : index);
    var toIndex =  (index == undefined || index == null ? this.options.length - 1 : index);
    
    for (var i = fromIndex; i <= toIndex; i++){
        this.options.items[i].selected = false;

        var childDIV = this.listDIV.getElementsByTagName("div")[i];
        if (this.listType == LISTBOX_TYPE_CHECKSELECT){
            var childInput = childDIV.getElementsByTagName("input")[0];
            childInput.checked = false;
        } else {
            childDIV.style.backgroundColor = "transparent";
            childDIV.style.color = this.foreColor;
        }
    } 
    
	this.value = this.getValueLinked(); this.text  = this.getTextLinked();
 
    return;
};

/**
 * @description	미결
 * @param		{String}	critIndex
 * @param		{String}	currentIndex
 * @param		{boolean}	UpdateDataset
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.selectItem = function(critIndex, currentIndex, needUpdateDataset){
    // functionname : [ListBox.selectItem]

    var fromIndex = critIndex;
    var toIndex   = (currentIndex == undefined || currentIndex == null ? critIndex : currentIndex);
    
    this.critIndex = critIndex;
    this.currentIndex = toIndex;
    
    for (var i = fromIndex; i <= toIndex; i++){
        this.options.items[i].selected = true;

        var childDIV = this.listDIV.getElementsByTagName("div")[i];
        if (this.listType == LISTBOX_TYPE_CHECKSELECT){
            var childINPUT = childDIV.getElementsByTagName("input")[0];
            childINPUT.checked = true;
        } else {
//            childDIV.style.backgroundColor='#1500b4';
            childDIV.style.backgroundColor='#676767';
            childDIV.style.color='#FFFFFF';
        	
        }
    } 
    
	this.value = this.getValueLinked();
    this.text  = this.getTextLinked();
    
    this.scrollTo(this.currentIndex);
    
	// dataset 현재줄 갱신 기능 
    if (typeof needUpdateDataset == "undefined" || needUpdateDataset == true){
    	if (this.listType == LISTBOX_TYPE_DATASELECT && this.listSaveType == LISTBOX_SAVE_MULTI){
    		if (typeof(ControlBase.prototype._UpdateDatasetRowPos) != "undefined"){
    			this._UpdateDatasetRowPos(this.currentIndex + 1);
    		}
    	}
    }
    
    return;
};

/**
 * @description	미결
 * @param		{number}	currentIndex
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.scrollTo = function(currentIndex){
	// functionname : [ListBox.scrollTo]
	
	// 현재 보이는 영역을 계산한다
	var parentHeight = (1 * getComputedStyle(this.listDIV).height.replace("px", ""));
	var divs = this.listDIV.querySelectorAll("div");
	var divCount = divs.length;
	var scrollTop = this.tagObject.scrollTop;
	var scrollHeight = this.tagObject.scrollHeight;
	var scrollStep = scrollHeight / divCount;
	var displayDivCount = parentHeight / scrollStep;
	var indexOfTop = Math.round(scrollTop / scrollStep);
	var indexOfLast = indexOfTop + displayDivCount - 1;
	
	// 위로 가렸으면 아래로 내린다. (scrollTop -)
	if( currentIndex < indexOfTop ){
		this.tagObject.scrollTop = 20 * currentIndex;
	}
	
	// 아래로 가렸으면 위로 올린다. (scrollTop +)
	if( currentIndex > indexOfLast ){
		this.tagObject.scrollTop = scrollTop + (20 * (currentIndex - Math.floor(indexOfLast)));
	}
	
	divs = null;
	
	return;
};

// 아래 함수들은 선택된 값들을 여러개 세팅하거나 가저오는 방식이다.
/**
 * @description	미결
 * @param		{string}	valueLinked
 * @return  	{undefined}
 * @example		미결
 */
ListBoxW.prototype.setValueLinked = function(valueLinked){
    // functionname : [ListBox.setValueLinked]
    var text = valueLinked || "";
    this.setValueArray(text.split(","));

};
/**
 * @description	미결
 * @param		{boolean}	needAll
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getValueLinked = function(needAll){
    // functionname : [ListBox.getValueLinked]
                       
    if (needAll == undefined) needAll = false;
    
    return this.getValueArray(needAll).join(",");
};

/**
 * @description	미결
 * @param		{string}	textLinked
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getValueLinkedByText = function(textLinked){
    // functionname : [ListBox.getValueLinkedByText]

    var text = textLinked || "";
    var wArray0 = text.split(",");
    var wArray = []; var index = 0;
    
    var optionArray = this.options.items;
    for (var i=0; i < optionArray.length; i++){
        if (wArray0.indexOf(optionArray[i].text) >= 0){
            wArray[index++] = optionArray[i].value;
        } 
    }
    
    return wArray.join(",");
};

/**
 * @description	미결
 * @param		{string}	textLinked
 * @return  	{undefined}
 * @example		미결
 */
ListBoxW.prototype.setTextLinked = function(textLinked){
    // functionname : [ListBox.setTextLinked]

    var text = textLinked || "";
    this.setTextArray(text.split(","));
};

/**
 * @description	미결
 * @param		{boolean}	needAll
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getTextLinked = function(needAll){
    // functionname : [ListBox.getTextLinked]
                       
    if (needAll == undefined) needAll =false;
    
    return this.getTextArray(needAll).join(",");
};

/**
 * @description	미결
 * @param		{string}	valueLinked
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getTextLinkedByValue = function(valueLinked){
    // functionname : [ListBox.getTextLinkedByValue]

    var text = valueLinked || "";
    var wArray0 = text.split(",");
    var wArray = []; var index = 0;
    
    var optionArray = this.options.items;
    for (var i=0; i < optionArray.length; i++){
        if (wArray0.indexOf(optionArray[i].value) >= 0){
            wArray[index++] = optionArray[i].text;
        } 
    }
    
    return wArray.join(",");
};

/**
 * @description	미결
 * @param		{object}	pArr
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.setValueArray = function(pArr){
    // functionname : [ListBox.setValueArray]

    var optionArray = this.options.items;
    for (var i=0; i < optionArray.length; i++){
        var value = optionArray[i].value;
        if (pArr.indexOf(value) >= 0){
            this.selectItem(i);
        } 
    }
    return;
};

/**
 * @description	미결
 * @param		{boolean}	needAll
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getValueArray = function(needAll){
    // functionname : [ListBox.getValueArray]
    
	if (needAll == undefined) needAll =false;
    
    var wArray = []; var index = 0;
    var optionArray = this.options.items;
    for (var i=0; i < optionArray.length; i++){
        if (needAll || optionArray[i].selected)
            wArray[index++] = optionArray[i].value;
    }
    return wArray;

};

/**
 * @description	미결
 * @param		{object}	pArr
 * @return  	{undefined}
 * @example		미결
 */
ListBoxW.prototype.setTextArray = function(pArr){
    // functionname : [ListBox.setTextArray]
    var optionArray = this.options.items;
    for (var i=0; i < optionArray.length; i++){
        var text = optionArray[i].text;
        if (pArr.indexOf(text) >= 0){
            this.selectItem(i);  
        } 
    }

};

/**
 * @description	미결
 * @param		{boolean}	needAll
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.getTextArray = function(needAll){
    // functionname : [ListBox.getTextArray]
                       
    if (needAll == undefined) needAll =false;
                       
    var wArray = []; var index = 0;
    var optionArray = this.options.items;
    for (var i=0; i < optionArray.length; i++){
        if (needAll || optionArray[i].selected)
            wArray[index++] = optionArray[i].text;
    }
    return wArray;
};

/**
 * @description	미결
 * @param		{string}	valueLinked
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.valueFound = function(valueLinked){
    // functionname : [ListBox.getTextLinkedByValue]
    
    var wReturn = false;

    var text = valueLinked || "";
    var wArray0 = text.split(",");
    var optionArray = this.options.items;
    
    for (var index = 0; index < wArray0.length; index++){
    	var found = false;
    	var wValue = wArray0[index];
	    for (var i=0; i < optionArray.length; i++){
	        if (wValue == optionArray[i].value){found = true; break;} 
	    }
	    if (found) {wReturn = true; break;}
    }
    	
    return wReturn;
};

/**
 * @description	미결
 * @param		{string}	textLinked
 * @return  	{boolean}
 * @example		미결
 */
ListBoxW.prototype.textFound = function(textLinked){
    // functionname : [ListBox.getTextLinkedByValue]
    
    var wReturn = false;

    var text = textLinked || "";
    var wArray0 = text.split(",");
    var optionArray = this.options.items;
    
    for (var index = 0; index < wArray0.length; index++){
    	var found = false;
    	var wText = wArray0[index];
	    for (var i=0; i < optionArray.length; i++){
	        if (wText == optionArray[i].text){found = true; break;} 
	    }
	    if (found) {wReturn = true; break;}
    }
    	
    return wReturn;
};


/**
 * @description	미결
 * @param		{string}	valueLinked
 * @return  	{object}
 * @example		미결
 */	
ListBoxW.prototype.indexOfValue = function(valueLinked){
    // functionname : [ListBox.getTextLinkedByValue]
    
    var wReturn = -1;

    var text = valueLinked || "";
    var wArray0 = text.split(",");
    var optionArray = this.options.items;
    
    for (var index = 0; index < wArray0.length; index++){
    	var found = false;
    	var wValue = wArray0[index];
	    for (var i=0; i < optionArray.length; i++){
	        if (wValue == optionArray[i].value){wReturn = i; found = true; break;} 
	    }
	    if (found) break;
    }
    	
    return wReturn;
};

/**
 * @description	미결
 * @param		{string}	textLinked
 * @return  	{object}
 * @example		미결
 */
ListBoxW.prototype.indexOfText = function(textLinked){
    // functionname : [ListBox.getTextLinkedByValue]
    
    var wReturn = -1;

    var text = textLinked || "";
    var wArray0 = text.split(",");
    var optionArray = this.options.items;
    
    for (var index = 0; index < wArray0.length; index++){
    	var found = false;
    	var wText = wArray0[index];
	    for (var i=0; i < optionArray.length; i++){
	        if (wText == optionArray[i].text){wReturn = i; found = true; break;} 
	    }
	    if (found) break;
    }
    	
    return wReturn;
};

/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
ListBoxW.prototype.updateUploadPrefix = function(){
    // functionname : [ListBox.getTextLinkedByValue]
    
    if (this.listType != LISTBOX_TYPE_DATASELECT) return;
    
    var optionArray = this.options.items;
	for (var i=0; i < optionArray.length; i++){
		var value = optionArray[i].value;
		if (!hasTimeEncodeString(value)){
			optionArray[i].value = jUploadPrefix + value;
		}
	}
	
	if (this.listSaveType == LISTBOX_SAVE_SINGLE){
        this.text = this.getValueLinked(true); 
        this.value = this.getTextLinked(true);
        this.raiseChangeEvent();
    }     
	
	return;
};


// 데이터 시트의 더블클릭 이벤트
/**
 * @name		ListBoxW#ListBoxW_Dblclick
 * @event
 * @return		{boolean}
 * @description 미결
 */
function ListBoxW_Dblclick(e){
    var evt=window.event || e;
    var em = getSrcElement(evt);
    
    var control = searchControl_ListBoxW(em);
    if (em == control.listDIV) return false; // 항목이 하닌 바탕이 클릭된 경우 캔슬한다
    
    var newIndex = getItemIndex(em, "div");
    control.clearSelection();                // 선택을 모두 해제하고 
    control.selectItem(newIndex);            // 새로운 항목만 선택
    
    var text = control.options.items[newIndex].text;
    var value = control.options.items[newIndex].value;
    
    // 화면에서 새로 추가된 것은 타임이 붙지 않는다. 새로추가된 것은 다운을 하지 못한다.
    if (!hasTimeEncodeString(value)) {
    	alert(getText("message_listbox_w_001", " 아직 서버에 등록 되지 않은 자료입니다.\n PC내에서 조회하십시요!"));
    	return true;
    }    
    
    if (typeof FILE_DOWNLOAD_URL != "undefined"){
    	location.href = FILE_DOWNLOAD_URL + "?filename=" + fileName
                                          + "&filename_org=" + orgName 
                                          + "&filepath=" + path;
    	
    } else {
        var parent = document.getElementsByName("IFrameLayer")[0];
    	var action = "fileDownload.do";
    	var params = [];
    	params[0] = new Parameter("subPath", control.subPath);
    	params[1] = new Parameter("fileNameSvr", value.substring(0, 11));
    	params[2] = new Parameter("fileName", text);
    	params[3] = new Parameter("noftp", control.noftp);
    	params[4] = new Parameter("nozip", control.nozip);

    	var iFrame_DownLoad = new IFrame_DownLoad(parent, control.controlName + timeEncodeString(), action, params);
    	iFrame_DownLoad.submit();
    }
    
    return true;
};



/*
 *	Dataset Binding
 */
ListBoxW.prototype._updateLists = function(pLists){
	// functionname : [ListBox._updateLists]
	
	var listLength = 0;
	
	//예외처리
	if( !(pLists instanceof Array) ) return;
	if( (listLength = pLists.length) == 0) return;
	
	var optItem = null;
	var i = 0;
	
	for(i = 0; i < listLength; i++){
		this.options.add(pLists[i]);
	}
	
	while(pLists.length > 0){
		optItem = pLists.pop();
		optItem = null;
	}
	pLists = null;
	
	return;
};/**                                                                                         
*       @class          CheckBox 컨트롤 클래스                                                     
*       @constructor                                                    
*                                                                                           
*       @param          controlId     {String}      해당 컨트롤의 ID를 지정합니다.                              
*       @param          controlName   {String}      해당 컨트롤의 Name을 지정합니다.                            
*       @param          tagObject     {Object}      해당 컨트롤의 태그 객체를 지정합니다.  
*                                                                                           
*       @return         객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
*      
*       @example        var wControl = controls["chkbox1"] = new CheckBox("chkbox1", "chkbox1", document.getElementsByName("chkbox1")[0]);
*        if(wControl.errorMsg != null){
*            //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요.
*        }
*
*        // 후속코드 생략...
*/        
function CheckBox(controlId, controlName, tagObject){
	// 상속선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	// 상수 선언부
	
	// 속성 선언부	
    /**
     *   @description    체크박스의 체크 설정 값을 나타냅니다.<br>
     *                   기본값 : 0 (체크 안함)<br><br>
     *                   <table width="500">
     *                       <caption>value Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                              <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                              <td> 1 </td>
     *                              <td> 체크박스에 체크합니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> 0 </td>
     *                              <td> 체크박스에 체크하지 않습니다. </td>
     *                           </tr>
     *                   </table><br>
     */   
	this.value = 0;				//check : 1 / uncheck : 0
	this.checkedValue = 1;		//참값 속성 설정시
	this.unCheckedValue = 0;	//거짓값 속성 설정시
    /**    
     *   @description      사용자가 입력한 컨트롤 데이터에 대한 타입을 설정합니다.<br>
     *                     타입은 상수로 선언된 CHECKTYPE으로 설정합니다.<br>
     *                     기본값 : 0<br><br>
     */ 
	this.checkType = parseInt(tagObject.getAttribute("checktype"));
	this.enabled = true;
	
	 /**
     *   @description    사용자가 컨트롤에 입력한 값이 확정되었을 때, 컨트롤에 입력된 값을 Key로 하여 데이터를 조회합니다.<br>
     *                   기본값 : false<br><br>
     *                   <table width="500">
     *                       <caption>isKeyControl Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                              <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                              <td> true </td>
     *                              <td> 컨트롤 값에 의해 자료를 조회합니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> false </td>
     *                              <td> 컨트롤 값에 의해 자료를 조회하지 않습니다. </td>
     *                           </tr>
     *                   </table><br>
     */   
	this.isKeyControl  = (tagObject.getAttribute("iskeycontrol")  == "true");
    /**
     *   @description      조회한 자료에서 Key 필드와 함께 추가로 조건을 주기위해 사용합니다.<br>
     *                     컨트롤에 화면채우기 설정이 되어있다면 Key필드와 컨트롤의 값에 만족하는 데이터를 화면에 채웁니다.<br>
     *                     기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isFillControl Variable Value</caption>
     *                       <thead>
     *                          <tr>
     *                              <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                              <td> true </td>
     *                              <td> 컨트롤에 값을 채웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> false </td>
     *                              <td> 컨트롤에 값을 채우지 않습니다. </td>
     *                           </tr>
     *                     </table><br>
     */  
	this.isFillControl = (tagObject.getAttribute("isfillcontrol")  == "true");
    /**    
     *   @description      Clear나 확인버튼을 클릭하여 실행시키고 난 후 후속작업을 위해 컨트롤의 데이터를 비울지 설정합니다.<br>
     *                     기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isClearControl Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                                <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                               <td> true </td>
     *                              <td> Clear 기능 실행 후 컨트롤의 값을 비웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                                <td> false </td>
     *                              <td> Clear 기능 실행하더라도 컨트롤의 값을 유지합니다. </td>
     *                           </tr>
     *                     </table><br>
     */ 
	this.isClearControl = (tagObject.getAttribute("isclearcontrol")  == "true");
    /**
     *   @description      입력/조회 시트에서 줄추가/삭제시 컨트롤의 값을 비울지 설정합니다.<br>
     *                     줄 단위로 다른 값이 들어갈 데이터에 적용됩니다.<br>기본값 : false<br><br>
     *                     <table width="500">
     *                       <caption>isSeqClearControl Variable Value</caption>
     *                       <thead>
     *                            <tr>
     *                                <th align="left">Value</th>
     *                              <th align="left">Description</th>
     *                           </tr>
     *                        </thead>
     *                        <tbody>
     *                           <tr>
     *                               <td> true </td>
     *                              <td> 줄추가/삭제시 컨트롤의 값을 비웁니다. </td>
     *                           </tr>
     *                           <tr>
     *                              <td> false </td>
     *                              <td> 줄추가/삭제를 하더라도 컨트롤의 값은 유지됩니다. </td>
     *                           </tr>
     *                     </table><br>
     */    
	this.isSeqClearControl = (tagObject.getAttribute("isseqclearcontrol")  == "true");
	
	if( tagObject ){
		this.enabled = !((this.tagObject.getElementsByTagName("input")[0]).disabled);	//CheckBox의 경우 div 내 input 태그에 disabled 속성이 추가되어 있으므로 추가 작업 필요
		
		//참값 속성 설정
		var checkedValue = this.tagObject.getAttribute("checkedvalue");
		if( checkedValue != null && (typeof checkedValue == "string" && checkedValue.length > 0) ){
			if( checkedValue == "true" )				this.checkedValue = true;
			else if( checkedValue == "false" )			this.checkedValue = false;
			else if( /^[0-9]+$/.test(checkedValue) )	this.checkedValue = (1 * checkedValue);
		}
		checkedValue = null;
		
		//거짓값 속성 설정
		var unCheckedValue = this.tagObject.getAttribute("uncheckedvalue");
		if( unCheckedValue != null && (typeof unCheckedValue == "string" && unCheckedValue.length > 0) ){
			if( unCheckedValue == "true" )				this.unCheckedValue = true;
			else if( unCheckedValue == "false" )		this.unCheckedValue = false;
			else if( /^[0-9]+$/.test(unCheckedValue) )	this.unCheckedValue = (1 * unCheckedValue);
		}
		unCheckedValue = null;
		
		//체크 설정
		this.value = ((this.tagObject.getElementsByTagName("input")[0]).checked) ? this.checkedValue : this.unCheckedValue;
	}
	
	// 사용자 이벤트
	this.hasChangeEvent = false;	this.fncChangeEvent = null;
	this.hasClickEvent = false;		this.fncClickEvent = null;
	
	if( this.controlId.length > 0 ){
		this.hasChangeEvent = (typeof self[this.controlId + "_onchange"] == "function");
		if( this.hasChangeEvent ){
			this.fncChangeEvent = new Function("return function(){ return " + this.controlId + "_onchange(); }")();
		}
		
		this.hasClickEvent = (typeof self[this.controlId + "_onclick"] != "undefined");
		if( this.hasClickEvent ){
			this.fncClickEvent = new Function("return function(){ return " + this.controlId + "_onclick(); }")();
		}
	}
	
//	this.tagObject.getElementsByTagName("span")[0].onclick = checkLabel_Click; 
//	this.tagObject.getElementsByTagName("input")[0].onclick = checkbox_Click; 
	
	// 이벤트 선언부
	setEventHandler(tagObject.getElementsByTagName("span")[0], "click", checkLabel_Click);
	if( typeof (tagObject.getElementsByTagName("span")[1]) != undefined ){
		setEventHandler(tagObject.getElementsByTagName("span")[1], "click", checkLabel_Click);
	}
	else{
//		this.image = tagObject.className;
		this.tagObject.classList.remove(this.image);
		this.tagObject.classList.add(this.image+"-classic");
	}
	setEventHandler(tagObject.getElementsByTagName("input")[0], "click", checkbox_Click);
	setEventHandler(tagObject, "keydown", checkbox_KeyDown);
};

CheckBox.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함

/**
*       @description    체크박스 컨트롤을 찾습니다.
*       @param          em        {Object}      컨트롤의 태그 객체를 입력합니다.
*       @return         체크박스 컨트롤을 찾는다면 체크박스의 컨트롤 ID를 반환하고, 찾지 못한다면 null을 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = searchControl_CheckBox( document.getElementsByName("chkbox1")[0] )
*        if(wControl == null){  // 체크박스 컨트롤을 찾는데 실패하였습니다. }
*        if(wControl == false){ // searchControl_CheckBox 함수 동작 중 에러가 발생하였습니다. }
*
*        // 후속코드 생략...
*/
function searchControl_CheckBox(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while (pEm.parentNode && !pEm.className.startsWith("CheckBox")) 
//		pEm = pEm.parentNode;
//	if (pEm.className.startsWith("CheckBox")) 
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "CheckBox"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "CheckBox" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("CheckBox")) 
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("CheckBox") ) 
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/* 포커스 주기*/
/**
*       @description    체크박스에 포커스를 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @return         체크박스 포커스를 성공한다면 true를 반환하고, 실패한다면 false를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        // 체크박스에 포커스를 지정합니다.
*        if(wControl.focus() == false){
*           //체크박스 포커스 지정 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //포커스 지정을 실패하거나 에러 발생시 focus 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.focus = function(){
	// functionname : [CheckBox.focus]
	var wReturn = true;
	
	try{
		this.tagObject.getElementsByTagName("input")[0].focus();
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};
/**
*       @description    체크박스에 체크 값을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          value        {Number}      1 : 체크합니다. / 0 : 체크 안합니다.
*       @return         체크 값 설정에 성공한다면 true를 반환합니다.<br>만약 실패하거나 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        // 체크박스에 데이터를 설정합니다.
*        if(wControl.setValue(1) == false){
*           //체크박스 데이터 설정 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //데이터 설정을 실패하거나 에러 발생시 setValue 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setValue = function(value){
	// functionname : [CheckBox.setValue]
	
	var ctrl = this.tagObject.querySelector("input");
	var oldChecked = ctrl.checked;
	var oldValue = this.value;
	var result = true;
	
	if( "" + oldValue == "" + value ){
		oldValue = null; ctrl = null; //메모리 해제
		return true;
	}
	
	//컨트롤 값 갱신
	this.value = value;
	
	//컨트롤 태그 갱신
	if( (this.value == this.checkedValue && !ctrl.checked) || (this.value == this.unCheckedValue && ctrl.checked) ){
		ctrl.checked = (this.value == this.checkedValue);
	}
	
	//체크조건
	if( !this.checkError() ){
		this.value = oldValue;			//컨트롤 값 복구
		ctrl.checked = oldChecked;		//컨트롤 태그 상태 복구
		oldValue = null; ctrl = null;	//메모리 해제
		return false;
	}
	
	//데이터셋 갱신
	if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
		result = this._UpdateDataset();
		
		if( typeof result == "boolean" && !result ){
			this.value = oldValue;			//컨트롤 값 복구
			ctrl.checked = oldChecked;		//컨트롤 태그 상태 복구
			oldValue = null; ctrl = null;	//메모리 해제
			return false;
		}
	}
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasChangeEvent ){
			result = this.fncChangeEvent();
			
			if( (typeof result == "boolean" && !result) ){
				// 컨트롤 값 복구
				this.value = oldValue;
				// dataset 갱신 기능
				if( typeof ControlBase.prototype._UpdateDataset != "undefined" ) this._UpdateDataset();
				//컨트롤 태그 상태 복구
				ctrl.checked = oldChecked;
				//메모리 해제
				oldValue = null; ctrl = null;
				return false;
			}
		}
	}
	
	//메모리 해제
	oldValue = null;
	ctrl = null;
	
	// 관련객체 프로퍼티 채우기
	// this.setLinkedProperties(value);
	
	/*
	// 데이터 가저오기
	if (this.isKeyControl){
	    if (this.isFillControl){
	    	mustFillScreenAfterLoad = true;
	    }
	    objectManager.fillkeyFieldValue = this.value;
	 	objectManager.loadData();
	}
	// 데이터 채우기
	if (!this.isKeyControl && this.isFillControl){
		objectManager.fillData();
	}
	*/
	
	return true;
};

/**
 * @description   미결
 * @return  {boolean}
 * @example   미결
 */
CheckBox.prototype.toggle = function(){
	return this.setValue((this.value == this.checkedValue ? this.unCheckedValue : this.checkedValue));
};

/**
 * @description   미결
 * @param   {objects}   alignment
 * @return  {undefined}
 * @example   미결
 */
CheckBox.prototype.setAlignment = function(alignment){
	// functionname : [CheckBox.setAlignment]
	
	this.alignment = alignment;
	this.tagObject.getElementsByTagName("span")[0].style.textAlign = alignment;
};

/**
*       @description    체크박스 컨트롤의 표시문자열 글자 굵기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          fontBold   {Boolean}    true : 글자 굵기를 굵게합니다. / false : 글자 굵기를 굵게하지 않습니다.
*       @return         글자 굵기 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        //체크박스의 표시문자열 글자 굵기를 굵게합니다.
*        if( wControl.setFontBold(true) == false ){
*           //글자 굵기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //글자 굴기 설정을 실패하거나 에러 발생시 setFontBold 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setFontBold = function(fontBold){
	// functionname : [CheckBox.setFontBold]
	
	this.fontBold = fontBold;
	
	wValue = (fontBold == "true" ? "bold" : "normal");
	this.tagObject.getElementsByTagName("span")[0].style.fontWeight = wValue;
};

/**
*       @description    체크박스 컨트롤의 표시문자열 글자 기울기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          fontItalic  {boolean}   true : 글자 굵기를 굵게합니다. / false : 글자 굵기를 굵게하지 않습니다.
*       //@return         var wControl = controls["chkbox1"];
*        //체크박스의 표시문자열 글자를 기울게합니다.
*        if( wControl.setFontItalic(true) == false ){
*           //글자 기울기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //글자 기울기 설정을 실패하거나 에러 발생시 setFontItalic 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setFontItalic = function(fontItalic){
	// functionname : [CheckBox.setFontItalic]
	
	this.fontItalic = fontItalic;
	
	wValue = (fontItalic == "true" ? "italic" : "normal");
	this.tagObject.getElementsByTagName("span")[0].style.fontStyle = wValue;
};

/**
*       @description    체크박스 컨트롤의 폰트를 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          setFontName     {String}   체크박스 컨트롤에 사용할 폰트를 입력합니다.
*       //@return         var wControl = controls["chkbox1"];
*        //체크박스의 표시문자열 폰트를 돋움체로 설정합니다.
*        if( wControl.setFontName("돋움체") == false ){
*           //폰트 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //폰트 설정을 실패하거나 에러 발생시 setFontName 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setFontName = function(fontName){
	// functionname : [CheckBox.setFontName]
	
	this.fontName = fontName;
	this.tagObject.getElementsByTagName("span")[0].style.fontFamily = fontName;
};

/**
*       @description    체크박스 컨트롤의 폰트크기를 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          fontSize     {Number}   체크박스 컨트롤에 사용할 폰트크기를 입력합니다.
*       @return         폰트크기 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        //체크박스의 표시문자열 폰트크기를 9로 설정합니다.
*        if( wControl.setFontSize(9) == false ){
*           //폰트 크기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //폰트 크기 설정을 실패하거나 에러 발생시 setFontSize 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setFontSize = function(fontSize){
	// functionname : [CheckBox.setFontSize]
	
	this.fontSize = fontSize;
	this.tagObject.getElementsByTagName("span")[0].style.fontSize = fontSize + "pt";
};

/**
*       @description    체크박스 컨트롤의 표시문자열에 취소선을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          fontStrikethru  {boolean}   true : 취소선을 긋습니다. / false : 취소선을 긋지 않습니다.
*       @return         취소선 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        //체크박스의 표시문자열에 취소선을 긋습니다.
*        if( wControl.setFontStrikethru(true) == false ){
*           //취소선 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //취소선 설정을 실패하거나 에러 발생시 setFontStrikethru 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setFontStrikethru = function(fontStrikethru){
	// functionname : [CheckBox.setFontStrikethru]
	
	this.fontStrikethru = fontStrikethru;
	
	if( fontStrikethru )
		this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "line-through";
	else
		this.tagObject.getElementsByTagName("span")[0].textDecoration = "none";
};

/**
*       @description    체크박스 컨트롤의 표시문자열에 밑줄 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          fontUnderline   {Boolean}   true : 밑즐을 긋습니다. / false : 밑줄을 긋지 않습니다.
*       @return         밑줄 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        //체크박스의 표시문자열에 밑줄을 긋습니다.
*        if( wControl.setFontUnderline(true) == false ){
*           //밑줄 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //밑줄 설정을 실패하거나 에러 발생시 setFontUnderline 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setFontUnderline = function(fontUnderline){
	// functionname : [CheckBox.setFontUnderline]
	
	this.fontUnderline = fontUnderline;
	
	if( fontUnderline )
		this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "underline";
	else
		this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "none";
};

/**
*       @description    체크박스 컨트롤의 표시문자열을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*       @param          caption     {String}    체크박스 표시문자열을 입력합니다.
*       @return         표시문자열 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        //체크박스 표시문자열을 '사용구분'로 설정합니다.
*        if( wControl.setCaption("사용구분") == false ){
*           //표시문자열 지정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //표시문자열 지정을 실패하거나 에러 발생시 setCaption 메소드는 false 를 반환합니다.
*           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
*        }
*/
CheckBox.prototype.setCaption = function(caption){
	// functionname : [CheckBox.setCaption]
	
	this.caption = caption;
	this.tagObject.getElementsByTagName("span")[0].innerText = caption;
};

/**
*       @description    체크박스 컨트롤을 체크시 컨트롤의 값을 설정합니다.<br>만약 설정하지 않는다면 기본값은 1입니다. 
*       @param          checkedValue	{Number|String|Boolean}		체크시 체크박스 컨트롤의 값입니다.
*       @return         설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        //컨트롤을 체크시 컨트롤의 값을 설정합니다.
*        if( wControl.setCheckedValue(10) == false ){
*           //컨트롤을 체크시 컨트롤의 값 지정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //컨트롤을 체크시 컨트롤의 값 지정을 실패하거나 에러 발생시 setCheckedValue 메소드는 false 를 반환합니다.
*        }
*/
CheckBox.prototype.setCheckedValue = function(checkedValue){
	// functionname : [CheckBox.setCheckedValue]
	
	var oldCheckedValue = this.checkedValue;
	
	//참값 설정
	this.checkedValue = checkedValue;
	
	//체크 설정
	if( oldCheckedValue == this.value && ((this.tagObject.getElementsByTagName("input")[0]).checked) ){
		this.setValue(this.checkedValue);
	}
	
	//메모리 해제
	oldCheckedValue = null;
};

/**
*       @description    체크박스 컨트롤을 체크 해제시 컨트롤의 값을 설정합니다.<br>만약 설정하지 않는다면 기본값은 0입니다. 
*       @param          unCheckedValue	{Number|String|Boolean}		체크 해제시 체크박스 컨트롤의 값입니다.
*       @return         설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
*       @example        var wControl = controls["chkbox1"];
*        //컨트롤을 체크 해제시 컨트롤의 값을 설정합니다.
*        if( wControl.setUnCheckedValue(10) == false ){
*           //컨트롤을 체크 해제시 컨트롤의 값 지정을 실패하였습니다. 에러처리 코드를 입력해주세요.
*           //컨트롤을 체크 해제시 컨트롤의 값 지정을 실패하거나 에러 발생시 setUnCheckedValue 메소드는 false 를 반환합니다.
*        }
*/
CheckBox.prototype.setUnCheckedValue = function(unCheckedValue){
	// functionname : [CheckBox.setUnCheckedValue]
	
	var oldUnCheckedValue = this.unCheckedValue;
	
	//참값 설정
	this.unCheckedValue = unCheckedValue;
	
	//체크 설정
	if( oldUnCheckedValue == this.value && !((this.tagObject.getElementsByTagName("input")[0]).checked) ){
		this.setValue(this.unCheckedValue);
	}
	
	//메모리 해제
	oldUnCheckedValue = null;
};

/**
 * @name CheckBox#checkLabel_Click
 * @event
 * @return   {boolean}
 * @description   미결
 */
function checkLabel_Click(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_CheckBox(em);
	
	control.tagObject.getElementsByTagName("input")[0].click();
	
	stopPropagation(e);
	
	return true;
}

/**
 * @name CheckBox#checkbox_Click
 * @event
 * @return   {boolean}
 * @description   미결
 */
function checkbox_Click(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_CheckBox(em);

	var oldValue = control.value;
	var newValue = (em.checked ? control.checkedValue : control.unCheckedValue);
	
	// 임시로 값을 채우고 클릭 사용자 이벤트 터리 후 복구 시킴
	control.value = newValue;
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		if( control.hasClickEvent ){
			var result = control.fncClickEvent();
			
			if( typeof result == "boolean" && result == false ){
				control.value = oldValue;
				em.checked = (oldValue == control.checkedValue ? true : false);
				em.focus();
				stopEvent(e);
				//메모리 해제
				newValue = null; oldValue = null;
				control = null; em = null;
				return false;
			}
		}
	}
	// 컨트롤 값 복구
	control.value = oldValue;
	
	// 컨트롤 값 변경이벤트 호출
	control.setValue(newValue);
	
	//메모리 해제
	newValue = null; oldValue = null;
	control = null; em = null;
	
	stopPropagation(e);
	
	return true;
}

/**
 * @name CheckBox#checkbox_KeyDown
 * @event
 * @return   {boolean}
 * @description   미결
 */
function checkbox_KeyDown(e){
	//F5새로고침 방지 추가
	if(e.keyCode == 116) {
		if(typeof e.preventDefault == "function") 
			e.preventDefault();
		else
			e.returnValue = false; // for IE
		return false;
	}
	
    e = window.event || e;
    
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_CheckBox(em);
	var wKeyCode = e.keyCode;
	
	if( wKeyCode == 9 ){
		if( getShiftKeyPressed(e) ){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
			return true;
		}
		else{
			stopEvent(e);
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			return true;
		}
	}
	else if( wKeyCode == 13 ){
		stopEvent(e);
		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
		return true;
	}
    
	stopPropagation(e);
	
	return true;
}
/**
 *       @class          OptionButton 컨트롤 클래스                                                     
 *       @constructor    OptionButton
 *
 *       @param          controlId       해당 컨트롤의 ID를 지정합니다.
 *       @param          controlName     해당 컨트롤의 Name을 지정합니다.
 *       @param          tagObject       해당 컨트롤의 태그 객체를 지정합니다.
 *
 *       @return         객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
 *
 *       @example        var wControl = controls["optionbox_5"] = new OptionButton("optionbox_5", "optionbox_5", document.getElementsByName("optionbox_5")[0] );
 *        if(wControl.errorMsg != null ){
 *           //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 *
 *        //후속코드 생략..
 */
function OptionButton(controlId, controlName, tagObject){
	// 상속선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	// 상수 선언부
	
	// 속성 선언부
	/**
	 *   @description    옵션버튼의 선택 값(여부)을 나타냅니다.<br>
	 *                   기본값 : 0 (선택 안함)<br><br>
	 *                   <table width="500">
	 *                       <caption>value Variable Value</caption>
	 *                       <thead>
	 *                 	        <tr>
	 *                 			    <th align="left">Value</th>
	 *                 			    <th align="left">Description</th>
	 *                 		    </tr>
	 *                 	    </thead>
	 *                 	    <tbody>
	 *                 		    <tr>
	 *                 			    <td> 1 </td>
	 *                 			    <td> 선택 </td>
	 *                 		    </tr>
	 *                 		    <tr>
	 *                 			    <td> 0 </td>
	 *                 			    <td> 선택 안함 </td>
	 *                 		    </tr>
	 *               
	 *                   </table><br>
	 */
	this.value = 0;				//check : 1/ uncheck : 0
	/**
	 *   @description    옵션버튼의 기본값입니다.<br>옵션버튼의 기본값은 데이터베이스에 저장할 경우 matchUpValue 값이 저장이 됩니다.<br>데이터베이스에서 값을 가져올 경우 matchUpValue로 값을 비교하여 옵션버튼을 선택합니다.<br>
	 *                   기본값 : 이지메이커 속성창에서 입력한 디폴트 값입니다.<br><br>
	 */
	this.matchUpValue = 0;		//기본값
	/**
	 *   @description    옵션버튼의 그룹명을 나타냅니다.<br>그룹명을 기준으로 그룹내 하나의 옵션버튼이 선택된다면 그룹내 다른 옵션버튼은 선택하지 않게 됩니다.<br>
	 */
	this.optionGroupName = "";
	/**
	 *   @description    사용자가 입력한 값에 대한 체크조건입니다.<br>
	 *                   기본값 : 태그 객체 생성시 지정한 설정값을 가져옵니다.<br><br>
	 */
	this.checkType = parseInt(tagObject.checktype);
	
	if( tagObject ){
		/**
		 * @description    미결 
		 */
		this.enabled = !((this.tagObject.getElementsByTagName("input")[0]).getAttribute("disabled"));	//OptionButton의 경우 div 내 input 태그에 disabled 속성이 추가되어 있으므로 추가 작업 필요
		this.tagObject.style.lineHeight = getStyle(this.tagObject).height;
	}
	
	// 이벤트 선언부
//	this.tagObject.getElementsByTagName("span")[0].onclick = optionLabel_Click;
//	this.tagObject.getElementsByTagName("input")[0].onclick = optionbutton_Click;
	
	setEventHandler(tagObject.getElementsByTagName("span")[0], "click", optionLabel_Click);
	if (tagObject.getElementsByTagName("span")[1] != undefined){
		setEventHandler(tagObject.getElementsByTagName("span")[1], "click", optionLabel_Click);
	}
	else {
//		this.image = tagObject.className;
		this.tagObject.classList.remove(this.image);
		this.tagObject.classList.add(this.image+"-classic");
	}
	setEventHandler(tagObject.getElementsByTagName("input")[0], "click", optionbutton_Click);
	setEventHandler(tagObject, "keydown", optionbutton_KeyDown);
};

OptionButton.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함

/* 포커스 주기*/
/**
 *       @description  옵션 버튼 컨트롤에 포커스를 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @return       컨트롤에 포커스를 지정하였다면 true를 반환합니다.<br> 만약 에러가 발생하였다면 false를 반환합니다.
 *       @example      var wControl= controls["optionbox_5"];
 *        //옵션버튼에 포커스를 지정합니다.
 *        if( false == wControl.focus() ){
 *           //포커스 지정을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *           //포커스 지정을 실패하거나 에러 발생시 focus 메소드는 false 를 반환합니다.
 *           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.focus = function(){
	// functionname : [OptionButton.focus]
	var wReturn = true;
	
	try{
		this.tagObject.getElementsByTagName("input")[0].focus();
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};
/**
 *       @description    옵션 버튼의 컨트롤 ID를 찾아 반환합니다.
 *       @param          em        {Object}      컨트롤의 태그 객체입니다.
 *       @return         옵션버튼 컨트롤를 찾았다면 컨트롤 ID를 반환하지만, 찾지 못한 경우 null을 반환합니다. 만약 에러가 발생하였다면 false를 반환합니다.
 *       @example        var wControl = searchControl_OptionButton( document.getElementsByName("optionbox_5")[0] );
 *        if(wControl == null){  //옵션 버튼 컨트롤을 찾는데 실패하였습니다. }
 *        if(wControl == false){ //searchControl_OptionButton 함수 동작 중 에러가 발생하였습니다. }
 *
 *        // 후속코드 생략...
 */
/**
 * @description 미결
 * @param		{String} 미결
 * @return		{Object}
 * @example		미결
 */
function searchControl_OptionButton(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while(pEm.parentNode && !pEm.className.startsWith("OptionButton")) 
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("OptionButton") ) 
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "OptionButton"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}

	if( pEm.getAttribute("image") === "OptionButton" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("OptionButton")) 
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("OptionButton") )
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};
/**
 *       @description    파라메터 값과 컨트롤의 디폴트 값이 같은지 비교하여 같다면 해당 그룹내 옵션버튼을 선택합니다.<br>그룹내 다른 옵션버튼은 선택하지 않게 됩니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          value   {Numbrt/String}     옵션버튼의 디폴트 값과 비교할 값입니다.
 *       @return         matchUpWith 함수가 정상적으로 동작한다면 true를 반환합니다.<br> 만약 에러가 발생하였다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //디폴트 값이 5인지 비교하여 같다면 옵션버튼을 선택합니다.
 *        if( false == wControl.matchUpWith(5) ){
 *           //matchUpWith 함수 동작 실패하였습니다. 에러처리 코드를 입력해주세요.
 *           //matchUpWith 함수 실패하거나 에러 발생시 matchUpWith 메소드는 false 를 반환합니다.
 *           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.matchUpWith = function(value){
	// functionname : [OptionButton.matchUpWith]
	
	if( this.matchUpValue == value ){
		this.setValue(1);
	}
	else{
		this.setValue(0);
	}
	
	return;
};
/**
 *     @description  옵션버튼의 선택값을 지정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *     @param        value        {Int}      1 : 선택함. / 0 : 선택안함.
 *     @return       선택값 지정하는데 성공했다면 true를 반환합니다.<br> 만약 에러가 발생하였다면 false를 반환합니다.
 *     @example      var wControl= controls["optionbox_5"];
 *      //옵션버튼을 선택합니다.
 *      if( false == wControl.setValue(1) ){
 *           //포커스 지정을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *           //포커스 지정을 실패하거나 에러 발생시 setValue 메소드는 false 를 반환합니다.
 *           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *      }
 */
OptionButton.prototype.setValue = function(value){
	// functionname : [OptionButton.setValue]
	
	var oldValue = this.value;
	
	if( "" + oldValue == "" + value )
		return true;
	
	var ctl = this.tagObject.getElementsByTagName("input")[0];
	
	if( (value == 1 && !ctl.checked) ){
		ctl.checked = true;
		//ctl.click();
	}
	else if( (value == 0 && ctl.checked) ){
		ctl.checked = false;
		//ctl.click();
	}
	
	this.value = value;
	
	if( !this.checkError() ){
		this.value = oldValue;
		ctl.checked = (this.value == 1);
		ctl.focus();
		return false;
	}
	
	//먼저 다른 콘트롤의 값을 0으로 한다
	this.setOtherOptionValue();
	
	// dataset 갱신 기능 
	if( typeof(ControlBase.prototype._UpdateDataset) != "undefined" ){
		this._UpdateDataset();
	}
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		var checkEvent = false;
		try{
			if( eval(this.id + "_onchange") ) checkEvent = true;
		} catch(e){}
		
		if( checkEvent ){
			var result = eval(this.id + "_onchange();");
			if( typeof(result)=="boolean" && !result ){
				this.value = oldValue;
				ctl.checked = (oldValue == 1);
				ctl.focus();
				return false;
			}
		}
	}
	
	/*
	// 데이터 가저오기
	if (this.isKeyControl){
	    if (this.isFillControl){
	    	mustFillScreenAfterLoad = true;
	    }
	    objectManager.fillkeyFieldValue = this.value;
	 	objectManager.loadData();
	}
	
	// 데이터 채우기
	if (!this.isKeyControl && this.isFillControl){
		objectManager.fillData();
	}
	*/
	
	return true;
};

OptionButton.prototype.setOtherOptionValue = function(){
	// functionname : [OptionButton.setOtherOptionValue]
	
	for(var key in controls){
		if( typeof(controls[key])=="function" )						continue;
		if( !(controls[key] instanceof OptionButton) )				continue;
		if( controls[key] == this )									continue;
		if( controls[key].optionGroupName != this.optionGroupName )	continue;
		
		controls[key].value = 0;
	}
	
	return;
};

/**
 *     @description  옵션버튼 라벨의 정렬을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *     @param        alignment       {String}        <br>left : 왼쪽정렬 / right : 오른쪽정렬 / center : 가운데정렬<br>(대,소문자 구분안함.)
 *     @return       선택값 지정하는데 성공했다면 true를 반환합니다.<br> 만약 에러가 발생하였다면 false를 반환합니다.
 *     @example      var wControl= controls["optionbox_5"];
 *      //옵션버튼의 라벨을 가운데 정렬합니다.
 *      if( false == wControl.setAlignment("center") ){
 *           //라벨을 정렬을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *           //라벨을 정렬을 실패하거나 에러 발생시 setAlignment 메소드는 false 를 반환합니다.
 *           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *      }
 */
OptionButton.prototype.setAlignment = function(alignment){
	// functionname : [OptionButton.setAlignment]
	
	this.alignment = alignment;
	this.tagObject.getElementsByTagName("span")[0].style.textAlign = alignment;
};

/**
 *       @description    옵션버튼 라벨의 글씨 굵기를 설정합니다. <br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          fontBold    {Boolean}       true : 글씨를 굵게합니다. / false : 글자를 굵게하지 않습니다.
 *       @return         굵기 설정을 성공했다면 true를 반환합니다.<br> 만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //옵션버튼 라벨의 글씨를 굵게합니다.
 *        if( false == wControl.setFontBold(true) ){
 *             //라벨의 굵게 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *             //라벨의 굵기 설정을 실패하거나 에러 발생시 setFontBold 메소드는 false 를 반환합니다.
 *             //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.setFontBold = function(fontBold){
	// functionname : [OptionButton.setFontBold]
	
	this.fontBold = fontBold;
	wValue = (fontBold == "true" ? "bold" : "normal");
	this.tagObject.getElementsByTagName("span")[0].style.fontWeight = wValue;
};

/**
 *       @description    옵션버튼 라벨의 글씨 기울기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          fontBold    {Boolean}       true : 글씨를 기울게한다. / false : 글자를 기울게하지 않는다.
 *       @return         기울기 설정을 성공했다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //옵션버튼 라벨의 글씨를 기울게 합니다.
 *        if( false == wControl.setFontItalic(true) ){
 *             //라벨의 글씨 기울기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *             //라벨의 글씨 기울기 설정을 실패하거나 에러 발생시 setFontItalic 메소드는 false 를 반환합니다.
 *             //에러에 관한 메세지는 optBox.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.setFontItalic = function(fontItalic){
	// functionname : [OptionButton.setFontItalic]
	
	this.fontItalic = fontItalic;
	wValue = (fontItalic == "true" ? "italic" : "normal");
	this.tagObject.getElementsByTagName("span")[0].style.fontStyle = wValue;
};

/**
 *       @description    옵션버튼 라벨의 폰트를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          fontName    {String}    폰트명을 입력합니다.
 *       @return         폰트 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //옵션버튼 라벨의 폰트를 "돋움체"로 설정합니다.
 *        if( false == wControl.setFontName("돋움체") ){
 *             //라벨폰트 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *             //라벨폰트 설정을 실패하거나 에러 발생시 setFontName 메소드는 false 를 반환합니다.
 *             //에러에 관한 메세지는 optBox.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.setFontName = function(fontName){
	// functionname : [OptionButton.setFontName]
	
	this.fontName = fontName;
	this.tagObject.getElementsByTagName("span")[0].style.fontFamily = fontName;
};

/**
 *       @description    옵션버튼 라벨의 폰트 크기를 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          fontSize    {Int}   폰트의 크기를 입력합니다.
 *       @return         폰트 크기 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //옵션버튼 라벨의 폰트크기를 16으로 설정합니다.
 *        if( false == wControl.setFontSize(16) ){
 *             //라벨 폰트크기 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *             //라벨 폰트크기 설정을 실패하거나 에러 발생시 setFontSize 메소드는 false 를 반환합니다.
 *             //에러에 관한 메세지는 optBox.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.setFontSize = function(fontSize){
	// functionname : [OptionButton.setFontSize]
	
	this.fontSize = fontSize;
	this.tagObject.getElementsByTagName("span")[0].style.fontSize = fontSize + "pt";
};

/**
 *       @description    옵션버튼 라벨에 취소선을 그을지 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          fontUnderline   {Boolean}   true : 취소선을 긋습니다. / false : 취소선을 긋지 않습니다.
 *       @return         취소선 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //옵션버튼 라벨에 취소선을 긋습니다.
 *        if( false == wControl.setFontStrikethru(true) ){
 *             //취소선 긋기를 실패하였습니다. 에러처리 코드를 입력해주세요.
 *             //취소선 긋기를 실패하거나 에러 발생시 setFontStrikethru 메소드는 false 를 반환합니다.
 *             //에러에 관한 메세지는 optBox.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.setFontStrikethru = function(fontStrikethru){
	// functionname : [OptionButton.setFontStrikethru]
	
	this.fontStrikethru = fontStrikethru;
	if( fontStrikethru )
		this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "line-through";
	else
		this.tagObject.getElementsByTagName("span")[0].textDecoration = "none";
};

/**
 *       @description    옵션버튼 라벨에 밑줄을 그을지 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          fontUnderline   {Boolean}   true : 밑줄을 긋습니다. / false : 밑줄을 긋지 않습니다.
 *       @return         밑줄 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //옵션버튼 라벨에 밑줄을 긋습니다.
 *        if( false == wControl.setFontUnderline(true) ){
 *             //밑줄 긋기를 실패하였습니다. 에러처리 코드를 입력해주세요.
 *             //밑줄 긋기를 실패하거나 에러 발생시 setFontUnderline 메소드는 false 를 반환합니다.
 *             //에러에 관한 메세지는 optBox.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.setFontUnderline = function(fontUnderline){
	// functionname : [OptionButton.setFontUnderline]
	
	this.fontUnderline = fontUnderline;
	if( fontUnderline )
		this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "underline";
	else
		this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "none";
};

/**
 *       @description    옵션버튼 라벨의 표시문자열을 설정합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          caption     {String}        표시문자열에 보여줄 문자열을 입력합니다.
 *       @return         표시문자열 설정에 성공한다면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl= controls["optionbox_5"];
 *        //옵션버튼 라벨의 표시문자열을 "옵션버튼2"로 설정합니다.
 *        if( false == wControl.setCaption("옵션버튼2") ){
 *             //옵션버튼 라벨 설정을 실패하였습니다. 에러처리 코드를 입력해주세요.
 *             //옵션버튼 라벨 설정 실패하거나 에러 발생시 setCaption 메소드는 false 를 반환합니다.
 *             //에러에 관한 메세지는 optBox.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
OptionButton.prototype.setCaption = function(caption){
	// functionname : [OptionButton.setCaption]
	
	this.caption = caption;
	this.tagObject.getElementsByTagName("span")[0].innerText = caption;
};

OptionButton.prototype.setValueToDefault = function(){
	// functionname : [OptionButton.setCaption]
	
	this.matchUpWith(0);
};

/**
 * @description    미결
 * @return         {String}
 * @example        미결
 */
OptionButton.prototype.addOptionGroup = function(){
	// functionname : [OptionButton.setCaption]
	
	//var optionGroupName = this.controlName.substring(0, this.controlName.length-1);
	var optionGroupName = (this.tagObject.getElementsByTagName("input")[0]).name;
	
	if( typeof controls[optionGroupName] == "undefined" )
		controls[optionGroupName] = new OptionGroup(optionGroupName, optionGroupName, this.tagObject.parentElement);
	
	return optionGroupName;
};

/**
 * @name 			OptionButton#optionLabel_Click
 * @event
 * @return			{boolean}
 * @description   	미결
 */
function optionLabel_Click(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_OptionButton(em);
	
	control.tagObject.getElementsByTagName("input")[0].click();
	
	stopPropagation(e);
	
	return true;
};

/**
 * @name 			OptionButton#optionbutton_Click
 * @event
 * @description   	미결
 */
function optionbutton_Click(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_OptionButton(em);
	var oldValue = control.value;
	var newValue = (control.tagObject.getElementsByTagName("input")[0].checked ? 1 : 0);
	
	if( "" + oldValue == "" + newValue )
		return true;
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		checkEvent = false;
		try{
			if (eval(control.controlId + "_onclick")) checkEvent = true;
		} catch(e){}
		
		if( checkEvent ){
			var result = eval(control.controlId + "_onclick();");
			if( typeof(result)=="boolean" && result == false )
				return result;
		}
	}
	
	control.setValue(newValue);
	
	stopPropagation(e);
	
	return true;
};
/**
 * @name 			OptionButton#optionbutton_KeyDown
 * @event
 * @return			{boolean}
 * @description   	미결
 */
function optionbutton_KeyDown(e){
	//F5새로고침 방지 추가
	if( e.keyCode == 116 ){
		if( typeof e.preventDefault == "function" )
			e.preventDefault();
		else
			e.returnValue = false; // for IE
		
		return false;
	}
	
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var wKeyCode = e.keyCode;
	var control = searchControl_OptionButton(em);
	
	if( wKeyCode == 9 ){
		if( getShiftKeyPressed(e) ){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
			return true;
		}
		else{
			stopEvent(e);
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			return true;
		}
	}
	else if( wKeyCode == 13 ){
		stopEvent(e);
		control.tagObject.getElementsByTagName("input")[0].click();
		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
		return true;
	}
	
	stopPropagation(e);
	
	// e.returnValue = true;
	
	return true;
};


///////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 *       @class          OptionGroup 컨트롤 클래스                                                     
 *       @constructor    OptionGroup
 *
 *       @param          controlId       해당 컨트롤의 ID를 지정합니다.
 *       @param          controlName     해당 컨트롤의 Name을 지정합니다.
 *       @param          tagObject       해당 컨트롤의 태그 객체를 지정합니다.
 *
 *       @return         반환값 없음
 *
 *       @example        미결
 */
function OptionGroup(controlId, controlName, tagObject){
	// 상속선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	this.name = controlName;
	
	this.columnCount = 0;
	
	// 하위콘트롤정보 세팅
	
	// 이벤트 처리 
	// rad_coni_OnChanged(obj,strCode,strText,nOldIndex,nNewIndex)
}

OptionGroup.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함

/**
 * @description	미결
 * @param 		{String}	value
 * @return		{undefined}
 * @example		미결
 */
OptionGroup.prototype.setValue = function(value){
	for(var key in controls){
		var ctl = controls[key];
		
		if( typeof(ctl)=="function" )			continue;
		if( !(ctl instanceof OptionButton) )	continue;
		if( ctl.optionGroupName != this.name )	continue;
		
		if( !this.passEvent )
			ctl.passEvent = true;
		
		if( "" + ctl.matchUpValue == "" + value )
			ctl.setValue(1);
		else
			ctl.setValue(0);
		
		if( !this.passEvent )
			ctl.passEvent = false;
	}
};

/**
 * @description	미결
 * @param 		{String}	text
 * @return		{undefined}
 * @example		미결
 */
OptionGroup.prototype.setText = function(text){
	for(var key in controls){
		var ctl = controls[key];
		
		if( typeof(ctl)=="function" )			continue;
		if( !(ctl instanceof OptionButton) )	continue;
		if( ctl.optionGroupName != this.name )	continue;

		var tagText = "" + ctl.tagObject.parentElement.innerText;
		tagText = tagText.trim();

		if( !this.passEvent )
			ctl.passEvent = true;
		
		if( tagText.trim() == text.trim() )
			ctl.setValue(1);
		else
			ctl.setValue(0);
		
		if( !this.passEvent )
			ctl.passEvent = false;
	}
};

/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
OptionGroup.prototype.getValue = function(){
	for(var key in controls){
		var ctl = controls[key];
	
		if( typeof(ctl)=="function" )			continue;
		if( !(ctl instanceof OptionButton) )	continue;
		if( ctl.optionGroupName != this.name )	continue;
		
		if( ctl.value == 1 )
			return ctl.matchUpValue;
	}
};

/**
 * @description	미결
 * @param 		{String}	index
 * @return		{undefined}
 * @example		미결
 */
OptionGroup.prototype.setIndex = function(index){
	var idx = 1;

	for(var key in controls){
		var ctl = controls[key];
	
		if( typeof(ctl)=="function" )			continue;
		if( !(ctl instanceof OptionButton) )	continue;
		if( ctl.optionGroupName != this.name )	continue;
		
		if( idx == index && index > 0 ){
			if( !this.passEvent )
				ctl.passEvent = true;
			
			ctl.setValue(1);
			
			if( !this.passEvent )
				ctl.passEvent = false;
			
			return;
		}
		else{
			ctl.value = 0;
			ctl.tagObject.getElementsByTagName("input")[0].checked = false;
		}
		
		idx++;
	}
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
OptionGroup.prototype.getText = function(){
	for(var key in controls){
		var ctl = controls[key];
		
		if( typeof(ctl)=="function" )			continue;
		if( !(ctl instanceof OptionButton) )	continue;
		if( ctl.optionGroupName != this.name )	continue;
		
		if( ctl.value == 1 )
			return ("" + ctl.tagObject.innerText).trim();
	}
	
	return "";
};

/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
OptionGroup.prototype.getIndex = function(){
	var idx = 1;

	for(var key in controls){
		var ctl = controls[key];
		
		if( typeof(ctl)=="function" ) 			continue;
		if( !(ctl instanceof OptionButton) ) 	continue;
		if( ctl.optionGroupName != this.name )	continue;
	
		if( ctl.value == 1 )
			return idx;
		
		idx++;
	}
	
	return -1;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
OptionGroup.prototype.getColumnCount = function(){
	var cnt = 0;
	
	for(var key in controls){
		var ctl = controls[key];
		
		if( typeof(ctl)=="function" ) 			continue;
		if( !(ctl instanceof OptionButton) ) 	continue;
		if( ctl.optionGroupName != this.name )	continue;
		
		cnt++;
	}
	
	return cnt;
};

/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
OptionGroup.prototype.setFocus = function(){
	for(var key in controls){
		var ctl = controls[key];
		
		if( typeof(ctl)=="function" )			continue;
		if( !(ctl instanceof OptionButton) )	continue;
		if( ctl.optionGroupName != this.name )	continue;
		
		if( ctl.value == 1 )
			ctl.tagObject.focus();
	}
	
	return;
};


var dialogPopupItems = {};
/**
	* @class CommandButton 기능키
	* @constructor    
	* @description ControlBase를 상속받고 해당 컨트롤의 ID, Name, 태그속성을 설정합니다.<br>
*  상수, 속성 선언 및 클릭 이벤트를 선언<br>
* @param {string} controlId 해당 컨트롤의 ID
* @param {string} controlName 해당 컨트롤의 Name
* @param {object} tagObject 해당 컨트롤의 태그 속성
* @return 반환값 없음
* @property {number} value 버튼 클릭시 0(default : 1)
* @property {boolean} mouseover 마우스 오버시 true(default : false)
* @property {number} commandType 버튼의 타입(default : 0)
* @property {array} objectNames 연결된 객체명들
* @property {number} FORM_CLEAR  버튼타입 1 : Clear
* @property {number} FORM_DEL 버튼타입 2 : 삭제
* @property {number} FORM_WRITE 버튼타입 3 : 확인
* @property {number} FORM_END 버튼타입 4 : 종료
* @property {number} GW_ROUTE 버튼타입 5 : 결재경로
* @property {number} SEARCH 버튼타입 6 : 찾기
* @property {number} CHECK 버튼타입 7 : 체크
* @property {number} ADDROW 버튼타입 8 : 신규항목추가
* @property {number} DELROW 버튼타입 9 : 현재항목삭제
* @property {number} MOVEUP 버튼타입 10 : 한줄위로
* @property {number} MOVEDOWN 버튼타입 11 : 한줄아래로
* @property {number} FORM_APPLY 버튼타입 12 : 값넘겨주기
* @property {number} FORM_CALL 버튼타입 13 : 다른화면부르기
* @property {number} BATCH_CALL 버튼타입 14 : 서비스(Batch)호출
* @property {number} GW_CALLCAT 버튼타입 15 : 그룹웨어분류코드
* @property {number} REPORTCALL 버튼타입 16 : 레포트(Report)보기
* @property {number} MAKENUM 버튼타입 17 : 번호부여하기
* @property {number} BAT_REPORT 버튼타입 18 : 배치+레포트
* @property {number} BRINGDATA 버튼타입 19 : 전단계조회키
* @property {number} CROSSVIEW_X 버튼타입 20 : CrossTab 보기(사용안함)
* @property {number} SELSVRFILE 버튼타입 21 : 화일선택(FTP서버,중복방지 이름변경)
* @property {number} CHARTVIEW 버튼타입 22 : Chart 보기
* @property {number} CROSSPRT_X 버튼타입 23 : CrossTab 인쇄(사용안함)
* @property {number} CROSSVIEW 버튼타입 24 : 분석레포트(Cross)보기
* @property {number} SAVE_XLS 버튼타입 25 : 엑셀(Excel)로 저장
* @property {number} SELBINARY 버튼타입 26 : 화일선택(FTP 이진데이타)
* @property {number} GW_RETURN 버튼타입 27 : 반송
* @property {number} CROSSPREVW 버튼타입 28 : 분석시트미리보기
* @property {number} CROSSPRINT 버튼타입 29 : 분석시트인쇄
* @property {number} CROSS_XLS 버튼타입 30 : 분석시트엑셀저장
* @property {number} EXCELBATCH 버튼타입 31 : 엑셀배치
* @property {number} SELCLIFILE 버튼타입 33 : 화일선택(그림파일 파일명만)
* @property {number} EXECOMMAND 버튼타입 34 : EXE실행
* @property {number} DWNLOADXLS 버튼타입 35 : 엑셀다운로드
* @property {number} DWNLOADFILE 버튼타입 36 : 파일받기
* @property {number} SHOWCALNDR 버튼타입 37 : 칼렌더보기
* @property {number} FLASH_ACT 버튼타입 38 : 플레시동작 호출
* @property {number} OBJECTLOAD 버튼타입 39 : 객체채우기
* @property {number} UPLOADCLIP 버튼타입 40 : 클립보드업로드
* @property {number} SHOWHELP 버튼타입 41 : 도움말표시
* @property {number} ETC 버튼타입 99 : 버튼타입 ETC
*/
function CommandButton(controlId, controlName, tagObject){
    // 상속선언부
    /**
	    * @description	미결
	    */
    this.base = ControlBase;              			//부모클래스 지정
    this.base(controlId, controlName, tagObject);   //부모클래스 생성자호출
    
    // 상수 선언부
    this.COMMANDTYPE = {
    		FORM_CLEAR : 1	, // Clear
    		FORM_DEL   : 2	, // 삭제
    		FORM_WRITE : 3	, // 확인
    		FORM_END   : 4	, // 종료
    		GW_ROUTE   : 5	, // 결재경로
    		SEARCH     : 6	, // 찾기
    		CHECK      : 7	, // 체크
    		ADDROW     : 8	, // 신규항목추가
    		DELROW     : 9	, // 현재항목삭제
    		MOVEUP     : 10,  // 한줄위로
    		MOVEDOWN   : 11,  // 한줄아래로
    		FORM_APPLY : 12,  // 값넘겨주기
    		FORM_CALL  : 13,  // 다른화면부르기
    		BATCH_CALL : 14,  // 서비스(Batch)호출
    		GW_CALLCAT : 15,  // 그룹웨어분류코드
    		REPORTCALL : 16,  // 레포트(Report)보기
    		CROSSVIEW  : 24,  // 분석레포트(Cross)보기
    		MAKENUM    : 17,  // 번호부여하기
    		BAT_REPORT : 18,  // 배치+레포트
    		BRINGDATA  : 19,  // 전단계조회키
    		CROSSVIEW_X: 20,  // CrossTab 보기:사용안함
    		CROSSPRT_X : 23,  // CrossTab 인쇄:사용안함
    		SELSVRFILE : 21,  // 화일선택(FTP서버,중복방지 이름변경)
    		CHARTVIEW  : 22,  // Chart 보기
    		SAVE_XLS   : 25,  // 엑셀(Excel)로 저장
    		SELBINARY  : 26,  // 화일선택(FTP 이진데이타)
    		GW_RETURN  : 27,  // 반송
    		CROSSPREVW : 28,  // 분석시트미리보기
    		CROSSPRINT : 29,  // 분석시트인쇄
    		CROSS_XLS  : 30,  // 분석시트엑셀저장
    		EXCELBATCH : 31,  // 엑셀배치
    		SELCLIFILE : 33,  // 화일선택 (그림파일 파일명만)
    		EXECOMMAND : 34,  // EXE실행
    		DWNLOADXLS : 35,  // 엑셀다운로드
    		DWNLOADFILE: 36,  // 파일받기
    		SHOWCALNDR : 37,  // 칼렌더보기
    		FLASH_ACT  : 38,  // 플레시동작 호출
    		OBJECTLOAD : 39,  // 객체채우기
    		UPLOADCLIP : 40,  // 클립보드업로드
    		SHOWHELP   : 41,  // 도움말표시
    		ETC: 99};
    
    // 속성 선언부

	this.value = 1; // (1/0)
	this.mouseover = false; 
    this.commandType = 0;
    this.objectNames = [];
    
    this.uploadFrame = null;
    this.uploadSWF = null;
    
    if (tagObject.getAttribute("linkedobjectnames") != null && tagObject.getAttribute("linkedobjectnames") != ""){
    	this.objectNames = tagObject.getAttribute("linkedobjectnames").split(",");
    }
    // 이벤트 선언부
     setEventHandler(this.tagObject, "click",    commandbutton_Click);
    
    // DIV 버튼의 처리부
    if (this.tagObject.tagName != "BUTTON"){
    	var childDiv = this.tagObject.getElementsByTagName("div")[0];
        setEventHandler(this.tagObject, "focus",     commandbutton_Focus);
        setEventHandler(this.tagObject, "blur",      commandbutton_Blur);
        setEventHandler(this.tagObject, "mousemove", commandbutton_MouseMove);
        setEventHandler(this.tagObject, "mousedown", commandbutton_MouseDown);
        setEventHandler(this.tagObject, "mouseup",   commandbutton_MouseUp);
        setEventHandler(this.tagObject, "mouseout",  commandbutton_MouseOut);
        setEventHandler(this.tagObject, "keydown",   commandbutton_KeyDown);
        setEventHandler(this.tagObject, "keyup",     commandbutton_KeyUp);
    }
    
    if(tagObject){
    	/*수정일:2018.01.08 
    	 *수정자:김재익
    	 *IE에서 높이를 계산할때 보더라인을 제외한 높이가 계산되어 텍스트라벨이 중앙에 오지 않음
    	 *화면 CSS 에서 lineHeight을 넣어줌
    	 **/
    	//버튼 line-height 설정
//    	this.tagObject.style.lineHeight = getStyle(this.tagObject).height; 
    	//버튼 탭인덱스 설정
    	this.tagObject.setAttribute("tabIndex", "999");
    }

    // 안에  DIV가 있으면 클릭이벤트에 blur가 호출 되는 IE버그 해결용
    /**
     * @description	미결
     */
    this.stateMouseDown = false;
    
//	this.image = tagObject.className;
    /**
	 * 2016-06-23 김재익
     * 버튼동작 투명도 조정
     */
    if (tagObject.getAttribute("disabled") == "true") {
//    	tagObject.style.opacity = "0.6";
//    	tagObject.style.filter = 'Alpha(Opacity=60)';
    	this.tagObject.classList.remove(this.image);
		this.tagObject.classList.add(this.image+"-disabled");
    }
};

CommandButton.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함

/* 포커스 주기*/
/**
 * @description 컨트롤에 포커스를 지정합니다.
 * @return {boolean} wReturn  true : 포커스 얻음, false : 포커스 잃음
 * @return {boolean} true를 리턴합니다. 에러발생시 false 리턴
 */
CommandButton.prototype.focus = function(){
	// functionname : [CommandButton.focus]
	                   
   	var wReturn = true;
	try {
		this.tagObject.focus();
	} catch (e){
		wReturn = false;
	}
	return wReturn;
};

/**
 * @description 버튼의 타입을 설정합니다.
 * @param {number} commandType 버튼의 타입 상수값이 들어있는 속성
 * @return 반환값 없음
 */
CommandButton.prototype.setCommandType = function(commandType){
	// functionname : [CommandButton.setCommandType]
		               	
	this.commandType = commandType;
};
/**
 * @description 버튼의 활성화/비활성화 설정입니다.
 * @param {string} enabled 활성화상태(비활성화 : disabled)
 * @return 반환값 없음
 */
CommandButton.prototype.setEnabled = function(enabled){
	// functionname : [Control.setEnabled]
	                   this.enabled = enabled;
	// 하위 테그들의 글자색 조정
    this.tagObject.disabled = !enabled;
	for (var i = 0; i < this.tagObject.children.length;i++){
		childTag = this.tagObject.children[i];
		childTag.disabled = !enabled;
		for (var j = 0; j < childTag.children.length;j++){
			childTag.children[j].disabled = !enabled;
		}
	}
	if (this.uploadFrame != null) {
		this.uploadFrame.setEnabled(enabled);
	}
	
	if (enabled){
	    this.tagObject.setAttribute("tabIndex", "999");
	} else {
	    this.tagObject.setAttribute("tabIndex", "-1");
	}
	setCommonButton(this);
	
	/**
	 * 2016-06-23 김재익
     * 버튼동작 투명도 조정
     */
	if (!enabled) {
//		this.tagObject.style.opacity = "0.6";
//		this.tagObject.style.filter = "Alpha(Opacity=60)";
		this.tagObject.classList.remove(this.image);
		this.tagObject.classList.add(this.image+"-disabled");
    } else {
//    	this.tagObject.style.opacity = "";
//    	this.tagObject.style.filter = "";
    	this.tagObject.classList.remove(this.image+"-disabled");
    	this.tagObject.classList.add(this.image);
    }
};

/**
 * @description 해당 버튼 컨트롤을 찾아 ID값을 반환합니다.
 * @param {object} em 해당 컨트롤 태그객체
 * @return wReturn 컨트롤의 ID값을 저장
 */
function searchControl_CommandButton(em){
	var pEm = null;
	var image = null;
	var wReturn = null;
	
	try{
		pEm = em;
		image = pEm.getAttribute("image");
		
//		while (pEm.parentNode && !pEm.className.startsWith("CommandButton")) 
//			pEm = pEm.parentNode;
//		if (pEm.className.startsWith("CommandButton")) 
//		    wReturn = getControlById(pEm.id);
		
		while( pEm.parentNode && pEm.tagName.toLowerCase() != "body" && image !== "CommandButton" ){
			pEm = pEm.parentNode;
			image = pEm.getAttribute("image");
		}
		
		if( pEm.getAttribute("image") === "CommandButton" ){
			wReturn = getControlById(pEm.id);
		}
		else{
			pEm = null;
			pEm = em;
			
			while(pEm.parentNode && !pEm.className.startsWith("CommandButton"))
				pEm = pEm.parentNode;
			
			if( pEm.className.startsWith("CommandButton") ) 
				wReturn = getControlById(pEm.id);
		}
		
		image = null;
		pEm = null;
	}
	catch(e){}
	
	return wReturn;
};

/**
 * @description 버튼 컨트롤의 텍스트 정렬상태를 설정합니다(왼쪽정렬, 오른쪽정렬, 가운데정렬)
 * @param {string} alignment 텍스트 정렬 값(right, left, center)
 * @return 반환값 없음
 */
CommandButton.prototype.setAlignment = function(alignment){
	// functionname : [CommandButton.setAlignment]
		               	
	this.alignment = alignment;
    this.tagObject.getElementsByTagName("span")[0].style.textAlign = alignment;
};
/**
 * @description 버튼 컨트롤의 텍스트 굵기를 설정합니다.
 * @param {boolean} fontBold 텍스트 굵기 설정 값(true : bold, false : normal)
 * @return 반환값 없음
 */
CommandButton.prototype.setFontBold = function(fontBold){
	// functionname : [CommandButton.setFontBold]
		               	
	this.fontBold = fontBold;
    wValue = (fontBold == "true" ? "bold" : "normal");
    this.tagObject.getElementsByTagName("span")[0].style.fontWeight = wValue;
};
/**
 * @description 버튼 컨트롤 텍스트의 이텔릭체 적용여부를 설정합니다.
 * @param {boolean} fontItalic 이텔릭체 설정 값(true : italic, false : normal)
 * @return 반환값 없음
 */
CommandButton.prototype.setFontItalic = function(fontItalic){
	// functionname : [CommandButton.setFontItalic]
		               	
	this.fontItalic = fontItalic;
    wValue = (fontItalic == "true" ? "italic" : "normal");
    this.tagObject.getElementsByTagName("span")[0].style.fontStyle = wValue;
};
/**
 * @description 버튼 컨트롤 텍스트의 글꼴을 설정합니다.
 * @param {string} fontName 글꼴이름
 * @return 반환값 없음
 */
CommandButton.prototype.setFontName = function(fontName){
	// functionname : [CommandButton.setFontName]
		               	
	this.fontName = fontName;
    this.tagObject.getElementsByTagName("span")[0].style.fontFamily = fontName;
};
/**
 * @description 버튼 컨트롤 텍스트의 글씨 사이즈를 설정합니다.
 * @param {number} fontSize 글씨 사이즈 값
 * @return 반환값 없음
 */
CommandButton.prototype.setFontSize = function(fontSize){
	// functionname : [CommandButton.setFontSize]
		               	
	this.fontSize = fontSize;
    this.tagObject.getElementsByTagName("span")[0].style.fontSize = fontSize + "pt";
};
/**
 * @description 버튼 컨트롤 텍스트의 취소선을 설정합니다.
 * @param {boolean} fontStrikethru 취소선 설정 값(true : line-through, false : none)
 * @return 반환값 없음
 */
CommandButton.prototype.setFontStrikethru = function(fontStrikethru){
	// functionname : [CommandButton.setFontStrikethru]
		               	
	this.fontStrikethru = fontStrikethru;
	if (fontStrikethru){
		this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "line-through";
	} else {
		this.tagObject.getElementsByTagName("span")[0].textDecoration = "none";
	}
};
/**
 * @description 버튼 컨트롤 텍스트의 밑줄을 설정합니다.
 * @param {boolean} fontunderline 밑줄 설정 값(true : underline, false : none)
 * @return 반환값 없음
 */
CommandButton.prototype.setFontUnderline = function(fontUnderline){
	// functionname : [CommandButton.setFontUnderline]
		               	
	this.fontUnderline = fontUnderline;
	if (fontUnderline){
        this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "underline";
	} else {
        this.tagObject.getElementsByTagName("span")[0].style.textDecoration = "none";
	}
};
/**
 * @description 단축키로 지정한 버튼의 텍스트에 핫키로 지정한 문자에 밑줄을 넣어줍니다.<br>
 * 단축키 지정 문자 앞에 &를 넣어주면 &앞의 문자에 밑줄을 넣은 후 텍스트에서 &를 빼고 반환합니다.
 * @param {string} pStr 버튼의 텍스트 문자열
 * @param {string} pKey 핫키 지정 문자
 * @example getAccessText(Se&arch,a)	return Se<u>a</u>rch
 * @return {string} wStr 밑줄을 넣은 문자를 반환한다.
 */
CommandButton.prototype.getAccessText = function(pStr, pKey){
	// functionname : [CommandButton.getAccessText]

	var wIndex = pStr.indexOf("&");
    if (wIndex == -1) return pStr;
    
    pKey = pStr.substring(wIndex + 1, wIndex + 2);
    var wStr = pStr.substring(0,wIndex);
    wStr += "<u>";
    wStr +=  pStr.substring(wIndex + 1, wIndex + 2);
    wStr += "</u>";
    wStr +=  pStr.substring(wIndex + 2);
    
    return wStr;
};
/**
 * @description 버튼 컨트롤의 핫키를 지정합니다.<br>
 * 단축키로 지정할 문자 앞에 &를 넣어주면 &앞의 문자를 핫키로 지정합니다.
 * @param {string} pStr 버튼의 텍스트 문자열
 * @exaple getAccessKey(Se&arch)	return : a
 * @return 지정된 핫키 문자값
 * 
 */
CommandButton.prototype.getAccessKey = function(pStr){
	// functionname : [CommandButton.getAccessKey]

    var wIndex = pStr.indexOf("&");
    if (wIndex == -1) return pStr;
    
    var wKey = pStr.substring(wIndex + 1, wIndex + 2);
    return wKey;
};
/**
 * @description 핫키에 툴팁을 달아줍니다.
 * @param {string} caption 툴팁 설명글
 * @return 반환값 없음
 */
CommandButton.prototype.setCaption = function(caption){
	// functionname : [CommandButton.setCaption]

	this.caption = caption;
	
    var wKey = this.getAccessKey(caption);
    var wStr = this.getAccessText(caption);
    this.tagObject.getElementsByTagName("span")[0].innerHTML = wStr;
    if (wKey.length > 0) this.tagObject.setAttribute("accessKey", wKey);
};
/**
 * @description	미결
 * @param	{string}	linkname
 * @param	{string}	picname
 * @param	{string}	ftpDir
 * @param	{string}	noftp
 * @param	{string}	nozip
 * @param	{Object}	directUploadGu
 * @return	{undefined}
 * @example	미결
 */
CommandButton.prototype.selectFile = function(linkname, picname, ftpDir, noftp, nozip, directUploadGu){
	// functionname : [CommandButton.selectFile]

    if (jUploadPrefix.length == 0) jUploadPrefix = timeEncodeString();
    var IFrameLayer = document.getElementById("IFrameLayer");  
    this.uploadFrame = new IFrame_Upload(IFrameLayer, jUploadPrefix + this.controlName, linkname, picname, ftpDir, noftp, nozip, directUploadGu);
    
    this.uploadFrame.selectFile();

};
/**
 * @description 선택된 파일을 삭제합니다.
 * @param {string} fileName 삭제할 파일 네임
 * @return 반환값 없음
 */
CommandButton.prototype.removeUploadFile = function(fileName){
	// functionname : [CommandButton.removeUploadFile]
	                   
	if (this.uploadFrame)
		this.uploadFrame.deleteFileControl(fileName);
	if (this.uploadSWF)
		removeFile_SWF(this.uploadSWF, fileName);
};
/**
 * @description 업로드 버튼 입니다.
 * @return 반환값 없음
 */
CommandButton.prototype.uploadFile = function(){
	// functionname : [CommandButton.uploadFile]

	if (this.uploadFrame)
		this.uploadFrame.uploadFile();
	if (this.uploadSWF)
		uploadFile_SWF(this.uploadSWF);
	};

var clipFileNameControlName = "";
var clipFilePicControlName = "";

/**
 * @description 캡처한 화면을 저장합니다(윈도우 클립보드에 저장되어 있는 파일 업로드)<br>
 * iframe 태그객체(Name, id = upClip) src 속성에 파일경로가 입력됩니다. 
 * @param {string} picnamectlname 사진컨트롤명
 * @param {string} filenamrctlname 파일컨트롤 네임
 * @param {string} subDir 그림위치
 * @return 반환값 없음 
 */
CommandButton.prototype.uploadClipBoard = function(picnamectlname , filenamrctlname, subDir){
	// functionname : [CommandButton.uploadClipBoard]
	                   
	//if (jUploadPrefix.length == 0) {
	    // 무조건 새로딴다 USER_PERSONALID, USER_USERID둘다 없는 경우를 대비
		jUploadPrefix = timeEncodeString();
	//}

    var uploadPrefix = jUploadPrefix.substring(1,jUploadPrefix.length - 1);
    var picTag = controls[picnamectlname].tagObject;	
    var width  = parseIntSize(picTag.style.width) - 2;
    var height = parseIntSize(picTag.style.height) - 2;

    var src = getContextPath() + "/pages/groupware/clipboard/uploadClip.jsp";
    var id = (USER_USERID.length == 0 ? USER_PERSONALID : USER_USERID);
    var param = "?subDir=" + subDir + "&picName=" + uploadPrefix + id + ".jpg&width=" + width + "&height=" + height;

    controls[picnamectlname].tagObject.innerHTML = "<iframe name='upClip' id='upClip' src='" + src + param + "'></iframe>";
    
    clipFileNameControlName = filenamrctlname;
    clipFilePicControlName = picnamectlname;

    return;
};
/**
 * @description	미결
 * @return	{void}
 * @example	미결
 */
function clipUpload_Completed(){
    var id = (USER_USERID.length == 0 ? USER_PERSONALID : USER_USERID);
    var uploadPrefix = jUploadPrefix.substring(1,jUploadPrefix.length - 1);
	controls[clipFileNameControlName].setValue(uploadPrefix + id + ".jpg");
	return;
}

/**
 * @description	미결
 * @return	{void}
 * @example	미결
 */
function clipUpload_Failed(){
	controls[clipFileNameControlName].setValue("");
	controls[clipFilePicControlName].clear();
	return;
}
/**
 * @description 그림파일을 업로드해줍니다.
 * @param {string} filenamrctlname 업로드할 그림이 채워져있는 컨트롤네임입니다.
 * @param {string} picnamectlname 업로드할 파일 네임입니다.
 * @param {string} subDir 업로드할 파일의 경로입니다.
 * @return 반환값 없음
 */
CommandButton.prototype.loadPicture = function(filenamrctlname, picnamectlname , subDir){
	// functionname : [CommandButton.loadPicture]

    var svrFileName = controls[filenamrctlname].value;
    
    if (svrFileName == null || picnamectlname == null || subDir == null){
    	return;
    }
    if (svrFileName.trim().length == 0 || picnamectlname.trim().length == 0 || subDir.trim().length == 0){
    	return;
    }
    controls[picnamectlname].loadPicture(svrFileName, subDir);
    return;
};
/**
 * @description 시트에 있는 파일을 엑셀파일로 바꿔서 서버에 올립니다
 * @param {string} linkname 엑셀파일로 바꿀 시트의 네임
 * @return 반환값 없음
 */
CommandButton.prototype.makeExcelFile = function(linkname, templateXLSFileName, paramsJXLS, downFileName){
	// functionname : [CommandButton.makeExcelFile]
	
	downFileName = (typeof downFileName == "undefined") ? __FORM__NAME__ : downFileName;
	
	// AUIGrid 일때 엑셀 다운로드
	if(controls[linkname].auiGridProps) {
		controls[linkname].excelDownLoad(true, downFileName);
		return;
	}

	var generationInfo = controls[linkname].getDataForExcel();

    var IFrameLayer = document.getElementById("IFrameLayer");  
    var iframe = new IFrame_Excel(IFrameLayer, timeEncodeString() + this.controlName, generationInfo, templateXLSFileName, paramsJXLS, downFileName);
    iframe.submit();
};

CommandButton.prototype.makeExcelData = function(sqlnum, paramInfo, permitNull, environmentInfo, templateXLSFileName, paramsJXLS){
	// functionname : [CommandButton.makeExcelData]

	var parent = document.getElementsByName("IFrameLayer")[0];
	var action = "makeExcel.do" ;
	var params = [new Parameter("lang", USER_LANGUAGE),
	              new Parameter("cogu", USER_COGU),
	              new Parameter("personalId", USER_PERSONALID),
	              new Parameter("formid", USER_FORMID),
	              new Parameter("sqlnum", sqlnum),
	              new Parameter("permitNull", permitNull),
	              new Parameter("environmentInfo", environmentInfo),
	              new Parameter("paramInfo", paramInfo),
	              new Parameter("templateXLSFileName", templateXLSFileName),
	              new Parameter("paramsJXLS", paramsJXLS),
	              new Parameter("formName", document.title),
	              new Parameter("tm", (new Date()).valueOf())];
	
	var iFrame_DownLoad = new IFrame_DownLoad(parent, timeEncodeString() + this.controlName, action, params);
	iFrame_DownLoad.submit();

};
/**
 * @description 인쇄미리보기 버튼 입니다.
 * @param {string} linkname 인쇄할 파일 네임
 * @return 반환값 없음
 */
CommandButton.prototype.preview = function(linkname){
	// functionname : [CommandButton.preview]

	controls[linkname].preview();
};
/**
 * @description 인쇄 버튼 입니다.
 * @param {string} linkname 인쇄할 파일 네임
 * @return 반환값 없음
 */
CommandButton.prototype.print = function(linkname){
	// functionname : [CommandButton.print]

	controls[linkname].print();
};
/**
 * @description 달력버튼 입니다.
 * @param {string} linkname 날짜선택 결과가 들어갈 텍스트박스 네임 입니다.
 * @param {string} calendarType 달력의 타입입니다(yyymmdd, yyyymm, yyyy)
 * @return 반환값 없음
 */
CommandButton.prototype.showCalendar = function(linkname, calendarType){
	// functionname : [CommandButton.print]
	
	var control = controls[linkname];
	
	if( !control.enabled ) return false;
	
	var em = control.tagObject;
   	if (calendarType == 1){
		try {
	        popUpCalendar(em, control,'yyyymmdd',calendarType);
	    } catch (e){}
	} else if (calendarType == 2){
		try {
			//popUpMonthCalendar(em);
	        popUpCalendar(em, control,'yyyymm',calendarType);
	    } catch (e){}
	} else if (calendarType == 3){
		try {
			//popUpYear(em);
	        popUpCalendar(em, control,'yyyy',2);
	    } catch (e){} 
	}
    
   	return true;
};
/**
 * @description 숏컷키 입니다.
 * @param {string} pShortCutStr 선택된 숏컷키 문자 입니다.
 * @return 반환값 없음
 */
CommandButton.prototype.setShortCutKey = function(pShortCutStr){
	// functionname : [CommandButton.setShortCutKey]
	                   
	var controlName = this.controlName;
	shortcut.add(pShortCutStr, function() {
		controls[controlName].click();
	});
	return;
}
/**
 * @description 가져오기로 버튼 클릭시 발생하는 이벤트 입니다.
 * @event
 * 
 */
CommandButton.prototype.click = function(){
	// functionname : [CommandButton.click]
       // 사용자 코딩 추가영역을 호출한다
	if (!this.enabled) return false;
	
    var checkEvent = false;
   	try {
       	if (eval(this.controlId + "_onclick")) checkEvent = true;
    } catch(e){};

    if (checkEvent){
      var result = eval(this.controlId + "_onclick();");
      if (typeof(result)=="boolean") return result;
    };
    
    return true;

};

/*
 * 	2016-04-21 추가(차중훈)
 */
/**
 * @description	미결
 * @return  {boolean}
 * @example	미결
 */
CommandButton.prototype.uploadButtonClick = function(){
	// functionname : [CommandButton.excelUploadClick]
	
	if( !this.enabled )
		return false;
	
	var uploadFrame = null;
	var inputObjects = null;
	var inputObject = null;
	var isClicked = false;
	var i = 0;
	
	// 엑셀업로드, 파일업로드 버튼인 경우 버튼을 클릭하면 업로드 파일 선택창이 뜨도록 수정
	uploadFrame = this.uploadFrame;
	
	if( typeof uploadFrame != "undefined"
		&& uploadFrame != null
		&& (uploadFrame instanceof IFrame_UploadXL_Command 
			|| uploadFrame instanceof IFrame_UploadXL_CommandA
			|| uploadFrame instanceof IFrame_Upload_Command
			|| uploadFrame instanceof IFrame_UploadFRD_Command) 
	){
		//링크 컨트롤 체크
		var iframeName = uploadFrame.frm.getAttribute("target");
		var iframeObject = document.getElementsByName(iframeName)[0];
		var linkName = null;
		var linkObject = null;
		var isListBox = false;
		
		if( iframeObject != null && typeof iframeObject != "undefined" ){
			linkName = iframeObject.getAttribute("linkname");
			linkObject = document.getElementsByName(linkName)[0];
			
			if( linkObject != null && typeof linkObject != "undefined" )
				isListBox = /^ListBox.*/.test(linkObject.getAttribute("class"));
			
			//메모리 해제
			linkObject = null; linkName = null;
		}
		
		inputObjects = uploadFrame.frm.getElementsByTagName("input");
		
		for(i = 0; i < inputObjects.length && !isClicked; i++, inputObject = null){
			inputObject = inputObjects[i];
			
			//타입이 파일이면서 아직 파일을 선택하지 않은  inputObject를 클릭
			if( inputObject.getAttribute("type") == "file" && isListBox && inputObject.files.length <= 0 ){
				inputObject.click();
				isClicked = true;
			}
			else if( inputObject.getAttribute("type") == "file" && !isListBox ){
				inputObject.click();
				isClicked = true;
			}
		}
		
		//메모리 해제
		iframeObject = null; iframeName = null; inputObjects = null;
	}
	
	//메모리 해제
	uploadFrame = null;
    
    return isClicked;
};
/*
 * 	2016-04-21 추가(차중훈)
 */
/**
 * @description	미결
 * @param	{string}	formID
 * @param	{number}	width
 * @param	{number}	height
 * @return	{void}
 * @example	미결
 */
CommandButton.prototype.openDialogPopup = function(formID, width, height){
	
	//2. 파라메터 설정
    var queryString = "lang=" + USER_LANGUAGE + "&";
    queryString += "userId=" + USER_USERID + "&";
    if (typeof window.top != "undefined" && typeof window.top.tmpl != "undefined") queryString += "tmpl=" + window.top.tmpl + "&";
	
	//1. 화면 사이즈 & 위치 정보 계산
	var left = 0;
	var top = 0;
	// IE 6 이하 버전의 경우 너비와 높이를 재설정
   	if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 7 ) {
   		width += 10;
   		height += 35;
   	}
   	
   	// 팝업의 위치를 브라우저의 중앙으로 이동
   	left = Math.ceil( (window.screen.width - width) / 2 );
    top = Math.ceil( (window.screen.height - height) / 2 );
	
    var paramKeyStr = USER_FORMID + "." + this.controlId;
    var paramKeyLength = paramKeyStr.length;
    var params = null;
    var key = null;
    
    // localstorage를 지원하지 않은 경우 또는 기존 소스의 호환이 필요한 경우
    if( !IS_AVAILABLE_LOCALSTORAGE && typeof PARAMETER != "undefined" ){
    	params = {};
    	for(key in PARAMETER.parameterItems){
    		if( key.substring(0, paramKeyLength) != paramKeyStr ) continue;
    		
    		params[key.substring(paramKeyLength + 1)] = PARAMETER.getParameter(key);
    		key = null;
    	}
    }
    // localstorage가 사용 가능한 경우 : 파라메터 키를 URL로 전달
    else{
    	queryString += "paramKey=" + paramKeyStr + "&";
    }
    
    //3. URL 설정
    var url = getContextPath() + "/FlexForm_" + formID + "_Load.do?";
    // 테스트 모드(WebRun실행)인 경우 URL 재설정
    if( typeof TEST_MODE != undefined && TEST_MODE ){
		url = getContextPath() + "/test/FlexForm_" + formID + "_Load.do?";
	}
    
    // URL로 전달되는 파라메터 추가
    url += queryString + "tm=" + (new Date()).valueOf();
    
    //4. 화면 호출
    var str = "";
	str += "<html>";
	str += "<head>";
	str += "</head>"
	str += "<body>";
	str += "	<form id='callpopup' name='callpopup' method='post' action='" + url + "'>";
	if( params != null ){
		str += "		<input type='hidden' name='params' id='params' value=\"" + encodeURIComponent( JSON.stringify(params) ) + "\"/>";
	}
	str += "	</form>";
	str += "</body>";
	str += "<script>";
	str += " 	/*alert('callform');*/";
	str += " 	setTimeout(function(){ document.getElementsByName('callpopup')[0].submit(); }, 0);";
	str += "</script>";
	str += "</html>";
	
	modalCommandId = this.controlId;
	// 빈 팝업 다이얼로그 오픈
	if( typeof dialogPopupItems[modalCommandId] == "undefined" || (typeof dialogPopupItems[modalCommandId] != "undefined" && dialogPopupItems[modalCommandId].closed == true) ){
		if( !IS_IE9_OR_LOWER_VERSION ){
			var args = "width=" + width + ",height=" + height + ",toolbar=0,left=" + left + ",top=" + top + ",location=0,status=0,menubar=0,scrollbars=1,resizable=0";
			dialogPopupItems[modalCommandId] = modalDialogWindow = window.open("about:blank", "popup_" + this.controlId, args);
		}
		else{
			var winstyle = "status=no,width=" + width + ",height=" + height + ",menubar=no,scrollbars=no,left=" + left + ",top=" + top;
			window.margs = [this.controlId, "NO"];
			dialogPopupItems[modalCommandId] = modalDialogWindow = window.open(url, "popup_" + this.controlId, winstyle);
		}
	}
	//팝업내 소스 적용 및 화면 호출
	dialogPopupItems[modalCommandId].document.write("");
	dialogPopupItems[modalCommandId].document.write(str);
	
	// 팝업 다이얼로그 포커스 이동
	try { modalDialogWindow.focus(); } catch(e) { }
	
	return;
};
/**
 * @description	미결
 * @param	{string}	formID
 * @param	{number}	width
 * @param	{number}	height
 * @return	{void}
 * @example	미결
 */
CommandButton.prototype.openLayerPopup = function(formID, width, height){
	//레이어팝업 최대 크기(기본값)
	var MAX_WIDTH = 1024;
	var MAX_HEIGHT = 768;
	//레이어팝업 컨트롤
	var wControl = controls["layerPopupIframe"];
	//레이어팝업 파라메터 초기화
	delete wControl.parameters;
	
	//1. 파라메터 설정
	var queryString = "lang=" + USER_LANGUAGE + "&";   
	queryString += "userId=" + USER_USERID + "&";
    if (typeof top.tmpl != "undefined") queryString += "tmpl=" + top.tmpl + "&";
    
    var paramKeyStr = USER_FORMID + "." + this.controlId;
    var paramKeyLength = paramKeyStr.length;
    var params = null;
    var key = null;
    
    // localstorage를 지원하지 않은 경우 또는 기존 소스의 호환이 필요한 경우
    if( !IS_AVAILABLE_LOCALSTORAGE && typeof PARAMETER != "undefined" ){
    	wControl.parameters = [];
    	
    	for(key in PARAMETER.parameterItems){
    		if( key.substring(0, paramKeyLength) != paramKeyStr ) continue;
    		
    		wControl.parameters[key.substring(paramKeyLength + 1)] = PARAMETER.getParameter(key);
    		key = null;
    	}
    }
    // localstorage가 사용 가능한 경우 : 파라메터 키를 URL로 전달
    else{
    	queryString += "paramKey=" + paramKeyStr + "&";
    }
		
    //2. URL 설정
    wControl.action = getContextPath() + "/FlexForm_" + formID + "_Load.do?" + queryString + "tm=" + (new Date()).valueOf();
	if (TEST_MODE != undefined && TEST_MODE){
        wControl.action = getContextPath() + "/test/FlexForm_" + formID + "_Load.do?" + queryString + "tm=" + (new Date()).valueOf();
    }
	
	//3. 페이지 호출
	if (window.postMessage){
        modalCommandId = this.controlId;
        modalDialogWindow = wControl.iframe.contentWindow;
	}
	
	// 페이지 이동
    wControl.moveToPage();
    wControl.tagObject.getElementsByTagName("IFRAME")[0].style.height = height + 'px';
    
    //4. 레이어팝업 위치 및 사이즈 설정
    // 너비, 높이 설정
    var frameWidth  = width + 20;
    var frameHeight = height + 20;
    if (width > MAX_WIDTH){
    	frameWidth = MAX_WIDTH + 20;
    }
    if (height > MAX_HEIGHT){
    	frameHeight = MAX_HEIGHT;
    	document.getElementById("layerPopupIframe").style.overflow = "auto";
    }
    // 위치 설정
    var wLeft =(getVisibleDocWidth() - frameWidth) / 2;
    var wTop  = (getVisibleDocHeight() - frameHeight) / 2;
    
    // 레이어팝업 이동
    controls["layerPopup"].moveWindow(wLeft, wTop, frameWidth, frameHeight);
    // 레이어팝업 보이기
    controls["layerPopup"].setVisible(true);
    
    return;
}
/**
 * @description	미결
 * @param	{string}	formID
 * @return	{void}
 * @example	미결
 */
CommandButton.prototype.openNewWindow = function(formID){
	//1. 파라메터 설정
	var queryString = "lang=" + USER_LANGUAGE + "&";   
	queryString += "userId=" + USER_USERID + "&";
    if (typeof top.tmpl != "undefined") queryString += "tmpl=" + top.tmpl + "&";
	
	var paramKeyStr = USER_FORMID + "." + this.controlId;
    var paramKeyLength = paramKeyStr.length;
    var params = null;
    var key = null;
    
	// localstorage를 지원하지 않은 경우 또는 기존 소스의 호환이 필요한 경우
    if( !IS_AVAILABLE_LOCALSTORAGE && typeof PARAMETER != "undefined" ){
    	params = {};
    	for(key in PARAMETER.parameterItems){
    		if( key.substring(0, paramKeyLength) != paramKeyStr ) continue;
    		
    		params[key.substring(paramKeyLength + 1)] = PARAMETER.getParameter(key);
    		key = null;
    	}
    }
    // localstorage가 사용 가능한 경우 : 파라메터 키를 URL로 전달
    else{
    	queryString += "paramKey=" + paramKeyStr + "&";
    }
    
    //2. URL 설정
	var url = getContextPath() + "/FlexForm_" + formID + "_Load.do?" + queryString + "tm=" + (new Date()).valueOf();
	if (TEST_MODE != undefined && TEST_MODE){
		url = getContextPath() + "/test/FlexForm_" + formID + "_Load.do?" + queryString + "tm=" + (new Date()).valueOf();
	}
	
	// 새창 팝업명 설정
	var popupName = formID + (new Date()).valueOf();

	//3. 화면 호출
	var frm = null;
	var input = null;
	frm = document.createElement("form");
	document.body.appendChild(frm);
	frm.method = "POST" ;
	frm.name   = frm.id = (new Date()).valueOf();
	frm.action = url;
	frm.target = popupName;
	
	if( params != null ){
		// hidden타입 input 생성 및 form에 추가, 설정
		input = document.createElement("input");
		frm.appendChild(input);
		input.type = "hidden";
		input.name = "params";
		input.value = encodeURIComponent( JSON.stringify(params) );
	}
	
	window.open("about:blank", popupName);
    
    frm.submit();
    
    return;
}
/**
 * @description	미결
 * @param	{string}	formName
 * @param	{string}	formID
 * @return  {undefined}
 * @example	미결
 */
CommandButton.prototype.openNewTab = function(formName, formID){
	//1. 파라메터 설정
	var queryString = "";
	var paramKeyStr = USER_FORMID + "." + this.controlId;
    var paramKeyLength = paramKeyStr.length;
    var params = null;
    var key = null;
    
    // URL 쿼리 추가
    queryString = "lang=" + USER_LANGUAGE + "&";
    queryString += "userId=" + USER_USERID + "&";
    if (typeof top.tmpl != "undefined") queryString += "tmpl=" + top.tmpl + "&";
    queryString += "t=" + encodeURI(encodeURIComponent(formName)) + "&";
    
	// localstorage를 지원하지 않은 경우 또는 기존 소스의 호환이 필요한 경우
    if( !IS_AVAILABLE_LOCALSTORAGE && typeof PARAMETER != "undefined" ){
    	params = {};
    	for(key in PARAMETER.parameterItems){
    		if( key.substring(0, paramKeyLength) != paramKeyStr ) continue;
    		
    		params[key.substring(paramKeyLength + 1)] = PARAMETER.getParameter(key);
    		key = null;
    	}
    }
    // localstorage가 사용 가능한 경우 : 파라메터 키를 URL로 전달
    else{
    	queryString += "paramKey=" + paramKeyStr + "&";
    }
    
    // 데이터셋 전달을 위해 top에 데이터셋을 추가
    for(key in PARAMETER.parameterItems){
    	if( key.substring(0, paramKeyLength) != paramKeyStr ) continue;	
    	if( ("" + PARAMETER.parameterInfo[key].type).toLocaleLowerCase() == "dataset" ) top[key.substring(paramKeyLength + 1)] = dataSets[PARAMETER.getParameter(key)];
    }
    
    //2. URL 설정
    formID = (formID.substring(0, 3) == "Dlg") ? formID.substring(3) : formID;
    var url = getContextPath() + "/FlexForm_" + formID + "_Load.do?" + queryString + "tm=" + (new Date()).valueOf();
	if (TEST_MODE != undefined && TEST_MODE){
		url = getContextPath() + "/test/FlexForm_" + formID + "_Load.do?" + queryString + "tm=" + (new Date()).valueOf();
	}
	
	//3. 화면 호출
	var tabNum = -1;
	var tab_document = null;
	var frm = null;
	var input = null;
	
	// 새 탭을 빈 페이지로 추가
	top.addFramePage(formName, "about:blank", formID);
	
	// 추가한 탭의 document 받음
	tabNum = top.frames[top.frames.length - 1].searchTab(formID);
	if( tabNum < 0 ) alert(getText("message_commandbutton_001", "추가된 탭을 찾을 수 없습니다."));
	
	tab_document = top.frames[tabNum].document;
	
	// 추가한 탭의 document에 form을 추가 및 페이지 호출
	frm = document.createElement("form");  
    tab_document.body.appendChild(frm);
    frm.method = "POST" ;
    frm.name   = frm.id = (new Date()).valueOf();
    frm.action = url;
    
    // 로컬스토리지를 지원하지 않은 경우, 파라메터 추가
    if( params != null ){
    	// hidden타입 input 생성 및 form에 추가, 설정
    	input = document.createElement("input");
    	frm.appendChild(input);
    	input.type = "hidden";
    	input.name = "params";
    	input.value = encodeURIComponent( JSON.stringify(params) );
    }
    
    frm.submit();
}
/**
 * @description	미결
 * @return	{void}
 * @example	미결
 */
CommandButton.prototype.applyAndExit = function(){
	var i = 0;
	var key = null;
	
	//
	var returnArg = "";
	returnArg += "{";
	for(key in PARAMETER.parameterInfo){
		if( PARAMETER.parameterInfo[key].isreturn && PARAMETER.parameterInfo[key].type != "Dataset" ){
			returnArg += "\"" + key + "\":\"" + PARAMETER.getParameter(key) + "\",";
		}
		
		key = null;
	}
	if( returnArg.substring(returnArg.length - 1) == "," ) returnArg = returnArg.substring(0, returnArg.length - 1);
	returnArg += "}";
	
	//
	var dlgAruments = null;
	var id = null;
	var result = false;
	var callCommand = null;
	
	//
	if( IS_AVAILABLE_LOCALSTORAGE ){
		paramKey = PARAMETER.getParameter("paramKey");
		paramKeyLength = paramKey.length;
		callCommand = ("" + PARAMETER.getParameter("paramKey")).split(".")[1];
		
		if( opener !== window && parent === window ){
			if( typeof opener["setReturnValue_" + callCommand] == "undefined" ){ // 새창으로 부르기한 경우
				alert(getText("message_commandbutton_002", "새창을 호출하는 경우 먼저 창을 닫을 수 있기 떄문에 \n반환값을 처리하지 않도록 하고 있습니다. \n다이얼로그창 또는 레이어팝업을 이용하세요."));
				return;
			}
			//다이얼로그 팝업으로 부르기한 경우
			result = opener["setReturnValue_" + callCommand](USER_FORMID);				
		}
		else if( parent !== window && opener === null ){
			if( typeof parent["setReturnValue_" + callCommand] == "undefined" ){ // 새창으로 부르기한 경우
				alert(getText("message_commandbutton_003", "현재창(새탭)을 호출하는 경우 반환값을 처리하지 않도록 하고 있습니다. \n다이얼로그창 또는 레이어팝업을 이용하세요."));
				return;
			}
			//레이어팝업 호출한 경우
			result = parent["setReturnValue_" + callCommand](USER_FORMID);
		}
	}
	else{
		dlgAruments = [];
		
		try {
			if( modalArguments.length > 1 ){
				dlgAruments = modalArguments.split(";");
			}
			else if( modalArguments.length == 1 ){ // 새창으로 부르기한경우
				alert(getText("message_commandbutton_004", "새창을 호출하는 경우 먼저 창을 닫을 수 있기 떄문에 \n반환값을 처리하지 않도록 하고 있습니다. \n다이얼로그창을 이용하세요."));
				return;
				//dlgAruments = [command,"POST"];
			}
			else if( window.dialogArguments != undefined ){
				dlgAruments = window.dialogArguments;
			}
			else if( dlgAruments == undefined ){
				dlgAruments = opener.margs;
			}
		}
		catch(e){
			dlgAruments = opener.margs;
		}
		
		id = dlgAruments[0];
		
		if( dlgAruments[1] == "YES" ){
			if( window.opener )
				window.opener.returnValue = returnArg; 
			window.returnValue = returnArg;
			result = true;
		}
		else if( dlgAruments[1] == "NO" ){
			try{
				result = window.opener["setReturnValue_" + id](returnArg);
			}
			catch(e){
				result = eval("window.opener.setReturnValue_" + id + "(returnArg);");
			}
		}
		else if( dlgAruments[1] == "POST" ){
			if( thisIsIframe ){
				if( window.postMessage ){
//					result = window.parent.postMessage(returnArg, '*');
					window.parent.postMessage(returnArg, '*');
					result = true;
				}
				else{
					result = eval("window.parent.setReturnValue_" + id + "(returnArg);");
				}
			}
			else{
				if( typeof window.opener["setReturnValue_" + id] == "function" && !IS_IE9_OR_LOWER_VERSION ){
					//result = window.opener.postMessage(returnArg, '*');
					result = window.opener["setReturnValue_" + id](returnArg);
				}
				else{
					result = eval("window.opener.setReturnValue_" + id + "(returnArg);");
				}
			}
		}
	}
	
	//
	if( !result ){
		alert(getText("message_commandbutton_005", "반환 파라메터 전달 중 오류가 발생하였습니다."));
	}
	else{
		//팝업창에서 사용한 파라메터 삭제 및 로컬스토리지 클리어
		for(key in PARAMETER.parameterInfo){
			PARAMETER.remove(key);
		}
		//팝업창 닫기
		setTimeout(function(){ callWindowClose(); }, 0);
	}
	
	return;
};
/**
 * @description	미결
 * @param	{string}	url
 * @param	{string}	name
 * @return  {undefined}
 * @example	미결
 */
CommandButton.prototype.openManualDialog = function(url, name){
	
	window.open(url, name, 'width=1200px, height=730px, toolbar=no, location=no,scrollbars=yes, status=yes, directories=no,menubar=no,resizable=no,left=0,top=0');
	
	return;
};

/**
 * @description			시트에 시작 번호부터 마지막 번호까지 번호를 자동 생성(증가)하여 번호를 부여합니다. 시작 번호는 설정하지 않거나 컨트롤이 비어있는 경우 1부터 시작하고, 마지막 번호보다 시트 행이 더 많은 경우 마지막 번호까지만 생성하고 더이상 생성하지 않습니다.
 * @param	{string}	targetSheet		번호를 생성 및 부여할 시트 명
 * @param	{Array}		targetColumn	번호를 생성 및 부여할 시트의 컬럼 타이틀
 * @param	{string}	startNum		생성 및 부여할 번호의 시작 번호 컨트롤 명
 * @param	{string}	endNum			생성 및 부여할 번호의 마지막 번호 컨트롤 명
 * @return  {boolean}	정상적으로 동작이 완료되었다면 true를 리턴합니다. 만약 동작 중 오류가 발생하였다면 false가 리턴됩니다.
 * @example	controls["Command_1"].makeSheetNumbering("Sheet_1", ["seqNum"], "StartNum", "EndNum");
 */
CommandButton.prototype.makeSheetNumbering = function(targetSheet, targetColumn, startNum, endNum){
	var sheet = null;
	var startNumControl = null;
	var endNumControl = null;
	var targetColId = null;
	var targetColCount = 0;
	var maxRow = 0
	var number = 0;
	var i = 0; var j = 0; var n = "";
	
	//시트 컨트롤이 없거나 설정한 시트가 없는 경우, 설정한 시트 컨트롤이 시트가 아닌 경우, 예외처리
	sheet = controls[targetSheet];
	if( typeof EasySheet != "function" && sheet instanceof EasySheet ){ sheet = null; return false; }
	maxRow = sheet.maxRows;
	
	//설정한 컬럼의 길이가 0인 경우, 예외처리
	if( !(targetColumn instanceof Array) ){ sheet = null; return false; }
	targetColCount = targetColumn.length;
	if( targetColCount <= 0 ){ sheet = null; return false; }
	
	//텍스트 박스 컨트롤이 없거나 시작 번호 컨트롤이 설정되어 있지만 설정한 시작 번호 컨트롤이 텍스트박스 컨트롤이 닌 경우, 예외처리 
	if( typeof startNum != "undefined" && startNum != null ){
		startNumControl = controls[startNum];
		if( typeof TextBox != "function" && startNumControl instanceof TextBox ){ startNumControl = null; sheet = null; return false; }
		startNum = 1 * startNumControl.value;
		if( isNaN(startNum) ){ startNumControl = null; sheet = null; return false; }
		startNum = (startNum <= 0) ? 1 : startNum;
		startNumControl = null;
	}
	else startNum = 1;
	
	//텍스트 박스 컨트롤이 없거나 마지막 번호 컨트롤이 설정되어 있지만 설정한 마지막 번호 컨트롤이 텍스트박스 컨트롤이 닌 경우, 예외처리 
	if( typeof endNum != "undefined" && endNum != null ){
		endNumControl = controls[endNum];
		if( typeof TextBox != "function" && endNumControl instanceof TextBox ){ endNumControl = null; startNumControl = null; sheet = null; return false; }
		endNum = 1 * endNumControl.value;
		if( isNaN(endNum) ){ endNumControl = null; startNumControl = null; sheet = null; return false; }
		endNum = (endNum <= 0) ? -1 : endNum;
		endNumControl = null;
	}
	else endNum = -1;
	
	//번호 자동 생성(증가) 및 부여
	for(i = 0, number = startNum; i < maxRow; i++, number++, n = null){
		//
		n = (endNum > 0 && number > endNum) ? "" : number;
		//
		for(j = 0; j < targetColCount; j++, targetColId = null){
			targetColId = targetColumn[j];
			sheet.setValue(i, targetColId, n);
		}
	}
	
	return true;
};

/**
 * @name CommandButton#commandbutton_Click
 * @event 
 * @description 버튼 클릭 이벤트입니다.
 */
function commandbutton_Click(e)
{
  e=window.event || e;
    // 동작중이면 컴맨드 버튼은 눌려지지 않는다 
    if (jobControler.hasJob()) {
     	alert("Please Wait for completing current running job.");
    	return false;
    }
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
	var control = searchControl_CommandButton(em);
	
    return control.click();
};

/* *****************************************************************************
*  MAKE FILE UPLOAD AGENT
   arguments : parentNode: iframe's parentName name:iframe's name
               linkname: textbox controlName for filename
               picname : picture controls name for preeview
               ftpDir  : ftp upload directory under gw root dir 
* *****************************************************************************/
/**
 * @description 파일업로드 버튼 입니다.
 * @param {object} parentNode
 * @param {string} name
 * @param {string} linkname
 * @param {string} picname
 * @param {string} ftpDir
 * @param {string} noftp
 * @param {string} nozip
 * @param {number} directUploadGu
 * @param {number} buttonControl
 * @param {number} multiFileGu
 * @return 반환값 없음
 */
function IFrame_Upload_Command(parentNode, name, linkname, serverfilename, picname, ftpDir, noftp, nozip, directUploadGu, buttonControl, multiFileGu, selectMultiple, limitSize, allowExt) {
	this.noftp = (typeof noftp == "undefined" ? false : noftp);
	this.nozip = (typeof nozip == "undefined" ? false : nozip);
	selectMultiple = (typeof selectMultiple == "undefined" ? false : selectMultiple);
	this.limitSize = (typeof limitSize == "undefined" ? false : limitSize);
	this.allowExt = (typeof allowExt == "undefined" ? false : allowExt);
	
	var doc = buttonControl.ownerDocument;
	
	var container = doc.createElement("div");
	
	// zindex 주가
	var zi = 0, ziparsed;
	var obj = buttonControl;
	var comp = null;
	var i = 0;
	
	var positionObject = getBoundsObject(buttonControl);
	var buttonTop = positionObject.top + "px";
	var buttonLeft = positionObject.left + "px";
	var buttonWidth = positionObject.width + "px";
	var buttonHeight = positionObject.height + "px";
	
	//#egov 수정
	while (obj.tagName != 'BODY')
	{
		comp = obj.currentStyle ? obj.currentStyle : getComputedStyle(obj, null);
		ziparsed = parseInt(comp.zIndex);
		ziparsed = isNaN(ziparsed) ? 0 : ziparsed;
		zi += ziparsed + 1;
		obj = obj.parentNode
	}
	container.style.zIndex = zi;
	container.style.position = 'absolute';
	container.style.overflow = 'hidden';
	container.style.padding = 0;
	container.style.margin = 0;
	container.style.visiblity = 'hidden';
	container.style.width = '0px';
	container.style.height = '0px';
	container.style.opacity = 0;
	container.style.filter = 'alpha(opacity=100)';
	
	doc.body.insertBefore(container, doc.body.firstChild);
	
	container.innerHTML = "<iframe name='" + name + "' id='" + name + "' src='about:blank'></iframe>";
	var iframe = container.childNodes[0];
	iframe.setAttribute("linkname", linkname);
	iframe.setAttribute("picname",  picname);
	iframe.setAttribute("directUploadGu", directUploadGu);
	
	//iframe.style.display = 'none';
	iframe.marginHeight = 0;
	iframe.marginWidth = 0;
	
	iframe.setAttribute("doc", null);
	if( iframe.contentDocument ){					// Firefox, Opera
		iframe.doc = iframe.contentDocument;
	}  
	else if( iframe.contentWindow ){				// Internet Explorer
    	iframe.doc = iframe.contentWindow.document;
    }
    else if( iframe.document ){						// Others?
    	iframe.doc = iframe.document;
    }
	
    if(iframe.doc == null){
    	throw "Document not found, append the parent element to the DOM before creating the IFrame";  
    }
    
    iframe.doc.open();  
    iframe.doc.close();  
    
	var frm = iframe.doc.createElement("form");
	iframe.doc.body.appendChild(frm);
	
	frm.method = 'post';
	//frm.charset = 'euc-kr';
	//frm.onsubmit="document.charset='euc-kr';"
	frm.name = name + "_frm";
	frm.enctype = 'multipart/form-data';
	frm.encoding = 'multipart/form-data';
	frm.target = name ;
	frm.setAttribute('target', name );
	frm.action='fileUpload.do?id='+encodeURIComponent(name);
	frm.style.margin = 0;
	frm.style.padding = 0;
	frm.style.height = buttonHeight;
	frm.style.width = '40px';
	frm.runat = 'server';
	
	this.frm = frm;
	
	var inputctltemp = iframe.doc.createElement("input");
	inputctltemp.name = inputctltemp.id  ="upload["+0+"]";	// ["+0+"] egov 배열로받기위해
	inputctltemp.type = "file";  
	inputctltemp.size='1';
	inputctltemp.runat = 'server';
	inputctltemp.style.position = 'absolute';
	inputctltemp.style.top = -10000;
	inputctltemp.style.left = -10000;
	inputctltemp.style.visiblity = 'hidden';
	
	var inputctl = iframe.doc.createElement("input");
	inputctl.name = inputctl.id  ="upload["+0+"]";			// ["+0+"] egov 배열로받기위해
	inputctl.type = "file";  
	inputctl.size='1';
	inputctl.runat = 'server';
	inputctl.setAttribute("linkname", linkname);
	inputctl.setAttribute("picname", picname);
	inputctl.setAttribute("serverfilename", serverfilename);
	inputctl.setAttribute("directuploadgu", directUploadGu);
	if(selectMultiple) inputctl.setAttribute("multiple", true);
	inputctl.disabled = !searchControl_CommandButton(buttonControl).enabled;
	
	frm.appendChild(inputctl);
	this.inputctl = inputctl;
	
	inputctl.style.position = 'absolute';
	inputctl.style.display = 'block';
	inputctl.style.top = "-2px";
	inputctl.style.left = "-10px";
	inputctl.style.height = '25px';
	inputctl.style.width = '100px';
	inputctl.style.fontSize = 8;
	inputctl.style.zIndex = 1;
	inputctl.style.visiblity = 'hidden';
	inputctl.style.marginLeft = '-40px'; // hide IE text field
	
	var dirctl = iframe.doc.createElement("input");
	dirctl.type = "hidden";  
	dirctl.name="uploadSubDir" ;
	dirctl.id  ="uploadSubDir" ;
	dirctl.value = ftpDir;
	
	frm.appendChild(dirctl);
	
	var filenamectl = iframe.doc.createElement("input");
	filenamectl.type = "hidden";  
	filenamectl.name="uploadfilename" ;
	filenamectl.id  ="uploadfilename" ;
	filenamectl.value = "";
	
	frm.appendChild(filenamectl);
	
	var uploadPrefixctl = iframe.doc.createElement("input");
	uploadPrefixctl.type = "hidden";  
	uploadPrefixctl.name="uploadPrefix" ;
	uploadPrefixctl.id  ="uploadPrefix" ;
	uploadPrefixctl.value = jUploadPrefix;
	
	frm.appendChild(uploadPrefixctl);
	
	var uploadsuffixctl = iframe.doc.createElement("input");
	uploadsuffixctl.type = "hidden";  
	uploadsuffixctl.name="uploadSuffix" ;
	uploadsuffixctl.id  ="uploadSuffix" ;
	uploadsuffixctl.value = "";
	
	frm.appendChild(uploadsuffixctl);
	
	var noftpctl = iframe.doc.createElement("input");
	noftpctl.type = "hidden";  
	noftpctl.name="noftp" ;
	noftpctl.id  ="noftp" ;
	noftpctl.value = noftp;
	
	frm.appendChild(noftpctl);
	
	var nozipctl = iframe.doc.createElement("input");
	nozipctl.type = "hidden";  
	nozipctl.name="nozip" ;
	nozipctl.id  ="nozip" ;
	nozipctl.value = nozip;
	
	frm.appendChild(nozipctl);
	
	var lang = iframe.doc.createElement("input");
	lang.type = "hidden";  
	lang.name="lang" ;
	lang.id  ="lang" ;
	lang.value = USER_LANGUAGE;
	
	frm.appendChild(lang);
	
	var parentidctl = iframe.doc.createElement("input");
	parentidctl.type = "hidden";  
	parentidctl.name="parentid" ;
	parentidctl.id  ="parentid" ;
	parentidctl.value = buttonControl.id;
	
	frm.appendChild(parentidctl);
	
	if( jUploadPrefix.length == 0 ){
		jUploadPrefix = timeEncodeString();
		if( em.document ){
			em.document.getElementsByName("uploadPrefix")[0].value = jUploadPrefix;
		} else {
			uploadPrefixctl.value = jUploadPrefix;
		}
	}
	
	iframe.onload = function(){
		// functionname : [IFrame_Upload.onload]
	};
	iframe.onreadystatechange = function(){
		// functionname : [IFrame_Upload.onreadystatechange]
	};
	/**
	*     @description	미결
	*     @param	{string}	chileNodes
	*     @param	{string}	strId
	*     @return	{string}
	*     @example	미결
	*/
	function getChildNodeById(childNodes, strId){
		var childNode = null;
		var childCount = childNodes.length;
		var i = 0;
		
		for(i = 0; i < childCount; i++, childNode = null){
			childNode = childNodes[i];
			
			if( childNode ==  null || childNode == "undefined" )
				continue;
			
			if( childNode.getAttribute('id') == strId )
				break;
		}
		
		return childNode;
	}
	/**
	*     @description	미결
	*     @return	{undefined}
	*     @example	미결
	*/
	function getTimeFlag(){
		var now = new Date();
		var milliseconds = "" + now.getMilliseconds();
		
		if( milliseconds.length == 1 ){
			milliseconds= ["00", milliseconds].join("");
		}
		else if( milliseconds.length == 2 ){
			milliseconds= ["0", milliseconds].join("");
		}
		
		return "_V" + DateString(now) + TimeString(now) + milliseconds;
	}
	/**
	*     @description	미결
	*     @event
	*     @return	{undefined}
	*     @name	CommandButton#inputct1_onchange
	*/
	function inputctl_onchange(e){
		// functionname : [IFrame_Upload.onchange]
		if( !e ) e = window.event;
		
		var em = getSrcElement(e);
		e.target = e.target || e.srcElement;
		
		var controlId = (em.document ? em.document.getElementsByName("parentid")[0].value
										: getChildNodeById(em.parentNode.childNodes, "parentid").value);
		var uploadSubDir = (em.document ? em.document.getElementsByName("uploadSubDir")[0].value
										: getChildNodeById(em.parentNode.childNodes, "uploadSubDir").value);
		var uploadPrefix = (em.document ? em.document.getElementsByName("uploadPrefix")[0].value
										: getChildNodeById(em.parentNode.childNodes, "uploadPrefix").value);
		var uploadSuffix = (USE_FILE_SUFFIX != undefined && USE_FILE_SUFFIX ? getTimeFlag() : "");
		
		if( em.document ){
			em.document.getElementsByName("uploadSuffix")[0].value = uploadSuffix;
		}
		else{
			getChildNodeById(em.parentNode.childNodes, "uploadSuffix").value = uploadSuffix;
		}
		
		var func = self.parent[controlId + "_onselectcompleted"];
		if( typeof func == "undefined" ) func = self[controlId + "_onselectcompleted"];
		
		var tagObject = document.querySelector("div#" + controlId);
		var controlName = (tagObject != null) ? tagObject.getAttribute("ctlname") : "";
		var control = controls[controlName];
		
		if( typeof control == "undefined" || control == null ){
			control = null; controlName = null; tagObject = null; func = null;
			uploadSuffix = null; uploadPrefix = null; uploadSubDir = null; controlId = null; em = null;
			return false;
		}
		
		var checkResult = true;
		var limitFileSize = control.uploadFrame.limitSize;
		var allowFileExt = control.uploadFrame.allowExt; 
		var allowFileExtList = (typeof allowFileExt == "string") ? allowFileExt.toLowerCase().split("|") : null;
		
		var arrFileNames = []; var arrUploadFileNames = []; var arrSvrFileNames = []; var arrFileSizes = [];
		var fileName = null; fileExtension = null; fileSize = 0;
		var fileCount = e.target.files.length;
		var dotIndex = -1;
		var i = 0;
		
		for(i = 0; i < fileCount; i++){
			fileName = e.target.files.item(i).name;
			fileExtension = fileName.substring(fileName.lastIndexOf(".") + 1);
			
			arrFileNames[i]				= fileName;
			arrUploadFileNames[i]		= jUploadPrefix + fileName;
			arrFileSizes[i] = fileSize	= e.target.files.item(i).size;
			
			//파일 크기 체크
			if( typeof limitFileSize == "number" && limitFileSize > 0 ){
				if( fileSize > limitFileSize ){
					//alert("업로드 가능한 파일 크기를 초과하였습니다.\r\n(업로드 가능한 크기 : " + (limitSize / 1024) + "KB)");
					alert(getText("message_commandbutton_017", "업로드 가능한 파일 크기를 초과하였습니다.\r\n(업로드 가능한 크기 : {0}KB)", [(limitSize / 1024)]));
					checkResult = false;
					break;
				}
			}
			//파일 확장자 체크
			if( allowFileExt !== false && allowFileExtList != null ){
				if( allowFileExtList.indexOf(fileExtension.toLowerCase()) < 0 ){
					//alert("업로드 가능한 파일 확장자가 아닙니다.\r\n\(업로드 가능한 목록 : " + allowFileExtList.join(", ") + ")");
					alert(getText("message_commandbutton_018", "업로드 가능한 파일 확장자가 아닙니다.\r\n\(업로드 가능한 목록 : {0})", [(allowFileExtList.join(", "))]));
					checkResult = false;
					break;
				}
			}
			
			if( USE_FILE_SUFFIX != undefined && USE_FILE_SUFFIX ){
				dotIndex = fileName.lastIndexOf(".");
				
				if( dotIndex < 0 )	arrSvrFileNames[i] = fileName + uploadSuffix ;
				else				arrSvrFileNames[i] = fileName.substring(0, dotIndex) + uploadSuffix + fileName.substring(dotIndex);
			}
			else{
				arrSvrFileNames[i] = jUploadPrefix + fileName;
			}
		}
		
		if( checkResult && typeof func != "undefined" ){
			if( !func(arrFileNames, arrUploadFileNames, arrSvrFileNames, arrFileSizes, uploadSubDir) ){
				// 2016-06-07 수정
				// em.parentElement.removeChild(em); 취소시 콘트롤 없어져 임시호 막음 
				// return false;
				checkResult = false;
			}
		}
		
		//파일 크기 제한, 업로드 가능한 확정자 체크, 사용자 이벤트 중 하나라도 걸린 경우
		if( !checkResult ){
			//메모리 해제
			fileExtension = null; fileName = null; allowFileExtList = null; allowFileExt = null;
			arrFileSizes = null; arrSvrFileNames = null; arrSvrFileNames = null; arrFileNames = null;
			control = null; controlName = null; tagObject = null; func = null;
			uploadSuffix = null; uploadPrefix = null; uploadSubDir = null; controlId = null; em = null;
			return false;
		}
        
		var filePath = em.value;
		var fileName = "";
		
		if( filePath.indexOf("\\") > 0 )
			fileName = filePath.split("\\")[filePath.split("\\").length -1];
		else
			fileName = filePath;
		
		var fileTag = timeEncodeString();
		if( em.document ){
			em.document.getElementsByName("uploadfilename")[0].value = fileName;
		}
		else{
			//em.parentNode.childNodes.item("uploadfilename").setAttribute("value",fileName);
			getChildNodeById(em.parentNode.childNodes, "uploadfilename").value = fileName;
		}
		
		var wndw = self;
		for(i = 0; i < 10; i++){
			try {
				if( eval(wndw.getControlById) ) break;
			}
			catch(e){ wndw = wndw.parent; }
		}
		
		var wControl = wndw.getControlById(iframe.getAttribute("linkname"));
		if( multiFileGu ){
			var target = em.parentNode.getAttribute("target");
			
			if( wControl.textFound(fileName) ){
				uploadControls[target].deleteFileControl(fileName);
				wControl.updateItem(fileName, jUploadPrefix + fileName);
			}
			else{
				wControl.addItem(fileName, jUploadPrefix + fileName);
			}
			
			uploadControls[target].addNewFileControl();
			
			if( em.getAttribute("directuploadgu") == "true" ){
				if (jUploadPrefix.length == 0) {
					jUploadPrefix = timeEncodeString();
				}
				if( em.document ){
					em.document.getElementsByName("uploadPrefix")[0].value = jUploadPrefix;
				}
				else{
					getChildNodeById(em.parentNode.childNodes, "uploadPrefix").value =jUploadPrefix;
				}
				
				showAjaxBox(getText("message_commandbutton_016", "{0} 파일을 업로드하는 중입니다.", [fileName]), 0);
				
				em.parentNode.submit();
			}
		}
		else{
			wControl.setValue(fileName);
			controls[inputctl.getAttribute("serverfilename")].setValue(jUploadPrefix + fileName);
//			wControl.setValue(jUploadPrefix + fileName);
//			wControl.tag = filePath;
			
            if( em.getAttribute("directuploadgu") == "true" ){
            	if( jUploadPrefix.length == 0 ){
            		jUploadPrefix = timeEncodeString();
            	}
            	if( em.document ){
            		em.document.getElementsByName("uploadPrefix")[0].value = jUploadPrefix;
            	}
            	else{
            		getChildNodeById(em.parentNode.childNodes, "uploadPrefix").value = jUploadPrefix;
            	}
            	
            	showAjaxBox(getText("message_commandbutton_016", "{0} 파일을 업로드하는 중입니다.", [fileName]), 0);
            	
            	em.parentNode.submit();
            }
		}
	};
	
	setEventHandler(inputctl, "change", inputctl_onchange);
	
	/**
	 * @name CommandButton#container_onmouseout
	 * @event
	 * @return	{undefined}
	 * @description	미결
	 */
	function container_onmouseout(e){
		if( !e ) e = window.event;
		
		var receiver = doc.elementFromPoint(e.clientX, e.clientY);
		
		if( receiver === buttonControl ){
			container.style.width = '20px';
			container.style.height = buttonHeight;
		}
		else{
			container.style.width = '0px';
			container.style.height = '0px';
		}
	};
	
//	setEventHandler(container, "mouseout", container_onmouseout);
	
	/**
	 * @name CommandButton#buttonControl_onmousemove
	 * @event
	 * @description	미결
	 */
	function buttonControl_onmousemove(e) {
		if (!e) e = window.event;
		
		var positionObject = getBoundsObject(getSrcElement(e));
		buttonTop = positionObject.top + "px";
		buttonLeft = positionObject.left + "px";
		buttonWidth = positionObject.width + "px";
		buttonHeight = positionObject.height + "px";
		
		var x = 0; var y = 0;
		
		if( e.pageX )
			x = e.pageX;
		else if( e.clientX )
			x = e.clientX + (doc.documentElement.scrollLeft ? doc.documentElement.scrollLeft : doc.body.scrollLeft);
		
		if( e.pageY )
			y = e.pageY;
		else if( e.clientY )
			y = e.clientY + (doc.documentElement.scrollTop ? doc.documentElement.scrollTop : doc.body.scrollTop);
		
		// move listener
		container.style.left =(parseIntSize(buttonLeft) > x - 10 ? buttonLeft : x - 10 + 'px');
		container.style.top = buttonTop;
		container.style.width = '20px';
		container.style.height = '25px';
	};
	
//	setEventHandler(buttonControl, "mousemove", buttonControl_onmousemove);
	
	this.addNewFileControl = function(){
		this.inputctl.style.zIndex = (-1) * (this.frm.childNodes.length - 5) ; // 5는 화일 콘트롤이 아닌 콘트롤수
		var inputctl = iframe.doc.createElement("input");
		i = i + 1;  //egov
		inputctl.name = inputctl.id = "upload[" + i + "]" ; //egov
		inputctl.type = "file";  
		inputctl.size='1';
		inputctl.runat = 'server';
		inputctl.setAttribute("linkname", linkname);
		inputctl.setAttribute("picname", picname);
		inputctl.setAttribute("directuploadgu", directUploadGu);
		if(selectMultiple) inputctl.setAttribute("multiple", true);
		inputctl.disabled = !searchControl_CommandButton(buttonControl).enabled;
		
		frm.appendChild(inputctl);
		this.inputctl = inputctl;
		
		inputctl.style.position = 'absolute';
		inputctl.style.display = 'block';
		inputctl.style.top = "-2px";
		inputctl.style.left = "-10px";
		inputctl.style.height = buttonHeight;
		inputctl.style.width = '100px';
		inputctl.style.fontSize = 8;
		inputctl.style.zIndex = 1;
		inputctl.style.visiblity = 'hidden';
		inputctl.style.marginLeft = '-40px'; // hide IE text field
		
		setEventHandler(inputctl, "change", inputctl_onchange);
	};
	
	this.deleteFileControl = function(fileName){
		var wEm = null; var em = null;
		var filePath = null;
		var fileName0 = null;
		var count = 0;
		var i = 0;
		
		for(i = this.frm.childNodes.length - 1; i >= 0; i--){
			em = this.frm.childNodes.item(i);
			
			if( em.getAttribute("type") != "file" ) continue;
			
			filePath = em.value;
			fileName0 = "";
			
			if( filePath.indexOf("\\") > 0 ){
				fileName0 = filePath.split("\\")[filePath.split("\\").length -1];
			}
			else{
				fileName0 = filePath;
			}
			
			if( fileName0 == fileName ){
				wEm = em;
				count++;
			}
		}
		
		if( count > 1 ) this.frm.removeChild(wEm);
	};
	
	this.uploadFile = function(){
		// functionname : [IFrame_Upload.uploadFile]
		
		this.frm.uploadPrefix.value = jUploadPrefix;
		
		var wEm = null; var em = null;
		var filePath = null;
		var count = 0;
		var i = 0;
		
		for(i = this.frm.childNodes.length - 1; i >= 0; i--){
			em = this.frm.childNodes.item(i);
			filePath= em.value;
			
			if( em.getAttribute("type")=="file" && em.value && em.value.length > 0 ) count++;
		}
		
		if( count > 0 ) this.frm.submit();
	};
	
	this.setEnabled = function(enabled){
		this.inputctl.disabled = !enabled;
	};
	
	this.clearInfo = function(){
		container.innerHTML = "";
		removeTag(container);
	};
};

/* *****************************************************************************
*  MAKE EXCEL UPLOAD AGENT
* *****************************************************************************/
//function IFrame_UploadXL_Command(parentNode, name, linkname, picname, ftpDir, noftp, nozip, directUploadGu, buttonControl, multiFileGu) {
/**
*     @description	미결
*     @param	{string}	name
*     @param	{string}	commandName
*     @param	{string}	sheetName
*     @return	{undefined}
*     @example	미결
*/
function IFrame_UploadXL_Command(name, commandName, sheetName) {
	
	var buttonControl = controls[commandName].tagObject;
	var doc = buttonControl.ownerDocument;
	var container = doc.createElement("div");
	
    // zindex 주기
    var zi=0, ziparsed;
    var obj = buttonControl;
    var comp;

    var positionObject = getBoundsObject(buttonControl);
    var buttonTop = positionObject.top + "px";
    var buttonLeft = positionObject.left + "px";
    var buttonWidth = positionObject.width + "px";
    var buttonHeight = positionObject.height + "px";

    while (obj.tagName != 'BODY')
    {
        comp = obj.currentStyle ? obj.currentStyle : getComputedStyle(obj, null);
        ziparsed = parseInt(comp.zIndex);
        ziparsed = isNaN(ziparsed) ? 0 : ziparsed;
        zi += ziparsed + 1;
        obj = obj.parentNode
    }
    container.style.zIndex = zi;
    container.style.position = 'absolute';
    container.style.overflow = 'hidden';
    container.style.padding = 0;
    container.style.margin = 0;
    container.style.visiblity = 'hidden';
    container.style.width = '0px';
    container.style.height = '0px';
    container.style.opacity = 0;
    container.style.filter = 'alpha(opacity=0)';

    doc.body.insertBefore(container, doc.body.firstChild);

    container.innerHTML = "<iframe name='" + name + "' id='" + name + "' src='about:blank'></iframe>";
    var iframe = container.childNodes[0];
    iframe.setAttribute("cmdname", commandName);
    iframe.setAttribute("shtname", sheetName);
    

    //iframe.style.display = 'none';
    iframe.marginHeight = 0;
    iframe.marginWidth = 0;
   
    iframe.setAttribute("doc", null);
    if(iframe.contentDocument)                // Firefox, Opera  
       iframe.doc = iframe.contentDocument;

    else if(iframe.contentWindow)             // Internet Explorer  
       iframe.doc = iframe.contentWindow.document;

    else if(iframe.document)                  // Others?  
       iframe.doc = iframe.document;  

    if(iframe.doc == null)  
       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

    iframe.doc.open();  
    iframe.doc.close();  
    
    var frm = iframe.doc.createElement("form");
    iframe.doc.body.appendChild(frm);  
            frm.method = 'post';
            frm.name = name + "_frm";
            frm.enctype = 'multipart/form-data';
            frm.encoding = 'multipart/form-data';
            frm.target = name ;
            frm.setAttribute('target', name );
            frm.action='excelUpload.do?id='+encodeURIComponent(name) 
            frm.style.margin = 0;
            frm.style.padding = 0;
            frm.style.height = buttonHeight;
            frm.style.width = '40px';
            frm.runat = 'server';
    
    this.frm = frm;
    
    var inputctltemp = iframe.doc.createElement("input");
    inputctltemp.name = inputctltemp.id  ="upload" ;
    inputctltemp.type = "file";  
    inputctltemp.size='1';
    inputctltemp.runat = 'server';
    inputctltemp.style.position = 'absolute';
    inputctltemp.style.top = -10000;
    inputctltemp.style.left = -10000;
    inputctltemp.style.visiblity = 'hidden';
    
    var inputctl = iframe.doc.createElement("input");
    inputctl.name = inputctl.id  ="upload" ;
    inputctl.type = "file";  
    inputctl.size='1';
    inputctl.runat = 'server';
    inputctl.disabled = !searchControl_CommandButton(buttonControl).enabled;
    //setEventHandler(inputctl, "click", controls[commandName].click()); 의미없는 코드이고, IE낮은 버전 오류
    
    
    frm.appendChild(inputctl);
    this.inputctl = inputctl;
    
    inputctl.style.position = 'absolute';
    inputctl.style.display = 'block';
    inputctl.style.top = "-2px";
    inputctl.style.left = "-10px";
    inputctl.style.height = '25px';
    inputctl.style.width = '100px';
    inputctl.style.fontSize = 8;
    inputctl.style.zIndex = 1;
    inputctl.style.visiblity = 'hidden';
    inputctl.style.marginLeft = '-40px'; // hide IE text field

    
    var filenamectl = iframe.doc.createElement("input");
    filenamectl.type = "hidden";  
    filenamectl.name="uploadfilename" ;
    filenamectl.id  ="uploadfilename" ;
    filenamectl.value = "";
     
    frm.appendChild(filenamectl);
    
    /**
     * @name CommandButton#inputct1_onchange
     * @event
     * @description	미결
     */
    function inputctl_onchange(e){
    	// functionname : [IFrame_Upload.onchange]
        if (!e) e = window.event;
        var em = getSrcElement(e)
        
        var filePath = em.value;
 
        if (filePath == "" || filePath.substring(filePath.length-4) != ".xls") {
            alert(getText("message_commandbutton_006", "Excel 파일을 등록하세요."));
            return;
        } 
        
        var fileName = "";
        if (filePath.indexOf("\\") > 0) {
            fileName = filePath.split("\\")[filePath.split("\\").length -1];
        } else {
        	fileName = filePath;
        }
        
        var fileTag = timeEncodeString();
        if (em.document){
            em.document.getElementsByName("uploadfilename")[0].value = fileName;
        } else {
            //em.parentNode.childNodes.item("uploadfilename").setAttribute("value",fileName);
        	getChildNodeById(em.parentNode.childNodes, "uploadfilename").value = fileName;
        }
        
        var wndw = self;
        for (var i = 0; i < 10; i++) {
        	try {
        		if (eval(wndw.getControlById)) break;
        	} catch(e) {
        		wndw = wndw.parent;
        	}
        }
        em.parentNode.submit();
        
	};

	setEventHandler(inputctl, "change", inputctl_onchange);

	/**
	 * @name CommandButton#container_onmouseout
	 * @event
	 * @description	미결
	 */
    function container_onmouseout(e){
        if (!e) e = window.event;

        var receiver = doc.elementFromPoint(e.clientX, e.clientY);

        if (receiver === buttonControl)
        {
        	container.style.width = '20px';
            container.style.height = buttonHeight;
        } else {
            container.style.width = '0px';
            container.style.height = '0px';
        }
    };
	
	//setEventHandler(container, "mouseout", container_onmouseout);
    
    /**
     * @name CommandButton#buttonControl_onmousemove
     * @event
     * @description	미결
     */
    function buttonControl_onmousemove(e) {
            if (!e) e = window.event;
            
            var positionObject = getBoundsObject(getSrcElement(e));
            buttonTop = positionObject.top + "px";
            buttonLeft = positionObject.left + "px";
            buttonWidth = positionObject.width + "px";
            buttonHeight = positionObject.height + "px";

            var x = 0; var y = 0;

            if (e.pageX) x = e.pageX;
            else if (e.clientX)
               x = e.clientX + (doc.documentElement.scrollLeft ? doc.documentElement.scrollLeft : doc.body.scrollLeft);

            if (e.pageY) y = e.pageY;
            else if (e.clientY)
               y = e.clientY + (doc.documentElement.scrollTop ? doc.documentElement.scrollTop : doc.body.scrollTop);

            // move listener
            container.style.left =(parseIntSize(buttonLeft) > x - 10 ? buttonLeft : x - 10 + 'px');
            container.style.top = buttonTop;
            container.style.width = '20px';
            container.style.height = '25px';
        };
        
    //setEventHandler(buttonControl, "mousemove", buttonControl_onmousemove);
        
    this.setEnabled = function(enabled){
    	this.inputctl.disabled = !enabled;
    };
    this.clearInfo = function(){
         container.innerHTML = "";
    };
};

/*
 *		신규 엑셀 업로드 : 시트 외의 컨트롤에도 엑셀 데이터를 업로드 
 */

/**
*     @description	미결
*     @param	{string}	name
*     @param	{string}	commandName
*     @param	{number}	startRow
*     @param	{object}	colnmnOrder
*     @param	{string}	outputCotrolName
*     @param	{number}	limitSize
*     @param	{string}	allowFileName
*     @return	{string}
*     @example	미결
*/
function IFrame_UploadXL_CommandA(name, commandName, startRow, columnOrder, outputControlName, limitSize, allowFileName) {
	
	this.commandName = commandName;
	this.fileName = "";
	this.fimeNameOutputControlName = outputControlName ? outputControlName : "";
	this.limitSize = limitSize ? limitSize : -1;
	this.allowFileName = allowFileName ? allowFileName : "";
	
	var buttonControl = getControlById(commandName).tagObject;
	var doc = buttonControl.ownerDocument;
	var container = doc.createElement("div");
	
    // zindex 주기
    var zi=0, ziparsed;
    var obj = buttonControl;
    var comp;
    
    var positionObject = getBoundsObject(buttonControl);
    var buttonTop = positionObject.top + "px";
    var buttonLeft = positionObject.left + "px";
    var buttonWidth = positionObject.width + "px";
    var buttonHeight = positionObject.height + "px";

    zi = findHighestZIndex() + 1;
    
    container.style.zIndex = zi;
    container.style.position = 'absolute';
    container.style.overflow = 'hidden';
    container.style.padding = 0;
    container.style.margin = 0;
    container.style.visiblity = 'hidden';
    container.style.width = '0px';
    container.style.height = '0px';
    container.style.opacity = 0;
    container.style.filter = 'alpha(opacity=0)';

    doc.body.insertBefore(container, doc.body.firstChild);

    container.innerHTML = "<iframe name='" + name + "' id='" + name + "' src='about:blank'></iframe>";
    var iframe = container.childNodes[0];
    iframe.setAttribute("cmdname", commandName);
    //iframe.setAttribute("shtname", sheetName);
    
    //iframe.style.display = 'none';
    iframe.marginHeight = 0;
    iframe.marginWidth = 0;
   
    iframe.setAttribute("doc", null);
    if(iframe.contentDocument)                // Firefox, Opera  
       iframe.doc = iframe.contentDocument;

    else if(iframe.contentWindow)             // Internet Explorer  
       iframe.doc = iframe.contentWindow.document;

    else if(iframe.document)                  // Others?  
       iframe.doc = iframe.document;  

    if(iframe.doc == null)  
       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

    iframe.doc.open();  
    iframe.doc.close();  
    
    var frm = iframe.doc.createElement("form");
    iframe.doc.body.appendChild(frm);  
            frm.method = 'post';
            frm.name = name + "_frm";
            frm.enctype = 'multipart/form-data';
            frm.encoding = 'multipart/form-data';
            frm.target = name ;
            frm.setAttribute('target', name );
            frm.action='excelUpload.do?id='+encodeURIComponent(name);
            frm.style.margin = 0;
            frm.style.padding = 0;
            frm.style.height = buttonHeight;
            frm.style.width = '40px';
            frm.runat = 'server';
    
    this.frm = frm;
    
    var inputctltemp = iframe.doc.createElement("input");
    inputctltemp.name = inputctltemp.id  ="upload" ;
    inputctltemp.type = "file";  
    inputctltemp.size='1';
    inputctltemp.runat = 'server';
    inputctltemp.style.position = 'absolute';
    inputctltemp.style.top = -10000;
    inputctltemp.style.left = -10000;
    inputctltemp.style.visiblity = 'hidden';
    
    var inputctl = iframe.doc.createElement("input");
    inputctl.name = inputctl.id  ="upload" ;
    inputctl.type = "file";  
    inputctl.size='1';
    inputctl.runat = 'server';
    inputctl.disabled = !searchControl_CommandButton(buttonControl).enabled;
    //setEventHandler(inputctl, "click", controls[commandName].click()); 의미없는 코드이고, IE낮은 버전 오류
    
    
    frm.appendChild(inputctl);
    this.inputctl = inputctl;
    
    inputctl.style.position = 'absolute';
    inputctl.style.display = 'block';
    inputctl.style.top = "-2px";
    inputctl.style.left = "-10px";
    inputctl.style.height = '25px';
    inputctl.style.width = '100px';
    inputctl.style.fontSize = 8;
    inputctl.style.zIndex = 1;
    inputctl.style.visiblity = 'hidden';
    inputctl.style.marginLeft = '-40px'; // hide IE text field

    
    var filenamectl = iframe.doc.createElement("input");
    filenamectl.type = "hidden";  
    filenamectl.name="uploadfilename" ;
    filenamectl.id  ="uploadfilename" ;
    filenamectl.value = "";
     
    frm.appendChild(filenamectl);
    
    var startrowctl = iframe.doc.createElement("input");
    startrowctl.type = "hidden";  
    startrowctl.name="r" ;
    startrowctl.id  ="r" ;
    startrowctl.value = startRow;
     
    frm.appendChild(startrowctl);
    
    var columnorderctl = iframe.doc.createElement("input");
    columnorderctl.type = "hidden";  
    columnorderctl.name="columnOrder" ;
    columnorderctl.id  ="columnOrder" ;
    columnorderctl.value = columnOrder;
     
    frm.appendChild(columnorderctl);
    
    var infoctl = iframe.doc.createElement("input");
    infoctl.type = "hidden";  
    infoctl.name="info" ;
    infoctl.id  ="info" ;
    infoctl.value = "";
     
    frm.appendChild(infoctl);
    
    /**
     *     @description	미결
     *     @param	{string}	childNodes
     *     @param	{string}	strId
     *     @return	{string}
     *     @example	미결
     */
    function getChildNodeById(childNodes, strId){
		for (var i=0; i < childNodes.length; i++){
			if (childNodes[i].getAttribute('id') == strId){
				return childNodes[i];
			}
		}
		return null;
	}

    /**
     * @name CommandButton#inputct1_onchange
     * @event
     * @description	미결
     */
    function inputctl_onchange(e){
    	// functionname : [IFrame_Upload.onchange]
        if (!e) e = window.event;
        var em = getSrcElement(e)
        var filePath = em.value; 
        
        //파일 확장자 체크
        if (filePath == "" || (filePath.substring(filePath.length-4) != ".xls" && filePath.substring(filePath.length-5) != ".xlsx")) {
            alert(getText("message_commandbutton_006", "Excel 파일을 등록하세요."));
            return;
        } 
        
        var fileName = "";
        if (filePath.indexOf("\\") > 0) {
            fileName = filePath.split("\\")[filePath.split("\\").length -1];
        } else {
        	fileName = filePath;
        }
        
        var wndw = self;
        for (var i = 0; i < 10; i++) {
        	try {
        		if (eval(wndw.getControlById)) break;
        	} catch(e) {
        		wndw = wndw.parent;
        	}
        }
        
        var commandName = "";
        var fimeNameOutputControlName = "";
        var limitSize = -1;
        var allowFileName = "";
        var cmdCtrl = null;
        
        try {
        	var iframeNodeList = wndw.document.getElementsByTagName("iframe");
        	var iframeNode = null;
        	for(var i = 0; i < iframeNodeList.length; i++){
        		iframeNode = iframeNodeList[i];
        		if( (iframeNode.getAttribute("id") + "") == (em.parentElement.getAttribute("target") + "") ){
        			cmdCtrl = wndw.getControlById( iframeNode.getAttribute("cmdname") );
        			fimeNameOutputControlName = cmdCtrl.uploadFrame.fimeNameOutputControlName;
        			limitSize = cmdCtrl.uploadFrame.limitSize;
        			allowFileName = cmdCtrl.uploadFrame.allowFileName;
        			break;
        		}
        	}
        } catch(e){}
        
        try {
        	//파일 사이즈 체크
        	if(limitSize > 0 && e.target != undefined && e.target != null){
        		if(e.target.files != undefined && e.target.files != null){
        			//파일 크기 단위 : 바이트
        			if(e.target.files.item(0).size * 1 > limitSize * 1){
        				alert(getText("message_commandbutton_007", "허용된 파일 크기를 초과하였습니다.\n(허용된 파일 크기 : {0}KB)", [(limitSize / 1024)]));
        				return ;
        			}
        		}
        	}
        	//파일명 체크
        	if(allowFileName.length > 0){
        		var fname = "";
        		//확장자를 체크하여 확장자 길이에 맞게 잘라내 파일명만 남김
        		if( /.*\.xls$/.test(fileName) )			fname = fileName.substring(0, fileName.length - 4);
        		else if( /.*\.xlsx$/.test(fileName) )	fname = fileName.substring(0, fileName.length - 5);
        		//확장자를 제외한 파일명이 다름
        		if(allowFileName != fname){
        			alert(getText("message_commandbutton_008", "허용된 파일명이 아닙니다.\n(허용된 파일명 : xls, xlsx)"));
        			return ;
        		}
        	}
        	//파일명 출력
        	cmdCtrl.uploadFileName = fileName;
        	cmdCtrl.uploadFrame.fileName = fileName;
        	//controls["ExcelFilePath"].setValue(em.value);
        	if(fimeNameOutputControlName.length > 0){
        		controls[fimeNameOutputControlName].setValue(fileName);
        	}
        } catch(e){}
        
        var fileTag = timeEncodeString();
        if (em.document){
            em.document.getElementsByName("uploadfilename")[0].value = fileName;
        } else {
            //em.parentNode.childNodes.item("uploadfilename").setAttribute("value",fileName);
        	getChildNodeById(em.parentNode.childNodes, "uploadfilename").value = fileName;
       }
        
        showAjaxBox(getText("message_commandbutton_009", "{0} 엑셀자료를 업로드하는 중입니다.", [fileName]), 0);
        
        em.parentNode.submit();
        
	};

	setEventHandler(inputctl, "change", inputctl_onchange);

	/**
	 * @name CommandButton#container_onmouseout
	 * @event
	 * @description	미결
	 */
    function container_onmouseout(e){
        if (!e) e = window.event;

        var receiver = doc.elementFromPoint(e.clientX, e.clientY);

        if (receiver === buttonControl)
        {
        	container.style.width = '20px';
            container.style.height = buttonHeight;
        } else {
            container.style.width = '0px';
            container.style.height = '0px';
        }
    };
	
	//setEventHandler(container, "mouseout", container_onmouseout);
    
    /**
     * @name CommandButton#buttonControl_onmousemove
     * @event
     * @description	미결
     */
    function buttonControl_onmousemove(e) {
            if (!e) e = window.event;
            
            var positionObject = getBoundsObject(getSrcElement(e));
            buttonTop = positionObject.top + "px";
            buttonLeft = positionObject.left + "px";
            buttonWidth = positionObject.width + "px";
            buttonHeight = positionObject.height + "px";

            var x = 0; var y = 0;

            if (e.pageX) x = e.pageX;
            else if (e.clientX)
               x = e.clientX + (doc.documentElement.scrollLeft ? doc.documentElement.scrollLeft : doc.body.scrollLeft);

            if (e.pageY) y = e.pageY;
            else if (e.clientY)
               y = e.clientY + (doc.documentElement.scrollTop ? doc.documentElement.scrollTop : doc.body.scrollTop);

            // move listener
            container.style.left =(parseIntSize(buttonLeft) > x - 10 ? buttonLeft : x - 10 + 'px');
            container.style.top = buttonTop;
            container.style.width = '20px';
            container.style.height = '25px';
        };
        
    //setEventHandler(buttonControl, "mousemove", buttonControl_onmousemove);
    
    this.setEnabled = function(enabled){
    	this.inputctl.disabled = !enabled;
    };
    this.clearInfo = function(){
         container.innerHTML = "";
    };
    this.setOptionInfo = function(optonInfo){
    	var arrInputControls = this.frm.getElementsByTagName("INPUT");
    	for (var i = 0; i < arrInputControls.length; i++){
    		if (arrInputControls[i].id == "info"){
    			arrInputControls[i].value = optonInfo;
    			break;
    		}
    	}
    };
    
};

/**
*     @description	미결
*     @param	{object}	jsonArrayObject
*     @param	{string}	message
*     @param	{string}	commandName
*     @param	{string}	frameName
*     @return	{void}
*     @example	미결
*/
function setExcelDataA(jsonArrayObject, message, commandName, frameName){
	//오류 메시지 먼저 파악 
	if (jsonArrayObject == null){
       alert(getText("message_commandbutton_010", "오류발생:") +  message);
		this.errInfo = message;
		hideAjaxBox();
		return;
	}
	
	//데이터 업로드
	var startRow = jsonArrayObject.row;
	var startCol = jsonArrayObject.col;
	var orderKey = jsonArrayObject.orderKey;
	var columnOrder = jsonArrayObject.columnOrder;
	var paramOrder = jsonArrayObject.paramOrder;
	var data = jsonArrayObject.data;
	
	//키 정보 정리 : 일반 컨트롤과 시트 컨트롤로 나누어 시트컨트롤은 시트의 기존 업로드 함수를 사용
	var commonControlKey = new Array();
	var sheetControlKey = new Array();
	var orderKeyLength = orderKey.length;
	for(var i = 0; i < orderKeyLength; i++){
		var key = orderKey[i];
		var controlName = key.split(".")[0];
		var control = controls[controlName];
		//컨트롤이 null 또는 undefined 인 경우
		if( control == undefined || control == null){
			continue;
		}
		//컨트롤이 시트인 경우 시트 키 배열에 추가
		if( (control.controlId + "").toLowerCase().indexOf("sheet_") >= 0 ){
			sheetControlKey.push(key);
		}
		//컨트롤이 시트가 아닌 경우 일반 컨트롤 키 배열에 추가
		else{
			commonControlKey.push(controlName);
		}
	}
	
	//컨트롤에 엑셀 데이터 업로드
	var keyLength = commonControlKey.length;
	for(var i = 0; i < keyLength; i++){
		var controlName = commonControlKey[i];
		var coord = columnOrder[controlName + "."];
		var row = coord.split(",")[0] - 1;
		var col = coord.split(",")[1] - 1;
		controls[controlName].setValue(data[row][col]);
	}
	//시트에 엑셀 데이터 업로드
	keyLength = sheetControlKey.length;
	sheetControlKey.sort();
	var jsonObj = 	{
						"row" : 0,
						"col" : 0,
						"columnOrder" : null,
						"data" : null
					};
	var order = "";
	for(var i = 0; i < keyLength; i++){
		var key = sheetControlKey[i];
		var controlName = key.split(".")[0];
		var sheetCol = key.split(".")[1];
		var controlNameNext = (i + 1 < keyLength) ? sheetControlKey[i + 1].split(".")[0] : "";
		//뒷 배열의 시트명이 같다면 같은 시트이므로 순서 추가
		if(controlName == controlNameNext){
			order += "\"" + sheetCol + "\":" + "\"" + columnOrder[key] + "\"" + ",";
		}
		//뒷 배열의 시트명이 다르다면 현재 배열까지가 하나의 시트 
		else{
			//마지막 순서 추가
			order += "\"" + sheetCol + "\":" + "\"" + columnOrder[key] + "\"";
			//시트 엑셀 채우기 JSON 객체 갱신
			jsonObj.row = startRow;
			jsonObj.col = startCol;
			jsonObj.columnOrder = eval ("({" + order+ "})");
			jsonObj.data = data;
			//시트 엑셀 채우기
//			controls[controlName].setArrayData(jsonObj, "excel");
			controls[controlName].setExcelData(jsonObj, "excel");
			//엑셀 업로드 컬럼 순서 초기화
			order = "";
		}
	}

	//다시 엑셀 업로드 프레임 초기화 세팅
	var wControl = getControlById(commandName);
	//엑셀 업로드 설정값 가져옴
	var outputControlName = wControl.uploadFrame.fimeNameOutputControlName;
	var limitSize = wControl.uploadFrame.limitSize;
	var allowFileName = wControl.uploadFrame.allowFileName;
	
	uploadControls[frameName].clearInfo();
	uploadControls[frameName] = null;
	wControl.uploadFrame = null;
	wControl.uploadFrame = uploadControls[frameName] = new IFrame_UploadXL_CommandA(frameName, commandName, startRow, paramOrder, outputControlName, limitSize, allowFileName);
	
	var resultRowCount = jsonArrayObject.data.length - startRow + 1;
	
	hideAjaxBox();

	if (message.length > 0){
		//alert(message);
	} else {
		alert(getText("message_commandbutton_011", "총 {0}건의 데이터를 붙여 넣었습니다.", [resultRowCount]));
	}
	
	//업로드완료 이벤트 함수 호출
	var controlId = wControl.id;
	var checkEvent = false;
	try {
		if(eval(controlId + "_onuploadcompleted")) checkEvent = true;
	}catch(e){ /**/ };
	if (checkEvent){
		var result = eval(controlId + "_onuploadcompleted();");
	};

	return;
}

/**
*     @description	미결
*     @param	{string}	frameName
*     @return	{void}
*     @example	미결
*/
function clearUploadedLists(frameName){
	var controlname = frameName.split("[")[0];
	var controlId = controls[controlname].id;
	
	hideAjaxBox();
	
    var checkEvent = false;
   	try {
       	if (eval(controlId + "_onuploadcompleted")) checkEvent = true;
    } catch(e){};
   
    if (checkEvent){
      var result = eval(controlId + "_onuploadcompleted(\"" + frameName + "\");");
    };

	return;
};





/*
 *		2016-08-19(차중훈) 추가 - 업로드 파일 읽기 : txt, csv 파일을 업로드 하여 파일의 내용을 읽는다.
 */

/**
*     @description	미결
*     @param	{string}	name
*     @param	{string}	commandName
*     @param	{string}	outputControlName
*     @param	{number}	limitSize
*     @param	{string}	allowFileName
*     @return	{string}
*     @example	미결
*/
function IFrame_UploadFRD_Command(name, commandName, outputControlName, limitSize, allowFileName) {
	
	this.commandName = commandName;
	this.fileName = "";
	this.fimeNameOutputControlName = outputControlName ? outputControlName : "";
	this.limitSize = limitSize ? limitSize : -1;
	this.allowFileName = allowFileName ? allowFileName : "";
	
	var buttonControl = getControlById(commandName).tagObject;
	var doc = buttonControl.ownerDocument;
	var container = doc.createElement("div");
	
    // zindex 주기
    var zi=0, ziparsed;
    var obj = buttonControl;
    var comp;
    
    var positionObject = getBoundsObject(buttonControl);
    var buttonTop = positionObject.top + "px";
    var buttonLeft = positionObject.left + "px";
    var buttonWidth = positionObject.width + "px";
    var buttonHeight = positionObject.height + "px";

    zi = findHighestZIndex() + 1;
    
    container.style.zIndex = zi;
    container.style.position = 'absolute';
    container.style.overflow = 'hidden';
    container.style.padding = 0;
    container.style.margin = 0;
    container.style.visiblity = 'hidden';
    container.style.width = '0px';
    container.style.height = '0px';
    container.style.opacity = 0;
    container.style.filter = 'alpha(opacity=0)';

    doc.body.insertBefore(container, doc.body.firstChild);

    container.innerHTML = "<iframe name='" + name + "' id='" + name + "' src='about:blank'></iframe>";
    var iframe = container.childNodes[0];
    iframe.setAttribute("cmdname", commandName);
    //iframe.setAttribute("shtname", sheetName);
    
    //iframe.style.display = 'none';
    iframe.marginHeight = 0;
    iframe.marginWidth = 0;
   
    iframe.setAttribute("doc", null);
    if(iframe.contentDocument)                // Firefox, Opera  
       iframe.doc = iframe.contentDocument;

    else if(iframe.contentWindow)             // Internet Explorer  
       iframe.doc = iframe.contentWindow.document;

    else if(iframe.document)                  // Others?  
       iframe.doc = iframe.document;  

    if(iframe.doc == null)  
       throw "Document not found, append the parent element to the DOM before creating the IFrame";  

    iframe.doc.open();  
    iframe.doc.close();  
    
    var frm = iframe.doc.createElement("form");
    iframe.doc.body.appendChild(frm);  
            frm.method = 'post';
            frm.name = name + "_frm";
            frm.enctype = 'multipart/form-data';
            frm.encoding = 'multipart/form-data';
            frm.target = name ;
            frm.setAttribute('target', name );
            frm.action='uploadFileRead.do?id='+name;
            frm.style.margin = 0;
            frm.style.padding = 0;
            frm.style.height = buttonHeight;
            frm.style.width = '40px';
            frm.runat = 'server';
    
    this.frm = frm;
    
    var inputctltemp = iframe.doc.createElement("input");
    inputctltemp.name = inputctltemp.id  ="upload" ;
    inputctltemp.type = "file";  
    inputctltemp.size='1';
    inputctltemp.runat = 'server';
    inputctltemp.style.position = 'absolute';
    inputctltemp.style.top = -10000;
    inputctltemp.style.left = -10000;
    inputctltemp.style.visiblity = 'hidden';
    
    var inputctl = iframe.doc.createElement("input");
    inputctl.name = inputctl.id  ="upload" ;
    inputctl.type = "file";  
    inputctl.size='1';
    inputctl.runat = 'server';
    inputctl.disabled = !searchControl_CommandButton(buttonControl).enabled;
    //setEventHandler(inputctl, "click", controls[commandName].click()); 의미없는 코드이고, IE낮은 버전 오류
    
    
    frm.appendChild(inputctl);
    this.inputctl = inputctl;
    
    inputctl.style.position = 'absolute';
    inputctl.style.display = 'block';
    inputctl.style.top = "-2px";
    inputctl.style.left = "-10px";
    inputctl.style.height = '25px';
    inputctl.style.width = '100px';
    inputctl.style.fontSize = 8;
    inputctl.style.zIndex = 1;
    inputctl.style.visiblity = 'hidden';
    inputctl.style.marginLeft = '-40px'; // hide IE text field

    
    var filenamectl = iframe.doc.createElement("input");
    filenamectl.type = "hidden";  
    filenamectl.name="uploadfilename" ;
    filenamectl.id  ="uploadfilename" ;
    filenamectl.value = "";
     
    frm.appendChild(filenamectl);
    
    function getChildNodeById(childNodes, strId){
		for (var i=0; i < childNodes.length; i++){
			if (childNodes[i].getAttribute('id') == strId){
				return childNodes[i];
			}
		}
		return null;
	}
    /**
     * @name CommandButton#inputct1_onchange
     * @event
     * @description	미결
     */
    function inputctl_onchange(e){
    	// functionname : [IFrame_Upload.onchange]
        if (!e) e = window.event;
        var em = getSrcElement(e)
        var filePath = em.value; 
        
        //파일 확장자 체크
        if (filePath == "" || (filePath.substring(filePath.length-4) != ".txt" && filePath.substring(filePath.length-4) != ".csv")) {
            alert(getText("message_commandbutton_012", "텍스트 또는 CSV 파일을 등록하세요."));
            return;
        } 
        
        var fileName = "";
        if (filePath.indexOf("\\") > 0) {
            fileName = filePath.split("\\")[filePath.split("\\").length -1];
        } else {
        	fileName = filePath;
        }
        
        var wndw = self;
        for (var i = 0; i < 10; i++) {
        	try {
        		if (eval(wndw.getControlById)) break;
        	} catch(e) {
        		wndw = wndw.parent;
        	}
        }
        
        var commandName = "";
        var fimeNameOutputControlName = "";
        var limitSize = -1;
        var allowFileName = "";
        var cmdCtrl = null;
        
        try {
        	var iframeNodeList = wndw.document.getElementsByTagName("iframe");
        	var iframeNode = null;
        	for(var i = 0; i < iframeNodeList.length; i++){
        		iframeNode = iframeNodeList[i];
        		if( (iframeNode.getAttribute("id") + "") == (em.parentElement.getAttribute("target") + "") ){
        			cmdCtrl = wndw.getControlById( iframeNode.getAttribute("cmdname") );
        			fimeNameOutputControlName = cmdCtrl.uploadFrame.fimeNameOutputControlName;
        			limitSize = cmdCtrl.uploadFrame.limitSize;
        			allowFileName = cmdCtrl.uploadFrame.allowFileName;
        			break;
        		}
        	}
        } catch(e){}
        
        try {
        	//파일 사이즈 체크
        	if(limitSize > 0 && e.target != undefined && e.target != null){
        		if(e.target.files != undefined && e.target.files != null){
        			//파일 크기 단위 : 바이트
        			if(e.target.files.item(0).size * 1 > limitSize * 1){
        				alert(getText("message_commandbutton_007", "허용된 파일 크기를 초과하였습니다.\n(허용된 파일 크기 : {0}KB)", [(limitSize / 1024)]));
        				return ;
        			}
        		}
        	}
        	//파일명 체크
        	if(allowFileName.length > 0){
        		var fname = "";
        		//확장자를 체크하여 확장자 길이에 맞게 잘라내 파일명만 남김
        		fname = fileName.substring(0, fileName.length - 4);
        		//확장자를 제외한 파일명이 다름
        		if(allowFileName != fname){
        			alert(getText("message_commandbutton_013", "허용된 파일명이 아닙니다.\n(허용된 파일명 : txt, csv)"));
        			return ;
        		}
        	}
        	//파일명 출력
        	cmdCtrl.uploadFileName = fileName;
        	cmdCtrl.uploadFrame.fileName = fileName;
        	//controls["ExcelFilePath"].setValue(em.value);
        	if(fimeNameOutputControlName.length > 0){
        		controls[fimeNameOutputControlName].setValue(fileName);
        	}
        } catch(e){}
        
        var fileTag = timeEncodeString();
        if (em.document){
            em.document.getElementsByName("uploadfilename")[0].value = fileName;
        } else {
            //em.parentNode.childNodes.item("uploadfilename").setAttribute("value",fileName);
        	getChildNodeById(em.parentNode.childNodes, "uploadfilename").value = fileName;
       }
        
        showAjaxBox(getText("message_commandbutton_014", "{0} 파일을 읽는 중입니다.", [fileName]), 0);
        
        em.parentNode.submit();
        
	};

	setEventHandler(inputctl, "change", inputctl_onchange);

	/**
	 * @name CommandButton#container_onmouseout
	 * @event
	 * @description	미결
	 */
    function container_onmouseout(e){
        if (!e) e = window.event;

        var receiver = doc.elementFromPoint(e.clientX, e.clientY);

        if (receiver === buttonControl)
        {
        	container.style.width = '20px';
            container.style.height = buttonHeight;
        } else {
            container.style.width = '0px';
            container.style.height = '0px';
        }
    };
	
	//setEventHandler(container, "mouseout", container_onmouseout);
    
    /**
     * @name CommandButton#buttonControl_onmousemove
     * @event
     * @description	미결
     */
    function buttonControl_onmousemove(e) {
            if (!e) e = window.event;
            
            var positionObject = getBoundsObject(getSrcElement(e));
            buttonTop = positionObject.top + "px";
            buttonLeft = positionObject.left + "px";
            buttonWidth = positionObject.width + "px";
            buttonHeight = positionObject.height + "px";

            var x = 0; var y = 0;

            if (e.pageX) x = e.pageX;
            else if (e.clientX)
               x = e.clientX + (doc.documentElement.scrollLeft ? doc.documentElement.scrollLeft : doc.body.scrollLeft);

            if (e.pageY) y = e.pageY;
            else if (e.clientY)
               y = e.clientY + (doc.documentElement.scrollTop ? doc.documentElement.scrollTop : doc.body.scrollTop);

            // move listener
            container.style.left =(parseIntSize(buttonLeft) > x - 10 ? buttonLeft : x - 10 + 'px');
            container.style.top = buttonTop;
            container.style.width = '20px';
            container.style.height = '25px';
        };
        
    //setEventHandler(buttonControl, "mousemove", buttonControl_onmousemove);
    
    this.setEnabled = function(enabled){
    	this.inputctl.disabled = !enabled;
    };
    this.clearInfo = function(){
         container.innerHTML = "";
    };
    this.setOptionInfo = function(optonInfo){
    	var arrInputControls = this.frm.getElementsByTagName("INPUT");
    	for (var i = 0; i < arrInputControls.length; i++){
    		if (arrInputControls[i].id == "info"){
    			arrInputControls[i].value = optonInfo;
    			break;
    		}
    	}
    };
    
};

/**
*     @description	미결
*     @param	{string}	uploadFileContent
*     @param	{string}	message
*     @param	{string}	commandName
*     @param	{string}	frameName
*     @return	{void}
*     @example	미결
*/
function setFileReadData(uploadFileContent, message, commandName, frameName){
	//오류 메시지 먼저 파악 
	if (uploadFileContent == null){
		alert(getText("message_commandbutton_010", "오류발생:") +  message);
		this.errInfo = message;
		hideAjaxBox();
		return;
	}
	
	var fileContent = uploadFileContent;

	//다시 엑셀 업로드 프레임 초기화 세팅
	var wControl = getControlById(commandName);
	//엑셀 업로드 설정값 가져옴
	var outputControlName = wControl.uploadFrame.fimeNameOutputControlName;
	var limitSize = wControl.uploadFrame.limitSize;
	var allowFileName = wControl.uploadFrame.allowFileName;
	
	uploadControls[frameName].clearInfo();
	uploadControls[frameName] = null;
	wControl.uploadFrame = null;
	wControl.uploadFrame = uploadControls[frameName] = new IFrame_UploadFRD_Command(frameName, commandName, outputControlName, limitSize, allowFileName);
	
	hideAjaxBox();

	if (message.length > 0){
		//alert(message);
	} else {
		alert(getText("message_commandbutton_015", "파일 읽기가 완료되었습니다."));
	}
	
	//업로드완료 이벤트 함수 호출
	var controlId = wControl.id;
	var checkEvent = false;
	try {
		if(eval(controlId + "_onuploadcompleted")) checkEvent = true;
	}catch(e){ /**/ };
	if (checkEvent){
		var result = eval(controlId + "_onuploadcompleted(fileContent);");
	};
	
	
	//파일 데이터 메모리 해제
	fileContent.clear();
	fileContent = null;

	return;
}





// ========DIV BUTTON EVENT====================================================

/**
 * @name CommandButton#commandbutton_Focus
 * @event 
 * @description 버튼에 포커스가 잡혔을때 발생하는 이벤트입니다.
 */
function commandbutton_Focus(e)
{
    e=window.event || e;
	var em = getSrcElement(e);
	var control = searchControl_CommandButton(em);
    if (control.style && control.style.length > 0){
//    	control.tagObject.className="CommandButton focused " + control.style; 
//    	control.addClass("focused " + control.style);
    } else {
//    	control.tagObject.className="CommandButton focused"; 
//    	control.addClass("focused");
    }
    stopPropagation(e);
    return true;
};

/**
 * @name CommandButton#commandbutton_Blur
 * @event 
 * @description 버튼이 포커스를 잃었을때 발생하는 이벤트 입니다.
 */
function commandbutton_Blur(e)
{
    e=window.event || e;
	var em = getSrcElement(e);
	var control = searchControl_CommandButton(em);
	if (control.stateMouseDown) return false;
	
    if (control.style && control.style.length > 0){
//    	control.tagObject.className="CommandButton " + control.style; 
//    	control.removeClass("focused " + control.style);
    } else {
//    	control.tagObject.className="CommandButton"; 
//    	control.removeClass("focused");
    }
    
    stopPropagation(e);
    return true;
};

/**
 * @name CommandButton#commandbutton_MouseMove
 * @event 
 * @description 버튼에서 마우스가 움직일때 발생하는 이벤트 입니다.
 */
function commandbutton_MouseMove(e)
{
    e=window.event || e;
	var em = getSrcElement(e);
	var control = searchControl_CommandButton(em);
    
	if (!control.mouseover){
	    var coords = { x: 0, y: 0, w: 0, h: 0 };
	    var element = control.tagObject;

	    coords.w = element.offsetWidth;
		coords.h = element.offsetHeight;
		while (element && element.tagName != "BODY") {
			coords.x += element.offsetLeft;
			coords.y += element.offsetTop;
			element = element.offsetParent;
		}    

	    if (e.x >= coords.x && e.x <= (coords.x + coords.w) && e.y >= coords.y && e.y <= (coords.y + coords.h)){
		    if (control.style && control.style.length > 0){
//		    	control.tagObject.className="CommandButton focused " + control.style;
//		    	control.addClass("focused " + control.style);
		    } else {
//		    	control.tagObject.className="CommandButton focused";
//		    	control.addClass("focused");
		    }
	    }
	    control.mouseover = true;
	}
	
	stopPropagation(e);
    return true;
};

/**
 * @name CommandButton#commandbutton_MouseDown
 * @event 
 * @description 버튼을 마우스로 누르는 순간 발생하는 이벤트 입니다.
 */
function commandbutton_MouseDown(e)
{
    e=window.event || e;
	var em = getSrcElement(e);
	var control = searchControl_CommandButton(em);
    if (control.style && control.style.length > 0){
//    	control.tagObject.className="CommandButton pressed " + control.style; 
//    	control.addClass("pressed " + control.style);
    } else {
//    	control.tagObject.className="CommandButton pressed";
//    	control.addClass("pressed");
    }
    
    control.stateMouseDown = true;
    
    stopPropagation(e);
    return true;
};

/**
 * @name CommandButton#commandbutton_MouseUp
 * @event 
 * @description 버튼을 마우스로 눌렀다 때는 순간 발생하는 이벤트 입니다.(마우스 왼쪽,오른쪽 구분없음)
 */
function commandbutton_MouseUp(e)
{
    e=window.event || e;
	var em = getSrcElement(e);
	var control = searchControl_CommandButton(em);
	
	try {
		if (control.style && control.style.length > 0){
//	    	control.tagObject.className="CommandButton focused " + control.style; 
//			control.addClass("focused "+ control.style);
	    } else {
//	    	control.tagObject.className="CommandButton focused"; 
//	    	control.addClass("focused");
	    }
	    control.stateMouseDown = false;
	    
	    stopPropagation(e);
	} catch (e) {}
	
    return true;
};

/**
 * @name CommandButton#commandbutton_MouseOut
 * @event 
 * @description 버튼에서 마우스커서가 나갔을때 발생하는 이벤트 입니다.
 */
function commandbutton_MouseOut(e)
{
    e=window.event || e;
	var em = getSrcElement(e);
	var control = searchControl_CommandButton(em);

    var coords = { x: 0, y: 0, w: 0, h: 0 };
    var element = control.tagObject;
	coords.w = element.offsetWidth;
	coords.h = element.offsetHeight;
	while (element && element.tagName != "BODY") {
		coords.x += element.offsetLeft;
		coords.y += element.offsetTop;
		element = element.offsetParent;
	}    

    if (e.x < coords.x || e.x > (coords.x + coords.w) || e.y < coords.y || e.y > (coords.y + coords.h)){
        if (control.style && control.style.length > 0){
//        	control.tagObject.className="CommandButton " + control.style;
//        	control.removeClass("focused " + control.style);
        } else {
//        	control.tagObject.className="CommandButton";
//        	control.removeClass("focused");
        }
    }
    
    control.mouseover = false;
	control.stateMouseDown = false;
	
	stopPropagation(e);
    return true;
};


//function commandbutton_KeyDown(e)
//{
//    e=window.event || e;
//	var em = getSrcElement(e);
//	var wKeyCode = e.keyCode;
//	var control = searchControl_CommandButton(em);
//
//    if (wKeyCode == 13 || wKeyCode == 40){
//        return control.click();
//    } else if (wKeyCode != 9){
//    	stopEvent(e);
//        return false;
//    }
//    
//    stopPropagation(e);
//};
/**
 * @name CommandButton#commandbutton_MouseOut
 * @event 
 * @description 버튼에 포커스가 있는 상태에서  키를 눌렀을때 발생하는 이벤트 입니다.
 */
function commandbutton_KeyDown(e)
{
	//F5새로고침 방지 추가
	if(e.keyCode == 116) {
		if(typeof e.preventDefault == "function") {
			e.preventDefault();
		} else {
			e.returnValue = false; // for IE
		}
		return false;
	}	
	 	
    e = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var wKeyCode = e.keyCode;
	var control = searchControl_CommandButton(em);
	if (wKeyCode == 9){
		if (getShiftKeyPressed(e)){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
	   		return true;
		} else {
    		stopEvent(e);
    		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
    		return true;
		}
    } else if (wKeyCode == 13){
		stopEvent(e);
		return control.click();
		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
		return true;
    }

    stopPropagation(e);
    
    // e.returnValue = true;
    return true;
};
/**
 * @name CommandButton#commandbutton_KeyUp
 * @event 
 * @description 버튼에 포커스가 있는 상태에서  키를 눌렀다가 땔때 발생하는 이벤트 입니다.
 */
function commandbutton_KeyUp(e)
{
    e=window.event || e;
	var em = getSrcElement(e);
	var wKeyCode = e.keyCode;
	var control = searchControl_CommandButton(em);

    if (wKeyCode == 13){
        if (control.style && control.style.length > 0){
//        	control.tagObject.className="CommandButton focused " + control.style; 
//        	control.addClass("focused " + control.style);
        } else {
//        	control.tagObject.className="CommandButton focused";
//        	control.addClass("focused");
    
        }
        return true;
    }
    
    stopPropagation(e);
    return true;
};/**
 * http://www.openjs.com/scripts/events/keyboard_shortcuts/
 * Version : 2.01.B
 * By Binny V A
 * License : BSD
 */
shortcut = {
	'all_shortcuts':{},//All the shortcuts are stored in this array
	'add': function(shortcut_combination,callback,opt) {
		//Provide a set of default options
		var default_options = {
			'type':'keydown',
			'propagate':false,
			'disable_in_input':false,
			'target':document,
			'keycode':false
		}
		if(!opt) opt = default_options;
		else {
			for(var dfo in default_options) {
				if(typeof opt[dfo] == 'undefined') opt[dfo] = default_options[dfo];
			}
		}

		var ele = opt.target
		if(typeof opt.target == 'string') ele = document.getElementById(opt.target);
		var ths = this;
		shortcut_combination = shortcut_combination.toLowerCase();

		//The function to be called at keypress
		var func = function(e) {
			e = e || window.event;
			
			if(opt['disable_in_input']) { //Don't enable shortcut keys in Input, Textarea fields
				var element;
				if(e.target) element=e.target;
				else if(e.srcElement) element=e.srcElement;
				if(element.nodeType==3) element=element.parentNode;

				if(element.tagName == 'INPUT' || element.tagName == 'TEXTAREA') return;
			}
	
			//Find Which key is pressed
			if (e.keyCode) code = e.keyCode;
			else if (e.which) code = e.which;
			var character = String.fromCharCode(code);
			
			if(code == 188) character=","; //If the user presses , when the type is onkeydown
			if(code == 190) character="."; //If the user presses , when the type is onkeydown

			var keys = shortcut_combination.split("+");
			//Key Pressed - counts the number of valid keypresses - if it is same as the number of keys, the shortcut function is invoked
			var kp = 0;
			
			//Work around for stupid Shift key bug created by using lowercase - as a result the shift+num combination was broken
			var shift_nums = {
				"`":"~",
				"1":"!",
				"2":"@",
				"3":"#",
				"4":"$",
				"5":"%",
				"6":"^",
				"7":"&",
				"8":"*",
				"9":"(",
				"0":")",
				"-":"_",
				"=":"+",
				";":":",
				"'":"\"",
				",":"<",
				".":">",
				"/":"?",
				"\\":"|"
			}
			//Special Keys - and their codes
			var special_keys = {
				'esc':27,
				'escape':27,
				'tab':9,
				'space':32,
				'return':13,
				'enter':13,
				'backspace':8,
	
				'scrolllock':145,
				'scroll_lock':145,
				'scroll':145,
				'capslock':20,
				'caps_lock':20,
				'caps':20,
				'numlock':144,
				'num_lock':144,
				'num':144,
				
				'pause':19,
				'break':19,
				
				'insert':45,
				'home':36,
				'delete':46,
				'end':35,
				
				'pageup':33,
				'page_up':33,
				'pu':33,
	
				'pagedown':34,
				'page_down':34,
				'pd':34,
	
				'left':37,
				'up':38,
				'right':39,
				'down':40,
	
				'f1':112,
				'f2':113,
				'f3':114,
				'f4':115,
				'f5':116,
				'f6':117,
				'f7':118,
				'f8':119,
				'f9':120,
				'f10':121,
				'f11':122,
				'f12':123
			}
	
			var modifiers = { 
				shift: { wanted:false, pressed:false},
				ctrl : { wanted:false, pressed:false},
				alt  : { wanted:false, pressed:false},
				meta : { wanted:false, pressed:false}	//Meta is Mac specific
			};
                        
			if(e.ctrlKey)	modifiers.ctrl.pressed = true;
			if(e.shiftKey)	modifiers.shift.pressed = true;
			if(e.altKey)	modifiers.alt.pressed = true;
			if(e.metaKey)   modifiers.meta.pressed = true;
                        
			for(var i=0; k=keys[i],i<keys.length; i++) {
				//Modifiers
				if(k == 'ctrl' || k == 'control') {
					kp++;
					modifiers.ctrl.wanted = true;

				} else if(k == 'shift') {
					kp++;
					modifiers.shift.wanted = true;

				} else if(k == 'alt') {
					kp++;
					modifiers.alt.wanted = true;
				} else if(k == 'meta') {
					kp++;
					modifiers.meta.wanted = true;
				} else if(k.length > 1) { //If it is a special key
					if(special_keys[k] == code) kp++;
					
				} else if(opt['keycode']) {
					if(opt['keycode'] == code) kp++;

				} else { //The special keys did not match
					if(character == k) kp++;
					else {
						if(shift_nums[character] && e.shiftKey) { //Stupid Shift key bug created by using lowercase
							character = shift_nums[character]; 
							if(character == k) kp++;
						}
					}
				}
			}
			
			if(kp == keys.length && 
						modifiers.ctrl.pressed == modifiers.ctrl.wanted &&
						modifiers.shift.pressed == modifiers.shift.wanted &&
						modifiers.alt.pressed == modifiers.alt.wanted &&
						modifiers.meta.pressed == modifiers.meta.wanted) {
				callback(e);
	
				if(!opt['propagate']) { //Stop the event
					//e.cancelBubble is supported by IE - this will kill the bubbling process.
					e.cancelBubble = true;
					e.returnValue = false;
	
					//e.stopPropagation works in Firefox.
					if (e.stopPropagation) {
						e.stopPropagation();
						e.preventDefault();
					}
					return false;
				}
			}
		}
		this.all_shortcuts[shortcut_combination] = {
			'callback':func, 
			'target':ele, 
			'event': opt['type']
		};
		//Attach the function with the event
		if(ele.addEventListener) ele.addEventListener(opt['type'], func, false);
		else if(ele.attachEvent) ele.attachEvent('on'+opt['type'], func);
		else ele['on'+opt['type']] = func;
	},

	//Remove the shortcut - just specify the shortcut and I will remove the binding
	'remove':function(shortcut_combination) {
		shortcut_combination = shortcut_combination.toLowerCase();
		var binding = this.all_shortcuts[shortcut_combination];
		delete(this.all_shortcuts[shortcut_combination])
		if(!binding) return;
		var type = binding['event'];
		var ele = binding['target'];
		var callback = binding['callback'];

		if(ele.detachEvent) ele.detachEvent('on'+type, callback);
		else if(ele.removeEventListener) ele.removeEventListener(type, callback, false);
		else ele['on'+type] = false;
	}
}/**
 * @class AUIDataAction
 * @constructor AUIDataAction
 * 
 * @param controlId
 *            {String} 해당 컨트롤의 ID를 지정합니다.
 * @param controlName
 *            {String} 해당 컨트롤의 Name을 지정합니다.
 * @param tagObject
 *            {Object} 해당 컨트롤의 태그 객체를 지정합니다.
 * 
 * @return 객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>
 *         만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
 * 
 * @example var wControl = controls["link_1"] = new Linker("link_1", "Link_1",
 *          document.getElementsByName("link_1")[0]); if(wControl.errorMsg !=
 *          null){ //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요. }																								
 *  // 후속코드 생략...
 */

/**
 * @description	미결
 * @param		{Object}	recordset
 * @param		{String}	fieldName
 * @param		{String}	dataType
 * @return		{Undefined}
 * @example		미결
 */
function Field(recordset, fieldName, dataType){
    this.recordset = recordset;
    this.fieldName = fieldName.toLowerCase();
    this.dataType = dataType;
    
    this.datas = [];
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
Field.prototype.value = function(){
    // functionname : [Field.value]

	var wValue;
	if (this.dataType == SQL_TYPE_INTEGER ||
	    this.dataType == SQL_TYPE_SMALLINT){
		    if (this.datas[this.recordset.currentRow] == undefined){
	    		wValue = 0;
		    } else {
	    		wValue = parseInt(1 * this.datas[this.recordset.currentRow]);
		    }
    } else if (this.dataType == SQL_TYPE_NUMERIC ||
	        this.dataType == SQL_TYPE_DECIMAL ||
	        this.dataType == SQL_TYPE_FLOAT ||
	        this.dataType == SQL_TYPE_REAL ||
	        this.dataType == SQL_TYPE_DOUBLE ){
	    if (this.datas[this.recordset.currentRow] == undefined){
    		wValue = 0.0;
	    } else {
	    	wValue = parseFloat(1.0 * this.datas[this.recordset.currentRow]);
	    }
    } else {
	    if (this.datas[this.recordset.currentRow] == undefined){
    		wValue = "";
	    } else {
	    	wValue = this.datas[this.recordset.currentRow];
	    }
    }
	
    return wValue; 
};

/**
 * @description	미결
 * @returns		{Object}
 * @example		미결
 */
Field.prototype.setValue = function(){
    // functionname : [Field.setValue]

    return this.datas[this.recordset.currentRow] = Value; 
};

/**
 * @description	미결
 * @returns		{Void}
 * @example		미결
 */
Field.prototype.destroy = function(){
    // functionname : [Field.destroy]

    this.recordset = null;
    
    this.datas.clear();
    this.datas = null;
	return;
};

/**
 * @description	미결
 * @param		{Object}	recordset
 * @returns		{Void}
 * @example		미결
 */
Recordset.prototype.AUIopen = function(/*AUIControlId, */recordset){
	
	showAjaxBox(getText("message_AUIDataAction_001", "자료를 조회하는 중입니다."), 0);
	
    // 데이터를 리턴받는 경우 레코드셋을 미리 만들어 두고 이 루틴을 호출할 것
    var recordsetId = this.id;
    this.casheKey = ""; var ndx = 0;
    for (var wKey in this.parameters){
    	if (this.parameters[wKey] instanceof Function) continue;
    	this.casheKey += (ndx++ > 0 ? ":" : "");
    	this.casheKey += this.parameters[wKey].value();
    }
    
    if (this.id.length > 9 && this.id.substring(0,9) == "fillList_"){
        if (dataCashes[this.sqlnum + ":" + this.casheKey] != undefined){
        	this.setCashedData();
        	return;
        }
    }
    
    
    // 파라메터 정보에는 콜론이 하나 더 붙는다.
    var wParamInfo = this.casheKey + ":";

    var wQueryString = "lang=" + USER_LANGUAGE
                     + "&cogu=" + USER_COGU
                     + "&personalId=" + USER_PERSONALID
			         + "&sqlnum=" + this.sqlnum
			         + "&pageNum=" + this.pageNum
			         + "&pageSize=" + this.pageSize
			         + "&permitNull=" + this.permitNullParam
			         + "&smode=" + this.smode
			         + "&paramInfo=" + encodeURIComponent(wParamInfo)
			         + "&formid=" + USER_FORMID
			         + "&tm=" + (new Date()).valueOf() + (Math.floor(Math.random() * 1000) + 1);
    
	ajax( {
		url : getContextPath()+((TEST_MODE == undefined || !TEST_MODE) ? "/AUIquery.do" : "/test/AUIquery.do"),
		type : "POST",
		data : wQueryString, // 쿼리
		async: false, // false 일땐 동기방식으로 요청 ( cross-domain 에서는 지원하지 않는다)
		complete : function(){
			alert(getText("message_AUIDataAction_002", "s"));
		},
		onSuccess : function(jsonActionObject) {
			//-- 서버 사이드에서 보낸 메세지 (에러 등 메세지를 출력시킴)
//			if(typeof jsonActionObject == "string" || !jsonActionObject) {
			if (jsonActionObject.errorMsg.length > 0){
				hideAjaxBox();
				callEvent(recordsetId + "_OnReceiveErr", jsonActionObject.errorMsg);
				return;
			}
			
			// 서버데이터 분석
			recordset.rowCount= jsonActionObject.recordList.length;

			recordset.AUIrecordList = jsonActionObject.recordList;
		   
		    // 결과값 분석, 두번쨰 페이지 부터는 안 넘어온다. 처음 조회내용 유지
		    if (recordset.smode == "N" && jsonActionObject.rowCount > 0){
		    	recordset.totalRowCount = jsonActionObject.rowCount;
		    } else if (recordset.smode == "Y"){
		    	recordset.totalRowCount = 9999999;
		    }
		    
		    recordset.EOF = (recordset.AUIrecordList.length == 0);
		    
		    // 이벤트일으키기
		    var checkFunction = false;
			try {
		    	if (eval(recordsetId + "_OnReceive")) checkFunction = true;
		    } catch(e){}
		    if (checkFunction) eval(recordsetId + "_OnReceive()");
		    
		    hideAjaxBox();
		},
		onError : function(request,status,error) {
			hideAjaxBox();
			callEvent(recordsetId + "_OnReceiveErr", error);
			return;
		}
	});
    
    return;
};


//ajax 요청 전역 함수...기본적으로 XMLHttpRequest 를 사용하며
//IE인 경우 저버전(XMLHttpRequest 지원하지 않는 브라우저) 체크하여 XMLHTTP 로 요청하는 모듈

/**
 * @description	미결
 * @param		{Object}	props
 * @returns		{Undefined}
 * @example		미결
 */
function ajax(props) {
 var target = props.target ? props.target : null;
 var currentTarget = props.currentTarget ? props.currentTarget : null;
 var isLocal =  location.href.indexOf("http") >= 0  && location.href.indexOf("http") <= 3 ? false : true;
 props = {
     type: props.type || "GET", // 요청 메소드(get or post)
	    url: props.url || "", // 요청 URL
	    timeout: props.timeout || 30000, // 응답 타임아웃
	    onError: props.onError || function() {}, // 에러 핸들러
	    onSuccess: props.onSuccess || function() {}, // 성공 핸들러
	    data: props.data || "" // 요청 시 보낼 데이터(파라메터)
 };
 var i, xhr, activeXObjects = ["MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
 if ("ActiveXObject" in window) {
     if (isLocal) {
         xhr = new ActiveXObject("Microsoft.XMLHTTP");
     }
 }
 if (!xhr) {
     try {
         xhr = new XMLHttpRequest();
     } catch (e) {
         for (i = 0; i < activeXObjects.length; i++) {
             try {
                 xhr = new ActiveXObject(activeXObjects[i]);
                 break;
             } catch (e) {}
         }
     }
 }
 var timeout = props.timeout;
 var isTimeout = false;
 setTimeout(function() {
     isTimeout = true;
 }, timeout);
 xhr.onreadystatechange = function() {
     if (xhr.readyState == 4 && !isTimeout) {
         var e = {};
         if (target) {
             e.target = target;
         }
         if (currentTarget) {
             e.currentTarget = currentTarget;
         }
         if (isSuccess(xhr)) {
             var contentType = xhr.getResponseHeader("content-type");
             var resultData = null;
             if( contentType && contentType.indexOf("xml") >= 0 ) {
                 resultData = xhr.responseXML;
             } else if(xhr.responseText){
                 resultData = parseJSON(xhr.responseText);
             }
             props.onSuccess.call(xhr, resultData, e);
         } else {
             props.onError.call(xhr, xhr.status, e);
         }
         xhr = null;
     }
 };
 try {
     xhr.open(props.type, props.url, true);
     xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
     xhr.send(props.data);
 } catch (e) {
     props.onError(e.message);
 }

 /**
  * @description	미결
  * @param			{Object}	xhr
  * @returns		{Boolean}
  * @example		미결
  */
 function isSuccess(xhr) {
     try {
         return !xhr.status && isLocal || (xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || navigator.userAgent.indexOf("Safari") >= 0 && Cs(xhr.status);
     } catch (e) {}
     return false;
 };
 
 /**
  * @description	미결
  * @param			{String}	data
  * @returns		{String}
  * @example		미결
  */
 function parseJSON(data) {
 	var obj;
		if ( window.JSON && window.JSON.parse ) {
			try {
				obj = window.JSON.parse( data + "" );
			} catch(e) {
				obj = data;
			}
		} else {
			try {
				obj = (function() { return eval(data); })();
			} catch (e) {
				obj = data;
			}
		}
 	return obj;
	};
};
/*******************************************************************************
* 데이터시트 콘트롤의 정의 부분이다 인수로는 콘트롤 명과 , 테그객체를 갖는다 용어의 정의: LogicalRow: ColSpan과
* 여러줄처리를 감안한 논리적 줄번호 (1 ~) SheetRow : HeadColumn을 포함하지 않는 순수 데이터셀의 줄번호(1 ~)
* HardRow : HeadColumn을 포함하는 테이블 테그내 줄번호(0 ~)
* 
* Sheet : 자식 테이블들을 포함하는 콘트롤 단위의 개념(DIV) Table : 시트내 각각의 자식 테이블 단위의 개념(TABLE)
******************************************************************************/
/*
* 시트동작에 필요한 상수
*/
// Sort 에 필요한 상수
var SORT_COLUMN_INDEX = 0;
var DATA_TABLE = 0; // 시트 제거 (분석시트에서 사용)
var COL_TABLE = 1; // 시트 제거 (분석시트에서 사용)
var ROW_TABLE = 2; // 시트 제거 (분석시트에서 사용)
var FIX_TABLE = 3; // 시트 제거 (분석시트에서 사용)
//    var ROW_TABLE_RIGHT = 4;
//    var FIX_TABLE_RIGHT = 5;
//    var BOTTOM_TABLE_CENTER = 6;
//    var BOTTOM_TABLE_LEFT = 7;
//    var BOTTOM_TABLE_RIGHT = 8;

// 셀타입설정에 필요한 상수
var CELLTYPE_DATE       = 0; // 날자 : 93 년월일, 92 년월, 91 년
var CELLTYPE_EDIT       = 1;
var CELLTYPE_INTEGER    = 3;
var CELLTYPE_MASK       = 4;
var CELLTYPE_TIME       = 6; //시간 12, 24 시 , 시분초 입력 선택
var CELLTYPE_BUTTON     = 7;
var CELLTYPE_COMBOBOX   = 8;
var CELLTYPE_PICTURE    = 9; /**@ 메뉴얼에 Rock 으로 구현하도록 표시 */
var CELLTYPE_CHECKBOX   = 10;
var CELLTYPE_NUMBER     = 13;
var CELLTYPE_PERCENT    = 14; // 퍼센트
/**@ 추가할 셀 타입 **/
var CELLTYPE_ICON    = 2; // 아이콘
var CELLTYPE_BAR    = 5; // Bar
var CELLTYPE_SIGNAL    = 11; // Signal
var CELLTYPE_PASSWORD    = 12; // PassWord
var CELLTYPE_STATICTEXT = 5; // 시트 제거 (분석시트에서 사용)
var CELLTYPE_OWNERDRAWN = 11;  // 시트 제거 (분석시트에서 사용) 
var CELLTYPE_CURRENCY   = 12;  // 시트 제거 (분석시트에서 사용)
var CELLTYPE_FLOAT      = 13;  // 시트 제거 (분석시트에서 사용)

// 줄,열번호환산에 필요한 상수
var CONV_LOGICAL_SHEET = 1;
var CONV_LOGICAL_HARD  = 2;
var CONV_SHEET_LOGICAL = 3;
var CONV_SHEET_HARD    = 4;
var CONV_HARD_LOGICAL  = 5;
var CONV_HARD_SHEET    = 6;

// 시트타입 구분에 사용하는 변수
var SHEETTYPE_DATASHEET = 1;
var SHEETTYPE_LISTSHEET = 2;

// 시트채우기 모드
var SHEETMODE_SETCELL = 1;
var SHEETMODE_SETDATA = 2;

// 시트 탭키 동작모드
var SHEET_TAB_TONEXTCELL = 1;
var SHEET_TAB_TONEXTCTRL = 0;

// 브라우저 체크
var userAgent = navigator.userAgent.toLowerCase();
var Browser = {
		ie : /trident/.test(userAgent),
		firefox : /firefox/.test(userAgent),
		chrome : /chrome/.test(userAgent),
		opera : /opera/.test(userAgent),
		safari : /safari/.test(userAgent) && !/chrome/.test(userAgent),
		mac : /mac/.test(userAgent)
	};


function DataSheet(controlId, controlName, tagObject) // constructor
{
	// 변수 선언부
    this.controlName = controlName || "";   
    this.controlId   = controlId || "";
    this.id   = this.controlId; //콘트롤 아이디와 같다.
    this.tagObject = tagObject || null;
    this.enabled = true;
	this.visible = true;
    this.sheetType = SHEETTYPE_DATASHEET;
    this.linkedObjects = []; //연결된 콘트롤
    
    // DataSet 정보
    this.rows = [null];  // Logical 데이터가 1번 배열부터 들어간다는 의미
    this.columns = [null];
    this.dataValues = [];
    
    // 산식정보 셀들 : 참조되는 셀들을 기준으로 나열된다
    this.formulaRefs = []; //참조 관계를 기억
    this.autoCalc = true;
    this.SortOnHeaderClick = false;
    this.sortSpecialColumn = false; //이지메이커 에서 정렬 기준 컬럼
    this.permitCellResizing = false; //마우스로 셀 조정
    this.permitColumnMove = false; //마우스로 컬럼 이동
    this.tabKeyAction = SHEET_TAB_TONEXTCTRL;
    
    // this.DisplayColHeaders = true; // 디자인타임 속성으로 XSL에 반영된다 tr
// style="display:none;"
    // this.DisplayRowHeaders = true; // 디자인타임 속성으로 XSL에 반영된다 td
// style="width:0;"
    // this.DisplayColABC = false; // 디자인타임 속성으로 XSL에 반영된다
    this.displayRowNum = true;
    this.inClearMode = false;
    
    
    // 셀의 선택동작용 변수들
    this.blockMode = false;
    this.col = -1; this.col2 = -1;  // Logical // -1 은 전체 선택
    this.row = -1; this.row2 = -1;  // Logical
    
    this.clickedTR = null;          // Physical 클릭된 시트의 줄을 기억 (객체를 기억한다.)
    this.moveoverTR = null;         // Physical 마우스 이동중인 시트의 줄을 기억
    this.lastTRClass = "";          // 마지막에 클릭했던 줄의 클래스명 CSS 용
    this.focusedCell = null;
    this.dirty = false;             // 리스트 시트를 한번 선택한적이 있으면 Dirty이다
    this.displayOddEven = false;
    this.addRowAtEnd = false;
    
    // sheet 이벤트케치용 메모리
    this.callerFncName = "";  // Blur이벤트의 중복방지
    
    // 초기동작
    this.inputMode = SHEETMODE_SETCELL; // SHEETMODE_SETCELL : GUI 만 수정, SHEETMODE_SETDATA : GUI 는 수정 안되고 데이터 만 채운다.
    
    // 시트의 외양에 관한 변수들
    this.rowsPerDataRow = 1; // 데이터 한줄당 물리적으로 몇줄이 소요되는지....
    this.addHeaderRows = 0; // 추가 헤더 타이틀 줄
    this.headRows = 1;       // Physical
    this.headCols = 1;       // Physical
    this.maxCols = 1;        // Logical 데이터의 최대칼럼수
    this.maxRows = 1;        // Logical 데이터의 최대줄수
    this.PhysicalMaxCols = 1;        // Physical 데이터의 최대칼럼수
    this.PhysicalMaxRows = 1;        // Physical 데이터의 최대줄수
    this.frozenCols = 0;     // Logical
    this.frozenColsRight = null;     // Logical
    this.frozencolsrightcnt = 0; // 우고정열의 셀 수
    this.colSpanCells = null; // 가로 병합정보
    this.rowspancells = null; // 세로 병합정보
    this.spanEndColNums = null;
    this.spanStartColNums = null;
    this.frozenRows = 0;     // Logical
    this.currentRow = 1;     // Logical
    this.currentCol = 0;     // Logical
    this._moveReferenceRange = null; // 컬럼이동시 이동 함수를 호출할만큼 충분히 마우스 이동이 일어났는지를 체크한다.[0] : X, [1] : Y
    this.prevScrollTop = 0; // scrollAction() 을 동작시키긴 위한 함수
    this.moveTorowSpanPrevRow = -1; // 병합된 시트에서 키보드로 셀 이동시에 필요한 함수
    this.moveTorowSpanPrevCol = -1; // 병합된 시트에서 키보드로 셀 이동시에 필요한 함수
    
    this.rowHeights = [null, 19];        // 데이터 한줄을 구성하는 Row들의 기본 높이들
    this.logicalRowHeights = 0; // 논리적인 데이터 한줄의 높이 (this.rowHeights[] 배열 값들의 합)
    this.dataTable    = null;
    this.colHeadTable = null;
    this.leftRowTable = null;
    this.rightRowTable = null;
    this.leftColHeadTable = null;
    this.rightColHeadTable = null;
    this.bottomTable = null;
    this.bottomLeftTable = null;
    this.bottomRightTable = null;
    this.headSpanInfo = [];  // 각 요소는 2차원 배열임 cellSpanInfo가 들어감

    this.hideRowHeader = false;     // 줄타이틀 숨기기
    this.hideColHeader = false;     // 열타이틀 숨기기
    this.needMerge = 0;             // 머지상태점검변수  0: 아직모른다  1: 체크했는데 아니다  2: 머지가 필요하다
    this.hasTreeCell = false;          // cellTree: 머지된 셀의 트리동작

    this.noMoreData = false;
    
    this.textControl  = null;
    this.comboControl  = null;
    this.scrollPanel = null;
    this.dataPanel = null;
    
    this._mouseMove = true; // sheet_onmousemove() 함수 동작_내부
    this._clickLocation = null; // click 위치 변경 체크용 변수_내부
    this._moveTableName = null; // setColClass 에서 우측 고정열 테이블을 식별하기위한 변수_내부
    this.moveBottomTableHeight = 0; // resetScroll 에서 하단셀 위치 조정용 변수_내부 (하단셀의 높이)
    this.clickedCOL = 0; //Physical 클릭된 시트의 열 번호를 기억
    this.prevEm = null; // 마우스 이동시 헤더 셀을 기억
    this.prevTitleClass = ""; // 마우스 이동시 헤더 셀의 클래스명을 기억
    this.prevHeaderColHeader = 0; // 선택 셀의 컬럼 타이틀 태그
    this.prevHeaderRowHeader = 0; // 선택 셀의 로우 타이틀 태그
    
    this.focusColStyle = false; // TTUE 일때 포커스 받은 열 CSS 적용 (기본 false)
    this.focusRowStyle = true; // TTUE 일때 포커스 받은 줄 CSS 적용 (기본 true)
    this.focusColStyleExceptNum = '0'; // 포커스 받은 열 CSS 적용시 제외할 열 번호 (0 기본값, ',' 를 구분자로 들어간다. : ex 0,1,2,3)
    this.permitFocusToLockedCell = false; // TRUE 일때 탭키|엔터키로 락셀 포커스 이동 가능 (기본 false)
    this.sheetFontName = ""; //시트 글꼴
    this.sheetFontBold = ""; // 시트 글자 bold
    this.sheetFontItalic = ""; // 시트 글자 기울기
    this.sheetFontUnderLine = ""; //시트 글자 밑줄
    this.sheetFontStrike = ""; //시트 글자 취소선
    this.sheetFontColor = ""; // 시트의 글자색
    this.sheetFontSize = ""; // 시트의 글자 크기
    this.sheetBorderColor = "#CCC"; // 시트의 border 색
    
    if (tagObject){
        this.headCols = parseInt(tagObject.getAttribute("headcols"));       // Physical
        this.headRows = parseInt(tagObject.getAttribute("headrows"));       // Physical
        this.addHeaderRows = parseInt(tagObject.getAttribute("addheaderrows"));
        this.rowsPerDataRow = parseInt(tagObject.getAttribute("headerrows"));
        this.frozenCols = parseInt(tagObject.getAttribute("frozencols"));   // Logical
        this.PhysicalMaxCols = parseInt(tagObject.getAttribute("maxcols"));   // Logical
        
        this.frozencolsrightcnt = tagObject.getAttribute("frozencolsrightcnt"); // 우고정열 셀 수
        // 우측 고정열 정보를 배열에 넣어준다. [0] : 시트컬럼기준 시작번호, 뒤로는 헤더 줄수별로 물리적인 번호
        this.frozenColsRight = tagObject.getAttribute("spancellsoffrozencolsright").split(",");
        var rightLen = this.frozenColsRight.length;
        for(var i=0; i<rightLen; i++){
        	this.frozenColsRight[i] = parseInt(this.frozenColsRight[i]);
        }
        
        // 각 sheetRow기준 줄별로 Physical번호 기준 colNum사이의 병합 된 열수를 누적하여 저장, 
        // 각 물리적 colNum으로 시트번호를 찾을수있다. [sheetRow][physicalColNum] = sheetCol
        // colNumOf() 에서 사용 (병합정보 중 가장 중요하다)
        var spanCols = tagObject.getAttribute("colspancells").split(";");
        this.colSpanCells = new Array();
        for(var i=1; i<spanCols.length; i++){
        	var spanCells = spanCols[i].split(",");
        	this.colSpanCells[i] = new Array();
        	var cellsLen = spanCells.length;
        	var cellSpanNum = 0;
        	for(var j=0; j<cellsLen; j++){
        		cellSpanNum = cellSpanNum + parseInt(spanCells[j]);
        		this.colSpanCells[i][j] = cellSpanNum;
        	}
        }
        
        // 각 Logical 번호마다 세로 셀 병합이 자신을 제외하고 몇줄이 되어있는지를 저장한다.
        // [Logical] = 자신을 제외한 밑으로 병합되어 있는 수
        var spanRows = tagObject.getAttribute("rowspancells").split(",");
        this.rowSpanCells = new Array();
        var cellsLen = spanRows.length;
        for(var i=0; i<cellsLen; i++){
        	this.rowSpanCells[i] = parseInt(spanRows[i]);
        }
        
     	// 각 sheetRow기준 줄별로 sheetCol번호 기준 colNum에 해당 시트번호가 가 병합되어있거나 아니더라도 해당되는 실제 sheetCol번호를 저장
        // spanEndColnum 은 병합되어 있다면 병합된 마지막 sheetCol 번호
        // spanStartColumn 은 병합되어 있다면 병합된 첫번째 sheetCol 번호
        // 병합되어 있지 않다면 원래 sheetCol 번호 그리고 rowSpan 되어 있다면 '0'이 들어간다.
        var spanEndColNum = tagObject.getAttribute("spanendcolnums").split(";");
        var spanStartColNum = tagObject.getAttribute("spanstartcolnums").split(";");
        this.spanEndColNums = new Array();
        this.spanStartColNums = new Array();
        for(var i=1; i<spanEndColNum.length; i++){
        	var spanEndCol = spanEndColNum[i].split(",");
        	var spanStartCol = spanStartColNum[i].split(",");
        	this.spanEndColNums[i] = new Array();
        	this.spanStartColNums[i] = new Array();
        	var cellsLen = spanEndCol.length;
        	for(var j=0; j<cellsLen; j++){
        		this.spanEndColNums[i][j] = parseInt(spanEndCol[j]);
        		this.spanStartColNums[i][j] = parseInt(spanStartCol[j]);
        	}
        }
        	
        this.frozenRows = parseInt(tagObject.getAttribute("frozenrows"));   // Logical

        this.hideRowHeader = (tagObject.getAttribute("hiderowheader") == "true"); // 줄타이틀
																				// 숨기기
        this.hideColHeader = (tagObject.getAttribute("hidecolheader") == "true"); // 열타이틀
																				// 숨기기
        
        var wTables = this.tagObject.getElementsByTagName("table");
        
        for(var i=0; i<wTables.length; i++){
        	if(wTables[i].getAttribute("name") == "dataTable") this.dataTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "colHeadTable") this.colHeadTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "leftRowTable") this.leftRowTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "leftColHeadTable") this.leftColHeadTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "rightRowTable") this.rightRowTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "rightColHeadTable") this.rightColHeadTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "bottomCenterTable") this.bottomTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "bottomLeftTable") this.bottomLeftTable = wTables[i];
        	else if(wTables[i].getAttribute("name") == "bottomRightTable") this.bottomRightTable = wTables[i];
        }

        this.headSpanInfo = getHeadSpanInfo(this.dataTable);
        
        if (tagObject.getAttribute("rowheight").length > 0){
      	this.rowHeights = [null];
      	var arrRowHeight = tagObject.getAttribute("rowheight").split(";");
      	var rowHeight = 0;
        for (var i=0; i < arrRowHeight.length; i++){
        		 rowHeight = eval(1 * arrRowHeight[i]);
        		 this.rowHeights[i + 1] = rowHeight;
        		 this.logicalRowHeights += rowHeight;
        	 }
        }
        
        this.setColSpanInfo(tagObject.getAttribute("colspaninfo"));

        setEventHandler(tagObject, "mousedown", sheet_onmousedown);
        setEventHandler(tagObject, "mouseup", sheet_onmouseup);
        
        if(!isMobile.any()){
        	setEventHandler(tagObject, "mousemove", sheet_onmousemove);
        	setEventHandler(tagObject, "mouseout", sheet_onmouseout);
        }else{
        	setTouchEventHandler(tagObject, "scroll", "");
        }
        
        setEventHandler(tagObject, "dblclick", sheet_DoubleClick);
        setEventHandler(tagObject, "keydown", sheet_interceptKeys);

        setEventHandler(this.dataTable, "mousewheel", sheet_DisplayWheel);
        if(this.colHeadTable != null) setEventHandler(this.colHeadTable, "mousewheel", sheet_DisplayWheel);
        if(this.leftRowTable != null) setEventHandler(this.leftRowTable, "mousewheel", sheet_DisplayWheel);
        if(this.leftColHeadTable != null) setEventHandler(this.leftColHeadTable, "mousewheel", sheet_DisplayWheel);
        if(this.rightRowTable != null) setEventHandler(this.rightRowTable, "mousewheel", sheet_DisplayWheel);
        if(this.rightColHeadTable != null) setEventHandler(this.rightColHeadTable, "mousewheel", sheet_DisplayWheel);
        
        this.scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];
        this.dataPanel = this.tagObject.getElementsByTagName("DIV")[2];
        
//            if(!Browser.chrome){
//        	   	var dataPanelHeight = this.dataPanel.style.height.match(/^-?\d+/)[0]*1;
//        	   	this.dataPanel.style.height = (dataPanelHeight - 2) + "px";
//            }

    }

    if (tagObject != undefined){
        tagObject.setAttribute("tabIndex", "-1");
    }
    this.hasDelRowEvent = false; this.fncDelRowEvent = null;
    this.hasAddRowEvent = false; this.fncAddRowEvent = null;
    this.hasRowChangeEvent = false; this.fncRowChangeEvent = null;
    this.hasColChangeEvent = false; this.fncColChangeEvent = null;
    this.hasChangeEvent = false; this.fncChangeEvent = null;
    this.hasChangeComboTextEvent = false; this.fncChangeComboTextEvent = null;
    this.hasClearEvent = false; this.fncClearEvent = null;
    this.hasClickEvent = false; this.fncClickEvent = null;
    this.hasValidateEvent = false; this.fncValidateEvent = null;
    this.hasCommandClickEvent = false; this.fncCommandClickEvent = null;
    this.hasScrollEvent = false; this.fncScrollEvent = null;
    this.hasDblClickEvent = false; this.fncDblClickEvent = null;
    this.hasSortedEvent = false; this.fncSortedEvent = null;

    if (this.controlId.length > 0) {
    	try {
        	if (eval(this.controlId + "_ondelrow")) this.hasDelRowEvent = true;
        } catch(e){}
        if (this.hasDelRowEvent){
    	    eval("this.fncDelRowEvent = function(atRowNum){ return " + this.controlId + "_ondelrow(atRowNum);}");
        }

    	try {
        	if (eval(this.controlId + "_onaddrow")) this.hasAddRowEvent = true;
        } catch(e){}
        if (this.hasAddRowEvent){
    	    eval("this.fncAddRowEvent = function(atRowNum){ return " + this.controlId + "_onaddrow(atRowNum);}");
        }

    	try {
        	if (eval(this.controlId + "_onrowchange")) this.hasRowChangeEvent = true;
        } catch(e){}
        if (this.hasRowChangeEvent){
    	    eval("this.fncRowChangeEvent = function(rowNumFrom, rowNumTo, objectSeq){ return " + this.controlId + "_onrowchange(rowNumFrom, rowNumTo, objectSeq);}");
        }

    	try {
        	if (eval(this.controlId + "_oncolchange")) this.hasColChangeEvent = true;
        } catch(e){}
        if (this.hasColChangeEvent){
    	    eval("this.fncColChangeEvent = function(colNumFrom, colNumTo){ return " + this.controlId + "_oncolchange(colNumFrom, colNumTo);}");
        }
        
        
    	try {
        	if (eval(this.controlId + "_onchange")) this.hasChangeEvent = true;
        } catch(e){}
        if (this.hasChangeEvent){
    	    eval("this.fncChangeEvent = function(rowNum, colNum, value, oldValue){ return " + this.controlId + "_onchange(rowNum, colNum, value, oldValue);}");
        }

    	try {
        	if (eval(this.controlId + "_onchangeCombotext")) this.hasChangeComboTextEvent = true;
        } catch(e){}
        if (this.hasChangeComboTextEvent){
    	    eval("this.fncChangeComboTextEvent = function(rowNum, colNum, value, oldValue){ return " + this.controlId + "_onchangeCombotext(rowNum, colNum, value, oldValue);}");
        }

    	try {
        	if (eval(this.controlId + "_onclear")) this.hasClearEvent = true;
        } catch(e){}
        if (this.hasClearEvent){
    	    eval("this.fncClearEvent = function(){ return " + this.controlId + "_onclear();}");
        }
        
    	try {
        	if (eval(this.controlId + "_onclick")) this.hasClickEvent = true;
        } catch(e){}
        if (this.hasClickEvent){
    	    eval("this.fncClickEvent = function(rowNum, colNum){ return " + this.controlId + "_onclick(rowNum, colNum);}");
        }

    	try {
        	if (eval(this.controlId + "_onvalidate")) this.hasValidateEvent = true;
        } catch(e){}
        if (this.hasValidateEvent){
    	    eval("this.fncValidateEvent = function(colNum, value){ return " + this.controlId + "_onvalidate(colNum, value);}");
        }

    	try {
        	if (eval(this.controlId + "_oncommandclick")) this.hasCommandClickEvent = true;
        } catch(e){}
        if (this.hasCommandClickEvent){
    	    eval("this.fncCommandClickEvent = function(rowNum, colNum){ return " + this.controlId + "_oncommandclick(rowNum, colNum);}");
        }
    	try {
        	if (eval(this.controlId + "_onimageclick")) this.hasImageClickEvent = true;
        } catch(e){}
        if (this.hasImageClickEvent){
    	    eval("this.fncImageClickEvent = function(rowNum, colNum){ return " + this.controlId + "_onimageclick(rowNum, colNum);}");
        }
    	try {
        	if (eval(this.controlId + "_onscroll")) this.hasScrollEvent = true;
        } catch(e){}
        if (this.hasScrollEvent){
    	    eval("this.fncScrollEvent = function(scrollPanel, scrollTop, scrollLeft,  lastScrollTop, lastScrollLeft){ return " + this.controlId + "_onscroll(scrollPanel, scrollTop, scrollLeft, lastScrollTop, lastScrollLeft);}");
        }
    	try {
        	if (eval(this.controlId + "_ondblclick")) this.hasDblClickEvent = true;
        } catch(e){}
        if (this.hasDblClickEvent){
    	    eval("this.fncDblClickEvent = function(rowNum, colNum){ return " + this.controlId + "_ondblclick(rowNum, colNum);}");
        }

    	try {
        	if (eval(this.controlId + "_onsorted")) this.hasSortedEvent = true;
        } catch(e){}
        if (this.hasSortedEvent){
    	    eval("this.fncSortedEvent = function(){ return " + this.controlId + "_onsorted();}");
        }
        
        //  KeyDown(rowNum, colNum, KeyCode, Shift)
        makeEventHandler(this, "KeyDown", "rowNum", "colNum", "keyCode", "shiftPressed", "controlPressed", "altPressed");    
        
        //  KeyPress(rowNum, colNum, KeyAscii)
        makeEventHandler(this, "KeyPress", "rowNum", "colNum", "KeyCode");  
        
        //  KeyUp(rowNum, colNum, KeyCode, Shift)
         makeEventHandler(this, "KeyUp", "rowNum", "colNum", "KeyCode", "shiftPressed", "controlPressed", "altPressed");  
        
    }
    
    // clear memory
    tagObject = null;
};


DataSheet.prototype.setEnabled = function(enabled){
	// functionname : [Control.setEnabled]

	this.enabled = enabled;
	// 하위 테그들의 글자색 조정
    this.tagObject.disabled = !enabled;
};


DataSheet.prototype.setVisible = function(visible){
	// functionname : [Control.setVisible]

	if (this.visible == visible) return;
	this.visible = visible;

	var obj =  this.tagObject;
	var comp = obj.currentStyle ? obj.currentStyle : getComputedStyle(obj, null);
	
    if (("" + comp.position).toLowerCase() == "absolute" || ("" + comp.position).toLowerCase() == "relative"){
    	if (visible){
    		if (obj.style.left == "-10000px"){
    			obj.style.left = obj.getAttribute("xposition");
    		}
    	} else {
    		obj.setAttribute("xposition", obj.style.left);
    		obj.style.left = "-10000px";
    	}
    	this.tagObject.style.display = (visible ? "block" : "none");
    } else {
    	this.tagObject.style.display = (visible ? "inline" : "none");
    }
    
    return;
};

// DataSet 메서드 선언부
DataSheet.prototype.setCurrentRow = function(rowNum){
    // functionname : [DataSheet.setCurrentRow]

	if (this.currentRow == rowNum) return;
    if (rowNum > this.maxRows) {     
    	alert(getText("message_datasheet_001", "현재의 줄 수{0}보다 클 수는 없습니다.", [this.maxRows]));
    	return; 
    }

	var oldRowNum = this.currentRow;
	this.currentRow = rowNum;
	
	if (this.sheetType == SHEETTYPE_LISTSHEET){
        if (this.hasRowChangeEvent) this.fncRowChangeEvent(oldRowNum, rowNum);
	} else {
        if (this.hasRowChangeEvent) this.fncRowChangeEvent(oldRowNum, rowNum, this.rows[rowNum].objectSeq);
	}
	
    // dataset 현재줄 갱신 기능 
    if (typeof(ControlBase.prototype._UpdateDatasetRowPos) != "undefined"){
    	this._UpdateDatasetRowPos(rowNum);
    }

    // var checkEvent = false;
// try {
// if (eval(this.controlId + "_onrowchange")) checkEvent = true;
// } catch(e){}
//        
// if (checkEvent){
// if (this.sheetType == SHEETTYPE_LISTSHEET){
// eval(this.controlId + "_onrowchange(" + oldRowNum + "," + rowNum + ");");
// } else {
// eval(this.controlId + "_onrowchange(" + oldRowNum + ", " + rowNum + ", " +
// this.rows[rowNum].objectSeq + ");");
// }
// }
	return;
};

DataSheet.prototype.setCurrentCol = function(colNum){
    // functionname : [DataSheet.setCurrentCol]

	if (this.currentCol == colNum) return;
    if (colNum > this.maxCols) {     
    	alert(getText("message_datasheet_002", "현재의 열 수{0}보다 클 수는 없습니다.", [this.maxCols]));
    	return; 
    }

	var oldColNum = this.currentCol;
	this.currentCol = colNum;
	
    if (this.hasColChangeEvent){
    	this.fncColChangeEvent(oldColNum, colNum);
    }
	
// var checkEvent = false;
// try {
// if (eval(this.controlId + "_oncolchange")) checkEvent = true;
// } catch(e){}
//        
// if (checkEvent){
// eval(this.controlId + "_oncolchange(" + oldColNum + "," + colNum + ");");
// }
	return;
};

DataSheet.prototype.refresh = function(){
    // functionname : [DataSheet.refresh]
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
	for(var i=0; i < wTables.length; i++){
		if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
	}
	
	// 기존줄지우기
    for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){
        var wTable = wTables[wTableNum];
        for (var wHardRowNum = wTable.tBodies[0].rows.length - 1; wHardRowNum >= this.headRows; wHardRowNum--){
            wTable.deleteRow(wHardRowNum);
        }
    }
    
    // 줄수 재설정
    this.maxRows = this.rows.length - 1;
    
    // 빈테이블만들기
    for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){
        var wTable = wTables[wTableNum];
        var wTableName = wTables[wTableNum].getAttribute("name");
        for (var wRowNum = 1; wRowNum <= this.maxRows; wRowNum++){
            var wSheetRow = this.rowNumOf(wRowNum, 1, CONV_LOGICAL_SHEET);
            if (/colHead/i.test(wTableName)){
                if (wSheetRow > this.frozenRows) continue;
            }

            for (var i = 1; i <= this.rowsPerDataRow; i++){
                var wLastRowHardNum = wTable.tBodies[0].rows.length - 1;
                var wTableRow = document.createElement("TR");
                var parent = wTable.tBodies[0].rows[wLastRowHardNum];
                
                if (parent.insertAdjacentElement){
                	parent.insertAdjacentElement('afterEnd', wTableRow);
         		}
         		else if (parent.appendChild) {
         			// wTable.tBodies[0].appendChild(wTableRow); // firefox
				// 에서 insertAdjacentElement 함수에서는 <TR> 태그가 삽입이 안되는 문제가
				// 있어 appendChild 로 해결하였음
         			insertAdjacentElement('afterEnd' ,parent, wTableRow);
         		} else {
         			// 위 방법이 다 안될때
         			parent.innerHTML = "<TR></TR>" + parent.innerHTML;
	     		}
                
                // 20110411 firfox,chrome작동안해 변경함.
                // wTableRow.haveData="1";
                // wTableRow.height=this.rowHeights[i];
                
                wTableRow.setAttribute("class", "data_tr_" + i);
                wTableRow.setAttribute("haveData","1");
                wTableRow.setAttribute("height", this.rowHeights[i]);     
                           
                // Row Head 셀의 설정
                var CellIndex = 0;
                for (var wColNum = 0; wColNum < this.headCols; wColNum++){
                    if (wColNum == this.headCols - 1){
                        if (i == 1){
                            wCell = wTableRow.insertCell(CellIndex++);
                            wCell.className = "RowHead";
                            if (this.hideRowHeader) {
                            	wCell.style.display = "none";
                            }
                            wCell.innerHTML=" ";
                            wCell.rowSpan = this.rowsPerDataRow;
                        }

                    } else {
                        wCell = wTableRow.insertCell(CellIndex++);
                        wCell.className = "RowHead";
                        if (this.hideRowHeader) {
                        	wCell.style.display = "none";
                        }
                        wCell.innerHTML=" ";
                    }
                }

                // 본문셀의 설정
                for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
                    // 고정열수의 제약 체크
                    var wSheetCol =  this.colNumOf(wRowNum, wColNum, CONV_LOGICAL_SHEET);
                    if (/left/i.test(wTableName)){
                        if (wSheetCol > this.frozenCols) continue;
                    }
                    if (/right/i.test(wTableName)){
                        if (wSheetCol < this.frozenColsRight[0]) continue;
                    }
                    // 자기줄번호에 해당하는 셀들만 만든다
                    var wColumn = this.columns[wColNum];
                    if (wColumn.sheetRow != i) continue;
                    
                    wCell = wTableRow.insertCell(CellIndex++);
                    wCell.rowSpan = wColumn.sheetRowSpan;
                    wCell.colSpan = wColumn.sheetColSpan;
                    if (wColumn.hidden) {
                    	wCell.style.display = "none";
                    	wCell.style.width = "0px";
                    }
                    wCell.innerHTML=" ";
                }
            }
        }
    }
    
    // 셀값들을 다시 채운다.
    this.setBlock(1, 1, this.maxRows, this.maxCols);
    this.displayBlock();
    this.releaseBlock();

    if (this.currentRow > this.maxRows) {
    	this.setCurrentRow(this.maxRows);
    }
    // 줄번호 갱신
    if (this.displayRowNum) this.renumRows();
    
    // 줄번호 기억변수 및 UI 관련 변수 초기화
    this.clickedTR = null;          // Physical 클릭된 시트의 줄을 기억 (객체를 기억한다.)
    this.moveoverTR = null;         // Physical 마우스 이동중인 시트의 줄을 기억
    this.lastTRClass = "";          // 마지막에 클릭했던 줄의 클래스명 CSS 용
    this.focusedCell = null;
    this.dirty = false;
    
    // 산식재정비
    this.refreshFormulaRefs(); // true는 산식정비후 재계산까지 한다는 뜻

    this.resetScroll();
    
    // Odd-Even Mode 설정
    this.refreshOddEven(1);
    
    // scroll 설정 초기화
    this.prevScrollTop = 0;
    
    return;
};

// 시트의 외양 결정부
DataSheet.prototype.setColSpanInfo = function(colSpanInfo){
    // functionname : [DataSheet.setColSpanInfo]

	var arrColInfos = colSpanInfo.split(";");
	for (var i=0; i < arrColInfos.length;i++){
		if (arrColInfos[i].trim().length == 0) continue;
		var arrSpanInfos = arrColInfos[i].split(",");
		this.addColumn(parseInt(arrSpanInfos[0], 10),
				       parseInt(arrSpanInfos[1], 10),
				       parseInt(arrSpanInfos[2], 10),
				       parseInt(arrSpanInfos[3], 10));
	}
     // 처음에 시트데이터에 디폴트값을 채워 둔다
	this.setDefaultData();
};


DataSheet.prototype.addColumn = function(rowNum, colNum, rowSpan, colSpan){
    // functionname : [DataSheet.addColumn]
	
    var wColNumToInsert = this.columns.length; 
    this.columns[wColNumToInsert] = new EXOColumn(rowNum, colNum, rowSpan, colSpan);
    this.maxCols = this.columns.length - 1; 

    return this.columns[wColNumToInsert];
};

/** ***** 시트셀 데이타 일괄 등록 ******** */
DataSheet.prototype.setDefaultData = function(){
    // functionname : [DataSheet.setDefaultData]

	var arrData = [];
	for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
    var cells = [1];  // objectSeq
    	for (var colNum = 1; colNum <= this.maxCols; colNum++){
		    cells[colNum] =  this.columns[colNum].defaultValue;
    	}
    	arrData[rowNum - 1] = cells;
	}

	this.setData("", arrData);
};

DataSheet.prototype.setData = function(){
    // functionname : [DataSheet.setData]

  var args = Array.prototype.slice.call(arguments);
  var arrData = null;
  
  if (args.length == 1){
  	arrData = args[0];
  } else {
  	keyValue = args[0];
      arrData = args[1];
  }

  if (!arrData || arrData.length == 0) return;
    
    
    for (var i = 0; i < arrData.length;i++){
        var wRowNum = i + 1;
        this.rows[wRowNum] = new EXORow();
        this.rows[wRowNum].objectSeq = arrData[i][0];

        for (var j = 1; j < arrData[i].length;j++){
            var wColNum = j;
            var wCell = this.rows[wRowNum].cells[wColNum] = new EXOCell();
            /**@ 
            EXOCell 에 넣어 준다.
            (객체 생성)
            */
            // 칼럼의 디폴트값
            var wColumn = this.columns[wColNum];
            wCell.celltype      	 = wColumn.defaultCellType; 
            wCell.align         	 = wColumn.defaultHAlign; 
            wCell.valign        	 = wColumn.defaultVAlign; 
            wCell.checkcenter   	 = wColumn.defaultCheckCenter; 
            wCell.maxlength     	 = wColumn.defaultMaxLength; // 디자인 타임시 지정
            wCell.hidden       	     = wColumn.hidden;    // 디자인 타임시 지정
            wCell.nummax        	 = wColumn.defaultNumMax; 
            wCell.nummin        	 = wColumn.defaultNumMin; 
            wCell.decimalplaces 	 = wColumn.defaultDecimalPlaces; 
            wCell.format        	 = wColumn.defaultDisplayFormat; 
            wCell.formula       	 = wColumn.defaultFormula; 
            wCell.lockMode      	 = wColumn.defaultLockMode; 
            wCell.buttonImage1  	 = wColumn.defaultButtonImage1; 
            wCell.buttonImage2  	 = wColumn.defaultButtonImage2; 
            wCell.imageAlt  		 = wColumn.defaultImageAlt;
            wCell.negativeRed  		 = wColumn.defaultNegativeRed;
            wCell.percentSet  		 = wColumn.defaultPercentSet;
            wCell.percentDecimalNum  = wColumn.defaultPercentDecimalNum;
            wCell.cellMaskTypeValue  = wColumn.defaultCellMaskTypeValue;
            wCell.cellTime1224  	 = wColumn.defaultCellTime1224;
            wCell.typedateformat  	 = wColumn.defaultTypedateformat;
            wCell.cellColor  		 = wColumn.defaultCellColor;
            wCell.cellFontColor  	 = wColumn.defaultCellFontColor;
            wCell.cellTooltip  	     = wColumn.defaultCellTooltip;
            wCell.checkFormat 	     = wColumn.defaultCheckFormat;
            wCell.value              = "";
            wCell.value1			 = "";

            wCell.value = arrData[i][j];
        }
    }
    
    this.maxRows = arrData.length; /**@ 맥스 로우 지정*/
    
    this.resetScroll();
    
    return;
};

/** ***** 시트셀 환산 공통함수 ******** */
DataSheet.prototype.rowNumOf = function(rowNum, colNum, convGu){
    // functionname : [DataSheet.rowNumOf]

    var wReturn = 0;
    if (convGu == CONV_LOGICAL_SHEET){
        // wReturn = (rowNum - 1) * this.rowsPerDataRow + 1;
        wReturn = (rowNum - 1) * this.rowsPerDataRow + this.columns[colNum].sheetRow;
    
    } else if (convGu == CONV_LOGICAL_HARD){
        // wReturn = (rowNum - 1) * this.rowsPerDataRow + this.headRows ;
        wReturn = this.headRows + (rowNum - 1) * this.rowsPerDataRow + this.columns[colNum].sheetRow - 1 ;
    
    } else if (convGu == CONV_SHEET_LOGICAL){
        wReturn = Math.ceil(rowNum / this.rowsPerDataRow); 
    
    } else if (convGu == CONV_SHEET_HARD){
        wReturn = rowNum + this.headRows - 1;
    
    } else if (convGu == CONV_HARD_LOGICAL){
        wReturn = Math.ceil((rowNum - this.headRows + 1) / this.rowsPerDataRow); 
    
    } else if (convGu == CONV_HARD_SHEET){
        wReturn = rowNum - this.headRows + 1;
    }    
    return wReturn;
};

DataSheet.prototype.colNumOf = function(rowNum, colNum, convGu){
    // functionname : [DataSheet.colNumOf]

    var wReturn = 0;
    /** 논리적인 colNum 을 받아 해당 colNum의 "sheetCol"(현재바라보고 있는 실제 ColNum) 속성을 찾는다. **/
    if (convGu == CONV_LOGICAL_SHEET){
        wReturn = this.columns[colNum].sheetCol;
    }
    /** 논리적인 colNum 을 받아 물리적인 colNum 을 찾는다. **/
    else if (convGu == CONV_LOGICAL_HARD ){
        wReturn = this.columns[colNum].sheetCol + this.headCols - 1;
        
        var wSheetRow = this.columns[colNum].sheetRow;
        for (var wColNum = colNum - 1; wColNum >= 1; wColNum--){
            if (this.columns[wColNum + 1].sheetRow == wSheetRow){
                if (this.columns[wColNum].sheetRow == wSheetRow){
                    wReturn -= (this.columns[wColNum + 1].sheetCol - this.columns[wColNum].sheetCol - 1);
                } else if (this.columns[wColNum + 1].sheetRow > 1) {
                    wReturn -= (this.columns[wColNum + 1].sheetCol - 1);
                }
            }
        }
        // 두번째 줄부터는 줄번호가 RowSpan된상태이므로 한줄이 없다.
        if (wSheetRow > 1) --wReturn;
        // 우고정열 처리
        var wSheetCol = this.columns[colNum].sheetCol;
        var dataRow = (wSheetRow % this.rowsPerDataRow == 0? this.rowsPerDataRow: wSheetRow % this.rowsPerDataRow) + this.addHeaderRows;
        if (wSheetCol >= this.frozenColsRight[0] && this.frozenColsRight[0] > 0) wReturn -= this.frozenColsRight[dataRow];
        
        if(wReturn < 0) wReturn = 0;
    }
    /** 시트 colNum 을 받아서 논리적인 colNum 을 찾는다.**/
    else if (convGu == CONV_SHEET_LOGICAL){
        var wRowNum = (rowNum - 1) % this.rowsPerDataRow + 1;
        var wColNum = this.spanStartColNums[wRowNum][colNum];
        if(wColNum == 0){
        	for(var i=wRowNum; i>=1; i--){
        		var spanColNum = this.spanStartColNums[i][colNum];
        		if(spanColNum > 0){
        			wRowNum = (i % this.rowsPerDataRow == 0? this.rowsPerDataRow: i % this.rowsPerDataRow) + this.addHeaderRows;
        			wColNum = spanColNum;
        			break;
        		}
        	}
        }
        for (var i = 1; i <= this.maxCols; i++){
            if (this.columns[i].sheetRow == wRowNum && this.columns[i].sheetCol == wColNum) {
                wReturn = i; break;    
            }
        }
    }
    /** 시트 colNum 을 받아서 물리적인 colNum 을 찾는다. **/
    else if (convGu == CONV_SHEET_HARD){
    	var spanLength = 0;
    	var wRowNum = (rowNum - 1) % this.rowsPerDataRow + 1;
    	var spanColNum = this.spanStartColNums[wRowNum][colNum];
    	
        // span값 적용
    	wReturn =  spanColNum + this.headCols - 1;
    	
    	// 우고정열 일때 우고정열 시작점 시트컬럼을 빼준다.
        if (colNum >= this.frozenColsRight[0] && this.frozenColsRight[0] > 0) {
        	wReturn -= this.frozenColsRight[0];
        	spanLength = this.frozenColsRight[0] - 1;
        }
        else{
        	// 두번째 줄부터는 줄번호가 RowSpan된상태이므로 한줄이 없다.
        	if (wRowNum > 1) --wReturn;
        }
        
    	// rowspan 값 적용
    	var rowSpan = 0;
    	for(var i=colNum; i>spanLength; i--){
    		if(this.spanStartColNums[wRowNum][i] == 0 || this.spanStartColNums[wRowNum][i - 1] == this.spanStartColNums[wRowNum][i]) rowSpan += 1;
    	}
    	wReturn -= rowSpan;
    	
    }
    /** 물리적인 colNum 을 받아서 논리적인 colNum 을 찾는다.**/
    else if (convGu == CONV_HARD_LOGICAL ){
        var wSheetRowNum = this.rowNumOf(rowNum, colNum, CONV_HARD_SHEET);
            wSheetRowNum = (wSheetRowNum - 1) % this.rowsPerDataRow + 1;
        var wSheetColNum = this.colNumOf(rowNum, colNum, CONV_HARD_SHEET);
        for (var i = 1; i <= this.maxCols; i++){ 
           if (this.columns[i].sheetRow == wSheetRowNum && this.columns[i].sheetCol == wSheetColNum) {
                wReturn = i; 
                break;    
            }
        }
    } 
    /** 물리적인 colNum 을 받아 시트 colNum 을 찾는다.**/
    /** 우고정과 우고정이 아닌테이블 모두 colNum이 0 부터 시작하므로 CONV_HARD_SHEET 만 예외적으로 우고정의 물리적인 번호를 0부터가 아닌 기존 테이블 HardNum 순서로 넣는다**/
    else if (convGu == CONV_HARD_SHEET){
    	wReturn = colNum - this.headCols + 1;
        // 두번째 줄부터는 줄번호가 RowSpan된 상태이므로 한줄이 없다.
//        var wSheetRowNum = rowNum % this.rowsPerDataRow + 1;
        var wSheetRowNum = rowNum - this.addHeaderRows - this.rowsPerDataRow + 1;
        wSheetRowNum = wSheetRowNum % this.rowsPerDataRow;
        if(wSheetRowNum == 0) wSheetRowNum = this.rowsPerDataRow;
        if (wSheetRowNum > 1) ++wReturn;
        
        wReturn += this.colSpanCells[wSheetRowNum][colNum];
    }
    
    /**리턴값 체크(찾을 수 없는 값일땐 "0" 을 리턴한다.**/
    if(wReturn < 0 || !isNumeric(wReturn)) wReturn = 0;
    
    return wReturn;
};

// Logical 좌표를 받아 물리적인 셀을 리턴한다
DataSheet.prototype.cellOf = function(rowNum, colNum){
    // functionname : [DataSheet.cellOf]

    var wSheetRow = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
    var wSheetCol = this.colNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
    var wHardRow  = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_HARD);
    var wHardCol  = this.colNumOf(rowNum, colNum, CONV_LOGICAL_HARD);
    var isRight = this.frozenColsRight[0]>0? this.frozenColsRight[0]: 9999999999;
    var wCell = null;
    
    var wTable = null;
    if (wSheetRow <= this.frozenRows && wSheetCol <= this.frozenCols && this.leftColHeadTable != null){
        wTable = this.leftColHeadTable;
    } else if (wSheetRow > this.frozenRows && wSheetCol <= this.frozenCols){
        wTable = this.leftRowTable;
    } else if (wSheetRow <= this.frozenRows && wSheetCol > this.frozenCols && wSheetCol < isRight){
        wTable = this.colHeadTable;
    } else if (wSheetRow <= this.frozenRows && wSheetCol >= isRight){
    	wTable = this.rightColHeadTable;
    	rightCell = true;
    } else if (wSheetRow > this.frozenRows && wSheetCol >= isRight){
        wTable = this.rightRowTable;
    } else{
        wTable = this.dataTable;
    } 
    
    wCell = wTable.tBodies[0].rows[wHardRow].cells[wHardCol];
    
    return wCell;
};

// 하단셀의 Logical 좌표를 받아 물리적인 셀을 리턴한다
DataSheet.prototype.bottomCellOf = function(rowNum, colNum){
	var wSheetCol = this.colNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
	var wHardCol  = this.colNumOf(rowNum, colNum, CONV_LOGICAL_HARD);
	var wHardRow  = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_HARD) - this.addHeaderRows - this.rowsPerDataRow;
	
	var isRight = this.frozenColsRight[0]>0? this.frozenColsRight[0]: 9999999999;
	var wCell = null;
	
	var wTable = null;
	if (wSheetCol <= this.frozenCols){
		wTable = this.bottomLeftTable;
	} else if (wSheetCol >= isRight){
		wTable = this.bottomRightTable;
		rightCell = true;
	} else{
		wTable = this.bottomTable;
	} 
	
	wCell = wTable.tBodies[0].rows[wHardRow].cells[wHardCol];
	
	return wCell;
};



// 시트동작 메서드 선언부 (Logical)
DataSheet.prototype.setBlock = function(rowNum, colNum, rowNum2, colNum2){
    // functionname : [DataSheet.setBlock]

    if (colNum2 == undefined) colNum2 = colNum;
    if (rowNum2 == undefined) rowNum2 = rowNum;

    if (colNum == -1) {colNum = 1; colNum2 = this.maxCols;}
    if (rowNum == -1) {rowNum = 1; rowNum2 = this.maxRows;}
    
    this.col = colNum; this.col2 = colNum2;
    this.row = rowNum; this.row2 = rowNum2;
    this.blockMode = true;
    
    return;
};

DataSheet.prototype.releaseBlock = function(){
    // functionname : [DataSheet.releaseBlock]

    this.col = -9999; this.col2 = -9999;
    this.row = -9999; this.row2 = -9999;
    
    this.blockMode = false;
};

/**@
컬럼 수 조정
*/
DataSheet.prototype.setMaxCols = function(colCount){
    // functionname : [DataSheet.setMaxCols]

    // rowsPerDataRow = 1 일때만 작동한다
    if (this.rowsPerDataRow > 1) return;
    
    // 우측 고정열이 있을 경우는 컬럼수 조작 불가
    if (this.frozenColsRight[0] > 0) return;
    
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	wTablesLength += 1;
    }
    
    var wArrStrCellLen = this.tagObject.getAttribute("cellsize").split(";");
	
    // 산식 계산의 과부하를 줄인다
    this.autoCalc = false;
    
    if (this.maxCols > colCount){
        // 데이터셋 조절
        for (var i = this.maxCols; i > colCount; i--) {
            this.columns[i] = null;
            this.columns.pop();
        }
        
        // 테이블 조절
    	for (var i = 0; i < wTablesLength; i++){
    		if(/left|right/i.test(wTables[i].getAttribute("name"))) continue;
    		
    		var wWidth = parseIntSize(wTables[i].style.width);
            for (var j = wArrStrCellLen.length - 2; j > colCount; j--){
                wWidth -= (parseInt(wArrStrCellLen[j]) + 1);
            }
            
            wTables[i].style.width = wWidth + "px";
            
            var wRows = wTables[i].tBodies[0].rows;
            for(var wRowNum = 0; wRowNum < wRows.length; wRowNum++){
                for (var wColNum = this.maxCols; wColNum > colCount; wColNum--)
                    wRows[wRowNum].deleteCell(wColNum);
            }
    	}
    	
    	// 좌측 테이블 조절
    	for (var i = 1; i < wTablesLength; i++){
    	    if (colCount > this.frozenCols) break;
    	    if(!/left/i.test(wTables[i].getAttribute("name"))) continue;
    	    
            var wWidth = parseIntSize(wTables[i].style.width);
            for (var j = this.frozenCols; j > colCount; j--){
                wWidth -= (parseInt(wArrStrCellLen[j]) + 1);
            }
            
            wTables[i].style.width = wWidth+ "px";
            
            var wRows = wTables[i].tBodies[0].rows;
            for(var wRowNum = 0; wRowNum < wRows.length; wRowNum++){
                for (wColNum = this.frozenCols; wColNum > colCount; wColNum--)
                    wRows[wRowNum].deleteCell(wColNum);
            }
    	}
    	
    	
        // 셀크기 정보조정
        for (var wColNum = this.maxCols; wColNum > colCount; wColNum--){
            wArrStrCellLen.pop();
        }
        this.tagObject.setAttribute("cellsize", wArrStrCellLen.join(";"));
        
    } else if (this.maxCols < colCount){
        // 데이터셋 조절
        for (var wColNum = this.maxCols + 1; wColNum <= colCount; wColNum++) {
            this.columns[wColNum] = new EXOColumn(1, wColNum, 1, 1);
        }
        for (var wRowNum = 1; wRowNum < this.rows.length; wRowNum++){
            for (var wColNum = this.maxCols + 1; wColNum <= colCount; wColNum++){
                var wCell = this.rows[wRowNum].cells[wColNum] = new EXOCell();
                
                // 칼럼의 디폴트값
                var wColumn = this.columns[wColNum];
                wCell.celltype      	 = wColumn.defaultCellType; 
                wCell.align         	 = wColumn.defaultHAlign; 
                wCell.valign        	 = wColumn.defaultVAlign; 
                wCell.checkcenter   	 = wColumn.defaultCheckCenter; 
                wCell.maxlength     	 = wColumn.defaultMaxLength; // 디자인 타임시 지정
                wCell.hidden       	     = wColumn.hidden;    // 디자인 타임시 지정
                wCell.nummax        	 = wColumn.defaultNumMax; 
                wCell.nummin        	 = wColumn.defaultNumMin; 
                wCell.decimalplaces 	 = wColumn.defaultDecimalPlaces; 
                wCell.format        	 = wColumn.defaultDisplayFormat; 
                wCell.formula       	 = wColumn.defaultFormula; 
                wCell.lockMode      	 = wColumn.defaultLockMode; 
                wCell.buttonImage1  	 = wColumn.defaultButtonImage1; 
                wCell.buttonImage2  	 = wColumn.defaultButtonImage2; 
                wCell.imageAlt  		 = wColumn.defaultImageAlt;
                wCell.negativeRed  		 = wColumn.defaultNegativeRed;
                wCell.percentSet  		 = wColumn.defaultPercentSet;
                wCell.percentDecimalNum  = wColumn.defaultPercentDecimalNum;
                wCell.cellMaskTypeValue  = wColumn.defaultCellMaskTypeValue;
                wCell.cellTime1224 		 = wColumn.defaultCellTime1224;
                wCell.typedateformat     = wColumn.defaultTypedateformat;
                wCell.cellColor  		 = wColumn.defaultCellColor;
                wCell.cellFontColor  	 = wColumn.defaultCellFontColor;    
                wCell.cellTooltip  	     = wColumn.defaultCellTooltip;    
                wCell.checkFormat 	     = wColumn.defaultCheckFormat;
                wCell.value              = "";
                wCell.value1			 = "";
                
            }
        }
        
        var wRows = wTables[0].tBodies[0].rows;
        for(var wRowNum = 0; wRowNum < wRows.length; wRowNum++){
            for (var wColNum = this.maxCols + 1; wColNum <= colCount; wColNum++){
                var wCell = wRows[wRowNum].insertCell();
                wCell.innerHTML = " ";
                if (wRowNum == 0){
                    wCell.style.width = 50+ "px";
                    wTables[0].style.width = parseIntSize(wTables[0].style.width) + 50 + 1;
                }
                
            }
        }
        
        wRows = wTables[1].tBodies[0].rows;
        for(var wRowNum = 0; wRowNum < wRows.length; wRowNum++){
            for (var wColNum = this.maxCols + 1; wColNum <= colCount; wColNum++){
                var wCell = wRows[wRowNum].insertCell();
                
                if (wRowNum < this.headRows) {
                    // wCell.className = "ColHead"; /// ???
                    wCell.className = wRows[0].cells[0].className;
                    wCell.style.width = 50+ "px";
                }
                wCell.innerHTML = (wRowNum == this.headRows - 1 ? wColNum : " ");
                if (wRowNum == 0)
                    wTables[1].style.width = (parseIntSize(wTables[1].style.width) + 50 + 1) + "px";
            }
        }
        
        // 테이블과 셀크기 정보조정
        for (var wColNum = this.maxCols + 1; wColNum <= colCount; wColNum++){
            var wHardColNum = this.colNumOf(1, wColNum, CONV_LOGICAL_HARD);
            wArrStrCellLen[wHardColNum] = "50";
        }
        this.tagObject.setAttribute("cellsize", wArrStrCellLen.join(";"));
        
    }
    this.maxCols = colCount;
    this.PhysicalMaxCols = colCount;
    
    // 칼럼타이틀을 조정한다
//        this.renumCols();
    if(colCount < this.frozenCols) this.frozenCols = colCount;
    
    // 산식을 정비한다
    this.autoCalc = true;
    this.refreshFormulaRefs();

    
    this.resetScroll();
    
    // Odd-Even Mode 설정
    this.refreshOddEven(1);
    
    return;
};

// 선택한 줄 뒤로 줄이 추가된다
// pAtRowNum가 생략된다면 현재 마지막에 추가된다
// objectSeq는 데이터 순번으로 선택항목이다
DataSheet.prototype.addRow = function(atRowNum, noDecoration){
    // functionname : [DataSheet.addRow]
    noDecoration = (noDecoration == undefined ? false : true);
    
    // 1. 작업환경설정 ----------------------------------------------------
    // Logical한 삽입위치
    var wAtRowNum = 0;
    if (this.maxRows != 0)
        wAtRowNum = (atRowNum ? atRowNum : this.maxRows);
    if (wAtRowNum < 0) return -1;   // 데이터 줄수가 있고 현재 선택된 줄이 없으면 스킵

    // Physical한 삽입위치
    var wHardRowNumAt = this.rowNumOf(wAtRowNum, 1, CONV_LOGICAL_HARD);

    // 2. DataRow 추가 ----------------------------------------------------
    for (var wRowNum = this.maxRows; wRowNum > wAtRowNum; wRowNum--){
        this.rows[wRowNum + 1] = this.rows[wRowNum];
    }

    var wDataRow = this.rows[wAtRowNum + 1] = new EXORow();
    wDataRow.hardRowCount = this.rowsPerDataRow; 
    wDataRow.hardRowNum = wHardRowNumAt + 1;
    wDataRow.hardRowNum2 = wDataRow.hardRowNum + this.rowsPerDataRow - 1;

    for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
        var wColumn = this.columns[wColNum];
        var wDataCell = wDataRow.cells[wColNum] = new EXOCell();
        
        wDataCell.celltype      	 = wColumn.defaultCellType; 
        wDataCell.align         	 = wColumn.defaultHAlign; 
        wDataCell.valign        	 = wColumn.defaultVAlign; 
        wDataCell.checkcenter   	 = wColumn.defaultCheckCenter; 
        wDataCell.maxlength     	 = wColumn.defaultMaxLength; // 디자인 타임시 지정
        wDataCell.hidden       	     = wColumn.hidden;    // 디자인 타임시 지정
        wDataCell.nummax        	 = wColumn.defaultNumMax; 
        wDataCell.nummin        	 = wColumn.defaultNumMin; 
        wDataCell.decimalplaces 	 = wColumn.defaultDecimalPlaces; 
        wDataCell.format        	 = wColumn.defaultDisplayFormat; 
        wDataCell.formula       	 = wColumn.defaultFormula; 
        wDataCell.lockMode      	 = wColumn.defaultLockMode; 
        wDataCell.buttonImage1  	 = wColumn.defaultButtonImage1; 
        wDataCell.buttonImage2  	 = wColumn.defaultButtonImage2; 
        wDataCell.imageAlt  		 = wColumn.defaultImageAlt;
        wDataCell.negativeRed  		 = wColumn.defaultNegativeRed;
        wDataCell.percentSet  		 = wColumn.defaultPercentSet;
        wDataCell.percentDecimalNum  = wColumn.defaultPercentDecimalNum;
        wDataCell.cellMaskTypeValue  = wColumn.defaultCellMaskTypeValue;
        wDataCell.cellTime1224  	 = wColumn.defaultCellTime1224;
        wDataCell.typedateformat  	 = wColumn.defaultTypedateformat;
        wDataCell.cellColor  		 = wColumn.defaultCellColor;
        wDataCell.cellFontColor  	 = wColumn.defaultCellFontColor;
        wDataCell.cellTooltip  	 	 = wColumn.defaultCellTooltip;
        wDataCell.checkFormat 	     = wColumn.defaultCheckFormat;
        
        wDataCell.value         	 = wColumn.defaultValue; 
        wDataCell.value1        	 = ""; 
    }
    
    // 3. physical Row 추가 - 시트별 줄삽입 -------------------------------
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }

    for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){

        wTable = wTables[wTableNum];
        // 고정줄수의 제약체크
//            var wSheetRow = this.rowNumOf(wAtRowNum + 1, 1, CONV_LOGICAL_SHEET);
        var wTableName = wTables[wTableNum].getAttribute("name");
        if (/colHead/i.test(wTableName)){
            if (wTable.tBodies[0].rows.length - this.headRows  >= this.frozenRows) continue;
        }
        for (var i = 1; i <= this.rowsPerDataRow; i++){
            var wLastRowHardNum = wTable.tBodies[0].rows.length - 1;
            var wTableRow = document.createElement("TR");
            var parent = wTable.tBodies[0].rows[wLastRowHardNum];
            
            if (parent.insertAdjacentElement){
            	parent.insertAdjacentElement('afterEnd', wTableRow);
     		}
     		else if (parent.appendChild) {
     			// wTable.tBodies[0].appendChild(wTableRow); // firefox 에서
			// insertAdjacentElement 함수에서는 <TR> 태그가 삽입이 안되는 문제가 있어
			// appendChild 로 해결하였음
     			insertAdjacentElement('afterEnd' ,parent, wTableRow);
     		} else {
     			// 위 방법이 다 안될때
     			parent.innerHTML = "<TR></TR>" + parent.innerHTML;
   		}

            // 20110411 firfox,chrome작동안해 변경함.
            // wTableRow.haveData = "1";
            // wTableRow.height=this.rowHeights[i];
            wTableRow.setAttribute("height", this.rowHeights[i]);
            wTableRow.setAttribute("class", "data_tr_" + i);
            wTableRow.setAttribute("haveData","1");
            wTableRow.setAttribute("height", this.rowHeights[i]);
            
            // Row Head 셀의 설정
            var CellIndex = 0;
            for (wColNum = 0; wColNum < this.headCols; wColNum++){
            	if (/right/i.test(wTableName)) break;
                if (wColNum == this.headCols - 1){
                    if (i == 1){
                        wCell = wTableRow.insertCell(CellIndex++);
                        wCell.className = "RowHead";
                        if (this.hideRowHeader) {
                        	wCell.style.display = "none";
                        }
                        wCell.innerHTML=" ";
                        wCell.rowSpan = this.rowsPerDataRow;
                    }
                } else {
                    wCell = wTableRow.insertCell(CellIndex++);
                    wCell.className = "RowHead";
                    if (this.hideRowHeader) {
                    	wCell.style.display = "none";
                    }
                    wCell.innerHTML=" ";
                }
            }

            // 본문셀의 설정
            var rightTableGu = false;
            for (wColNum = 1; wColNum <= this.maxCols; wColNum++){
                // 고정열수의 제약 체크
                var wSheetCol =  this.colNumOf(1, wColNum, CONV_LOGICAL_SHEET);
                if (/left/i.test(wTableName)){
                    if (wSheetCol > this.frozenCols) continue;
                }
                else
                if (/right/i.test(wTableName)){
                    if (wSheetCol < this.frozenColsRight[0]) continue;
                    if (!rightTableGu) {
                    	rightTableGu = true;
                    }
                }
                // 자기줄번호에 해당하는 셀들만 만든다
                var wColumn = this.columns[wColNum];
                if (wColumn.sheetRow != i) continue;
                
                wCell = wTableRow.insertCell(CellIndex++);
                wCell.rowSpan = wColumn.sheetRowSpan;
                wCell.colSpan = wColumn.sheetColSpan;
                
                if (wColumn.hidden) {
                	wCell.style.display = "none";
                	wCell.style.width = "0px";
                }
                
                wCell.innerHTML=" ";
            }
        }
    }
    
    // 시트 줄수값 갱신
    this.maxRows++;
    this.PhysicalMaxRows++;
    
    /**@
    컬럼의 줄 번호 등 갱신
    false 일때는 데이터 만뿌린다
    기본값으로 true
    */
    if (!noDecoration){
    	// 줄번호를 다시 매긴다
    	if (this.displayRowNum) this.renumRows();
    	
        // 산식등에 의한 데이터를 표시한다
        this.setBlock(wAtRowNum + 1, 1, this.maxRows, this.maxCols);
        this.displayBlock();
        
        // 산식재정비
        if (this.autoCalc) this.recalcurateRow(wAtRowNum);
        
    }
    
    // 이벤트단계 : clear 이벤트를 호출하고 거기서는 연결된 객체의 시퀀스를 1로한다
    if (this.inputMode == SHEETMODE_SETCELL){
        if (this.hasAddRowEvent) {
        	var oldRowNum = this.currentRow;
        	this.currentRow = wAtRowNum + 1; // AddRow 이벤트에서 연결된 산식이 있는 경우
										// 제대로 시트를 갱신해주기 위하여
        	
        	this.fncAddRowEvent(wAtRowNum + 1);
        	
        	this.currentRow = oldRowNum;    // 줄번호를 원래대로 해놔야 rowChange 이벤트를
										// 처리할 수 있다.
        }
        
        // dataset 현재줄 추가 기능 
        if (typeof(ControlBase.prototype._UpdateDatasetAddRow) != "undefined"){
        	this._UpdateDatasetAddRow(rowNum);
        }
//
// var checkEvent = false;
// try {
// if (eval(this.controlId + "_onaddrow")) checkEvent = true;
// } catch(e){}
//            
// if (checkEvent){
// eval(this.controlId + "_onaddrow(" + (wAtRowNum + 1) + ");");
// }
    }

    if (!noDecoration){
        // 스크롤 설정
        this.resetScroll();

        // 추가된 위치로 줄포커스 이동
    	/*
	 * this.displayCell(this.currentRow, this.currentCol)
	 * 
	 * var wOldCell = this.cellOf(this.currentRow, this.currentCol);
	 * wOldCell.className = "";
	 * 
	 * if (this.currentRow != 0 && this.currentCol != 0){
	 * this.displayNormalCell(this.currentRow, this.currentCol); }
	 */
        
        if (this.inputMode == SHEETMODE_SETCELL){
	        // this.setCurrentRow(wAtRowNum + 1);
	        // this.setCurrentCol(1);
        }
        // Odd-Even Mode 설정
        this.refreshOddEven(wAtRowNum);
    	
    }

    // 추가된 줄로 스크롤 <-- search Fill 이나 줄추가시 만 작동하게 소스 위치 이동
    // this.moveTo(wAtRowNum + 1, 1);
    
    // 추가된 줄번호를 리턴한다
    return wAtRowNum + 1;
};

// 지정줄 삭제 (atRowNum 위치의 줄을 삭제한다)
DataSheet.prototype.delRow = function(atRowNum, noDecoration){
    // functionname : [DataSheet.delRow]

    if (this.maxRows == 0) return; // 이론상 MaxRows 0은 있을 수없다.
    
    // 이벤트단계 : 객체.줄삭제
  if (this.hasDelRowEvent) {
  	this.fncDelRowEvent(atRowNum);
  }
    
    // 한줄인 경우 비우기만한다
    if (this.maxRows == 1) {
    	this.clearRow(1);
        if (this.hasAddRowEvent) {
        	this.fncAddRowEvent(1);
        }
    	// 줄번호 변경메시지 객체의 줄번호가 다시 들어간다
    	if (this.sheetType == SHEETTYPE_LISTSHEET){
            if (this.hasRowChangeEvent && !this.inClearMode) this.fncRowChangeEvent(0, 1);
    	} else {
            if (this.hasRowChangeEvent && !this.inClearMode) this.fncRowChangeEvent(0, 1, this.rows[1].objectSeq);
    	}

    	return;
    }
    
    // Logical한 삭제위치
    var wAtRowNum = (atRowNum ? atRowNum : this.currentRow);
    if (wAtRowNum < 1) return;   // 데이터 줄수가 있고 현재 선택된 줄이 없으면 스킵
    
    // Physical한 삭제위치
    var wHardRowNumAt = this.rowNumOf(wAtRowNum, 1, CONV_LOGICAL_HARD);
    var wHardRowNumAt2 = wHardRowNumAt + this.rowsPerDataRow - 1;
    
    // 고정줄이내의 줄삭제이면 추가 줄조정 작업이 필요하다
    var wSheetRow = this.rowNumOf(wAtRowNum, 1, CONV_LOGICAL_SHEET);
    var wSheetMaxRow = this.maxRows * this.rowsPerDataRow;
    var NeedAdjusting = (wSheetRow <= this.frozenRows && wSheetMaxRow > this.frozenRows);

    // DataRow 당기기
    for (var wRowNum = wAtRowNum; wRowNum < this.maxRows; wRowNum++){
        this.rows[wRowNum] = this.rows[wRowNum + 1];
    }
    this.rows.pop();

	// Physical한 삭제 - 시트별 줄삭제
    // 고정줄수 이하로 전체줄수가 줄지않는한 고정테이블과 칼럼테이블은 줄을 삭제하지 않는다
    // 대신 다시 리프레시한다
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }
    for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){
        var wTable = wTables[wTableNum];
        var wTableName = wTables[wTableNum].getAttribute("name");
        if (/colHead/i.test(wTableName)){
            // 지우려는 줄이 고정줄이후거나 아니더라도 전체줄수가 고정줄수보다 크면 스킵
            var wSheetRow = this.rowNumOf(wAtRowNum, 1, CONV_LOGICAL_SHEET);
            var wSheetMaxRow = this.maxRows * this.rowsPerDataRow;
            if (wSheetRow > this.frozenRows || wSheetMaxRow > this.frozenRows){
                continue;
            }
        }
        
        // 클릭한 줄을 지우게 되는 경우 클릭줄 정보를 지운다
        if (this.clickedTR == wTable.tBodies[0].rows[wHardRowNumAt]) 
            this.clickedTR = null;
        
        if (this.moveoverTR == wTable.tBodies[0].rows[wHardRowNumAt]) 
        	this.moveoverTR = null;

        // physical Row 삭제한다
        for (var wHardRowNum = wHardRowNumAt2; wHardRowNum >= wHardRowNumAt; wHardRowNum--){
            wTable.deleteRow(wHardRowNum);
        }
    }
    
    if (NeedAdjusting){
        var wFrozenRowNum = this.rowNumOf(this.frozenRows, 1, CONV_SHEET_LOGICAL);
        this.setBlock(wAtRowNum, 1, wFrozenRowNum, this.maxCols);
        this.displayBlock();
        this.releaseBlock();
    }
    
    // dataset 현재줄 삭제 기능 
    if (typeof(ControlBase.prototype._UpdateDatasetDelRow) != "undefined"){
    	this._UpdateDatasetDelRow(rowNum);
    }

    this.maxRows--;

    if (!noDecoration){

        if (this.currentRow > this.maxRows) {
        	this.setCurrentRow(this.maxRows);
        }
        
        // 줄번호 갱신
        if (this.displayRowNum) this.renumRows();
        
        // 산식재정비
        if (this.autoCalc && wAtRowNum <= this.maxRows) this.recalcurateRow(wAtRowNum);
        
        // 스크롤 설정
        this.hasTreeCell? this.refreshTreeCell(): this.resetScroll();
        
        // Odd-Even Mode 설정
        this.refreshOddEven(wAtRowNum);
    }
    
  // 삭제후 객체 포커스 이동
  if (wAtRowNum > this.maxRows) wAtRowNum = this.maxRows; // 마지막줄을 삭제했으면
														// 현재의 마지막줄로 이동
  
  if (this.sheetType == SHEETTYPE_LISTSHEET){
         if (this.hasRowChangeEvent && !this.inClearMode) this.fncRowChangeEvent(wAtRowNum, wAtRowNum);
  } else {
         if (this.hasRowChangeEvent && !this.inClearMode) this.fncRowChangeEvent(wAtRowNum, wAtRowNum, this.rows[wAtRowNum].objectSeq);
  } 
 
    return;
};

// 참고: 최대줄수는 절대로 고정 줄수보다 작을 수 없다
DataSheet.prototype.setMaxRows = function(rows){
    // functionname : [DataSheet.setMaxRows]

    this.autoCalc = false;
    if (this.maxRows > rows){
        for (var wRowNum = this.maxRows; wRowNum > rows; wRowNum--){
            this.delRow(wRowNum);
        }
        
    } else if (this.maxRows < rows){
    	var rowFrom = this.maxRows;
    	var rowTo = rows;
        for (var wRowNum = this.maxRows; wRowNum < rows; wRowNum++){
            this.addRow(this.maxRows, true);

            // 산식재정비
            if (this.autoCalc) this.recalcurateRow(wAtRowNum);
        }
        
    	// 줄번호를 다시 매긴다
    	if (this.displayRowNum) this.renumRows();
    	
        // 산식등에 의한 데이터를 표시한다
        this.setBlock(rowFrom, 1, rowTo, this.maxCols);
        this.displayBlock();
        
        // Odd-Even Mode 설정
        this.refreshOddEven(rowFrom);
        
    }
    
    // 산식정비
    this.autoCalc = true;
    this.refreshFormulaRefs();
    
    // 스크롤 설정
    this.resetScroll();
    
    
	
    return;
};

// 원하는 숫자만큼의 줄을 추가 후, 데이터를 추가할 수 있는 첫줄번호를 리턴
DataSheet.prototype.addRows = function(rows){
    // functionname : [DataSheet.addRows]

    var wRow = this.maxRows;
    while (wRow > 0 && this.isEmptyRow(wRow)) wRow--;
    this.setMaxRows(wRow + rows);
    

    return ++wRow;
};


/**@
삭제된 셀타입 제거
this.columns 컬럼 정보
*/
DataSheet.prototype.setCellType = function(cellType){
    // functionname : [DataSheet.setCellType]

    if (!this.blockMode) return;

    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultCellType = cellType; 
            if (cellType == CELLTYPE_EDIT){
            	this.columns[wColNum].defaultValue = "";
            } else if (cellType == CELLTYPE_NUMBER){
            	this.columns[wColNum].defaultValue = "0";
            }else if (cellType == CELLTYPE_PERCENT){
            	this.columns[wColNum].defaultValue = "0";
            } else if (cellType == CELLTYPE_INTEGER){
            	this.columns[wColNum].defaultValue = "0";
            } else if (cellType == CELLTYPE_BUTTON){
            	this.columns[wColNum].defaultValue = "0";
            } else if (cellType == CELLTYPE_PICTURE){
            	this.columns[wColNum].defaultValue = "";
            } else if (cellType == CELLTYPE_COMBOBOX){
            	this.columns[wColNum].defaultValue = "-1";
            } else if (cellType == CELLTYPE_CHECKBOX){
            	this.columns[wColNum].defaultValue = "0";
            } else if (cellType == CELLTYPE_MASK){
            	this.columns[wColNum].defaultValue = "";
            } else if (cellType == CELLTYPE_TIME){
            	this.columns[wColNum].defaultValue = "";
            } else if (cellType == CELLTYPE_DATE){
            	this.columns[wColNum].defaultValue = "";
            }
        }
    }
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].celltype = cellType;
          if (cellType == CELLTYPE_EDIT){
        	  this.rows[wRowNum].cells[wColNum].value = "";
          } else if (cellType == CELLTYPE_NUMBER){
        	  this.rows[wRowNum].cells[wColNum].value = "0";
          } else if (cellType == CELLTYPE_PERCENT){
        	  this.rows[wRowNum].cells[wColNum].value = "0";
          } else if (cellType == CELLTYPE_INTEGER){
        	  this.rows[wRowNum].cells[wColNum].value = "0";
          } else if (cellType == CELLTYPE_BUTTON){
        	  this.rows[wRowNum].cells[wColNum].value = "0";
          } else if (cellType == CELLTYPE_PICTURE){
        	  this.rows[wRowNum].cells[wColNum].value = "";
          } else if (cellType == CELLTYPE_COMBOBOX){
        	  this.rows[wRowNum].cells[wColNum].value = "-1";
          } else if (cellType == CELLTYPE_CHECKBOX){
        	  this.rows[wRowNum].cells[wColNum].value = "0";
          } else if (cellType == CELLTYPE_MASK){
          	this.columns[wColNum].defaultValue = "";
          } else if (cellType == CELLTYPE_TIME){
          	this.columns[wColNum].defaultValue = "";
          } else if (cellType == CELLTYPE_DATE){
          	this.columns[wColNum].defaultValue = "";
          }
      }
    }
    this.displayBlock();

    return;
};

DataSheet.prototype.setTypeHAlign = function(align){
    // functionname : [DataSheet.setTypeHAlign]

    if (!this.blockMode) return;
    
    var wValue = align;
    if (align == 0 || parseInt(align) == 0)      {wValue = "left";} 
    else if (align == 1 || parseInt(align) == 1) {wValue = "right";} 
    else if (align == 2 || parseInt(align) == 2) {wValue = "center";}
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultHAlign        = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].align = wValue;
      }
    }
//        this.displayBlock();

    return;
};

DataSheet.prototype.setTypeVAlign = function(align){
    // functionname : [DataSheet.setTypeVAlign]

    if (!this.blockMode) return;
    
    var wValue = align;
    if (align == 0)      { wValue = "middle";} 
    else if (align == 1) { wValue = "baseline";} 
    else if (align == 2) { wValue = "bottom";} 
    else if (align == 3) { wValue = "top";}
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultVAlign = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].valign = wValue;
      }
    }
    this.displayBlock();

    return;
};

/**@
이지메이커 메뉴에 설정하는 곳 없음
추가
*/
DataSheet.prototype.setTypeCheckCenter = function(align){
    // functionname : [DataSheet.setTypeVAlign]

    if (!this.blockMode)return;
    
    var wValue = (align == true ? "center" : "left");
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultHAlign = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].align = wValue;
      }
    }
    this.displayBlock();
    return;
};

/**@
글자수
*/
DataSheet.prototype.setTypeMaxLength = function(length){
	return;
};

DataSheet.prototype.setTypeNumMax = function(value){
    // functionname : [DataSheet.setTypeNumMax]

    if (!this.blockMode)return;
    
    var wValue = 0;
    if (typeof(value) == "String") {
        wValue = parseInt(1 * value, 10);
    } else {
        wValue = value;
    }
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultNumMax        = wValue;        
        }
    }      
   for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].nummax = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeNumMin = function(value){
    // functionname : [DataSheet.setTypeNumMin]

    if (!this.blockMode)return;
    var wValue = 0;
    if (typeof(value) == "String") {
        wValue = parseInt(1 * value, 10);
    } else {
        wValue = value;
    }
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultNumMin        = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].nummin = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeButtonImage = function(value1, value2){
    // functionname : [DataSheet.setTypeButtonImage]

	if (!this.blockMode)return;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultButtonImage1 = value1;        
            this.columns[wColNum].defaultButtonImage2 = value2;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].buttonImage1 = value1;
          this.rows[wRowNum].cells[wColNum].buttonImage2 = value2;
      }
    }
    
    this.displayBlock();

    return;
};

// 셀의 스타일을 준다
// 사용방법 : wSheet.setTypeStyle({"text-align":"left", "font": "normal normal
// normal 12pt 굴림,Courier"});
// 만들어진 스타일을 지우려면 : wSheet.setTypeStyle({"text-align":""});
DataSheet.prototype.setTypeStyle = function(styleJSON){
    // functionname : [DataSheet.setTypeStyle]

    if (!this.blockMode) return;

    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break; 

          var wCell = this.cellOf(wRowNum, wColNum);
          var styleString = "";
          if (wCell.style.cssText){
        	  styleString = wCell.style.cssText;  
          } else {
        	  styleString = wCell.getAttribute("style");  
          }
          
          var arrStyleItems = (styleString == null ? [] : styleString.split(";"));
          var arrStyles = [];
          
          for (var i = 0; i < arrStyleItems.length; i++){
              var styleItem = ("" + arrStyleItems[i]).trim();
              if (styleItem.length == 0) continue;
              
              var arrInfos = styleItem.split(":");
              var itemStyleName  = ("" + arrInfos[0]).trim();
              var itemStyleValue = ("" + arrInfos[1]).trim();
              
              arrStyles[i] = [itemStyleName, itemStyleValue];
          }


          styleString = "";
          
          for (var wKey in styleJSON){
	         if (styleJSON[wKey] instanceof Function) continue;
             var styleName  = wKey;
             var styleValue = styleJSON[wKey];
             
             var found = false;
           for (var j = 0; j < arrStyles.length; j++){
                 var itemStyleName  = arrStyles[j][0];
                 //var itemStyleValue = arrStyles[j][1];
                 
                 if (styleName == itemStyleName) {
                     arrStyles[j] = [styleName, styleValue];

                     found  = true; break;
                 }
           }
           
           if (!found){
               var newIndex = arrStyles.length;
               arrStyles[newIndex ] = [styleName, styleValue];
           }
          }
          
          for (var i = 0; i < arrStyles.length; i++){
              if (arrStyles[i][1].length == 0) continue;
              styleString +=  arrStyles[i][0] + ":" + arrStyles[i][1] + "; ";
          }

          wCell.setAttribute("style", styleString);
    	  wCell.style.cssText = styleString;
      }
    }
    this.displayBlock();

    return;
};

DataSheet.prototype.setTypeImageAlt = function(value){
    // functionname : [DataSheet.setTypeNumMin]

    if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultImageAlt    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].imageAlt = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeNegativeRed = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultNegativeRed    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].negativeRed = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypePercentSet = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultPercentSet    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].percentSet = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypePercentDecimalNum = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultPercentDecimalNum    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].percentDecimalNum = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeCellMaskTypeValue = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultCellMaskTypeValue    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].cellMaskTypeValue = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeCellTime1224 = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultCellTime1224    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].cellTime1224 = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeTypedateformat = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultTypedateformat    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].typedateformat = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeCheckFormat = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultCheckFormat    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].checkFormat = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeCellColor = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultCellColor    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].cellColor = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeCellFontColor = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
    
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultCellFontColor    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].cellFontColor = wValue;
      }
    }

    return;
};

DataSheet.prototype.setTypeCellTooltip = function(value){
    // functionname : [DataSheet.setTypeMaxLength]

	if (!this.blockMode)return;
	
    wValue = value;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultCellTooltip    = wValue;        
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].cellTooltip = wValue;
      }
    }

    return;
};

DataSheet.prototype.setDecimalPlaces = function(value){
     // functionname : [DataSheet.setDecimalPlaces]

    if (!this.blockMode)return;
    if (value == undefined) value = 0; 
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultDecimalPlaces = value; 
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].decimalplaces = value;
      }
    }
    this.displayBlock();

    return;
};

DataSheet.prototype.setDisplayFormat = function (value){
    // functionname : [DataSheet.setDisplayFormat]

    if (!this.blockMode)return;
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultDisplayFormat = value; 
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].format = value;
      }
    }
    this.displayBlock();

    return;
};

DataSheet.prototype.setLockMode = function(lockMode){
    // functionname : [DataSheet.setLockMode]

    if (!this.blockMode) return;

  if (this.row == 1){
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;  
          this.columns[wColNum].defaultLockMode = lockMode; 
      }
  }      
  for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
    if (wRowNum > this.maxRows) break;         
    for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
        if (wColNum > this.maxCols) break;         
        this.rows[wRowNum].cells[wColNum].lockMode = lockMode;
    }
  }
  this.displayBlock();
	
    return;
};

DataSheet.prototype.rowLocked = function(rowNum){
	var dataRow = this.rows[rowNum];
    for (var colNum = 1 ; colNum <= this.maxCols; colNum++){
    	if (!dataRow.cells[colNum].lockMode && !dataRow.cells[colNum].hidden) return false;
    }
    return true;
};

/**@
산식계산 동작 됨
*/
DataSheet.prototype.setFormula = function(formula){
    // functionname : [DataSheet.setFormula]

    // 속도저하를 방지하기 위해서 설정한다.
    
    if (!this.blockMode) return;
    
    if (this.row == 1){
        for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
            if (wColNum > this.maxCols) break;  
            this.columns[wColNum].defaultFormula = formula;       
        }
    }      
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].formula = formula;
          this.addToFormulaRefs(wRowNum, wColNum, formula);
      }
    }
      
    if (this.autoCalc){
        for (var wRowNum = this.row ; wRowNum <= this.row2 && wRowNum <= this.maxRows; wRowNum++){
            for (var wColNum = this.col ; wColNum <= this.col2 && wColNum <= this.maxCols; wColNum++){
                this.calculateCell(wRowNum, wColNum);
            }
        }
        this.displayBlock();
    }
    
    return;
};    
/**@
셀마다 메모를 해줄 수 있다.
*/
DataSheet.prototype.setTag = function(value, rowNum, colNum){
    // functionname : [DataSheet.setTag]

    var wRowFrom, wRowTo, wColFrom, wColTo;
    if (!rowNum) {
        wRowFrom = this.row; wRowTo = this.row2;
        wColFrom = this.col; wColTo = this.col2;
    } else {
        if (!rowNum || !colNum) return;
        
        wRowFrom = rowNum; wRowTo = rowNum;
        wColFrom = colNum; wColTo = colNum;
    }
    
    for (var wRowNum = wRowFrom ; wRowNum <= wRowTo; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = wColFrom ; wColNum <= wColTo; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.rows[wRowNum].cells[wColNum].tag = value;
      }
    }
    
    return;
};

DataSheet.prototype.getTag = function(rowNum, colNum){
    // functionname : [DataSheet.getTag]

    // 인수는 Logical 줄,열번호이다
	if (rowNum > this.maxRows || colNum > this.maxCols) return "";
    return this.rows[rowNum].cells[colNum].tag;
};

// 이 함수의 사용법은 두개이다
// 1. 블록모드를 준후 setValueToCell(value) 또는 2. 블록모드를 피하여 setValueToCell(value,
// pRow, pCol)
DataSheet.prototype.setValueToCell = function(value, rowNum, colNum, outerGu){
    // functionname : [DataSheet.setValueToCell]

	var wValue = "" + (value == null ? "" : (value == undefined ? "" : value));
    var wRowFrom, wRowTo, wColFrom, wColTo;
    if (!rowNum) {
        wRowFrom = this.row; wRowTo = this.row2;
        wColFrom = this.col; wColTo = this.col2;
    } else {
        if (!rowNum || !colNum) return;
        wRowFrom = rowNum; wRowTo = rowNum;
        wColFrom = colNum; wColTo = colNum;
    }
  
    for (var wRowNum = wRowFrom ; wRowNum <= wRowTo; wRowNum++){
        if (wRowNum > this.maxRows) break;         
        for (var wColNum = wColFrom ; wColNum <= wColTo; wColNum++){
            if (wColNum > this.maxCols) break; 
            
            var oldValue = (!outerGu ? this.rows[wRowNum].cells[wColNum].value : this.rows[wRowNum].cells[wColNum].value1);
            
            if ("" + oldValue == "" + wValue) {
            	//this.displayCell(wRowNum, wColNum); // ""인경우 이상하게 나오므로 필요
            	continue;
            }
            if (outerGu == undefined || !outerGu){
            	
            	if (this.rows[wRowNum].cells[wColNum].celltype != CELLTYPE_COMBOBOX){
                	this.rows[wRowNum].cells[wColNum].value = wValue;
            	} else {
            		if ((wValue == "0" || wValue == 0) && this.columns[wColNum].haveZeroComboValue()){
            			wValue = "-1";
            		}
                	this.rows[wRowNum].cells[wColNum].value = wValue;
              	    this.rows[wRowNum].cells[wColNum].value1 = this.columns[wColNum].getComboText(wValue);
            	}
            } else {
           	    this.rows[wRowNum].cells[wColNum].value  = this.columns[wColNum].getComboValue(wValue);
            	this.rows[wRowNum].cells[wColNum].value1 = wValue;
            }
            
            	if (oldValue == undefined) oldValue = "";
            	
        	    // dataset 갱신 기능 
        	    if (typeof(ControlBase.prototype._UpdateDataset) != "undefined"){
        	    	this._UpdateDataset(wRowNum, wColNum);
        	    }

        		if (!outerGu){
            		if (this.hasChangeEvent) {
                        var wResult = this.fncChangeEvent(wRowNum, wColNum, wValue, oldValue);
                        if (typeof(wResult)=="boolean" && !wResult) {
                      	   this.rows[rowNum].cells[wColNum].value = oldValue;
                     	   if (this.rows[rowNum].cells[wColNum].celltype == CELLTYPE_COMBOBOX){
                        	   this.rows[rowNum].cells[wColNum].value1 = this.columns[colNum].getComboText(oldValue);
                     	   }
                         }            
                    } 
        		} else {
        	        if (this.hasChangeComboTextEvent) {
                      var wResult = this.fncChangeComboTextEvent(wRowNum, wColNum, wValue, oldValue);
                      if (typeof(wResult)=="boolean" && !wResult) {
                     	   this.rows[rowNum].cells[wColNum].value  = this.columns[colNum].getComboValue(oldValue);
                   	   this.rows[rowNum].cells[wColNum].value1 = oldValue;
                      }            
                  } 
        		}
            
        	if(wRowNum <= this.PhysicalMaxRows){
        		this.displayCell(wRowNum, wColNum);
        	}
            
            if (this.autoCalc) this.calculateRelatedCell(wRowNum, wColNum);
        }
    }

    return;
};

/**@
셀에 데이터만 넣어준다.
*/
DataSheet.prototype.setDataToCell = function(value, rowNum, colNum, calcMode, outerGu){
    // functionname : [DataSheet.setDataToCell]

    var wCell = this.rows[rowNum].cells[colNum];
    
    if (outerGu == undefined || !outerGu){
    wCell.value = value;
  } else if (outerGu){
    wCell.value1 = value;
  }

    return;
	
};

DataSheet.prototype.getValue = function(){
    // functionname : [DataSheet.getValue]

    // 콤보 스타일에서 인수는 Logical 줄,열번호이다
    var wRowNum = this.currentRow;
    var wColNum = this.currentCol;
    var args = Array.prototype.slice.call(arguments);
    if (args.length == 1){
        wColNum = args[0];
    } else {
        wRowNum = args[0];
        wColNum = args[1];
    }
    return this.rows[wRowNum].cells[wColNum].value;
};

//인수가 하나만 넘어왔을 경우 컬럼번호로 인식하고 해당 컬럼의 모든 데이터를 배열로 리턴한다.
DataSheet.prototype.getColumnValue = function(){
    // functionname : [AUIDataSheet.getValue]

	// 인수가 하나만 넘어왔을 경우 컬럼번호로 인식하고 해당 컬럼의 모든 데이터를 배열로 리턴한다.
	var returnArray = false;
	// 리턴값
	var returnValue = [];
	
    // 콤보 스타일에서 인수는 Logical 줄,열번호이다
    var wRowNum = this.currentRow;
    var wColNum = this.currentCol;
    var args = Array.prototype.slice.call(arguments);
    if (args.length == 1){
        wColNum = args[0];
        returnArray = true
    } else {
        wRowNum = args[0];
        wColNum = args[1];
    }
    
    try{
    	if(returnArray){
    		for(var i=1; i<=this.maxRows; i++){
    			returnValue.push(this.getValue(i,wColNum));
    		}
    	}else{
    		returnValue = this.getValue(i,wColNum);
    	}
    } catch(e){
    	returnValue = "";
    }
    
    return returnValue;
};

DataSheet.prototype.getText = function(){
    // functionname : [DataSheet.getText]

    // 콤보 스타일에서 인수는 Logical 줄,열번호이다
    var wRowNum = this.currentRow;
    var wColNum = this.currentCol;
    var args = Array.prototype.slice.call(arguments);
    if (args.length == 1){
        wColNum = args[0];
    } else {
        wRowNum = args[0];
        wColNum = args[1];
    }
    return this.rows[wRowNum].cells[wColNum].value1;
};

DataSheet.prototype.setValue = function(){
    // functionname : [DataSheet.setValue]

    // 인수는 Logical 줄,열번호이다
     // 콤보 스타일에서 인수는 Logical 줄,열번호이다
     var wRowNum = this.currentRow;
     var wColNum = this.currentCol;
     var wValue;
     
     var args = Array.prototype.slice.call(arguments);
     if (args.length == 1){
         wValue = args[0];
     } else if (args.length == 2){
         wColNum = args[0];
         wValue = args[1];
     } else {
         wRowNum = args[0];
         wColNum = args[1];
         wValue = args[2];
     }
     
     // 마스크 타입일때, 숫자필드일때 value 값 처리
     var wDataCell = this.rows[wRowNum].cells[wColNum];
     
     if(wDataCell.celltype == CELLTYPE_INTEGER || wDataCell.celltype == CELLTYPE_NUMBER || wDataCell.celltype == CELLTYPE_PERCENT ){
    	 wValue = wValue*1;
     }else
     if(wDataCell.celltype == CELLTYPE_MASK){
    	 wValue = wValue + "";
     	var mask = wDataCell.cellMaskTypeValue;
     	var aValue = wValue.split("");
     	var result = "";
     	for(var i=0; i<wValue.length; i++){
     		if(wValue[i] != mask[i]) result += aValue[i];
     	}
     	wValue = result;
     }
     
     /**@
     대량 데이터일 경우 데이터모드로 설정 후
     다시 셀모드로 변경 
     속도 차이 많이남
     */
	 if (this.inputMode == SHEETMODE_SETCELL){
    	 if (wRowNum > this.maxRows || wColNum > this.maxCols) return;
    	 
    	 // onChange Event를 일으키기위하여 currentRow를 정정한다.
    	 var wOldNum = this.currentRow;
    	 var wOldSeq = this.rows[this.currentRow].objectSeq;
    	 
    	 if (wRowNum != this.currentRow) {
    		 // this.setCurrentRow(wRowNum);
    		 this.currentRow = wRowNum;
    		 var wSeq = this.rows[this.currentRow].objectSeq;
    		 
    		 for (var i=0; i < this.linkedObjects.length; i++){
    			 this.linkedObjects[i].seq = wSeq;
    		 }
    		 
    	 }
    	 
    	 // 값을 세팅한다
    	 this.setValueToCell(wValue, wRowNum, wColNum);
    	 
    	 // currentRow를 처음으로 돌린다,
    	 if (wOldNum != this.currentRow) {
    		 // this.setCurrentRow(wOldNum);
    		 this.currentRow = wOldNum;
    		 for (var i=0; i < this.linkedObjects.length; i++){
    			 this.linkedObjects[i].seq = wOldSeq;
    		 }
    	 }
    	 
	 } else 
     if (this.inputMode == SHEETMODE_SETDATA){
    	 this.setDataToCell(wValue, wRowNum, wColNum);
	 }

     return;
};

// 콘트롤이 시트에 올려진 경우 전체 칼럼 값을 바꾸는데 사용
DataSheet.prototype.setValueAll = function(pColNum, pValue){
    // functionname : [DataSheet.setValueAll]

    // 인수는 Logical 줄,열번호이다
    // 콤보 스타일에서 인수는 Logical 줄,열번호이다
    var wColNum = pColNum;
    var wValue = pValue;
    //var wOldNum = this.currentRow;
    
    for (var wRowNum = 1; wRowNum <= this.maxRows; wRowNum++){
        this.setValueToCell(wValue, wRowNum, wColNum);
    }
    
    return;
};

DataSheet.prototype.setText = function(){
    // functionname : [DataSheet.setText]

     // 인수는 Logical 줄,열번호이다
     // 콤보 스타일에서 인수는 Logical 줄,열번호이다
     var wRowNum = this.currentRow;
     var wColNum = this.currentCol;
     var wValue;
     
     var args = Array.prototype.slice.call(arguments);
     if (args.length == 1){
         wValue = args[0];
     } else if (args.length == 2){
         wColNum = args[0];
         wValue = args[1];
     } else {
         wRowNum = args[0];
         wColNum = args[1];
         wValue = args[2];
     }
     
	 if (this.inputMode == SHEETMODE_SETCELL){
    	 if (wRowNum > this.maxRows || wColNum > this.maxCols) return;
    	 
    	 // onChange Event를 일으키기위하여 currentRow를 정정한다.
    	 var wOldNum = this.currentRow;
    	 var wOldSeq = this.rows[this.currentRow].objectSeq;
    	 
    	 if (wRowNum != this.currentRow) {
    		 // this.setCurrentRow(wRowNum);
    		 this.currentRow = wRowNum;
    		 var wSeq = this.rows[this.currentRow].objectSeq;
    		 
    		 for (var i=0; i < this.linkedObjects.length; i++){
    			 this.linkedObjects[i].seq = wSeq;
    		 }
    		 
    	 }
    	 
    	 // 값을 세팅한다
    	 this.setValueToCell(wValue, wRowNum, wColNum, false);
    	 
    	 // currentRow를 처음으로 돌린다,
    	 if (wOldNum != this.currentRow) {
    		 // this.setCurrentRow(wOldNum);
    		 this.currentRow = wOldNum;
    		 for (var i=0; i < this.linkedObjects.length; i++){
    			 this.linkedObjects[i].seq = wOldSeq;
    		 }
    	 }
    	 
	 } else 
     if (this.inputMode == SHEETMODE_SETDATA){
    	 this.setDataToCell(wValue, wRowNum, wColNum, false, true);
	 }

     return;
};

DataSheet.prototype.setValues = function(value){
    // functionname : [DataSheet.setValues]

    if (this.currentRow <= 0){
        alert(getText("message_datasheet_003", "You must define Current Row of the table before anything else !!!"));
        return;    
    }
    
    var wArrValues = value.split(";");
    for (var wColNum = 1; wColNum <= this.maxCols; wColNum++)
        this.setValueToCell(wArrValues[wColNum - 1], this.currentRow, wColNum);
        
    return;
};

/**@
시트 전체 데이터를
Json 으로 가져온다
*/
DataSheet.prototype.toJSON = function(){
    // functionname : [DataSheet.toJSON]

	var jsonStr = "{";

	jsonStr += "\"name\":\"" + this.controlName + "\", \"data\":[";
    for (var wRowNum = 1; wRowNum <= this.maxRows; wRowNum++){
	if (this.isEmptyRow(wRowNum)) continue;
	
    	 jsonStr += "[";
       for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
           jsonStr += "\"" + this.rows[wRowNum].cells[wColNum].value + "\"";
         if (wColNum != this.maxCols) jsonStr += ", " ;
       }
     jsonStr += "]";
     if (wRowNum != this.maxRows) jsonStr += ", " ;
    }
    jsonStr += "]}";
        
    return jsonStr;
};

/**@
데이터를 물리적인셀에 뿌려준다.
*/
DataSheet.prototype.displayCell = function(rowNum, colNum){
    // functionname : [DataSheet.displayCell]
    var wDataCell = this.rows[rowNum].cells[colNum];
    var wCell = this.cellOf(rowNum, colNum);
	var wCellType = wDataCell.celltype;
	var wValue = wDataCell.value;
	var wText = wDataCell.value1;
   	var wFormat = wDataCell.format;
//       	var wStyle = wDataCell.additionalStyle;
   	
	wCell.innerHTML = "&nbsp;";
	
	wCell.style.color = (wDataCell.cellFontColor == ""? this.sheetFontColor: wDataCell.cellFontColor);
	wCell.style.backgroundColor = (wDataCell.cellColor == ""? wDataCell.cellColor: wDataCell.cellColor);
	
	this.setCellClass(wCell, rowNum, colNum);
    // td에 값 세팅
    if (wCellType == CELLTYPE_DATE) {  //달력
    	wFormat = wDataCell.typedateformat;
    	if (wValue.length == 0) {
        	navigator.userAgent.indexOf('Firefox') >= 0 ? wCell.innerHTML= "" : wCell.innerText = "";
        } else if (wFormat.length == 0) {
        	wCell.innerHTML = wValue;
        } else if (wFormat.length != 0) {
            if (wValue.length == 0){
            	navigator.userAgent.indexOf('Firefox') >= 0 ? wCell.innerHTML= "" : wCell.innerText = "";
            } else {
            	wValue = calendarMask(wValue, wFormat);
            	wCell.innerHTML = wValue;
            }
        }
    } else if(wCellType == CELLTYPE_TIME){  //시간
    	var result = "";
    	var hms = wDataCell.cellTime1224.substring(1, 2)*1;
    	
    	if(wValue.length < hms){
    		for(var i=wValue.length;i<hms;i++){
    			wValue += "0";
    			wDataCell.value += "0";
    		}
    	}
    	
    	//형식 맞추기
    	if(hms > 2){
    		for(var i=0; i< wValue.length; i++){
    			if(i == 2 || (i == 4 && hms == 6)){
    				result += ":";
    			}
    			result += wValue[i];
    		}
    	}else{
    		result = wValue;
    	}
    	wValue = result;
    	wCell.innerHTML = result;
    }else if (wCellType == CELLTYPE_EDIT)  {
        if (wValue.length == 0) {
        	navigator.userAgent.indexOf('Firefox') >= 0 ? wCell.innerHTML= "" : wCell.innerText = "";
        } else if (wFormat.length == 0) {
        	wCell.innerHTML = wValue;
        } else if (wFormat.length != 0) {
            // var wFormula = "FORMAT(\"" + wValue + "\",\"" + wFormat +
		// "\")";
            if (wValue.length == 0){
            	navigator.userAgent.indexOf('Firefox') >= 0 ? wCell.innerHTML= "" : wCell.innerText = "";
            } else {
            	wValue = mask(wValue, wFormat);
            	wCell.innerHTML = wValue;
            }
        }
    } else if (wCellType == CELLTYPE_MASK)  {
        if (wValue.length == 0) {
        	navigator.userAgent.indexOf('Firefox') >= 0 ? wCell.innerHTML= "" : wCell.innerText = "";
        } else {
    		var wMask = wDataCell.cellMaskTypeValue;
    		if(wMask == "") {
    			wMask = wValue;
    		}
    		else{
    			for(var i=0; i<wValue.length; i++){
    				wMask = wMask.replace("_",wValue[i]);
    			}
    			wMask = wMask.replace(/_/g," ");
    		}
    		wValue = wMask;
    		wCell.innerHTML = wValue;
        }
    } else if (wCellType == CELLTYPE_NUMBER || wCellType == CELLTYPE_INTEGER)  {
        if (wValue.length == 0) {
            wValue = "0";
        }
        if(wValue*1 < 0 && wDataCell.negativeRed == 1) wCell.style.color = "red";
        else wCell.style.color = (wDataCell.cellFontColor == ""? this.sheetFontColor: wDataCell.cellFontColor);
        if (wFormat.length == 0){
            wFormat = "###,###,###,###,##0";
            wDecPlace = wDataCell.decimalplaces;
            if (wDecPlace > 0){
            	wFormat += ".";
            	for (var i = 1; i <= wDecPlace; i++) wFormat += "0";
            }
        }
        
        // var wFormula = "FORMAT(\"" + wValue + "\",\"" + wFormat + "\")";
        wValue = mask(wValue, wFormat);
        wCell.innerHTML = wValue;
    
    } else if (wCellType == CELLTYPE_PERCENT)  {
        if (wValue.length == 0) {
            wValue = "0";
        }
        
        wValue = wValue*100;
        
        var decimalNum = 1;
        for(var i=0; i<wDataCell.percentDecimalNum; i++) decimalNum *= 10;
        
        switch(wDataCell.percentSet){
        case 1: wValue = Math.ceil(wValue*decimalNum)/decimalNum; //올림
        		break;
        case 2: wValue = Math.floor(wValue*decimalNum)/decimalNum; //내림
        		break;
        case 3: wValue = Math.round(wValue*decimalNum)/decimalNum; //반올림
        		break;
        } 
        
        if((""+wValue).split(".")[1] != undefined && (""+wValue).split(".")[1].length > 0){
        	wFormat = "##0.";
        	for(var i=0; i<(""+wValue).split(".")[1].length; i++){
        		wFormat += "#";
        	}
        	wFormat += "%";
        }else{
        	wFormat = "##0%";
        }
        
        if(wValue*1 < 0 && wDataCell.negativeRed == 1) wCell.style.color = "red";
        else wCell.style.color = (wDataCell.cellFontColor == ""? this.sheetFontColor: wDataCell.cellFontColor);
            wDecPlace = wDataCell.decimalplaces;
            if (wDecPlace > 0){
            	wFormat += ".";
            	for (var i = 1; i <= wDecPlace; i++) wFormat += "0";
            }
        
        // var wFormula = "FORMAT(\"" + wValue + "\",\"" + wFormat + "\")";
            wValue = mask(wValue, wFormat);
        wCell.innerHTML = wValue;
    
    } else if (wCellType == CELLTYPE_COMBOBOX)  { 
    	if (wText.length == 0){
        	if (typeof(wValue) == "number" || wValue.length > 0){
        		wText = this.columns[colNum].getComboText(wValue);
        	}
    	}
    	wValue = (wText.length == 0 ? "" : wText);
    	wCell.innerHTML = wValue;
    } else if (wCellType == CELLTYPE_CHECKBOX) { 
    	wCell.style.textAlign = "center";
    	if (wValue == this.columns[colNum].ValueWhenChecked) {
    		wCell.innerHTML = "&#9745;";
    	} else {
    		wCell.innerHTML = "&#9744;";
    	}
    	if (this.sheetType == SHEETTYPE_DATASHEET){
            wCell.style.cursor="pointer";
//            wCell.style.fontSize="10pt";
    	}
    	wValue = wCell.innerHTML;
    } else if (wCellType == CELLTYPE_BUTTON) {
    	wCell.style.textAlign = "center";
        wCell.innerHTML = "<img border='0' " 
        	            + "style='top:0;left:0;' "
        	            + "onmouseout='cell_onCommandMouseOut(this);' "
        	            + "onmouseover='cell_onCommandMouseOver(this);' "
        	            + "onclick='cell_onCommandClick(this, " + rowNum + ", " + colNum + ");'>";
        
        wCell.getElementsByTagName("img")[0].src =  wDataCell.buttonImage1.src;
    
    } else if (wCellType == CELLTYPE_PICTURE) { 
        wCell.innerHTML = "<img border='0' " 
        	            + "style='top:0;left:0;' "
        	            + "alt='"+wDataCell.imageAlt+"' "
        	            + "onclick='cell_onImageClick(this, " + rowNum + ", " + colNum + ");'>";
        
        wCell.getElementsByTagName("img")[0].src =  CONTEXT_ROOT + (wValue.trim() == "" ? "/winnersoft/images/sheet/blank.gif" : wValue); 
    }
    
    wCell.align = (wDataCell.align || "left");
    wCell.valign = (wDataCell.valign || "baseline");
    
    // 툴팁 표시 여부
    if(wDataCell.cellTooltip == true){
    	wCell.setAttribute("title", wValue);
    }
    
    return;
};

DataSheet.prototype.displayBlock = function(){
    // functionname : [DataSheet.displayBlock]

    if (!this.blockMode) return;
    
    for (var wRowNum = this.row ; wRowNum <= this.row2; wRowNum++){
      if (wRowNum > this.maxRows) break;         
      for (var wColNum = this.col ; wColNum <= this.col2; wColNum++){
          if (wColNum > this.maxCols) break;         
          this.displayCell(wRowNum, wColNum);

      }
    }

    return;
};


DataSheet.prototype._canFocusToControl = function(){
    // functionname : [DataSheet._canFocusToControl]

    if (this.textControl == null) return false;

	if (parseInt(1*this.textControl.getAttribute("row")) <= 0) return false;
    if (parseInt(1*this.textControl.getAttribute("col")) <= 0) return false;

    if (this.textControl.style.display != "none"){
    	/**@beforeedit**/
    	return true;
    }
    if (this.comboControl.style.display != "none"){
    	return true;
    }
    
  return false;
};

DataSheet.prototype._hideCellEdit = function(){
    // functionname : [DataSheet._hideCellEdit]

    if (this.textControl != null){
    	/**@afteredit**/
        this.textControl.style.left = "-10000px"; 
        this.textControl.setAttribute("row", "0");
        this.textControl.setAttribute("col", "0");
    }

	return;
};

DataSheet.prototype._hideCellCombo = function(){
    // functionname : [DataSheet._hideCellCombo]

    if (this.comboControl != null){
        this.comboControl.style.left = "-10000px"; 
        this.comboControl.setAttribute("row", "0");
        this.comboControl.setAttribute("col", "0");
    }
    
	return;
};

/**@
한줄 위로 올린다.
데이터,  Deco 등 모두
*/
DataSheet.prototype.upRow = function(){
    // functionname : [DataSheet.upRow]

	if (this.maxRows <= 1 || this.currentRow <= 1) return;

    // DataRow의 이동
    var wDataRow = this.rows[this.currentRow];
    var wDataRow2 = this.rows[this.currentRow - 1];
    this.rows[this.currentRow] = wDataRow2;
    this.rows[this.currentRow-1] = wDataRow;
    wDataRow2.hardRowNum  = wDataRow.hardRowNum;
    wDataRow2.hardRowNum2 = wDataRow.hardRowNum2;
    wDataRow.hardRowNum = wDataRow2.hardRowNum - this.rowsPerDataRow;
    wDataRow.hardRowNum2 = wDataRow2.hardRowNum - this.rowsPerDataRow;
    
    wDataRow = null;
    wDataRow2 = null;
    
    // 산식등에 의한 데이터를 표시한다
    this.setBlock(this.currentRow - 1, 1, this.currentRow, this.maxCols);
    this.displayBlock();
    
//        if (this.clickedTR){
//            var wHardRowNum = this.rowNumOf(this.currentRow - 1, 1, CONV_LOGICAL_HARD);
//            this.setRowClass(this.clickedTR.rowIndex, this.getOddEvenStyle(wHardRowNum));
//
//            this.clickedTR = this.dataTable.tBodies[0].rows[wHardRowNum];
//            this.setRowClass(wHardRowNum, "SelectedStyle");
//            
//            
//        }
    
    // dataset 현재줄 위로 이동 기능 
    if (typeof(ControlBase.prototype._UpdateDatasetUpRow) != "undefined"){
    	this._UpdateDatasetUpRow(rowNum);
    }
    
    this.currentRow--;

    // 산식재정비
    if (this.autoCalc) {
    	this.recalcurateRow(this.currentRow);
    	this.recalcurateRow(this.currentRow + 1);
    }
    
    // 포커스 받은 셀을 다시 칠함
    if (this.clickedTR){
        this._setEditControlPosition();
        this.scrollTo(this.currentRow, this.currentCol);
    }
    
    return;
};

/**@
한줄 위로 내린린다.
데이터,  Deco 등 모두
*/
DataSheet.prototype.downRow = function(){
    // functionname : [DataSheet.downRow]

	if (this.maxRows <= 1 || this.currentRow == this.maxRows) return;

    // DataRow의 이동
    var wDataRow = this.rows[this.currentRow];
    var wDataRow2 = this.rows[this.currentRow + 1];
    this.rows[this.currentRow] = wDataRow2;
    this.rows[this.currentRow + 1] = wDataRow;
    wDataRow2.hardRowNum  = wDataRow.hardRowNum;
    wDataRow2.hardRowNum2 = wDataRow.hardRowNum2;
    wDataRow.hardRowNum = wDataRow2.hardRowNum + this.rowsPerDataRow;
    wDataRow.hardRowNum2 = wDataRow2.hardRowNum + this.rowsPerDataRow;
    
    wDataRow = null;
    wDataRow2 = null;
    
    // 산식등에 의한 데이터를 표시한다
    this.setBlock(this.currentRow, 1, this.currentRow + 1, this.maxCols);
    this.displayBlock();
    
//        if (this.clickedTR){
//            var wHardRowNum = this.rowNumOf(this.currentRow + 1, 1, CONV_LOGICAL_HARD);
//            this.setRowClass(this.clickedTR.rowIndex, this.getOddEvenStyle(wHardRowNum));
//
//            this.clickedTR = this.dataTable.tBodies[0].rows[wHardRowNum];
//            this.setRowClass(wHardRowNum, "SelectedStyle");
//        }
    // dataset 현재줄 아래로 이동 기능 
    if (typeof(ControlBase.prototype._UpdateDatasetDownRow) != "undefined"){
    	this._UpdateDatasetDownRow(rowNum);
    }

    this.currentRow++;

    // 산식재정비
    if (this.autoCalc) {
    	this.recalcurateRow(this.currentRow - 1);
    	this.recalcurateRow(this.currentRow);
    }

    // 포커스 받은 셀을 다시 칠함
    if (this.clickedTR){
        this._setEditControlPosition();
        this.scrollTo(this.currentRow, this.currentCol);
    }

    return;
};

/**@
RowNum 을 다시 지정
*/
DataSheet.prototype.renumRows = function(){
    // functionname : [DataSheet.renumRows]

	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom|right/i.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }

    for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){
    	var wRows = wTables[wTableNum].tBodies[0].rows;
		var wMaxSheetRowNum = (wRows.length - this.headRows) / this.rowsPerDataRow;
		for (var wRowNum = 1; wRowNum <= wMaxSheetRowNum; wRowNum++){
			var wHardRowNum = this.rowNumOf(wRowNum, 1, CONV_LOGICAL_HARD);
			var wCell = wRows[wHardRowNum].cells[this.headCols - 1];
			
			// 20110411 막음
			// wCell.innerHtml = "";
			wCell.innerHTML = wRowNum;
		}
    }
    
    // 처음에 한번 첫줄에 칼럼정보를 부여하기위해 renum에 둔다
    for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
        var wDataCell = this.rows[1].cells[wColNum];
        var wColumn = this.columns[wColNum];
        
        wDataCell.celltype      	 = wColumn.defaultCellType; 
        wDataCell.align         	 = wColumn.defaultHAlign; 
        wDataCell.valign        	 = wColumn.defaultVAlign; 
        wDataCell.checkcenter   	 = wColumn.defaultCheckCenter; 
        wDataCell.maxlength     	 = wColumn.defaultMaxLength; // 디자인 타임시 지정
        wDataCell.hidden       	     = wColumn.hidden;    // 디자인 타임시 지정
        wDataCell.nummax        	 = wColumn.defaultNumMax; 
        wDataCell.nummin        	 = wColumn.defaultNumMin; 
        wDataCell.decimalplaces 	 = wColumn.defaultDecimalPlaces; 
        wDataCell.format        	 = wColumn.defaultDisplayFormat; 
        wDataCell.formula       	 = wColumn.defaultFormula; 
        wDataCell.lockMode      	 = wColumn.defaultLockMode; 
        wDataCell.buttonImage1  	 = wColumn.defaultButtonImage1; 
        wDataCell.buttonImage2  	 = wColumn.defaultButtonImage2; 
        wDataCell.imageAlt  		 = wColumn.defaultImageAlt;
        wDataCell.negativeRed  		 = wColumn.defaultNegativeRed;
        wDataCell.percentSet  		 = wColumn.defaultPercentSet;
        wDataCell.percentDecimalNum  = wColumn.defaultPercentDecimalNum;
        wDataCell.cellMaskTypeValue  = wColumn.defaultCellMaskTypeValue;
        wDataCell.cellTime1224  	 = wColumn.defaultCellTime1224;
        wDataCell.typedateformat  	 = wColumn.defaultTypedateformat;
        wDataCell.cellColor  		 = wColumn.defaultCellColor;
        wDataCell.cellFontColor  	 = wColumn.defaultCellFontColor;
        wDataCell.cellTooltip  	     = wColumn.defaultCellTooltip;
        wDataCell.checkFormat 	     = wColumn.defaultCheckFormat;
    }
    
    // 줄 색깔 구분
    this.refreshOddEven(1, "");
    
    return;
};

/**@
지정하지 않을시 엑셀 과 같은 방식으로 추가
*/
DataSheet.prototype.renumCols = function(){
    // functionname : [DataSheet.renumCols]

    var wAlphabetStr="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }
	
    for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){
    
        var wCells = wTables[wTableNum].tBodies[0].rows[this.headRows - 1].cells;
        for (var wCol = 1; wCol <= wCells.length - this.headCols; wCol++){
            var num2 = wCol; var wABC = "";
            for (var wPowNum = 1; wPowNum < 15; wPowNum++){
                var num1 = Math.pow(26, wPowNum) ;
                
                if (num2 < Math.pow(26, wPowNum - 1)) break;
                wRnd = num2 % num1;
                num2 = num2 / num1;
                
                wABC = wAlphabetStr.charAt(wRnd - 1) + wABC;
            }
            
            var wCell = wCells[this.headCols + wCol - 1];
            wCell.innerHTML = wABC;
        }
    }
};

// 시트 전페이지를 초고화 한다
/**@
함수, 속성등 추가 했을때 반드시 clear 에 넣어줘야함
*/
DataSheet.prototype.clear = function(){
    // functionname : [DataSheet.clear]
    
    // 1단계 : 데이터를 한줄로 줄인다
	this.inClearMode = true;
	this.currentRow = 1;
	this.autoCalc = false;
    for (var wRowNum = this.maxRows; wRowNum > 1; wRowNum--){
        this.delRow(wRowNum, true);
    }
  
  // 산식정비
  this.autoCalc = true;
	
	// 2단계 : 셀의 내용을 초기화한다
	this._hideCellCombo();
	this._hideCellEdit();
	this.clearRow(1);
	if(this.tagObject.style.display != "none") this.scrollTo(1, 1);

    // 3단계 : clear 이벤트를 호출하고 거기서는 연결된 객체의 시퀀스를 1로한다
    if (this.hasClearEvent) {
        this.fncClearEvent();
    } 

    this.rows[1].objectSeq = 1;
    this.dirty = false;
    this.noMoreData = false;

    // 줄번호 갱신
    if (this.displayRowNum) this.renumRows();

    // 산식재정비
    if (this.autoCalc) this.recalcurateRow(1);

    // 스크롤 설정
    this.resetScroll();
	this.setCurrentRow(1);
    
    // Odd-Even Mode 설정
    this.refreshOddEven(1);
    
    // 메모리 초기화
    this.blockMode = false;
    this.col = -1; this.col2 = -1;  // Logical
    this.row = -1; this.row2 = -1;  // Logical

    this.clickedTR = null;          // Physical 클릭된 시트의 줄을 기억
    this.moveoverTR = null;         // Physical 마우스 이동중인 시트의 줄을 기억
    this.lastTRClass = "";
    this.focusedCell = null;
    this.dirty = false;             // 리스트 시트를 한번 선택한적이 있으면 Dirty이다
    
    this.formulaRefs = [];
    this.callerFncName = "";  // Blur이벤트의 중복방지
    this.inputMode = SHEETMODE_SETCELL;
    this.inClearMode = false;
    
    this._mouseMove = true; // sheet_onmousemove() 함수 동작_내부용
    this._clickLocation = null; // click 위치 변경 체크용 변수_내부용
    
    this.clickedCOL = 0; //Physical 클릭된 시트의 열 번호를 기억
    this.moveTorowSpanPrevRow = -1;
    this.moveTorowSpanPrevCol = -1;
    
    // dataset 현재줄 아래로 이동 기능 
    if (typeof(ControlBase.prototype._UpdateDatasetClear) != "undefined"){
    	this._UpdateDatasetClear();
    }
    return;
};

DataSheet.prototype.clearRow = function(pRowNum){
    // functionname : [DataSheet.clearRow]
    
    // 클리어 되는 동안 산식연산을 막고
    this.autoCalc = false;
var row = this.rows[pRowNum];
for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
	
      var wCell = row.cells[wColNum];
      
      // 칼럼의 디폴트값
      var wColumn = this.columns[wColNum];
      wCell.celltype      	 = wColumn.defaultCellType; 
        wCell.align         	 = wColumn.defaultHAlign; 
        wCell.valign        	 = wColumn.defaultVAlign; 
        wCell.checkcenter   	 = wColumn.defaultCheckCenter; 
        wCell.maxlength     	 = wColumn.defaultMaxLength; // 디자인 타임시 지정
        wCell.hidden       	     = wColumn.hidden;    // 디자인 타임시 지정
        wCell.nummax        	 = wColumn.defaultNumMax; 
        wCell.nummin        	 = wColumn.defaultNumMin; 
        wCell.decimalplaces 	 = wColumn.defaultDecimalPlaces; 
        wCell.format        	 = wColumn.defaultDisplayFormat; 
        wCell.formula       	 = wColumn.defaultFormula; 
        wCell.lockMode      	 = wColumn.defaultLockMode; 
        wCell.buttonImage1  	 = wColumn.defaultButtonImage1; 
        wCell.buttonImage2  	 = wColumn.defaultButtonImage2; 
        wCell.imageAlt  		 = wColumn.defaultImageAlt;
        wCell.negativeRed  		 = wColumn.defaultNegativeRed;
        wCell.percentSet  		 = wColumn.defaultPercentSet;
        wCell.percentDecimalNum  = wColumn.defaultPercentDecimalNum;
        wCell.cellMaskTypeValue  = wColumn.defaultCellMaskTypeValue;
        wCell.cellTime1224  	 = wColumn.defaultCellTime1224; 
        wCell.typedateformat  	 = wColumn.defaultTypedateformat; 
        wCell.cellColor  		 = wColumn.defaultCellColor;
        wCell.cellFontColor  	 = wColumn.defaultCellFontColor;
        wCell.cellTooltip  	     = wColumn.defaultCellTooltip;
        wCell.checkFormat 	     = wColumn.defaultCheckFormat;

      wCell.value  			 = "";
      wCell.value1 			 = "";
          
      var defaultValue = this.columns[wColNum].defaultValue; 
	this.setValue(1, wColNum, defaultValue);
	
	this.displayCell(1, wColNum);
}
	
	// 디폴트값과 연관된 산식 변경
	this.autoCalc = true;
	for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
		this.calculateRelatedCell(this.currentRow, wColNum);
	}
	
    return;
};

DataSheet.prototype.clearCurrentSeq = function(){
    // functionname : [DataSheet.clearCurrentSeq]
    
    this.clearRow(this.currentRow);
    return;
};

DataSheet.prototype.click = function(em){
    // functionname : [DataSheet.click]
    
    var wTagObject = em;
	// TD이고 줄인것
	while (wTagObject.parentNode && 
	       (wTagObject.parentNode.tagName != "TR" || wTagObject.parentNode.getAttribute("haveData") != "1")) 
	           wTagObject = wTagObject.parentNode;
	if (!wTagObject.parentNode || wTagObject.parentNode.getAttribute("haveData") != "1") return;

  var wCell = wTagObject;
  var wRow = wTagObject.parentNode;

	// 현재 줄번호를 서칭해서 대입하고
	var wRowNum = this.rowNumOf(wRow.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
	var wColNum = this.colNumOf(wRow.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
	
	if (wColNum == 0) return;
	// 줄번호가 바뀌었으면 콘트롤 표시를 바꾸고
	var skipMoveTo = false;
	if (this.sheetType == SHEETTYPE_LISTSHEET){
    	if (this.dirty && this.currentRow == wRowNum && this.currentCol == wColNum) {
    		skipMoveTo = true;
    	} else {
    		this.dirty = true;
    	}
	} else {
    	if (this.currentRow == wRowNum && this.currentCol == wColNum) {
    		if (!this._canFocusToControl()){
    	    	this.shtControlSet(wRowNum, wColNum);
    	    	/**@
    	    	텍스트(Edit), 콤보(Combo) 박스를 
    	    	클릭 한 곳에 옮겨 준다.
    	    	*/
    		}
    		skipMoveTo = true;
    	}
	}
	if (!skipMoveTo){
        if (!/ColHead|RowHead|MoveColumn/.test(wCell.className)) {
            this.moveTo(wRowNum, wColNum); // moveTo안에
										// setCurrentRow,setCurrentCol
										// 루틴이 있음
       } else {
           this.setCurrentRow(wRowNum); 
           this.setCurrentCol(wColNum);
       }
 	}
    
    // 사용자 코딩 추가영역을 호출한다
    if (this.hasClickEvent) {
        var wResult = this.fncClickEvent(wRowNum, wColNum);
        if (typeof(wResult)=="boolean" && !wResult) {
            return false;
        }            
    } 

	
	// CHECKBOX 일경우 처리부분
    var wDataCell = this.rows[wRowNum].cells[wColNum];
	var wCellType = wDataCell.celltype;
	
    if (wCellType == CELLTYPE_CHECKBOX){
    	var value = parseInt(1 * wDataCell.value);
        cell_onClick(em, value);
    }
    
    // 셀타입이 날짜 인 경우
	if(wDataCell.celltype == CELLTYPE_DATE){
		var format = wDataCell.checkFormat;
		switch(format){
      case 2: 
      	format = "yyyy";
      	break;
      case 1: 
      	format = "yyyymm";
      	break;
      case 0: 
      	format = "yyyymmdd";
      	break;
     }
     
		popUpCalendar(this.textControl,this.textControl, format);
	}
    
    return;
};

DataSheet.prototype.shtControlSet = function(rowNum, colNum){
    // functionname : [DataSheet.shtControlSet]

    // 데이터 시트에만 적용된다
if (this.sheetType != SHEETTYPE_DATASHEET){
	return;
}

    // 2단계 : 새로운 셀을 Edit 모드로 바꾼다.
    var wDataCell = this.rows[rowNum].cells[colNum];
    var wCell = this.cellOf(rowNum, colNum);
    
    this.currentRow = rowNum;
    this.currentCol = colNum;
    
	var wCellType = wDataCell.celltype;
	var lockMode = (wDataCell.lockMode);
    var oChild = null;
    
    if (lockMode || wDataCell.hidden){
    	this._hideCellCombo();
    	this._hideCellEdit();
    	return;
    } else if (wCellType == CELLTYPE_CHECKBOX) { 
    } else if (wCellType == CELLTYPE_BUTTON) { 
    	this._hideCellCombo();
    	this._hideCellEdit();
    	if (wCell.getElementsByTagName("img").length > 0) {
    		wCell.getElementsByTagName("img")[0].focus();
    	}
    	return;
    } else if (wCellType == CELLTYPE_PICTURE) { 
    } else if (wCellType == CELLTYPE_COMBOBOX)  { 
    	// 텍스트 포커스 상태면 안보이게 한다
    	this._hideCellEdit();
    	
		this.scrollTo(rowNum, colNum);

		var coords = this._getSetPosition(rowNum, colNum);

    	oChild  = null;
      if (this.comboControl != null){
          oChild = this.comboControl; 
      } else {
      	if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 9) {
              oChild = document.createElement("<SELECT name='shtCombo" + this.id + "' id='shtCombo" + this.id + "' class='shtCombo'>");
      	} else {
      		oChild = document.createElement("select");
      		oChild.id = "shtCombo" + this.id;
      		oChild.name = "shtCombo" + this.id;
      		oChild.className = "shtCombo";
      		oChild.style.display = "block";
      	} 
  	    setEventHandler(oChild, "keydown", cell_onKeyDown);
  	    setEventHandler(oChild, "change",  cell_onChange);
  	    setEventHandler(oChild, "blur", cmbCell_onBlur);
          setEventHandler(oChild, "mousewheel", sheet_DisplayWheel);
      }
      
	    oChild.style.left = coords.x + "px";
	    oChild.style.top = coords.y + "px";
	    oChild.style.width = (coords.w + 6) + "px";
	    oChild.style.height = (coords.h + 6) + "px";
	  //  console.log(oChild.style.height = (coords.h + 6) + "px");
	    oChild.setAttribute("row", rowNum);
	    oChild.setAttribute("col", colNum);

	    var parentTable = wCell;

        while (parentTable && parentTable.tagName != "TABLE") {
    		parentTable = parentTable.offsetParent;
		} 
        parentTable.insertAdjacentElement('afterEnd', oChild);

        oChild.setAttribute("nonefocusmode", "true");

    	
	    this.comboControl = oChild;
        var linkComboName = this.columns[colNum].linkComboName;
        
        if (linkComboName.length != 0){ 

            clearLists(oChild);
            copyLists(controls[linkComboName].tagObject, oChild);
            
            this.clsComboInfo(colNum);
          	for (var i = 0 ;  i < oChild.options.length; i++){
          		var wComboInfo = this.columns[colNum].comboLists[i + 1] = new EXOListItem();
          		wComboInfo.text = oChild.options[i].text;
          		wComboInfo.value = oChild.options[i].value;
          	}
          	
       } else if (this.columns[colNum].comboLists.length > 1){
            clearLists(oChild);
         	var wOptions =  oChild.options;
          	for (var i = 1 ;  i < this.columns[colNum].comboLists.length; i++){
               var opt = document.createElement("option");
               
               opt.text = this.columns[colNum].comboLists[i].text;
               opt.value = this.columns[colNum].comboLists[i].value;
               
               if(this.rows[rowNum].cells[colNum].value1 == this.columns[colNum].comboLists[i].text) opt.selected = true;

               wOptions.add(opt);
         	}
       }
        
        oChild.focus(); 
        
        oChild.removeAttribute("nonefocusmode");

    } else {
    	// 콤보 포커스 상태면 안보이게 한다
    	this._hideCellCombo();
    	
		this.scrollTo(rowNum, colNum);

		var coords = this._getSetPosition(rowNum, colNum);
        
      if (this.textControl != null){
          oChild = this.textControl; 
      } else {
      	if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 9) {
      		oChild = document.createElement("<INPUT type='text' id='shtText" + this.id + "' name='shtText" + this.id + "' class='shtText'>");
      	} else {
      		oChild = document.createElement("input");
      		oChild.type = "text";
      		oChild.name = "shtText" + this.id;
      		oChild.id = "shtText" + this.id;
      		oChild.className = "shtText";
      		
      		
      		oChild.style.display = "block";
      	} 

  	    setEventHandler(oChild, "keydown", cell_onKeyDown);
  	    setEventHandler(oChild, "keyup", cell_onKeyUp);
  	    setEventHandler(oChild, "keypress", cell_onKeyPress);
  	    setEventHandler(oChild, "blur", cell_onBlur);
          setEventHandler(oChild, "mousewheel", sheet_DisplayWheel);
      }
      
      if(wDataCell.celltype == CELLTYPE_MASK && wDataCell.cellMaskTypeValue != ""){
      	if(wDataCell.value.length > 0){
      		var mask = wDataCell.cellMaskTypeValue;
      		for(var i=0; i<wDataCell.value.length; i++){
      			mask = mask.replace("_",wDataCell.value[i]);
      		}
      		oChild.value = mask;
      	} else{
      		oChild.value = wDataCell.cellMaskTypeValue;
      	}
      }else{
      	oChild.value = (wDataCell.value || "");
      }
    	
	    oChild.style.left = coords.x + "px";
	    oChild.style.top = coords.y + "px";
	    oChild.style.width = coords.w + "px";
	    oChild.style.height = coords.h + "px";
	   // console.log(oChild.style.height = coords.h + "px");
	    oChild.setAttribute("row", rowNum);
	    oChild.setAttribute("col", colNum);
	    

	    var parentTable = wCell;
    	while (parentTable && parentTable.tagName != "TABLE") {
    		parentTable = parentTable.offsetParent;
		} 
        parentTable.insertAdjacentElement('afterEnd', oChild);
        
	    this.textControl = oChild; 
    	
	    if (wCell.style.textAlign.length > 0){
	    	oChild.style.textAlign = wCell.style.textAlign;
	    }
	    
	    oChild.style.lineHeight = (coords.h - 2) + "px";
        oChild.focus();
        
        // IE에서 focus 상태임에도 SELECT하면 BLUR이벤트가 호출되는 경우가 있어서
        // 임시로 메모해 두고 blur이벤트에서 스킵한다
        if (browserDetect.browser == "Explorer"){
            if (debug.isCallerFunction("keyAction")){
        		// 키보드 이동 때만 적용된다
                oChild.setAttribute("SELMODE", "Y");
         	} else {
        		// 마우스 이벤트 때는 정상 Blur 이벤트를 발생시킴
        	}
        }
        oChild.select();
    }   
    
    // cell style 지정
    if(oChild != null && oChild != undefined){
    	if(this.sheetFontColor != "") oChild.style.color = this.sheetFontColor;
    	if(this.sheetFontSize != "") oChild.style.font = this.sheetFontSize + "px" + " arial";
    	if(this.sheetFontName != "") oChild.style.fontFamily = this.sheetFontName;
    	if(this.sheetFontBold != "") oChild.style.fontWeight = this.sheetFontBold;
    	if(this.sheetFontItalic != "") oChild.style.fontStyle = this.sheetFontItalic;
    	if(this.sheetFontUnderLine != "" || this.sheetFontStrike != "") oChild.style.textDecoration = this.sheetFontUnderLine + " " + this.sheetFontStrike;
    	if(wDataCell.cellFontColor != "") oChild.style.color = wDataCell.cellFontColor;
    	if(wDataCell.cellColor != "") oChild.style.backgroundColor = wDataCell.cellColor;
    	else oChild.style.backgroundColor = "";
    }
    
    wCell = null; oChild = null; wTable = null;
    
    // 포커스가 있는 셀에 해당되는 rowHeader, colHeader 의 className 변경
    this.setPickHeaderClass(rowNum, colNum, "Pick");
    
    return;
};

DataSheet.prototype._getSetPosition= function(rowNum, colNum){
    // functionname : [DataSheet.getSetPosition]
    
    var wCell = this.cellOf(rowNum, colNum);
var coords = { x: 0, y: 0, w: 0, h: 0 };

  var element = wCell;
coords.w = element.offsetWidth;
coords.h = element.offsetHeight;
while (element && element.tagName != "DIV") {
	coords.x += element.offsetLeft;
	coords.y += element.offsetTop;
	element = element.offsetParent;
}   
coords.x = coords.x;
coords.y = coords.y;

    return coords;
};

DataSheet.prototype._setEditControlPosition = function(){
    // functionname : [DataSheet._setEditControlPosion]
	
   var wDataCell = this.rows[this.currentRow].cells[this.currentCol];
   
   if (wDataCell == null) return;
   if (wDataCell.celltype == CELLTYPE_CHECKBOX || wDataCell.celltype == CELLTYPE_PICTURE || wDataCell.celltype == CELLTYPE_BUTTON){
	   return;
   }
   if (this.currentRow == 0 || this.currentCol == 0) {
	   return;
   }
   if (wDataCell.lockMode || wDataCell.hidden){
	   return;
   } 
   if(wIsResizing || wIsColumnMove) {
	   if(this.textColtrol == null || this.textColtrol == undefined) return;
	   this.textColtrol.style.left = "-10000px";
	   return;
 }
   
 if (this.textControl != null && this.textControl.style.display != "none" && wDataCell.celltype != CELLTYPE_COMBOBOX){
     var coords = this._getSetPosition(this.currentRow, this.currentCol);
   this.textControl.style.left = coords.x + "px";
   this.textControl.style.top  = coords.y + "px";
	   
 } 
 else if (this.comboControl != null && this.comboControl.style.display != "none" && wDataCell.celltype == CELLTYPE_COMBOBOX){
     var coords = this._getSetPosition(this.currentRow, this.currentCol);
   this.comboControl.style.left = coords.x + "px";
   this.comboControl.style.top  = coords.y + "px";
 }
};

/* 포커스 주기 */
DataSheet.prototype.focus = function(){
	// functionname : [DataSheet.focus]

   	var wReturn = true;

    if (this.currentRow > 0 && this.currentCol > 0){
        var wCell = this.cellOf(this.currentRow, this.currentCol);
        call_sheet_onmouseout(wCell);
        if (BrowserDetect.browser != "Explorer"){
    	    wCell.removeAttribute("tabindex");
        }
    }

    // 여러줄일 경우 가장 아래있는 셀로 이동한다.
    var firstCell = 1;
	for(var i=1; i<=this.maxCols; i++){
		if(this.columns[i].sheetCol == 1) firstCell = i;
	}
    
    var rowNum = (this.currentRow > 0 ? this.currentRow : 1);
    var colNum = (this.currentCol > 0 ? this.currentCol : firstCell);
    
    var sheetRow = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
	this.moveTorowSpanPrevRow = sheetRow % this.rowsPerDataRow == 0? this.rowsPerDataRow: sheetRow % this.rowsPerDataRow;
	
    var wDataCell = this.rows[rowNum].cells[colNum];
    var wCellType = wDataCell.celltype;

	if (this.sheetType == SHEETTYPE_DATASHEET && 
		!(wDataCell.lockMode && !this.permitFocusToLockedCell) && 
		!wDataCell.hidden && 
			   (wCellType == CELLTYPE_DATE ||  
               wCellType == CELLTYPE_EDIT ||											
               wCellType == CELLTYPE_NUMBER ||
               wCellType == CELLTYPE_INTEGER ||
               wCellType == CELLTYPE_BUTTON ||
               wCellType == CELLTYPE_COMBOBOX ||
               wCellType == CELLTYPE_CHECKBOX ||
               wCellType == CELLTYPE_PERCENT ||
               wCellType == CELLTYPE_MASK ||
               wCellType == CELLTYPE_PICTURE ||
               wCellType == CELLTYPE_TIME)){
        this.moveTo(rowNum, colNum);
    } else {
        this._setFocusToNonEditableCell(rowNum, colNum);
    }


	return wReturn;
};

/**@ 수정 안되는 셀도 포커스가 가는기능(익스플로러 제외한 브라우저에서 클릭시 포커스가 가게 하려면 TabIndex 속성이 반드시 있어야 한다) */
DataSheet.prototype._setFocusToNonEditableCell = function(rowNum, colNum){
    // functionname : [DataSheet._setFocusToNonEditableCell]
    var wCell = this.cellOf(rowNum, colNum);
    
    if (browserDetect.browser != "Explorer"){
	    wCell.setAttribute("tabindex", 9999);
    }
    // IE8 이하에서 콘트롤이 가려진 상태라면 포커스문은 오류이다, try문으로 커버
    try {
      wCell.focus();
    } catch(e){}
    
    // 포커스가 있는 셀에 해당되는 rowHeader, colHeader 의 className 변경
    this.setPickHeaderClass(rowNum, colNum, "Pick");
    
//	    call_sheet_onmousemove(wCell); //setRowClass()
	
};
DataSheet.prototype.moveToRow = function(rowNum){
    // functionname : [DataSheet.moveToRow]

	// if (rowNum == this.currentRow) return;
	var wColNum = (this.currentCol == 0 ? 1 : this.currentCol);
	this.moveTo(rowNum, wColNum);

	return;
};

DataSheet.prototype.moveTo = function(rowNum, colNum){
    // functionname : [DataSheet.moveTo]
    if (rowNum > this.maxRows || colNum > this.maxCols) return;
    
    var calendarDiv = document.getElementById("calendarDiv");
	if(calendarDiv != null){
		if(calendarDiv.style.display != "none"){
			closeCalendar();
		}
	}
	
    var wDataCell = this.rows[rowNum].cells[colNum];
    var wCellType = wDataCell.celltype;
    
	//var rowChanged = (rowNum != this.currentRow);
	
    // 주의: 반드시 shtControlSet동작후에 CurrentRow,Col을 변경한다
	var oldRowNum = this.currentRow;
	var oldColNum = this.currentCol;
	
this.setCurrentRow(rowNum);
this.setCurrentCol(colNum);

/**@@event sheet_onMoveToFocus**/
//		// 포커싱된 셀에 스타일을 부여한다.
//    	if (oldRowNum != 0 && oldColNum != 0 && (oldRowNum != this.currentRow || oldColNum != this.currentCol)){
//    		this.setRowClass(this.clickedTR, "");
//            this.setColClass(this.clickedTR, this.clickedCOL, "");
//    	}
//    	if (this.focusedCell != null){
//    		this.setRowClass(this.clickedTR.rowIndex, "");
//            this.setColClass(this.clickedTR.rowIndex, this.clickedCOL, "");
//    	}
//    	
//		this.setRowClass(rowNum, "MoveStyle");
//		this.setColClass(rowNum, colNum, "MoveStyle");

    var wCell = this.cellOf(rowNum, colNum);
    this.focusedCell = wCell;
    
	var lockMode = (wDataCell.lockMode && this.permitFocusToLockedCell);
	var controlSetted = false;
	
	// 선택한 셀로 스크롤한다
	if (!controlSetted && (oldRowNum != this.currentRow || oldColNum != this.currentRow)){
		this.scrollTo(rowNum, colNum);
	}
	
	if (lockMode || wDataCell.hidden){
    	this._hideCellCombo();
    	this._hideCellEdit();
    	this._setFocusToNonEditableCell(rowNum, colNum);

	} else if (wCellType  == CELLTYPE_CHECKBOX) {
    	this._hideCellCombo();
    	this._hideCellEdit();
    	this._setFocusToNonEditableCell(rowNum, colNum);

	} else if (wCellType == CELLTYPE_BUTTON) { 
    	this._hideCellCombo();
    	this._hideCellEdit();
    	this._setFocusToNonEditableCell(rowNum, colNum);
    
	} else if (wCellType == CELLTYPE_PICTURE) { 
    	this._hideCellCombo();
    	this._hideCellEdit();
    	this._setFocusToNonEditableCell(rowNum, colNum);
  
	} else if (wCellType == CELLTYPE_DATE) {
    	this.shtControlSet(rowNum, colNum);
    	controlSetted = true;
    	
		var format = wDataCell.checkFormat;
		switch(format){
        case format = 2: 
        	format = "yyyy";
        	break;
        case format = 1: 
        	format = "yyyymm";
        	break;
        case format = 0: 
        	format = "yyyymmdd";
        	break;
       }
		popUpCalendar(this.textControl,this.textControl, format);
    	this.textControl.select();
    	
	} else {
  	this.shtControlSet(rowNum, colNum);
  	controlSetted = true;
  }
	
	this.refreshOddEven((oldRowNum < rowNum ? oldRowNum : rowNum));


// // 사용자 코딩 추가영역을 호출한다
// if (this.sheetType == SHEETTYPE_LISTSHEET){
// if (this.hasRowChangeEvent) this.fncRowChangeEvent(oldRowNum, rowNum);
// } else {
// if (this.hasRowChangeEvent) this.fncRowChangeEvent(oldRowNum, rowNum,
// this.rows[rowNum].objectSeq);
// }

  return;
};

DataSheet.prototype.scrollTo = function(rowNum, colNum){
    // functionname : [DataSheet.scrollTo]
	return;
	
    if (rowNum > this.maxRows || colNum > this.maxCols) return;

    var wTable = this.dataTable;
    var wCanSee = false; var wCanSee2 = true;
    var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];
    var dataPanel = this.dataPanel;
    var datatable = dataPanel.getElementsByTagName("TABLE");
    var contentHeight = this.tagObject.getElementsByTagName("DIV")[2].offsetHeight;

    var wColNum = (colNum == 0 ? 1 : colNum);
    var wRowNum = (rowNum == 0 ? 1 : rowNum);
    var wSheetRow = this.rowNumOf(wRowNum, wColNum, CONV_LOGICAL_SHEET);
    var wSheetCol = this.colNumOf(wRowNum, wColNum, CONV_LOGICAL_SHEET);
    
    /** 컬럼 이동 중에는 "줄단위 스크롤 동작 안함" **/
    if(!wIsColumnMove){
    /** --------------------------------줄단위 스크롤-----------------------------------------------**/
    // 고정줄에 있으면 스킵한다
    	var wRowTop = 0;
    	var wCoveredTop = (-1) * wTable.scrollTop;
    	var spanRow = 0;
      wCanSee = (wSheetRow <= this.frozenRows);
      if (!wCanSee){
      	
      	var rowCount = this.headRows + (this.frozenRows * this.rowsPerDataRow);
      	for (var wRowNum = 0; wRowNum < rowCount; wRowNum++){
      		if(wRowNum >= this.headRows){
          		var sheetRow = Math.floor(wRowNum / this.rowsPerDataRow);
          		var logRow = (sheetRow % this.rowsPerDataRow == 0? sheetRow/this.rowsPerDataRow-1: sheetRow % this.rowsPerDataRow);
          		if(this.cellOf(logRow, 1).parentNode.style.display == "none") continue;
          	}
              wCoveredTop += this._getRealHeight(wRowNum);
          }
          
      	rowCount = (wSheetRow + this.headRows - 1);
          for (var wRowNum = 0; wRowNum < rowCount; wRowNum++){
          	if(wRowNum >= this.headRows){
          		var sheetRow = Math.floor(wRowNum / this.rowsPerDataRow);
          		var logRow = (sheetRow % this.rowsPerDataRow == 0? sheetRow/this.rowsPerDataRow-1: sheetRow % this.rowsPerDataRow);
          		if(this.cellOf(logRow, 1).parentNode.style.display == "none") continue;
          	}
              wRowTop += this._getRealHeight(wRowNum);
          }
          
          var wRowBottom = wRowTop + this._getRealHeight((this.rowsPerDataRow * rowNum) + this.headRows - 1) + this.moveBottomTableHeight;
          
          // 현재 가시권에 있으면 스킵한다.
          wCanSee = (wRowTop + parseIntSize(wTable.style.top) >= wCoveredTop  && 
          		   wRowBottom + parseIntSize(wTable.style.top) <=  contentHeight);
          
          var scrollSheetRow = wSheetRow + this.headRows - 1 + this.rowSpanCells[this.colNumOf(wSheetRow, wSheetCol, CONV_SHEET_LOGICAL)];
      	for (var wRowNum = wSheetRow + this.headRows - 1; wRowNum < scrollSheetRow; wRowNum++){
          	if(this.cellOf(rowNum, colNum).parentNode.style.display == "none") continue;
          	spanRow += this._getRealHeight(wRowNum);
          }
      	
          wCanSee2 = (wRowTop + spanRow + parseIntSize(wTable.style.top) >= wCoveredTop  && 
        		    wRowTop + spanRow  + parseIntSize(wTable.style.top) <= dataPanel.clientHeight);
      }

      // 가려는 줄번호로 스크롤 한다
      if (!wCanSee2)  {
      	wRowTop = wRowTop - wCoveredTop;
      	wRowTop += 1; //시트의 위치는 -1 이다
      	scrollPanel.scrollTop = wRowTop;
      	for(var i=0; i<datatable.length; i++){
		 if(datatable[i].getAttribute("name") == "dataTable") datatable[i].style.top = (-1) * wRowTop + 'px';
		 else if(datatable[i].getAttribute("name") == "leftRowTable") datatable[i].style.top = (-1) * wRowTop + 'px';
		 else if(datatable[i].getAttribute("name") == "rightRowTable") datatable[i].style.top = (-1) * wRowTop + 'px';
      	}
      	wCanSee = true;
      }
      // 가려는 줄번호로 스크롤 한다
      if (!wCanSee)  {
      	wCoveredTop=0;
      	for (var wRowNum = 0; wRowNum < 1; wRowNum++){
              wCoveredTop += this._getRealHeight(wRowNum);
      	}
      	wRowTop = wRowTop - spanRow - (dataPanel.clientHeight - (wCoveredTop+this.moveBottomTableHeight)) + 2;
      	wRowTop += 1; //시트의 위치는 -1 이다
      	scrollPanel.scrollTop = wRowTop;
      	for(var i=0; i<datatable.length; i++){
      		if(datatable[i].getAttribute("name") == "dataTable") datatable[i].style.top = (-1) * wRowTop + 'px';
      		else if(datatable[i].getAttribute("name") == "leftRowTable") datatable[i].style.top = (-1) * wRowTop + 'px';
      		else if(datatable[i].getAttribute("name") == "rightRowTable") datatable[i].style.top = (-1) * wRowTop + 'px';
      	}
      }
    }
    
    /** -----------------------------칼럼단위 단위 스크롤----------------------------------------------**/
    // 고정열에 있으면 스킵한다
    wCanSee = false;
    var dataRow = this.addHeaderRows;
    var leftCol = this.colNumOf(1, this.frozenCols, CONV_SHEET_HARD);
    var wColLeft = 0;
    var wColRight = 0;
    var wCoveredLeft = 0;
    if(wSheetCol <= this.frozenCols || wSheetCol >= (this.frozenColsRight[0]>0? this.frozenColsRight[0]: 9999999999)) return;
    
    for (var wColNum = 0; wColNum <= leftCol; wColNum++)
    	wCoveredLeft += (parseIntSize(wTable.tBodies[0].rows[dataRow].cells[wColNum].style.width) + 1); // 여기서 1은 줄간격
    
    var wArr = this.tagObject.getAttribute("cellsize").split(";");
    var parseWidth= 0;
    for (var i = 0; i < wSheetCol; i++){
    	parseWidth = parseInt(wArr[i]) + 1;
    	wColLeft += isNaN(parseWidth)? 0: parseWidth;
    }
    
    for (var i = this.maxCols; i >= this.frozenColsRight[0]; i--) {
    	parseWidth = parseInt(wArr[i]) + 1;
    	wColRight += isNaN(parseWidth)? 0: parseWidth;
    }
    
    // 현재 가시권에 있으면 스킵한다.
    wCanSee = (wColLeft  + parseIntSize(wTable.style.left) >= wCoveredLeft && 
               wColLeft  + parseIntSize(wTable.style.left) <= dataPanel.clientWidth);
    
    // 가려는 열번호로 스크롤 한다
    if (!wCanSee){
    	var colsRightScroll = 0;
    	var rightTableWidth = (this.rightRowTable != null? this.rightRowTable.clientWidth: 0);
    	var leftTableWidth = (this.leftRowTable != null? this.leftRowTable.clientWidth: 0);
    	var cellPadding = 1;
    	var rightCol = this.colNumOf(1, wSheetCol, CONV_SHEET_HARD);
    	if(Browser.opera) cellPadding = 2;
    	for(var i=0; i<=rightCol; i++){
//        		colsRightScroll += wTable.rows[dataRow].cells[i].clientWidth + cellPadding;
    		colsRightScroll += (wTable.rows[dataRow].cells[i].style.width.match(/^-?\d+/)[0]*1) + cellPadding;
    	}
    	if(colsRightScroll + rightTableWidth-(wTable.style.left.match(/^-?\d+/)[0]*1) > this.scrollPanel.clientWidth){
    		cellPadding = 1;
    		if(Browser.firefox) cellPadding = 2;
    		if(Browser.ie) cellPadding = 0;
    		wColLeft = colsRightScroll - wCoveredLeft - (dataPanel.clientWidth - rightTableWidth - leftTableWidth - cellPadding);
    		if(wColLeft<0) wColLeft = 0;
    		if(wIsColumnMove) moveScrollLeft = wColLeft;
    		
    		scrollPanel.scrollLeft = wColLeft;
  		    if(this.dataTable != null) this.dataTable.style.left = (-1) * wColLeft + 'px';
	 	    else if(this.colHeadTable != null) this.colHeadTable.style.left = (-1) * wColLeft + 'px';
	    else if(this.rightColHeadTable != null) this.rightColHeadTable.style.left = (-1) * wColLeft + 'px';
    	}
    	return;
    }
    // 가려는 열번호로 스크롤 한다
    if (!wCanSee)  {
    	wColLeft = wColLeft  - wCoveredLeft;
    	wColLeft += 1; //시트의 위치는 -1 이다
    	if(wIsColumnMove) moveScrollLeft = wColLeft;
    	
    	scrollPanel.scrollLeft = wColLeft;
		if(this.dataTable != null) this.dataTable.style.left = (-1) * wColLeft + 'px';
    else if(this.colHeadTable != null) this.colHeadTable.style.left = (-1) * wColLeft + 'px';
 	else if(this.rightColHeadTable != null) this.rightColHeadTable.style.left = (-1) * wColLeft + 'px';
    }
    
    return;
};

DataSheet.prototype._getRealHeight = function(hardRowNum){
    // functionname : [DataSheet._getRealHeight]

	var wTable = this.dataTable;
	var rowTag = wTable.tBodies[0].rows[hardRowNum];
		
	var rowStyle = rowTag.currentStyle ? rowTag.currentStyle : getComputedStyle(rowTag, null);
	
    var rowHeight = rowTag.offsetHeight;
    if (rowHeight == 0){
    	if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) <= 7) {
            // hasAttribute 메서드 지원 불가
    		if (rowTag.getAttribute("height") != null && rowTag.getAttribute("height") != undefined && rowTag.getAttribute("height").length > 0){
            	rowHeight = parseIntSize(rowTag.getAttribute("height"));
            } else if (rowStyle != null &&  rowStyle.height.length > 0){
            	rowHeight = parseIntSize(rowStyle.height);
            } else {
            	rowHeight = 19;  // 디폴트 사이즈
            }
    	} else {
            if (rowTag.hasAttribute("height") && rowTag.getAttribute("height").length > 0){
            	rowHeight = parseIntSize(rowTag.getAttribute("height"));
            } else if (rowStyle != null &&  rowStyle.height.length > 0){
            	rowHeight = parseIntSize(rowStyle.height);
            } else {
            	rowHeight = 19;  // 디폴트 사이즈
            }
    	}
    	
    	
    }
    
    return rowHeight;
	
};


DataSheet.prototype.isVisibleCol = function(colNum){
    // functionname : [DataSheet.isVisibleCol]
	// 확인할것
	return;

    var wTable = this.dataTable;
    var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];

    // 현재 가시권에 있거나 고정줄에 있으면 스킵한다
    var wColNum = (colNum == 0 ? 1 : colNum);
    var wRowNum = (rowNum == 0 ? 1 : rowNum);
    var wSheetColNum = this.colNumOf(wRowNum, wColNum, CONV_LOGICAL_SHEET);
    var wSheetRowNum = this.rowNumOf(wRowNum, wColNum, CONV_LOGICAL_SHEET);
    var wHardColNum  = this.colNumOf(wRowNum, wColNum, CONV_LOGICAL_HARD);

    var dataRow = (wSheetRowNum % this.rowsPerDataRow == 0? this.rowsPerDataRow: wSheetRowNum % this.rowsPerDataRow) + this.addHeaderRows;
    // 현재 가시권에 있거나 고정열에 있으면 스킵한다
    if (wSheetColNum <= this.frozenCols || (wSheetColNum >= this.frozenColsRight[0] && this.frozenColsRight[0] > 0)){
        return true;
    }

    var wCoveredLeft = 0;
    var wHardRow = wTable.tBodies[0].rows[0];
    for (var wColNum = 0; wColNum < this.headCols + this.frozenCols; wColNum++)
        wCoveredLeft += (parseIntSize(wHardRow.cells[wColNum].style.width) + 1); // 여기서 1은 줄간격
    
    var wColLeft = 0;
    var wArr = this.tagObject.getAttribute("cellsize").split(";");
  for (var i = 0; i < wHardColNum; i++) 
        wColLeft += parseInt(wArr[i]) + 1;
       
    var wCanSee = (wColLeft - scrollPanel.scrollLeft >= wCoveredLeft && 
               wColLeft <= scrollPanel.scrollLeft + parseIntSize(scrollPanel.style.width));

    
    return wCanSee;
};

DataSheet.prototype.isVisibleRow = function(rowNum){
    // functionname : [DataSheet.isVisibleRow]
	// 확인할것
	return;

    var wTable = this.dataTable;
    var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];

    // 현재 가시권에 있거나 고정줄에 있으면 스킵한다
    var wColNum = (colNum == 0 ? 1 : colNum);
    var wRowNum = (rowNum == 0 ? 1 : rowNum);
    var wSheetRowNum = this.rowNumOf(wRowNum, wColNum, CONV_LOGICAL_SHEET);
    
    if (wSheetRowNum <= this.frozenRows) {
        return true;
    }
    
    var wCoveredTop = (-1) * wTable.scrollTop;
    for (var wRowNum = 0; wRowNum < this.headRows + this.frozenRows; wRowNum++)
        wCoveredTop += wTable.tBodies[0].rows[wRowNum].offsetHeight;
    
    var wRowTop = 0;
    for (var wRowNum = 0; wRowNum < rowNum + this.headRows - 1; wRowNum++)
        wRowTop += wTable.tBodies[0].rows[wRowNum].offsetHeight;
    
    var wCanSee = (wRowTop - scrollPanel.scrollTop >= wCoveredTop  && 
                   wRowTop <= scrollPanel.scrollTop + parseIntSize(scrollPanel.style.height));
    return wCanSee;
};

DataSheet.prototype.moveToFirstCell = function(rowNum){
	// 여러줄일때 가장 마지막줄 첫번째 컬럼으로 이동
	var colNum = 1;
	for(var i=1; i<=this.maxCols; i++){
		if(this.columns[i].sheetCol == 1) colNum = i;
	}
	// 숨겨진 셀이면 다음으로 이동한다
    var wDataCell = this.rows[rowNum].cells[colNum];
    if (this.rowLocked(rowNum)){
    	// 통과
    } else if (wDataCell.hidden || (wDataCell.lockMode && !this.permitFocusToLockedCell)){
    	var sheetRow = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
    	this.moveTorowSpanPrevRow = sheetRow % this.rowsPerDataRow == 0? this.rowsPerDataRow: sheetRow % this.rowsPerDataRow;
    	
		this.moveToNextCell(this.cellOf(rowNum, colNum));
        return;
	}
	
    //if(wCellType == CELLTYPE_CHECKBOX) this.setColClass(this.clickedCOL, "commonCheckboxStyle"); 
    //this.setColClass(this.clickedCOL, "");
    
	// this.scrollTo(rowNum, colNum);
	this.moveTo(rowNum, colNum);
    return;
	
};

// 같은 줄의 아래쪽 셀로 이동 가장 아래까지 내려오면 다시 맨위 옆칸으로 간다.
DataSheet.prototype.moveToDownNextCell = function(cell, rowNum, colNum){
	var found = false;
	// 시트 로우 찾기
	var wSheetRow = 0;
	var wSheetCol = 0;
	var realLogicalRow = 0;
	if(!rowNum || !colNum){
		var wRow = cell.parentNode;
		rowNum = wRow.rowIndex;
		colNum = getCellIndex(cell);
		
		realLogicalRow = this.rowNumOf(rowNum, colNum, CONV_HARD_LOGICAL);
		wSheetRow = this.rowNumOf(rowNum, colNum, CONV_HARD_SHEET);
		wSheetCol = this.colNumOf(rowNum, colNum, CONV_HARD_SHEET);
		
		wSheetRow = wSheetRow % this.rowsPerDataRow == 0? this.rowsPerDataRow: wSheetRow % this.rowsPerDataRow;
		
	}else{
		realLogicalRow = rowNum;
		wSheetRow = this.rowNumOf(1, colNum, CONV_LOGICAL_SHEET);
		wSheetCol = this.colNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
	}
    
	var startCol = this.spanEndColNums[wSheetRow][wSheetCol];
	var endCol = this.spanStartColNums[wSheetRow][wSheetCol];
	
	var sColNum = wSheetCol;
	wSheetCol = this.spanEndColNums[wSheetRow][wSheetCol];
	newRowNum = 0;
	newColNum = 0;
	
	var spanRows = wSheetRow + this.rowSpanCells[this.colNumOf(wSheetRow, wSheetCol, CONV_SHEET_LOGICAL)]; // 현재 선택된 셀의 세로 span을 고려한 row 번호
	
	// 한칸 밑으로 이동 할지 다음 컬럼으로 갈지 정한다.
	// 마지막 줄일 경우 다음 컬럼 으로 이동
for(var i=spanRows + 1; i<=this.rowsPerDataRow + 1 && !found; i++){
	// 끝셀인 경우
	var isLastRow = (realLogicalRow >= this.maxRows); // 마지막 줄인지 체크
	if(wSheetCol > this.PhysicalMaxCols){
		if(isLastRow && spanRows >= this.rowsPerDataRow){
			// 마지막 셀에서 줄추가 버튼이 있으면 한줄을 추가한다.
			if (this.sheetType == SHEETTYPE_DATASHEET && !found && this.addRowAtEnd){
				var lRowNum = this.rowNumOf(wSheetRow, wSheetCol, CONV_SHEET_LOGICAL);
				if (!this.rowLocked(lRowNum)){
					addSeq(this.controlName);
				}
				return;
			}
			// 줄추가 버튼이 없다면 처음 셀로 이동
			wSheetCol = sColNum = 1;
			i = 0;
			realLogicalRow = (realLogicalRow == this.maxRows? 1: realLogicalRow+1);
			continue;
		}
		else{
			wSheetCol = sColNum = 0;
			i = realLogicalRow = (realLogicalRow == this.maxRows? 1: realLogicalRow+1);
		}
	}
	
	var spanColNum = this.rowSpanCells[this.colNumOf(i, wSheetCol, CONV_SHEET_LOGICAL)];
	spanColNum = (spanColNum + i == this.rowsPerDataRow? spanColNum: 0);
	var lastRowCheck = false; // 마지막 줄에서 동작 구분
	var lowerSheetCol = 0; // 이동할 시트 컬럼
	// 마지막 줄일 경우 다음 컬럼 첫번째로 이동, 또는 윗줄이 병합되어 있다면 병합된 칸을 고려하여 옆으로 이동
	if(i + spanColNum > this.rowsPerDataRow){
		for(var j=1; j<this.rowsPerDataRow; j++){
			if(this.spanEndColNums[j][wSheetCol] > wSheetCol) {
				for(var k=j+1; k<this.rowsPerDataRow; k++ ){
					if(this.spanStartColNums[k][wSheetCol] <= wSheetCol && this.spanEndColNums[k][wSheetCol] != wSheetCol){
						if(this.spanEndColNums[i - 1][wSheetCol + 1] <= this.spanEndColNums[k][wSheetCol]){
							j = k;
						}
						else{
							wSheetCol = sColNum = this.spanEndColNums[k][wSheetCol] + 1;
							j = 1;
						}
						break;
					}
				}
				i = j;
				wSheetRow = j+1;
				lastRowCheck = true;
				break;
			}
		}
		if(!lastRowCheck){
			i = 0;
			wSheetCol++;
			sColNum = wSheetCol;
			continue;
		}
	}
	
	if(endCol != startCol && !lastRowCheck){
		lowerSheetCol = this.spanStartColNums[i][wSheetCol];
	}else{
		lowerSheetCol = this.spanEndColNums[i][wSheetCol];
	}
	
	if(lowerSheetCol == 0) continue;
	
	// 오른쪽 옆셀로 이동
	if(wSheetCol < lowerSheetCol){
		i = wSheetRow;
		wSheetCol++;
		sColNum = wSheetCol;
	} 
	
	lowerSheetCol = this.spanEndColNums[i][sColNum];
	if(lowerSheetCol == 0) lowerSheetCol = wSheetCol;;
	
		var logicalRow = realLogicalRow;
	var logicalCol = this.colNumOf(i, lowerSheetCol, CONV_SHEET_LOGICAL);
			
	
	// 숨겨진 셀 이거나 락걸린셀 이동옵션이 false 일때 만 락이 걸린 셀이면 다음으로 이동한다**@@
	var dataCell = this.rows[realLogicalRow].cells[logicalCol];
	if (dataCell.hidden || (dataCell.lockMode && !this.permitFocusToLockedCell)) {
		if(wSheetCol > this.maxCols){
			wSheetCol = 1;
			realLogicalRow++;
		}
		this.moveToDownNextCell(this.cellOf(realLogicalRow, logicalCol));
		return;
	}
	
	found = true;
	newRowNum = logicalRow;
	newColNum = logicalCol;
}
	
	// 찾은 셀로 이동 한다.
	if (found){
    	this.moveTo(newRowNum, newColNum);
    } else { // 못찾으면 첫칼럼이다. 예를 들어 모든셀이 록이면 줄이동등 후속동작이 되지 않는다
    	this.moveTo(rowNum, 1);
    	
    }
    
    return;
};

// 같은 줄의 위쪽쪽 셀로 이동 가장 위까지 올라가면 다시 맨아래 전칸으로 간다.
DataSheet.prototype.moveToFormerDownNextCell = function(cell, rowNum, colNum){
	//moveToDownNextCell 반대로
};

// 뒷셀로 이동, 줄번호와 칼럼번호는 옵션이다.
DataSheet.prototype.moveToNextCell = function(cell, rowNum, colNum){
    // functionname : [DataSheet.moveToNextCell]
    
    // this._hideCellEdit(); // 이걸주면 포커스 이동이 안되고 숨어버림
    rowNum = rowNum || 0;
    colNum = colNum || 0;
    
    if (!rowNum || !colNum){
	    var wRow = cell.parentNode;

    	// 현재 줄번호를 서칭해서 대입하고
	    rowNum = this.rowNumOf(wRow.rowIndex, getCellIndex(cell), CONV_HARD_LOGICAL);
	    colNum = this.colNumOf(wRow.rowIndex, getCellIndex(cell), CONV_HARD_LOGICAL); 
    	
    }
    
    var found = false; var newRowNum = 0; var newColNum = 0;
    // 먼저 현재 행열부터 루핑을 돌고
    for (var wRowNum = rowNum; wRowNum <= this.maxRows && !found; wRowNum++){
        for (var wColNum = 1; wColNum <= this.maxCols && !found; wColNum++){
        	// 다음셀을 구하는 것이므로 자기셀, 또는 전셀은 통과한다
        	if (wRowNum == rowNum && wColNum <= colNum) continue;
        	
        	// 숨겨진 셀 이거나 락걸린셀 이동옵션이 false 일때 만 락이 걸린 셀이면 다음으로 이동한다**@@
        	var dataCell = this.rows[wRowNum].cells[wColNum];
    		if (dataCell.hidden || (dataCell.lockMode && !this.permitFocusToLockedCell)) continue;

        	// 위 두조건을 통과 했으면 찾아진 것이다.
        	newRowNum = wRowNum; 
        	newColNum = wColNum;
        	found = true;
        	break;
        }
        if (found) break;
    }
    
    // 끝까지 찾아도 없고 줄추가 버튼이 있으면 한줄을 추가한다.
    if (this.sheetType == SHEETTYPE_DATASHEET && !found && this.addRowAtEnd){
    	if (!this.rowLocked(rowNum)){
        	addSeq(this.controlName);
    	}
    	return;
    }
    
    
    // 끝까지 찾아도 없으면 처음부터 다시 돌린다
    for (var wRowNum = 1; wRowNum <= rowNum && !found; wRowNum++){
        for (var wColNum = 1; wColNum <= colNum && !found; wColNum++){
        	// 자기셀보다 뒷셀은 통과한다
        	if (wRowNum == rowNum && wColNum >= colNum) continue;
        	
        	// 숨겨진 셀 이거나 락걸린셀 이동옵션이 false 일때 만 락이 걸린 셀이면 다음으로 이동한다**@@
        	var dataCell = this.rows[wRowNum].cells[wColNum];
    		if (dataCell.hidden || (dataCell.lockMode && !this.permitFocusToLockedCell)) continue;
        	
        	// 위 두조건을 통과 했으면 찾아진 것이다.
        	newRowNum = wRowNum; 
        	newColNum = wColNum;
        	found = true;
        	break;
        }
        if (found) break;
    }
    
    if (found){
    	this.moveTo(newRowNum, newColNum);
    } else { // 못찾으면 첫칼럼이다. 예를 들어 모든셀이 록이면 줄이동등 후속동작이 되지 않는다
    	this.moveTo(rowNum, 1);
    	
    }

    return;};

// 앞셀로 이동, 줄번호와 칼럼번호는 옵션이다.
DataSheet.prototype.moveToFormerCell = function(cell, rowNum, colNum){
    // functionname : [DataSheet.moveToFormerCell]

    rowNum = rowNum || 0;
    colNum = colNum || 0;
    if (!rowNum || !colNum){
	    var wRow = cell.parentNode;

    	// 현재 줄번호를 서칭해서 대입하고
	    rowNum = this.rowNumOf(wRow.rowIndex, getCellIndex(cell), CONV_HARD_LOGICAL);
	    colNum = this.colNumOf(wRow.rowIndex, getCellIndex(cell), CONV_HARD_LOGICAL); 
    	
    }
    
    var found = false; var newRowNum = 0; var newColNum = 0;
    // 먼저 현재 행열부터 루핑을 돌고
    for (var wRowNum = rowNum; wRowNum >= 1 && !found; wRowNum--){
        for (var wColNum = this.maxCols; wColNum >= 1 && !found; wColNum--){
        	// 자기셀보다 뒷셀은 통과한다
        	if (wRowNum == rowNum && wColNum >= colNum) continue;
        	
        	// 숨겨진 셀 이거나 락걸린셀 이동옵션이 false 일때 만 락이 걸린 셀이면 다음으로 이동한다**@@
        	var dataCell = this.rows[wRowNum].cells[wColNum];
    		if (dataCell.hidden || (dataCell.lockMode && !this.permitFocusToLockedCell)) continue;

        	// 위 두조건을 통과 했으면 찾아진 것이다.
        	newRowNum = wRowNum; 
        	newColNum = wColNum;
        	found = true;
        	break;
        }
        if (found) break;
    }
    // 끝까지 찾아도 없으면 처음부터 다시 돌린다
    for (var wRowNum = this.maxRows; wRowNum >= rowNum && !found; wRowNum--){
        for (var wColNum = this.maxCols; wColNum >= 1 && !found; wColNum--){
        	// 다음셀을 구하는 것이므로 자기셀, 또는 전셀은 통과한다
        	if (wRowNum == rowNum && wColNum >= colNum) continue;
        	
        	// 숨겨진 셀 이거나 락걸린셀 이동옵션이 false 일때 만 락이 걸린 셀이면 다음으로 이동한다**@@
        	var dataCell = this.rows[wRowNum].cells[wColNum];
    		if (dataCell.hidden || (dataCell.lockMode && !this.permitFocusToLockedCell)) continue;
        	
        	// 위 두조건을 통과 했으면 찾아진 것이다.
        	newRowNum = wRowNum; 
        	newColNum = wColNum;
        	found = true;
        	break;
        }
        if (found) break;
    }
    if (found){
    	this.moveTo(newRowNum, newColNum);
    } else { // 못찾으면 첫칼럼이다. 예를 들어 모든셀이 록이면 줄이동등 후속동작이 되지 않는다
    	this.moveTo(rowNum, 1);
    }

    return;
};

// 윗셀로 이동, 줄번호와 칼럼번호는 옵션이다.
DataSheet.prototype.moveToUpperCell = function(cell, rowNum, colNum){
    // functionname : [DataSheet.moveToUpperCell]
    
    // this._hideCellEdit(); // 이걸주면 포커스 이동이 안되고 숨어버림
    rowNum = rowNum || 0;
    colNum = colNum || 0;
    
    if (!rowNum || !colNum){
	    var wRow = cell.parentNode;

    	// 현재 줄번호를 서칭해서 대입하고
	    rowNum = wRow.rowIndex;
	    colNum = getCellIndex(cell);
    }
    
    var maxRows = (this.maxRows * this.rowsPerDataRow) + this.headRows;
    
    var found = false; 
    var newRowNum = 0; 
    var newColNum = 0;
    var sheetColNum = this.colNumOf(rowNum, colNum, CONV_HARD_SHEET);
    var sRowNum = this.rowNumOf(rowNum, colNum, CONV_HARD_SHEET);
    sRowNum = (sRowNum % this.rowsPerDataRow == 0? this.rowsPerDataRow: sRowNum % this.rowsPerDataRow);
    
    if(this.spanStartColNums[sRowNum][sheetColNum] == this.spanEndColNums[sRowNum][sheetColNum]){
    	this.moveTorowSpanPrevCol = sheetColNum;
    }else{
    	sheetColNum = this.moveTorowSpanPrevCol > 0? this.moveTorowSpanPrevCol: sheetColNum;
    }
    
    var firstLogicalColNum = this.colNumOf(rowNum, colNum, CONV_HARD_LOGICAL);
    // 먼저 현재 행열부터 루핑을 돌고
    for (var wRowNum = rowNum - 1; wRowNum >= this.headRows && !found; wRowNum--){
    	var sheetRowNum = wRowNum - this.headRows + 1;
	    var columnSheetRow = (sheetRowNum % this.rowsPerDataRow == 0? this.rowsPerDataRow: sheetRowNum % this.rowsPerDataRow);
	    
	    // logical 번호를 구한다.
  	var LogicalColNum = null;
  	var LogicalRowNum = this.rowNumOf(sheetRowNum, sheetColNum, CONV_SHEET_LOGICAL);
  	
  	// 줄 바뀌는 구간 판단
	    if(columnSheetRow == this.rowsPerDataRow){
	    	LogicalColNum = firstLogicalColNum;
	    }
	    else{
	    	var LowSpanNum = this.colNumOf(sheetRowNum, sheetColNum, CONV_SHEET_LOGICAL);
    	    var rowSpan = this.rowSpanCells[LowSpanNum];
    	    var moveCellSpanInfo = this.spanEndColNums[columnSheetRow][sheetColNum];
	    	if(rowSpan == 0 && moveCellSpanInfo > 0){
	    		LogicalColNum = this.colNumOf(sheetRowNum, moveCellSpanInfo, CONV_SHEET_LOGICAL);
	    	}
	    	// rowspan 확인
	    	else{
    	    	sheetRowNum++;
    	    	for(var row=columnSheetRow; row>=1; row--){
    	    		var colnum = this.moveTorowSpanPrevCol > 0? this.moveTorowSpanPrevCol: this.spanEndColNums[row][sheetColNum];
    	    		sheetRowNum--;
    	    		if(colnum > 0){
    	    			LogicalColNum = this.colNumOf(sheetRowNum, colnum, CONV_SHEET_LOGICAL);
    	    			LogicalRowNum = this.rowNumOf(sheetRowNum, colnum, CONV_SHEET_LOGICAL);
    	    			break;
    	    		}
    	    	}
    	    	// 줄 바뀌는 구간 다시 판단
    	    	columnSheetRow = (sheetRowNum % this.rowsPerDataRow == 0? this.rowsPerDataRow: sheetRowNum % this.rowsPerDataRow);
        	    if(columnSheetRow == this.rowsPerDataRow){
        	    	LogicalColNum = firstLogicalColNum;
        	    }
    	    }
	    }
	    
    	var lowerTrHidden = this.cellOf(LogicalRowNum, LogicalColNum).parentNode.style.display == "none";
    	// 숨겨진 셀이면 다음으로 이동한다
    	if (this.rows[LogicalRowNum].cells[LogicalColNum].hidden || lowerTrHidden) continue;
    	
    	// 락이 걸린 셀이면 다음으로 이동한다 
    	if (this.rows[LogicalRowNum].cells[LogicalColNum].lockMode && !this.permitFocusToLockedCell) continue;
    	
    	// 위 두조건을 통과 했으면 찾아진 것이다.
    	newRowNum = LogicalRowNum; 
    	newColNum = LogicalColNum; 
    	found = true;
    	break;
    }
    
	// 한줄 밖에 없다면 처음부터 다시 돌릴필요 없다.
    var oneRow = false;
    if(maxRows == this.rowsPerDataRow + this.headRows) oneRow = true;
    
    if(!oneRow){
    	// 끝까지 찾아도 없으면 처음부터 다시 돌린다
    	for (var wRowNum = maxRows - this.rowsPerDataRow; wRowNum >= this.headRows && !found; wRowNum++){
    		var sheetRowNum = wRowNum - this.headRows + 1;
    		
    		// logical 번호를 구한다.
    		var LogicalColNum = firstLogicalColNum;
    		var LogicalRowNum = this.rowNumOf(sheetRowNum, sheetColNum, CONV_SHEET_LOGICAL);
    		
    		var lowerTrHidden = this.cellOf(LogicalRowNum, LogicalColNum).parentNode.style.display == "none";
    		// 숨겨진 셀이면 다음으로 이동한다
    		if (this.rows[LogicalRowNum].cells[LogicalColNum].hidden || lowerTrHidden) continue;
    		
    		// 락이 걸린 셀이면 다음으로 이동한다 
    		if (this.rows[LogicalRowNum].cells[LogicalColNum].lockMode && !this.permitFocusToLockedCell) continue;
    		
    		// 위 두조건을 통과 했으면 찾아진 것이다.
    		newRowNum = LogicalRowNum; 
    		newColNum = LogicalColNum; 
    		found = true;
    		break;
    	}
    }
    
    if (found){
    	this.moveTorowSpanPrevRow = -1;
    	this.moveTo(newRowNum, newColNum);
    } else { // 못찾으면 첫칼럼이다. 예를 들어 모든셀이 록이면 줄이동등 후속동작이 되지 않는다
    	this.moveTo(rowNum, colNum);
    }

    return;
};

// 아랫셀로 이동, 줄번호와 칼럼번호는 옵션이다.
DataSheet.prototype.moveToLowerCell = function(cell, rowNum, colNum){
    // functionname : [DataSheet.moveToLowerCell]
    
    // this._hideCellEdit(); // 이걸주면 포커스 이동이 안되고 숨어버림
    rowNum = rowNum || 0;
    colNum = colNum || 0;
    
    if (!rowNum || !colNum){
	    var wRow = cell.parentNode;

    	// 현재 줄번호를 서칭해서 대입하고
	    rowNum = wRow.rowIndex;
	    colNum = getCellIndex(cell);
    }
    
    var maxRows = (this.maxRows * this.rowsPerDataRow) + this.headRows;
    
    var found = false; 
    var newRowNum = 0; 
    var newColNum = 0;
    var sheetColNum = this.colNumOf(rowNum, colNum, CONV_HARD_SHEET);
    var sRowNum = this.rowNumOf(rowNum, colNum, CONV_HARD_SHEET);
    sRowNum = (sRowNum % this.rowsPerDataRow == 0? this.rowsPerDataRow: sRowNum % this.rowsPerDataRow);
    
    if(this.spanStartColNums[sRowNum][sheetColNum] == this.spanEndColNums[sRowNum][sheetColNum]){
    	this.moveTorowSpanPrevCol = sheetColNum;
    }else{
    	sheetColNum = this.moveTorowSpanPrevCol > 0? this.moveTorowSpanPrevCol: sheetColNum;
    }
    
    var firstLogicalColNum = this.colNumOf(rowNum, colNum, CONV_HARD_LOGICAL);
    
    // rowspan 되어 있을경우 처리
    var LowSpanNum = this.colNumOf(rowNum - this.headRows + 1, sheetColNum, CONV_SHEET_LOGICAL);
  var LastrowSpan = this.rowSpanCells[LowSpanNum];
  var LastColumnRow = (rowNum + 1 - this.headRows + 1 % this.rowsPerDataRow == 0? this.rowsPerDataRow: rowNum + 1 - this.headRows + 1 % this.rowsPerDataRow);
  // 마지막 줄에서 rowspan 되어 있을경우 rowNum을 span된만큼 + 해준다.
  rowNum += (maxRows == LastColumnRow - 1 + LastrowSpan + this.headRows? LastrowSpan: 0);
    
    // 먼저 현재 행열부터 루핑을 돌고
    for (var wRowNum = rowNum + 1; wRowNum < maxRows && !found; wRowNum++){
    	var sheetRowNum = wRowNum + LastrowSpan - this.headRows + 1;
	    var columnSheetRow = (sheetRowNum % this.rowsPerDataRow == 0? this.rowsPerDataRow: sheetRowNum % this.rowsPerDataRow);
	    
	    // logical 번호를 구한다.
  	var LogicalColNum = null;
  	var LogicalRowNum = this.rowNumOf(sheetRowNum, sheetColNum, CONV_SHEET_LOGICAL);
  	
  	// 줄 바뀌는 구간 판단
	    if(columnSheetRow == 1){
	    	LogicalColNum = firstLogicalColNum;
	    }
	    else{
	    	var LowSpanNum = this.colNumOf(sheetRowNum, sheetColNum, CONV_SHEET_LOGICAL);
    	    var rowSpan = this.rowSpanCells[LowSpanNum];
    	    var moveCellSpanInfo = this.spanEndColNums[columnSheetRow][sheetColNum];
	    	if(rowSpan == 0 && moveCellSpanInfo > 0){
	    		LogicalColNum = this.colNumOf(sheetRowNum, moveCellSpanInfo, CONV_SHEET_LOGICAL);
	    	}
	    	// rowspan 확인
	    	else{
    	    	sheetRowNum--;
    	    	for(var row=columnSheetRow; row>=1; row--){
    	    		var colnum = this.moveTorowSpanPrevCol > 0? this.moveTorowSpanPrevCol: this.spanEndColNums[row][sheetColNum];
    	    		sheetRowNum++;
    	    		if(colnum > 0){
    	    			LogicalColNum = this.colNumOf(sheetRowNum, colnum, CONV_SHEET_LOGICAL);
    	    			LogicalRowNum = this.rowNumOf(sheetRowNum, colnum, CONV_SHEET_LOGICAL);
    	    			break;
    	    		}
    	    	}
    	    	// 줄 바뀌는 구간 다시 판단
    	    	columnSheetRow = (sheetRowNum % this.rowsPerDataRow == 0? this.rowsPerDataRow: sheetRowNum % this.rowsPerDataRow);
        	    if(columnSheetRow == 1){
        	    	LogicalColNum = firstLogicalColNum;
        	    }
    	    }
	    }
	    
    	var lowerTrHidden = this.cellOf(LogicalRowNum, LogicalColNum).parentNode.style.display == "none";
    	// 숨겨진 셀이면 다음으로 이동한다
    	if (this.rows[LogicalRowNum].cells[LogicalColNum].hidden || lowerTrHidden) continue;
    	
    	// 락이 걸린 셀이면 다음으로 이동한다 
    	if (this.rows[LogicalRowNum].cells[LogicalColNum].lockMode && !this.permitFocusToLockedCell) continue;
    	
    	// 위 두조건을 통과 했으면 찾아진 것이다.
    	newRowNum = LogicalRowNum; 
    	newColNum = LogicalColNum; 
    	found = true;
    	break;
    }
    
    // 한줄 밖에 없다면 처음부터 다시 돌릴필요 없다.
    var oneRow = false;
    if(maxRows == this.rowsPerDataRow + this.headRows) oneRow = true;
    	
    if(!oneRow){
    	// 끝까지 찾아도 없으면 처음부터 다시 돌린다
    	for (var wRowNum = this.headRows; wRowNum < rowNum && !found; wRowNum++){
    		var sheetRowNum = wRowNum + LastrowSpan - this.headRows + 1;
    		
    		// logical 번호를 구한다.
    		var LogicalColNum = firstLogicalColNum;
    		var LogicalRowNum = this.rowNumOf(sheetRowNum, sheetColNum, CONV_SHEET_LOGICAL);
    		
    		var lowerTrHidden = this.cellOf(LogicalRowNum, LogicalColNum).parentNode.style.display == "none";
    		// 숨겨진 셀이면 다음으로 이동한다
    		if (this.rows[LogicalRowNum].cells[LogicalColNum].hidden || lowerTrHidden) continue;
    		
    		// 락이 걸린 셀이면 다음으로 이동한다 
    		if (this.rows[LogicalRowNum].cells[LogicalColNum].lockMode && !this.permitFocusToLockedCell) continue;
    		
    		// 위 두조건을 통과 했으면 찾아진 것이다.
    		newRowNum = LogicalRowNum; 
    		newColNum = LogicalColNum; 
    		found = true;
    		break;
    	}
    }
    
    if (found){
    	this.moveTorowSpanPrevRow = -1;
    	this.moveTo(newRowNum, newColNum);
    } else { // 못찾으면 첫칼럼이다. 예를 들어 모든셀이 록이면 줄이동등 후속동작이 되지 않는다
    	this.moveTo(rowNum, colNum);
    }

    return;
};

// 좌측셀로 이동, 줄번호와 칼럼번호는 옵션이다.
DataSheet.prototype.moveToLeftCell = function(rowNum, colNum){
    // functionname : [DataSheet.moveToLeftCell]

//    	if (colNum == 1) {
//    		rowNum--;
//    		colNum = this.maxCols + 1;
//    		return;
//    	}
//    	if (rowNum < 1) {
//    		rowNum = this.maxRows;
//    		colNum = this.maxCols + 1;
//    	}
	
  colNum = this._focusableLeftColNum(rowNum, colNum);
  
  if (colNum != -1) {
  	this.moveTo(rowNum, colNum);
  }

    return;
};

// 우측셀로 이동, 줄번호와 칼럼번호는 옵션이다.
DataSheet.prototype.moveToRightCell = function(rowNum, colNum){
    // functionname : [DataSheet.moveToRightCell]
	
//    	if (colNum == this.maxCols) {
//    		rowNum++;
//    		colNum = 0;
//    		return;
//    	}
//    	if (rowNum > this.maxRows) {
//    		rowNum = 1;
//    		colNum = 0;
//    	}

	colNum = this._focusableRightColNum(rowNum, colNum);
  if (colNum != -1) {
  	this.moveTo(rowNum, colNum);
  }
    return;
};

DataSheet.prototype._focusableRightColNum = function(rowNum, colNum) {
    // functionname : [DataSheet._focusableRightColNum]
	var wColNum = -1;
    
	// 시트 로우와 시트 컬럼을 찾는다.
    var wSheetRow = this.rowNumOf(1, colNum, CONV_LOGICAL_SHEET);
    var wSheetCol = this.colNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
    
    // 병합이 있다면 병합된 셀의 마지막 시트컬럼을 가져온다.
    wSheetCol = this.spanEndColNums[wSheetRow][wSheetCol];
    
    // 다음 이동할 셀이 세로병합 되어있는지 판단하여 그다음셀로 갈때 판단할 시트로우를 저장
    var nextSheetCol = this.spanEndColNums[wSheetRow][wSheetCol + 1];
    var nowSheetCol = this.spanEndColNums[wSheetRow][wSheetCol];
    if(wSheetCol < this.PhysicalMaxCols){
    	if(nextSheetCol == 0 && nowSheetCol > 0){
    		this.moveTorowSpanPrevRow = wSheetRow;
    	}else{
    		wSheetRow = this.moveTorowSpanPrevRow > -1? this.moveTorowSpanPrevRow: wSheetRow;
    	}
    }
    
    // 포커스가 컬럼 마지막이고 여러줄 이라면 한줄아래 제일 첫번째 셀로 이동
    if(wSheetCol == this.PhysicalMaxCols && this.rowsPerDataRow > 1){
    	wSheetCol = 0;
    	wSheetRow++;
    	this.moveTorowSpanPrevRow = wSheetRow;
    }
    
    // wSheetRow는 this.rowsPerDataRow 보다 클 수 없다.
    if(wSheetRow > this.rowsPerDataRow) {
    	this.moveTorowSpanPrevRow = this.rowsPerDataRow;
    	return wColNum;
    }
    
    // 이동할 셀을 찾는다.
    for(var i=wSheetCol + 1; i<=this.PhysicalMaxCols; i++){
    	var spanColNum = this.spanEndColNums[wSheetRow][i];
    	if(spanColNum == 0) spanColNum = i;
    	
    	var logicalRow = this.rowNumOf(wSheetRow, spanColNum,CONV_SHEET_LOGICAL);
    	var logicalCol = this.colNumOf(wSheetRow, spanColNum,CONV_SHEET_LOGICAL);
    	
    	var wDataCell = this.rows[logicalRow].cells[logicalCol];
    	
    	// 숨어 있거나 락모드 셀이면 통과
    	if(wDataCell.hidden || (wDataCell.lockMode && !this.permitFocusToLockedCell)){
    		if(i == this.PhysicalMaxCols){
    			wSheetCol = 0;
    			wSheetRow++;
    		}
    		continue;
    	}
    	
    	wColNum = logicalCol;
    	this.moveTorowSpanPrevCol = -1;
    	break;
    }
    
  return wColNum;
};

DataSheet.prototype._focusableLeftColNum = function(rowNum, colNum) {
    // functionname : [DataSheet._focusableRightColNum]
	var wColNum = -1;
    
	// 시트 로우와 시트 컬럼을 찾는다.
    var wSheetRow = this.rowNumOf(1, colNum, CONV_LOGICAL_SHEET);
    var wSheetCol = this.colNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
    
    // 병합이 있다면 병합된 셀의 마지막 시트컬럼을 가져온다.
    wSheetCol = this.spanStartColNums[wSheetRow][wSheetCol];
    
    // 다음 이동할 셀이 세로병합 되어있는지 판단하여 그다음셀로 갈때 판단할 시트로우를 저장
    var formerSheetCol = (wSheetCol == 1)? -1: this.spanStartColNums[wSheetRow][wSheetCol - 1];
    var nowSheetCol = this.spanEndColNums[wSheetRow][wSheetCol];
    if(wSheetCol > 0){
    	if(formerSheetCol == 0 && nowSheetCol > 0){
    		this.moveTorowSpanPrevRow = wSheetRow;
    	}else{
    		wSheetRow = this.moveTorowSpanPrevRow > -1? this.moveTorowSpanPrevRow: wSheetRow;
    	}
    }
    
    // 포커스가 컬럼 마지막이고 여러줄 이라면 한줄위 제일 마지막 셀로 이동
    if(wSheetCol == 1 && this.rowsPerDataRow > 1){
    	wSheetCol = this.PhysicalMaxCols + 1;
    	wSheetRow--;
    	this.moveTorowSpanPrevRow = wSheetRow;
    }
    
    // 시트로우는 1보다 작을 수 없다.
    if(wSheetRow < 1) {
    	this.moveTorowSpanPrevRow = 1;
    	return wColNum;
    }
    
    // 이동할 셀을 찾는다.
    for(var i=wSheetCol - 1; i>0; i--){
    	var spanColNum = this.spanStartColNums[wSheetRow][i];
    	if(spanColNum == 0) spanColNum = i;
    	
    	var logicalRow = this.rowNumOf(wSheetRow, spanColNum,CONV_SHEET_LOGICAL);
    	var logicalCol = this.colNumOf(wSheetRow, spanColNum,CONV_SHEET_LOGICAL);
    	
    	var wDataCell = this.rows[logicalRow].cells[logicalCol];
    	// 숨어 있거나 락모드 셀이면 통과
    	if(wDataCell.hidden || (wDataCell.lockMode && !this.permitFocusToLockedCell)){
    		if(i == this.PhysicalMaxCols){
    			wSheetCol = this.PhysicalMaxCols;
    			wSheetRow--;
    		}
    		continue;
    	}
    	
    	wColNum = logicalCol;
    	this.moveTorowSpanPrevCol = -1;
    	break;
    }
    
  return wColNum;
};

DataSheet.prototype.rowOfSpread = function(colNum, text, startRowNum){
    // functionname : [DataSheet.rowOfSpread]
   text = "" + text;
   
    var wReturn = -1;
    for (var wRowNum = startRowNum; wRowNum <= this.maxRows; wRowNum++) { 
        var wText = "" + this.rows[wRowNum].cells[colNum].value; 
        if (wText && wText.matchWord(text)) {
        	wReturn = wRowNum; break;
        }
        if (wReturn > 0) break;
    }
    if (wReturn > 0) return wReturn;
    
    for (var wRowNum = 1; wRowNum < startRowNum; wRowNum++) { 
       var wText = this.rows[wRowNum].cells[colNum].value; 
        
        if (wText && wText.matchWord(text)) {
        	wReturn = wRowNum; break;
        }
        if (wReturn > 0) break;
    }

    return wReturn;
};

DataSheet.prototype.searchTextByColName = function(text, colNameStr){  
    // functionname : [DataSheet.searchTextByColName]

	var wColStr = ""; var arrColNames = colNameStr.split(",");
	for (var i = 0; i < pArrColNames.length;i++){
		var wColName = arrColNames[i];
		if (wColName.trim().length == 0) continue;
		
    	for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
		    if (wColName ==  this.columns[wColNum].caption){
		    	wColStr += (wColNum + ";");
		    	break;
		    }
    	}
	}
	return this.searchText(text, wColStr);
};

DataSheet.prototype.searchText = function(text, cols){
    // functionname : [DataSheet.searchText]

    var wReturn = -1;
    var wArrCols = cols.split(";");
    if (wArrCols[wArrCols.length - 1].trim().length ==0) wArrCols.pop();
    
    var wStartRow = (this.currentRow > 0 ? this.currentRow : 1);
    for (var wRowNum = wStartRow; wRowNum < this.maxRows; wRowNum++) { 
        for (var i = 0; i < wArrCols.length; i++){
            var wColNum = parseInt(wArrCols[i], 10);
            var wText = this.rows[wRowNum].cells[wColNum].value; 
            if (wText && wText.matchWord(text)) {
            	wReturn = wRowNum; break;
            }
            wText = this.rows[wRowNum].cells[wColNum].value1; 
            if (wText && wText.matchWord(text)) {
            	wReturn = wRowNum; break;
            }
        }
        if (wReturn > 0) break;
    }
    if (wReturn > 0) return wReturn;
    
    for (var wRowNum = 1; wRowNum < wStartRow; wRowNum++) { 
        for (var i = 0; i < wArrCols.length; i++){
            var wColNum = parseInt(wArrCols[i], 10);
            var wText = this.rows[wRowNum].cells[wColNum].value; 
            if (wText && wText.matchWord(text)) {
            	wReturn = wRowNum; break;
            }
            wText = this.rows[wRowNum].cells[wColNum].value1; 
            if (wText && wText.matchWord(text)) {
            	wReturn = wRowNum; break;
            }
        }
        if (wReturn > 0) break;
    }

    return wReturn;
};

DataSheet.prototype.setRowClass = function(hardRowNum, className){
    // functionname : [DataSheet.setRowClass]
	// this.focusRowStyle 이 true 일때 만 동작
	if(!this.focusRowStyle) return;
    var wSheetRow = this.rowNumOf(hardRowNum, 1, CONV_HARD_SHEET);
    var rowSpan = 0;
    if(1 <= hardRowNum % this.rowsPerDataRow + 1) rowSpan = 1;
    
    var loopLen = null;
    var wTable = null;
    var cells = null;
    
    if (wSheetRow > this.frozenRows) wTable = this.dataTable.tBodies[0].rows[hardRowNum];
	else wTable = this.colHeadTable.tBodies[0].rows[hardRowNum];
    loopLen = wTable.cells.length;
    for(var i=1-rowSpan; i<loopLen; i++){
    	cells = wTable.cells[i];
		wClassName = cells.className.replace(/MoveStyle |NotSelectStyle |OddRowStyle |EvenRowStyle /,"");
		cells.className = className + " " + wClassName;
    }
    
    if(this.leftRowTable != null){
    	wTable = this.leftRowTable.tBodies[0].rows[hardRowNum];
    	loopLen = wTable.cells.length;
    	if (wSheetRow <= this.frozenRows && this.leftColHeadTable != null) wTable = this.leftColHeadTable.tBodies[0].rows[hardRowNum];
    	for(var i=1-rowSpan; i<loopLen; i++){
    		cells = wTable.cells[i];
    		wClassName = cells.className.replace(/MoveStyle |NotSelectStyle |OddRowStyle |EvenRowStyle /,"");
    		cells.className = className + " " + wClassName;
    	}
    }
    
    if(this.rightRowTable != null){
    	wTable = this.rightRowTable.tBodies[0].rows[hardRowNum];
    	loopLen = wTable.cells.length;
    	if (wSheetRow <= this.frozenRows) wTable = this.rightColHeadTable.tBodies[0].rows[hardRowNum];
    	for(var i=0; i<loopLen; i++){
    		cells = wTable.cells[i];
    		wClassName = cells.className.replace(/MoveStyle |NotSelectStyle |OddRowStyle |EvenRowStyle /,"");
    		cells.className = className + " " + wClassName;
    	}
    }
    
    return;
};

DataSheet.prototype.setColClass = function(hardRowNum, hardColNum, className){
    // functionname : [DataSheet.setColClass]
	// this.focusColStyle 이 true 일때 만 동작
	if(!this.focusColStyle) return;
	if(this.displayOddEven) return;
	
// style 제외 열 
var arrayColNum = this.focusColStyleExceptNum.split(",");
var rightColumn = 9999999999;

if(/right/i.test(this._moveTableName)) {
	rightColumn = this.frozenColsRight[0];
}

var wSheetCol = this.colNumOf(hardRowNum, hardColNum, CONV_HARD_SHEET);

if(wSheetCol < 1) return;
// 열 스타일 적용 여부 판단
for(var n = 0; n < arrayColNum.length; n++){
	if(arrayColNum[n]*1 == wSheetCol) return; 
}

var loopLen = 0;
//		var rowSpan = 0;
var wFixTable = null;
var wTable = null;
var cells = null;

if(wSheetCol <= this.frozenCols){
	wFixTable = this.leftColHeadTable.tBodies[0];
	wTable = this.leftRowTable.tBodies[0];
}
else if(wSheetCol >= rightColumn){
	wFixTable = this.rightColHeadTable.tBodies[0];
	wTable = this.rightRowTable.tBodies[0];
}
else{
	wFixTable = this.colHeadTable.tBodies[0];
	wTable = this.dataTable.tBodies[0];
}

// 헤더 테이블 먼저 클래스명 변경 후
	loopLen = wFixTable.rows.length;
for(var i = this.headRows; i < loopLen; i++){
//			rowSpan = 0;
	var row = i - this.headRows + 1;
	    var sheetRowNum = (row % this.rowsPerDataRow == 0? this.rowsPerDataRow: row % this.rowsPerDataRow);
//    	    if (sheetRowNum > 1 && wSheetCol < rightColumn) --rowSpan;
	    var sheetColNum = this.spanStartColNums[sheetRowNum][wSheetCol];
	    if(sheetColNum == 0) continue;
	    
	    var wHardColNum = this.colNumOf(sheetRowNum, sheetColNum, CONV_SHEET_HARD);
      
      cells = wFixTable.rows[i].cells[wHardColNum];
		wClassName = cells.className.replace(/MoveStyle |NotSelectStyle |OddRowStyle |EvenRowStyle /,"");
		cells.className = className + " " + wClassName;
}
// 데이터 테이블 변경
loopLen = wTable.rows.length;;
for(var i = this.headRows + this.frozenRows; i < loopLen; i++){
//			rowSpan = 0;
	var row = i - this.headRows + 1;
	    var sheetRowNum = (row % this.rowsPerDataRow == 0? this.rowsPerDataRow: row % this.rowsPerDataRow);
//    	    if (sheetRowNum > 1 && wSheetCol < rightColumn) --rowSpan;
	    var sheetColNum = this.spanStartColNums[sheetRowNum][wSheetCol];
	    if(sheetColNum == 0) continue;
	    
	    var wHardColNum = this.colNumOf(sheetRowNum, sheetColNum, CONV_SHEET_HARD);
	    
      cells = wTable.rows[i].cells[wHardColNum];
		wClassName = cells.className.replace(/MoveStyle |NotSelectStyle |OddRowStyle |EvenRowStyle /,"");
		cells.className = className + " " + wClassName;
	}

	// 시트의 열 번호 저장
	this.clickedCOL = hardColNum;
	
	return;
};

DataSheet.prototype.setColHeadClass = function(em){
	if(this.sheetType == SHEETTYPE_LISTSHEET) return;
	
	if(this.prevEm != null)
		this.prevEm.className = this.prevTitleClass;
	
	if(em != null){
		this.prevTitleClass = em.className;
		em.className = "MoveColumn";
	}
	
	this.prevEm = em;
	return;
};

DataSheet.prototype.setPickHeaderClass = function(rowNum, colNum, className){
	if(this.colHeadTable == null && this.leftRowTable == null) return;
	
	this.prevHeaderRowHeader.className = "RowHead";
	this.prevHeaderColHeader.className = "ColHead";
	
	if(rowNum < 1) return;
	
	var col = this.colNumOf(1, colNum, CONV_LOGICAL_HARD);
	var row = this.rowNumOf(1, colNum, CONV_LOGICAL_HARD) - this.rowsPerDataRow;
	var sheetCol = this.colNumOf(1, colNum, CONV_LOGICAL_SHEET);
	var sheetRow = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_SHEET);
	
	var wTable = null;
	
	// colHead className 변경
	if(this.colHeadTable != null){
		if(sheetCol <= this.frozenCols){
			wTable = this.leftColHeadTable;
		}
		else if(sheetCol >= this.frozenColsRight[0] && this.frozenColsRight[0] > 0){
			wTable = this.rightColHeadTable;
		}
		else{
			wTable = this.colHeadTable;
		}
		
		var Header = wTable.tBodies[0].rows[row].cells[col];
		Header.className = className + "ColHead";
		// 헤더 셀 저장
		this.prevHeaderColHeader = Header;
	
	
		// rowHead className 변경
  	if(this.leftRowTable){
  		if(sheetRow <= this.frozenRows){
  			wTable = this.leftColHeadTable;
  		}
  		else{
  			wTable = this.leftRowTable;
  		}
  		
  		var row = ((rowNum - 1) * this.rowsPerDataRow) + this.addHeaderRows + this.rowsPerDataRow;
  		
  		var Header = wTable.tBodies[0].rows[row].cells[0];
  		Header.className = className + "RowHead";
  		// 헤더 셀 저장
  		this.prevHeaderRowHeader = Header;
  	}
	}
	
	return;
};

DataSheet.prototype.setCellClass = function(em, rowNum, colNum){
    // functionname : [DataSheet.setCellClass]
    
    var wClassName = "";
    var columnStyle = "";
    
var wColumn = this.columns[colNum];

if(wColumn.defaultCellColor != "" || wColumn.defaultCellFontColor != ""){
	columnStyle = "columnStyle"+colNum+" ";
	wClassName = columnStyle;
}

(wColumn.defaultCellType == CELLTYPE_CHECKBOX)? wClassName += "commonCheckboxStyle": wClassName += "commonCellStyle";

em.className = wClassName;
};

DataSheet.prototype.checkCell = function(rowNum, colNum, value){
    // functionname : [DataSheet.checkCell]
	this.callerFncName = "checkCell";
    var wReturn = true;
    var wDataCell = this.rows[rowNum].cells[colNum]; 
    
	//시간 타입 오류 체크
    if(wDataCell.celltype == CELLTYPE_TIME){
  	var c1224 = wDataCell.cellTime1224.substring(0, 1)*1;
  	var hms = wDataCell.cellTime1224.substring(1, 2)*1;
  	var timeErr1 = "";
  	var timeErr2 = "";
  	
  	if(value.length < hms){
    		for(var i=value.length;i<hms;i++){
    			value += "0";
    			wDataCell.value += "0";
    		}
    	}
    	
  	if(value.length > hms || (1*(value[0]+""+value[1])>12 && c1224==1) || (1*(value[0]+""+value[1])>24 && c1224==2) || (1*(value[0]+""+value[1])>59>24 && c1224==2) || 1*(value[2]+""+value[3])>59 || 1*(value[4]+""+value[5])>59){
  		if(hms==2) timeErr = "시간";
  		else if(hms==4) timeErr1 = "시간, 분";
  		else timeErr1 = "시간, 분, 초";
  		if(c1224>1) timeErr2 = 24;
  		else timeErr2 = 12;
  		alert(getText("message_datasheet_004", "잘못된 값이 입력 되었습니다.\n{0} 단위까지 입력이 가능하며\n시간은{1}시 형태로 입력\n분, 초는 59를 넘을 수 없습니다.", [timeErr1, timeErr2]));
  		wReturn = false;
  	}
    }
    else if(wDataCell.celltype == CELLTYPE_DATE){
    	var errNum = wDataCell.checkFormat;
    	var wText = value;
    	if (wText.length == 0) return true;
        try{
    	    //데이타의 속성에 비추어 오류를 점검한다
    	    switch(errNum){
    	        case 2: 
    	        	if (hasHangul(wText)) throw 8; 
    	        	if (!CheckYear(wText)) throw 3; 
    	        	break;
    	        case 1: 
    	        	if (hasHangul(wText)) throw 8; 
    	        	if (!CheckMonth(wText)) throw 2; 
    	        	break;
    	        case 0: 
    	        	if (hasHangul(wText)) throw 8; 
    	        	if (!CheckDate(wText)) throw 1;  
    	        	break;
    	    }
    		return true;
    		
        } catch (err) {
            switch(err){
                case 1:
                        alert(getText("message_datasheet_005", "날짜입력이 틀렸습니다. 날짜를 지우거나 고치십시요"));
                        break;
                case 2:
                        alert(getText("message_datasheet_006", "년월입력이 틀렸습니다. 년월를 지우거나 고치십시요"));
                        break;
                case 3:
                        alert(getText("message_datasheet_007", "년도입력이 틀렸습니다. 년도를 지우거나 고치십시요"));
                        break;
                case 8:
                        alert(getText("message_datasheet_008", "한글이 입력되었습니다."));
                        break;
                default:
                	    wErrMsg = getText("message_datasheet_009", "위치: DataSheet.checkError\n에러번호:{0}\n{1}에러정보:\n{2}", [errNum.number, wErrMsg, errNum.description]);
                        alert(wErrMsg);
            }
        }
        return false;
    }
    else if(wDataCell.celltype == CELLTYPE_NUMBER || wDataCell.celltype == CELLTYPE_INTEGER || wDataCell.celltype == CELLTYPE_PERCENT){
  	// 숫자값 길이 체크
      if (wDataCell.nummax < parseInt(value, 10)) {
          alert(getText("message_datasheet_010", "이 칸의 값은 {0}를 넘을 수 없습니다.", [wDataCell.nummax]));
          wReturn = false;
      } else if (wDataCell.nummin > parseInt(value, 10)){
          alert(getText("message_datasheet_011", "이 칸의 값은 {0}보다 작을 수 없습니다.", [wDataCell.nummin]));
          wReturn = false;
      }
    }
    
    this.callerFncName = "";
    
    return wReturn;
};

DataSheet.prototype.isEmptyRow = function(rowNum){
    // functionname : [DataSheet.isEmptyRow]

	var wReturn = true;
    // 데이터 시트이고 객체가 빈상태이면 빈것으로 간주된다
    if (this.sheetType == SHEETTYPE_DATASHEET && this.linkedObjects.length > 0) {
  	var wObjectSeq = this.rows[rowNum].objectSeq;
  	for (var wObjectNum = 0; wObjectNum < this.linkedObjects.length; wObjectNum++){
  		if (this.linkedObjects[wObjectNum].getUpdateGu(wObjectSeq) != "X") {    // 2017.08.18 지운학 
  		    wReturn = false;
  		    break;
  		}
  	}
  	return wReturn;
}
    
    // 가타의 경우 셀을 체크하여 결정한다
	for (var wColNum=1; wColNum < this.rows[rowNum].cells.length; wColNum++){
		var wCell = this.rows[rowNum].cells[wColNum];
		var wCellType = wCell.celltype;
		
		wReturn = wReturn && (
			      (wCellType == CELLTYPE_DATE     && wCell.value.length == 0) ||
	          (wCellType == CELLTYPE_EDIT     && wCell.value.length == 0) ||
	          (wCellType == CELLTYPE_NUMBER   && (wCell.value == "0" || wCell.value == "0.0" || wCell.value == ""))        ||
	          (wCellType == CELLTYPE_PERCENT  && (wCell.value == "0" || wCell.value == "0.0" || wCell.value == ""))        ||
	          (wCellType == CELLTYPE_INTEGER  && (wCell.value == "0" || wCell.value == "0.0" || wCell.value == ""))        ||
	          (wCellType == CELLTYPE_BUTTON   && wCell.value == "0")        ||
	          (wCellType == CELLTYPE_PICTURE  && wCell.value == "") ||
	          (wCellType == CELLTYPE_COMBOBOX && wCell.value == "-1")       ||
	          (wCellType == CELLTYPE_CHECKBOX && wCell.value == "0") ||
	          (wCellType == CELLTYPE_MASK     && wCell.value == "") ||		
	          (wCellType == CELLTYPE_TIME     && wCell.value.length == 0)		);
	}
	return wReturn;
};

DataSheet.prototype.updateSeqFieldOfLinkedObject = function(){
    // functionname : [DataSheet.updateSeqFieldOfLinkedObject]

	var newSeq = 1;
	for (var wRowNum = 1; wRowNum < this.rows.length; wRowNum++){
		var wRow = this.rows[wRowNum];
		var wObjectSeq = wRow.objectSeq;
		
    	for (var wObjectNum = 0; wObjectNum < this.linkedObjects.length; wObjectNum++){
    		var wObject = this.linkedObjects[wObjectNum];
    		wObject.updateSeqField(wObjectSeq, newSeq);
    	}
    	
    	newSeq++;
	}
	
	return;
};

// 시트 객체 시퀀스 재정렬
DataSheet.prototype.updateObjectSeq = function(){
	
	var newSeq = 1;
	var sheetRows = this.rows;
	var rowLength = sheetRows.length;
	
	for (var wRowNum = 1; wRowNum < rowLength; wRowNum++){
		sheetRows.objectSeq = wRowNum;
	}
}

DataSheet.prototype.getRowNumOfObjectSeq = function(seq){
    // functionname : [DataSheet.getRowNumOfObjectSeq]

	var wReturn = 1;
	for (var wRowNum = 1; wRowNum < this.rows.length; wRowNum++){
		var wRow = this.rows[wRowNum];
		var wObjectSeq = wRow.objectSeq;
		if (seq == wObjectSeq) {
			wReturn = wRowNum; break; 
		}
	}
	
	return wReturn;
};

/***************************************************************************
* 시트 함수의 동작에관한 부분이다
**************************************************************************/
// 산식정보에 추가하기
DataSheet.prototype.addToFormulaRefs = function(rowNum, colNum, formula){
    // functionname : [DataSheet.addToFormulaRefs]

    // Cell 함수를 루핑하면서 계속 찾는다
  var wFormulaTemp = formula || "";
    var wFormula = "";
  
    // --- 사전준비 기능-----------------------------------------------------
  // 문자열 제거
    var wPos1 = wFormulaTemp.indexOf("\"");
    var wPos0 = 0; 
    var wIsInQuot = false;
    
    while (wPos1 >= 0){
        if (!wIsInQuot) wFormula += wFormulaTemp.substring(wPos0, wPos1);
        wPos1 = wFormulaTemp.indexOf("\"", (wPos0 = ++wPos1));
        wIsInQuot != wIsInQuot;
    }
    wFormula += wFormulaTemp.substring(wPos0, wFormulaTemp.length);
    
  wFormula = " " + wFormula;
	wFormula = wFormula.replace(/CELL/ig,"CELL"); // Cell은 모두 대문자로 바뀐다
  while (wFormula.indexOf("CELL ") >= 0) wFormula.replaceWord("CELL ","CELL");
  
    // --- 메인동작 기능-----------------------------------------------------
    var wArrRange = [0,0,0,0];
    var wMaxRows = 9999999999;       var wMaxCols = 9999999999;
    
  var wFuncPosition = wFormula.indexOf("CELL(");
  while (wFuncPosition >= 0){
      var wEndPosion = wFormula.indexOf(")", wFuncPosition);
      var wCellString = wFormula.substring(wFuncPosition + 5, wEndPosion).trim().replace(/\"/g,""); // 5는 "CELL("의 길이
        // 괄호사이의 셀값을 셀값으로 바꾼다(문자와 숫자 셀타입을 구분)
      var wArrCellRanges = wCellString.split(",");
      for (var i=0; i < wArrCellRanges.length;i++){
          var wCellRange = wArrCellRanges[i].trim().replace(/\"/g,"");
            parseRCToRange(wCellRange, rowNum, colNum, wMaxRows, wMaxCols, wArrRange);
            
            var wRC = parseRangeToRC(rowNum, colNum);
            this.formulaRefs[this.formulaRefs.length] 
                 = new FormulaRef(wArrRange[0], wArrRange[1], wArrRange[2], wArrRange[3], wRC, formula);
	    }
      
      wFuncPosition = wFormula.indexOf("CELL(", wEndPosion);
  } 
    return;
};

// 전체산식을 리프레시한다 pRecaleGu를 주면 다시계산까지 수행한다
DataSheet.prototype.refreshFormulaRefs = function(){
    // functionname : [DataSheet.refreshFormulaRefs]

    wFormulaCount = this.formulaRefs.length;
    while (wFormulaCount > 0) {
        this.formulaRefs[--wFormulaCount] = null;
        this.formulaRefs.pop();
    }
    this.formulaRefs = [];
    
    for (var wRowNum = 1; wRowNum < this.maxRows; wRowNum++){
        for (var wColNum = 1; wColNum < this.maxCols; wColNum++){
            var wFormula = this.rows[wRowNum].cells[wColNum].formula || "";
            if (wFormula.length > 0){
                this.addToFormulaRefs(wRowNum, wColNum, wFormula);
            }
        }  
    }  
    
    // 전체계산을 다시 수행한다.
    if (this.autoCalc) this.recalculate();
    
    return;
};

DataSheet.prototype.recalculate = function(){
    // functionname : [DataSheet.recalculate]

    var oldAutoCalcGu = this.autoCalc;
    this.autoCalc = true; 
    for (var wRowNum = 1; wRowNum < this.maxRows; wRowNum++){
        for (var wColNum = 1; wColNum < this.maxCols; wColNum++){
            this.calculateCell(wRowNum, wColNum);
        }  
    }  
    this.autoCalc = oldAutoCalcGu;
    return;
};

// 자기자신을 먼저 계산
DataSheet.prototype.calculateCell = function(rowNum, colNum){
    // functionname : [DataSheet.calculateCell]

    // 자기자신을 먼저 계산한다
  var formula = this.rows[rowNum].cells[colNum].formula;
  if (formula.length == 0) return;
  
    //var wChanged = true;
    
    var wValue = wLogic.ExecuteLogic(this.replaceToEasyFormula(rowNum, colNum, formula));
    
    if (wValue != this.getValue(rowNum, colNum)){
        this.setValueToCell(wValue, rowNum, colNum);
    } 
    //else {
        //wChanged = false;
    //}
   
    return; 
};

// 자기자신을 먼저 계산후에 다른 참조셀을 바꾼다
DataSheet.prototype.calculateRelatedCell = function(rowNum, colNum){
    // functionname : [DataSheet.calculateRelatedCell]

    var wArrRange = [0,0,0,0];

    // 자기를 참조하는 셀들을 루핑하며 재귀호출한다.
    for (var i=0; i < this.formulaRefs.length; i++){
        var wFormulaRef = this.formulaRefs[i];
        if (wFormulaRef.row <= rowNum && wFormulaRef.row2 >= rowNum &&
            wFormulaRef.col <= colNum && wFormulaRef.col2 >= colNum){
                
            parseRCToRange(wFormulaRef.RC, 1, 1, this.maxRows, this.maxCols, wArrRange);                    
            var wRowNum = wArrRange[0];
            var wColNum = wArrRange[1];
            
            this.calculateCell(wRowNum, wColNum);
        }
    }
   
    return; 
};

// 줄추가시 또는 삭제시 관련된 산식만 다시 계산한다
DataSheet.prototype.recalcurateRow = function(rowNum){
    // functionname : [DataSheet.recalcurateAddedRow]
	
	for (var colNum=1; colNum <= this.maxCols; colNum++){
		this.calculateCell(rowNum, colNum);
	}
for (var colNum=1; colNum <= this.maxCols; colNum++){
	this.calculateRelatedCell(rowNum, colNum);
}
   
    return; 
};

// 열추가시 또는 삭제시 관련된 산식만 다시 계산한다
DataSheet.prototype.recalcurateCol = function(colNum){
    // functionname : [DataSheet.recalcurateAddedCol]
	
	for (var rowNum=1; rowNum <= this.maxRows; rowNum++){
		this.calculateCell(rowNum, colNum);
	}
for (var rowNum=1; rowNum <= this.maxRows; rowNum++){
	this.calculateRelatedCell(rowNum, colNum);
}
    return; 
};
    
// 산식의 셀문자열에 셀값을 대치하여 준다 예: R1C1 -> "142"
DataSheet.prototype.replaceToEasyFormula = function(critRowNum, critColNum, formula){
    // functionname : [DataSheet.replaceToEasyFormula]

    // Cell 함수를 루핑하면서 계속 찾는다
  var wFormula = formula || "";

    // --- 사전준비 기능-----------------------------------------------------
  // 문자열교체 "..." - > STR_n
    var wStringIndex = -1;
var wArrStringValues = [];
    var wPos1 = wFormula.indexOf("\"");
    while (wPos1 != -1){
        var wPos2 = wFormula.indexOf("\"", ++wPos1);
        if (wPos2 == -1) break;
        
        wArrStringValues[+wStringIndex] = wFormula.substring(wPos1, wPos2); 
        wPos1 = wFormula.indexOf("\"", ++wPos2);
    }
for (var i = 0; i < wArrStringValues.length ; i++){
	wFormula = wFormula.replaceWord("\"" + wArrStringValues[i] + "\"", ("STR_" + i));
}
	
    // 케리지리턴이나 탭등을 제거한다
	wFormula = wFormula.replace(/\r\n/g," ").replace(/\t/g," ").trim();
	
  // 대문자로 변환
	wFormula = wFormula.toUpperCase();
  
    // --- 메인동작 기능-----------------------------------------------------
    var wArrRange = [0,0,0,0];
    var wMaxRows = this.maxRows;       var wMaxCols = this.maxCols;
  while (wFormula.indexOf("CELL ") >= 0) wFormula.replaceWord("CELL ","CELL");

  var wFuncPosition = wFormula.indexOf("CELL(");
  while (wFuncPosition >= 0){
      var wEndPosion = wFormula.indexOf(")", wFuncPosition);
      var wCellString = wFormula.substring(wFuncPosition + 5, wEndPosion); // 6은
																			// "CELL("의
																			// 길이
      var wValueString = "";
      
        // 괄호사이의 셀값을 셀값으로 바꾼다(문자와 숫자 셀타입을 구분)
      var wArrCellRanges = wCellString.split(",");
      for (var i=0; i < wArrCellRanges.length; i++){
          var wCellRange = wArrCellRanges[i];
            parseRCToRange(wCellRange, critRowNum, critColNum, wMaxRows, wMaxCols, wArrRange);
            
            for (var wRowNum = wArrRange[0];wRowNum <= wArrRange[2];wRowNum++){
                for (var wColNum = wArrRange[1];wColNum <= wArrRange[3];wColNum++){
                   var wCellType = this.rows[wRowNum].cells[wColNum].celltype;
                   if (!wCellType) wCellType = CELLTYPE_EDIT;

                 wValueString += (wValueString.length > 0 ? "," : "") 
                               + (wCellType == CELLTYPE_EDIT > 0 ? "\"" : "") 
                               + this.getValue(wRowNum, wColNum)
                               + (wCellType == CELLTYPE_EDIT > 0 ? "\"" : "");

              }
          }
      }
      
      wFormula = wFormula.substring(0, wFuncPosition) + wValueString + wFormula.substring(++wEndPosion);
      
      wFuncPosition = wFormula.indexOf("CELL(");
  }    
  // 문자열교체 STR_n - > "..."
for (var i = 0; i < wArrStringValues.length ; i++){
	wFormula = wFormula.replaceWord(("STR_" + i), "\"" + wArrStringValues[i] + "\"");
}
    
    return wFormula;
};


// RC값범위에 원하는 셀이 있는지 확인한다
function checkRC(sheetName, strRC, rowNum, colNum, critRowNum, critColNum){
	return controls[sheetName].checkRC(strRC, rowNum, colNum, critRowNum, critColNum);
};
DataSheet.prototype.checkRC = function(strRC, rowNum, colNum, critRowNum, critColNum){
    // functionname : [DataSheet.checkRC]
	
	var wReturn = false;
	
	if (critColNum == undefined) critColNum = 1;
	if (critRowNum == undefined) critRowNum = 1;
	
	var wMaxRows = this.maxRows;
	var wMaxCols = this.maxCols;
	
    var wArrCellRanges = strRC.split(",");
    for (var i=0; i < wArrCellRanges.length; i++){
        var wArrRange = [];
        parseRCToRange(wArrCellRanges[i], critRowNum, critColNum, wMaxRows, wMaxCols, wArrRange);
        
        if(rowNum >= wArrRange[0] && rowNum <= wArrRange[2] && colNum >= wArrRange[1] && colNum <= wArrRange[3]){
        	wReturn = true;
        	break;
        }
    }
	
	return wReturn;
};

// RC값범위의 셀들의 컬렉션을 리턴한다
function cellsOfRC(sheetName, strRC, critRowNum, critColNum){
	return controls[sheetName].cellsOfRC(strRC, critRowNum, critColNum);
};

DataSheet.prototype.cellsOfRC = function(strRC, critRowNum, critColNum){
    // functionname : [DataSheet.cellsOfRC]

	var wReturnArray = [];
	var wIndex = 0;
	
	if (critColNum == undefined) critColNum = 1;
	if (critRowNum == undefined) critRowNum = 1;
	
	var wMaxRows = this.maxRows;
	var wMaxCols = this.maxCols;
	
    var wArrCellRanges = strRC.split(",");
    for (var i=0; i < wArrCellRanges.length; i++){
        var wCellRange = wArrCellRanges[i];
        var wArrRange = [];
        parseRCToRange(wCellRange, critRowNum, critColNum, wMaxRows, wMaxCols, wArrRange);
        
        for (var wRowNum = wArrRange[0];wRowNum <= wArrRange[2];wRowNum++){
            for (var wColNum = wArrRange[1];wColNum <= wArrRange[3];wColNum++){
            	wReturnArray[wIndex++] = this.rows[wRowNum].cells[wColNum];
            }
        }
    }
	
	return wReturnArray;
};

// 열을 참조값으로 조건에 맞는 값 찾기
function vLookUp(sheetName, data, colNumOfData, colNumOfReturn){
	return controls[sheetName].vLookUp(data, colNumOfData, colNumOfReturn);
};

DataSheet.prototype.vLookUp = function(data, colNumOfData, colNumOfReturn){
    // functionname : [DataSheet.vLookUp]
	var wReturn = "";

  var wColNum = colNumOfData;
  for (var wRowNum = 1; wRowNum <= this.maxRows;wRowNum++){
  	if (this.getValue(wRowNum, wColNum) == data){
  		wReturn = this.getValue(wRowNum, colNumOfReturn);
  		break;
  	}
  }

  return wReturn;
};

function vLookUpList(sheetName, data, colNumOfData, colNumOfReturn){
	return controls[sheetName].vLookUpList(data, colNumOfData, colNumOfReturn);
};

DataSheet.prototype.vLookUpList = function(data, colNumOfData, colNumOfReturn){
    // functionname : [DataSheet.vLookUpList]
	var wReturn = "";

  var wColNum = colNumOfData;
  for (var wRowNum = 1; wRowNum <= this.maxRows;wRowNum++){
  	if (this.getValue(wRowNum, wColNum) == data){
  		var wCellType = this.rows[wRowNum].cells[wColNum].celltype;
  		if (wCellType == CELLTYPE_NUMBER || wCellType == CELLTYPE_INTEGER || wCellType == CELLTYPE_PERCENT){
    		wReturn += (wReturn.length > 0 ? "," : "") + this.getValue(wRowNum, colNumOfReturn);
  		} else {
    		wReturn += (wReturn.length > 0 ? "," : "") + "'" + this.getValue(wRowNum, colNumOfReturn) + "'";
  		}
  	}
  }
  
  return wReturn;
};


// 행을 참조값으로 조건에 맞는 값 찾기
function hLookUp(sheetName, rowNumOfData, data, rowNumOfReturn){
	return controls[sheetName].hLookUp(rowNumOfData, data, rowNumOfReturn);
};
DataSheet.prototype.hLookUp = function(rowNumOfData, data, rowNumOfReturn){
    // functionname : [DataSheet.hLookUp]
    var wReturn = "";
  var wRowNum = rowNumOfData;
  for (var wColNum = 1; wColNum <= this.maxCols;wColNum++){
  	if (this.getValue(wRowNum, wColNum) == data){
  		wReturn = this.getValue(wRowNum, rowNumOfReturn);
  		break;
  	}
  }
   
    return wReturn;
};
function hLookUpList(sheetName, rowNumOfData, data, rowNumOfReturn){
	return controls[sheetName].hLookUpList(rowNumOfData, data, rowNumOfReturn);
};
DataSheet.prototype.hLookUpList = function(rowNumOfData, data, rowNumOfReturn){
    // functionname : [DataSheet.hLookUpList]
    var wReturn = "";
  var wRowNum = rowNumOfData;
  for (var wColNum = 1; wColNum <= this.maxCols;wColNum++){
  	if (this.getValue(wRowNum, wColNum) == data){
  		var wCellType = this.rows[rowNum].cells[wColNum].celltype;
  		if (wCellType == CELLTYPE_NUMBER || wCellType == CELLTYPE_INTEGER || wCellType == CELLTYPE_PERCENT){
    		wReturn += (wReturn.length > 0 ? "," : "") + this.getValue(wRowNum, colNumOfReturn);
  		} else {
    		wReturn += (wReturn.length > 0 ? "," : "") + "'" + this.getValue(wRowNum, colNumOfReturn) + "'";
  		}
  	}
  }
   
    return wReturn;
};

// 열을 참조값으로 조건에 맞는 데이터 갯수 구하기
function vCountIf(sheetName, data, colNumOfData){
	return controls[sheetName].vCountIf(data, colNumOfData);
};
DataSheet.prototype.vCountIf = function(data, colNumOfData){
    // functionname : [DataSheet.vCountIf]
  var wReturn = 0;
  var wColNum = colNumOfData;
  for (var wRowNum = 1; wRowNum <= this.maxRows;wRowNum++){
  	if (this.getValue(wRowNum, wColNum) == data){
  		wReturn++;
  	}
  }

    return wReturn;
};

// 행을 참조값으로 조건에 맞는 데이터 갯수 구하기
function hCountIf(sheetName, data, rowNumOfData){
	return controls[sheetName].hCountIf(data, rowNumOfData);
}
DataSheet.prototype.hCountIf = function(data, rowNumOfData){
    // functionname : [DataSheet.hCountIf]
    var wReturn = 0;

  var wRowNum = rowNumOfData;
  for (var wColNum = 1; wColNum <= this.maxCols;wColNum++){
  	if (this.getValue(wRowNum, wColNum) == data){
  		wReturn++;
  	}
  }
  return wReturn;
};

// RC RAnge를 참조값으로 조건에 맞는 데이터 갯수 구하기
function countIf(sheetName, data, strRC){
	return controls[sheetName].countIf(data, strRC);
};
DataSheet.prototype.countIf = function(data, strRC){
    // functionname : [DataSheet.countIf]
    var wReturn = 0;

    var arrayCells = this.cellsOfRC(strRC);

  for (var i = 0; i < arrayCells.length; i++){
  	if (arrayCells[i].value == data){
  		wReturn++;
  	}
  }
  return wReturn;
};

//  
DataSheet.prototype.getDataForExcel = function(){
    // functionname : [DataSheet.getDataForExcel]

    var arrFromStrings = [",", ":", ";", "&", "%", "?"];
    var arrToStrings   = ["<COMMA>", "<COLON>", "<SEMICOLON>", "<AMP>", "<PERCENT>", "<QUESTION>"];
	
    var generationInfo = new xlGenerationInfo();
	generationInfo.colsNum = this.headCols; // Column Header's Depth
	generationInfo.rowsNum = this.headRows; // Row Header's Depth
	
	generationInfo.rowsColors = "";
	
	/*
	 * var found = false;
     * var selectorText = ".colhead";
     *
	 * for (var cssSheetIndex = 0; cssSheetIndex <
	 * document.styleSheets.length; cssSheetIndex++){ var
	 * cssSheet=document.styleSheets[cssSheetIndex]; var cssRules =
	 * (cssSheet.cssRules? cssSheet.cssRules: cssSheet.rules); for (var
	 * cssRulesIndex = 0; cssRulesIndex < cssRules.length; cssRulesIndex++){
	 * var cssRule = cssRules[cssRulesIndex];
	 * 
	 * if(cssRule.selectorText.toLowerCase() == selectorText){ var
	 * colorString = "" + cssRule.style.backgroundColor; if
	 * (colorString.substring(0,1)=="#"){ colorString =
	 * colorString.substring(1); } else if
	 * (colorString.substring(0,4)=="rgb("){ colorString =
	 * colorString.substring(4, colorString.length - 1); var arrStrColors =
	 * colorString.split(","); var redString =
	 * parseInt(arrStrColors[0].trim(), 10).toString(16); var greenString =
	 * parseInt(arrStrColors[1].trim(), 10).toString(16); var blueString =
	 * parseInt(arrStrColors[2].trim(), 10).toString(16);
	 * 
	 * redString = (redString.length == 1 ? "0" : "") + redString;
	 * greenString = (greenString.length == 1 ? "0" : "") + greenString;
	 * blueString = (blueString.length == 1 ? "0" : "") + blueString;
	 * 
	 * colorString = "" + redString + greenString + blueString; }
	 * 
	 * generationInfo.rowsColors = colorString; found = true; break; }
	 *  } if (found) break; }
	 */

	var wStrColsWidths = this.tagObject.getAttribute("cellsize") || "";
	var wColsWidths = wStrColsWidths.split(";"); wStrColsWidths = "";
	for (var i = 0; i < wColsWidths.length; i++){
		if (wColsWidths[i].trim().length == 0) continue;
		var colWidth = Math.ceil(parseFloat(1 * wColsWidths[i]) / 7,5);
		wStrColsWidths += (i == 0 ? "" : "\t") + colWidth;
	}
	
	generationInfo.colsWidth = wStrColsWidths;
	
	generationInfo.data = "";
	

	// 칼럼해더정보 넘기기
	for (var rowNum = 0; rowNum < this.headRows; rowNum++){
		var wRow = this.dataTable.tBodies[0].rows[rowNum];
		for (var colNum = 1; colNum < wRow.cells.length; colNum++){
			generationInfo.data += (colNum == 0 ? "" : "\t") + escapeCharacter(wRow.cells[colNum].innerHTML,arrFromStrings, arrToStrings);
		}
		//generationInfo.data += ":\r\n";
		generationInfo.data += "<<%ENTER%>>";
	}
	
	// 데이터정보 넘기기
	for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
		var wHardRow  = this.rowNumOf(rowNum, 1, CONV_LOGICAL_HARD);
		var wRow = this.dataTable.tBodies[0].rows[wHardRow];
		for (var colNum = 0; colNum < this.headCols; colNum++){
			generationInfo.data += (colNum == 0 ? "" : "\t") + escapeCharacter(wRow.cells[colNum].innerHTML,arrFromStrings, arrToStrings);
		}
		
		for (var colNum = 1; colNum <= this.maxCols; colNum++){
			generationInfo.data += "\t" + escapeCharacter(this.rows[rowNum].cells[colNum].value,arrFromStrings, arrToStrings);
		}
		if (generationInfo.data.endsWith("\t")) generationInfo.data += " ";
		//generationInfo.data += (rowNum < this.maxRows ? ":\r\n" : "");
		generationInfo.data += (rowNum < this.maxRows ? "<<%ENTER%>>" : "");
	}
	return generationInfo;
};

/*--------------------------------------------------------------------------
 RC스타일의 문법 (기본 R1C1:R2C3 상대좌표 R[1]C[1]:R[3]C[4] <-커런트 셀기준
 단일셀은 :이 없다 (R1C1  R[1]C[2])
 줄선택은 R1:R2와 같다 열선택은 C1C2와 같이 표현한다
 인수중에 배열은 [Row, Col, Row2, Col2] 이다 결과를 리턴한다
----------------------------------------------------------------------------*/
function parseRCToRange(pRCString, currentRow, currentCol, maxRows, maxCols, arrRange){
    // 1. 콜론으로 범위값을 분리한다 없으면시작셀갑과 같은 값을 준다
    var wArrRanges = pRCString.split(":");
    if (wArrRanges.length == 1) wArrRanges[1] = wArrRanges[0];
    
    // 2. 시작셀을 파싱한다
    // 열번호가 없으면 전체열 선택이다 줄번호가 없으면 전체줄 선택이다
    var wRange = wArrRanges[0];
    if (wRange.indexOf("R") == -1){
        wRange = "R1" + wRange;
    }
    if (wRange.indexOf("C") == -1){
        wRange += "C1";
    }
    var wRowString = wRange.split("C")[0].substring(1);
    var wColString = wRange.split("C")[1];

    if (wRowString.charAt(0) == "["){
        arrRange[0] = parseInt(wRowString.substring(1,wRowString.length -1), 10) + currentRow;
    } else {
        arrRange[0] = parseInt(wRowString, 10);
    }
    if (wColString.charAt(0) == "["){
        arrRange[1] = parseInt(wColString.substring(1,wColString.length -1), 10) + currentCol;
    } else {
        arrRange[1] = parseInt(wColString, 10);
    }
    
    // 3. 종료셀을 파싱한다
    wRange = wArrRanges[1];
    if (wRange.indexOf("R") == -1){
        wRange = "R" + maxRows + wRange;
    } else if (wRange.indexOf("C") == -1){
        wRange += "C" + maxCols;
    }
    wRowString = wRange.split("C")[0].substring(1);
    wColString = wRange.split("C")[1];
    
    if (wRowString.charAt(0) == "["){
        arrRange[2] = parseInt(wRowString.substring(1,wRowString.length -1), 10) + currentRow;
    } else {
        arrRange[2] = parseInt(wRowString, 10);
    }
    if (wColString.charAt(0) == "["){
        arrRange[3] = parseInt(wColString.substring(1,wColString.length -1), 10) + currentCol;
    } else {
        arrRange[3] = parseInt(wColString, 10);
    }
    
    return;
};

function parseRangeToRC(rowNum, colNum, rowNum2, colNum2){
    var wReturn = "R" + rowNum + "C" + colNum;
    if (!rowNum2) rowNum2 = rowNum;
    if (!colNum2) colNum2 = colNum;
    
    if (rowNum != rowNum2 || colNum != colNum2){
        wReturn += ":R" + rowNum2 + "C" + colNum2;
    }
    return wReturn;
};

/*
* -----------------------------------------------------------------------
* 시트밖에 formula에 시트값을 대입하는 로직으로 시트의 구성함수가 아니다 - 산식의 셀문자열에 셀값을 대치하여 준다 예:
* R1C1 -> "142"
* -----------------------------------------------------------------------
*/
function replaceCellValueOf(formula){
    // Cell함수를 루핑하면서 계속 찾는다
  var wFormula = formula || "";

    // --- 사전준비 기능-----------------------------------------------------
  // 문자열교체 "..." - > STR_n
    var wStringIndex = -1;
var wArrStringValues = [];
    var wPos1 = wFormula.indexOf("\"");
    while (wPos1 != -1){
        var wPos2 = wFormula.indexOf("\"", ++wPos1);
        if (wPos2 == -1) break;
        
        wArrStringValues[+wStringIndex] = wFormula.substring(wPos1, wPos2); 
        wPos1 = wFormula.indexOf("\"", ++wPos2);
    }
for (var i = 0; i < wArrStringValues.length ; i++){
	wFormula = wFormula.replaceWord("\"" + wArrStringValues[i] + "\"", ("STR_" + i));
}
	
    // 케리지리턴이나 탭등을 제거한다
	wFormula = wFormula.replace(/\r\n/g," ").replace(/\t/g," ").trim();
	
  // 대문자로 변환
	wFormula = wFormula.toUpperCase();
  
    // --- 메인동작 기능-----------------------------------------------------
    var wArrRange = [0,0,0,0];
  while (wFormula.indexOf("CELL ") >= 0) wFormula.replaceWord("CELL ","CELL");

  var wFuncPosition = wFormula.indexOf("CELL(");
  while (wFuncPosition >= 0){
      var wEndPosion = wFormula.indexOf(")", wFuncPosition);
      var wCellString = wFormula.substring(wFuncPosition + 5, wEndPosion).trim().replace(/\"/g,""); // 6은
																									// "CELL("의
																									// 길이
      var wValueString = "";
      
        // 괄호사이의 셀값을 셀값으로 바꾼다(문자와 숫자 셀타입을 구분)
      var wArrCellRanges = wCellString.split(",");
      for (var i=0; i < wArrCellRanges.length; i++){
          var wSheetName = wArrCellRanges[i].split("!")[0].trim(); 
          var wCellRange = wArrCellRanges[i].split("!")[1].trim();
          var wSheet = controls[wSheetName];
            var wMaxRows = wSheet.maxRows;
            var wMaxCols = wSheet.maxCols;
          
            parseRCToRange(wCellRange, 1, 1, wMaxRows, wMaxCols, wArrRange);
            
            for (var wRowNum = wArrRange[0];wRowNum <= wArrRange[2];wRowNum++){
                for (var wColNum = wArrRange[1];wColNum <= wArrRange[3];wColNum++){
                   var wCellType = wSheet.rows[wRowNum].cells[wColNum].celltype;
                 wValueString += (wValueString.length > 0 ? "," : "") 
                               + (wCellType == CELLTYPE_EDIT > 0 ? "\"" : "") 
                               + wSheet.getValue(wRowNum, wColNum)
                               + (wCellType == CELLTYPE_EDIT > 0 ? "\"" : "");

              }
          }
      }
      
      wFormula = wFormula.substring(0, wFuncPosition) + wValueString + wFormula.substring(++wEndPosion);
      
      wFuncPosition = wFormula.indexOf("CELL(");
  }    
  // 문자열교체 STR_n - > "..."
for (var i = 0; i < wArrStringValues.length ; i++){
	wFormula = wFormula.replaceWord(("STR_" + i), "\"" + wArrStringValues[i] + "\"");
}
    
    return wFormula;
};

/***************************************************************************
* 시트텍스트의 동작에관한 부분이다
**************************************************************************/

function cell_onKeyPress(e){
	if (!e) e = window.event;
	var em = getSrcElement(e);
	
    var wKeyCode = (e.which) ? e.which : e.keyCode;
    var wSheet = searchSheet(em);
   
    // 사용자 코딩 추가영역을 호출한다
    if (wSheet.hasKeyPressEvent) {
        var wResult = wSheet.fncKeyPressEvent(wSheet.currentRow, wSheet.currentCol, wKeyCode );
        if (typeof(wResult)=="boolean" && !wResult) {
            stopEvent(e);
            return false;
        }            
    } 
	
    if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) <= 7) {
    	if (wKeyCode == 13){
    		cell_onKeyDown(e);
    	}
    }
    
    return true;
};

function cell_onKeyDown(e){
	if (!e) e = window.event;
	var em = getSrcElement(e);
	
	var KeyCode = (e.which) ? e.which : e.keyCode ;
    var wSheet = searchSheet(em);
    
    // 사용자 코딩 추가영역을 호출한다
    if (wSheet.hasKeyDownEvent) {
        var wResult = wSheet.fncKeyDownEvent(wSheet.currentRow, wSheet.currentCol, KeyCode, getShiftKeyPressed(e), getCtrlPressed(e), getAltPressed(e));
        if (typeof(wResult)=="boolean" && !wResult) {
            stopEvent(e);
            return false;
        }            
    } 

    if (KeyCode >= 112 && KeyCode <= 123) return true; // F1 ~ F12
    if (wSheet.tabKeyAction == SHEET_TAB_TONEXTCTRL && KeyCode == 9)                                                                  
    {                                                                           
    	stopEvent(e);
    	if (getShiftKeyPressed(e)){
  	    call_cell_onBlur(em);
  	    setFocusToFormerControl(wSheet.controlName);
	} else {
  	    call_cell_onBlur(em);
          setFocusToNextControl(wSheet.controlName);
	}
    } else if (wSheet.tabKeyAction == SHEET_TAB_TONEXTCELL && KeyCode == 9){ // tab
		if (getShiftKeyPressed(e)){
			stopEvent(e);
	   		var name = em.getAttribute("name");
            setTimeout("keyAction(\"" + name + "\", \"reverse\");" ,1); 
		} else {
			stopEvent(e);
	   		var name = em.getAttribute("name");
            setTimeout("keyAction(\"" + name + "\");" ,1); 
		}
    } else if(KeyCode == 13){					// enter
		if (getShiftKeyPressed(e)){
			stopEvent(e);
	   		var name = em.getAttribute("name");
            setTimeout("keyAction(\"" + name + "\", \"enterReverse\");" ,1); 
		} else {
			stopEvent(e);
	   		var name = em.getAttribute("name");
            setTimeout("keyAction(\"" + name + "\", \"enter\");" ,1); 
		}
    }else if (KeyCode == 38 || (getShiftKeyPressed(e) && KeyCode == 104)){    // 38 : up
 		var name = em.getAttribute("name");
        setTimeout("keyAction(\"" + name + "\", \"upper\");" ,1);
	stopEvent(e);
    } else if (KeyCode == 40 || (getShiftKeyPressed(e) && KeyCode == 98)){    // 40 : down
 		var name = em.getAttribute("name");
        setTimeout("keyAction(\"" + name + "\", \"lower\");" ,1); 
	stopEvent(e);
 		
    } else if (KeyCode == 37 || (getShiftKeyPressed(e) && KeyCode == 100)){    // 37 : to Left
    	if (em.tagName=="SELECT"){
   		var name = em.getAttribute("name");
		stopEvent(e);
          setTimeout("keyAction(\"" + name + "\", \"left\");" ,1); 
    	} else {
     	    var selLength = getCaretLength(em);
	 	    var startPos = getCaretPosition(em);
	 	    if (startPos == 0 && selLength == 0){
		   		var name = em.getAttribute("name");
				stopEvent(e);
	            setTimeout("keyAction(\"" + name + "\", \"left\");" ,1); 
	    	} 
    	}

    } else if (KeyCode == 39 || (getShiftKeyPressed(e) && KeyCode == 102)){    // 39 : to Right
    	if (em.tagName=="SELECT"){
   		var name = em.getAttribute("name");
		stopEvent(e);
          setTimeout("keyAction(\"" + name + "\", \"right\");" ,1); 
    	} else {
	 	    var startPos = getCaretPosition(em);
	 	    var value = ("" + em.value);
		    
	    	if (value.length == startPos){
		   		var name = em.getAttribute("name");
				stopEvent(e);
	            setTimeout("keyAction(\"" + name + "\", \"right\");" ,1); 
	    	} 
    	}
      	
    } else {
    	if(e.ctrlKey == true || e.altKey == true) return true;
        var wSheet = searchSheet(em);
        var wRowNum = parseInt(1 * em.getAttribute("row"));
        var wColNum = parseInt(1 * em.getAttribute("col"));

        //var canUpdateCellByControlValue = (wRowNum != 0 && wColNum != 0);
        
        if (wRowNum == 0) wRowNum = wSheet.currentRow;
        if (wColNum == 0) wColNum = wSheet.currentCol;
        
        var wDataCell = wSheet.rows[wRowNum].cells[wColNum];
        var wMask = wDataCell.cellMaskTypeValue;
        
        //delete, 백스페이스 return
        if((KeyCode == 46 || KeyCode == 8) && wDataCell.celltype != CELLTYPE_MASK) return true;
        if(wDataCell.celltype == CELLTYPE_COMBOBOX){
        	
        	stopEvent(e);
        	return true;
        }else
          // 시간 타입
        if(wDataCell.celltype == CELLTYPE_TIME && ((!(KeyCode>=48 && KeyCode<=57) && !(KeyCode>=96 && KeyCode<=105)) || e.shiftKey == true)){
        	stopEvent(e);
 	   		return true;
        }else   //mask 타입 (한글 입력 불가)
        if(wDataCell.celltype == CELLTYPE_MASK && wMask != ""){
        	// 기능키 return
        	if(KeyCode == 16 || KeyCode == 27 || KeyCode == 45 || (KeyCode >= 33 && KeyCode <= 36) || KeyCode == 20 || KeyCode == 21 || KeyCode == 25 || KeyCode == 13 || KeyCode == 91 || KeyCode == 91 || KeyCode == 91 || KeyCode == 19 || KeyCode == 145 || KeyCode == 44 || KeyCode == 229) {
        		stopEvent(e);
        		return true;
        	}
        	if(wSheet.textControl.value.length > wMask.length) {
        		stopEvent(e);
        		return true;
        	}
		var textValue = wSheet.textControl.value;
		var textValueArray = [];
		var lThis = wSheet.textControl;
		var pStart = lThis.selectionStart;
		var pEnd = lThis.selectionEnd;
		var textLength = textValue.length;
		var maskLength = wMask.length; 
		var result = "";
		var deleteGu = 0;
		var j_ = -1;
		
		// --------------백스페이스, delete-------------
		if(KeyCode == 8 || KeyCode == 46){  
			if(pStart != pEnd){ // 범위선택
				for(var i=0; i<maskLength; i++){
					if(i >= pStart && i < pEnd) continue;
					if(wMask[i] == "_"){
						j_++;
						textValueArray[j_] = (textValue[i]==undefined? wMask[i]: textValue[i]);
					}
				}
				for(var i=0; i<pEnd-pStart; i++){
					textValueArray.push("_");
				}
			}else{ //단일
				deleteGu = (KeyCode==8? -1: 0);
 	 			for(var i=0; i<textLength; i++){
 	 				if(i==pStart + deleteGu) continue;
 	 				if(wMask[i] == "_"){
 	 					j_++;
 	 					textValueArray[j_] = textValue[i];
 	 				}
 	 			}
 	 			textValueArray.push("_");
			}
			// 커서 위치 값 조정
			pStart += deleteGu;
			// 이벤트를 스톱하여 두번 삭제되는걸 방지한다.
			stopEvent(e);
		}
		// ---------------스페이스----------------
		else if(KeyCode == 32){
			stopEvent(e);
			if(textValue[pStart] == "_" || pStart >= textLength){
				return true;
			}else{
				pStart += 1;
				// 커서 위치 이동
 	 		    if(lThis.setSelectionRange) {
 	 		      lThis.focus();
 	 		      lThis.setSelectionRange(pStart,pStart);
 	 		    } else if (lThis.createTextRange) {
 	 		      var range = lThis.createTextRange(); 
 	 		      range.collapse(true);
 	 		      range.moveEnd('character', pStart);
 	 		      range.moveStart('character', pStart); 
 	 		      range.select();
 	 		    }
	 	 		return true;
			}
		}
		// --------------------일반키------------------
		else{
			// 입력할수 없는 곳에 커서가 있을때 위치를 옮겨준다.
			for(var i=pStart; i<textLength; i++){
				if(wMask[pStart] != "_" && pStart < maskLength) {
					pStart += 1;
					pEnd = pStart;
				}
			}
			// 커서뒤에 '_' 가 있을경우 가장 가까운 '_' 쪽으로 커서를 옮겨준다.
			for(var i=0; i<pStart; i++){
				if(textValue[i] == "_"){
					pStart = pEnd = i;
				}
			}
			
			// 커서가 텍스트 제일 끝에 있을때 커서를 뒤쪽으로 이동하여 가장가까운 입력할 수 있는 위치으로 옮겨준다.
			if(pStart >= maskLength){
				for(var i=pStart; i<=pStart; i--){
					if(wMask[i] == "_"){
						pStart = i;
						pEnd = pStart;
						break;
					}
				}
			}
			
			if(pEnd-pStart == 1){ // 범위선택 1 자리
				return true;
			}else if(pStart != pEnd){  //범위선택
				for(var i=0; i<maskLength; i++){
					if(i == pStart){
						j_++;
						i++;
						textValueArray[j_] = "";
					}
					if(i > pStart && i < pEnd) continue;
					if(wMask[i] == "_"){
						j_++;
						textValueArray[j_] = (textValue[i]==undefined? wMask[i]: textValue[i]);
					}
				}
				for(var i=0; i<pEnd-pStart; i++){
					textValueArray.push("_");
				}
			}else{ // 단일
				for(var i=0; i<maskLength; i++){
					if(wMask[i] == "_"){
						j_++;
						if(i == pStart) {
							textValueArray[j_] = ""; 
							j_++;
						}
						textValueArray[j_] = (textValue[i]==undefined? wMask[i]: textValue[i]);
					}
				}
				textValueArray.pop();
			}
		}
		
		// value 값 세팅
		j_ = -1;
		for(var i=0; i<maskLength; i++){
			if(wMask[i] == "_"){
					j_++;
					result += textValueArray[j_];
				}else result += wMask[i];
		}
		// textcontrol 값 세팅
		wSheet.textControl.value = result;
			
		// 커서 위치 이동
	    if(lThis.setSelectionRange) {
	      lThis.focus();
	      lThis.setSelectionRange(pStart,pStart);
	    } else if (lThis.createTextRange) {
	      var range = lThis.createTextRange(); 
	      range.collapse(true);
	      range.moveEnd('character', pStart);
	      range.moveStart('character', pStart); 
	      range.select();
	    }
	    
 		return true;
	  
 		} else
        if (!getShiftKeyPressed(e) && KeyCode >= 48 && KeyCode <= 57){          // 숫자코드
     		// 모든경우에 OK
     	} else 
        if (!getShiftKeyPressed(e) && KeyCode >= 96 && KeyCode <= 105){         // 숫자코드
         		// 모든경우에 OK
     	} else 
 		if (wDataCell.celltype == CELLTYPE_DATE) {
 			stopEvent(e);
 	   		return true;
     		
     	} else if (wDataCell.celltype == CELLTYPE_NUMBER   || 
     			 //  wDataCell.celltype == CELLTYPE_FLOAT  || 
     			 //  wDataCell.celltype == CELLTYPE_CURRENCY
     			   wDataCell.celltype == CELLTYPE_PERCENT
     			   ) {
     		if (KeyCode == 189 || KeyCode == 109){  // 189, 109 : "-"
	     	    // 빈양식인 경우
	     	    if (("" + em.value).length == 0){
	     	    	// 통과
	     	    } else {
		     	    var selLength = getCaretLength(em);
		     	    var startPos = getCaretPosition(em);
		     	    var value = ("" + em.value);
		     	    
	     	    	// 전체 선택 상태에서 "-" 친경우 ok
	     	    	if (value.length == selLength){
		     	    	// 통과
	     	    	} 
		     	    // 캐럿이 첫번째 위치에 있고, 뒤에가 숫자인 경우
	     	    	else if (startPos == 0 &&  value.length != 0 && value.substring(0,1) >= "0" && value.substring(0,1) <= "9"){
		     	    	// 통과
	     	    	} else {
	     	    		stopEvent(e);
	     	    	}
	     	    }
     	    	
     	    } else if (KeyCode == 190 || KeyCode == 110){  // 46 : "."
     	    	if (("" + em.value).length == 0){
     	    		stopEvent(e);
     	    	} else if (em.value.split(".").length > 1) stopEvent(e);
     	    } else {
     	    	stopEvent(e);
     	    }
     	} else if (wDataCell.celltype == CELLTYPE_INTEGER) {
     		if (KeyCode == 189 || KeyCode == 109){  // 189, 109 : "-"
	     	    // 빈양식인 경우
	     	    if (("" + em.value).length == 0){
	     	    	// 통과
	     	    } else {
		     	    var selLength = getCaretLength(em);
		     	    var startPos = getCaretPosition(em);
		     	    var value = ("" + em.value);
		     	    
	     	    	// 전체 선택 상태에서 "-" 친경우 ok
	     	    	if (value.length == selLength){
		     	    	// 통과
	     	    	} 
		     	    // 캐럿이 첫번째 위치에 있고, 뒤에가 숫자인 경우
	     	    	else if (startPos == 0 &&  value.length != 0 && value.substring(0,1) >= "0" && value.substring(0,1) <= "9"){
		     	    	// 통과
	     	    	} else {
	     	    		stopEvent(e);
	     	    	}
	     	    }
     	    	
     	    } else {
     			stopEvent(e);
     	    }
     	}
    }
    
    // 메모리해제
    em = null;

    return true;                                                                           
};

function cell_onKeyUp(e){
	if (!e) e = window.event;
	var em = getSrcElement(e);
	
	var KeyCode = (e.which) ? e.which : e.keyCode ;
    var wSheet = searchSheet(em);
    
    // 사용자 코딩 추가영역을 호출한다
    if (wSheet.hasKeyUpEvent) {
        var wResult = wSheet.fncKeyUpEvent(wSheet.currentRow, wSheet.currentCol, KeyCode, getShiftKeyPressed(e), getCtrlPressed(e), getAltPressed(e));
        if (typeof(wResult)=="boolean" && !wResult) {
            stopEvent(e);
            return false;
        }            
    } 
	
	em = null;  wSheet=null;
	return true;
}

// Key Action 에서는 Blur를 타서는 안된다
function keyAction(name, direction){

	if (direction == undefined) direction = "forward";
      	
	var em = document.getElementsByName(name)[0];
	
    var wSheet = searchSheet(em);
    var wRowNum = parseInt(1 * em.getAttribute("row"));
    var wColNum = parseInt(1 * em.getAttribute("col"));

    var canUpdateCellByControlValue = (wRowNum != 0 && wColNum != 0);
    
    if (wRowNum == 0) wRowNum = wSheet.currentRow;
    if (wColNum == 0) wColNum = wSheet.currentCol;
    
    var wCell = wSheet.cellOf(wRowNum, wColNum);
    var value = em.value;

    if (wSheet.hasValidateEvent) {
    	wSheet.callerFncName = "checkCell";
        var wResult = wSheet.fncValidateEvent(wColNum, em.value);
        if (typeof(wResult)=="boolean" && !wResult) {
            em.focus();
            em.select();
        	wSheet.callerFncName = "";
            return false;
        } else {
        	wSheet.callerFncName = "";            
        }
    } 

	wSheet.callerFncName = "checkCell";
    if (wSheet.checkCell(wRowNum, wColNum, value)){
    	wSheet.callerFncName = "";     
    	if (canUpdateCellByControlValue){
            // 시트의 셀값 갱신
            wSheet.setValue(wRowNum, wColNum, value);
            wSheet.displayCell(wRowNum, wColNum);
            
            // 연결된 산식 재계산
            if (wSheet.autoCalc) {
                wSheet.calculateCell(wRowNum, wColNum);
            }
    	}
        
        // 다음 셀로 이동
   	    em.setAttribute("tabmode", "true");
   	    if (direction == "reverse"){
            wSheet.moveToFormerCell(wCell);
            
   	    } else if (direction == "forward"){
            wSheet.moveToNextCell(wCell);
            
   	    } else if (direction == "enterReverse"){
            wSheet.moveToFormerDownNextCell(wCell);
            
   	    } else if (direction == "enter"){
            wSheet.moveToDownNextCell(wCell);
            
   	    } else if (direction == "upper"){
            wSheet.moveToUpperCell(wCell);
            
   	    } else if (direction == "lower"){
            wSheet.moveToLowerCell(wCell);
            
   	    } else if (direction == "left"){
            wSheet.moveToLeftCell(wRowNum, wColNum);
            
   	    } else if (direction == "right"){
            wSheet.moveToRightCell(wRowNum, wColNum);
            
   	    }
   	    em.removeAttribute("tabmode");
   	    
    } else {
    	wSheet.callerFncName = "";            
        em.select();
    }
    
    // 메모리해제
    em = null;
    wSheet = null;
    
	return;
};


// 마우스로 포커스를 잃을 때만 여기를 타야 한다
function cell_onBlur(e){

	if (!e) e = window.event;
	var em = getSrcElement(e);
	
	// controlset에서 focus 다음에 select하면 blur를 호출하는 버그에 대응하기 위함
	if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) <= 7) {
		// hasAttribute 메서드 지원 불가
    	if (em.getAttribute("SELMODE") != null && em.getAttribute("SELMODE") != undefined && em.getAttribute("SELMODE").length > 0){
    		em.setAttribute("SELMODE", "");
    		em.removeAttribute("SELMODE");
    		stopEvent(e);
    		
            em = null;
    		return;
    	}
		
	} else {
    	if (em.hasAttribute("SELMODE")){
    		em.removeAttribute("SELMODE");
    		stopEvent(e);
    		
            em = null;

            return;
    	}
	}
	
	call_cell_onBlur(em);

    stopEvent(e);

    // 메모리해제
    em = null;

    return;
};

function call_cell_onBlur(em){

	var value = em.value;

    var wSheet = searchSheet(em);
    
//        wSheet.moveTorowSpanPrevRow = -1;
//        wSheet.moveTorowSpanPrevCol = -1;

    if (em.getAttribute("tabmode") && em.getAttribute("tabmode") == "true") {
        em.removeAttribute("tabmode");
        wSheet = null;
        return;
    }
    
    wSheet.setPickHeaderClass(-1, -1, "");
    
	 if (wSheet.callerFncName == "checkCell"){  // alert로인해 Blur이벤트가 다시호출되는
											// 것을 방지
    	wSheet.callerFncName = "";
        wSheet = null;
	    return;
    }
    
    var wRowNum = parseInt(1 * em.getAttribute("row"));
    var wColNum = parseInt(1 * em.getAttribute("col"));

    var canUpdateCellByControlValue = (wRowNum != 0 && wColNum != 0);
    
    if (wRowNum == 0) wRowNum = wSheet.currentRow;
    if (wColNum == 0) wColNum = wSheet.currentCol;

    if (wSheet.hasValidateEvent) {
    	wSheet.callerFncName = "checkCell";
        var wResult = wSheet.fncValidateEvent(wColNum, em.value);
        if (typeof(wResult)=="boolean" && !wResult) {
            em.focus();
            em.select();
        	wSheet.callerFncName = "";
            return false;
        } else {
        	wSheet.callerFncName = "";            
        }
    } 

	wSheet.callerFncName = "checkCell";
	if (!wSheet.checkCell(wRowNum, wColNum, em.value)){
        em.focus();
        em.select();
    	wSheet.callerFncName = "";
        return;
        
    } else {
    	wSheet.callerFncName = "";
        if (wSheet.autoCalc)
            wSheet.calculateCell(wRowNum, wColNum);
    }
    
	if (canUpdateCellByControlValue){
        wSheet.setValue(wRowNum, wColNum, value);
	}
	
    wSheet._hideCellEdit();
    wSheet.displayCell(wRowNum, wColNum); // 디스플레이셀 두번 타는 문제 해결 방안
    // 메모리해제
    wSheet = null;
    
    return;
};

/***************************************************************************
* 데이터시트 콘트롤의 콤보셀 처리함수 부분이다
**************************************************************************/

function clearLists(element)
{
  	var i = 0;
  	var wOptions =  element.options;
  	
  	for (i = wOptions.length - 1 ; i >= 0; i--){
  		wOptions.remove(i);
  		
  		// 주의 맨 현재 선택된 데이터 지워지면 Change 이벤트 발생
  	}
};

function copyLists(element1, element2)
{
  	var i = 0;
  	var wOptions1 =  element1.options;
  	var wOptions2 =  element2.options;
  	var opt = null;
  	
  	for (i = 0 ;  i < wOptions1.length; i++){
        opt = document.createElement("option");
        opt.text = wOptions1[i].text;
        opt.value = wOptions1[i].value;
        wOptions2.add(opt);
        if(wOptions1[i].selected) opt.selected = wOptions1[i].selected;
  	}
};

// 셀을 선택했을 때 동작
function cell_onChange(e){
	// 변수값 메모
	if (!e) e = window.event;
    var em = getSrcElement(e);
    if (em.getAttribute("nonefocusmode") && em.getAttribute("nonefocusmode") == "true") {
        stopEvent(e);
    	return 
    }
    
	var wSheet = searchSheet(em);
	
    var wRowNum = parseInt(1 * em.getAttribute("row"));
    var wColNum = parseInt(1 * em.getAttribute("col"));

    //var canUpdateCellByControlValue = (wRowNum != 0 && wColNum != 0);
    
    if (wRowNum == 0) wRowNum = wSheet.currentRow;
    if (wColNum == 0) wColNum = wSheet.currentCol;

//        var wCell = wSheet.cellOf(wRowNum, wColNum);
    
    var wValue = em.options[em.selectedIndex].value;
    var wText = em.options[em.selectedIndex].text;
    
    if (wSheet.hasValidateEvent) {
    	wSheet.callerFncName = "checkCell";
        var wResult = wSheet.fncValidateEvent(wColNum, em.value);
        if (typeof(wResult)=="boolean" && !wResult) {
        	wSheet.callerFncName = "";
            em.focus();
            em.select();
            
            stopEvent(e);
            
            em = null; wSheet = null;// wCell = null;
            return false;
        }            
    } 
    
    if (wSheet.callerFncName == "checkCell"){  // alert로인해 Blur이벤트가 다시호출되는
											// 것을 방지
    	wSheet.callerFncName = "";
    } else {
    	if (!wSheet.checkCell(wRowNum, wColNum, em.value)){
            em.focus();

            stopEvent(e);

            em = null; wSheet = null;// wCell = null;
            return;
            
        } else {
            if (wSheet.autoCalc)
                wSheet.calculateCell(wRowNum, wColNum);
        }
    }
    
    // 셀에 텍스트값을 채움
    var wColumn = wSheet.columns[wColNum];
    if (wColumn.ComboDataLinked){
	    wSheet.setValue(wRowNum, wColNum, wValue);
    }
    if (wColumn.ComboTextLinked){
	    wSheet.setText(wRowNum, wColNum, wText);
    }
    if (!wColumn.ComboDataLinked && !wColumn.ComboTextLinked){
    	if (wColumn.comboLists.length > 1){
    		wSheet.setText(wRowNum, wColNum, wText);
    	}
    }

    // 다음셀로 포커스 이동
    //wSheet.moveToNextCell(wCell);
    
    stopEvent(e);

    em = null; wSheet = null; wCell = null; 
    wColumn = null;
    
    return;
};

    
function cmbCell_onBlur(e){
	if (!e) e = window.event;
	var em = getSrcElement(e);
    var wSheet = searchSheet(em);
    
    wSheet.setPickHeaderClass(-1, -1, "");
    wSheet._hideCellCombo();

    stopEvent(e);

    em = null; wSheet = null;
    return;
};

function call_cmbCell_onBlur(em){
    var wSheet = searchSheet(em);
    
    wSheet.setPickHeaderClass(-1, -1, "");
    wSheet._hideCellCombo();
    
    wSheet = null;
    
    return;
};

// 콤보타입 칼럼에 선택리스트를 추가합니다.
DataSheet.prototype.addComboInfo = function(colNum, text, value){
    // functionname : [DataSheet.addComboInfo]

    var wIndexNum = this.columns[colNum].comboLists.length;
    this.columns[colNum].comboLists[wIndexNum] = new EXOListItem(text, value);
    return;
};

// 콤보타입 칼럼에 선택리스트를 초기화합니다.
DataSheet.prototype.clsComboInfo = function(colNum){
    // functionname : [DataSheet.clsComboInfo]

    this.columns[colNum].comboLists.clear();
    this.columns[colNum].comboLists = [null];
    return;
};

/***************************************************************************
* 콘트롤의 첫번째 셀로 이동하는 부분이다 - 클릭 이벤트를 일으킨다
**************************************************************************/
DataSheet.prototype.selectFirstRow = function(){
    // functionname : [DataSheet.selectFirstRow]
    
    // 강제로 object의 1번 데이터로 키퀀스 변경시 동작을 일으킨다
    if (this.currentRow == 1) {
        var objectSeq = this.rows[1].objectSeq;
        
        for (var i = 0; i < this.linkedObjects.length; i++){
            dataObject = this.linkedObjects[i];
            if (dataObject.hasSeqChangeEvent){
                dataObject.fncSeqChangeEvent(0, objectSeq);
            }
        }
    }
    
    // 시트의 디스플레이를 갱신한다
    this.currentRow = 0;
    this.currentCol = 0;

	this.moveTo(1, 1);
	
    return;
}; 

/***************************************************************************
* 데이터시트 콘트롤의 체크셀 처리함수 부분이다
**************************************************************************/
function cell_onClick(em, value){
    // 변수값 메모
    var wSheet = searchSheet(em);
    var wCell  = searchCell(em);
    var wDataCell = wSheet.getDataCell(wCell);
    
    // Lock이 걸린 셀이면 값을 바꾸지 않는다
    if ((wDataCell.lockMode && !wSheet.permitFocusToLockedCell) || wDataCell.hidden){
    	return;
    }
    
    var wRowNum = wSheet.currentRow; 
    var wColNum = wSheet.currentCol;
    
    // T/F를 바꾼다
    var wValue = (value == 1 ? wSheet.columns[wColNum].ValueWhenUnchecked 
                             : wSheet.columns[wColNum].ValueWhenChecked);
    
    // 체크 콘트롤 삭제
    // removeTag(em);

	wCell.style.textAlign = "center";
	if (wValue == wSheet.columns[wColNum].ValueWhenChecked) {
		wCell.innerHTML = "&#9745;";
	} else {
		wCell.innerHTML = "&#9744;";
	}
	if (wSheet.sheetType == SHEETTYPE_DATASHEET){
        wCell.style.cursor="pointer";
//        wCell.style.fontSize="10pt";
	}
    
    // 셀에 텍스트값을 채움
    wSheet.setValue(wRowNum, wColNum, wValue);
    
    // 산식재계산
    if (wSheet.checkCell(wRowNum, wColNum, wValue)){
       if (wSheet.autoCalc)
            wSheet.calculateCell(wRowNum, wColNum);
    }
    
    // 다음셀로 포커스 이동 &&&
     //wSheet.moveToNextCell(wCell);
    em = null; wSheet = null; wCell = null;

    return;
};


/***************************************************************************
* 데이터시트 콘트롤의 버튼셀 처리함수 부분이다
**************************************************************************/
function cell_onCommandMouseOut(em){
    // 변수값 메모
    var wSheet = searchSheet(em);
    if(wSheet == null) return;
    var wCell  = searchCell(em);
    var wDataCell = wSheet.getDataCell(wCell);
    
    em.src = wDataCell.buttonImage1.src;
    
    wSheet = null; wCell = null; wDataCell = null; 
    return;
};

function cell_onCommandMouseOver(em){
    // 변수값 메모
    var wSheet = searchSheet(em);
    var wCell  = searchCell(em);
    var wDataCell = wSheet.getDataCell(wCell);
    
    em.src = wDataCell.buttonImage2.src;

    wSheet = null; wCell = null; wDataCell = null; 

    return;
};

function cell_onCommandClick(em, rowNum, colNum){
    // 변수값 메모
    var wSheet = searchSheet(em);
    // var wCell = searchCell(em);
    // var wDataCell = wSheet.getDataCell(wCell);
    
    // 현재 줄바꿈
    wSheet.click(em);
    if (wSheet.hasCommandClickEvent) {
        var wResult = wSheet.fncCommandClickEvent(rowNum, colNum);
        if (typeof(wResult)=="boolean" && !wResult) {
            return false;
        }            
    }

    wSheet = null;
    return;
};

function cell_onImageClick(em, rowNum, colNum){
    // 변수값 메모
    var wSheet = searchSheet(em);
    
    // 현재 줄바꿈
    wSheet.click(em);
    if (wSheet.hasImageClickEvent) {
        var wResult = wSheet.fncImageClickEvent(wSheet.currentRow, wSheet.currentCol);
        if (typeof(wResult)=="boolean" && !wResult) {
            return false;
        }            
    } 
    
    wSheet = null;

    return;
};


/*
* TD 객체로 데이터 셀을 찾음
*/
DataSheet.prototype.getDataCell = function(em){
    // functionname : [DataSheet.getDataCell]
  var wRow = em.parentNode;

	// 현재 줄번호를 서칭해서 대입하고
	var wRowNum = this.rowNumOf(wRow.rowIndex, getCellIndex(em), CONV_HARD_LOGICAL);
	var wColNum = this.colNumOf(wRow.rowIndex, getCellIndex(em), CONV_HARD_LOGICAL);
	
	
    wRow = null;  
    
	return this.rows[wRowNum].cells[wColNum];
	
};
    
/***************************************************************************
* 테이블을 물리적으로 소트하고 바뀐순서를 문자열로 리턴한다 여러줄의 칼럼헤드가 존재하는 경우 반드시 맨아래 헤드를 클릭해야 작동한다
* 데이터중에 병합된 칼럼이 있으면 오작동한다. 오류를 방지할것
**************************************************************************/
DataSheet.prototype.sortTable = function (em, direction) {
    // functionname : [DataSheet.sortTable]

    var wReturn = "";
            
    if (this.maxRows <= 1) return wReturn;

    // Physical 줄번호 열번호 파악
    var wHardColNum =  getCellIndex(em);
    var wHardRowNum =  em.parentNode.rowIndex;
    
    // 좌상귀의 칼럼은 소트 대상이 아니다
    if (wHardColNum == 0 &&  wHardRowNum == 0) return wReturn;
    
    var wAdditionalHeadRowCount = this.headRows - this.rowsPerDataRow;
    wHardRowNum = wHardRowNum - wAdditionalHeadRowCount;

    
    // 1번줄로 환산하여 칼럼번호 계산
    var wColNum = this.colNumOf(wHardRowNum + this.rowsPerDataRow, wHardColNum, CONV_HARD_LOGICAL); 

    // 전역변수에 대입
    SORT_COLUMN_INDEX = wColNum;
    
    var wDirection = (this.columns[wColNum].sortDirection == "ASC" ? "DESC" : "ASC");
    wDirection = (direction ? direction : wDirection);
    
    // 셀타입별 소트함수 지정
    var wCellType = this.columns[wColNum].defaultCellType;
    if (wCellType == CELLTYPE_DATE) {
        sortfn = compareRowByDate;
    } else if (wCellType == CELLTYPE_EDIT)  {
        sortfn = compareRowByString;
    } else if (wCellType == CELLTYPE_NUMBER)  {
        sortfn = compareRowByNumeric;
    } else if (wCellType == CELLTYPE_PERCENT)  {
        sortfn = compareRowByNumeric;
    } else if (wCellType == CELLTYPE_INTEGER)  {
        sortfn = compareRowByNumeric;
    } else if (wCellType == CELLTYPE_BUTTON)  {
        return wReturn;
    } else if (wCellType == CELLTYPE_PICTURE)  {
        return wReturn;
    } else if (wCellType == CELLTYPE_COMBOBOX)  {  
        sortfn = compareRowByNumeric;
    } else if (wCellType == CELLTYPE_CHECKBOX) {
        sortfn = compareRowByNumeric;
    } else if (wCellType == CELLTYPE_DATE) {
        sortfn = compareRowByNumeric;
    } else if (wCellType == CELLTYPE_MASK) {
        sortfn = compareRowByString;
    } else if (wCellType == CELLTYPE_TIME) {
        sortfn = compareRowByNumeric;
    }


    var newRows = []; // 0번부터배열이 시작됨에 주의
    for (var wRowNum = 1; wRowNum <= this.maxRows; wRowNum++) { 
        newRows[wRowNum - 1] = this.rows[wRowNum]; 
        newRows[wRowNum - 1].oldNum = wRowNum;
        this.rows[wRowNum] = null;
    }
    
    newRows.sort(sortfn);
    
    if (wDirection == "ASC"){
        for (var i = 0; i < newRows.length ; i++) { 
            var wRowNum = i + 1;
            this.rows[wRowNum] = newRows[i];
            wReturn += newRows[i].oldNum + ";";
            newRows[i] = null;
        }
        
    } else {
        var wRowNum = 0;
        for (var i = newRows.length - 1; i >= 0 ; i--) { 
            this.rows[++wRowNum] = newRows[i];
            wReturn += newRows[i].oldNum + ";";
            newRows[i] = null;
        }
    }
    
    while(newRows.length > 0) newRows.pop();
    newRows = null;
    
    this.columns[wColNum].sortDirection = wDirection;

    return wReturn;        
};

DataSheet.prototype.setResultOfSort = function(orderString){
    // functionname : [DataSheet.setResultOfSort]

    var wArrRowNum = (orderString || "").split(";");
    for (var i = 0; i < wArrRowNum.length; i++){
        if (wArrRowNum[i].trim().length == 0) break;
        var wOldRowNum = parseInt(1 * wArrRowNum[wRowNum]);
        var wRowNum = i + 1;
        
        // 우연히 전후 줄순서가 같은 줄이라면 그대로 둔다.
        if (wRowNum == wOldRowNum) continue;
        
        for (var wColNum = 1; wColNum <= this.maxCols; wColNum++){
            this.displayCell(wRowNum, wColNum);
        } 
    }

    // 산식재정비
    this.autoCalc = false;
    this.refreshFormulaRefs();
    this.autoCalc = true;
    
    // 사용자 코딩 추가영역을 호출한다
    if (this.hasSortedEvent) {
        var wResult = this.fncSortedEvent();
        if (typeof(wResult)=="boolean" && !wResult) {
            stopEvent(e);
            return false;
        }            
    } 
    
    return;
};

/*
* -----------------------------------------------------------------------
* 데이터를 모두채운후에는 스크롤에 테이블 사이즈를 반영한다
* --------------------------------------------------------------------------
*/
DataSheet.prototype.resetScroll = function(realRowCount){
    // functionname : [DataSheet.resetScroll]
	
 	var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];
 	var scrollChildPanel = scrollPanel.getElementsByTagName("DIV")[0];
 	var dataPanel = this.tagObject.getElementsByTagName("DIV")[2];
 	var dataPanelHeight = dataPanel.style.height.match(/^-?\d+/)[0]*1;
   	var dataPanelWidth = ("" + dataPanel.style.width == "100%") ? ("" + getStyle(dataPanel).width).match(/^-?\d+/)[0] * 1 : dataPanel.style.width.match(/^-?\d+/)[0] * 1;
 	
 	var rowRight = null;
 	var colRight = null;	
 	var bottomCenter = null;
 	var bottomLeft = null;
 	var bottomRight = null;
 	
 	var wTables = this.tagObject.getElementsByTagName("table");
 	for(var i=0; i<wTables.length; i++){
		 if(wTables[i].getAttribute("name") == "rightRowTable") rowRight = wTables[i];
		 else if(wTables[i].getAttribute("name") == "rightColHeadTable") colRight = wTables[i];
		 else if(wTables[i].getAttribute("name") == "bottomCenterTable") bottomCenter = wTables[i];
		 else if(wTables[i].getAttribute("name") == "bottomLeftTable") bottomLeft = wTables[i];
		 else if(wTables[i].getAttribute("name") == "bottomRightTable") bottomRight = wTables[i];
 	}
 	
//   	scrollChildPanel.style.width = (this.dataTable.scrollWidth) + "px";
   	
    var rowHeight = 0;
    var rowLength = this.rowHeights.length;
    for(var dRow=1; dRow<rowLength; dRow++){
    	rowHeight += (this.rowHeights[dRow]*1); // 데이터 줄의 높이
    }
    
    var headerHeight = this.moveBottomTableHeight; // 헤더 줄의 높이
    var virtualScrollHeight = (realRowCount * rowHeight) + headerHeight; // 가상의 스크롤 페널 높이
  
   	scrollChildPanel.style.height = ((realRowCount != undefined? virtualScrollHeight: (this.dataTable.scrollHeight)) + 3) + "px";
   	
   	var browserMargin = 0;
   	
   	if(Browser.chrome) browserMargin = 1;
   	
   	// 하위 스크롤패널 크기 재조정
   	var resizeScrollPanelWidth = ("" + scrollPanel.style.width) == "100%" ? "100%" : (scrollPanel.style.width.match(/^-?\d+/)[0]*1) + browserMargin;
    var resizeScrollPanelHeight = (scrollPanel.style.height.match(/^-?\d+/)[0]*1) + browserMargin;
   	var resizeScrollChildPanelWidth = (scrollChildPanel.style.width.match(/^-?\d+/)[0]*1) + browserMargin;
   	var resizeScrollChildPanelHeight = (scrollChildPanel.style.height.match(/^-?\d+/)[0]*1) + browserMargin;
  
   	var overFlowY = scrollPanel.style.overflowY;
    var overFlowX = scrollPanel.style.overflowX;
  
    // 가로 스크롤 생성 여부 및 데이터 패널 상하 크기 조정
    // 데이터 가로길이가 시트 div 길이보다 작을때
	if(resizeScrollChildPanelWidth <= dataPanelWidth && ("" + scrollPanel.style.width) != "100%"){
		// 스크롤을 비활성화
		if(overFlowX == "scroll") scrollPanel.style.overflowX = "hidden";
		
		dataPanel.style.height = (resizeScrollPanelHeight) + 'px';
		
		var cellPadding = 19;
	    if(Browser.safari) cellPadding = 18;
	    if(Browser.opera) cellPadding = 20;
	    scrollChildPanel.style.height = resizeScrollChildPanelHeight - cellPadding + 'px';
	    
	}
	// 데이터 가로길이가 시트 div 길이보다 클때
	else if(resizeScrollChildPanelWidth > dataPanelWidth || ("" + scrollPanel.style.width) == "100%"){
		//스크롤 활성화
		if(overFlowX != "scroll") scrollPanel.style.overflowX = "scroll";
		
	    scrollChildPanel.style.height = (resizeScrollChildPanelHeight) + this.moveBottomTableHeight + "px";
	}
  
	// 데이터 패널 및 스크롤 패널 좌우크기 조정
	// 모바일 일떄
	if(isMobile.any()){
		dataPanel.style.width = "100%";
		dataPanel.style.height = "100%";
	}
	// 데이터 길이가 시트 div 길이보다 작을때
	else if(resizeScrollChildPanelHeight + this.moveBottomTableHeight < dataPanelHeight){
	  	// 스크롤을 비활성화
	  	if(overFlowY == "scroll") scrollPanel.style.overflowY = "hidden";
	  	
	  	var cellPadding = 19;
	    if(Browser.chrome) cellPadding = 21;
	    else if(Browser.safari) cellPadding = 18;
	    else if(Browser.opera) cellPadding = 20;
	    
	  	//브라우저 호환
	  	browserMargin = 1;
	  	if(Browser.chrome) browserMargin += 1;
	  	if(resizeScrollPanelWidth != "100%"){
	  		dataPanel.style.width = (resizeScrollPanelWidth - browserMargin>0? resizeScrollPanelWidth - browserMargin: 0) + 'px';	  		
	  	}
	    
	    browserMargin = -4;
	    // 하단셀 위치 조정
	    if(bottomCenter != null) bottomCenter.style.top = resizeScrollChildPanelHeight + browserMargin + 'px';
	    if(bottomLeft != null) bottomLeft.style.top = resizeScrollChildPanelHeight + browserMargin + 'px';
	    if(bottomRight != null) bottomRight.style.top = resizeScrollChildPanelHeight + browserMargin + 'px';
	}
	// 데이터 길이가 시트 div 길이보다 클때
	else if(resizeScrollChildPanelHeight + this.moveBottomTableHeight >= dataPanelHeight){
	  	//스크롤 활성화
	  	if(overFlowY != "scroll") scrollPanel.style.overflowY = "scroll";
	  	
	  	// 브라우저 호환
	  	browserMargin = 19;
	  	if(resizeScrollPanelWidth != "100%"){
	  		dataPanel.style.width = (resizeScrollPanelWidth - browserMargin) + 'px';
	  	}
	    
	    scrollChildPanel.style.height = (resizeScrollChildPanelHeight) + this.moveBottomTableHeight + "px";
	    
	    Browser.chrome? browserMargin = 1: browserMargin = 2;
	    // 하단셀 위치 조정
	    if(bottomCenter != null) bottomCenter.style.top = dataPanelHeight - (this.moveBottomTableHeight + browserMargin) + 'px';
	    if(bottomLeft != null) bottomLeft.style.top = dataPanelHeight - (this.moveBottomTableHeight + browserMargin) + 'px';
	    if(bottomRight != null) bottomRight.style.top = dataPanelHeight - (this.moveBottomTableHeight + browserMargin) + 'px';
	}
  
//	dataPanelWidth = dataPanel.style.width.match(/^-?\d+/)[0]*1;
	dataPanelWidth = ("" + dataPanel.style.width == "100%") ? ("" + getStyle(dataPanel).width).match(/^-?\d+/)[0] * 1 : dataPanel.style.width.match(/^-?\d+/)[0] * 1;
	var tableWidth = Browser.ie? wTables[0].clientWidth - 1: wTables[0].clientWidth;
	
	// 우측 테이블이 없을경우 여기서 리턴
	if(rowRight == null) return;
  
	var firstDataRow = this.addHeaderRows;
	var rightWidth = 0;
	var rightCell = null;
	// 좌우 스크롤이 없을경우 우측고정 테이블 위치 조정
	if(tableWidth <= dataPanelWidth){
	  	if(Browser.opera) browserMargin = 2;
	    else browserMargin = 1;
	  	for(var i=0; i<wTables[0].rows[firstDataRow].cells.length; i++){
	  		rightCell = (wTables[0].rows[firstDataRow].cells[i].style.width.match(/^-?\d+/)[0]*1);
	  		if(i > 0 && rightCell < 1) continue;
	  		rightWidth += rightCell + browserMargin;
	  	}
	  	
	  	rowRight.style.left = rightWidth + 'px';
	  	if(colRight != null) colRight.style.left = rightWidth + 'px';
	  	// 우측 하단셀 위치 조정
	  	if(bottomRight != null) bottomRight.style.left = rightWidth + 'px';
	}
	// 좌우 스크롤이 있을경우 우측고정 테이블 위치 조정
	else{
	  	browserMargin = 2;
	  	for(var i=0; i<colRight.rows[firstDataRow].cells.length; i++){
	  		rightCell = (colRight.rows[firstDataRow].cells[i].style.width.match(/^-?\d+/)[0]*1);
	  		if(i > 0 && rightCell < 1) continue;
	  		rightWidth += rightCell + browserMargin - 1;
	  	}
	  	
	  	rowRight.style.left = (dataPanelWidth - rightWidth) + 'px';
	  	if(colRight != null) colRight.style.left = (dataPanelWidth - rightWidth) + 'px';
	  	// 우측 하단셀 위치 조정
	  	if(bottomRight != null) bottomRight.style.left = (dataPanelWidth - rightWidth) + 'px';
	}
  
 	return;
};

// 스크롤 동작시 위,아래 줄추가 및 삭제 위치를 계산하여 해당 메소드 호출
DataSheet.prototype.scrollAction = function(scrollTop, scrollLeft){
	
	// 플로팅 콘트롤의 이동
	this._setEditControlPosition();

	// 사용자 코딩 추가영역을 호출한다
	var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];
	var scrollChildPanel = scrollPanel.getElementsByTagName("DIV")[0];
   
    if (this.hasScrollEvent) {
 	   
    	var lastScrollTop = 0; 
    	var lastScrollLeft = 0;
    	if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) <= 7) {
    		// hasAttribute 메서드 지원 불가
    		if (scrollPanel.getAttribute("lastscrolltop") != null && 
    				scrollPanel.getAttribute("lastscrolltop") != undefined && 
	    		    scrollPanel.getAttribute("lastscrolltop").length > 0){
	    			lastScrollTop = parseInt(1 * scrollPanel.getAttribute("lastscrolltop"));
	    			lastScrollLeft = parseInt(1 * scrollPanel.getAttribute("lastscrollleft"));
    			}
	    	} else {
	            if (scrollPanel.hasAttribute("lastscrolltop") && 
	                scrollPanel.getAttribute("lastscrolltop").length > 0){
	            	lastScrollTop = parseInt(1 * scrollPanel.getAttribute("lastscrolltop"));
	    			lastScrollLeft = parseInt(1 * scrollPanel.getAttribute("lastscrollleft"));
	            }
	    	}
 	   
    	this.fncScrollEvent(scrollPanel, scrollTop, scrollLeft, lastScrollTop, lastScrollLeft);

    	scrollPanel.setAttribute("lastscrolltop", scrollTop);
    	scrollPanel.setAttribute("lastscrollleft", scrollLeft);
    }
    
    scrollPanel= null;

    return;
};

/** 대용량 스크롤 시작 **/

DataSheet.prototype.dataScrollAction = function(){
	// 스크롤 동작
	 var dataPanelHeight = this.dataPanel.style.height.match(/^-?\d+/)[0]*1; // 데이터 페널의 높이
	 var scrollingHeight = (sTop - this.prevScrollTop); // 스크롤된 길이 ( + 면 아래로 스크롤, - 면 위로 스크롤)
	 var scrollRows = scrollingHeight / this.logicalRowHeights>0? Math.ceil(scrollingHeight / this.logicalRowHeights) : Math.floor(scrollingHeight / this.logicalRowHeights); // 스크롤될 줄의 수
	 
	 var upDownGu = scrollingHeight > 0; // 스크롤 이동 방향 판단 ( true : 아래로 스크롤, false : 위로 스크롤)
	 var jump = false; // 한페이지 이상 스크롤 될때 점프
	 
	 jump = upDownGu > dataPanelHeight;
	 
	 // 스크롤 점프
	 if(jump){
	   alert(getText("message_datasheet_012", "jump"));
	   this.onJumpScroll(rowCount, scrollRows, sTop);
	   return;
	 }
	 // 스크롤
	 else{
	   this.onNearScroll(upDownGu, scrollRows, sTop);
	 }
	 
//		   this.prevScrollTop = sTop; // 현재 스크롤 top 값을 저장
	 
	 return;
}

DataSheet.prototype.onNearScroll = function(upDownGu, scrollRows, sTop){
 var dataPanelHeight = this.dataPanel.style.height.match(/^-?\d+/)[0]*1; // 데이터 페널의 높이
 // 줄삭제 없이 스크롤만 하는 단계
 if(sTop < dataPanelHeight){
   var newScrollTop = (this.prevScrollTop + (scrollRows * this.logicalRowHeights) + 1);
   this.prevScrollTop = newScrollTop;
   
   // 스크롤바 위치 조정
   this.scrollPanel.scrollTop = newScrollTop;
   // 테이블 스크롤
   var wTables = this.dataPanel.getElementsByTagName("table");
   for(var i=0; i<wTables.length; i++){
	   var wTable = wTables[i];
	   var wTableName = wTables[i].getAttribute("name");
		
	   if(wTableName == "dataTable") wTable.style.top = (-1) * newScrollTop + 'px';
	   else if(wTableName == "leftRowTable") wTable.style.top = (-1) * newScrollTop + 'px';
	   else if(wTableName == "rightRowTable") wTable.style.top = (-1) * newScrollTop + 'px';
   }
   
 }
 // 스크롤되는 반대방향 줄을 삭제하고 반대쪽에 줄삽입
 else{
   // 아래로 스크롤
   if(upDownGu){
	   for(var i=0; i<scrollRows; i++){
		   this.removeRow(this.headRows);
		   this.increaseRow();
	   }
   }
   // 위로 스크롤
   else{
	   var rows = this.PhysicalMaxRows;
	   for(var i=0; i<scrollRows; i++){
		   this.removeRow(rows);
		   this.increaseRow(this.headRows);
	   }
   }
 }
 
 
 return;
};

DataSheet.prototype.removeRow = function(row){
 // Logical한 삭제위치
 var wAtRowNum = row;
 
 // Physical한 삭제위치
 var wHardRowNumAt = this.rowNumOf(wAtRowNum, 1, CONV_LOGICAL_HARD);
 var wHardRowNumAt2 = wHardRowNumAt + this.rowsPerDataRow - 1;
   

   // Physical한 삭제 - 시트별 줄삭제
 // 고정줄수 이하로 전체줄수가 줄지않는한 고정테이블과 칼럼테이블은 줄을 삭제하지 않는다
 // 대신 다시 리프레시한다
 var wTables = this.tagObject.getElementsByTagName("table");
 var wTablesLength = 0;
   for(var i=0; i < wTables.length; i++){
 	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
 		wTablesLength += 1;
 }
   
   for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){
       var wTable = wTables[wTableNum];

       if(/colhead/i.test(wTable.getAttribute("name"))) continue;
   
       // physical Row 삭제한다
       for (var wHardRowNum = wHardRowNumAt2; wHardRowNum >= wHardRowNumAt; wHardRowNum--){
           wTable.deleteRow(wHardRowNum);
       }
   }
   
   return;
};

DataSheet.prototype.increaseRow = function(code){
 this.addRow(atRowNum, noDecoration);
//	   if(code == "bottom"){
//		    var wTables = this.tagObject.getElementsByTagName("table");
//	    	var wTablesLength = 0;
//	        for(var i=0; i < wTables.length; i++){
//	        	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
//	        	wTablesLength += 1;
//	        }
//
//	        for (var wTableNum = 0; wTableNum < wTablesLength; wTableNum++){
//
//	            wTable = wTables[wTableNum];
//	            
//	            var wTableName = wTables[wTableNum].getAttribute("name");
//	            
//	            if (/colHead/i.test(wTableName)) continue;
//	            
//	            for (var i = 1; i <= this.rowsPerDataRow; i++){
//	                var wLastRowHardNum = wTable.tBodies[0].rows.length - 1;
//	                var wTableRow = document.createElement("TR");
//	                var parent = wTable.tBodies[0].rows[wLastRowHardNum];
//	                
//	                if (parent.insertAdjacentElement){
//	                	parent.insertAdjacentElement('afterEnd', wTableRow);
//	         		}
//	         		else if (parent.appendChild) {
//	         			// wTable.tBodies[0].appendChild(wTableRow); // firefox 에서
//						// insertAdjacentElement 함수에서는 <TR> 태그가 삽입이 안되는 문제가 있어
//						// appendChild 로 해결하였음
//	         			insertAdjacentElement('afterEnd' ,parent, wTableRow);
//	         		}
//	  
//	                // 20110411 firfox,chrome작동안해 변경함.
//	                // wTableRow.haveData = "1";
//	                // wTableRow.height=this.rowHeights[i];
//	                wTableRow.setAttribute("haveData","1");
//	                wTableRow.setAttribute("height", this.rowHeights[i]);
//	                
//	                // Row Head 셀의 설정
//	                var CellIndex = 0;
//	                for (var wColNum = 0; wColNum < this.headCols; wColNum++){
//	                	if (/right/i.test(wTableName)) break;
//	                    if (wColNum == this.headCols - 1){
//	                        if (i == 1){
//	                            wCell = wTableRow.insertCell(CellIndex++);
//	                            wCell.className = "RowHead";
//	                            if (this.hideRowHeader) {
//	                            	wCell.style.display = "none";
//	                            }
//	                            wCell.innerHTML = this.PhysicalMaxRows + 1;
//	                            wCell.rowSpan = this.rowsPerDataRow;
//	                        }
//	                    } else {
//	                        wCell = wTableRow.insertCell(CellIndex++);
//	                        wCell.className = "RowHead";
//	                        if (this.hideRowHeader) {
//	                        	wCell.style.display = "none";
//	                        }
//	                        wCell.innerHTML=" ";
//	                    }
//	                }
//
//	                // 본문셀의 설정
//	                var rightTableGu = false;
//	                for (var wColNum = 1; wColNum <= this.PhysicalMaxCols; wColNum++){
//	                    // 고정열수의 제약 체크
//	                    var wSheetCol =  this.colNumOf(1, wColNum, CONV_LOGICAL_SHEET);
//	                    if (/left/i.test(wTableName)){
//	                        if (wSheetCol > this.frozenCols) continue;
//	                    }
//	                    if (/right/i.test(wTableName)){
//	                        if (wSheetCol < this.frozenColsRight[0]) continue;
//	                        if (!rightTableGu) {
//	                        	rightTableGu = true;
//	                        }
//	                    }
//	                    // 자기줄번호에 해당하는 셀들만 만든다
//	                    var wColumn = this.columns[wColNum];
//	                    if (wColumn.sheetRow != i) continue;
//	                    
//	                    wCell = wTableRow.insertCell(CellIndex++);
//	                    wCell.rowSpan = wColumn.sheetRowSpan;
//	                    wCell.colSpan = wColumn.sheetColSpan;
//	                    
//	                    if (wColumn.hidden) {
//	                    	wCell.style.display = "none";
//	                    	wCell.style.width = "0px";
//	                    }
//	                    
//	                     wCell.innerHTML=" ";
//	                }
//	            }
//	        }
//	        
//	        ++this.PhysicalMaxRows;     
//	   }
 
 return;
};

DataSheet.prototype.onJumpScroll = function(row){
  
 this.removeAllRows();
  
 return;
};

DataSheet.prototype.removeAllRows = function(){
 
 return;
};

DataSheet.prototype.ViewPositionScroll = function() {

 return;
};


DataSheet.prototype.writeTopCaption = function(height, data, capStyle){

 var scrollDiv = this.tagObject.getElementsByTagName("DIV")[0];
 var dataDiv = this.tagObject.getElementsByTagName("DIV")[2];
 var scrollTop = (scrollDiv.style.top.match(/^-?\d+/)[0]) *1; //scroll 패널 top 
 var dataTop = (dataDiv.style.top.match(/^-?\d+/)[0]) *1; //data 패널 top
 var left = wSheet.style.left; // 좌측 위치
 var width = wSheet.style.width; // 가로길이
 
 // 만들어진 span 태그가 있는지 찾는다.
 var span = document.getElementById("sheet_topCaption");
 // Bottom 을 가져오다.
 var bottom = document.getElementById("sheet_bottomCaption");
 
 // span 태그가 생성이 되어 있지 않을때
 if(span == null || span == undefined){
   // caption 타이틀 태그 생성
   var html = document.createElement("DIV");
   html.id = "sheet_topCaption";
   html.className = "ColHead";
   html.style.cssText = capStyle + ";position: absolute;";
   html.style.top = "0px";
   html.style.left = left;
   html.style.width = width;
   html.style.height = height + "px";
   html.innerHTML = data;
   
   //현재 시트의 상단 위치를 캡션의 높이 만큼 내린다.
   scrollDiv.style.top = (scrollTop + height) +"px";
   dataDiv.style.top = (dataTop + height) +"px";
   if(bottom != null || bottom != undefined){
	   bottom.style.top = ((bottom.style.top.match(/^-?\d+/)[0]*1) + height) +"px";
   }
   
   //sheet 에 자식 태그로 추가
   wSheet.appendChild(html);
   }
 
 // span 태그가 생성 되어 있을때
 else {
   var newH = height - (span.style.height.match(/^-?\d+/)[0] * 1);
   //현재 시트의 상단 위치를 캡션의 높이 만큼 내린다.
   scrollDiv.style.top = (scrollTop + newH) +"px";
   dataDiv.style.top = (dataTop + newH) +"px";
   if(bottom != null || bottom != undefined){
	   bottom.style.top = ((bottom.style.top.match(/^-?\d+/)[0]*1) + newH) +"px";
   }
	   
   span.style.cssText = capStyle + ";position: absolute;";
   span.style.top = "0px";
   span.style.left = left;
   span.style.width = width;
   span.style.height = height + "px";
   span.innerHTML = "";
   span.innerHTML = data;
 }
};

DataSheet.prototype.writeBottomCaption = function(height, data, capStyle){
  
 var scrollDiv = this.tagObject.getElementsByTagName("DIV")[0];
 var dataDiv = this.tagObject.getElementsByTagName("DIV")[2];
 var scrollTop = (scrollDiv.style.top.match(/^-?\d+/)[0]) * 1; //scroll 패널 top 
 var left = wSheet.style.left; // 좌측 위치
 var width = wSheet.style.width; // 가로길이
 var scrollHeight = (scrollDiv.style.height.match(/^-?\d+/)[0]) *1; // 세로길이
 var dataHeight = (dataDiv.style.height.match(/^-?\d+/)[0]) *1; // 세로길이
 
 // 만들어진 span 태그가 있는지 찾는다.
 var span = document.getElementById("sheet_bottomCaption");
 
 // span 태그가 생성이 되어 있지 않을때
 if(span == null || span == undefined){
   // caption 타이틀 태그 생성
   var html = document.createElement("DIV");
   html.id = "sheet_bottomCaption";
   html.className = "ColHead";
   html.style.cssText = capStyle + ";position: absolute;";
   html.style.top = (scrollTop + (scrollHeight - height))+"px";
   html.style.left = left;
   html.style.width = width;
   html.style.height = height + "px";
   html.innerHTML = data;
   
   //현재 시트의 상단 height를 캡션의 높이 만큼 줄인다..
   scrollDiv.style.height = (scrollHeight - height) +"px";
   dataDiv.style.height = (dataHeight - height) +"px";
   
   //sheet 에 자식 태그로 추가
   wSheet.appendChild(html);
   }
 
 // span 태그가 생성 되어 있을때
 else {
   var newH = height - (span.style.height.match(/^-?\d+/)[0] * 1);
   //현재 시트의 상단 위치를 캡션의 높이 만큼 줄인다.
   scrollDiv.style.height = (scrollHeight - newH) +"px";
   dataDiv.style.height = (dataHeight - newH) +"px";
   
   span.style.cssText = capStyle + ";position: absolute;";
   span.style.top = (scrollTop + (scrollHeight - newH))+"px";
   span.style.left = left;
   span.style.width = width;
   span.style.height = height + "px";
   span.innerHTML = "";
   span.innerHTML = data;
 }
};

DataSheet.prototype.setPosition = function(left, top, width, height){
   // functionname : [DataSheet.setPosition]

 if (top == null) top = this.tagObject.style.top;
 if (left == null) left = this.tagObject.style.left;
 if (width == undefined || width == null) width = this.tagObject.style.width;
 if (height == undefined || height == null) height = this.tagObject.style.height;
  // 스크롤 위치 조정
  this.tagObject.style.top = top;
  this.tagObject.style.left = left;
  this.tagObject.style.width = width;
  this.tagObject.style.height = height;
  this.scrollPanel.style.width = width;
  this.scrollPanel.style.height = height;
var middleFrame = this.tagObject.getElementsByTagName("DIV")[2];
  middleFrame.style.height = (parseIntSize(height) - 18) + "px";
  middleFrame.style.width = (parseIntSize(width) - 18) + "px";
 
  middleFrame = null;
  
  scrollAction(this.scrollPanel);
};

DataSheet.prototype.getChartData = function(graphseries, graphtitlenum, graphpointnum, graphdatastart){
    // functionname : [DataSheet.getChartData]

    var arrFromStrings = [",", ":", ";", "&", "%", "?"];
    var arrToStrings   = ["<COMMA>", "<COLON>", "<SEMICOLON>", "<AMP>", "<PERCENT>", "<QUESTION>"];
	
    var index = 0;
    
    var wSeriesTitle = []; index = 0;
    for (var wRow = graphdatastart; wRow <= this.maxRows; wRow++){
    	if (graphtitlenum > 0){	graphtitlenum = 1;	}
        wSeriesTitle[index++] = escapeCharacter(this.rows[wRow].cells[graphtitlenum].value ,arrFromStrings, arrToStrings);
    }

    var wPointTitle = []; index = 0;
    for (var i = 0; i < graphseries.length; i++){
    	var wCol = i + 1;
        if (graphseries.charAt(i) == "1"){
        	if (graphpointnum == 0){
            	wPointTitle[index++] =  escapeCharacter(this.getColumnTitle(wCol), arrFromStrings, arrToStrings);
        	} else {
            	wPointTitle[index++] =  escapeCharacter(this.rows[graphpointnum].cells[wCol].value, arrFromStrings, arrToStrings);
        	}
        }
    }
    
    var wChartValue = []; index = 0;
    for (var wRow = graphtitlenum; wRow <= this.maxRows; wRow++){
    	wChartValue[index]="";
      for (var i = 0; i < graphseries.length; i++){
      	var wCol = i + 1;
          if (graphseries.charAt(i) == "1"){
                  wChartValue[index] += ",";
                  wChartValue[index] +=  escapeCharacter(this.rows[wRow].cells[wCol].value ,arrFromStrings, arrToStrings);
          }
      }
        index++;
    }
    
    // ",1월,2월,3월,4월,5월,합계:김치밥,23,58,71,24,35,142"
    var wChartInfoStr = "";
    for (var i = 0; i < wPointTitle.length ; i++){
    	wChartInfoStr += "," + wPointTitle[i];
    }
    wChartInfoStr += ":";
    
    for (var i = 0; i < wChartValue.length ; i++){
    	wChartInfoStr += wSeriesTitle[i];
    	wChartInfoStr += wChartValue[i];
        wChartInfoStr += ":";
    }
    
    return wChartInfoStr;
};

DataSheet.prototype.getOddEvenStyle = function(hardRowNum){
    // functionname : [DataSheet.getOddEvenStyle]
	
	var className  = "NotSelectStyle";
	if (this.displayOddEven){
    	var rowNum = this.rowNumOf(hardRowNum, 1, CONV_HARD_SHEET);
		if ((rowNum / this.rowsPerDataRow)%2 > 0) {
			className = "OddRowStyle";
		} else {
			className = "EvenRowStyle";
		}
	}
	return className;
};

DataSheet.prototype.refreshOddEven = function(rowNum){
    // functionname : [DataSheet.refreshOddEven]

	if (!this.displayOddEven) return;
	
	if (rowNum == undefined){
		rowNum = 1;
	}
	
    var wHardRow  = this.rowNumOf(rowNum, 1, CONV_LOGICAL_HARD);
	for (var wRowNum = rowNum; wRowNum <= this.maxRows; wRowNum++){
        if (this.clickedTR != null && this.clickedTR.rowIndex == wHardRow) continue;
        if (this.moveoverTR != null && this.moveoverTR.rowIndex == wHardRow) continue;
        
        var calssName = (wRowNum % 2 == 1 ? "OddRowStyle" : "EvenRowStyle");
        for (var tmpHardRow = wHardRow; tmpHardRow < wHardRow + this.rowsPerDataRow; tmpHardRow++){
            this.setRowClass(tmpHardRow,  calssName);
        }
        
        wHardRow += this.rowsPerDataRow;
	}
	
	return;
};

DataSheet.prototype.refreshCellMerge = function(){
    // functionname : [DataSheet.refreshCellMerge]

	if (this.needMerge == 1) return;  // 1: 체크했는데 머지가 필요없는상태
	
	// 1. 머지 칼럼 목록을 파악한다
	var mergeCols = [];
	var mergeGus  = [];
	var i = 0;
	for (var colNum = 1; colNum < this.columns.length; colNum++){
		if (this.columns[colNum].cellMerge > 0){
			mergeCols[i] = colNum;
			mergeGus[i]  = this.columns[colNum].cellMerge;
			i++;
		}
	}
	
	this.needMerge = (mergeCols.length > 0 ? 2 : 1); // 1: 머지가 필요없다  2:머지가 필요하다
	
	// 2. 첫줄부터 끝줄까지 루핑을 돌면서
    for(var wRowNum = 2; wRowNum <= this.maxRows; wRowNum++){
	    var restrictMergeLeft = 0;
	    
  	// 2.1 머지셀모두가 위와 같은지 파악한다
      for (i = 0; i < mergeCols.length; i++){
      	var wColNum = mergeCols[i];
      	if ( (this.rows[wRowNum-1].cells[wColNum].value == this.rows[wRowNum].cells[wColNum].value)) {
      		restrictMergeLeft = wColNum;
      	} else {
      		break;
      	}
      }
	
  	// 2.2 Auto인경우 웻셀과 같으면 지운다
      for (i = 0; i < mergeCols.length; i++){
      	var wColNum = mergeCols[i];
      	var wDataCell = this.rows[wRowNum].cells[wColNum];
      	
      	if (mergeGus[i] == 1){ 
        	wDataCell.merged = false;
      	    if (this.rows[wRowNum-1].cells[wColNum].value == wDataCell.value){
      	    	wDataCell.merged = true;
      	        var wCell = this.cellOf(wRowNum, wColNum);
      	        navigator.userAgent.indexOf('Firefox') >= 0 ? wCell.innerHTML= " " : wCell.innerText = "　";
      	    }
      	}
      }
	
      // 2.3 Restrict인 경우 미리 파악한 결과를 가지고 같으면 지운다
      for (i = 0; i < mergeCols.length; i++){
      	var wColNum = mergeCols[i];
      	var wDataCell = this.rows[wRowNum].cells[wColNum];

      	if (mergeGus[i] == 2){ 
        	wDataCell.merged = false;
      	    if (wColNum <= restrictMergeLeft){
      	    	wDataCell.merged = true;
      	        var wCell = this.cellOf(wRowNum, wColNum);
      	        navigator.userAgent.indexOf('Firefox') >= 0 ? wCell.innerHTML= " " : wCell.innerText = "　";
      	    }
      	}
      }
      
    }
	
	// 3. 첫줄부터 끝줄까지 루핑을 돌면서 경계선 색조정
    for(var wRowNum = 1; wRowNum < this.maxRows; wRowNum++){
        for (i = 0; i < mergeCols.length; i++){
        	var wColNum = mergeCols[i];
      	var wDataCell = this.rows[wRowNum + 1].cells[wColNum];
      	var wCell = this.cellOf(wRowNum, wColNum);
      	var wColumn = this.columns[wColNum];
      	
      	if (wDataCell.merged){ 
      		wCell.style.borderBottomWidth = "1px";
      		wCell.style.borderBottomStyle = "solid";
      		wCell.style.borderBottomColor = wColumn.defaultCellColor==""?"#FFF":wColumn.defaultCellColor;
        	} else {
      		wCell.style.borderBottomWidth = "";
      		wCell.style.borderBottomStyle = "";
      		wCell.style.borderBottomColor = "";
        	}
        }
    }
    
	return;

};

DataSheet.prototype.refreshTreeCell = function(){
	// 1. 트리 동작이 있는 머지 칼럼 목록을 파악한다
	this.mergeCols = [];
	var i = 0;
	for (var colNum = 1; colNum < this.columns.length; colNum++){
		if (this.columns[colNum].cellMerge > 0 && this.columns[colNum].cellTree){
			this.mergeCols[i] = colNum;
			i++;
		}
	}
	
	var wColNum = this.mergeCols[0]*1;
	
	// 2. 기존 숨어있던 줄 보이기
	for(var i=1; i<this.maxRows; i++){
		this.showHiddenRow(i);
		for(var j=1; j<=this.mergeCols.length; j++){
			var showCell = this.cellOf(i, j);
			var showData = this.rows[i].cells[j].value;
			showCell.innerHTML = showData;
		}
	}
	
	
	// 3. 루핑을 돌면서 경계선 색조정 및 Merge, 이미지 삽입
    for(var wRowNum = 1; wRowNum < this.maxRows; wRowNum++){
	if(wRowNum >= this.maxRows) break;
	
	var firstYN = (wRowNum == 1);
    	var beforeRow = wRowNum-1;
    	if(firstYN) beforeRow = 1;
    	
  	var wDataCell = this.rows[wRowNum].cells[wColNum];
  	var beforeDataCell = this.rows[beforeRow].cells[wColNum];
  	var wCell = this.cellOf(wRowNum, wColNum);
  	
  	if(wDataCell.value != beforeDataCell.value || firstYN) {
  		// 선 조정
  		var nextDataCell = this.rows[wRowNum+1].cells[wColNum];
  		if(wDataCell.value != nextDataCell.value) continue;
  		
  		// 이미지 생성
      	var oChild = null;
          if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 9) {
                oChild = document.createElement("<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif'/>");
      	} else {
      		oChild = document.createElement("img");
      		oChild.src = CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif";
      	} 
      	
          setEventHandler(oChild, "mouseup", cell_onTreeClick);
            
          if (parent.insertAdjacentElement){
          	wCell.insertAdjacentElement('afterBegin', oChild);
   		} else if (parent.appendChild) {
   			    insertAdjacentElement('afterBegin' , wCell, oChild);
   		} else {
   			wCell.innerHTML = "<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif' onclick='javascript:cell_onTreeClick();'/>" + wCell.innerHTML;
   		}
          
          for(var i=1; i<=this.mergeCols.length; i++){
          	var hDataCell1 = this.rows[wRowNum].cells[i].value;
    		var hDataCell2 = this.rows[wRowNum+1].cells[i].value;
    		hideCell = this.cellOf(wRowNum, i);
    		hideCell.style.borderBottomColor = this.sheetBorderColor;
    		if(hDataCell1 == hDataCell2) {
    			hideCell = this.cellOf(wRowNum+1, i);
    			hideCell.innerHTML = " ";
    		}
          }
          
          if(wRowNum+1 == this.maxRows) this.hideRow(wRowNum+1);
          
          continue;
  	}
  	
  	for(var i=1; i<=this.mergeCols.length; i++){
  		var hDataCell1 = this.rows[wRowNum].cells[i].value;
  		var hDataCell2 = this.rows[wRowNum+1].cells[i].value;
  		if(hDataCell1 != hDataCell2) break;
  		
  		var hideCell = this.cellOf(wRowNum, i);
  		var wcellColor = this.columns[i].defaultCellColor==""?"#FFF":this.columns[i].defaultCellColor;
  		hideCell.style.borderBottomColor = wcellColor;
  		
  		if(hDataCell1 == hDataCell2) {
  			hideCell = this.cellOf(wRowNum+1, i);
  			hideCell.innerHTML = " ";
  			if(wRowNum+1 == this.maxRows) this.hideRow(wRowNum+1);
  		}
  		
  	}
  	
      // 줄 숨김
	this.hideRow(wRowNum);
    }
    
    this.resetScroll();
};

function cell_onTreeClick(e){
	var em = null;
	if(e != undefined && e != null && e.localName == "td"){
		em = e.childNodes[0];
	} else{
		if (!e) e = window.event;
		em = getSrcElement(e);
	}
	
    var wSheet = searchSheet(em);
    var wCell  = searchCell(em);
    var wRowNum = wSheet.rowNumOf(wCell.parentElement.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
    var wColNum = wSheet.colNumOf(wCell.parentElement.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
	
	if ((new RegExp("plus","i")).test(em.getAttribute("src"))){
		wSheet.treeCellOpen(wRowNum, wColNum);
	} else if ((new RegExp("minus","i")).test(em.getAttribute("src"))){
		wSheet.treeCellClose(wRowNum, wColNum);
	}
}

DataSheet.prototype.treeCellOpen = function(rowNum, colNum){
	var minus = true;
	var nextTreeYN = false;
	var spread = true;
	var wColNum = colNum+1;
	var lastShowRowNum = 0;
	var lineShowNum = rowNum;

var wCell = this.cellOf(rowNum, wColNum);
while(wColNum <= this.mergeCols.length) {
	if(wCell.style.display != "none") break;
	wColNum += 1;
	wCell = this.cellOf(rowNum, wColNum);
}

if(this.mergeCols[wColNum-1] == wColNum) nextTreeYN = true;

	// 3. 루핑을 해당 row를 펼치고 경계선 색조정
    for(var wRowNum = rowNum; wRowNum <= this.maxRows; wRowNum++){
    	var clickCellYN = (wRowNum == rowNum);
    	var beforeRow = wRowNum-1;
    	if(clickCellYN) beforeRow = 1;
    	
    	var wDataCell = this.rows[wRowNum].cells[wColNum];
    	var beforeDataCell = this.rows[beforeRow].cells[wColNum];
    	
    	var nextDataCell = this.rows[wRowNum].cells[wColNum].value;
    	var nextBeforeDataCell = this.rows[beforeRow].cells[wColNum].value;
    	
    	if(!clickCellYN && nextDataCell != nextBeforeDataCell && lastShowRowNum > 0){
    		for(var i=colNum; i<=this.mergeCols.length; i++){
				var showCell = this.cellOf(lastShowRowNum, i);
				showCell.style.borderBottomColor = this.sheetBorderColor;
			}
//        		break;
    	}
    	
    	var formerDataDuplicate = false;
    	for(var i=colNum; i>0; i--){
    		var formerCell1 = this.rows[wRowNum].cells[i].value;
    		var formerCell2 = this.rows[rowNum].cells[i].value;
    		if(formerCell1 != formerCell2) {
    			formerDataDuplicate = true;
    			break;
    		}
    	}
    	if(formerDataDuplicate) break;
    	
    	if(wDataCell.value == beforeDataCell.value && nextTreeYN && !clickCellYN) continue;
    	
    	wCell = this.cellOf(wRowNum, wColNum);
    	
    	// 줄 보이기
    	if(wRowNum != rowNum){
    		this.showHiddenRow(wRowNum);
    		lastShowRowNum = wRowNum;
    		
    		if(spread){
    			for(var i=colNum; i>0; i--){
    				var hideCell = this.cellOf(lineShowNum, i);
    				var wcellColor = this.columns[i].defaultCellColor==""?"#FFF":this.columns[i].defaultCellColor;
    				hideCell.style.borderBottomColor = wcellColor;
    			}
//        			spread = false;
    			lineShowNum = wRowNum;
    		}
    		
    		if(nextTreeYN){
    			for(var i=wColNum; i<=this.mergeCols.length; i++){
    				var showCell = this.cellOf(wRowNum, i);
    				var showData = this.rows[wRowNum].cells[i].value;
    				showCell.style.borderBottomColor = this.sheetBorderColor;
    				showCell.innerHTML = showData;
    			}
    		}
    	}
    	
    	
    	// - 이미지 생성
    	if(minus) {
  		var beforeCell = this.cellOf(wRowNum, colNum);
  		beforeCell.removeChild(beforeCell.firstChild);
  		var oChild = null;
  		if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 9) {
  			oChild = document.createElement("<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_minus.gif'/>");
  		} else {
  			oChild = document.createElement("img");
  			oChild.src = CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_minus.gif";
  		} 
  		
  		setEventHandler(oChild, "mouseup", cell_onTreeClick);
  		
  		if (parent.insertAdjacentElement){
  			beforeCell.insertAdjacentElement('afterBegin', oChild);
  		} else if (parent.appendChild) {
  			insertAdjacentElement('afterBegin' , beforeCell, oChild);
  		} else {
  			beforeCell.innerHTML = "<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_minus.gif' onclick='javascript:cell_onTreeClick();'/>" + beforeCell.innerHTML;
   		}
  		minus = false;
    	}
		
    	// 다음 컬럼이 tree 속성이 아니라면 continue;
    	if(!nextTreeYN) continue;
    	
    	// + 이미지 생성
  		var oChild = null;
  		if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 9) {
  			oChild = document.createElement("<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif'/>");
  		} else {
  			oChild = document.createElement("img");
  			oChild.src = CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif";
  		} 
  		
  		setEventHandler(oChild, "mouseup", cell_onTreeClick);
  		
  		if (parent.insertAdjacentElement){
  			wCell.insertAdjacentElement('afterBegin', oChild);
  		} else if (parent.appendChild) {
  			insertAdjacentElement('afterBegin' , wCell, oChild);
  		} else {
   			wCell.innerHTML = "<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif' onclick='javascript:cell_onTreeClick();'/>" + wCell.innerHTML;
   		}
    }
    
    this.resetScroll();
};

DataSheet.prototype.treeCellClose = function(rowNum, colNum){
	var nextTreeYN = false;
	if(this.mergeCols[colNum] != undefined) nextTreeYN = true;
	
	// 3. 루핑을 돌면서 경계선 색조정 및 row를 숨긴다
    for(var wRowNum = rowNum; wRowNum <= this.maxRows; wRowNum++){
//			if(wRowNum+1 > this.maxRows) break;
  	var wColNum = colNum;
  	var wDataCell = this.rows[wRowNum].cells[wColNum];
  	var nextDataCell = wRowNum==this.maxRows? null : this.rows[wRowNum+1].cells[wColNum];
  	var wCell = this.cellOf(wRowNum, wColNum);
  	
  	var formerDataDuplicate = false;
    	for(var i=colNum; i>0; i--){
    		
    		var formerCell1 = this.rows[wRowNum].cells[i].value;
    		
    		var formerCell2 = this.rows[rowNum].cells[i].value;
    		
    		if(formerCell1 != formerCell2) {
    			formerDataDuplicate = true;
    			break;
    		}
    	}
    	if(formerDataDuplicate) break;
    	
  	if(wRowNum == rowNum){
  		wCell.removeChild(wCell.firstChild);
  		// 이미지 생성
  		var oChild = null;
  		if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 9) {
  			oChild = document.createElement("<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif'/>");
  		} else {
  			oChild = document.createElement("img");
  			oChild.src = CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif";
  		} 
  		
  		setEventHandler(oChild, "mouseup", cell_onTreeClick);
  		
  		if (parent.insertAdjacentElement){
  			wCell.insertAdjacentElement('afterBegin', oChild);
  		} else if (parent.appendChild) {
  			insertAdjacentElement('afterBegin' , wCell, oChild);
  		} else {
   			wCell.innerHTML = "<IMG border='0' src='" + CONTEXT_ROOT + "/winnersoft/images/sheet/nolines_plus.gif' onclick='javascript:cell_onTreeClick();'/>" + wCell.innerHTML;
   		}
  		
  		for(var i=wColNum+1; i<=this.mergeCols.length; i++){
  			wCell = this.cellOf(wRowNum, i);
  			if(wCell.firstChild.nodeName == "IMG") wCell.removeChild(wCell.firstChild);
  		}
  		
  		for(var i=(nextTreeYN?colNum:1); i<=this.mergeCols.length; i++){
  			wCell = this.cellOf(wRowNum, i);
  			wCell.style.borderBottomColor = this.sheetBorderColor;
  		}
  		continue;
  	}
  	
  	for(var i=colNum+1; i<=this.mergeCols.length; i++){
			wCell = this.cellOf(wRowNum, i);
			if(wCell.firstChild.nodeName == "IMG") wCell.removeChild(wCell.firstChild);
		}
  	
      // 줄 숨김
	this.hideRow(wRowNum);
	
	if(nextDataCell == null) break;
	if(wDataCell.value != nextDataCell.value) break;
    }
    
    this.resetScroll();
};
 	
DataSheet.prototype.setColumnTitle = function(colNum, caption){
    // functionname : [DataSheet.setColumnTitle]
	
    // 사전 체크
   	if (colNum > this.maxCols){
   		//alert("최대 열의 범위를 초과하여 숨기기열을 선택할 수 없습니다.");
   		return;
   	}
   	
   	// 헤더수와 테이블 테그객체 설정
   	var wHeaderRows = parseInt(this.tagObject.getAttribute("headerrows"));
   	var wTables = this.tagObject.getElementsByTagName("table");
   	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }
   	
    for (var i = 0; i < wTablesLength; i++){
   		var wTable = wTables[i];
   		var wHardRows = wTable.tBodies[0].rows;
   		
   		// 헤더셀 처리
   		for (var rowNum=0; rowNum < wHeaderRows; rowNum++){
   		    var wRow = wHardRows[rowNum];
   			var wCellIndex = getcellIndex(this.headSpanInfo, rowNum, colNum);
   			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다
   			if (wCellIndex >= wHardRows[rowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
   			
   			var wCell = wRow.cells[wCellIndex];
   		    wCell.innerHTML = caption;
   		}
   	}
	
	return;
};

DataSheet.prototype.getColumnTitle = function(colNum){
    // functionname : [DataSheet.setColumnTitle]
	
    // 사전 체크
   	if (colNum > this.maxCols){
   		//alert("최대 열의 범위를 초과하여 숨기기열을 선택할 수 없습니다.");
   		return;
   	}
   	
   	// 헤더수와 테이블 테그객체 설정
   	var caption = "";
   	var wHeaderRows = parseInt(this.tagObject.getAttribute("headerrows"));
   	
	var wTable = this.dataTable;
	var wHardRows = wTable.tBodies[0].rows;
	
	// 헤더셀 처리
	for (var rowNum=0; rowNum < wHeaderRows; rowNum++){
	    var wRow = wHardRows[rowNum];
		var wCellIndex = getcellIndex(this.headSpanInfo, rowNum, colNum);
		if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다
		if (wCellIndex >= wHardRows[rowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
		
		var wCell = wRow.cells[wCellIndex];
		caption = wCell.innerHTML;
	}
	
	return caption;
};

DataSheet.prototype.hideColumn = function(colNum){
    // functionname : [DataSheet.hideColumn]
	
    // 사전 체크
	if (colNum > this.maxCols){
		alert(getText("message_datasheet_013", "최대 열의 범위를 초과하여 숨기기열을 선택할 수 없습니다."));
		return;
	}

if (this.rowsPerDataRow > 1){
	alert(getText("message_datasheet_014", "단일 헤더인 경우만 열숨기기가 가능합니다."));
	return;
}
	var wColumn = this.columns[colNum];
	if (wColumn.hidden) {
		alert(getText("message_datasheet_015", "이미 열 숨기기 처리된 열 번호 입니다."));
		return;
	}
	
	// 시트별 (칼럼헤더 숨기기 + 데이터 칼럼 숨기기)
	// 표의 사이즈 정보를 바꾸어 준다
	var wArrSizes = this.tagObject.getAttribute("cellsize").split(";"); 
	var changeSize = parseInt(1 * wArrSizes[colNum]);
	wArrSizes[colNum] = "0";
	this.tagObject.setAttribute("cellsize", wArrSizes.join(";"));
	
	// 헤더수와 테이블 테그객체 설정
	var wHeaderRows = this.headRows; //parseInt(this.tagObject.getAttribute("headerrows"));
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	wTablesLength += 1;
    }
	
    for (var i = 0; i < wTablesLength; i++){
		var wTable = wTables[i];
		var wHardRows = wTable.tBodies[0].rows;
		var rightCol = 0;
	if (/right/i.test(wTable.getAttribute("name"))) {
		rightCol = this.frozenColsRight[0];
		if(colNum < rightCol) continue;
	}
	
		// 헤더셀 처리
		for (var rowNum=0; rowNum < wHeaderRows; rowNum++){
		    var wRow = wHardRows[rowNum];
			var wCellIndex = getcellIndex(this.headSpanInfo, rowNum, colNum - rightCol);
			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다
			if (wCellIndex >= wHardRows[rowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
			
			var wCell = wRow.cells[wCellIndex];
			
			if(wCell.colSpan > 1) {
				wCell.colSpan -= 1;
			}
			else {
				wCell.style.display = "none";
			}
		}
		
	    // 데이터셀 처리
    	for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
            var wHardRow  = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_HARD);
            var wHardCol  = this.colNumOf(rowNum, colNum, CONV_LOGICAL_HARD) - rightCol;
            
            if (wHardRow >= wHardRows.length) continue;                  // 칼럼이나 픽스 테이블은 줄이 적다
            if (wHardCol >= wHardRows[wHardRow].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
            
            var wRow = wHardRows[wHardRow];
            var wCell = wRow.cells[wHardCol];
            
			if(wCell.colSpan > 1) {
				wCell.colSpan -= 1;
			}
			else {
				wCell.style.display = "none";
			}
    	}
	    
    	var wCellIndex = getcellIndex(this.headSpanInfo, 0, colNum - rightCol);
    	if (wCellIndex < wHardRows[0].cells.length) {
    		wTable.style.width = (parseIntSize(wTable.style.width) - changeSize) + "px";
    	}
	}
	
	// 칼럼정보 - 숨기기
	wColumn.hidden = true;
	wColumn.hiddenWidth = changeSize;
	
	// 셀정보 - 숨기기
    for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
	    var wCell = this.rows[rowNum].cells[colNum];
	    wCell.hidden = true;
    }
    
};

DataSheet.prototype.showHiddenColumn = function(colNum){
    // functionname : [DataSheet.showHideColumn]
	
    // 사전 체크
	if (colNum > this.maxCols){
		alert(getText("message_datasheet_016", "최대 열의 범위를 초과하여 보이기열을 선택할 수 없습니다."));
		return;
	}

if (this.rowsPerDataRow > 1){
	alert(getText("message_datasheet_017", "단일 헤더인 경우만 열숨기기/보이기가 가능합니다."));
	return;
}
	var wColumn = this.columns[colNum];
	if (!wColumn.hidden) {
		alert(getText("message_datasheet_018", "이미 열 보이기 처리된 열 번호 입니다."));
		return;
	}
	
	// 네개 시트별 (칼럼헤더 숨기기 + 데이터 칼럼 숨기기)
	// 표의 사이즈 정보를 바꾸어 준다
	var wArrSizes = this.tagObject.getAttribute("cellsize").split(";"); 
	var changeSize = (wColumn.hiddenWidth > 0 ? wColumn.hiddenWidth : 30);
	wArrSizes[colNum] = "" + changeSize;
	this.tagObject.setAttribute("cellsize", wArrSizes.join(";"));
	
	// 헤더수와 테이블 테그객체 설정
	var wHeaderRows = this.headRows; //parseInt(this.tagObject.getAttribute("headerrows"));
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	wTablesLength += 1;
    }
	
    for (var i = 0; i < wTablesLength; i++){
		var wTable = wTables[i];
		var wHardRows = wTable.tBodies[0].rows;
		var rightCol = 0;
	if (/right/i.test(wTable.getAttribute("name"))) {
		rightCol = this.frozenColsRight[0];
		if(colNum < rightCol) continue;
	}
	
		// 헤더셀 처리
		for (var rowNum=0; rowNum < wHeaderRows; rowNum++){
		    var wRow = wHardRows[rowNum];
			var wCellIndex = getcellIndex(this.headSpanInfo, rowNum, colNum - rightCol);
			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다
			if (wCellIndex >= wHardRows[rowNum].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
			
			var wCell = wRow.cells[wCellIndex];
			
			if(this.headSpanInfo[rowNum][colNum].colSpan > 1) {
				wCell.colSpan += 1;
			}
			else {
				wCell.style.display = "";
			}
		}
		
	    // 데이터셀 처리
    	for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
            var wHardRow  = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_HARD);
            var wHardCol  = this.colNumOf(rowNum, colNum, CONV_LOGICAL_HARD) - rightCol;
            
            if (wHardRow >= wHardRows.length) continue;                  // 칼럼이나 픽스 테이블은 줄이 적다
            if (wHardCol >= wHardRows[wHardRow].cells.length) continue;  // 로우나 픽스 테이블은 열이 적다
            
            var wRow = wHardRows[wHardRow];
            var wCell = wRow.cells[wHardCol];
            
			if(this.headSpanInfo[wHeaderRows][colNum].colSpan > 1) {
				wCell.colSpan += 1;
			}
			else {
				wCell.style.display = "";
			}
    	}
	    
    	var wCellIndex = getcellIndex(this.headSpanInfo, 0, colNum - rightCol);
    	if (wCellIndex < wHardRows[0].cells.length) {
    		wTable.style.width = (parseIntSize(wTable.style.width) - changeSize) + "px";
    	}
	}
	
	// 칼럼정보 - 숨기기
	wColumn.hidden = false;
	wColumn.hiddenWidth = 0;
	
	// 셀정보 - 숨기기
    for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
	    var wCell = this.rows[rowNum].cells[colNum];
	    wCell.hidden = false;
    }
};

DataSheet.prototype.hideRow = function(rowNum){
    // functionname : [DataSheet.hideRow]
	
    // 사전 체크
	if (rowNum > this.maxRows){
		alert(getText("message_datasheet_019", "최대 줄의 범위를 초과하여 숨기기 줄을 선택할 수 없습니다."));
		return;
	}
  
	var wRow = this.rows[rowNum];
	if (wRow.hidden) {
		if(!this.hasTreeCell) alert(getText("message_datasheet_020", "이미 줄 숨기기 처리된 줄 번호 입니다."));
		return;
	}
	
	// 네개 시트별 
    var wHardRowNum  = this.rowNumOf(rowNum, 1, CONV_LOGICAL_HARD);
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }
	
    for (var i = 0; i < wTablesLength; i++){
  		var wTable = wTables[i];
  		var wHardRows = wTable.tBodies[0].rows;
  		
		  if (wHardRowNum >= wHardRows.length) continue; 
		  
          // 줄수대로 숨김
		  for (var j = 0; j < this.rowsPerDataRow; j++){ 
		      wHardRows[wHardRowNum + j].style.display = "none";
		  }
    }
	
	// 줄정보 - 숨기기 갱신
	wRow.hidden = true; 
	
};
DataSheet.prototype.showHiddenRow = function(rowNum){
    // functionname : [DataSheet.showHiddenRow]
	
    // 사전 체크
	if (rowNum > this.maxRows){
		alert(getText("message_datasheet_019", "최대 줄의 범위를 초과하여 숨기기 줄을 선택할 수 없습니다."));
		return;
	}
  
	var wRow = this.rows[rowNum];
	if (!wRow.hidden) {
		if(!this.hasTreeCell) alert(getText("message_datasheet_021", "이미 줄 보이기 처리된 줄번호 입니다."));
		return;
	}
	
	// 네개 시트별
    var wHardRowNum  = this.rowNumOf(rowNum, 1, CONV_LOGICAL_HARD);
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }
	
    for (var i = 0; i < wTablesLength; i++){
  		var wTable = wTables[i];
  		var wHardRows = wTable.tBodies[0].rows;
  		
		  if (wHardRowNum >= wHardRows.length) continue; 
		  
      // 줄수대로 숨김해제
		  for (var j = 0; j < this.rowsPerDataRow;j++){ 
		      wHardRows[wHardRowNum + j].style.display = "";
		  }
    }
	
	// 줄정보 - 숨기기 갱신
	wRow.hidden = false;
};    


// 안씀
/*DataSheet.prototype.resizeColumn = function(colNum, newSize){
    // functionname : [DataSheet.showHideColumn]
	
    // 사전 체크
	if (colNum > this.maxCols){
		alert("최대 열의 범위를 초과하여 보이기열을 선택할 수 없습니다.");
		return;
	}

if (this.rowsPerDataRow > 1){
	alert("단일 헤더인 경우만 칼럼사이즈 변경이 가능합니다.");
	return;
}
	var wColumn = this.columns[colNum];
	if (wColumn.hidden) {
		alert("이미 열숨기기 처리된 열 번호 입니다.");
		return;
	}
	
	// 네개 시트별 (칼럼헤더 숨기기 + 데이터 칼럼 숨기기)
	// 표의 사이즈 정보를 바꾸어 준다
	var wArrSizes = this.tagObject.getAttribute("cellsize").split(";"); 
	var originalSize = parseInt(1 * wArrSizes[colNum]);
	wArrSizes[colNum] = "" + newSize;
	this.tagObject.setAttribute("cellsize", wArrSizes.join(";"));
	
	// 헤더수와 테이블 테그객체 설정
	var wHeaderRows = parseInt(this.tagObject.getAttribute("headerrows"));
	var wTables = this.tagObject.getElementsByTagName("table");
	var wTablesLength = 0;
    for(var i=0; i < wTables.length; i++){
    	if(/bottom/.test(wTables[i].getAttribute("name"))) break;
    	wTablesLength += 1;
    }
	
    for (var i = 0; i < wTablesLength; i++){
		var wTable = wTables[i];
		var wHardRows = wTable.tBodies[0].rows;
		
		// 헤더셀 처리
		for (var rowNum=0; rowNum < wHeaderRows; rowNum++){
		    var wRow = wHardRows[rowNum];
			var wCellIndex = getcellIndex(this.headSpanInfo, rowNum, colNum);
			if (wCellIndex == -1) continue;  // 이줄에는 해당되는 셀이 없다
			if (wCellIndex >= wHardRows[rowNum].cells.length) continue;  // 로우나
																		// 픽스
																		// 테이블은
																		// 열이
																		// 적다
			
			var wCell = wRow.cells[wCellIndex];
		    wCell.style.display = "";
		    wCell.style.width = newSize + "px";
		}
		
	    // 데이터셀 처리
    	for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
            var wHardRow  = this.rowNumOf(rowNum, colNum, CONV_LOGICAL_HARD);
            var wHardCol  = this.colNumOf(rowNum, colNum, CONV_LOGICAL_HARD);
            
			if (wHardRow >= wHardRows.length) continue;                  // 칼럼이나
																		// 픽스
																		// 테이블은
																		// 줄이
																		// 적다
			if (wHardCol >= wHardRows[wHardRow].cells.length) continue;  // 로우나
																		// 픽스
																		// 테이블은
																		// 열이
																		// 적다

            var wRow = wHardRows[wHardRow];
            var wCell = wRow.cells[wHardCol];
		    wCell.style.display = "";
		    wCell.style.width = newSize;
    	}
	    
    	var wCellIndex = getcellIndex(this.headSpanInfo, 0, colNum);
    	if (wCellIndex < wHardRows[0].cells.length) {
    		wTable.style.width = (parseIntSize(wTable.style.width) + newSize - originalSize) + "px";
    	}
	}
};*/

function compareRowByDate(a,b) {
    
    var dt1 = a.cells[SORT_COLUMN_INDEX].value;
    var dt2 = b.cells[SORT_COLUMN_INDEX].value;
    
	// 50 미만의 두자리수는 20XX년이고 50이상은 19XX년으로 처리한다
    if (dt1.length == 6)
        dt1 = (parseInt(dt1.substr(0,2)) < 50 ?'20' : '19') + dt1; 
    if (dt2.length == 6)
        dt2 = (parseInt(dt2.substr(0,2)) < 50 ? '20' : '19') + dt2; 
    
    if (dt1 == dt2) return 0;
    if (dt1 < dt2) return -1;
    return 1;
};

function compareRowByNumeric(a,b) { 
    var dt1 = parseFloat(1 * a.cells[SORT_COLUMN_INDEX].value);
    var dt2 = parseFloat(1 * b.cells[SORT_COLUMN_INDEX].value); 

    if (isNaN(dt1)) dt1 = 0;
    if (isNaN(dt2)) dt2 = 0;

    return dt1 - dt2;
};

function compareRowByString(a,b) {
    dt1 = (a.cells[SORT_COLUMN_INDEX].value || "").toLowerCase();
    dt2 = (b.cells[SORT_COLUMN_INDEX].value || "").toLowerCase();
    
    if (dt1 == dt2) return 0;
    if (dt1 < dt2) return -1;

    return 1;
};

/***************************************************************************
* 여기서 부터는 시트가 사용하는 객체들이다
**************************************************************************/
function FormulaRef(rowNum, colNum, rowNum2, colNum2, RC, formula){
    this.row = rowNum;   this.col = colNum; 
    this.row2 = rowNum2; this.col2 = colNum2; 
    this.RC = RC;  // 반드시 상대좌표가 아닌 절대 좌표로 단일 셀를 지칭하여야 한다
    this.formula = formula;
};

function EXOHColumn(sheetRow, sheetCol, sheetRowSpan, sheetColSpan){
    this.sheetRow = sheetRow;  // 1부터 시작된다
    this.sheetCol = sheetCol;  // 1부터 시작된다
    this.sheetRowSpan = sheetRowSpan;
    this.sheetColSpan = sheetColSpan;
    
    this.caption = "";
};

function EXOColumn(sheetRow, sheetCol, sheetRowSpan, sheetColSpan){
    this.sheetRow = sheetRow;
    this.sheetCol = sheetCol;
    this.sheetRowSpan = sheetRowSpan;
    this.sheetColSpan = sheetColSpan;
    this.hidden       = false;     // 디자인 타임시 지정
    this.hiddenWidth  = 0;
    
    this.caption = "";
    
    this.defaultCellType = CELLTYPE_EDIT; 
    this.defaultHAlign = 0; 
    this.defaultVAlign = 0; 
    this.defaultCheckCenter = false; 
    this.defaultMaxLength = 100000; // 디자인 타임시 지정
    this.defaultNumMax = 9999999999; 
    this.defaultNumMin = -9999999999; 
    this.defaultDecimalPlaces = 0; 
    this.defaultDisplayFormat = ""; 
    this.defaultFormula = ""; 
    this.defaultValue = ""; 
    this.defaultLockMode = false;
    this.linkComboName = "";
    this.ComboTextLinked = false;
    this.ComboDataLinked = false;
    this.defaultImageAlt = ""; //이미지 alt 속성 (String)
    this.defaultNegativeRed = 0; //1 일때 음수 font 색상 red (기본 0)
    this.defaultPercentSet = 0; // 퍼센트타입 셀 소수점 설정(0: 설정없음, 1: 올림, 2:내림, 3:반올림) 기본값 0
    this.defaultPercentDecimalNum = 0; // 퍼센트타입 셀 소수점 자릿수 (기본값 : 0)
    this.defaultCellMaskTypeValue = ""; // mask타입 셀 형식 문자열 ex(____-__-__) 기본값 : ""
    this.defaultCellTime1224 = "26"; // 시간 타입 셀 표시 형식 첫자리(1 : 12시 , 2: 24시), 두번째자리(2 : 시, 4: 분, 6: 초) 23 : 24시간 표시, 초단위까지 표시 기본값 : 26
    this.defaultTypedateformat = "yyyy-mm-dd"; // 날자 타입 셀 표시 형식
    this.defaultCellColor = "";  // 셀의 배경색
    this.defaultCellFontColor = ""; // 셀의 글자색
    this.defaultCellTooltip = false; // TRUE 일때 마우스 오버시 툴팁표시 (기본값 false)
    this.defaultCheckFormat = 0; // Date 타입 셀 년월일 체크 옵션
    
    // 체크셀인 경우
    this.ValueWhenChecked = "1";
    this.ValueWhenUnchecked = "0";
    
    this.defaultCheckCenter   = false; 
    this.fillLists = []; 
    this.comboLists = [null]; // EXOListItem이 들어간다, 0번인덱스는 사용하지 않는다
    this.sortDirection = ""; // 헤더클릭시 소트방향 정보
    this.cellMerge = 0;      // 셀머지 1 : auto, 2 :restrict
    this.cellTree = false;   // 머지셀의 트리동작
   
    this.sortGu = "";
    
    this.defaultButtonImage1 = new Image(); this.defaultButtonImage1.src = CONTEXT_ROOT + "/winnersoft/images/sheet/sheetbtn.jpg"; 
    this.defaultButtonImage2 = new Image(); this.defaultButtonImage2.src = CONTEXT_ROOT + "/winnersoft/images/sheet/sheetbtnR.jpg"; 
};

EXOColumn.prototype.setComboListByText = function(comboboxListStr){
    // functionname : [EXOColumn.setComboListByText]
                       
	var arrComboDatas = comboboxListStr.split(" ");
	var seq = 0;
	for (var i = 0; i < arrComboDatas.length; i++){
		if (arrComboDatas[i].trim().length > 0)
		    this.comboLists[++seq] = new EXOListItem(arrComboDatas[i], arrComboDatas[i]);
	}
	return;
};

EXOColumn.prototype.getComboText = function(value){
    // functionname : [EXOColumn.getComboText]
                       
    if (this.linkComboName == undefined) return "";
	if (controls[this.linkComboName] == undefined) return "";

    if (this.comboLists.length <= 1 && this.linkComboName.length != 0){
    	var wComboControl = controls[this.linkComboName].tagObject;
       	for (var i = 0 ;  i < wComboControl.options.length; i++){
      		var wComboInfo = this.comboLists[i + 1] = new EXOListItem();
      		wComboInfo.text = wComboControl.options[i].text;
      		wComboInfo.value = wComboControl.options[i].value;
      	}
    }

	var wReturn = "";
	for (var i = 1; i < this.comboLists.length; i++){
		if (this.comboLists[i].value == value){
			wReturn = this.comboLists[i].text;
			break;
		}
	}
	return wReturn;
};

EXOColumn.prototype.getComboValue = function(text){
    // functionname : [EXOColumn.getComboValue]
                       
    if (this.linkComboName == undefined) return "";
	if (controls[this.linkComboName] == undefined) return "";

    if (this.comboLists.length <= 1 && this.linkComboName.length != 0){
    	var wComboControl = controls[this.linkComboName].tagObject;
       	for (var i = 0 ;  i < wComboControl.options.length; i++){
      		var wComboInfo = this.comboLists[i + 1] = new EXOListItem();
      		wComboInfo.text = wComboControl.options[i].text;
      		wComboInfo.value = wComboControl.options[i].value;
      	}
    }

	var wReturn = "";
	for (var i = 1; i < this.comboLists.length; i++){
		if (this.comboLists[i].text == text){
			wReturn = this.comboLists[i].value;
			break;
		}
	}
	return wReturn;
};

EXOColumn.prototype.haveZeroComboValue = function(){
    // functionname : [EXOColumn.haveZeroComboValue]

	var wReturn = false;
	
    if (this.comboLists.length <= 1 && this.linkComboName.length != 0){
    	var wComboControl = controls[this.linkComboName].tagObject;
       	for (var i = 0 ;  i < wComboControl.options.length; i++){
       		if (wComboControl.options[i].value == "0"){
       			wReturn = true; break;
       		}
      	}
    }
	return wReturn;
};

function EXOCell(){
    this.celltype = CELLTYPE_EDIT; 
    this.align = 0; 
    this.valign = 0; 
    this.checkcenter = false; 
    this.maxlength = 100000; // 디자인 타임시 지정
    this.hidden = false;     // 디자인 타임시 지정
    this.nummax = 9999999999; 
    this.nummin = -9999999999; 
    this.decimalplaces = 0; 
    this.format = ""; 
    this.formula = ""; 
    this.value = ""; 
    this.value1 = "";  // 콤보 스타일에서 겉값
    this.tag = ""; 
    this.lockMode = false;
    this.buttonImage1 = new Image(); this.buttonImage1.src = CONTEXT_ROOT + "/winnersoft/images/sheet/sheetbtn.jpg"; 
    this.buttonImage2 = new Image(); this.buttonImage2.src = CONTEXT_ROOT + "/winnersoft/images/sheet/sheetbtnR.jpg"; 
    this.merged = false;
    this.imageAlt = ""; //이미지 alt 속성 (String)
    this.negativeRed = 0; //1 일때 음수 font 색상 red (기본 0)
    this.percentSet = 0; // 퍼센트타입 셀 소수점 설정(0: 설정없음, 1: 올림, 2:내림, 3:반올림) 기본값 0
    this.percentDecimalNum = 0; // 퍼센트타입 셀 소수점 자릿수 (기본값 : 0)
    this.cellMaskTypeValue = ""; // mask타입 셀 형식 문자열 ex(____-__-__) 기본값 : ""
    this.cellTime1224 = "26"; // 시간 타입 셀 표시 형식 첫자리(1 : 12시 , 2: 24시), 두번째자리(2 : 시, 4: 분, 6: 초) 23 : 24시간 표시, 초단위까지 표시 기본값 : 26
    this.cellColor = ""; // 셀의 배경색
    this.cellFontColor = ""; // 셀의 글자색
    this.cellTooltip = false; // TRUE 일때 마우스 오버시 툴팁표시 (기본값 false)
    this.checkFormat = 0; // Date 타입 셀 년월일 체크 옵션

};

function EXORow(){
	this.objectSeq = 1;
    this.hardRowCount = 1; 
    this.hardRowNum = 0;
    this.hardRowNum2 = 0;
    this.cells = [null];  // 데이터가 1번 배열부터 들어간다는 의미
    this.oldNum = 0;      // Sort시 사용된다
    this.hidden = false;  // 줄숨기기시 사용된다
    
};

function EXOListItem(text, value){
    this.text  = text; 
    this.value = value; 
};

function sheet_DoubleClick(e)
{
    e = window.event || e;
	var em = getSrcElement(e);
	var wSheet = searchSheet(em);
	
	var tr = searchRow(em);
	if (tr == null) return;
	
	em = searchCell(em);
	
    var wHardColNum =  getCellIndex(em);
    var wHardRowNum =  em.parentNode.rowIndex;
	var wRowNum = wSheet.rowNumOf(wHardRowNum, wHardColNum, CONV_HARD_LOGICAL);
	var wColNum = wSheet.colNumOf(wHardRowNum, wHardColNum, CONV_HARD_LOGICAL);
	
    // 사용자 코딩 추가영역을 호출한다
    if (wSheet.hasDblClickEvent) {
        var wResult = wSheet.fncDblClickEvent(wRowNum, wColNum);
        if (typeof(wResult)=="boolean" && !wResult) {
            stopEvent(e);
            return false;
        }            
    } 

    stopEvent(e);
    return;
};

function sheet_onrightClick(e){
	//if (!e) e = window.event;
	//var em = getSrcElement(e);
	
	//em = null;
	return true;
}

function sheet_onwheelClick(e){
	//if (!e) e = window.event;
	//var em = getSrcElement(e);
	
	//em = null;
	return true;
}

function sheet_onColHeaderClick(e){
	//if (!e) e = window.event;
	//var em = getSrcElement(e);
	
	//em = null
	return true;
}

function sheet_onRowHeaderClick(e){
	//if (!e) e = window.event;
	//var em = getSrcElement(e);
	
	//em = null
	return true;
}

function sheet_onMoveToFocus(e){
	//if (!e) e = window.event;
	//var em = getSrcElement(e);
	
	//em = null
	return true;
}

function sheet_DisplayWheel(e) {
	e = window.event || e;
	var em = getSrcElement(e);
	var delta = 0;
	
	// Opera는 detail, 기타 브라우저는 wheelDelta
	if (event.wheelDelta) {
		delta = event.wheelDelta / 120; 
	} else if (event.detail) {
		delta = -event.detail;
	}
	if (delta){
        var wSheet = searchSheet(em);
        var scrollPanel = wSheet.tagObject.getElementsByTagName("DIV")[0];
        scrollPanel.scrollTop = scrollPanel.scrollTop - delta * 15;
		
	}
	
	stopEvent(e);

	return;
};

function getCellIndex(em) {
  var parentRow = em.parentNode;
  if (parentRow.parentNode == null) return false;
  	
  var parentRowTable = parentRow.parentNode.parentNode.getAttribute("name");
  
  var wSheet = searchSheet(em);
  
  var dataRow = ((parentRow.rowIndex - wSheet.addHeaderRows) % wSheet.rowsPerDataRow) + wSheet.addHeaderRows + 1;
  for (var i = 0; i != parentRow.cells.length; i++) {
      if (parentRow.cells[i] == em){
      	if(/right/i.test(parentRowTable)) i += wSheet.frozenColsRight[dataRow];
      	return i;
      }
  }
  return false;
};

// 클립보드를 처리하기 위한 부분
var sheetNameToPaste = "";

function sheet_interceptKeys(e) {
	
    e = e||window.event;                      // IE에 적용
	var em = getSrcElement(e);
    var KeyCode = (e.which) ? e.which : e.keyCode ;
    var ctrlDown = e.ctrlKey || e.metaKey; // Mac지원
    
    var wSheet = searchSheet(em);
    var wCell  = searchCell(em);

    // Check for Alt+Gr (http://en.wikipedia.org/wiki/AltGr_key)
    if (ctrlDown && e.altKey) {
    	return true;
    }
    // input 박스 일때 리턴
    if (em.localName == "input") return true;

    // Check for ctrl+shift+c, v and x
    else if (ctrlDown && e.shiftKey && KeyCode==67) {  // c
    	stopEvent(e);
    	if (BrowserDetect.browser != "Explorer"){
    		alert(getText("message_datasheet_022", "현재 시트복사는 인터넷 익스플로러만 지원되는 기능입니다."));
    		return false; 
        }
        var jsonArrayObject = searchSheet(em).getArrayData();
        arrayToClipBoard(jsonArrayObject);
        
    	return false; 
    }
    else if (ctrlDown && e.shiftKey && KeyCode==86) {  // v
    	stopEvent(e);
    	if (BrowserDetect.browser != "Explorer"){
    		alert(getText("message_datasheet_023", "현재 붙여넣기는 인터넷 익스플로러만 지원되는 기능입니다."));
    		return false; 
        }
    	if (!confirm(getText("message_datasheet_024", "클립보드의 데이터를 시트에 붙이시겠습니까?"))){
        	return false; 
    	}
    	sheetNameToPaste = searchSheet(em).controlName; 
    	var jsonArrayObject = clipBoardToArray();
    	searchSheet(em).setArrayData(jsonArrayObject, "");
    	
    	return false; 
    }
    else if (ctrlDown && KeyCode == 88) {  // x
    	return false;
    }
    else if (wSheet.tabKeyAction == SHEET_TAB_TONEXTCELL && KeyCode == 9) {  // {TAB}
    	
    	wSheet._mouseMove = false;
    	
  	wSheet = searchSheet(em);
  	wCell  = searchCell(em);
  	
  	if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
    	call_sheet_onmouseup(wCell);
    	return false;
    	
  	} 
  		stopEvent(e);
  		if(e.shiftKey){
  			wSheet.moveToFormerCell(wCell);
  		} else {
  			wSheet.moveToNextCell(wCell);
  		}
            
  	return true;

  }
    else if (KeyCode == 13) {  // {ENTER}
    	
    	wSheet._mouseMove = false;
    	
  	if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
    	call_sheet_onmouseup(wCell);
    	return false;
    	
  	} 
  	
  	if(e.shiftKey){
			wSheet.moveToFormerDownNextCell(wCell);
		} else {
			wSheet.moveToDownNextCell(wCell);
		}
            
  	return true;

  }
    else if (KeyCode == 32) {  // {space}

  	if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
    	call_sheet_onmouseup(wCell);
    	return false;
    	
  	} else if (wSheet.sheetType == SHEETTYPE_DATASHEET){
        	wRowNum = wSheet.rowNumOf(wCell.parentNode.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
        	wColNum = wSheet.colNumOf(wCell.parentNode.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
        	
          var wColumns = wSheet.columns[wColNum];
          var wDataCell = wSheet.rows[wRowNum].cells[wColNum];
          var wCellType = wDataCell.celltype;
          
          if (wColumns.cellTree){
          	cell_onTreeClick(em);
          } else
          if (wCellType == CELLTYPE_PICTURE){
            cell_onImageClick(wCell, wRowNum, wColNum);
          } else 
          if (wCellType == CELLTYPE_CHECKBOX){
          	var value = parseInt(1 * wDataCell.value);
            cell_onClick(wCell, value);
          } else 
          if (wCellType == CELLTYPE_BUTTON){
            cell_onCommandClick(wCell, wRowNum, wColNum);
            call_sheet_onmousemove(wCell);
          } else {
          	wSheet.click(wCell);
          } 
    	return false;
  	}
  	
  	return true;

  }
    else if (!ctrlDown && KeyCode >= 37 && KeyCode <= 40) {  // *** 방향키 ***
    	
    	var wSheet = searchSheet(em);
    	
    	wSheet._mouseMove = false;
    
        var wRowNum = 0;
        var wColNum = 0;
        
        if (em.tagName == "TD"){
        	wRowNum = wSheet.rowNumOf(wCell.parentElement.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
        	wColNum = wSheet.colNumOf(wCell.parentElement.rowIndex, getCellIndex(wCell), CONV_HARD_LOGICAL);
        	
        } else if (em.tagName == "DIV"){ // 입력 텍스트가 숨으면 DIV가 포커스를 받게 된다
      	wSheet.focus(); 
      	wRowNum = wSheet.currentRow;
      	wColNum = wSheet.currentCol;
      	
      } else {
      	
        	return true;
        }
        
        // 탭인덱스 회수
	    if (wSheet.sheetType == SHEETTYPE_DATASHEET){
            	if ((KeyCode==37 && wColNum > 1) || 
            		    (KeyCode==38 && wRowNum > 1) || 
            		    (KeyCode==39 && wColNum < wSheet.maxCols) || 
            		    (KeyCode==40 && wRowNum < wSheet.maxRows)){
                    
            		wCell = wSheet.cellOf(wSheet.currentRow, wSheet.currentCol);
                    call_sheet_onmouseout(wCell);
                    
                    if (BrowserDetect.browser != "Explorer"){
                	    wCell.removeAttribute("tabindex");
                    }
            }
	    } else if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
            if (wSheet.currentRow > 0 ){
            	if ((KeyCode==38 && wRowNum > 1) || 
            		    (KeyCode==40 && wRowNum < wSheet.maxRows)){

//    	    			if (wSheet.moveoverTR != null) {
//    	    			    wSheet.setRowClass(wSheet.moveoverTR.rowIndex, wSheet.lastTRClass);
//    	    			}
                    
                    if (BrowserDetect.browser != "Explorer"){
                	    wCell.removeAttribute("tabindex");
                    }
            	}
            }
	    }
	    wCell = wSheet.cellOf(wRowNum, wColNum);
    	if (KeyCode==37){ // 왼쪽으로
          wColNum = wSheet._focusableLeftColNum(wRowNum, wColNum);
  	    if (wColNum != -1) {
    	    if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
    	        wSheet.scrollTo(wRowNum, wColNum);
    	    }
            if (browserDetect.browser != "Explorer"){
        	    wCell.setAttribute("tabindex", 9999);
            }
            
            wSheet.moveTo(wRowNum, wColNum);
  	    }
    	}
    	else if (KeyCode==39){ // 오른쪽으로
    	    wColNum = wSheet._focusableRightColNum(wRowNum, wColNum);
  	    if (wColNum != -1) {
    	    if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
    	        wSheet.scrollTo(wRowNum, wColNum);
    	    }
            if (browserDetect.browser != "Explorer"){
        	    wCell.setAttribute("tabindex", 9999);
            }
            
            wSheet.moveTo(wRowNum, wColNum);
  	    }
    	}
    	else if (KeyCode==38){ // 위로
  	    if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
  	        wSheet.scrollTo(wRowNum - 1, wColNum);
  	    }
          if (browserDetect.browser != "Explorer"){
      	    wCell.setAttribute("tabindex", 9999);
          }
          
          wSheet.moveToUpperCell(wCell);
    	}
    	else if (KeyCode==40){ // 아래쪽으로
  	    if (wSheet.sheetType == SHEETTYPE_LISTSHEET){
      	    wSheet.scrollTo(wRowNum + 1, wColNum);
  	    }
    	    if (browserDetect.browser != "Explorer"){
      	    wCell.setAttribute("tabindex", 9999);
          }
    	    
    	    wSheet.moveToLowerCell(wCell);
    	}
    	
    	return false;
    }

    // Otherwise allow
    return true;
};

// 클립보드의 내용을 배열에 넣는 함수
// 사용방법 :
// 1. 엑셀로 먼저 원하는 범위를 copy 한다
// 2. 이 메서드를 호출하면 이차원 배열을 만들어 리턴한다
function clipBoardToArray(){
     // functionname : [Recordset.convertClipBoard]
                    
  // 오류 메시지 먼저 파악
  var jsonArrayObject = [];
    var cliapBoardData = window.clipboardData.getData("Text");
 
  if (cliapBoardData == null || cliapBoardData.length == 0){
   alert(getText("message_datasheet_025", "붙여넣을 데이터가 없습니다.\n먼저 엑셀에서 범위를 선택하여 복사하세요."));
   return;
    }

    var arrRowDatas = cliapBoardData.split("\r\n");
  for (var rowNum = 0; rowNum < arrRowDatas.length - 1; rowNum++){
     var arrayRow = jsonArrayObject[rowNum] = [];
       var arrColDatas = arrRowDatas[rowNum].split("\t");

     for (var colNum = 0; colNum < arrColDatas.length; colNum++){
       arrayRow[colNum] = arrColDatas[colNum];
     }
  }

    return jsonArrayObject;
};

// 엑셀 또는 배열데이터 업로드
function setExcelData(jsonArrayObject, message, commandName, frameName, sheetName){
	// 오류 메시지 먼저 파악 
	if (jsonArrayObject == null){
       alert(message);
		this.errInfo = message;
		return;
	}
	sheetNameToPaste = sheetName;
	controls[sheetNameToPaste].setArrayData(jsonArrayObject, "excel");

var wControl = controls[commandName];

uploadControls[frameName].clearInfo();
uploadControls[frameName] = null;
wControl.uploadFrame = null;

wControl.uploadFrame = uploadControls[frameName] = new IFrame_UploadXL_Command(frameName, commandName, sheetName);

alert(getText("message_datasheet_026", "총 {0}건의 데이터를 붙여 넣었습니다.", [jsonArrayObject.data.length]));

	return;
}

DataSheet.prototype.setArrayData = function(jsonArrayObject, type){
    // functionname : [Recordset.setArrayData]
	if(type == "excel"){
  	var startRow = jsonArrayObject.row;
  	var startCol = jsonArrayObject.col;
  	var columnOrder = jsonArrayObject.columnOrder;
  	var data = jsonArrayObject.data;
	}
	else{
		var row = 0;
		var col = 0;
		var data = jsonArrayObject;
	}
	
	// 서버데이터 분석
   if (data.length == 0){
       alert(getText("message_datasheet_027", "엑셀로 변환된 결과값이 없습니다."));
       return;
   }
   if (data[0].length == 0){
       alert(getText("message_datasheet_027", "엑셀로 변환된 결과값이 없습니다."));
       return;
   }
   
   // 현재 칼럼과 줄을 시작위치로 설정한다
   var startColNum = (this.currentCol == 0 ? 1 : this.currentCol);
   var startRowNum = (this.currentRow == 0 ? 1 : this.currentRow);
   
   // 현재가 빈줄이면 하나씩 위로 이동하여 채울 위치를 정한다
   if (this.isEmptyRow(startRowNum)){
       while (startRowNum > 0 && this.isEmptyRow(startRowNum)) startRowNum--;
       
       // startRowNum이 데이터가 채워진 맨자지막줄을 가리키게 되므로 넣을 위치는 그 한칸 아래다
       startRowNum++;
   }
   
   // 붙여넣을 마지막칼럼은 기준열에서 붙여넣을 칼럼수 만큼 간 것이다
   //var toColNum = startColNum + data[0].length - 1;
   // 단 그칼럼은 최대열을 벗어날 수 없다
   //if (this.maxCols < toColNum) toColNum = this.maxCols;
   //var colCount = toColNum - startColNum + 1;
   var colCount = this.maxCols;
   
   // 붙여 넣을 마지막 줄은 시작위치에서 붙일 줄수만큼 이동한 위치이다
   var toRowNum = startRowNum + data.length -1;
   // 마지막줄이 줈의 한계를 벗어나면 그만큼 늘려준다
   if (toRowNum > this.maxRows) {
	   if(type == "excel"){
		   toRowNum = toRowNum - startRow + 1;
	   }
	   this.setMaxRows(toRowNum);
   }
   
   var rowNum = startRowNum;
   for (var i = startRow - 1; i < data.length; i++){		//row
	   	var arrColumnDatas = data[i];
   		var value;
   		
   		for (var j = 0; j < colCount; j++){	//col
	        colNum = startColNum + j;
	    	if(type == "excel"){
  	        var excelColNum = columnOrder[colNum];
  	        if(excelColNum == undefined || excelColNum == null || excelColNum < 0){
  	        	continue;
  	        }
  	        else{
  	        	// KDN 엑셀업로드 첫번째 칸이 두번째 데이터로 채어지는 현상
  	        	// excelColNum = (excelColNum - 1 > 0) ? excelColNum - 1 : excelColNum;
  	        	 excelColNum--; 
  	        }
  	        value = arrColumnDatas[excelColNum];
	    	}
	    	else{
	    		value = arrColumnDatas[colNum];
	    	}
	        
            var wColumn = this.columns[colNum];
            if (wColumn.defaultCellType == CELLTYPE_DATE ||
                (wColumn.defaultDisplayFormat.indexOf("-") > 0 && wColumn.defaultDisplayFormat.indexOf(",") < 0)){
                value = value.replaceWord("-", "");
                value = value.replaceWord(".", "");
                value = value.replaceWord("/", "");                
            
            } else if (wColumn.defaultCellType == CELLTYPE_NUMBER ||
                       wColumn.defaultCellType == CELLTYPE_FLOAT  ||
                       wColumn.defaultCellType == CELLTYPE_CURRENCY ||
                       wColumn.defaultCellType == CELLTYPE_INTEGER  ||
                       wColumn.defaultDisplayFormat.indexOf(",") > 0){
                value = value.replaceWord(",", "");
            }
	        
	        this.setValue(rowNum, colNum, value);
	    }
        rowNum++;
   }

   return;
};

DataSheet.prototype.getArrayData = function(){
    // functionname : [Recordset.getArrayData]
    //var wSheet = controls[sheetNameToPaste];

    var jsonArrayObject = [];
    for (var rowNum = 1; rowNum <= this.maxRows; rowNum++){
        var arrayRow = jsonArrayObject[rowNum - 1] = [];
       
 	    for (var colNum = 1; colNum <= this.maxCols; colNum++){
	        arrayRow[colNum - 1] = this.getValue(rowNum, colNum);
 	    }
 	}
  
    return jsonArrayObject;
};

function arrayToClipBoard(jsonArrayObject){
                       
    var wString = "";
                   
	for (var i = 0; i < jsonArrayObject.length; i++){
        var arrColumnDatas = jsonArrayObject[i];
 		
 	    for (var j = 0; j < arrColumnDatas.length; j++){
 	    	wString += arrColumnDatas[j] + "\t";
 	    }
 	    if (i < jsonArrayObject.length - 1){
  	       wString += "\r\n";
 	    }
 	}
	
    var result = null;
    if(window.BrowserDetect.browser == "Mozilla"){
    	result = window.clipboardData.setData('Text', wString);
    }
    
    if (result == true){
        alert(getText("message_datasheet_028", "데이터를 클립보드로 복사했습니다."));
    }

    return;
};



/***************************************************************************
* 데이터시트 콘트롤의 이벤트 처리함수 부분이다
**************************************************************************/
function sheet_onmousedown(e) {
if(e.which == 3){ // 우클릭
	sheet_onrightClick(e);
	return;
}else
if(e.which == 2){ // 휠클릭
	sheet_onwheelClick(e);
	return;
}

    e = e||window.event;                      // IE에 적용
	var em = getSrcElement(e);
	
    var wSheet = searchSheet(em);
    
    if (wSheet == null)  return false;
if (!wSheet.enabled) return false;

wSheet.setPickHeaderClass(-1, -1, "");
    wSheet._clickLocation = em;


    if (em.tagName != "TD" || wSheet == null){
        stopPropagation(e);
        return;
    }

    if (!/ColHead|RowHead|MoveColumn/.test(em.className)) {
        stopPropagation(e);
        return;
    }
    
    // 컬럼 이동
    if (wSheet.permitColumnMove && !/-resize/.test(em.style.cursor) && !wSheet.hasTreeCell && !/RowHead/.test(em.className)){
    	wIsColumnMove = true;
    	wSheet._moveReferenceRange = new Array(2);
    	wSheet._moveReferenceRange[0] = window.event.clientX;
    	wSheet._moveReferenceRange[1] = window.event.clientY;
    }

    if (!(wSheet.permitCellResizing && /-resize/.test(em.style.cursor))) {
        stopPropagation(e);
        return;
    }
    
var wTable = em.parentNode;
while(wTable.tagName != "TABLE") wTable = wTable.parentNode;

var dir = getDirection(em);
if (dir == "") {
	return;
}
wIsResizing = true;

var rightTableCellNum = 0;
var emTrIndex = em.parentElement.rowIndex;
	// 우측 고정열이 있는지 체크하고 있으면 우고정 시작컬럼번호를 변수에 넣어준다.
	if(/right/i.test(em.parentNode.parentNode.parentNode.getAttribute("name"))) {
	rightTableCellNum = wSheet.frozenColsRight[emTrIndex + 1];
}
	
ResizeObject = new resizeObject();

ResizeObject.em = em;
ResizeObject.cellIndex = em.cellIndex + rightTableCellNum;
ResizeObject.dir = dir;

ResizeObject.grabx = window.event.clientX;
ResizeObject.graby = window.event.clientY;

ResizeObject.width = em.offsetWidth;
ResizeObject.height = em.offsetHeight;
ResizeObject.left = em.offsetLeft;
ResizeObject.top = em.offsetTop;

ResizeObject.table = wTable;
ResizeObject.tableWidth = wTable.style.pixelWidth;

var wArr = wTable.parentNode.parentNode.getAttribute("cellsize").split(";");

ResizeObject.cellSizes = new Array(wArr.length);
for (var i = 0; i < wArr.length; i++) ResizeObject.cellSizes[i] = parseInt(wArr[i]);

ResizeObject.colCount = ResizeObject.cellSizes.length;
ResizeObject.headerRows = wSheet.headRows;//parseInt(wTable.parentNode.parentNode.getAttribute("headerrows"));

var wRowIndex = em.parentNode.rowIndex + em.rowSpan - 1; 

ResizeObject.tableRow = wTable.rows[wRowIndex];
ResizeObject.rowHeight = wTable.rows[wRowIndex].offsetHeight;

    stopPropagation(e);

    return;
};

function sheet_onmouseup(e) {
e = e||window.event;                      // IE에 적용
var em = getSrcElement(e);

if (/ColHead|MoveColumn/.test(em.className) && !wIsColumnMove && !wIsResizing){ // col 타이틀 클릭
	sheet_onColHeaderClick(e);
}else
if(/RowHead/.test(em.className) && !wIsColumnMove && !wIsResizing){ // row 타이틀 클릭
	sheet_onRowHeaderClick(e);
}

call_sheet_onmouseup(em);
stopPropagation(e);

return true;
};

function call_sheet_onmouseup(em) {
var wSheet = searchSheet(em); 
if (wSheet == null){
	wSheet = searchSheet(em);
}
    if (wSheet == null)  return false;
if (!wSheet.enabled) return false;

if (wSheet.textControl == null) {
    	
    } else if (!wSheet.textControl.getAttribute("inputBoxMouseMode")) {
    	
    } else if (wSheet.textControl.getAttribute("inputBoxMouseMode") == "true") {
    	wSheet.textControl.removeAttribute("inputBoxMouseMode"); // 영원히 다른셀을 못누르는 경우 방지차원
	return false;
}

if(wSheet._clickLocation != null) em = wSheet._clickLocation;
	else if(wSheet._clickLocation == null) wSheet._clickLocation = em;

// 셀 크기 조정 정보 초기화
    if(wIsResizing) {
	ResizeObject.table.parentNode.parentNode.setAttribute("cellsize", ResizeObject.cellSizes.join(";"));
	
	for(var i = ResizeObject.cellSizes.length - 1; i >= 0; i--) {
		ResizeObject.cellSizes.pop();
	}
	ResizeObject.cellSizes = null;
	ResizeObject.table = null;
	ResizeObject.tableRow = null;
	ResizeObject = null;
	
	wIsResizing = false;
	
	return false;
    }
    
    // 컬럼 이동 정보 초기화
    if(wIsColumnMove) {
    	if(wIsColumnMoving){
    		movingOfSheetColumnSuccess();
    		return;
    	}else{
    		wIsColumnMove = false;
    	}
    }
    
    // 달력 접기 동작
var calendarDiv = document.getElementById("calendarDiv");
if(calendarDiv != null){
	if(em.cellIndex == undefined && calendarDiv.style.display != "none"){
		closeCalendar();
	}
	else if(calendarDiv.style.display != "none"){
		var wDataCell = wSheet.getDataCell(em);
		if(wDataCell.celltype != CELLTYPE_DATE && calendarDiv.style.display != "none"){
			closeCalendar();
		}
	}
}

    
    if (em.tagName != "TD" || searchSheet(em) == null){
        return;
    }

if (/ColHead|MoveColumn/.test(em.className)){
        if (wSheet.SortOnHeaderClick) {
        	
        } else if (!wSheet.sortSpecialColumn) {
            return false;
        } else {
            var wCell  = searchCell(em);
                var wColNum =  wSheet.colNumOf(this.headRows, getCellIndex(wCell), CONV_LOGICAL_SHEET);
                if (wSheet.columns[wColNum].sortGu.length == 0){
                	return false;
                }
        	
        }
	    var wResult = wSheet.sortTable(em);
	    wSheet.setResultOfSort(wResult); 
    
} else if (/RowHead/.test(em.className)){
	
} else {
    if (wSheet instanceof ListSheet){
        var wMoveOverTR = searchRow(em);
        if (wMoveOverTR != null) {
            wSheet.selectRow(em);
            wSheet._clickLocation = null;
    	}
    } else if (wSheet.controlId.toLowerCase().indexOf("sheet_") >= 0 && wSheet.controlId.toLowerCase().indexOf("listsheet_") < 0){
        var wResult = wSheet.click(em);
        wSheet._clickLocation = null;
        
          if (typeof(wResult)=="boolean" && !wResult) {
              return false;
          }            

    }
}

return true;
};

// call_sheet_onmouseup의 변형으로 데이터 시트에 방향키로 셀을 선택한 경우에 한하여 동작한다
function SelectByKeyboard(em, rowNum, colNum) {
  var wSheet = searchSheet(em); 
  var wRow = searchRow(em);
  
	if (wRow.getAttribute("haveData") != "1") return;

    // 먼저번 클릭된 줄 원상복구
//    	if (wSheet.clickedTR && wSheet.clickedTR.rowIndex >= 0) {
//    		wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//    		wSheet.setColClass(wSheet.clickedTR.rowIndex, getCellIndex(em), wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
//    	}
	
	// 새로 선택된 줄 기억
//        wSheet.clickedTR = wRow;
//        wSheet.lastTRClass=wSheet.getOddEvenStyle(wRow.rowIndex);

	// 콘트롤 세팅
    if (wSheet.currentRow == rowNum && wSheet.currentCol == colNum) {
		if (!wSheet._canFocusToControl()){
			wSheet.shtControlSet(rowNum, colNum);
		}
	} else {
        wSheet.moveTo(rowNum, colNum); 
 	}
 	
return;
};

function sheet_onmousemove(e) {
e = e||window.event;                      // IE에 적용
	var em = getSrcElement(e);
	var wSheet = searchSheet(em);
	
if(wSheet._mouseMove){
  	if(!wIsResizing && !wIsColumnMove){
  		if ((em.tagName != "TD" || searchSheet(em) == null)){
  			stopPropagation(e);
  			return;
  		}
  	}
      
      call_sheet_onmousemove(em);
      
  	stopPropagation(e);
	
}

    return true;       
};

function call_sheet_onmousemove(em) {

	var wSheet = searchSheet(em);
	
    if (wSheet == null)  return false;
if (!wSheet.enabled) return false;

if (/ColHead|RowHead|MoveColumn/.test(em.className) && !wIsColumnMove && wSheet.permitCellResizing){
	str = getDirection(em);
	if (str == "") {
		em.style.cursor = "";
	} else {
		str += "-resize";
		em.style.cursor = str;
	}
}

if(/ColHead/.test(em.className)){
	wSheet.setColHeadClass(em);
}
		
/** 셀 크기 조정 ********************************************/
    if (wIsResizing) {
    		wSheet._hideCellEdit(); // 텍스트 박스 숨김
	    resizeCell(window.event.clientX, window.event.clientY);
	    return true;
    }
    
    /** 컬럼 이동 ************************************************/
    if (wIsColumnMove){
    	if(!wIsColumnMoving && (Math.abs(wSheet._moveReferenceRange[0] - window.event.clientX)>3 || Math.abs(wSheet._moveReferenceRange[1] - window.event.clientY)>3)){
    		wSheet._hideCellEdit(); // 텍스트 박스 숨김
    		var emTrIndex = em.parentElement.rowIndex;
    		
    		// 좌측 끝 헤더일 경우 리턴
    		if(emTrIndex == 0 && em.cellIndex == 0) {
    			wIsColumnMove = false;
    			return;
    		}
    		
        	var rightTableCellNum = 0;
        	// 우측 고정열이 있는지 체크하고 있으면 우고정 시작컬럼번호를 변수에 넣어준다.
        	if(/right/i.test(em.parentNode.parentNode.parentNode.getAttribute("name"))) {
    			rightTableCellNum = wSheet.frozenColsRight[emTrIndex + 1];
    		}
        	
        	if(emTrIndex == 0 && em.cellIndex + rightTableCellNum == 0) return;
        	
        	wIsColumnMoving = true;
        	wSheet._moveReferenceRange = null;
        	
        	MoveObject = new moveObject();
        	
        	if(emTrIndex > 0 && (em.cellIndex < rightTableCellNum && rightTableCellNum > 0)) MoveObject.mergeRow = 1;
        	var Index = em.cellIndex + rightTableCellNum + MoveObject.mergeRow;
        	
        	MoveObject.pickColumn = Index; // 선택된 셀의 Physical 컬럼 번호
        	MoveObject.pickCell = em; // 이동 셀의 td 태그
        	MoveObject.emTrIndex = emTrIndex; // 이동 셀의 tr 태그 Index
        	MoveObject.pickTableName = em.parentNode.parentNode.parentNode.getAttribute("Name"); // 이동 셀이 속해있는 테이블 Name값
        	MoveObject.sheet = wSheet; // 현재 시트 객체
        	
        	// 해당시트의 셀 사이즈를 담는다.
        	MoveObject.cellSizes = wSheet.tagObject.getAttribute("cellsize").split(";");
        	MoveObject.cellSizes.pop();
        	
        	// 브라우저의 가로 스크롤 값을 가져온다.
    		var position = document.documentElement;
    		var body = document.body;
    		MoveObject.browserX = document.all ?(!position.scrollLeft ? body.scrollLeft : position.scrollLeft) : (window.pageXOffset ? window.pageXOffset:window.scrollX);
    		
    		
        	// 이동하는 셀이 처음 클릭했던 마우스 위치로 오게하기위하여 시트위치와 이동셀의 width값을 이용하여 계산
        	var dataCells = wSheet.dataTable.rows[0].cells;
        	MoveObject.grabx = 0 - window.event.clientX - wSheet.dataTable.rows[0].cells[MoveObject.pickColumn].clientWidth;
        	for (var i=0; i<=MoveObject.pickColumn; i++){
        		MoveObject.grabx += (dataCells[i].clientWidth) + 1;
        	}
        	
        	var frozenColsLeft = wSheet.colNumOf(emTrIndex, Index, CONV_HARD_SHEET);
        	// 클릭한 header 의 tr 태그를 구한다.
    		if(frozenColsLeft <= wSheet.frozenCols && wSheet.frozenCols>0){
    			MoveObject.emTr = wSheet.leftColHeadTable.getElementsByTagName("tbody")[0].getElementsByTagName("tr")[emTrIndex];
    		} 
    		else if(MoveObject.pickColumn >= rightTableCellNum && rightTableCellNum>0){
    			MoveObject.emTr = wSheet.rightColHeadTable.getElementsByTagName("tbody")[0].getElementsByTagName("tr")[emTrIndex];
    		} 
    		else{
    			MoveObject.emTr = wSheet.colHeadTable.getElementsByTagName("tbody")[0].getElementsByTagName("tr")[emTrIndex];
    		}
    		
    		var cellDiv = null;
			cellDiv =  document.createElement('div');
			cellDiv.style.left = "-10000px";
			cellDiv.style.width = em.clientWidth + "px";
        	cellDiv.style.height = em.clientHeight + "px";
        	cellDiv.style.lineHeight = (em.clientHeight) + "px";
        	cellDiv.innerHTML = em.textContent;
        	cellDiv.className = "MovingColumnDiv";
    		
    		wSheet.tagObject.getElementsByTagName("DIV")[2].insertAdjacentElement('afterEnd', cellDiv);
        	
        	MoveObject.div = cellDiv; // 선택된 셀 태그 복사
    	}
    	if(wIsColumnMoving){
    		movingOfSheetColumn(window.event.clientX);
    	}
    }
        
var wMoveOverTR = searchRow(em);

if (wMoveOverTR != null) {
    wMoveOverTR = wSheet.dataTable.tBodies[0].rows[wMoveOverTR.rowIndex];
    
//		    if (wSheet.moveoverTR != wMoveOverTR){
    var wRow = searchRow(em);
  	if (wSheet.moveoverTR != null){
  		if (wSheet.clickedTR && wSheet.clickedTR.rowIndex >= 0) {
  			wSheet.setRowClass(wSheet.clickedTR.rowIndex, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
  			wSheet.setColClass(wSheet.clickedTR.rowIndex, wSheet.clickedCOL, wSheet.getOddEvenStyle(wSheet.clickedTR.rowIndex));
  		}else{
  		wSheet.setRowClass(wSheet.moveoverTR.rowIndex, wSheet.lastTRClass);
    	wSheet.setColClass(wSheet.moveoverTR.rowIndex, getCellIndex(em), wSheet.lastTRClass);
  		}
  	}
  	wSheet._moveTableName = em.parentNode.parentNode.parentNode.getAttribute("name");
  	wSheet.lastTRClass = wMoveOverTR.className;
  	wSheet.moveoverTR = wMoveOverTR;

  	wSheet.setRowClass(wMoveOverTR.rowIndex, "MoveStyle");
  	wSheet.setColClass(wMoveOverTR.rowIndex, getCellIndex(em), "MoveStyle");
  	
  	// 새로 선택된 줄 기억
      wSheet.clickedTR = wRow;
      wSheet.lastTRClass=wSheet.getOddEvenStyle(wRow.rowIndex);
  }
//		}

return;

};


function sheet_onmouseout(e) {

      e = e||window.event;   // IE에 적용
      var em = getSrcElement(e);
      var wSheet = searchSheet(em); 
      
      wSheet._mouseMove = true;
  	
      if (em.tagName != "TD" || searchSheet(em) == null){
          stopPropagation(e);
          return;
      }
      
      call_sheet_onmouseout(em);
      
      stopPropagation(e);

    return true;
};

function call_sheet_onmouseout(em) {
	var wSheet = searchSheet(em); 
    if (wSheet == null)  return false;
if (!wSheet.enabled) return false;

var wMoveOverTR = searchRow(em);
if (wMoveOverTR != null) {
    wSheet.setRowClass(wMoveOverTR.rowIndex, wSheet.lastTRClass);
    wSheet.setColClass(wMoveOverTR.rowIndex, getCellIndex(em), wSheet.lastTRClass);
}

if (/ColHead|RowHead|MoveColumn/.test(em.className)){
	em.style.cursor = "";
	wSheet.setColHeadClass(null);
}


};/*******************************************************************************
    전역상수 
*******************************************************************************/
    // 필요한 구조체
    function HeadData(){
        this.sortKey = "";
        this.captions  = ["","","","",""];
        this.values    = ["","","","",""];
        this.Level = 0;
        this.childInfo = "";
        this.hideChild = false;
        this.functionName  = "";
        this.merged    = ["N","N","N","N","N"];
    };

    
    function chartKey(chartName, seriesRCType, seriesStepNum, seriesLevel, pointRCType, pointStepNum, pointLevel){
    	this.chartName = "";     // 차트명
    	
    	this.seriesRCType = 0;   // BY_ROW or BY_COL
    	this.seriesStepNum = 0;
    	this.seriesLevel = 0;
    	
    	this.pointRCType = 0;    // BY_ROW or BY_COL
    	this.pointStepNum = 0;
    	this.pointLevel = 0;
    	
    	// Constants
    	this.BY_ROW_HTYPE = 1;
    	this.BY_COL_HTYPE = 2;
    	this.BY_ROW_VTYPE = 2;
    	this.BY_COL_VTYPE = 1;
    };
    
	// Constants
	var BY_COL_HTYPE = 1;
	var BY_ROW_HTYPE = 2;
	var BY_ROW_VTYPE = 2;
	var BY_COL_VTYPE = 1;
//	var GAP_BETWEEN_CELL  = (BrowserDetect.browser == "Explorer" ? 1 : 0);
//	var GAP_BETWEEN_CELL  = 1;
	var GAP_BETWEEN_CELL  = 0;	//2019-03-28 jaeik box-sizing: border-box; 속성으로 1->0으로 수정함
    // 익스플로러가 아닌 경우 전역변수 GAP_BETWEEN은 0이다
    // GAP_BETWEEN은 cross
	
	/***************************************************************************
	    데이터시트 콘트롤의 정의 부분이다
	    인수로는 콘트롤 명과 , 테그객체를 갖는다
	***************************************************************************/
	function CrossSheet(controlId, controlName, tagObject) //constructor 
    {
        // 시트 외형에 관한 설정 
        this.controlId = controlId;   
        this.id   = this.controlId;
        this.controlName = controlName;   
        this.tagObject = tagObject;
        
        this.reportId = "";
        this.parameters = [];
        this.editable = false;
        
        this.actionObject = null;
        
        
        if (tagObject != undefined){
//            setEventHandler(tagObject, "mousedown", sheet_onmousedown);
//            setEventHandler(tagObject, "mouseup", sheet_onmouseup);
//            setEventHandler(tagObject, "mousemove", sheet_onmousemove);
//            setEventHandler(tagObject, "mouseout", sheet_onmouseout);
        	setEventHandler(tagObject, "mousewheel", sheet_DisplayWheel);
        	  
			crosssheets[crosssheets.length] = this;
        }
        
        this.busy = false;
    };
    
    
    CrossSheet.prototype.clear = function(){
    	// functionname : [CrossSheet.clear]

        this.parameters = [];
        
        if(this.actionObject != null){
        	this.actionObject.clear();
        }
        
        return;
    };

    CrossSheet.prototype.setParameter = function(paramName, dataValue){
    	// functionname : [CrossSheet.setParameter]

        this.parameters[paramName] = new Parameter(paramName, dataValue);
        return;
    };
    
    CrossSheet.prototype.getData = function(){
    	// functionname : [CrossSheet.getData]

        var controlId = this.controlId;   
        var controlName = this.controlName;   
        
        var wParamInfo = "";
        for (var wKey in this.parameters){
                 if (typeof(this.parameters[wKey])=="function") continue;
                 wParamInfo  += this.parameters[wKey].value() +":";
        }
    	// 로드할 객체의 키값들을 리턴한다
        var wQueryString = "cogu=" + USER_COGU
                         + "&personalId=" + USER_PERSONALID
                         + "&crossid=" + this.reportId
                         + "&paramInfo=" + wParamInfo
    			         + "&lang=" + USER_LANGUAGE
    	                 + "&tm=" + (new Date()).valueOf();

     	// http://localhost/FlexFrame/groupware/analyze.action?cogu=19&crossid=271&paramInfo=20090601:20090731:
    	var wControl = this;
    	this.busy = true;
    	setTimeout(showAjaxBox(getText("message_crosssheet_001", "분석데이터 가저오기 중입니다.")),1,NEED_NOT_COUNT_UP);
    	if (TEST_MODE == undefined || !TEST_MODE){
    		ajaxCall("POST", getContextPath()+"/analyze.do", wQueryString, this, "analyze", 30);
    	} else {
    		ajaxCall("POST", getContextPath()+"/test/analyze.do", wQueryString, this, "analyze", 30);
    	}
        
        return;
     };
    
    CrossSheet.prototype.parseData = function(jsonActionObject, message, pFlag){
    	// functionname : [CrossSheet.parseData]
    	this.busy = false;                   
    	var controlId = this.controlId;   
    	
    	// 오류 메시지 먼저 파악 
    	if (jsonActionObject == null){
    		callEvent(this.controlId + "_LoadFailed", message, this.controlName);
    		hideAjaxBox();
    		return;
    	}
    	
    	if( typeof jsonActionObject.errorMsg != "undefined" && jsonActionObject.errorMsg != null && jsonActionObject.errorMsg.length > 0 ){
    		callEvent(this.controlId + "_LoadFailed", jsonActionObject.errorMsg);
    		hideAjaxBox();
    		return;
    	}
    	
    	// 데이터분석
    	this.analyze(jsonActionObject);
    	
    	/*
    	this.showChart();
	    callEvent(this.controlId + "_LoadSuccess");
    	 * */
    	
    	return;
    };
    
    CrossSheet.prototype.analyze = function(dataObject){
    	// functionname : [CrossSheet.analyze]

        if (dataObject.direction == "RowChange"){
        	this.actionObject = new CrossSheetV(this.controlId, this.controlName, this.tagObject);
        } else if (dataObject.direction == "ColChange"){
        	this.actionObject = new CrossSheetH(this.controlId, this.controlName, this.tagObject);
        }
        
    	this.actionObject.addChartInfo(this.chartInfo);
    	
        this.actionObject.analyze(dataObject);
        
        return;

    };

    //  
    CrossSheet.prototype.getDataForExcel = function(){
    	// functionname : [CrossSheet.getDataForExcel]

    	var arrFromStrings = [",", ":", ";", "&", "%", "?"];
        var arrToStrings   = ["<COMMA>", "<COLON>", "<SEMICOLON>", "<AMP>", "<PERCENT>", "<QUESTION>"];
    	                   
    	var generationInfo = new xlGenerationInfo();
    	generationInfo.colsNum = this.actionObject.headRows; // Column Header's Depth
    	generationInfo.rowsNum = this.actionObject.headCols; // Row Header's Depth
    	generationInfo.sheetType = "1";
    	
    	var found = false;
    	generationInfo.rowsColors = "";
    	/*
	    for (var cssSheetIndex = 0; cssSheetIndex < document.styleSheets.length; cssSheetIndex++){
        	var cssSheet=document.styleSheets[cssSheetIndex];
        	var cssRules = (cssSheet.cssRules? cssSheet.cssRules: cssSheet.rules);
        	
        	for (var wLevel = 1; wLevel <= 5; wLevel++){
        	    var selectorText = ".headlevel" + wLevel;
        		
	        	for (var cssRulesIndex = 0; cssRulesIndex < cssRules.length; cssRulesIndex++){
	        	    var cssRule = cssRules[cssRulesIndex];
	        	    
	        		if(cssRule.selectorText.toLowerCase() == selectorText){ 
	        			var colorString = "" + cssRule.style.backgroundColor;
	        			if (colorString.substring(0,1)=="#"){
	        				colorString = colorString.substring(1);
	        			} else if (colorString.substring(0,4)=="rgb("){
	        				colorString = colorString.substring(4, colorString.length - 1);
	        				var arrStrColors = colorString.split(",");
	        				var redString = parseInt(arrStrColors[0].trim(), 10).toString(16);
	        				var greenString = parseInt(arrStrColors[1].trim(), 10).toString(16);
	        				var blueString = parseInt(arrStrColors[2].trim(), 10).toString(16);
	        				
	        				redString = (redString.length == 1 ? "0" : "") + redString;
	        				greenString = (greenString.length == 1 ? "0" : "") + greenString;
	        				blueString = (blueString.length == 1 ? "0" : "") + blueString;
	                        
	        				colorString = "" + redString + greenString + blueString;
	        			} 
	        			
	        			found = true;
	        			break;
	        		}
	        		
	        	}
	        	
    			generationInfo.rowsColors = (wLevel == 1 ? "" : ",") + colorString;

        	}
    	}
    	*/

    	var wStrColsWidths = this.actionObject.tagObject.getAttribute("cellsize") || "";
    	var wColsWidths = wStrColsWidths.split(";"); wStrColsWidths = "";
    	for (var i = 0; i < wColsWidths.length; i++){
    		if (wColsWidths[i].trim().length == 0) continue;
    		var colWidth = Math.ceil(parseFloat(1 * wColsWidths[i]) / 7,5);
    		wStrColsWidths += (i == 0 ? "" : "\t") + colWidth;
    	}
    	
    	generationInfo.colsWidth = wStrColsWidths;
    	
    	generationInfo.data = "";

     	var wRows = this.actionObject.dataTable.tBodies[0].rows;
    	for (var rowNum = 0; rowNum < wRows.length; rowNum++){
    		var wRow = wRows[rowNum];
    		
    		for (var colNum = 0; colNum < wRow.cells.length; colNum++){  // 칼럼해더정보 넘기기
    			var wCell = wRow.cells[colNum];
        		var decimal = wCell.getAttribute("decimal");
        		
	    		if (rowNum < this.actionObject.headRows){
        			generationInfo.data += (colNum == 0 ? "" : "\t") + escapeCharacter(wCell.innerHTML,arrFromStrings, arrToStrings);
        			generationInfo.decimal += (colNum == 0 ? "" : "\t") + (decimal == undefined || decimal == "" ? "0" : decimal);
	    		} else if (colNum < this.actionObject.headCols){                      // 칼럼헤드가 아니고 로우헤드인 경우
        			generationInfo.data += (colNum == 0 ? "" : "\t") + escapeCharacter(wCell.innerHTML,arrFromStrings, arrToStrings);
        			generationInfo.decimal += (colNum == 0 ? "" : "\t") + (decimal == undefined || decimal == "" ? "0" : decimal);
	    		} else {                                                 // 데이터 셀인 경우
        			generationInfo.data += (colNum == 0 ? "" : "\t") + escapeCharacter(wCell.innerHTML,arrFromStrings, arrToStrings);
        			generationInfo.decimal += (colNum == 0 ? "" : "\t") + (decimal == undefined || decimal == "" ? "0" : decimal);
	    		}
    		}
    		if (rowNum < wRows.length -1) {
        		//generationInfo.data += ":\r\n";
    			generationInfo.data += "<<%ENTER%>>";
    			generationInfo.decimal += "<<%ENTER%>>";
    		}
    	}
    	return generationInfo;
    };
    
    CrossSheet.prototype.preview = function(){
    	// functionname : [CrossSheet.preview]


    };

    
    CrossSheet.prototype.print = function(){
    	// functionname : [CrossSheet.print]
    	
    	
    };

    CrossSheet.prototype.addChartInfo = function(pChartInfo){
    	// functionname : [CrossSheet.addChartInfo]

        this.chartInfo = pChartInfo;
    };
    
    //CrossSheet.prototype.getChartData = function(pChartId){
    //	return this.actionObject.getChartData(pChartId);
    //}

    CrossSheet.prototype.showChart = function(){
    	// functionname : [CrossSheet.showChart]

    	this.actionObject.showChart();
    	return;
    };

    CrossSheet.prototype.scrollAction = function(scrollTop, scrollLeft){
        // functionname : [DataSheet.scrollAction]
                           
 	   // 사용자 코딩 추가영역을 호출한다
 	   var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];
 	   var checkEvent = false;
 	   try {
 	       if (eval(this.controlId + "_onscroll")) checkEvent = true;
 	   } catch(e){}
 	       if (checkEvent){
 	           eval(this.controlId + "_onscroll(scrollPanel, scrollTop, scrollLeft);");
 	   }
        
 	   return;
    };
    
    
    
    /*******************************************************************************
    필요함수 
    *******************************************************************************/
    function sortfnHead(a,b){
        dt1 = (a.sortKey || "").toLowerCase();
        dt2 = (b.sortKey || "").toLowerCase();
        
        if (dt1 == dt2) return 0;
        if (dt1 < dt2) return -1;

        return 1;
    };
    
    function parseRangeToRC(row, col, row2, col2){
        var wReturn = "R" + row + "C" + col;
        if (!row2) row2 = row;
        if (!col2) col2 = col;
        
        if (row != row2 || col != col2){
            wReturn += ":R" + row2 + "C" + col2;
        }
        return wReturn;
    };
    
    function sortedArrayWithOrderTag(parentArray, startIndex, indexAfterEndPoint, startNum){
    	// 배열을 카피한다
    	var length = parentArray.length;
    	var newArray = new Array(length);
    	for (var i = 0; i < length;i++)
    		newArray[i] = parentArray[i].values.slice(startIndex, indexAfterEndPoint);
    	
    	// 순서 테그를 마지막 배열값으로 추가한다
     	for (var i=0; i < newArray.length; i++){
    		newArray[i].push(startNum + i);
    	}
    	
    	// 배열을 소트한다
    	newArray.sort(compareArray);
    	
    	// 소트된 배열을 리턴한다.

    	return newArray;
    };
    

    // -----------------------------------------------------------------------------------
    //     여기서 부터는 클릭동작 
    // -----------------------------------------------------------------------------------
	function crosssheet_onmouseup(e) {
        e = e||window.event;                      // IE에 적용
    	var em = getSrcElement(e);

    	call_crosssheet_onmouseup(em);
    	
        stopPropagation(e);
		return true;
	};
    
	function call_crosssheet_onmouseup(em) {
		var wCSheet = searchSheet(em); 
        if (wCSheet == null)  return false;
//        if (!wCSheet.editable)  return false; 클릭 이벤트 동작 때문에 막음 2014.08.28
        var wSheet = wCSheet.actionObject;
        
    	// TD이고 줄인것 
        if (em.tagName != "TD") return;

	    var wCell = em;
	    var wRow = em.parentNode;

    	// 현재 줄번호를 서칭해서 대입하고
        var rowNum = wCell.parentNode.rowIndex;
        var colNum = wCell.cellIndex;
        
        if (rowNum < wSheet.headRows) return false;
        if (colNum < wSheet.headCols) return false;
        if (wCell.getAttribute("formula") != null) return false;
    	
        // 2단계 : 새로운 셀을 Edit 모드로 바꾼다.
        var oChild = null;
        var wValue = "";
        
    	
        // 사용자 코딩 추가영역을 호출한다
        if (wSheet.hasClickEvent) {
            var wResult = wSheet.fncClickEvent(rowNum, colNum);
            if (typeof(wResult)=="boolean" && !wResult) {
                return false;
            }            
        } 

        // 좌표 탐색
        var coords = wCSheet._getSetPosition(wCell);
        var oChild  = null;
        if (wCSheet.textControl != null){
            oChild = wCSheet.textControl; 
        } else {
        	if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) < 9) {
        		oChild = document.createElement("<INPUT type='text' id='shtText" + wSheet.id + "' name='shtText" + wSheet.id + "' class='shtText'>");
        	} else {
        		oChild = document.createElement("input");
        		oChild.type = "text";
        		oChild.name = "shtText" + wSheet.id;
        		oChild.id = "shtText" + wSheet.id;
        		oChild.className = "shtText";
        		
        		
        		oChild.style.display = "block";
        	} 
        	wSheet.dataTable.insertAdjacentElement('afterEnd', oChild);
        	wCSheet.textControl = oChild; 

    	    setEventHandler(oChild, "keydown", xCell_onKeyDown);
    	    setEventHandler(oChild, "keypress", xCell_onKeyPress);
    	    setEventHandler(oChild, "blur", xCell_onBlur);
            //setEventHandler(oChild, "mousewheel", sheet_DisplayWheel);
        }
        
    	oChild.value = (wCell.getAttribute("value") || "");
    	
	    oChild.style.left = coords.x + "px";
	    oChild.style.top = coords.y + "px";
	    oChild.style.width = coords.w + "px";
	    oChild.style.height = coords.h + "px";
	    
	    oChild.setAttribute("row", rowNum);
	    oChild.setAttribute("col", colNum);
        
	    if (wCell.align.length > 0){
	    	oChild.style.textAlign = wCell.align;
	    }
	    
	    oChild.style.lineHeight = (coords.h - 2) + "px";
        oChild.focus();
        oChild.select();
        
        // 툴팁 보여주기
        oChild.title = (wCell.title != null && wCell.title != undefined && wCell.title != "" ? wCell.title : "");
        
        wCell = null; oChild = null; wTable = null;
    	
		
		return true;
	};
    
	CrossSheet.prototype._getSetPosition= function(cell){
        // functionname : [CrossSheetV.getSetPosition]
        
		var coords = { x: 0, y: 0, w: 0, h: 0 };
		
		coords.w = cell.offsetWidth - 3;
		coords.h = cell.offsetHeight - 3;
		while (cell && cell.tagName != "DIV") {
			coords.x += cell.offsetLeft;
			coords.y += cell.offsetTop;
			cell = cell.offsetParent;
		}   
		coords.x = coords.x;
		coords.y = coords.y;
    
        return coords;
    };
    
    CrossSheet.prototype._hideCellEdit = function(){
        // functionname : [CrossSheetV._hideCellEdit]

        if (this.textControl != null){
            this.textControl.style.left = "-10000px"; 
            this.textControl.setAttribute("row", "0");
            this.textControl.setAttribute("col", "0");
        }

    	return;
    };

    
    CrossSheet.prototype.getHeaderInfo = function(rowNum, ColNum){
    	var wReturn = {columnValue: [], columnText: [], rowValue: [], rowText: []};
    	
    	var wSheetBody = this.actionObject.dataTable.tBodies[0];
    	// 상단 칼럼의 값
    	for (var wRowNum = 0; wRowNum <= this.actionObject.headRows; wRowNum++){
            var wCell   = wSheetBody.rows[wRowNum].cells[ColNum];
            var value = wCell.getAttribute("value") || "";
            var text = wCell.innerText || "";
            
            wReturn.columnText[wRowNum] = text;
            wReturn.columnValue[wRowNum] = value;
     	}
    	
    	// 좌측 줄헤더의 값
     	for (var wColNum = 0; wColNum < this.actionObject.headCols; wColNum++){
            var wCell   = wSheetBody.rows[rowNum].cells[wColNum];
            var value = wCell.getAttribute("value") || "";
            var text = wCell.innerText || "";
            
            wReturn.rowValue[wColNum] = text;
            wReturn.rowValue[wColNum] = value;
     	}
    	return wReturn;
    };

    CrossSheet.prototype.getCellValue = function(rowNum, ColNum){
    	
    	var wSheetBody = this.actionObject.dataTable.tBodies[0];
        var wCell   = wSheetBody.rows[rowNum].cells[ColNum];
        var value = wCell.getAttribute("value") || "";
        return value;
    };
    
    function xCell_onKeyPress(e){
    	
    	if (!e) e = window.event;
    	var em = getSrcElement(e);
    	
        var wKeyCode = (e.which ? e.which : e.keyCode);
        if (BrowserDetect.browser == "Explorer" && !isNaN(parseFloat(BrowserDetect.version)) && parseFloat(BrowserDetect.version) <= 7) {
        	if (wKeyCode == 13){
        		xCell_onKeyDown(e);
        	}
        }
         
        return true;
    };
    
    function xCell_onKeyDown(e){
    	if (!e) e = window.event;
    	var em = getSrcElement(e);
    	
		var wCSheet = searchSheet(em); 
        if (wCSheet == null)  return false;
        var wSheet = wCSheet.actionObject;

        var KeyCode = (event.which) ? event.which : event.keyCode ;
   	
        if (KeyCode==9)                                                                  
        {                                                                           
        	stopEvent(e)
	   		return true;
        } else if (KeyCode == 13){
        	call_xcell_onBlur(em);
			stopEvent(e);
			
	   		//var name = em.getAttribute("name");
            // setTimeout("keyAction(\"" + name + "\");" ,1); 

            return true;
        } else if (KeyCode == 38 || (getShiftKeyPressed(e) && KeyCode == 104)){    // 38 : up
	   		//var name = em.getAttribute("name");
            // setTimeout("keyAction(\"" + name + "\", \"upper\");" ,1); 
			//stopEvent(e);
	   		return true;
        } else if (KeyCode == 40 || (getShiftKeyPressed(e) && KeyCode == 98)){    // 40 : down
	   		var name = em.getAttribute("name");
            //setTimeout("keyAction(\"" + name + "\", \"lower\");" ,1); 
			stopEvent(e);
	   		return true;
	   		
        } else if (KeyCode == 37 || (getShiftKeyPressed(e) && KeyCode == 100)){    // 37 : to Left
     	    //var selLength = getCaretLength(em);
	 	    //var startPos = getCaretPosition(em);
	 	    //if (startPos == 0 && selLength == 0){
		   	//	var name = em.getAttribute("name");
	            //setTimeout("keyAction(\"" + name + "\", \"left\");" ,1); 
			//	stopEvent(e);
	    	//} 

	   		return true;
        } else if (KeyCode == 39 || (getShiftKeyPressed(e) && KeyCode == 102)){    // 39 : to Right
     	    //var selLength = getCaretLength(em);
	 	    //var startPos = getCaretPosition(em);
	 	    //var value = ("" + em.value);
		    
	    	//if (value.length == startPos){
		   	//	var name = em.getAttribute("name");
	            //setTimeout("keyAction(\"" + name + "\", \"right\");" ,1); 
			//	stopEvent(e);
	    	//} 
	        	
	   		return true;
        } else {
            var wRowNum = parseInt(1 * em.getAttribute("row"));
            var wColNum = parseInt(1 * em.getAttribute("col"));
            var wCell   = wSheet.dataTable.tBodies[0].rows[wRowNum].cells[wColNum];
            
            var stepNum = (wSheet instanceof CrossSheetH ? wSheet.stepNumOf(wColNum) : wSheet.stepNumOf(wRowNum));
            
            var wCellType = wSheet.dataObject.steps[stepNum].cellType; 
            
            if (!getShiftKeyPressed(e) && KeyCode >= 48 && KeyCode <= 57){          // 숫자코드
         		// 모든경우에 OK
         	} else 
            if (!getShiftKeyPressed(e) && KeyCode >= 96 && KeyCode <= 105){         // 숫자코드
             		// 모든경우에 OK
         	} else 
            if (KeyCode == 8){         // 백스페이스 코드
             		// 모든경우에 OK
         	} else 
         	if (wCellType == CELLTYPE_FLOAT) {
         	    if (KeyCode == 45){  // 45 : "-"
    	     	    // 빈양식인 경우
    	     	    if (("" + em.value).length == 0){
    	     	    	// 통과
    	     	    } else {
    		     	    var selLength = getCaretLength(em);
    		     	    var startPos = getCaretPosition(em);
    		     	    var value = ("" + em.value);
    		     	    
    	     	    	// 전체 선택 상태에서 "-" 친경우 ok
    	     	    	if (value.length == selLength){
    		     	    	// 통과
    	     	    	} 
    		     	    // 캐럿이 첫번째 위치에 있고, 뒤에가 숫자인 경우
    	     	    	else if (startPos == 0 &&  value.length != 0 && value.substring(0,1) >= "0" && value.substring(0,1) <= "9"){
    		     	    	// 통과
    	     	    	} else {
    	     	    		stopEvent(e);
    	     	       		return true;
    	     	    	}
    	     	    }
         	    	
         	    } else if (KeyCode == 190 || KeyCode == 110){  // 46 : "."
         	    	if (("" + em.value).length == 0){
         	    		stopEvent(e);
         	       		return true;
         	    	}
         	    } else {
         	    	stopEvent(e);
         	   		return true;
         	    }
         	}
        }

        return true;                                                                           
    };
    
    function xCell_onBlur(e){

    	if (!e) e = window.event;
    	var em = getSrcElement(e);
    	
    	call_xcell_onBlur(em);

        stopEvent(e);
        return;
    };    
    
    function call_xcell_onBlur(em){

		var wCSheet = searchSheet(em); 
        if (wCSheet == null)  return false;
        var wSheet = wCSheet.actionObject;

        var wRowNum = parseInt(1 * em.getAttribute("row"));
        if (wRowNum == 0) return;
        
        var wColNum = parseInt(1 * em.getAttribute("col"));
        if (wColNum == 0) return;
        
        var wCell   = wSheet.dataTable.tBodies[0].rows[wRowNum].cells[wColNum];
        
        var stepNum = (wSheet instanceof CrossSheetH ? wSheet.stepNumOf(wColNum) : wSheet.stepNumOf(wRowNum));
        var wCellType = wSheet.dataObject.steps[stepNum].cellType; 

        var oldValue = wCell.getAttribute("value");
        var wValue = em.value;
        
        if ("" + oldValue != "" + wValue){
        	
        	wCell.setAttribute("value", wValue);
        	
         	if (wCellType == CELLTYPE_FLOAT) {
            	var decemal = parseInt(1 * wCell.getAttribute("decimal"));
                wCell.innerText = mask(wValue, "###,###,###,###,##0" + (decemal > 0 ? ".0000000000".substring(0, decemal + 1) : ""));
                wCell.align     = "right";
            } else { 
                wCell.innerText = wValue;
                wCell.align     = "left";
            }
        	
         	// 집계값갱신
         	// 1: 현재 칼럼의 각셀 갱신
         	for (var wColNum1 = wSheet.headCols; wColNum1 <  wSheet.headCols + wSheet.maxCols; wColNum1++){
                var wCell1   = wSheet.dataTable.tBodies[0].rows[wRowNum].cells[wColNum1];
                var wFormula = wCell1.getAttribute("formula") || "";
                if (wFormula.length > 0){
                	wSheet.calculateCell(wCell1, wFormula);
                }
         	}
         	for (var wRowNum1 = wSheet.headRows; wRowNum1 <  wSheet.headRows + wSheet.maxRows; wRowNum1++){
                var wCell1   = wSheet.dataTable.tBodies[0].rows[wRowNum1].cells[wColNum];
                var wFormula = wCell1.getAttribute("formula") || "";
                if (wFormula.length > 0){
                	wSheet.calculateCell(wCell1, wFormula);
                }
         	}
         	
         	
         	// 2: 현재 줄의 각셀 갱신
         	
    		if (wSheet.hasChangeEvent) {
                var wResult = wSheet.fncChangeEvent(wRowNum, wColNum, wValue, oldValue, wCell);
            } 
        } 

        wCSheet._hideCellEdit();
        
        return;
    };
    
    
    
    function sheet_DisplayWheel(e) {
    	e = window.event || e;
    	var em = getSrcElement(e);
    	var delta = 0;
    	
    	// Opera는 detail, 기타 브라우저는 wheelDelta
    	if (event.wheelDelta) {
    		delta = event.wheelDelta / 120; 
    	} else if (event.detail) {
    		delta = -event.detail;
    	}
    	if (delta){
            var wSheet = searchSheet(em);
            var scrollPanel = wSheet.tagObject.getElementsByTagName("DIV")[0];
            scrollPanel.scrollTop = scrollPanel.scrollTop - delta * 15;
    		
    	}
    	
    	stopEvent(e);

    	return;
    };/***************************************************************************
    데이터시트 콘트롤의 정의 부분이다
    인수로는 콘트롤 명과 , 테그객체를 갖는다
***************************************************************************/
    function CrossSheetV(controlId, controlName, tagObject) //constructor 
    {
        // 시트 외형에 관한 설정
        this.controlId = controlId;   
        this.id   = this.controlId;
        this.controlName = controlName;   
        this.tagObject = tagObject;
        this.enabled = true;
        
        this.headRows = 1;
        this.headCols = 1;
        this.frozenCols = 0;
        this.frozenRows = 0;
        this.maxCols = 0;  // MaxCols와 MaxRows엔 비고난이 들어 가지 않는 숫자다
        this.maxRows = 0;
        this.remarkCols = 0;
        this.remarkRows = 0;
        this.chartInfo = "";
        
        var wTables = this.tagObject.getElementsByTagName("table");
        this.dataTable    = wTables[DATA_TABLE];
        this.colHeadTable = wTables[COL_TABLE];
        this.rowHeadTable = wTables[ROW_TABLE];
        this.fixCellTable = wTables[FIX_TABLE];
        
        // 데이터처리에 관한 설정 
        this.headDatas = [];          // HeadData구조체의 배열이다
        this.headDatasSorted = null;    // HeadData구조체의 정렬된 배열이다
        this.stepHeadDatas= [null];   // 스텝갯수만큼 위 HeadDatas배열이 들어간다
        this.stepstartNums= [null];   // 스텝갯수만큼 위 시작 줄,열번호가 들어간다
        this.stepRCs      = [null];   // 스텝별로 로우데이터의 RC정보가 들어간다
        
        this.printHead = "";  // 인쇄시 페이지 헤더로 들어갈 내용
        this.printFoot = "";  // 인쇄시 페이지 푸터로 들어갈 내용
        this.needRemarks = false;
        
        // 참고: 최상위 레벨이 1레벨이고 하위 데이터가 붙을수록 5레벨까지 
        //       계속 레벨번호가 올라간다
        //       Value, Caption데이터는 상위레벨부터 채워진다
        //       즉 0번값이 최상위이다 (쿼리 필드 순서)
        
        this.colLevelCnt = 0; // 칼럼헤더의 레벨계층숫자
        this.rowLevelCnt = 0; // 로우헤더의 레벨계층숫자
        
        // 서버에서 받은 채우기 객체
        this.dataObject = null;

        if (tagObject != undefined){
            tagObject.setAttribute("tabIndex", "-1");
            
            //setEventHandler(tagObject, "mouseup", crosssheetv_onmouseup);
//            setEventHandler(this.dataTable, "mouseup", crosssheet_onmouseup);	//2019-03-28 jaeik 텍스트박스 입력 막음
        }

        this.hasClickEvent = false; this.fncClickEvent = null;
        this.hasChangeEvent = false; this.fncChangeEvent = null;
        if (this.controlId.length > 0) {
        	try {
            	if (eval(this.controlId + "_onclick")) this.hasClickEvent = true;
            } catch(e){}
            if (this.hasClickEvent){
        	    eval("this.fncClickEvent = function(rowNum, colNum){ return " + this.controlId + "_onclick(rowNum, colNum);}");
            }
        	try {
            	if (eval(this.controlId + "_onchange")) this.hasChangeEvent = true;
            } catch(e){}
            if (this.hasChangeEvent){
        	    eval("this.fncChangeEvent = function(rowNum, colNum, value, oldValue, cell){ return " + this.controlId + "_onchange(rowNum, colNum, value, oldValue, cell);}");
            }
        }
    
    };
    
    /* -----------------------------------------------------------------------
        셀과 관련된 기초동작 
     -------------------------------------------------------------------------*/
    CrossSheetV.prototype.getText = function(row, col){
        // functionname : [CrossSheetV.getText]

    	var wCell = this.dataTable.tBodies[0].rows[row + this.headRows - 1].cells[col + this.headCols - 1];
        var wValue = wCell.getAttribute("value");
        
    	return wValue;
    };

    // MaxRows, MaxCols를 0으로 세팅한다
    CrossSheetV.prototype.clear = function(){
        // functionname : [CrossSheetV.clear]

        var wTables = this.tagObject.getElementsByTagName("table");
        for (var wTableNum = 0; wTableNum < wTables.length; wTableNum++){
            var wTable = wTables[wTableNum];
            for (var wRow = wTable.tBodies[0].rows.length - 1; wRow > 0; wRow--){
                    wTable.deleteRow(wRow);
            }
            
            var wRow = wTable.tBodies[0].rows[0];
            wRow.style.display = "";
            for (var wColNum = wRow.cells.length - 1; wColNum > 0; wColNum--){
                    wRow.deleteCell(wColNum);
            }
            wRow.cells[0].innerText = " ";
        }

        // 시트 외형에 관한 설정 
        this.headRows = 1;
        this.headCols = 1;
        this.frozenCols = 0;
        this.frozenRows = 0;
        this.maxCols = 0;  // MaxCols와 MaxRows엔 비고난이 들어 가지 않는 숫자다
        this.maxRows = 0;
        this.remarkCols = 0;
        this.remarkRows = 0;
        
        // 데이터처리에 관한 설정
        this.headDatas.clear();       this.headDatas = [];          // HeadData구조체의 배열이다
        this.stepHeadDatas.clear();   this.stepHeadDatas= [null];   // 스텝갯수만큼 위 HeadDatas배열이 들어간다
        this.stepstartNums.clear();   this.stepstartNums= [null];   // 스텝갯수만큼 위 시작 줄,열번호가 들어간다
        this.stepRCs.clear();         this.stepRCs      = [null];   // 스텝별로 로우데이터의 RC정보가 들어간다
        
        this.printHead = "";  // 인쇄시 페이지 헤더로 들어갈 내용
        this.printFoot = "";  // 인쇄시 페이지 푸터로 들어갈 내용
        this.needRemarks = false;
        
        this.colLevelCnt = 0; // 칼럼헤더의 레벨계층숫자
        this.rowLevelCnt = 0; // 로우헤더의 레벨계층숫자

        return;
    };

    CrossSheetV.prototype.getTag = function(row, col){
        // functionname : [CrossSheetV.getTag]

    	if (row + this.headRows - 1 > this.maxRows || 
    	    col + this.headCols - 1 > this.maxCols) return "";
    	    
    	return this.dataTable.tBodies[0].rows[row + this.headRows - 1].cells[col + this.headCols - 1].getAttribute("tag");
    };

    /* -------------------------------------------------------------------------
       서버로 부터 받은 데이터를 곧바로 헤드오 뿌릴 수 있도록 데이터를 만든다.
       인수 : 
           heads : 서버로 부터 받은 데이터 2차원배열[레코드번호][필드번호]
           sumPosition : 합계를 앞에 표시할 것인지 구분 ("AFTER", "BEFORE")
           sums : 합계갑 표시캡션들의 1차원 배열["합계","평균","최대",...]
       결과 : 
           this.headDatas : 결과값이 들어갈 1차원배열 (HeadData 구조체가 들어감) 
     ------------------------------------------------------------------------ */
    CrossSheetV.prototype.makeHeads = function(heads, sumPosition, sums, levelCnt, hidden, headDatas){
        // functionname : [CrossSheetV.makeHeads]

        var wIndex = -1;
        
        var AC = (sumPosition == "AFTER" ? "C" : "A");
        for (var i = 0; i < heads.length; i++){
            var wHeadData = headDatas[++wIndex] = new HeadData();
            var wColData = heads[i];
            
            wHeadData.values   = wColData.slice(0, 5);
            wHeadData.captions = wColData.slice(5, 10);
            
            var wSortKey = "";
            for (var k = 1; k <= levelCnt; k++){
                wSortKey += "B" + mask(i, "0000");
            }
            wHeadData.sortKey = wSortKey;
            
            wHeadData.childInfo = "NONE";
            wHeadData.Level = 1;
            
            var wNextData = (i == heads.length - 1 ? [null,null,null,null,null] : heads[i + 1]);
            
            // 1레벨의 합계부터 5레벨의 합계까지 루핑 
            for (var wLevel = 1; wLevel <= levelCnt; wLevel++){
                var wLevelIndex = wLevel - 1;
                // 마지막 데이터는 무조건 true이다(전체합계를 찍기위해서)
                var wChecked = (i == heads.length - 1); 
                // 상위 요소의 변화를 체크한다
                for (var j = 0; j < wLevelIndex;j++)
                    wChecked = wChecked || (wColData[j] != wNextData[j]);
                
                if (wChecked && sums[wLevelIndex] != null && sums[wLevelIndex] != getText("message_crosssheetv_009", "표시안함")
                		 								  && sums[wLevelIndex] != getText("message_crosssheetv_015", "(None)")){
                    var wNewHeadData = headDatas[++wIndex] = new HeadData();
                    for (var k = 0; k < wLevelIndex; k++){
                        wNewHeadData.values[k]   = wHeadData.values[k];
                        wNewHeadData.captions[k] = wHeadData.captions[k];
                    }
                    wNewHeadData.captions[wLevelIndex] = sums[wLevelIndex]; // "합계","소계"
                    wNewHeadData.functionName = sums[wLevelIndex];
                    wNewHeadData.Level = levelCnt - wLevel + 1 + 1;
                    
                    wNewHeadData.hideChild = hidden[wLevelIndex];
                    
                    var wSortKey = "";
                    for (var k = 1; k <= levelCnt; k++){
                        if (k >= wLevel){
                            wSortKey += AC  + mask(i, "0000");
                        } else {
                            wSortKey += "B" + mask(i, "0000");
                        }
                        if (k > wLevel){
                            wSortKey += AC  + mask(i, "0000");
                            wNewHeadData.merged[k - 1] = "X"; // 셀합치기 동작에 필요해서 기억해 놓음
                            wNewHeadData.captions[k - 1] = wNewHeadData.captions[wLevelIndex];
                        }
                    }
                    wNewHeadData.sortKey = wSortKey;
                    
                }
            }
        }

        headDatas.sort(sortfnHead);
        
        for (var i = 0; i < headDatas.length; i++){
            if (headDatas[i].childInfo == "NONE")
                this.setChildInfo(headDatas[i], headDatas, levelCnt, i + 1);
            // 여기서 1을 더한 이유는 sheetCol, SheetRow가 1부터 시작하기 때문이다    
        }
        
        // 더이상 필요없게된 메모리는 지운다
        heads.clear();
        
        return;
    };
    
    CrossSheetV.prototype.setChildInfo = function(headData, headDatas, levelCnt, indexNum){
        // functionname : [CrossSheetV.setChildInfo]

        for (var i = 0; i < headDatas.length; i++){
            if (headDatas[i].childInfo == "NONE") continue;
            var wHeadData = headDatas[i];
            var wChecked = true;
            for (wLevel = 1; wLevel < levelCnt; wLevel++){
                var wLevelIndex = wLevel - 1;
                if (wHeadData.values[wLevelIndex] != "" && 
                   (headData.values[wLevelIndex] != wHeadData.values[wLevelIndex])){
                   wChecked = false;
                   break;
                }
            }
            
            if (!wChecked) continue;
            
            wHeadData.childInfo += (wHeadData.childInfo.length > 0 ? "," : "") + indexNum;
        }
        return;
    };

    // 데이터를 넣을 빈셀과 빈 헤더셀들을 만든다. 셀들의 Span은 아직 없다.
    CrossSheetV.prototype.makeBlankCells = function(){
        // functionname : [CrossSheetV.makeBlankCells]

        // MaxCols와 MaxRows를 계산
        this.maxCols = this.headDatas.length; 
        this.maxRows = 0;
        for (var wStepNum = 1; wStepNum < this.stepHeadDatas.length; wStepNum++){
            this.maxRows += this.stepHeadDatas[wStepNum].length;
        }

        // this.headCols와 this.headRows를 계산
    	var wTables = this.tagObject.getElementsByTagName("table");
        var wArrStrCellLen = (this.tagObject.getAttribute("cellSize") || "").split(";");
        for (var i = 0; i <= 3;i++){
            var wTable = wTables[i];
            var wTableRow = null;var wCell = null;
    	
            var ColsTo = this.headCols + (i == ROW_TABLE || i == FIX_TABLE ? this.frozenCols : this.maxCols + this.remarkCols);
            var RowsTo = this.headRows + (i == COL_TABLE || i == FIX_TABLE ? this.frozenRows : this.maxRows + this.remarkRows);
            
            for (var wRow = 0; wRow < RowsTo; wRow++){
                // 줄을 선택한다, 없으면 만든후 선택한다
                if (wTable.tBodies[0].rows.length <= wRow) {
                	wTableRow = wTable.insertRow(wRow);
                } else {
                	wTableRow = wTable.tBodies[0].rows[wRow];
                }
                wTableRow.style.height = 19 + "px";
                
                for (var wCol = 0; wCol < ColsTo; wCol++){
                    if (wTableRow.cells.length <= wCol)  {
                    	wCell = wTableRow.insertCell(wCol);
                    } else {
                    	wCell = wTableRow.cells[wCol];
                    }
                         
                    wCell.innerText = " ";
                    if (i == DATA_TABLE) wCell.setAttribute("value", "");
                    wCell.vAlign = "middle";
//                    wCell.vAlign = "baseline";
                    
                    // 헤더셀들은 셀사이즈를 주어 Span에 대비한다
                    if (wRow < this.headRows) {
                        wCell.style.width = 50 + "px";
                        wCell.className = "HeadLevel" + (wRow + 1);
                        wCell.innerHTML = "&nbsp;";
                        wArrStrCellLen[wRow] = "50" + "px";
                    } else if (wCol < this.headCols) {
                        wCell.className = "HeadLevel" + (wCol + 1);
                        wCell.innerHTML = "&nbsp;";
                    }
                }
            }
                    
            wTable.style.width = (ColsTo * (50 + GAP_BETWEEN_CELL) + GAP_BETWEEN_CELL) + "px";
            
            if (i == DATA_TABLE)
                this.tagObject.setAttribute("cellSize", wArrStrCellLen.join(";"));    
                
        }
        return;
    };

    CrossSheetV.prototype.makeColTitle = function(){
        // functionname : [CrossSheetV.makeColTitle]
        
        var wArrHeadDatas = this.headDatas;
    
    	var dataTableBody = this.dataTable.tBodies[0];
    	var colHeadTableBody = this.colHeadTable.tBodies[0];
    	var dataTableRow = null;
    	var colHeadTableRow = null;
    	var wCell = null;

    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wColNum = i + this.headCols;
    	    var wHeadData = wArrHeadDatas[i];
    		
    	    for (var j = 0; j < this.headRows; j++){
    	        var wRowNum = j;
    		
                var wCell = dataTableBody.rows[wRowNum].cells[wColNum];
                wCell.innerText = wHeadData.captions[j];
                wCell.setAttribute("value", wHeadData.values[j]);
    	        
                var wCell = colHeadTableBody.rows[wRowNum].cells[wColNum];
                wCell.innerText = wHeadData.captions[j];
                wCell.setAttribute("NeedDel", (wRowNum > 0 && wHeadData.values[j] == wHeadData.values[j - 1] && wHeadData.captions[j] == wHeadData.captions[j - 1] ? "true" : "false"));
    	    }
    	    
    	    for (var wRowNum = this.headRows; wRowNum < this.headRows + this.maxRows; wRowNum++){
    	        if (wHeadData.Level > 1)
    	            dataTableBody.rows[wRowNum].cells[wColNum].className = "CSumBack" + wHeadData.Level;
    	    }
    	    
    	}
    	
    	/**
		 * 2019-06-19 jaeik 로우타이틀 채우기
		 */
    	var rowHeadTableBody = this.rowHeadTable.tBodies[0];
        var fixCellTableBody = this.fixCellTable.tBodies[0];
    	var rowTitle = this.dataObject.head.rowTitle;
    	if (rowTitle != null && rowTitle.length > 0) {
    		for (var i = 0; i < rowTitle.length; i++){
        	    var wRowNum = i;
        	    var wHeadData = rowTitle[rowTitle.length-i-1];
        	    var wHeadData1 = (rowTitle[rowTitle.length-i] == undefined ? "" : rowTitle[rowTitle.length-i]);
        	    dataTableRow = dataTableBody.rows[wRowNum];
        	    rowHeadTableRow = rowHeadTableBody.rows[wRowNum];
        	    colHeadTableRow = colHeadTableBody.rows[wRowNum];
        	    fixCellTableRow = fixCellTableBody.rows[wRowNum];
        	    
        	    for (var j = 0; j < this.headCols; j++){
        	        var wColNum = j;
        		
                    wCell = dataTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("value", wHeadData[j]);
        	        
                    wCell = rowHeadTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("NeedDel", (wColNum > 0 && 
                    		(wHeadData[j] == wHeadData[j - 1]) &&
                    		(wHeadData[j - 1] != (wHeadData1 != "" ? wHeadData1[j - 1] : "")) ? "true" : "false"));
                    
                    wCell = colHeadTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("NeedDel", (wColNum > 0 && 
                    		(wHeadData[j] == wHeadData[j - 1]) &&
                    		(wHeadData[j - 1] != (wHeadData1 != "" ? wHeadData1[j - 1] : "")) ? "true" : "false"));
                    
                    wCell = fixCellTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("NeedDel", (wColNum > 0 && 
                    		(wHeadData[j] == wHeadData[j - 1]) &&
                    		(wHeadData[j - 1] != (wHeadData1 != "" ? wHeadData1[j - 1] : "")) ? "true" : "false"));
        	    }
        	}
    	}
    	
        return;
    };

    CrossSheetV.prototype.makeRowTitles = function(stepNum, decimal, startNum){
        // functionname : [CrossSheetV.makeRowTitles]

        var wStartNum = startNum[0];
        var wArrHeadDatas = this.stepHeadDatas[stepNum];
    	var wRCs = "";

    	var dataTableBody = this.dataTable.tBodies[0];
    	var rowHeadTableBody = this.rowHeadTable.tBodies[0];
    	var wCell = null;
    	
    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wRowNum = wStartNum + i;
    	    var wSheetRowNum = wRowNum - this.headRows + 1; 
    	    var wHeadData = wArrHeadDatas[i];
        
    	    for (j = 0; j < this.headCols; j++){
    	        var wColNum = j;
        
                wCell = dataTableBody.rows[wRowNum].cells[wColNum];
                if (typeof wCell == "undefined") continue;
                wCell.innerText = wHeadData.captions[j];
                wCell.setAttribute("value", wHeadData.values[j]);
                wCell.setAttribute("NeedDel", (wColNum > 0 && wHeadData.values[j] == wHeadData.values[j - 1] && wHeadData.captions[j] == wHeadData.captions[j - 1] ? "true" : "false"));
    	        
                wCell = rowHeadTableBody.rows[wRowNum].cells[wColNum];
                wCell.innerText = wHeadData.captions[j];
                wCell.setAttribute("NeedDel", (wColNum > 0 && wHeadData.values[j] == wHeadData.values[j - 1] && wHeadData.captions[j] == wHeadData.captions[j - 1] ? "true" : "false"));
    	    }

    	    for (var wColNum = this.headCols; wColNum < this.maxCols + this.headCols; wColNum++){
    	        wCell = dataTableBody.rows[wRowNum].cells[wColNum];
    	        wCell.setAttribute("decimal", decimal);
    	        if (wHeadData.Level > 1)
    	            wCell.className = "CSumBack" + wHeadData.Level + " CSumLineR" + wLevel;
    	    }
        
            if (wHeadData.childInfo == "NONE") {
                if (wRCs.length > 0) wRCs += ",";
                wRCs += "CELL(\"R" + wRowNum + "CXX\")";
            }

    	    wRowNum++;
    	}

    	this.stepRCs[stepNum] = wRCs;
    	startNum[0] = wRowNum;
        return;
    };

    CrossSheetV.prototype.fillRowData = function(stepNum, stepObject){
        // functionname : [CrossSheetV.fillRowData]

        var wStartNum = this.stepstartNums[stepNum];
        var wFieldPoint = stepObject.fieldPoint;
        var wColLevelCnt = this.colLevelCnt;
        var wRowLevelCnt = stepObject.levelCnt;
        
        var keyCount     = 0;
        var headKeyCount = 0;
        var bodyKeyCount  = 0;

        var wArrDatas = stepObject.datas;
	    // key count 계산
        if (wArrDatas.length >= 1){
            for (var i = 1; wArrDatas[0].length;i++) {
            	if (wArrDatas[0][i] == null) break; 
            	keyCount++;
            }
        }
        
        // 첫데이터로 셀타입을 판단한다 
        if (stepObject.datas.length == 0){
    		stepObject.cellType = CELLTYPE_FLOAT;

        } else if (stepObject.datas[0].length == 0){
    		stepObject.cellType = CELLTYPE_FLOAT;
    		
    	} else if (("" + stepObject.datas[0][0]).isNum()){
            stepObject.cellType = CELLTYPE_FLOAT;
        } else {
            stepObject.cellType = CELLTYPE_EDIT;
        }

	    // 시트 해더 데이터를 정렬한다 
	    var startKeyPos = wColLevelCnt - wFieldPoint;
        if (this.headDatasSorted == null){
	    	this.headDatasSorted = sortedArrayWithOrderTag(this.headDatas, startKeyPos, wColLevelCnt, wRowLevelCnt);
	    }
        var wArrHeadDatas1 = this.headDatasSorted;
        
        startKeyPos = wRowLevelCnt - (keyCount - wFieldPoint);
	    var wArrHeadDatas2 = stepObject.headDatasSorted = sortedArrayWithOrderTag(this.stepHeadDatas[stepNum], startKeyPos, wRowLevelCnt, wStartNum);
	    
        headKeyCount = wFieldPoint;
        bodyKeyCount = keyCount - wFieldPoint;
        
        // 내부변수 선언 
        var wData = null; var wValue = null; var wWorkKey = null;
        var wData1 = null; var wCompKey = null;
        var wColNum = -1; var wRowNum = -1; 
        
        var wColArrData = null; var wRowArrData = null; 
        var dataTableBody = this.dataTable.tBodies[0];
    
        for (var i = 0; i < wArrDatas.length; i++){
            wData = wArrDatas[i];
            wValue = wData[0];

            // 칼럼번호 찾기 
            wWorkKey = wData.slice(1, wFieldPoint + 1); 
            wColArrData = searchArray(wArrHeadDatas1, wWorkKey);
            wColNum = (wColArrData != null ? wColArrData[wColArrData.length - 1] : -1);
            
            // 줄번호 찾기
            if (!stepObject.isSQL){
                wRowNum = wStartNum;
            } else {
                wWorkKey = wData.slice(headKeyCount + 1, keyCount + 1); 
                wRowArrData = searchArray(wArrHeadDatas2, wWorkKey);
                wRowNum = (wRowArrData != null ? wRowArrData[wRowArrData.length - 1] : -1);
            }
            
            	
            if (wRowNum >= 0 && wColNum >= 0){
                var wCell = dataTableBody.rows[wRowNum].cells[wColNum];
                wCell.setAttribute("value", wValue);
                if (("" + wValue).isNum())  { 
                	var decemal = parseInt(1 * wCell.getAttribute("decimal"));
                    wCell.innerText = mask(wValue, "###,###,###,###,##0" + (decemal > 0 ? ".0000000000".substring(0, decemal + 1) : ""));
                    wCell.align     = "right";
                } else { 
                    wCell.innerText = wValue;
                    wCell.align     = "left";
                }
            }
        }

        if (wWorkKey) wWorkKey.clear();
//        if (wArrHeadDatas2) wArrHeadDatas2.clear(); 
//        wArrHeadDatas2 = null;
        
        return;
    };

    CrossSheetV.prototype.makeRowFormula = function(stepNum, stepObject){
        // functionname : [CrossSheetV.makeRowFormula]
    	
        var dataTableRows = this.dataTable.tBodies[0].rows;
        
        // 산식중 괄호를 찾아낸다
        var wFormula = stepObject.datas[0][0];
        while (wFormula.indexOf("( ") >= 0) wFormula.replaceWord("( ","(");
        while (wFormula.indexOf(" )") >= 0) wFormula.replaceWord(" )",")");
        
        // 괄호의 내용을 RC타입의 ","문자 연결열로 변환한다.
        // R은 변화하고 C는 고정이다 RnCXX로 
        for (var wStepNum = 1; wStepNum < this.stepRCs.length; wStepNum++){
           while (wFormula.indexOf("(" + wStepNum + ")") >= 0) 
               wFormula = wFormula.replaceWord("(" + wStepNum + ")","(" + this.stepRCs[wStepNum] + ")");
        }
        
        // 칼럼별로 루핑하며 산식을 넣는다(합계셀은 제외)
        // RnCXX의 XX를 칼럼번호로 변환
        var wStartNum = this.stepstartNums[stepNum];

        var wRowLevelCnt = stepObject.levelCnt;
        for (var i = 0; i < this.headDatas.length; i++){
            if (this.headDatas[i].childInfo == "NONE"){
                var wHardRowNum = wStartNum;
                var wHardColNum = this.headCols + i;
                var wColNum = i + 1;
                
                var wCell = dataTableRows[wHardRowNum].cells[wHardColNum];
                wCell.setAttribute("formula", wFormula.replaceWord("XX" , wHardColNum + ""));
                // this.addToFormulaRefs(wRowNum, wColNum, wCell.formula);
            }
        }
        return;
    };


    CrossSheetV.prototype.makeColSums = function(){
        // functionname : [CrossSheetV.makeColSums]

        var wArrHeadDatas = this.headDatas;
        var dataTableRows = this.dataTable.tBodies[0].rows;
    	
    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wColNum = i + this.headCols;
    	    var wHeadData = wArrHeadDatas[i];
            
            // 산식을 먼저 만든다. 
            if (wHeadData.childInfo != "NONE"){
                var wArrColNums = wHeadData.childInfo.split(",");
                var wFormula = "";
                var wLastRC  = "";
                for (var j = 0; j < wArrColNums.length; j++){
                    if (j > 0) wFormula += ",";
                    var wwColNum = parseInt(wArrColNums[j]) + this.headCols - 1;

                    wFormula += "CELL(\"RXXC" + wwColNum + "\")";
                    wLastRC   = "CELL(\"RXXC" + wwColNum + "\")";
                }
                                
                if (wHeadData.functionName == getText("message_crosssheetv_010", "합계") || wHeadData.functionName == getText("message_crosssheetv_016", "Sum")){
                    wFormula = "SUM(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_011", "평균") || wHeadData.functionName == getText("message_crosssheetv_017", "Average")){
                    wFormula = "AVG(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_012", "최대값") || wHeadData.functionName == getText("message_crosssheetv_018", "Max Value")){
                    wFormula = "MAX(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_013", "최소값") || wHeadData.functionName == getText("message_crosssheetv_019", "Min Value")){
                    wFormula = "MIN(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_014", "최종값") || wHeadData.functionName == getText("message_crosssheetv_020", "Last value")){
                    wFormula = wLastRC;
                }
                
                // 셀에 산식값 
                for (var j = 0; j < this.maxRows; j++){
                    var wRowNum = this.headRows + j;
                    var wSheetRowNum = j + 1;
                    var wCell = dataTableRows[wRowNum].cells[wColNum];
                    wCell.setAttribute("formula", wFormula.replaceWord("XX" , wRowNum + ""));
                    
                    // this.addToFormulaRefs(wRowNum, wColNum, wCell.formula);
                }
            }
            
    	}

        return;
    };
    
    CrossSheetV.prototype.makeStepSums = function(stepNum){
        // functionname : [CrossSheetV.makeStepSums]

        var wStartNum = this.stepstartNums[stepNum];
        var wArrHeadDatas = this.stepHeadDatas[stepNum];
    	var dataTableRows = this.dataTable.tBodies[0].rows;

    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wRowNum = wStartNum + i;
    	    var wHeadData = wArrHeadDatas[i];
    	    
            // 산식을 먼저 만든다. 
            if (wHeadData.childInfo != "NONE"){
                var wArrRowNums = wHeadData.childInfo.split(",");
    	    
                var wFormula = "";
                var wLastRC  = "";
                for (var j = 0; j < wArrRowNums.length; j++){
                    if (j > 0) wFormula += ",";
                    wFormula += "CELL(\"R" + (wStartNum + parseInt(wArrRowNums[j], 10) - 1) + "CXX\")";
                    wLastRC   = "CELL(\"R" + (wStartNum + parseInt(wArrRowNums[j], 10) - 1) + "CXX\")";
                }
                
                if (wHeadData.functionName == getText("message_crosssheetv_010", "합계") || wHeadData.functionName == getText("message_crosssheetv_016", "Sum")){
                    wFormula = "SUM(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_011", "평균") || wHeadData.functionName == getText("message_crosssheetv_017", "Average")){
                    wFormula = "AVG(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_012", "최대값") || wHeadData.functionName == getText("message_crosssheetv_018", "Max Value")){
                    wFormula = "MAX(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_013", "최소값") || wHeadData.functionName == getText("message_crosssheetv_019", "Min Value")){
                    wFormula = "MIN(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheetv_014", "최종값") || wHeadData.functionName == getText("message_crosssheetv_020", "Last value")){
                    wFormula = wLastRC;
                }
                
                // 셀에 산식값 
                for (var j = 0; j < this.maxCols; j++){
                    var wColNum = this.headCols + j;
                    var wSheetColNum = j + 1;
                    var wCell = dataTableRows[wRowNum].cells[wColNum];
                    wCell.setAttribute("formula", wFormula.replaceWord("XX" , wColNum + ""));
                    // this.addToFormulaRefs(wRowNum, wColNum, wCell.formula);
                }
            }
            
    	}

        return;
    };
    
    CrossSheetV.prototype.makeStepRemarks = function(stepNum, remark){
        // functionname : [CrossSheetV.makeStepRemarks]

        if (this.remarkCols == 0) return;
        if ((remark || "").trim().length == 0) return;
        
        var dataTableRows = this.dataTable.tBodies[0].rows;
        
        var wStartNum = this.stepstartNums[stepNum];
        var wEndNum = (stepNum < this.stepstartNums.length - 1 ? this.stepstartNums[stepNum + 1] - 1: this.headRows + this.maxRows - 1);
        
    	var wDataTable = this.dataTable;    
    	for (var i = wStartNum; i <= wEndNum; i++){
            var wRowNum = i;
            var wColNum = this.headCols + this.maxCols + this.remarkCols - 1;
    	    
            if (i == wEndNum)
            	dataTableRows[wRowNum].cells[wColNum].innerText = remark;
    	}
        return;
    };

    CrossSheetV.prototype.adjustColWidth = function(){
        // functionname : [CrossSheetV.adjustColWidth]

    	var dataTableRows = this.dataTable.tBodies[0].rows;
    	var colTableRows = this.colHeadTable.tBodies[0].rows;
    	var rowTableRows = this.rowHeadTable.tBodies[0].rows;
    	var fixTableRows = this.fixCellTable.tBodies[0].rows;
    	
    	//for (var wColNum = this.headCols; wColNum < this.headCols + this.maxCols + this.remarkCols; wColNum++){
    	for (var wColNum = 0; wColNum < this.headCols + this.maxCols + this.remarkCols; wColNum++){
        	var wMaxLen = 50;
        	//for (var wRowNum = this.headRows; wRowNum < this.headRows + this.maxRows; wRowNum++){
//        	for (var wRowNum = 0; wRowNum < this.headRows + this.maxRows; wRowNum++){
//     		for (var wRowNum = 0; wRowNum < this.headRows + this.maxRows + this.remarkRows; wRowNum++){
        	for (var wRowNum = (this.headRows-1); wRowNum < this.headRows + this.maxRows + this.remarkRows; wRowNum++){
//                var wText = dataTableRows[wRowNum].cells[wColNum].innerText || "0";
//                var wByteLength = wText.bytes();
//                var WIDTH_PLUS = ((/[A-Z]/).test(wText) ? 1 : 0);	// 문자에 대문자가 있는 경우 폰트를 +1 해준다
//        	    wMaxLen = (wMaxLen < wByteLength * (FONT_WIDTH + WIDTH_PLUS) ? wByteLength * (FONT_WIDTH + WIDTH_PLUS) : wMaxLen);
       			var wTextPixel = this.getTextLengthInPixel(dataTableRows[wRowNum].cells[wColNum]);
       			wMaxLen = (wMaxLen < wTextPixel ? wTextPixel : wMaxLen);
    	    } 
        	
//        	wMaxLen += 10;	//2019-03-28 jaeik 좌우padding 사이즈 만큼 늘려줌
        	wMaxLen += 20;	//2019-12-03 jaeik 좌우padding 사이즈 만큼 늘려줌
    	    
            // 헤드 칼럼들만의 사이즈를 조정한다
        	for (var wRowNum = 0; wRowNum < this.headRows; wRowNum++){
        		dataTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
        		colTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
        		dataTableRows[wRowNum].cells[wColNum].style.maxWidth = wMaxLen + "px";
        		colTableRows[wRowNum].cells[wColNum].style.maxWidth = wMaxLen + "px";
                if (wColNum < this.headCols){
                	dataTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                	colTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                	rowTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                	fixTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                }
    	    } 
    	}
    	
    	// 테이블 사이즈 조정
    	this.adjustTableWidth();
    	
        return;
    };
    
    CrossSheetV.prototype.getTextLengthInPixel = function(cell) {
        var myId = 'my_span_ruler';
        var ruler = document.getElementById(myId);
       
        if (!ruler) {
            ruler = document.createElement('span');
            ruler.id = myId;
            // 안보이게
            ruler.setAttribute('style', 'visibility:hidden; white-space:nowrap; position:absolute; left:-9999px; top: -9999px;');
            document.body.appendChild(ruler);
        }
       
        // 폰트 스타일
        ruler.style.font = getComputedStyle(cell).font;
        ruler.innerText = cell.innerText || "0";
       
        return ruler.offsetWidth;
    };
    
    CrossSheetV.prototype.adjustTableWidth= function(){
        // functionname : [CrossSheetV.adjustTableWidth]

    	var wTableWidth = GAP_BETWEEN_CELL;
    	var wTableWidth1 = GAP_BETWEEN_CELL;
    	var wTableWidthString = "";

        var wDataTableBody = this.dataTable.tBodies[0];
        var wMaxColNum = wDataTableBody.rows[0].cells.length;
        for (var wColNum = 0; wColNum < wMaxColNum; wColNum++){
    	    var wWidth = parseIntSize(wDataTableBody.rows[0].cells[wColNum].style.width);
    	    wTableWidth += wWidth + (wWidth == 0 ? 0 : GAP_BETWEEN_CELL);
    	    if (wColNum < this.headCols) 
    	    	wTableWidth1 += wWidth + (wWidth == 0 ? 0 : GAP_BETWEEN_CELL);
    	    wTableWidthString += (wColNum == 0 ? "" : ";") + wWidth;
        }
    
    	this.tagObject.setAttribute("cellSize", wTableWidthString);
        this.dataTable.style.width = wTableWidth + "px";
        this.colHeadTable.style.width = wTableWidth + "px";
        this.rowHeadTable.style.width = wTableWidth1 + "px";
        this.fixCellTable.style.width = wTableWidth1 + "px";
        return;    
    };
    
    CrossSheetV.prototype.setRowTitleMerge = function(tableBody){
    	// functionname : [CrossSheetH.setRowTitleMerge]
    	
    	var wColSpan = 1;
    	for (var wRowNum = 0; wRowNum < this.headRows; wRowNum++){
    	    var wRow = tableBody.rows[wRowNum];
    	    
    	    for (var i = this.headCols-1; i >= 0; i--) {
       	    	var col = wRow.cells[i];
       	    	var wWidthToAdd = 0;
       	    	
       	    	if (col.getAttribute("NeedDel") == "false") {
       	    		wColSpan = 1;
           	    	for (var wColNum = i+1; wColNum < this.headCols; wColNum++) {
               	    	var wCell = wRow.cells[wColNum];
               	    	if (wCell.getAttribute("NeedDel") == "false") break;
            	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
            	        	wWidthToAdd += (parseIntSize(wCell.style.width) + GAP_BETWEEN_CELL);
            	        	wColSpan++;
            	        }
               	    }
       	    	}
           	    
       	    	if (wColSpan > 1) {
       	    		col.colSpan = wColSpan;
           	    	col.style.width = (parseIntSize(col.style.width) + wWidthToAdd) + "px";
       	    	}
       	    }
       	    
           	 for (var wColNum = this.headCols-1; wColNum >= 0; wColNum--) {
        	    	var wCell = wRow.cells[wColNum];
     	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
     	        	wRow.deleteCell(wColNum);
     	        }
    	    }        	    
        }
    };
    
    CrossSheetV.prototype.setColHeadSpan = function(noneCaption){
        // functionname : [CrossSheetV.setColHeadSpan]

        var wArrHeadDatas = this.headDatas;
        var wColHeadTableBody = this.colHeadTable.tBodies[0];

        for (var wLevel = 1; wLevel < this.headRows; wLevel++){
            var wRowNum = wLevel;
            var wColSpan = 1;
            var wWidthToAdd = 0;
            
    	    for (var i = wArrHeadDatas.length - 1; i >= 0; i--){ 
                var wColNum = this.headCols + i;
                var wHeadData  = wArrHeadDatas[i];
                var wHeadData0 = new HeadData(); // 0일때 에러방지
                if (i > 0){
                    wHeadData0 = wArrHeadDatas[i - 1] ; 
                }

                var wChecked = true;
                for (var j = 0; j <= wLevel - 1; j++)
                    wChecked = wChecked && (wHeadData.values[j] == wHeadData0.values[j]);
                
                if (wChecked){
                    wWidthToAdd += parseIntSize(wColHeadTableBody.rows[wRowNum].cells[wColNum].style.width) + GAP_BETWEEN_CELL;
                    wColHeadTableBody.rows[wRowNum].deleteCell(wColNum);
                    wHeadData.merged[wRowNum] = "Y";
                    
                    wColSpan++;
                } else {
                    var wCell = wColHeadTableBody.rows[wRowNum].cells[wColNum];
                    wCell.colSpan = wColSpan;
                    wCell.style.width = (parseIntSize(wCell.style.width) + wWidthToAdd)  + "px";
                    
                    wColSpan = 1;
                    wWidthToAdd = 0;
                    
                    var wRowSpan = 1;
                    for (var j = wRowNum + 1; j <= this.headRows; j++)
                         wRowSpan += (wHeadData.values[j] == "" ? 1 : 0);

                    if (wRowSpan > 1){
                        wCell.rowSpan = wRowSpan;
                    }
                }
            }
        }
        
    	for (var wRowNum = 1; wRowNum <= this.headRows; wRowNum++){
    	    var wRow = wColHeadTableBody.rows[wRowNum];
    	    for (var wColNum = wRow.cells.length - 1; wColNum >= this.headCols; wColNum--){
    	        if (wRow.cells[wColNum].getAttribute("NeedDel") == "true" || wRow.cells[wColNum].innerText == ""){
    	            wRow.deleteCell(wColNum);
    	        }
    	    }
        }
    	
    	/**
       	 * 2019-06-19 jaeik 로우타이틀 colTable,fixedTable 병합처리
       	 */
       	var rowTitle = this.dataObject.head.rowTitle;
    	if (rowTitle != null && rowTitle.length > 0) {
    		this.setRowTitleMerge(wColHeadTableBody);
    		this.setRowTitleMerge(this.fixCellTable.tBodies[0]);    		
    	}
        
        if (this.remarkCols > 0){
            var wColNum = wColHeadTableBody.rows[1].cells.length - 1;
            
            var wCell = wColHeadTableBody.rows[1].cells[wColNum];
            wCell.innerText = getText("message_crosssheetv_021", "비고");
            wCell.rowSpan = this.headRows;
            
            var dataTableBody = this.dataTable.tBodies[0];
            var wColNum2 = dataTableBody.rows[1].cells.length - 1;
            var rows = dataTableBody.rows;
            for (var wRowNum = 0; wRowNum < this.headRows; wRowNum++){
            	rows[wRowNum].cells[wColNum2].innerText = wCell.innerText;
            }
            
            for (var wRowNum = 2; wRowNum <= this.headRows; wRowNum++){
                wColNum = wColHeadTableBody.rows[wRowNum].cells.length - 1;
                wColHeadTableBody.rows[wRowNum].deleteCell(wColNum);
            }
        }        
        
        return;
    };
    
    CrossSheetV.prototype.setRowHeadSpans = function(stepNum, levelCnt, noneCaption, titleBySQL){
        // functionname : [CrossSheetV.setRowHeadSpans]

        var wStartNum = this.stepstartNums[stepNum];
        var wEndNum = (stepNum < this.stepstartNums.length - 1 ? this.stepstartNums[stepNum + 1] - 1: this.headRows + this.maxRows - 1);
	    var wRows = this.rowHeadTable.tBodies[0].rows;
        var wArrHeadDatas = this.stepHeadDatas[stepNum];
        
        var wRowTableBody = this.rowHeadTable.tBodies[0];
        for (var wLevel = levelCnt -1; wLevel >= 1; wLevel--){
            var wColNum = wLevel - 1;
            var wRowSpan = 1;
        
    	    for (var i = wArrHeadDatas.length - 1; i >= 0; i--){ 
                var wRowNum = wStartNum + i;
                var wHeadData  = wArrHeadDatas[i];
                var wRow = wRowTableBody.rows[wRowNum];
                var wCell = wRow.cells[wColNum];
                if (typeof wCell == "undefined") continue;
        
                var wHeadData0 = new HeadData(); // 0일때 에러방지
                if (i > 0){
                    wHeadData0 = wArrHeadDatas[i - 1] ; // 0일때 에러방지
                }
                
                var wChecked = true;
                for (var j = 0; j <= wColNum; j++)
                	wChecked = wChecked && (wHeadData.values[j] == wHeadData0.values[j]) && (wHeadData.captions[j] == wHeadData0.captions[j]);
                
                if (wChecked){
                    wRow.deleteCell(wColNum);
                    wHeadData.merged[wColNum] = "Y";
                    
                    wRowSpan++;

                } else {
                    if (wRowSpan > 1) wCell.rowSpan = wRowSpan;
                    wRowSpan = 1;

                    var wColSpan = 1;
                    for (var j = wColNum + 1; j <= this.headCols - 1; j++){
                        wColSpan += (wHeadData.values[j] == "" ? 1 : 0);
                    }
                    if (wColSpan > 1)  {
                        wCell.colSpan = wColSpan;
                    }
                }
            }
        }
        
        if (!titleBySQL){  // 쿼리에 의하지 않고 인위적으로 타이틀을 만든 경우라면 
            var wRowNum = wStartNum;
    	    var wRow = wRows[wRowNum];
    	    var wColSpan = 1;

    	    for (var wColNum = wRow.cells.length -1 ; wColNum > 0; wColNum--){
    	        var wCell = wRow.cells[wColNum];
    	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
    	            wColSpan++;
    	        }
    	    }
    	    wRow.cells[0].colSpan = wColSpan;
        }
        
        for (var wRowNum = wStartNum; wRowNum <= wEndNum; wRowNum++){
    	    var wRow = wRows[wRowNum];
    	    var wColSpan = 1;
    	    for (var wColNum = wRow.cells.length -1 ; wColNum >= 0; wColNum--){
    	        var wCell = wRow.cells[wColNum];
    	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
    	            wRow.deleteCell(wColNum);wColSpan++;
    	        } else {
    	            if (wColSpan > 1) {
    	                wCell.colSpan = wColSpan;
    	                wColSpan = 1;
    	            }
    	        }
    	    }
        }
//        for (var wRowNum = wStartNum; wRowNum <= wEndNum; wRowNum++){
//    	    var wRow = wRows[wRowNum];
//    	    for (var wColNum = wRow.cells.length -1 ; wColNum >= 0; wColNum--){
//    	        var wCell = wRow.cells[wColNum];
//    	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
//    	            wRow.deleteCell(wColNum);
//    	        }
//    	    }
//        }
        return;
    };

    // 여기서 부터는 열숨기기
    CrossSheetV.prototype.hideChildCols = function(cell, showAction){
        // functionname : [CrossSheetV.hideChildCols]


        var wRowNum = cell.parentNode.rowIndex;
        var wColNum = cell.cellIndex;
        
        var wHeadIndex = this.findHeadIndex(wColNum, wRowNum);
        
        var wArrHeadDatas = this.headDatas;
        var wKeyData = ["","","","",""];
           
        var wHeadData = wArrHeadDatas[wHeadIndex];
        for (var j = 0; j <= pLevelNum; j++){
            wKeyData[j] = wHeadData.values[j];
        } 
        
        for (var wHeadIndex = 0; wHeadIndex < this.headDatas.length; wHeadIndex++){
            if (wArrHeadDatas[wHeadIndex].values[pLevelNum].length == 0) continue;

            var wChecked = true;
            var wHeadDataTo = wArrHeadDatas[wHeadIndex];
            for (var j = 0; j <= pLevelNum; j++){
                wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
            } 

            if (wChecked && showAction == ACTION_HIDE) {
                this.hideCol(wHeadIndex);
            } else if (wChecked && showAction == ACTION_SHOW) {
                this.showCol(wHeadIndex);
            }
        }
        
        // 전체 테이블 크기정보 갱신
    	this.adjustTableWidth();
    };
    
    CrossSheetV.prototype.hideColLevels = function(levelCount, levelNum){
        // functionname : [CrossSheetV.hideColLevels]

        var wArrHeadDatas = this.headDatas;
        var wKeyData = ["","","","",""];

        for (var i = 0; i < this.headDatas.length; i++){
            if (!wArrHeadDatas[i].hideChild) continue;
            
            var wHeadData = wArrHeadDatas[i];
            for (var j = 0; j < levelNum; j++){
                wKeyData[j] = wHeadData.values[j];
            } 
            
            for (var wHeadIndex = 0; wHeadIndex < this.headDatas.length; wHeadIndex++){
                if (wArrHeadDatas[wHeadIndex].values[levelNum].length == 0) continue;

                var wChecked = true;
                var wHeadDataTo = wArrHeadDatas[wHeadIndex];
                for (var j = 0; j < levelNum; j++){
                    wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
                } 
                
                if (wChecked) this.hideCol(wHeadIndex);
            }
        }
        
        // 전체 테이블 크기정보 갱신
    	this.adjustTableWidth();
    	
        return;
    };
    
    CrossSheetV.prototype.hideCol = function(headIndex){
        // functionname : [CrossSheetV.hideCol]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wColNum = this.headCols + headIndex;
        var wWidth = parseIntSize(this.dataTable.tBodies[0].rows[0].cells[wColNum].style.width) + "px";
        wCell.setAttribute("oldWidth", wWidth);
        
        for (var wLevel = 1; wLevel <= this.colLevelCnt; wLevel++){
            var wRowNum = wLevel - 1;
            var wCellIndex = this.FindCellIndex(headIndex, wLevel - 1);
            if (wCellIndex >= 0){
        	    wCell = this.colHeadTable.tBodies[0].rows[wRowNum].cells[this.headCols +wCellIndex];
                var wCurrnetWidth = parseIntSize(wCell.style.width);
                wCell.style.width = (wCurrnetWidth - wWidth 
                                  - (wCurrnetWidth > wWidth ? GAP_BETWEEN_CELL : 0)) + "px";
                
            }
        }
        
        for (var wRowNum = 0; wRowNum < this.dataTable.tBodies[0].rows.length; wRowNum++){
            this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum].style.width = 0 + "px";
        }
        
        return;
    };
    
    CrossSheetV.prototype.showCol = function(headIndex){
        // functionname : [CrossSheetV.showCol]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wColNum = this.headCols + headIndex;
        var wWidth = parseIntSize(this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum].oldWidth);
        
        for (var wLevel = 1; wLevel <= this.colLevelCnt; wLevel++){
            var wRowNum = wLevel - 1;
            var wHardColNum = this.headCols + this.FindCellIndex(headIndex, wLevel);

    	    wCell = this.colHeadTable.tBodies[0].rows[wRowNum].cells[wHardColNum];
            wCell.style.width = (parseIntSize(wCell.style.width) + wWidth) + "px";
        }
        for (var wRowNum = 0; wRowNum < this.dataTable.tBodies[0].rows.length; wRowNum++){
            this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum].style.width = wWidth + "px";
        }
        
        return;
    };
    
    // 좌측상단의 셀을 통합한다
    CrossSheetV.prototype.mergeUpperMost = function(){
        // functionname : [CrossSheetH.mergeUpperMost]

        var wTable = this.fixCellTable;
        var firstRow  = wTable.tBodies[0].rows[0];
        var firstCell = firstRow.cells[0];
        var wHeight = 0;
        var wWidth  = parseIntSize(wTable.style.width);
        
        for (var wRow = 0; wRow < wTable.tBodies[0].rows.length; wRow++){
            wHeight += parseIntSize(wTable.tBodies[0].rows[0].style.height) + GAP_BETWEEN_CELL; 
        }

        var wTable = this.fixCellTable;
        for (var wRow = wTable.tBodies[0].rows.length - 1; wRow > 0; wRow--){
                wTable.deleteRow(wRow);
        }
        
        var wRow = wTable.tBodies[0].rows[0];
        wRow.style.display = "";
        for (var wColNum = wRow.cells.length - 1; wColNum > 0; wColNum--){
                wRow.deleteCell(wColNum);
        }
        firstCell.style.width = wWidth + "px";
        firstRow.style.height = wHeight + "px";
        return;
    };
    
    // 여기서 부터는 줄숨기기
    CrossSheetV.prototype.hideStepChildRows = function(cell, showAction){
        // functionname : [CrossSheetV.hideStepChildRows]

        var wRowNum = cell.parentNode.rowIndex;
        var wColNum = cell.cellIndex;
        
        var wStepNum = this.findStepNum(wRowNum, wColNum);
        var wHeadIndex = this.findHeadIndex(wRowNum, wColNum, wStepNum);
        
        var wArrHeadDatas = this.stepHeadDatas[wStepNum];
        var wKeyData = ["","","","",""];
           
        var wHeadData = wArrHeadDatas[wHeadIndex];
        for (var j = 0; j <= levelNum; j++){
            wKeyData[j] = wHeadData.values[j];
        } 
        
        for (var wHeadIndex = 0; wHeadIndex <= this.headDatas.length; wHeadIndex++){
            if (wArrHeadDatas[wHeadIndex].values[levelNum].length == 0) continue;

            var wChecked = true;
            var wHeadDataTo = wArrHeadDatas[wHeadIndex];
            for (var j = 0; j <= levelNum; j++){
                wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
            } 
            
            if (wChecked && showAction == ACTION_HIDE) {
                this.hideRow(wHeadIndex, wStepNum);
            } else if (wChecked && showAction == ACTION_SHOW) {
                this.showRow(wHeadIndex, wStepNum);
            }
        }
        
        return;
    };
    
    CrossSheetV.prototype.hideStepRowLevels = function(levelCount, levelNum, stepNum){
        // functionname : [CrossSheetV.hideStepRowLevels]

        var wArrHeadDatas = this.stepHeadDatas[stepNum];
        var wKeyData = ["","","","",""];
        
        for (var i = 0; i <= this.headDatas.length; i++){
            if (!wArrHeadDatas[i].hideChild) continue;
            
            var wHeadData = wArrHeadDatas[i];
            for (var j = 0; j <= levelNum; j++){
                wKeyData[j] = wHeadData.values[j];
            } 
            
            for (var wHeadIndex = 0; wHeadIndex <= this.headDatas.length; wHeadIndex++){
                if (wArrHeadDatas[wHeadIndex].values[levelNum].length == 0) continue;

                var wChecked = true;
                var wHeadDataTo = wArrHeadDatas[wHeadIndex];
                for (var j = 0; j <= levelNum; j++){
                    wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
                } 
                
                if (wChecked) this.hideRow(wHeadIndex, stepNum);
            }
        }
    	
        return;
    };
    
    CrossSheetV.prototype.hideRow = function(headIndex, stepNum){
        // functionname : [CrossSheetV.hideRow]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wRowNum = this.headRows + headIndex;
        
        var wRow = this.dataTable.tBodies[0].rows[wRowNum];
        wRow.oldheight = parseIntSize(wRow.style.height);
        wRow.style.height = 0 + "px";
        
        wRow = this.colHeadTable.tBodies[0].rows[wRowNum];
        wRow.style.height = 0 + "px";
        
        return;
    };
    
    CrossSheetV.prototype.showRow = function(headIndex, stepNum){
        // functionname : [CrossSheetV.showRow]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wRowNum = this.headRows + headIndex;
        
        var wRow = this.dataTable.tBodies[0].rows[wRowNum];
        var wHeight = wRow.oldheight;
        wRow.style.height = wHeight + "px";
        wRow = this.colHeadTable.tBodies[0].rows[wRowNum];
        wRow.style.height = wHeight + "px";
        
        return;
    };


    CrossSheetV.prototype.findCellIndex = function(headIndex, hardLevel, stepNum){
        // functionname : [CrossSheetV.findCellIndex]

        // stepNum이 생략되면 전체헤더이다
        var wArrHeadDatas = (stepNum ? this.stepHeadDatas[stepNum] : this.headDatas);
        
        // 상하로 머지된 경우 X가 붙는다
        if (wArrHeadDatas[headIndex].merged[hardLevel] == "X") return -1;
        
        var wReturn = -1;
        for (var i = 0; i <= headIndex; i++){
            wReturn += (wArrHeadDatas[i].merged[hardLevel] == "N" ? 1 : 0);
        }
        return wReturn;
    };
    
    CrossSheetV.prototype.findHeadIndex = function(cellIndex, hardLevel, stepNum){
        // functionname : [CrossSheetV.findHeadIndex]

        // stepNum이 생략되면 전체헤더이다
        var wArrHeadDatas = (stepNum ? this.stepHeadDatas[stepNum] : this.headDatas);
        var wReturn = -1; var wIndex = this.headCols - 1;
        for (var i = 0; i < wArrHeadDatas.length; i++){
            wIndex += (wArrHeadDatas[i].merged[hardLevel] ? 0 : 1);
            if (cellIndex >= wIndex) {wReturn = i; break;}
        }
        return wReturn;
    };
    
    CrossSheetV.prototype.findStepNum = function(cellIndex, hardLevel){
        // functionname : [CrossSheetV.findStepNum]

        // stepNum이 생략되면 전체헤더이다
        var wReturn = this.stepstartNums.length - 1; 
        for (var i = 1; i < this.stepstartNums.length; i++){
            if (this.stepstartNums[i] > cellIndex){
                wReturn = i - 1; break;
            }
        }
        return wReturn;
    };
    
    /***************************************************************************
        시트 함수의 동작에관한 부분이다
    ***************************************************************************/
    CrossSheetV.prototype.recalculate = function(){
            // functionname : [CrossSheetV.recalculate]

        for (var wRowNum = 1; wRowNum < this.maxRows + this.headRows; wRowNum++){
            //var wRow = this.dataTable.rows[wRowNum+ this.headRows - 1];
            var wRow = this.dataTable.rows[wRowNum];
            for (var wColNum = 1; wColNum < this.maxCols + this.headCols; wColNum++){
                var wCell = wRow.cells[wColNum];
                //var wCell = wRow.cells[wColNum + this.headCols - 1];
                var wFormula = wCell.getAttribute("formula") || "";
                if (wFormula.length > 0){
                    this.calculateCell(wCell, wFormula);
                }
            }  
        }  
        
        return;
    };
    
    // 자기자신을 먼저 계산후에 다른 참조셀을 바꾼다
    CrossSheetV.prototype.calculateCell = function(cell, formula){
        // functionname : [CrossSheetV.calculateCell]

	    var wFormula = formula || "";

        // wLogic.clear();
    	var wCell = cell;
    	
    	wFormula = this.replaceToEasyFormula(wFormula);
        var wValue = calc(wFormula);

        if (wValue != wCell.getAttribute("value")){
            wCell.setAttribute("value", wValue);
            wCell.align = "right";
            wCell.valign = "middle";
//            wCell.valign = "baseline";
            var decemal = parseInt(1 * wCell.getAttribute("decimal"));
            wCell.innerText = mask(wValue, "###,###,###,###,##0" + (decemal > 0 ? ".0000000000".substring(0, decemal + 1) : "")); 

        }

        return; 
    };
    
    // 산식의 셀문자열에 셀값을 대치하여 준다 예: R1C1 -> "142" 
    CrossSheetV.prototype.replaceToEasyFormula = function(formula){
        // functionname : [CrossSheetV.replaceToEasyFormula]

        // Cell함수를 루핑하면서 계속 찾는다 
	    var wFormula = formula || "";
        // 케리지리턴이나 탭등을 제거한다 
    	wFormula = wFormula.replace(/\r\n/g," ").replace(/\t/g," ").trim();
    	
	    // 대문자로 변환
    	wFormula = wFormula.toUpperCase();
	    
        //--- 메인동작 기능-----------------------------------------------------
        var wArrRange = [0,0,0,0];
        var wMaxRows = this.maxRows;       var wMaxCols = this.maxCols;
	    while (wFormula.indexOf("CELL ") >= 0) wFormula.replaceWord("CELL ","CELL");

	    var wFuncPosition = wFormula.indexOf("CELL(");
	    while (wFuncPosition >= 0){
	        var wEndPosion = wFormula.indexOf(")", wFuncPosition);
	        var wCellString = wFormula.substring(wFuncPosition + 5, wEndPosion); //6은 "CELL("의 길이
	            wCellString = wCellString.replaceWord("\"","");
	        var wValueString = "";
	        
            // 괄호사이의 셀값을 셀값으로 바꾼다(문자와 숫자 셀타입을 구분)
	        var wArrCellRanges = wCellString.split(",");
	        for (var i=0; i < wArrCellRanges.length; i++){
                this.parseRCToRange(wArrCellRanges[i], wArrRange);
                
                for (var wRowNum = wArrRange[0]; wRowNum <= wArrRange[2]; wRowNum++){
                    //var wRow = this.dataTable.rows[wRowNum + this.headRows - 1];
                    var wRow = this.dataTable.rows[wRowNum];
                    for (var wColNum = wArrRange[1]; wColNum <= wArrRange[3]; wColNum++){
                        //var wCell = wRow.cells[wColNum + this.headCols - 1];
                        var wCell = wRow.cells[wColNum];
	                    wValueString += (wValueString.length > 0 ? "," : "") + wCell.getAttribute("value");
	                }
	            }
	        }
	        
	        wFormula = wFormula.substring(0, wFuncPosition) + wValueString + wFormula.substring(++wEndPosion);
	        
	        wFuncPosition = wFormula.indexOf("CELL(");
	    }    

        return wFormula;
    };
    
    /*--------------------------------------------------------------------------
     RC스타일의 문법 (기본 R1C1:R2C3 상대좌표 R[1]C[1]:R[3]C[4] <-커런트 셀기준
     단일셀은 :이 없다 (R1C1  R[1]C[2])
     줄선택은 R1:R2와 같다 열선택은 C1C2와 같이 표현한다
     인수중에 배열은 [Row, Col, Row2, Col2] 이다 결과를 리턴한다
    ----------------------------------------------------------------------------*/
    CrossSheetV.prototype.parseRCToRange = function(RCString, arrRange){
         // functionname : [CrossSheetV.parseRCToRange]

        // 1. 콜론으로 범위값을 분리한다 없으면시작셀값과 같은 값을 준다
        var wArrRanges = RCString.split(":");
        
        // 2. 시작셀을 파싱한다
        //    열번호가 없으면 전체열 선택이다 줄번호가 없으면 전체줄 선택이다 
        var wRange = wArrRanges[0];
        var wRowString = wRange.split("C")[0].substring(1);
        var wColString = wRange.split("C")[1];

        arrRange[0] = parseInt(wRowString, 10);
        arrRange[1] = parseInt(wColString, 10);
        
        if (wArrRanges.length == 1) {
            arrRange[2] = arrRange[0];
            arrRange[3] = arrRange[1];
        } else {
            // 3. 종료셀을 파싱한다 
            wRange = wArrRanges[1];
            wRowString = wRange.split("C")[0].substring(1);
            wColString = wRange.split("C")[1];
            
            arrRange[2] = parseInt(wRowString, 10);
            arrRange[3] = parseInt(wColString, 10);
        }
        
        return;
    };
     /* -----------------------------------------------------------------------
     데이터를 모두채운후에는 스크롤에 테이블 사이즈를 반영한다
     --------------------------------------------------------------------------*/
     CrossSheetV.prototype.resetScroll = function(){

	   	var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];
	   	var scrollChildPanel = scrollPanel.getElementsByTagName("DIV")[0];
	   	if (this.dataTable.scrollWidth == 0){
	    	var w = 1; 
	   		var h = 1;
	   		var tbody = this.dataTable.tBodies[0];
	   		for (var wRowNum = 0; wRowNum < tbody.rows.length; wRowNum++){
	   			h++;
	   			h += parseIntSize(tbody.rows[wRowNum].style.height);
	   		}
	   		var tr = tbody.rows[0];
	   		for (var wColNum = 0; wColNum < tr.cells.length; wColNum++){
	   			w++;
	   			w += parseIntSize(tr.cells[wColNum].style.width);
	   		}
	   	   	scrollChildPanel.style.width = ++w + "px";
	   	   	scrollChildPanel.style.height = ++h + "px";
	   		
	   	} else {
	   	   	scrollChildPanel.style.width = this.dataTable.scrollWidth + "px";
	   	   	scrollChildPanel.style.height = this.dataTable.scrollHeight + "px";
	   	}
	   	
    	scrollPanel.scrollTop = 0;
    	scrollPanel.scrollLeft = 0;
    };

    /* -----------------------------------------------------------------------
       여기서 부터 크로스 데이터 처리부분이다
    --------------------------------------------------------------------------*/
    CrossSheetV.prototype.analyze = function(dataObject){
        // functionname : [CrossSheetV.analyze]
    	this.dataObject = dataObject;
    
        // 없는 속성 추가
	    for (var i=1; i < dataObject.steps.length; i++){
	    	var stepObject = this.dataObject.steps[i];
	    	stepObject.headDatasSorted = null;
	    	
	    	stepObject.cellType = 0;
	    	if (stepObject.datas.length == 0){
	    		stepObject.cellType = CELLTYPE_FLOAT;
	    	} else if (stepObject.datas[0].length == 0){
	    		stepObject.cellType = CELLTYPE_FLOAT;
	    		
	    	} else if (("" + stepObject.datas[0][0]).isNum()){
	            stepObject.cellType = CELLTYPE_FLOAT;
	        } else {
	            stepObject.cellType = CELLTYPE_EDIT;
	        }
	    }
	    
        // 첫데이터로 셀타입을 판단한다 
	    
        showAjaxBox(getText("message_crosssheetv_001", "서버 데이터를 분석중입니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep1()", 10);
        return;
    };
    
    CrossSheetV.prototype.executeStep1 = function(){
        // functionname : [CrossSheetV.executeStep1]
        
	    // ==== 0. 시트 클리어  ============================================
	    // 줄수, 칼럼수를 1로하고 MaxRows, MaxCols를 0으로 한다 
        var wTables = this.tagObject.getElementsByTagName("table");
	    for (var i = 0; i <= 3;i++){
	        wTables[i].style.display="none";
	    } 
	    
	    this.clear();
	    var dataObject = this.dataObject;
	    
	    // ==== 1. 전역변수 세팅 ===========================================
        this.colLevelCnt = dataObject.head.levelCnt;
        this.rowLevelCnt = 0;
        for (var wStepNum = 1; wStepNum < dataObject.steps.length; wStepNum++){
            if (this.rowLevelCnt < dataObject.steps[wStepNum].levelCnt && dataObject.steps[wStepNum].isSQL)
                   this.rowLevelCnt = dataObject.steps[wStepNum].levelCnt;
        }
        this.headRows = this.colLevelCnt;
        this.headCols = this.rowLevelCnt;
        
        // 비고난의 갯수 설정
        if (dataObject.direction == "RowChange"){
            this.remarkCols = (dataObject.head.needRemarks ? 1 : 0);
        } else if (dataObject.direction == "ColChange"){
            this.remarkRows = (dataObject.head.needRemarks ? 1 : 0);
        }
        
        showAjaxBox(getText("message_crosssheetv_002", "분석 데이터를 작성하는 중입니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep2()", 10);
        return;
    };
    
    CrossSheetV.prototype.executeStep2 = function(){
        // functionname : [CrossSheetV.executeStep2]
    
        // 데이터가 들어갈 빈헤더와 셀들을 모두 만든다
        // 상단헤더를 만든다
        var dataObject = this.dataObject;
        this.makeHeads(dataObject.head.heads, 
                       dataObject.sumPosition, 
                       dataObject.head.sums,
                       dataObject.head.levelCnt, 
                       dataObject.head.hidden, 
                       this.headDatas);
                       
        // Step헤더를 만든다
        for (var i=1; i < dataObject.steps.length; i++){
            this.stepHeadDatas[i] = [];
            if (dataObject.steps[i].isSQL){
                this.makeHeads(dataObject.steps[i].heads, 
                               dataObject.sumPosition, 
                               dataObject.steps[i].sums, 
                               dataObject.steps[i].levelCnt, 
                               dataObject.steps[i].hidden, 
                               this.stepHeadDatas[i]);
            } else {
                var wHeadData = this.stepHeadDatas[i][0] = new HeadData();
                wHeadData.captions = [dataObject.steps[i].heads[0][5],"","","",""];
                wHeadData.values   = ["","","","",""];
            }
        }
        
        // 시트에 집어 넣는다
        this.makeBlankCells();
    
        showAjaxBox(getText("message_crosssheetv_003", "상단과 좌측 타이틀을 채우고 있습니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep3()", 10);
        return;
    };
    
    CrossSheetV.prototype.executeStep3 = function(){
        // functionname : [CrossSheetV.executeStep3]
                           
        var dataObject = this.dataObject;
	    // ==== 2. 타이틀을 먼저 만들고 ===============================
        //  2.1 칼럼 타이틀 채우기
        this.makeColTitle();
	    
        //  2.2 스텝별 타이틀 채우기
        var wStartNum = [this.headRows];
        var wArrSteps = dataObject.steps;
            for (var wStep = 1; wStep < wArrSteps.length; wStep++){
                this.stepstartNums[wStep] = wStartNum[0];
                this.makeRowTitles(wStep, dataObject.steps[wStep].decimal, wStartNum);
            }
    
        showAjaxBox(getText("message_crosssheetv_004", "데이터를 채우는 중입니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep4()", 10);
        
        return;
    };
    
    CrossSheetV.prototype.executeStep4 = function(){
        // functionname : [CrossSheetV.executeStep4]
        
    	// ==== 3. 스텝별로 몸통데이터를 찍는다. =============================
    	var wArrSteps = this.dataObject.steps;
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
            var wStepObject = wArrSteps[wStep];
            this.mCrrentFieldTypeIsNumeric = true;
            
            if (wStepObject.isSQL1)
                this.fillRowData(wStep, wStepObject);
        }
                           
    
        showAjaxBox(getText("message_crosssheetv_005", "셀에 산식을 작성하는 중입니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep5()", 10);
        return;
    };
    
    CrossSheetV.prototype.executeStep5 = function(){
        // functionname : [CrossSheetV.executeStep5]
        
        var dataObject = this.dataObject;
    	// ==== 4. 산식데이터 채우기  =============================
        //  4.1 스텝별 산식 채우기(산식)
        var wArrSteps = this.dataObject.steps;
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
            var wStepObject = wArrSteps[wStep];
            this.mCrrentFieldTypeIsNumeric = true;
            if (!wStepObject.isSQL1){
                this.makeRowFormula(wStep, wStepObject);
            }
        }
        
        //  4.2 열단위 합계 채우기(산식)
        this.makeColSums();
        
        //  4.3 줄단위 합계 채우기(산식)
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
            var wStepObject = wArrSteps[wStep];
            if (wStepObject.isSQL && wStepObject.isSQL1){
                this.makeStepSums(wStep);
            }
        }
        
        //  4.4 줄단위 비고난 채우기
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
            this.makeStepRemarks(wStep, dataObject.steps[wStep].remark);
        }
        
        
        showAjaxBox(getText("message_crosssheetv_006", "산식을 일괄 계산하는 중입니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep6()", 10);
        return;
    };
    
    CrossSheetV.prototype.executeStep6 = function(){
        // functionname : [CrossSheetV.executeStep6]
        
        // ==== 5. 산식셀을 일괄 계산 해준다. =====================================================
        this.recalculate();
        
        showAjaxBox(getText("message_crosssheetv_007", "칼럼사이즈를 조정하고, 타이틀을 정비하는 중입니다"), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep7()", 10);
        return;
    };
    
    
    CrossSheetV.prototype.executeStep7 = function(){
        // functionname : [CrossSheetV.executeStep7]
        
        var dataObject = this.dataObject;
        // ==== 6. 헤더 칼럼을 사이즈를 조정한다===================
        // 6.1 칼럼사이즈 조정
        this.adjustColWidth();

        // 6.2 열 헤더 칼럼 병합
        var wTableRow = document.createElement("TR"); 
        var wRow0 = this.colHeadTable.tBodies[0].rows[0];
        
        if (wRow0.insertAdjacentElement){
        	wRow0.insertAdjacentElement('beforeBegin', wTableRow);
 		}
 		else if (wRow0.appendChild) {
 			insertAdjacentElement('beforeBegin' ,wRow0, wTableRow);
 		}
        
        for (var wColNum = 0; wColNum < this.colHeadTable.tBodies[0].rows[1].cells.length; wColNum++){
            wTableRow.insertCell(wColNum);
            wTableRow.cells[wColNum].style.width = wRow0.cells[wColNum].style.width;
        }
    	this.colHeadTable.tBodies[0].rows[0].style.display="none";
        this.mNoneCaption = dataObject.noCaption;
        this.setColHeadSpan(this.mNoneCaption);
        
        // 6.3 줄 헤더 칼럼 병합
        var wArrSteps = this.dataObject.steps;
        for (var wStep = wArrSteps.length - 1; wStep >= 1; wStep--){
            this.setRowHeadSpans(wStep, dataObject.steps[wStep].levelCnt, 
                                        this.mNoneCaption ,
                                        dataObject.steps[wStep].isSQL);
        }

        // 6.3 빈데이터 셀을 정리한다
        for (var wRowNum=0; wRowNum < this.dataTable.tBodies[0].rows.length; wRowNum++){
        	var wRow = this.dataTable.tBodies[0].rows[wRowNum];
        	for (var wColNum=0; wColNum < wRow.cells.length; wColNum++){
        		if (wRow.cells[wColNum].innerHTML=="") wRow.cells[wColNum].innerHTML="&nbsp;";
        	}
        }
        
        /*            

        // 열 헤더 칼럼 숨기기
        for (var wLevelNum = 0; wLevelNum < this.dataObject.head.levelCnt; wLevelNum++){
            if (this.dataObject.head.hidden[wLevelNum])
                this.hideColLevels(this.dataObject.head.levelCnt, wLevelNum);
        }
        

        // 줄 헤더 칼럼 숨기기
        for (var wStep = wArrSteps.length - 1; wStep >= 1; wStep--){
            for (var wLevelNum = 0; wLevelNum < this.dataObject.steps[wStep].levelCnt; wLevelNum++){
                if (this.dataObject.steps[wStep].hidden[i])
                    this.HideStepColLevels(this.dataObject.steps[wStep].levelCnt, wLevelNum, wStep);
            }
        }
        */
        
        showAjaxBox(getText("message_crosssheetv_008", "자료를 정리합니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep8()", 10);
        return;
    };
    
    
    CrossSheetV.prototype.executeStep8 = function(){
        // functionname : [CrossSheetV.executeStep8]
    
    	// ==== 7. 데이터 작업 후속처리 ===================
        var wTables = this.tagObject.getElementsByTagName("table");
	    for (var i = 0; i <= 3;i++){
	        wTables[i].style.display="block";
	    }     
	       
     	// 7.1 메모리 해제 
        //this.dataObject = null;
    
    	// 7.2 차트 그리기 호출
		this.showChart();
		
		// 7.3 채우기 완료 이벤트 호출 
		callEvent(this.controlId + "_LoadSuccess");
    
		// 7.4 시트 스크롤 초기화 
    	this.resetScroll();
    	
    	// 7.5 진행 상태 박스 숨기기
    	hideAjaxBox();
    	
    	// 7.6 좌상단 셀 조정
    	var rowTitle = this.dataObject.head.rowTitle;
    	if (rowTitle == null || rowTitle.length == 0)
    		this.mergeUpperMost();
    	
        return;
    };

       
    CrossSheetV.prototype.clearData = function(dataObject){
        // functionname : [CrossSheetV.clearData]

           for (var wStepNum = 1; wStepNum < dataObject.steps.length; wStepNum++){
        	   var wStep = dataObject.steps[wStepNum];
        	   if (wStep.sums) wStep.sums.clear();
        	   if (wStep.sums) wStep.hidden.clear();
        	   if (wStep.sums) wStep.heads.clear();
        	   if (wStep.sums) wStep.datas.clear();
           }
    	   dataObject.steps.clear();
    	   
       	   var wHead = dataObject.head;
    	   if (wHead.sums) wHead.sums.clear();
    	   if (wHead.sums) wHead.hidden.clear();
    	   if (wHead.sums) wHead.heads.clear();
    	   dataObject.head = null;
    	   
    	   dataObject = null;
    };

    CrossSheetV.prototype.addChartInfo = function(pChartInfo){
        // functionname : [CrossSheetV.addChartInfo]

        this.chartInfo = pChartInfo;      
    };
    
    CrossSheetV.prototype.getChartData = function(pChartId){
       // functionname : [CrossSheetV.getChartData]

       var arrFromStrings = [",", ":", ";", "&", "%", "?"];
       var arrToStrings   = ["<COMMA>", "<COLON>", "<SEMICOLON>", "<AMP>", "<PERCENT>", "<QUESTION>"];

       var wChartInfo = "";
	   var wInfos = this.chartInfo.split("[S1]");
	   for(var i = 0; i < wInfos.length; i++){
		   var wInfo = wInfos[i];
		   if (wInfo.trim().length == 0) continue;
		   var chartId = wInfo.split(";")[2];
		   
		   if (pChartId == chartId) {
			   wChartInfo = wInfo; break;
		   }
	   }
	   
	   if (wChartInfo.length == 0) return "";
	   
	   var wArr = wChartInfo.split(";");
 	   var wArr1 = wArr[0].split("_");
 	   var wArr2 = wArr[1].split("_");
 	   
	   var wPointRCType      = parseInt(wArr1[0]);
	   var wPointStepNum     = parseInt(wArr1[1]);     // 포인트데이터를 뽑을 스텝명
	   var wPonitLevel       = parseInt(wArr1[2]);     // 포인트 데이터를 뽑을 레벨명
	   
	   
	   // wSeriesLevel의 주의사항  예를들어 "대분류-중분류-상품"이라면 대분류는 1이고 상품은 3으로 화면이 만들어 진다
	   // 크로스 시트의 경우 상품데이터는1, 중분류 합계는 2, 대분류합계는 3이다
	   if (wPointRCType == BY_ROW_VTYPE){
		   wPonitLevel = this.rowLevelCnt - wPonitLevel + 1;
	   } else if (wPointRCType == BY_COL_VTYPE){
		   wPonitLevel = this.colLevelCnt - wPonitLevel + 1;
	   }
	   
	   var wSeriesRCType	 = parseInt(wArr2[0]); 
	   var wSeriesStepNum	 = parseInt(wArr2[1]);     // 계열값 데이터를 뽑을 스텝명
	   var wSeriesLevel	     = parseInt(wArr2[2]);     // 계열값 데이터를 뽑을 레벨명
	   
	   if (wSeriesRCType == BY_ROW_VTYPE){
		   wSeriesLevel = this.rowLevelCnt - wSeriesLevel + 1;
	   } else if (wSeriesRCType == BY_COL_VTYPE){
		   wSeriesLevel = this.colLevelCnt - wSeriesLevel + 1;
	   }
 	   
        var wPointRcNums = [];
        
        // point data set 
        var wData = "";      // 함수가 리턴할 문자열값
        var wPointSeq = 0;   // 선택된 헤더들 집합 내의 새로 매긴 순번
        
        if (wPointRCType == BY_COL_VTYPE){
            var wHeadCols = this.headCols;
            for (var i=0; i < this.headDatas.length; i++){
                var wHeadData = this.headDatas[i];
                if (wHeadData.Level != wPonitLevel) continue;
                
                wData += "," + escapeCharacter(wHeadData.captions[this.colLevelCnt - wPonitLevel] ,arrFromStrings, arrToStrings);
                wPointRcNums[wPointSeq] = i + wHeadCols;
                
                wPointSeq++;
            }
        
        } else if (wPointRCType == BY_ROW_VTYPE){
            var wStartRowNum = this.stepstartNums[wPointStepNum];
            wHeadDatas = this.stepHeadDatas[wPointStepNum];
            
            for (var i=0; i < wHeadDatas.length; i++){
                var wHeadData = wHeadDatas[i];
                if (wHeadData.Level != wPonitLevel) continue;
                
                wData += "," + escapeCharacter(wHeadData.captions[this.rowLevelCnt - wPonitLevel] ,arrFromStrings, arrToStrings);
                wPointRcNums[wPointSeq] = i + wStartRowNum;
                
                wPointSeq++;
            }
        
        }
        wData += ":";
        
        // Series Data Set
        var wRows = this.dataTable.tBodies[0].rows;
        
        if (wSeriesRCType == BY_COL_VTYPE){
            var wHeadCols = this.headCols;
            for (var i=0; i < this.headDatas.length; i++){
                var wHeadData = this.headDatas[i];
                if (wHeadData.Level != wSeriesLevel) continue;
                
                wData += escapeCharacter(wHeadData.captions[this.colLevelCnt - wSeriesLevel] ,arrFromStrings, arrToStrings);
                
                var wColNum = i + wHeadCols;
                for (var j = 0; j < wPointRcNums.length; j++){
                    var wRowNum = wPointRcNums[j];
                    var wValue = wRows[wRowNum].cells[wColNum].getAttribute("value");
                    
                    wData += "," + escapeCharacter(wValue ,arrFromStrings, arrToStrings);
                    
                }
                wData += ":";

            }
        
        } else if (wSeriesRCType == BY_ROW_VTYPE){
            var wStartRowNum = this.stepstartNums[wSeriesStepNum];
            wHeadDatas = this.stepHeadDatas[wSeriesStepNum];

            for (var i=0; i < wHeadDatas.length; i++){

            	wHeadData = wHeadDatas[i];
                if (wHeadData.Level != wSeriesLevel) continue;
                
                wData += escapeCharacter(wHeadData.captions[this.rowLevelCnt - wSeriesLevel] ,arrFromStrings, arrToStrings);
                
                var wRowNum = i + wStartRowNum;
                for (var j = 0; j < wPointRcNums.length; j++){
                    var wColNum = wPointRcNums[j];
                    var wValue = wRows[wRowNum].cells[wColNum].getAttribute("value");
                    
                    wData += "," + escapeCharacter(wValue ,arrFromStrings, arrToStrings);
                    
                }
                wData += ":";
            }
        }
    	return wData;
    };


    CrossSheetV.prototype.showChart = function(){
        // functionname : [CrossSheetV.showChart]

 	   var wChartInfo = "";
 	   var wInfos = this.chartInfo.split("[S1]");
 	   for(var i = 0; i < wInfos.length; i++){
 		   var wInfo = wInfos[i];
 		   if (wInfo.trim().length == 0) continue;
 		   var chartId = wInfo.split(";")[2];
 		   
            var chartControl = getControlById(chartId);
            chartControl.data =this.getChartData(chartId);
            
            if (chartControl.data.indexOf(":") < chartControl.data.length - 1){
                chartControl.show();
            }
 	   }
 	   return;
    };
    
    CrossSheetV.prototype.setCellStyle = function(stepNum, styleJSON, arrKeyDatas, tooltip){
        // functionname : [CrossSheetV.setCellStyle]

        var stepObject = this.dataObject.steps[stepNum];
        var wStartNum = this.stepstartNums[stepNum];
        var wFieldPoint = stepObject.fieldPoint;
        
	    // key count 계산
        var keyCount = 0;
        var wArrDatas = stepObject.datas;
        if (wArrDatas.length >= 1){
            for (var i = 1; wArrDatas[0].length;i++) {
            	if (wArrDatas[0][i] == null) break; 
            	keyCount++;
            }
        }

        var headKeyCount = wFieldPoint;
        var bodyKeyCount = keyCount - wFieldPoint;
        
        var wData = arrKeyDatas;

        // 칼럼번호 찾기 
        var wWorkKey = wData.slice(1, wFieldPoint + 1); 
        var wColArrData = searchArray(this.headDatasSorted, wWorkKey);
        var wColNum = (wColArrData != null ? wColArrData[wColArrData.length - 1] : -1);
        
        // 줄번호 찾기
        var wRowNum = -1; var wRowArrData = null; 
        if (!stepObject.isSQL){
            wRowNum = wStartNum;
        } else {
            wWorkKey = wData.slice(headKeyCount + 1, keyCount + 1); 
            wRowArrData = searchArray(stepObject.headDatasSorted, wWorkKey);
            wRowNum = (wRowArrData != null ? wRowArrData[wRowArrData.length - 1] : -1);
        }
        
        if (wRowNum >= 0 && wColNum >= 0){
            var wCell = this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum];
            this.setTypeStyle(wCell, styleJSON, tooltip);	
         }
        
            
        if (wWorkKey) wWorkKey.clear();
        
        return;
    };
    
    // 사용방법 : wSheet.setTypeStyle({"text-align":"left", "font": "normal normal normal 12pt 굴림,Courier"});
    // 만들어진 스타일을 지우려면 : wSheet.setTypeStyle({"text-align":""});
    CrossSheetV.prototype.setTypeStyle = function(cell, styleJSON, tooltip){
        // functionname : [CrossSheetV.setTypeStyle]

          var wCell = cell;
          var styleString = "";
          if (wCell.style){
        	  styleString = wCell.style.cssText;  
          } else {
        	  styleString = wCell.getAttribute("style");  
          }
          
          var arrStyleItems = (styleString == null ? [] : styleString.split(";"));
          var arrStyles = [];
          
          for (var i = 0; i < arrStyleItems.length; i++){
              var styleItem = ("" + arrStyleItems[i]).trim();
              if (styleItem.length == 0) continue;
              
              var arrInfos = styleItem.split(":");
              var itemStyleName  = ("" + arrInfos[0]).trim();
              var itemStyleValue = ("" + arrInfos[1]).trim();
              
              arrStyles[i] = [itemStyleName, itemStyleValue];
          }


          styleString = "";
          
          for (var wKey in styleJSON){
	         if (styleJSON[wKey] instanceof Function) continue;
             var styleName  = wKey;
             var styleValue = styleJSON[wKey];
             
             var found = false;
             for (var j = 0; j < arrStyles.length; j++){
                 var itemStyleName  = arrStyles[j][0];
                 var itemStyleValue = arrStyles[j][1];
                 
                 if (styleName == itemStyleName) {
                     arrStyles[j] = [styleName, styleValue];

                     found  = true; break;
                 }
             }
             
             if (!found){
                 var newIndex = arrStyles.length;
                 arrStyles[newIndex ] = [styleName, styleValue];
             }
          }
          
          for (var i = 0; i < arrStyles.length; i++){
              if (arrStyles[i][1].length == 0) continue;
              styleString +=  arrStyles[i][0] + ":" + arrStyles[i][1] + "; ";
          }

          wCell.setAttribute("style", styleString);
    	  wCell.style.cssText = styleString;

          wCell.title= tooltip;

          return;
    };

    CrossSheetV.prototype.stepNumOf = function(rowNum){
    	var wStepNum = 0;
	    for (var i=1; i < this.stepstartNums.length; i++){
	    	if (rowNum < this.stepstartNums[i]) break;
	    	wStepNum++;
	    }
	    return wStepNum;
    }

    /***************************************************************************
    데이터시트 콘트롤의 정의 부분이다
    인수로는 콘트롤 명과 , 테그객체를 갖는다
***************************************************************************/
    function CrossSheetH(controlId, controlName, tagObject) //constructor 
    {
        // 시트 외형에 관한 설정 
        this.controlId = controlId;   
        this.id   = this.controlId;
        this.controlName = controlName;   
        this.tagObject = tagObject;
        this.enabled = true;
        
        this.headRows = 1;
        this.headCols = 1;
        this.frozenCols = 0;
        this.frozenRows = 0;
        this.maxCols = 0;  // MaxCols와 MaxRows엔 비고난이 들어 가지 않는 숫자다
        this.maxRows = 0;
        this.remarkCols = 0;
        this.remarkRows = 0;
        this.chartInfo = "";
        
        var wTables = this.tagObject.getElementsByTagName("table");
        this.dataTable    = wTables[DATA_TABLE];
        this.colHeadTable = wTables[COL_TABLE];
        this.rowHeadTable = wTables[ROW_TABLE];
        this.fixCellTable = wTables[FIX_TABLE];
        
        // 데이터처리에 관한 설정 
        this.headDatas = [];          // HeadData구조체의 배열이다
        this.headDatasSorted = null;    // HeadData구조체의 정렬된 배열이다
        this.stepHeadDatas= [null];   // 스텝갯수만큼 위 HeadDatas배열이 들어간다
        this.stepstartNums= [null];   // 스텝갯수만큼 위 시작 줄,열번호가 들어간다
        this.stepRCs      = [null];   // 스텝별로 로우데이터의 RC정보가 들어간다
        
        this.printHead = "";  // 인쇄시 페이지 헤더로 들어갈 내용
        this.printFoot = "";  // 인쇄시 페이지 푸터로 들어갈 내용
        this.needRemarks = false;
        
        // 참고: 최상위 레벨이 1레벨이고 하위 데이터가 붙을수록 5레벨까지 
        //       계속 레벨번호가 올라간다
        //       Value, Caption데이터는 상위레벨부터 채워진다
        //       즉 0번값이 최상위이다 (쿼리 필드 순서)
        
        this.colLevelCnt = 0; // 칼럼헤더의 레벨계층숫자
        this.rowLevelCnt = 0; // 로우헤더의 레벨계층숫자
        
        // 서버에서 받은 채우기 객체
        this.dataObject = null;

        if (tagObject != undefined){
            tagObject.setAttribute("tabIndex", "-1");
//            setEventHandler(this.dataTable, "mouseup", crosssheet_onmouseup);	//2019-03-28 jaeik 텍스트박스 입력 막음
        }
        
        this.hasClickEvent = false; this.fncClickEvent = null;
        this.hasChangeEvent = false; this.fncChangeEvent = null;
        if (this.controlId.length > 0) {
        	try {
            	if (eval(this.controlId + "_onclick")) this.hasClickEvent = true;
            } catch(e){}
            if (this.hasClickEvent){
        	    eval("this.fncClickEvent = function(rowNum, colNum){ return " + this.controlId + "_onclick(rowNum, colNum);}");
            }
        	try {
            	if (eval(this.controlId + "_onchange")) this.hasChangeEvent = true;
            } catch(e){}
            if (this.hasChangeEvent){
        	    eval("this.fncChangeEvent = function(rowNum, colNum, value, oldValue, cell){ return " + this.controlId + "_onchange(rowNum, colNum, value, oldValue, cell);}");
            }
        }
        // this.FormulaRefs = [];
    };
    
    /* -----------------------------------------------------------------------
        셀과 관련된 기초동작 
     -------------------------------------------------------------------------*/
    CrossSheetH.prototype.getText = function(row, col){
        // functionname : [CrossSheetH.getText]

    	var wCell = this.dataTable.tBodies[0].rows[row + this.headRows - 1].cells[col + this.headCols - 1];
        var wValue = wCell.getAttribute("value");
        
    	return wValue;
    };

    // MaxRows, MaxCols를 0으로 세팅한다
    CrossSheetH.prototype.clear = function(){
        // functionname : [CrossSheetH.clear]

        var wTables = this.tagObject.getElementsByTagName("table");
        for (var wTableNum = 0; wTableNum < wTables.length; wTableNum++){
            var wTable = wTables[wTableNum];
            for (var wRow = wTable.tBodies[0].rows.length - 1; wRow > 0; wRow--){
                    wTable.deleteRow(wRow);
            }
            
            var wRow = wTable.tBodies[0].rows[0];
            wRow.style.display = "";
            for (var wColNum = wRow.cells.length - 1; wColNum > 0; wColNum--){
                    wRow.deleteCell(wColNum);
            }
            wRow.cells[0].innerText = " ";
        }

        // 시트 외형에 관한 설정 
        this.headRows = 1;
        this.headCols = 1;
        this.frozenCols = 0;
        this.frozenRows = 0;
        this.maxCols = 0;  // MaxCols와 MaxRows엔 비고난이 들어 가지 않는 숫자다
        this.maxRows = 0;
        this.remarkCols = 0;
        this.remarkRows = 0;
        
        // 데이터처리에 관한 설정
        this.headDatas.clear();       this.headDatas = [];          // HeadData구조체의 배열이다
        this.stepHeadDatas.clear();   this.stepHeadDatas= [null];   // 스텝갯수만큼 위 HeadDatas배열이 들어간다
        this.stepstartNums.clear();   this.stepstartNums= [null];   // 스텝갯수만큼 위 시작 줄,열번호가 들어간다
        this.stepRCs.clear();         this.stepRCs      = [null];   // 스텝별로 로우데이터의 RC정보가 들어간다
        
        this.printHead = "";  // 인쇄시 페이지 헤더로 들어갈 내용
        this.printFoot = "";  // 인쇄시 페이지 푸터로 들어갈 내용
        this.needRemarks = false;
        
        this.colLevelCnt = 0; // 칼럼헤더의 레벨계층숫자
        this.rowLevelCnt = 0; // 로우헤더의 레벨계층숫자

        return;
    };

    CrossSheetH.prototype.getTag = function(row, col){
        // functionname : [CrossSheetH.getTag]

    	if (row + this.headRows - 1 > this.maxRows || 
    	    col + this.headCols - 1 > this.maxCols) return "";
    	    
    	return this.dataTable.tBodies[0].rows[row + this.headRows - 1].cells[col + this.headCols - 1].getAttribute("tag");
    };

    /* -------------------------------------------------------------------------
       서버로 부터 받은 데이터를 곧바로 헤드오 뿌릴 수 있도록 데이터를 만든다.
       인수 : 
           heads : 서버로 부터 받은 데이터 2차원배열[레코드번호][필드번호]
           sumPosition : 합계를 앞에 표시할 것인지 구분 ("AFTER", "BEFORE")
           sums : 합계갑 표시캡션들의 1차원 배열["합계","평균","최대",...]
       결과 : 
           this.headDatas : 결과값이 들어갈 1차원배열 (HeadData 구조체가 들어감) 
     ------------------------------------------------------------------------ */
    CrossSheetH.prototype.makeHeads = function(heads, sumPosition, sums, levelCnt, hidden, headDatas){
        // functionname : [CrossSheetH.makeHeads]

        var wIndex = -1;
        
        var AC = (sumPosition == "AFTER" ? "C" : "A");
        for (var i = 0; i < heads.length; i++){
            var wHeadData = headDatas[++wIndex] = new HeadData();
            var wColData = heads[i];
            
            wHeadData.values   = wColData.slice(0, 5);
            wHeadData.captions = wColData.slice(5, 10);
            
            var wSortKey = "";
            for (var k = 1; k <= levelCnt; k++){
                wSortKey += "B" + mask(i, "0000");
            }
            wHeadData.sortKey = wSortKey;
            
            wHeadData.childInfo = "NONE";
            wHeadData.Level = 1;
            
            var wNextData = (i == heads.length - 1 ? [null,null,null,null,null] : heads[i + 1]);
            
            // 1레벨의 합계부터 5레벨의 합계까지 루핑 
            for (var wLevel = 1; wLevel <= levelCnt; wLevel++){
                var wLevelIndex = wLevel - 1;
                // 마지막 데이터는 무조건 true이다(전체합계를 찍기위해서)
                var wChecked = (i == heads.length - 1); 
                // 상위 요소의 변화를 체크한다
                for (var j = 0; j < wLevelIndex;j++)
                    wChecked = wChecked || (wColData[j] != wNextData[j]);
                
                if (wChecked && sums[wLevelIndex] != null && sums[wLevelIndex] != getText("message_crosssheeth_009", "표시안함")
                										  && sums[wLevelIndex] != getText("message_crosssheeth_015", "(None)")){
                    var wNewHeadData = headDatas[++wIndex] = new HeadData();
                    for (var k = 0; k < wLevelIndex; k++){
                        wNewHeadData.values[k]   = wHeadData.values[k];
                        wNewHeadData.captions[k] = wHeadData.captions[k];
                    }
                    wNewHeadData.captions[wLevelIndex] = sums[wLevelIndex]; // "합계","소계"
                    wNewHeadData.functionName = sums[wLevelIndex];
                    wNewHeadData.Level = levelCnt - wLevel + 1 + 1;
                    
                    wNewHeadData.hideChild = hidden[wLevelIndex];
                    
                    var wSortKey = "";
                    for (var k = 1; k <= levelCnt; k++){
                        if (k >= wLevel){
                            wSortKey += AC  + mask(i, "0000");
                        } else {
                            wSortKey += "B" + mask(i, "0000");
                        }
                        if (k > wLevel){
                            wSortKey += AC  + mask(i, "0000");
                            wNewHeadData.merged[k - 1] = "X"; // 셀합치기 동작에 필요해서 기억해 놓음
                            wNewHeadData.captions[k - 1] = wNewHeadData.captions[wLevelIndex];
                        }
                    }
                    wNewHeadData.sortKey = wSortKey;
                    
                }
            }
        }

        headDatas.sort(sortfnHead);
        
        for (var i = 0; i < headDatas.length; i++){
            if (headDatas[i].childInfo == "NONE")
                this.setChildInfo(headDatas[i], headDatas, levelCnt, i + 1);
            // 여기서 1을 더한 이유는 sheetCol, SheetRow가 1부터 시작하기 때문이다    
        }
        
        // 더이상 필요없게된 메모리는 지운다
        heads.clear();
        
        return;
    };
    
    CrossSheetH.prototype.setChildInfo = function(headData, headDatas, levelCnt, indexNum){
        // functionname : [CrossSheetH.setChildInfo]
                           
        for (var i = 0; i < headDatas.length; i++){
            if (headDatas[i].childInfo == "NONE") continue;
            var wHeadData = headDatas[i];
            var wChecked = true;
            for (wLevel = 1; wLevel < levelCnt; wLevel++){
                var wLevelIndex = wLevel - 1;
                if (wHeadData.values[wLevelIndex] != "" && 
                   (headData.values[wLevelIndex] != wHeadData.values[wLevelIndex])){
                   wChecked = false;
                   break;
                }
            }
            
            if (!wChecked) continue;
            
            wHeadData.childInfo += (wHeadData.childInfo.length > 0 ? "," : "") + indexNum;
        }
        return;
    };

    // 데이터를 넣을 빈셀과 빈 헤더셀들을 만든다. 셀들의 Span은 아직 없다.
    CrossSheetH.prototype.makeBlankCells = function(){
        // functionname : [CrossSheetH.makeBlankCells]
                           
    	// MaxCols와 MaxRows를 계산
        this.maxRows = this.headDatas.length; 
        this.maxCols = 0;
        for (var wStepNum = 1; wStepNum < this.stepHeadDatas.length; wStepNum++){
            this.maxCols += this.stepHeadDatas[wStepNum].length;
        }
    	
        // this.headCols와 this.headRows를 계산
    	var wTables = this.tagObject.getElementsByTagName("table");
        var wArrStrCellLen = (this.tagObject.getAttribute("cellSize") || "").split(";");
        for (var i = 0; i <= 3;i++){
            var wTable = wTables[i];
            var wTableRow = null;var wCell = null;
    	
            var ColsTo = this.headCols + (i == ROW_TABLE || i == FIX_TABLE ? this.frozenCols : this.maxCols + this.remarkCols);
            var RowsTo = this.headRows + (i == COL_TABLE || i == FIX_TABLE ? this.frozenRows : this.maxRows + this.remarkRows);
            
            for (var wRow = 0; wRow < RowsTo; wRow++){
                // 줄을 선택한다, 없으면 만든후 선택한다
                if (wTable.tBodies[0].rows.length <= wRow) {
                	wTableRow = wTable.insertRow(wRow);
                } else {
                	wTableRow = wTable.tBodies[0].rows[wRow];
                }
                wTableRow.style.height = 19 + "px";
                
                for (var wCol = 0; wCol < ColsTo; wCol++){
                    if (wTableRow.cells.length <= wCol)  {
                    	wCell = wTableRow.insertCell(wCol);
                    } else {
                    	wCell = wTableRow.cells[wCol];
                    }
                         
                    wCell.innerText = " ";
                    if (i == DATA_TABLE) wCell.setAttribute("value", "");
                    wCell.vAlign = "middle";
//                    wCell.vAlign = "baseline";
                    
                    // 헤더셀들은 셀사이즈를 주어 Span에 대비한다
                    if (wRow < this.headRows) {
                        wCell.style.width = 50 + "px";
                        wCell.className = "HeadLevel" + (wRow + 1);
                        wCell.innerHTML = "&nbsp;";
                        wArrStrCellLen[wRow] = "50" + "px";
                    } else if (wCol < this.headCols) {
                        wCell.className = "HeadLevel" + (wCol + 1);
                        wCell.innerHTML = "&nbsp;";
                    }
                }
            }
                    
            wTable.style.width = (ColsTo * (50 + GAP_BETWEEN_CELL) + GAP_BETWEEN_CELL) + "px";
            
            if (i == DATA_TABLE)
                this.tagObject.setAttribute("cellSize", wArrStrCellLen.join(";"));    
                
        }
        return;
    };

    CrossSheetH.prototype.makeRowTitle = function(){
        // functionname : [CrossSheetH.makeRowTitle]
        
        var wArrHeadDatas = this.headDatas;
    
    	var dataTableBody = this.dataTable.tBodies[0];
    	var rowHeadTableBody = this.rowHeadTable.tBodies[0];
    	var dataTableRow = null;
    	var rowHeadTableRow = null;
    	var wCell = null;
    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wRowNum = i + this.headRows;
    	    var wHeadData = wArrHeadDatas[i];
    	    var wHeadData1 = (wArrHeadDatas[i+1] == undefined ? "" : wArrHeadDatas[i+1]);
    	    dataTableRow = dataTableBody.rows[wRowNum];
    	    rowHeadTableRow = rowHeadTableBody.rows[wRowNum];
    		
    	    for (var j = 0; j < this.headCols; j++){
    	        var wColNum = j;
    		
                wCell = dataTableRow.cells[wColNum];
                wCell.innerText = wHeadData.captions[j];
                wCell.setAttribute("value", wHeadData.values[j]);
    	        
                wCell = rowHeadTableRow.cells[wColNum];
                wCell.innerText = wHeadData.captions[j];
//                wCell.setAttribute("NeedDel", (wColNum > 0 && (wHeadData.values[j] == wHeadData.values[j - 1] && wHeadData.captions[j] == wHeadData.captions[j - 1]) ? "true" : "false"));
                wCell.setAttribute("NeedDel", (wColNum > 0 && 
                		(wHeadData.captions[j] == wHeadData.captions[j - 1]) &&
                		(wHeadData.captions[j - 1] != (wHeadData1 != "" ? wHeadData1.captions[j - 1] : "")) ||
                		wHeadData.merged[j] == "X" ? "true" : "false"));
//                		(wHeadData.values[j] == wHeadData.values[j - 1] && wHeadData.captions[j] == wHeadData.captions[j - 1]) &&
//                		(wHeadData.values[j - 1] != (wHeadData1 != "" ? wHeadData1.values[j - 1] : "") && wHeadData.captions[j - 1] != (wHeadData1 != "" ? wHeadData1.captions[j - 1] : "")) ? "true" : "false"));
    	    }
    	    
    	    for (var wColNum = this.headCols; wColNum < this.headCols + this.maxCols; wColNum++){
    	        if (wHeadData.Level > 1)
    	        	dataTableRow.cells[wColNum].className = "CSumBack" + wHeadData.Level;
    	    }
    	    
    	}
    	
    	/**
		 * 2019-05-10 jaeik 로우타이틀 채우기
		 */
    	var colHeadTableBody = this.colHeadTable.tBodies[0];
        var fixCellTableBody = this.fixCellTable.tBodies[0];
    	var rowTitle = this.dataObject.head.rowTitle;
    	if (rowTitle != null && rowTitle.length > 0) {
    		for (var i = 0; i < rowTitle.length; i++){
        	    var wRowNum = i;
        	    var wHeadData = rowTitle[rowTitle.length-i-1];
        	    var wHeadData1 = (rowTitle[rowTitle.length-i] == undefined ? "" : rowTitle[rowTitle.length-i]);
        	    dataTableRow = dataTableBody.rows[wRowNum];
        	    rowHeadTableRow = rowHeadTableBody.rows[wRowNum];
        	    colHeadTableRow = colHeadTableBody.rows[wRowNum];
        	    fixCellTableRow = fixCellTableBody.rows[wRowNum];
        	    
        	    for (var j = 0; j < this.headCols; j++){
        	        var wColNum = j;
        		
                    wCell = dataTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("value", wHeadData[j]);
        	        
                    wCell = rowHeadTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("NeedDel", (wColNum > 0 && 
                    		(wHeadData[j] == wHeadData[j - 1]) &&
                    		(wHeadData[j - 1] != (wHeadData1 != "" ? wHeadData1[j - 1] : "")) ? "true" : "false"));
                    
                    wCell = colHeadTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("NeedDel", (wColNum > 0 && 
                    		(wHeadData[j] == wHeadData[j - 1]) &&
                    		(wHeadData[j - 1] != (wHeadData1 != "" ? wHeadData1[j - 1] : "")) ? "true" : "false"));
                    
                    wCell = fixCellTableRow.cells[wColNum];
                    wCell.innerText = wHeadData[j];
                    wCell.setAttribute("NeedDel", (wColNum > 0 && 
                    		(wHeadData[j] == wHeadData[j - 1]) &&
                    		(wHeadData[j - 1] != (wHeadData1 != "" ? wHeadData1[j - 1] : "")) ? "true" : "false"));
        	    }
        	}
    	}
    		
        return;
    };

    CrossSheetH.prototype.makeColTitles = function(stepNum, decimal, startNum){
        // functionname : [CrossSheetH.makeColTitles]

        var wStartNum = startNum[0];
        var wArrHeadDatas = this.stepHeadDatas[stepNum];
    	var wRCs = "";

    	var dataTableBody = this.dataTable.tBodies[0];
    	var colHeadTableBody = this.colHeadTable.tBodies[0];
    	var wCell = null;
    	
    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wColNum = wStartNum + i;
    	    var wSheetColNum = wColNum - this.headCols + 1; 
    	    var wHeadData = wArrHeadDatas[i];
    	    var wHeadData1 = (wArrHeadDatas[i+1] == undefined ? "" : wArrHeadDatas[i+1]);
        
    	    for (var j = 0; j < this.headRows; j++){
    	        var wRowNum = j;
        
                wCell = dataTableBody.rows[wRowNum].cells[wColNum];
                if (typeof wCell == "undefined") continue;
                wCell.innerText = wHeadData.captions[j];
                wCell.setAttribute("value", wHeadData.values[j]);
                wCell.setAttribute("NeedDel", (wColNum > 0 && (wHeadData.values[j] == wHeadData.values[j - 1] && wHeadData.captions[j] == wHeadData.captions[j - 1]) ? "true" : "false"));
    	        
                wCell = colHeadTableBody.rows[wRowNum].cells[wColNum];
                wCell.innerText = wHeadData.captions[j];
                wCell.setAttribute("NeedDel", (wRowNum > 0 && 
                		(wHeadData.captions[j] == wHeadData.captions[j - 1]) &&
                		(wHeadData.captions[j-1] != (wHeadData1 != "" ? wHeadData1.captions[j - 1] : "")) ? "true" : "false"));
//                		(wHeadData.values[j] == wHeadData.values[j - 1] && wHeadData.captions[j] == wHeadData.captions[j - 1]) &&
//                		(wHeadData.values[j-1] != (wHeadData1 != "" ? wHeadData1.values[j - 1] : "") && wHeadData.captions[j-1] != (wHeadData1 != "" ? wHeadData1.captions[j - 1] : "")) ? "true" : "false"));
    	    }

    	    for (var wRowNum = this.headRows; wRowNum < this.maxRows + this.headRows; wRowNum++){
    	        wCell = dataTableBody.rows[wRowNum].cells[wColNum];
    	        wCell.setAttribute("decimal", decimal);
    	        if (wHeadData.Level > 1)
    	            wCell.className = "CSumBack" + wHeadData.Level + " CSumLineR" + wLevel;
    	    }
        
            if (wHeadData.childInfo == "NONE") {
                if (wRCs.length > 0) wRCs += ",";
                wRCs += "CELL(\"RXXC" + wSheetColNum + "\")";
            }

    	    wColNum++;
    	}

    	this.stepRCs[stepNum] = wRCs;
    	startNum[0] = wColNum;

        return;
    };

    CrossSheetH.prototype.fillColData = function(stepNum, stepObject){
        // functionname : [CrossSheetH.fillColData]
        
        var wStartNum = this.stepstartNums[stepNum];
        var wFieldPoint = stepObject.fieldPoint;
        var wRowLevelCnt = this.rowLevelCnt;
        var wColLevelCnt = stepObject.levelCnt;
        
        var keyCount     = 0;
        var headKeyCount = 0;
        var bodyKeyCount  = 0;

    	var wArrDatas = stepObject.datas; 
	    // key count 계산
        if (wArrDatas.length >= 1){
            for (var i = 1; wArrDatas[0].length;i++) {
            	if (wArrDatas[0][i] == null) break; 
            	keyCount++;
            }
        }

	    // 시트 해더 데이터를 정렬한다 
	    var startKeyPos = wRowLevelCnt - wFieldPoint;
        if (this.headDatasSorted == null){
	    	this.headDatasSorted = sortedArrayWithOrderTag(this.headDatas, startKeyPos, wRowLevelCnt, wColLevelCnt);
	    }
        var wArrHeadDatas1 = this.headDatasSorted;
        
        startKeyPos = wColLevelCnt - (keyCount - wFieldPoint);
	    var wArrHeadDatas2 = stepObject.headDatasSorted = sortedArrayWithOrderTag(this.stepHeadDatas[stepNum], startKeyPos, wColLevelCnt, wStartNum);
	    
        headKeyCount = wFieldPoint;
        bodyKeyCount = keyCount - wFieldPoint;
        
        // 내부변수 선언 
        var wData = null; var wValue = null; var wWorkKey = null;
        var wData1 = null; var wCompKey = null;
        var wColNum = -1; var wRowNum = -1; 
        
        var wRowArrData = null; var wColArrData = null;
        var dataTableBody = this.dataTable.tBodies[0];
        
        for (var i = 0; i < wArrDatas.length; i++){
            wData = wArrDatas[i];
            wValue = wData[0];
            
            // 줄번호 찾기 
            wWorkKey = wData.slice(1, wFieldPoint + 1); 
            wRowArrData = searchArray(wArrHeadDatas1, wWorkKey);
            wRowNum = (wRowArrData != null ? wRowArrData[wRowArrData.length - 1] : -1);
            // 칼럼번호 찾기
            if (!stepObject.isSQL){
            	wColNum = wStartNum;
            } else {
                wWorkKey = wData.slice(headKeyCount + 1, keyCount + 1); 
                wColArrData = searchArray(wArrHeadDatas2, wWorkKey);
                wColNum = (wColArrData != null ? wColArrData[wColArrData.length - 1] : -1);
            }
            
            
            if (wRowNum >= 0 && wColNum >= 0){
                var wCell = dataTableBody.rows[wRowNum].cells[wColNum];
                wCell.setAttribute("value", wValue);
                if (("" + wValue).isNum())  { 
                	var decemal = parseInt(1 * wCell.getAttribute("decimal"));
                    wCell.innerText = mask(wValue, "###,###,###,###,##0" + (decemal > 0 ? ".0000000000".substring(0, decemal + 1) : ""));
                    wCell.align     = "right";
                } else { 
                    wCell.innerText = wValue;
                    wCell.align     = "left";
                }
            }
        }

        if (wWorkKey) wWorkKey.clear();
//        if (wArrHeadDatas2) wArrHeadDatas2.clear(); 
//        wArrHeadDatas2 = null;
        
        return;
    };

    CrossSheetH.prototype.makeColFormula = function(stepNum, stepObject){
        // functionname : [CrossSheetH.makeColFormula]\
    	
        var dataTableRows = this.dataTable.tBodies[0].rows;
        
        // 산식중 괄호를 찾아낸다
        var wFormula = stepObject.datas[0][0];
        while (wFormula.indexOf("( ") >= 0) wFormula.replaceWord("( ","(");
        while (wFormula.indexOf(" )") >= 0) wFormula.replaceWord(" )",")");
        
        // 괄호의 내용을 RC타입의 ","문자 연결열로 변환한다.
        // R은 변화하고 C는 고정이다 RnCXX로 
        for (var wStepNum = 1; wStepNum < this.stepRCs.length; wStepNum++){
           while (wFormula.indexOf("(" + wStepNum + ")") >= 0) 
               wFormula = wFormula.replaceWord("(" + wStepNum + ")","(" + this.stepRCs[wStepNum] + ")");
        }
        
        // 칼럼별로 루핑하며 산식을 넣는다(합계셀은 제외)
        // RnCXX의 XX를 칼럼번호로 변환
        var wStartNum = this.stepstartNums[stepNum];

        var wRowLevelCnt = stepObject.levelCnt;
        for (var i = 0; i < this.headDatas.length; i++){
            if (this.headDatas[i].childInfo == "NONE"){
                var wHardColNum = wStartNum;
                var wHardRowNum = this.headRows + i;
                var wRowNum = i + 1;
                
                var wCell = dataTableRows[wHardRowNum].cells[wHardColNum];
                wCell.setAttribute("formula", wFormula.replaceWord("XX" , wHardRowNum + ""));
            }
        }
        return;
    };

    CrossSheetH.prototype.makeRowSums = function(){
        // functionname : [CrossSheetH.makeColFormula]

        var wArrHeadDatas = this.headDatas;
        var dataTableRows = this.dataTable.tBodies[0].rows;
    	
    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wRowNum = i + this.headRows;
    	    var wHeadData = wArrHeadDatas[i];
            
            // 산식을 먼저 만든다. 
            if (wHeadData.childInfo != "NONE"){
                var wArrRowNums = wHeadData.childInfo.split(",");
                var wFormula = "";
                var wLastRC  = "";
    
                for (var j = 0; j < wArrRowNums.length; j++){
                    if (j > 0) wFormula += ",";
                    var wwRowNum = parseInt(wArrRowNums[j]) + this.headRows - 1;
                    wFormula += "CELL(\"R" + wwRowNum + "CXX\")";
                    wLastRC   = "CELL(\"R" + wwRowNum + "CXX\")";
                }

                if (wHeadData.functionName == getText("message_crosssheeth_010", "합계") || wHeadData.functionName == getText("message_crosssheeth_016", "Sum")){
                    wFormula = "SUM(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_011", "평균") || wHeadData.functionName == getText("message_crosssheeth_017", "Average")){
                    wFormula = "AVG(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_012", "최대값") || wHeadData.functionName == getText("message_crosssheeth_018", "Max Value")){
                    wFormula = "MAX(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_013", "최소값") || wHeadData.functionName == getText("message_crosssheeth_019", "Min Value")){
                    wFormula = "MIN(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_014", "최종값") || wHeadData.functionName == getText("message_crosssheeth_020", "Last value")){
                    wFormula = wLastRC;
                }
                
                // 셀에 산식값 
                for (var j = 0; j < this.maxCols; j++){
                    var wColNum = this.headCols + j;
                    var wSheetColNum = j + 1;
                    var wCell = dataTableRows[wRowNum].cells[wColNum];
                    wCell.setAttribute("formula", wFormula.replaceWord("XX" , wColNum + ""));
                   
                    // this.addToFormulaRefs(wRowNum, wColNum, wCell.formula);
                }
            }
            
    	}

        return;
    };
    
    CrossSheetH.prototype.makeStepSums = function(stepNum){
        // functionname : [CrossSheetH.makeStepSums]

        var wStartNum = this.stepstartNums[stepNum];
        var wArrHeadDatas = this.stepHeadDatas[stepNum];
    	var dataTableRows = this.dataTable.tBodies[0].rows;
    	
    	for (var i = 0; i < wArrHeadDatas.length; i++){
    	    var wColNum = wStartNum + i;
    	    var wHeadData = wArrHeadDatas[i];
    	    
            // 산식을 먼저 만든다. 
            if (wHeadData.childInfo != "NONE"){
                var wArrColNums = wHeadData.childInfo.split(",");
    	    
                var wFormula = "";
                var wLastRC  = "";
                for (var j = 0; j < wArrColNums.length; j++){
                    if (j > 0) wFormula += ",";
                    wFormula += "CELL(\"RXXC" + (wStartNum + parseInt(wArrColNums[j], 10) - 1) + "\")";
                    wLastRC   = "CELL(\"RXXC" + (wStartNum + parseInt(wArrColNums[j], 10) - 1) + "\")";
                }
                
                if (wHeadData.functionName == getText("message_crosssheeth_010", "합계") || wHeadData.functionName == getText("message_crosssheeth_016", "Sum")){
                    wFormula = "SUM(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_011", "평균") || wHeadData.functionName == getText("message_crosssheeth_017", "Average")){
                    wFormula = "AVG(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_012", "최대값") || wHeadData.functionName == getText("message_crosssheeth_018", "Max Value")){
                    wFormula = "MAX(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_013", "최소값") || wHeadData.functionName == getText("message_crosssheeth_019", "Min Value")){
                    wFormula = "MIN(" + wFormula + ")";
                } else if (wHeadData.functionName == getText("message_crosssheeth_014", "최종값") || wHeadData.functionName == getText("message_crosssheeth_020", "Last value")){
                    wFormula = wLastRC;
                }
                
                // 셀에 산식값 
                for (var j = 0; j < this.maxRows; j++){
                    var wRowNum = this.headRows + j;
                    var wSheetRowNum = j + 1;
                    var wCell = dataTableRows[wRowNum].cells[wColNum];
                    wCell.setAttribute("formula", wFormula.replaceWord("XX" , wRowNum + ""));
                    // this.addToFormulaRefs(wRowNum, wColNum, wCell.formula);
                }
            }
            
    	}

        return;
    };
    
    CrossSheetH.prototype.makeStepRemarks = function(stepNum, remark){
        // functionname : [CrossSheetH.makeStepRemarks]

        if (this.remarkRows == 0) return;
        if ((remark || "").trim().length == 0) return;
        
        var dataTableRows = this.dataTable.tBodies[0].rows;
        
        var wStartNum = this.stepstartNums[stepNum];
        var wEndNum = (stepNum < this.stepstartNums.length - 1 ? this.stepstartNums[stepNum + 1] - 1: this.headCols + this.maxCols - 1);
        
    	var wDataTable = this.dataTable;    
    	for (var i = wStartNum; i <= wEndNum; i++){
            var wColNum = i;
            var wRowNum = this.headRows + this.maxRows + this.remarkRows - 1;
    	    
            if (i == wEndNum)
            	dataTableRows[wRowNum].cells[wColNum].innerText = remark;
    	}
        return;
    };

    CrossSheetH.prototype.adjustColWidth = function(){
        // functionname : [CrossSheetH.adjustColWidth]

    	var dataTableRows = this.dataTable.tBodies[0].rows;
    	var colTableRows = this.colHeadTable.tBodies[0].rows;
    	var rowTableRows = this.rowHeadTable.tBodies[0].rows;
    	var fixTableRows = this.fixCellTable.tBodies[0].rows;
    	
    	//for (var wColNum = this.headCols; wColNum < this.headCols + this.maxCols + this.remarkCols; wColNum++){
    	for (var wColNum = 0; wColNum < this.headCols + this.maxCols + this.remarkCols; wColNum++){
        	var wMaxLen = 50;
        	//for (var wRowNum = this.headRows; wRowNum < this.headRows + this.maxRows; wRowNum++){
//        	for (var wRowNum = 0; wRowNum < this.headRows + this.maxRows; wRowNum++){
//       	for (var wRowNum = 0; wRowNum < this.headRows + this.maxRows + this.remarkRows; wRowNum++){
      		for (var wRowNum = (this.headRows-1); wRowNum < this.headRows + this.maxRows + this.remarkRows; wRowNum++){
//                var wText = dataTableRows[wRowNum].cells[wColNum].innerText || "0";
//                var wByteLength = wText.bytes();
//                var WIDTH_PLUS = ((/[A-Z]/).test(wText) ? 1 : 0);	// 문자에 대문자가 있는 경우 폰트를 +1 해준다
//        	    wMaxLen = (wMaxLen < wByteLength * (FONT_WIDTH + WIDTH_PLUS) ? wByteLength * (FONT_WIDTH + WIDTH_PLUS) : wMaxLen);
       			var wTextPixel = this.getTextLengthInPixel(dataTableRows[wRowNum].cells[wColNum]);
       			wMaxLen = (wMaxLen < wTextPixel ? wTextPixel : wMaxLen);
    	    } 
        	
//        	wMaxLen += 10;	//2019-03-28 jaeik 좌우padding 사이즈 만큼 늘려줌
        	wMaxLen += 20;	//2019-12-03 jaeik 좌우padding 사이즈 만큼 늘려줌
    	    
            // 헤드 칼럼들만의 사이즈를 조정한다
        	for (var wRowNum = 0; wRowNum < this.headRows; wRowNum++){
        		dataTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
        		colTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
        		dataTableRows[wRowNum].cells[wColNum].style.maxWidth = wMaxLen + "px";
        		colTableRows[wRowNum].cells[wColNum].style.maxWidth = wMaxLen + "px";
                if (wColNum < this.headCols){
                	dataTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                	colTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                	rowTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                	fixTableRows[wRowNum].cells[wColNum].style.width = wMaxLen + "px";
                }
    	    } 
    	}
    	
    	// 테이블 사이즈 조정
    	this.adjustTableWidth();
    	
        return;
    };
    
    CrossSheetH.prototype.getTextLengthInPixel = function(cell) {
        var myId = 'my_span_ruler';
        var ruler = document.getElementById(myId);
       
        if (!ruler) {
            ruler = document.createElement('span');
            ruler.id = myId;
            // 안보이게
            ruler.setAttribute('style', 'visibility:hidden; white-space:nowrap; position:absolute; left:-9999px; top: -9999px;');
            document.body.appendChild(ruler);
        }
       
        // 폰트 스타일
        ruler.style.font = getComputedStyle(cell).font;
        ruler.innerText = cell.innerText || "0";
       
        return ruler.offsetWidth;
    };
    
    CrossSheetH.prototype.adjustTableWidth= function(){
        // functionname : [CrossSheetH.adjustTableWidth]

    	var wTableWidth = GAP_BETWEEN_CELL;
    	var wTableWidth1 = GAP_BETWEEN_CELL;
    	var wTableWidthString = "";

        var wDataTableBody = this.dataTable.tBodies[0];
        var wMaxColNum = wDataTableBody.rows[0].cells.length;
        for (var wColNum = 0; wColNum < wMaxColNum; wColNum++){
    	    var wWidth = parseIntSize(wDataTableBody.rows[0].cells[wColNum].style.width);
    	    wTableWidth += wWidth + (wWidth == 0 ? 0 : GAP_BETWEEN_CELL);
    	    if (wColNum < this.headCols) 
    	    	wTableWidth1 += wWidth + (wWidth == 0 ? 0 : GAP_BETWEEN_CELL);
    	    wTableWidthString += (wColNum == 0 ? "" : ";") + wWidth;
        }
    
    	this.tagObject.setAttribute("cellSize", wTableWidthString);
        this.dataTable.style.width = wTableWidth + "px";
        this.colHeadTable.style.width = wTableWidth + "px";
        this.rowHeadTable.style.width = wTableWidth1 + "px";
        this.fixCellTable.style.width = wTableWidth1 + "px";
        return;    
    };
    
    CrossSheetH.prototype.setRowTitleMerge = function(tableBody){
    	// functionname : [CrossSheetH.setRowTitleMerge]
    	
    	var wColSpan = 1;
    	for (var wRowNum = 0; wRowNum < this.headRows; wRowNum++){
    	    var wRow = tableBody.rows[wRowNum];
    	    
    	    for (var i = this.headCols-1; i >= 0; i--) {
       	    	var col = wRow.cells[i];
       	    	var wWidthToAdd = 0;
       	    	
       	    	if (col.getAttribute("NeedDel") == "false") {
       	    		wColSpan = 1;
           	    	for (var wColNum = i+1; wColNum < this.headCols; wColNum++) {
               	    	var wCell = wRow.cells[wColNum];
               	    	if (wCell.getAttribute("NeedDel") == "false") break;
            	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
            	        	wWidthToAdd += (parseIntSize(wCell.style.width) + GAP_BETWEEN_CELL);
            	        	wColSpan++;
            	        }
               	    }
       	    	}
           	    
       	    	if (wColSpan > 1) {
       	    		col.colSpan = wColSpan;
           	    	col.style.width = (parseIntSize(col.style.width) + wWidthToAdd) + "px";
       	    	}
       	    }
       	    
           	 for (var wColNum = this.headCols-1; wColNum >= 0; wColNum--) {
        	    	var wCell = wRow.cells[wColNum];
     	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
     	        	wRow.deleteCell(wColNum);
     	        }
    	    }        	    
        }
    };

    CrossSheetH.prototype.setRowHeadSpan = function(noneCaption){
        // functionname : [CrossSheetH.setRowHeadSpan]

        var wArrHeadDatas = this.headDatas;
        var wRowHeadTableBody = this.rowHeadTable.tBodies[0];

        for (var wLevel = this.headCols; wLevel >= 1; wLevel--){
            var wColNum = wLevel - 1;
            var wRowSpan = 1;
        
    	    for (var i = wArrHeadDatas.length - 1; i >= 0; i--){ 
                var wRowNum = this.headRows + i;
                var wHeadData  = wArrHeadDatas[i];
                var wRow = wRowHeadTableBody.rows[wRowNum];
                var wCell = wRow.cells[wColNum];
        
                var wHeadData0 = (i > 0 ? wArrHeadDatas[i - 1] : new HeadData()); // 0일때 에러방지
                
                var wChecked = true;
                for (var j = 0; j <= wColNum; j++)
                    wChecked = wChecked && (wHeadData.values[j] == wHeadData0.values[j]);
                
                if (wChecked){
                    wRow.deleteCell(wColNum);
                    wHeadData.merged[wColNum] = "Y";
                    
                    wRowSpan++;

                } else {
                    if (wRowSpan > 1) {
                    	wCell.rowSpan = wRowSpan;
                    }
                    wRowSpan = 1;

                    var wColSpan = 1;
                    
                    for (var j = wColNum + 1; j <= this.headCols - 1; j++){
//                        wColSpan += (wHeadData.values[j] == "" ? 1 : 0);
                    	wColSpan += (wRow.cells[j].getAttribute("NeedDel") == "true" || wHeadData.values[j] == "" ? 1 : 0);
                    }
                    if (wColSpan > 1)  {
                        wCell.colSpan = wColSpan;
                    }
                }
            }
        }
        var wRowNum = 0;
	    var wRow = wRowHeadTableBody.rows[wRowNum];
	    var wColSpan = 1;

	    for (var wColNum = wRow.cells.length -1 ; wColNum > 0; wColNum--){
	        var wCell = wRow.cells[wColNum];
	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
	            wColSpan++;
	        }
	    }
	    wRow.cells[0].colSpan = wColSpan;
        
	    for (var wRowNum = this.headRows; wRowNum < wRowHeadTableBody.rows.length; wRowNum++){
    	    var wRow = wRowHeadTableBody.rows[wRowNum];
    	    for (var wColNum = wRow.cells.length -1 ; wColNum >= 0; wColNum--){
    	        var wCell = wRow.cells[wColNum];
    	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
    	            wRow.deleteCell(wColNum);
    	        }
    	    }
        }
       	
       	/**
       	 * 2019-05-13 jaeik 로우타이틀 rowTable,fixedTable 병합처리
       	 */
       	var rowTitle = this.dataObject.head.rowTitle;
    	if (rowTitle != null && rowTitle.length > 0) {
    		this.setRowTitleMerge(wRowHeadTableBody);
    		this.setRowTitleMerge(this.fixCellTable.tBodies[0]);    		
    	}
        
        if (this.remarkRows > 0){
            var wRowNum = wRowHeadTableBody.rows.length - 1;
            
            var wCell = wRowHeadTableBody.rows[wRowNum].cells[0];
            wCell.innerText = getText("message_crosssheeth_021", "비고");
            wCell.colSpan = this.headCols;
            
            var wRow = this.dataTable.tBodies[0].rows[wRowNum];
            for (var wColNum = this.headCols - 1; wColNum >= 0; wColNum--){
            	wRow.cells[wColNum].innerText = wCell.innerText;
            }
            
            for (var wColNum = this.headCols - 1; wColNum > 0; wColNum--){
            	wRowHeadTableBody.rows[wRowNum].deleteCell(wColNum);
            }
        }        
        
        return;
    };
    
    CrossSheetH.prototype.setColHeadSpans = function(stepNum, levelCnt, noneCaption, titleBySQL){
        // functionname : [CrossSheetH.setColHeadSpans]

        var wStartNum = this.stepstartNums[stepNum];
        var wEndNum = (stepNum < this.stepstartNums.length - 1 ? this.stepstartNums[stepNum + 1] - 1: this.headRows + this.maxRows - 1);
        var wArrHeadDatas = this.stepHeadDatas[stepNum];
        
        var wColHeadTableBody = this.colHeadTable.tBodies[0];
        
        for (var wLevel = levelCnt - 1; wLevel >= 1; wLevel--){
            // var wRowNum = wLevel - 1;
            var wRowNum = wLevel;
            var wColSpan = 1;
            var wWidthToAdd = 0;

    	    for (var i = wArrHeadDatas.length - 1; i >= 0; i--){ 
                var wColNum = wStartNum + i;
                var wHeadData  = wArrHeadDatas[i];
                var wHeadData0 = (i > 0 ? wArrHeadDatas[i - 1] : new HeadData()); // 0일때 에러방지

                var wChecked = true;
                for (var j = 0; j <= wLevel - 1; j++)
                    wChecked = wChecked && (wHeadData.values[j] == wHeadData0.values[j]);
                
                if (wChecked){
                    wWidthToAdd += (parseIntSize(wColHeadTableBody.rows[wRowNum].cells[wColNum].style.width) + GAP_BETWEEN_CELL);
                    wColHeadTableBody.rows[wRowNum].deleteCell(wColNum);
                    wHeadData.merged[wRowNum] = "Y";
                    
                    wColSpan++;
                } else {
                    var wCell = wColHeadTableBody.rows[wRowNum].cells[wColNum];
                    if (typeof wCell == "undefined") continue;
                    wCell.colSpan = wColSpan;
                    wCell.style.width = (parseIntSize(wCell.style.width) + wWidthToAdd) + "px";
                                     
                    wColSpan = 1;
                    wWidthToAdd = 0;
                    
                    var wRowSpan = 1;
                    for (var j = wRowNum + 1; j <= this.headRows; j++)
//                         wRowSpan += (wHeadData.values[j] == "" ? 1 : 0);
                    	wRowSpan += ((typeof wColHeadTableBody.rows[j].cells[wColNum] != "undefined" && wColHeadTableBody.rows[j].cells[wColNum].getAttribute("NeedDel") == "true") || wHeadData.values[j] == "" ? 1 : 0);

                    if (wRowSpan > 1){
                        wCell.rowSpan = wRowSpan;
                    }
                }
            }
        }

    	if (!titleBySQL){  // 쿼리에 의하지 않고 인위적으로 타이틀을 만든 경우라면 
            var wColNum = wStartNum;
 	        var wRowSpan = 1;

    	    //for (var wRowNum = this.headRows -1 ; wRowNum > 0; wRowNum--){
        	for (var wRowNum = this.headRows ; wRowNum > 1; wRowNum--){
           	    var wRow = wColHeadTableBody.rows[wRowNum];
     	        var wCell = wRow.cells[wColNum];
    	        if (wCell.getAttribute("NeedDel") == "true" || wCell.innerText == ""){
    	            wRowSpan++;
    	        }
    	    }
    	    wColHeadTableBody.rows[1].cells[wColNum].rowSpan=wRowSpan;
        }
        
        
    	for (var wRowNum = 1; wRowNum <= this.headRows; wRowNum++){
    	    var wRow = wColHeadTableBody.rows[wRowNum];
    	    for (var wColNum = wRow.cells.length - 1; wColNum >= wStartNum; wColNum--){
    	        if (wRow.cells[wColNum].getAttribute("NeedDel") == "true" || wRow.cells[wColNum].innerText == ""){
    	            wRow.deleteCell(wColNum);
    	        }
    	    }
        }
        return;
    };

    // 여기서 부터는 열숨기기
    CrossSheetH.prototype.hideChildCols = function(cell, showAction){
        // functionname : [CrossSheetH.hideChildCols]


        var wRowNum = cell.parentNode.rowIndex;
        var wColNum = cell.cellIndex;
        
        var wHeadIndex = this.findHeadIndex(wColNum, wRowNum);
        
        var wArrHeadDatas = this.headDatas;
        var wKeyData = ["","","","",""];
           
        var wHeadData = wArrHeadDatas[wHeadIndex];
        for (var j = 0; j <= pLevelNum; j++){
            wKeyData[j] = wHeadData.values[j];
        } 
        
        for (var wHeadIndex = 0; wHeadIndex < this.headDatas.length; wHeadIndex++){
            if (wArrHeadDatas[wHeadIndex].values[pLevelNum].length == 0) continue;

            var wChecked = true;
            var wHeadDataTo = wArrHeadDatas[wHeadIndex];
            for (var j = 0; j <= pLevelNum; j++){
                wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
            } 

            if (wChecked && showAction == ACTION_HIDE) {
                this.hideCol(wHeadIndex);
            } else if (wChecked && showAction == ACTION_SHOW) {
                this.showCol(wHeadIndex);
            }
        }
        
        // 전체 테이블 크기정보 갱신
    	this.adjustTableWidth();
    };
    
    CrossSheetH.prototype.hideColLevels = function(levelCount, levelNum){
        // functionname : [CrossSheetH.hideChildCols]

        var wArrHeadDatas = this.headDatas;
        var wKeyData = ["","","","",""];

        for (var i = 0; i < this.headDatas.length; i++){
            if (!wArrHeadDatas[i].hideChild) continue;
            
            var wHeadData = wArrHeadDatas[i];
            for (var j = 0; j < levelNum; j++){
                wKeyData[j] = wHeadData.values[j];
            } 
            
            for (var wHeadIndex = 0; wHeadIndex < this.headDatas.length; wHeadIndex++){
                if (wArrHeadDatas[wHeadIndex].values[levelNum].length == 0) continue;

                var wChecked = true;
                var wHeadDataTo = wArrHeadDatas[wHeadIndex];
                for (var j = 0; j < levelNum; j++){
                    wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
                } 
                
                if (wChecked) this.hideCol(wHeadIndex);
            }
        }
        
        // 전체 테이블 크기정보 갱신
    	this.adjustTableWidth();
    	
        return;
    };
    
    CrossSheetH.prototype.hideCol = function(headIndex){
        // functionname : [CrossSheetH.hideCol]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wColNum = this.headCols + headIndex;
        var wWidth = parseIntSize(this.dataTable.tBodies[0].rows[0].cells[wColNum].style.width) + "px";
        wCell.setAttribute("oldWidth", wWidth);
        
        for (var wLevel = 1; wLevel <= this.colLevelCnt; wLevel++){
            var wRowNum = wLevel - 1;
            var wCellIndex = this.FindCellIndex(headIndex, wLevel - 1);
            if (wCellIndex >= 0){
        	    wCell = this.colHeadTable.tBodies[0].rows[wRowNum].cells[this.headCols +wCellIndex];
                var wCurrnetWidth = parseIntSize(wCell.style.width);
                wCell.style.width = (wCurrnetWidth - wWidth 
                                  - (wCurrnetWidth > wWidth ? GAP_BETWEEN_CELL : 0)) + "px";
                
            }
        }
        
        for (var wRowNum = 0; wRowNum < this.dataTable.tBodies[0].rows.length; wRowNum++){
            this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum].style.width = 0 + "px";
        }
        
        return;
    };
    
    CrossSheetH.prototype.showCol = function(headIndex){
        // functionname : [CrossSheetH.showCol]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wColNum = this.headCols + headIndex;
        var wWidth = parseIntSize(this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum].oldWidth);
        
        for (var wLevel = 1; wLevel <= this.colLevelCnt; wLevel++){
            var wRowNum = wLevel - 1;
            var wHardColNum = this.headCols + this.FindCellIndex(headIndex, wLevel);

    	    wCell = this.colHeadTable.tBodies[0].rows[wRowNum].cells[wHardColNum];
            wCell.style.width = (parseIntSize(wCell.style.width) + wWidth) + "px";
        }
        for (var wRowNum = 0; wRowNum < this.dataTable.tBodies[0].rows.length; wRowNum++){
            this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum].style.width = wWidth + "px";
        }
        
        return;
    };
    
    // 좌측상단의 셀을 통합한다
    CrossSheetH.prototype.mergeUpperMost = function(){
        // functionname : [CrossSheetH.mergeUpperMost]

        var wTable = this.fixCellTable;
        var firstRow  = wTable.tBodies[0].rows[0];
        var firstCell = firstRow.cells[0];
        var wHeight = 0;
        var wWidth  = parseIntSize(wTable.style.width);
        
        for (var wRow = 0; wRow < wTable.tBodies[0].rows.length; wRow++){
//            wHeight += parseIntSize(wTable.tBodies[0].rows[0].style.height) + GAP_BETWEEN_CELL; 
        	wHeight += parseIntSize(wTable.tBodies[0].rows[0].style.height);
        }

        var wTable = this.fixCellTable;
        for (var wRow = wTable.tBodies[0].rows.length - 1; wRow > 0; wRow--){
            wTable.deleteRow(wRow);
        }
        
        var wRow = wTable.tBodies[0].rows[0];
        wRow.style.display = "";
        for (var wColNum = wRow.cells.length - 1; wColNum > 0; wColNum--){
            wRow.deleteCell(wColNum);
        }
        firstCell.style.width = wWidth + "px";
        firstRow.style.height = wHeight + "px";
        return;
    };
    
    // 여기서 부터는 줄숨기기
    CrossSheetH.prototype.hideStepChildRows = function(cell, showAction){
        // functionname : [CrossSheetH.hideStepChildRows]

        var wRowNum = cell.parentNode.rowIndex;
        var wColNum = cell.cellIndex;
        
        var wStepNum = this.findStepNum(wRowNum, wColNum);
        var wHeadIndex = this.findHeadIndex(wRowNum, wColNum, wStepNum);
        
        var wArrHeadDatas = this.stepHeadDatas[wStepNum];
        var wKeyData = ["","","","",""];
           
        var wHeadData = wArrHeadDatas[wHeadIndex];
        for (var j = 0; j <= levelNum; j++){
            wKeyData[j] = wHeadData.values[j];
        } 
        
        for (var wHeadIndex = 0; wHeadIndex <= this.headDatas.length; wHeadIndex++){
            if (wArrHeadDatas[wHeadIndex].values[levelNum].length == 0) continue;

            var wChecked = true;
            var wHeadDataTo = wArrHeadDatas[wHeadIndex];
            for (var j = 0; j <= levelNum; j++){
                wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
            } 
            
            if (wChecked && showAction == ACTION_HIDE) {
                this.hideRow(wHeadIndex, wStepNum);
            } else if (wChecked && showAction == ACTION_SHOW) {
                this.showRow(wHeadIndex, wStepNum);
            }
        }
        
        return;
    };
    
    CrossSheetH.prototype.hideStepRowLevels = function(levelCount, levelNum, stepNum){
        // functionname : [CrossSheetH.hideStepRowLevels]

        var wArrHeadDatas = this.stepHeadDatas[stepNum];
        var wKeyData = ["","","","",""];
        
        for (var i = 0; i <= this.headDatas.length; i++){
            if (!wArrHeadDatas[i].hideChild) continue;
            
            var wHeadData = wArrHeadDatas[i];
            for (var j = 0; j <= levelNum; j++){
                wKeyData[j] = wHeadData.values[j];
            } 
            
            for (var wHeadIndex = 0; wHeadIndex <= this.headDatas.length; wHeadIndex++){
                if (wArrHeadDatas[wHeadIndex].values[levelNum].length == 0) continue;

                var wChecked = true;
                var wHeadDataTo = wArrHeadDatas[wHeadIndex];
                for (var j = 0; j <= levelNum; j++){
                    wChecked = wChecked && (wKeyData[j] == wHeadDataTo.values[j]);
                } 
                
                if (wChecked) this.hideRow(wHeadIndex, stepNum);
            }
        }
    	
        return;
    };
    
    CrossSheetH.prototype.hideRow = function(headIndex, stepNum){
        // functionname : [CrossSheetH.hideRow]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wRowNum = this.headRows + headIndex;
        
        var wRow = this.dataTable.tBodies[0].rows[wRowNum];
        wRow.oldheight = parseIntSize(wRow.style.height);
        wRow.style.height = 0 + "px";
        
        wRow = this.colHeadTable.tBodies[0].rows[wRowNum];
        wRow.style.height = 0 + "px";
        
        return;
    };
    
    CrossSheetH.prototype.showRow = function(headIndex, stepNum){
        // functionname : [CrossSheetH.showRow]

        // 최소레벨부터 상위레벨로 돌면서 셀사이즈를 줄여나간다
        var wRowNum = this.headRows + headIndex;
        
        var wRow = this.dataTable.tBodies[0].rows[wRowNum];
        var wHeight = wRow.oldheight;
        wRow.style.height = wHeight + "px";
        wRow = this.colHeadTable.tBodies[0].rows[wRowNum];
        wRow.style.height = wHeight + "px";
        
        return;
    };


    CrossSheetH.prototype.findCellIndex = function(headIndex, hardLevel, stepNum){
        // functionname : [CrossSheetH.showRow]

        // stepNum이 생략되면 전체헤더이다
        var wArrHeadDatas = (stepNum ? this.stepHeadDatas[stepNum] : this.headDatas);
        
        // 상하로 머지된 경우 X가 붙는다
        if (wArrHeadDatas[headIndex].merged[hardLevel] == "X") return -1;
        
        var wReturn = -1;
        for (var i = 0; i <= headIndex; i++){
            wReturn += (wArrHeadDatas[i].merged[hardLevel] == "N" ? 1 : 0);
        }
        return wReturn;
    };
    
    CrossSheetH.prototype.findHeadIndex = function(cellIndex, hardLevel, stepNum){
        // functionname : [CrossSheetH.findHeadIndex]

        // stepNum이 생략되면 전체헤더이다
        var wArrHeadDatas = (stepNum ? this.stepHeadDatas[stepNum] : this.headDatas);
        var wReturn = -1; var wIndex = this.headCols - 1;
        for (var i = 0; i < wArrHeadDatas.length; i++){
            wIndex += (wArrHeadDatas[i].merged[hardLevel] ? 0 : 1);
            if (cellIndex >= wIndex) {wReturn = i; break;}
        }
        return wReturn;
    };
    
    CrossSheetH.prototype.findStepNum = function(cellIndex, hardLevel){
        // functionname : [CrossSheetH.findStepNum]

        // stepNum이 생략되면 전체헤더이다
        var wReturn = this.stepstartNums.length - 1; 
        for (var i = 1; i < this.stepstartNums.length; i++){
            if (this.stepstartNums[i] > cellIndex){
                wReturn = i - 1; break;
            }
        }
        return wReturn;
    };
    
    /***************************************************************************
        시트 함수의 동작에관한 부분이다
    ***************************************************************************/
    CrossSheetH.prototype.recalculate = function(){
            // functionname : [CrossSheetH.recalculate]

        for (var wRowNum = 1; wRowNum < this.maxRows + this.headRows; wRowNum++){
            var wRow = this.dataTable.rows[wRowNum];
            for (var wColNum = 1; wColNum < this.maxCols + this.headCols; wColNum++){
                var wCell = wRow.cells[wColNum];
                var wFormula = wCell.getAttribute("formula") || "";
                if (wFormula.length > 0){
                    this.calculateCell(wCell, wFormula);
                }
            }  
        }  
        
        return;
    };
    
    // 자기자신을 먼저 계산후에 다른 참조셀을 바꾼다
    CrossSheetH.prototype.calculateCell = function(cell, formula){
        // functionname : [CrossSheetH.calculateCell]

	    var wFormula = formula || "";

        // wLogic.clear();
    	var wCell = cell;
    	
    	wFormula = this.replaceToEasyFormula(wFormula);
        var wValue = calc(wFormula);

        if (wValue != wCell.getAttribute("value")){
            wCell.setAttribute("value", wValue);
            wCell.align = "right";
            wCell.valign = "middle";
//            wCell.valign = "baseline";
            
            var decemal = parseInt(1 * wCell.getAttribute("decimal"));
            wCell.innerText = mask(wValue, "###,###,###,###,##0" + (decemal > 0 ? ".0000000000".substring(0, decemal + 1) : "")); 

        }

        return; 
    };
    
    // 산식의 셀문자열에 셀값을 대치하여 준다 예: R1C1 -> "142" 
    CrossSheetH.prototype.replaceToEasyFormula = function(formula){
        // functionname : [CrossSheetH.replaceToEasyFormula]

        // Cell함수를 루핑하면서 계속 찾는다 
	    var wFormula = formula || "";
        // 케리지리턴이나 탭등을 제거한다 
    	wFormula = wFormula.replace(/\r\n/g," ").replace(/\t/g," ").trim();
    	
	    // 대문자로 변환
    	wFormula = wFormula.toUpperCase();
	    
        //--- 메인동작 기능-----------------------------------------------------
        var wArrRange = [0,0,0,0];
        var wMaxRows = this.maxRows;       var wMaxCols = this.maxCols;
	    while (wFormula.indexOf("CELL ") >= 0) wFormula.replaceWord("CELL ","CELL");

	    var wFuncPosition = wFormula.indexOf("CELL(");
	    while (wFuncPosition >= 0){
	        var wEndPosion = wFormula.indexOf(")", wFuncPosition);
	        var wCellString = wFormula.substring(wFuncPosition + 5, wEndPosion); //6은 "CELL("의 길이
	            wCellString = wCellString.replaceWord("\"","");
	        var wValueString = "";
	        
            // 괄호사이의 셀값을 셀값으로 바꾼다(문자와 숫자 셀타입을 구분)
	        var wArrCellRanges = wCellString.split(",");
	        for (var i=0; i < wArrCellRanges.length; i++){
                this.parseRCToRange(wArrCellRanges[i], wArrRange);
                
                for (var wRowNum = wArrRange[0]; wRowNum <= wArrRange[2]; wRowNum++){
                    var wRow = this.dataTable.rows[wRowNum];
                    for (var wColNum = wArrRange[1]; wColNum <= wArrRange[3]; wColNum++){
                        var wCell = wRow.cells[wColNum];
	                    wValueString += (wValueString.length > 0 ? "," : "") + wCell.getAttribute("value");
	                }
	            }
	        }
	        
	        wFormula = wFormula.substring(0, wFuncPosition) + wValueString + wFormula.substring(++wEndPosion);
	        
	        wFuncPosition = wFormula.indexOf("CELL(");
	    }    

        return wFormula;
    };
    
    /*--------------------------------------------------------------------------
     RC스타일의 문법 (기본 R1C1:R2C3 상대좌표 R[1]C[1]:R[3]C[4] <-커런트 셀기준
     단일셀은 :이 없다 (R1C1  R[1]C[2])
     줄선택은 R1:R2와 같다 열선택은 C1C2와 같이 표현한다
     인수중에 배열은 [Row, Col, Row2, Col2] 이다 결과를 리턴한다
    ----------------------------------------------------------------------------*/
    CrossSheetH.prototype.parseRCToRange = function(RCString, arrRange){
         // functionname : [CrossSheetH.parseRCToRange]

        // 1. 콜론으로 범위값을 분리한다 없으면시작셀값과 같은 값을 준다
        var wArrRanges = RCString.split(":");
        
        // 2. 시작셀을 파싱한다
        //    열번호가 없으면 전체열 선택이다 줄번호가 없으면 전체줄 선택이다 
        var wRange = wArrRanges[0];
        var wRowString = wRange.split("C")[0].substring(1);
        var wColString = wRange.split("C")[1];

        arrRange[0] = parseInt(wRowString, 10);
        arrRange[1] = parseInt(wColString, 10);
        
        if (wArrRanges.length == 1) {
            arrRange[2] = arrRange[0];
            arrRange[3] = arrRange[1];
        } else {
            // 3. 종료셀을 파싱한다 
            wRange = wArrRanges[1];
            wRowString = wRange.split("C")[0].substring(1);
            wColString = wRange.split("C")[1];
            
            arrRange[2] = parseInt(wRowString, 10);
            arrRange[3] = parseInt(wColString, 10);
        }
        
        return;
    };

    /* -----------------------------------------------------------------------
     데이터를 모두채운후에는 스크롤에 테이블 사이즈를 반영한다
     --------------------------------------------------------------------------*/
    CrossSheetH.prototype.resetScroll = function(){

	   	var scrollPanel = this.tagObject.getElementsByTagName("DIV")[0];
	   	var scrollChildPanel = scrollPanel.getElementsByTagName("DIV")[0];
	   	if (this.dataTable.scrollWidth == 0){
	    	var w = 1; 
	   		var h = 1;
	   		var tbody = this.dataTable.tBodies[0];
	   		for (var wRowNum = 0; wRowNum < tbody.rows.length; wRowNum++){
	   			h++;
	   			h += parseIntSize(tbody.rows[wRowNum].style.height);
	   		}
	   		var tr = tbody.rows[0];
	   		for (var wColNum = 0; wColNum < tr.cells.length; wColNum++){
	   			w++;
	   			w += parseIntSize(tr.cells[wColNum].style.width);
	   		}
	   	   	scrollChildPanel.style.width = ++w + "px";
	   	   	scrollChildPanel.style.height = ++h + "px";
	   		
	   	} else {
	   	   	scrollChildPanel.style.width = this.dataTable.scrollWidth + "px";
	   	   	scrollChildPanel.style.height = this.dataTable.scrollHeight + "px";
	   	}
	   	
    	scrollPanel.scrollTop = 0;
    	scrollPanel.scrollLeft = 0;
    	 
    };

    /* -----------------------------------------------------------------------
       여기서 부터 크로스 데이터 처리부분이다
    --------------------------------------------------------------------------*/
    CrossSheetH.prototype.analyze = function(dataObject){
        // functionname : [CrossSheetH.analyze]
    	this.dataObject = dataObject;
    
        // 없는 속성 추가
	    for (var i=1; i < dataObject.steps.length; i++){
	    	var stepObject = this.dataObject.steps[i];
	    	stepObject.headDatasSorted = null;
	    	
	    	stepObject.cellType = 0;
	    	if (stepObject.datas.length == 0){
	    		stepObject.cellType = CELLTYPE_FLOAT;
	    		
	    	} else if (stepObject.datas[0].length == 0){
	    		stepObject.cellType = CELLTYPE_FLOAT;
	    		
	    	} else if (("" + stepObject.datas[0][0]).isNum()){
	            stepObject.cellType = CELLTYPE_FLOAT;
	        } else {
	            stepObject.cellType = CELLTYPE_EDIT;
	        }
	    }
        showAjaxBox(getText("message_crosssheeth_001", "서버 데이터를 분석중입니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep1()", 10);
        return;
    };

    CrossSheetH.prototype.executeStep1 = function(){
        // functionname : [CrossSheetH.executeStep1]
        
	    // ==== 0. 시트 클리어  ============================================
	    // 줄수, 칼럼수를 1로하고 MaxRows, MaxCols를 0으로 한다 
        var wTables = this.tagObject.getElementsByTagName("table");
	    for (var i = 0; i <= 3;i++){
	        wTables[i].style.display="none";
	    } 
	    
	    this.clear();
	    
	    // ==== 1. 전역변수 세팅 ===========================================
	    this.rowLevelCnt = this.dataObject.head.levelCnt;
	    this.colLevelCnt = 0;
	    for (var wStepNum = 1; wStepNum < this.dataObject.steps.length; wStepNum++){
	        if (this.colLevelCnt < this.dataObject.steps[wStepNum].levelCnt && this.dataObject.steps[wStepNum].isSQL)
	               this.colLevelCnt = this.dataObject.steps[wStepNum].levelCnt;
	    }
	    this.headRows = this.colLevelCnt;
	    this.headCols = this.rowLevelCnt;
	    
	    // 비고난의 갯수 설정
	    if (this.dataObject.direction == "RowChange"){
	        this.remarkCols = (this.dataObject.head.needRemarks ? 1 : 0);
	    } else if (this.dataObject.direction == "ColChange"){
	        this.remarkRows = (this.dataObject.head.needRemarks ? 1 : 0);
	    }
	    
        showAjaxBox(getText("message_crosssheeth_002", "분석 데이터를 작성하는 중입니다.") ,0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep2()", 10);
	    
        return;
    };
    
    CrossSheetH.prototype.executeStep2 = function(){
        // functionname : [CrossSheetH.executeStep2]
    
        // 데이터가 들어갈 빈헤더와 셀들을 모두 만든다
        // 좌측 헤더를 만든다
	    this.makeHeads( this.dataObject.head.heads, 
			            this.dataObject.sumPosition, 
			            this.dataObject.head.sums,
			            this.dataObject.head.levelCnt, 
			            this.dataObject.head.hidden, 
			            this.headDatas);
	    
        // Step헤더를 만든다
	    for (var i=1; i < this.dataObject.steps.length; i++){
	        this.stepHeadDatas[i] = [];
	        if (this.dataObject.steps[i].isSQL){
	            this.makeHeads(this.dataObject.steps[i].heads, 
	                           this.dataObject.sumPosition, 
	                           this.dataObject.steps[i].sums, 
	                           this.dataObject.steps[i].levelCnt, 
	                           this.dataObject.steps[i].hidden, 
	                           this.stepHeadDatas[i]);
	        } else {
	            var wHeadData = this.stepHeadDatas[i][0] = new HeadData();
	            wHeadData.captions = [this.dataObject.steps[i].heads[0][5],"","","",""];
	            wHeadData.values   = ["","","","",""];
	        }
	    }

        // 시트에 집어 넣는다
	    this.makeBlankCells();
 
        showAjaxBox(getText("message_crosssheeth_003", "상단과 좌측 타이틀을 채우고 있습니다.") ,0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep3()", 10);
        return;
    };
    
    CrossSheetH.prototype.executeStep3 = function(){
        // functionname : [CrossSheetH.executeStep3]
    
	    // ==== 2. 타이틀을 먼저 만들고 ===============================
        //  2.1 왼쪽 타이틀 채우기
	    this.makeRowTitle();
	    
        
        //  2.2 스텝별 타이틀 채우기
        var wStartNum = [this.headCols];
        var wArrSteps = this.dataObject.steps;
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
        	this.stepstartNums[wStep] = wStartNum[0];
            this.makeColTitles(wStep, this.dataObject.steps[wStep].decimal, wStartNum);
        }
    
        showAjaxBox(getText("message_crosssheeth_004", "데이터를 채우는 중입니다.") ,0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep4()", 10);
        return;
    };
    
    CrossSheetH.prototype.executeStep4 = function(){
        // functionname : [CrossSheetH.executeStep4]
        

    	// ==== 3. 칼럼별로 몸통데이터를 찍는다. =============================
    	var wArrSteps = this.dataObject.steps;
	    for (var wStep = 1; wStep < wArrSteps.length; wStep++){
	        var wStepObject = wArrSteps[wStep];
	        this.mCrrentFieldTypeIsNumeric = true;
	        
	        if (wStepObject.isSQL1)
	            this.fillColData(wStep, wStepObject);
	    }
    
        showAjaxBox(getText("message_crosssheeth_005", "셀에 산식을 작성하는 중입니다.") ,0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep5()", 10);
        return;
    };
    
    CrossSheetH.prototype.executeStep5 = function(){
        // functionname : [CrossSheetH.executeStep5]
        
    	// ==== 4. 산식데이터 채우기  =============================
        //  4.1 스텝별 산식 채우기(산식)
        var wArrSteps = this.dataObject.steps;
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
	        var wStepObject = wArrSteps[wStep];
	        this.mCrrentFieldTypeIsNumeric = true;
	        if (!wStepObject.isSQL1){
	            this.makeColFormula(wStep, wStepObject);
	        }
	    }
        
        //  4.2 열단위 합계 채우기(산식)
        this.makeRowSums();
        
        //  4.3 줄단위 합계 채우기(산식)
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
            var wStepObject = wArrSteps[wStep];
            // 스템헤더와 푸터 모두 SQL로 가저와야만 산식적용
            if (wStepObject.isSQL && wStepObject.isSQL1){
                this.makeStepSums(wStep);
            }
        }
        
        //  4.4 줄단위 비고난 채우기
        for (var wStep = 1; wStep < wArrSteps.length; wStep++){
            this.makeStepRemarks(wStep, this.dataObject.steps[wStep].remark);
        }
        
        
        showAjaxBox(getText("message_crosssheeth_006", "산식을 일괄 계산하는 중입니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep6()", 10);
        return;
    };
    
    CrossSheetH.prototype.executeStep6 = function(){
        // functionname : [CrossSheetH.executeStep6]
        
        // ==== 5. 산식셀을 일괄 계산 해준다. =====================================================
        this.recalculate();
        
        showAjaxBox(getText("message_crosssheeth_007", "칼럼사이즈를 조정하고, 타이틀을 정비하는 중입니다"), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep7()", 10);
        return;
    };
    
    
    CrossSheetH.prototype.executeStep7 = function(){
        // functionname : [CrossSheetH.executeStep7]
        
        // ==== 6. 헤더 칼럼을 사이즈를 조정한다===================
        // 6.1 칼럼사이즈 조정
        this.adjustColWidth();
        
        // 6.2 줄 헤더 칼럼 병합
        this.mNoneCaption = this.dataObject.noCaption;
        this.setRowHeadSpan(this.mNoneCaption);
        
        // 6.3 열 헤더 칼럼 병합
        var wRow0 = this.colHeadTable.tBodies[0].rows[0];
        
        var wTableRow = document.createElement("TR"); 
        
        if (wRow0.insertAdjacentElement){
        	wRow0.insertAdjacentElement('beforeBegin', wTableRow); 
 		}
 		else if (wRow0.appendChild) {
 			insertAdjacentElement('beforeBegin' ,wRow0, wTableRow);
 		}
        
        for (var wColNum = 0; wColNum < this.colHeadTable.tBodies[0].rows[1].cells.length; wColNum++){
            wTableRow.insertCell(wColNum);
            wTableRow.cells[wColNum].style.width = wRow0.cells[wColNum].style.width;
        }

    	this.colHeadTable.tBodies[0].rows[0].style.display="none";
        
    	var wArrSteps = this.dataObject.steps;
        for (var wStep = wArrSteps.length - 1; wStep >= 1; wStep--){
            this.setColHeadSpans(wStep, this.dataObject.steps[wStep].levelCnt, 
                                        this.mNoneCaption ,
                                        this.dataObject.steps[wStep].isSQL);
        
        
        }
        
        // 6.3 빈데이터 셀을 정리한다
        for (var wRowNum=0; wRowNum < this.dataTable.tBodies[0].rows.length; wRowNum++){
        	var wRow = this.dataTable.tBodies[0].rows[wRowNum];
        	for (var wColNum=0; wColNum < wRow.cells.length; wColNum++){
        		if (wRow.cells[wColNum].innerHTML=="") wRow.cells[wColNum].innerHTML="&nbsp;";
        	}
        }
        
        /*            

        // 열 헤더 칼럼 숨기기
        for (var wLevelNum = 0; wLevelNum < this.dataObject.head.levelCnt; wLevelNum++){
            if (this.dataObject.head.hidden[wLevelNum])
                this.hideColLevels(this.dataObject.head.levelCnt, wLevelNum);
        }
        

        // 줄 헤더 칼럼 숨기기
        for (var wStep = wArrSteps.length - 1; wStep >= 1; wStep--){
            for (var wLevelNum = 0; wLevelNum < this.dataObject.steps[wStep].levelCnt; wLevelNum++){
                if (this.dataObject.steps[wStep].hidden[i])
                    this.HideStepColLevels(this.dataObject.steps[wStep].levelCnt, wLevelNum, wStep);
            }
        }
        */
        
        showAjaxBox(getText("message_crosssheeth_008", "자료를 정리합니다."), 0,NEED_NOT_COUNT_UP);
        setTimeout("controls['" + this.controlName + "'].actionObject.executeStep8()", 10);
        return;
    };
    
    
    CrossSheetH.prototype.executeStep8 = function(){
        // functionname : [CrossSheetH.executeStep8]
    
    	// ==== 7. 데이터 작업 후속처리 ===================
        var wTables = this.tagObject.getElementsByTagName("table");
	    for (var i = 0; i <= 3;i++){
	        wTables[i].style.display="block";
	    }        
    	// 7.1 메모리 해제 
        // this.dataObject = null;
    
    	// 7.2 차트 그리기 호출
		this.showChart();
		
		// 7.3 채우기 완료 이벤트 호출 
		callEvent(this.controlId + "_LoadSuccess");
    
		// 7.4 시트 스크롤 초기화 
    	this.resetScroll();
    	
    	// 7.5 진행 상태 박스 숨기기
    	hideAjaxBox();
    	
    	// 7.6 좌상단 셀 조정
    	var rowTitle = this.dataObject.head.rowTitle;
    	if (rowTitle == null || rowTitle.length == 0)
    		this.mergeUpperMost();
    	
        return;
    };

    CrossSheetH.prototype.clearData = function(dataObject){
        // functionname : [CrossSheetV.clearData]

           for (var wStepNum = 1; wStepNum < dataObject.steps.length; wStepNum++){
        	   var wStep = dataObject.steps[wStepNum];
        	   if (wStep.sums) wStep.sums.clear();
        	   if (wStep.sums) wStep.hidden.clear();
        	   if (wStep.sums) wStep.heads.clear();
        	   if (wStep.sums) wStep.datas.clear();
           }
    	   dataObject.steps.clear();
    	   
       	   var wHead = dataObject.head;
    	   if (wHead.sums) wHead.sums.clear();
    	   if (wHead.sums) wHead.hidden.clear();
    	   if (wHead.sums) wHead.heads.clear();
    	   dataObject.head = null;
    	   
    	   dataObject = null;
    };
    
       CrossSheetH.prototype.addChartInfo = function(pChartInfo){
           // functionname : [CrossSheetH.addChartInfo]

           this.chartInfo = pChartInfo;
       };
       
       CrossSheetH.prototype.getChartData = function(pChartId){
        // functionname : [CrossSheetH.getChartData]

    	   var arrFromStrings = [",", ":", ";", "&", "%", "?"];
           var arrToStrings   = ["<COMMA>", "<COLON>", "<SEMICOLON>", "<AMP>", "<PERCENT>", "<QUESTION>"];
        
    	   var wChartInfo = "";
    	   var wInfos = this.chartInfo.split("[S1]");
    	   for(var i = 0; i < wInfos.length; i++){
    		   var wInfo = wInfos[i];
    		   if (wInfo.trim().length == 0) continue;
    		   var chartId = wInfo.split(";")[2];
    		   
    		   if (pChartId == chartId) {
    			   wChartInfo = wInfo; break;
    		   }
    	   }
    	   
    	   if (wChartInfo.length == 0) return "";
    	   
    	   var wArr = wChartInfo.split(";");
    	   var wArr1 = wArr[0].split("_");
    	   var wArr2 = wArr[1].split("_");
     	   
    	   var wPointRCType      = parseInt(wArr1[0]);
    	   var wPointStepNum     = parseInt(wArr1[1]);     // 포인트 데이터를 뽑을 스텝명
    	   var wPonitLevel       = parseInt(wArr1[2]);     // 포인트 데이터를 뽑을 레벨명
    	   
    	   // wSeriesLevel의 주의사항  예를들어 "대분류-중분류-상품"이라면 대분류는 1이고 상품은 3으로 화면이 만들어 진다
    	   // 크로스 시트의 경우 상품데이터는1, 중분류 합계는 2, 대분류합계는 3이다
    	   if (wPointRCType == BY_ROW_HTYPE){
    		   wPonitLevel = this.rowLevelCnt - wPonitLevel + 1;
    	   } else if (wPointRCType == BY_COL_HTYPE){
    		   wPonitLevel = this.colLevelCnt - wPonitLevel + 1;
    	   }
   	   
    	   var wSeriesRCType	 = parseInt(wArr2[0]); 
    	   var wSeriesStepNum	 = parseInt(wArr2[1]);     // 계열값 데이터를 뽑을 스텝명
    	   var wSeriesLevel	     = parseInt(wArr2[2]);     // 계열값 데이터를 뽑을 레벨명
    	   if (wSeriesRCType == BY_ROW_HTYPE){
    		   wSeriesLevel = this.rowLevelCnt - wSeriesLevel + 1;
    	   } else if (wSeriesRCType == BY_COL_HTYPE){
    		   wSeriesLevel = this.colLevelCnt - wSeriesLevel + 1;
    	   }
    	   
    	   
           var wPointRcNums = [];
           
           // point data set 
           var wData = "";      // 함수가 리턴할 문자열값
           var wPointSeq = 0;   // 선택된 헤더들 집합 내의 새로 매긴 순번

           if (wPointRCType == BY_ROW_HTYPE){
               var wHeadRows = this.headRows;
               for (var i=0; i < this.headDatas.length; i++){
                   var wHeadData = this.headDatas[i];
                   if (wHeadData.Level != wPonitLevel) continue;
                   
                   wData += "," +  escapeCharacter(wHeadData.captions[this.rowLevelCnt - wPonitLevel] ,arrFromStrings, arrToStrings);
                   wPointRcNums[wPointSeq] = i + wHeadRows;
                   
                   wPointSeq++;
               }
           
           } else if (wPointRCType == BY_COL_HTYPE){
               var wStartColNum = this.stepstartNums[wPointStepNum];
               wHeadDatas = this.stepHeadDatas[wPointStepNum];
               
               for (var i=0; i < wHeadDatas.length; i++){
                   var wHeadData = wHeadDatas[i];
                   if (wHeadData.Level != wPonitLevel) continue;
                   
                   wData += "," + escapeCharacter(wHeadData.captions[this.colLevelCnt - wPonitLevel] ,arrFromStrings, arrToStrings);
                   wPointRcNums[wPointSeq] = i + wStartColNum;
                   
                   wPointSeq++;
               }
           
           }
           wData += ":";
           
           // Series Data Set
           var wRows = this.dataTable.tBodies[0].rows;
           
           if (wSeriesRCType == BY_ROW_HTYPE){
               var wHeadRows = this.headRows;
               for (var i=0; i < this.headDatas.length; i++){
                   var wHeadData = this.headDatas[i];
                   if (wHeadData.Level != wSeriesLevel) continue;
                   
                    wData += escapeCharacter(wHeadData.captions[this.rowLevelCnt - wSeriesLevel] ,arrFromStrings, arrToStrings);
                   
                   var wRowNum = i + wHeadRows;
                   for (var j = 0; j < wPointRcNums.length; j++){
                       var wColNum = wPointRcNums[j];
                       var wValue = wRows[wRowNum].cells[wColNum].getAttribute("value");
                       
                       wData += "," + escapeCharacter(wValue ,arrFromStrings, arrToStrings);
                       
                   }
                   wData += ":";

               }
           
           } else if (wSeriesRCType == BY_COL_HTYPE){
               var wStartColNum = this.stepstartNums[wSeriesStepNum];
               wHeadDatas = this.stepHeadDatas[wSeriesStepNum];
               
               for (var i=0; i < wHeadDatas.length; i++){
                   var wHeadData = wHeadDatas[i];
                   if (wHeadData.Level != wSeriesLevel) continue;
                   
                   wData += escapeCharacter(wHeadData.captions[this.colLevelCnt - wSeriesLevel] ,arrFromStrings, arrToStrings);
                   
                   var wColNum = i + wStartColNum;
                   for (var j = 0; j < wPointRcNums.length; j++){
                       var wRowNum = wPointRcNums[j];
                       var wValue = wRows[wRowNum].cells[wColNum].getAttribute("value");
                       
                       wData += "," + escapeCharacter(wValue ,arrFromStrings, arrToStrings);
                       
                   }
                   wData += ":";
               }
           }
       	return wData;
       };

       CrossSheetH.prototype.showChart = function(){
           // functionname : [CrossSheetH.showChart]

    	   var wChartInfo = "";
    	   var wInfos = this.chartInfo.split("[S1]");
    	   for(var i = 0; i < wInfos.length; i++){
    		   var wInfo = wInfos[i];
    		   if (wInfo.trim().length == 0) continue;
    		   var chartId = wInfo.split(";")[2];
    		   
               var chartControl = getControlById(chartId);
               chartControl.data =this.getChartData(chartId);
               
               if (chartControl.data.indexOf(":") < chartControl.data.length - 1){
                   chartControl.show();
               }
    	   }
    	   return;
       };
       
    
    CrossSheetH.prototype.setCellStyle = function(stepNum, styleJSON, arrKeyDatas, tooltip){
        // functionname : [CrossSheetH.setCellStyle]

                           var stepObject = this.dataObject.steps[stepNum];
    var wStartNum = this.stepstartNums[stepNum];
    var wFieldPoint = stepObject.fieldPoint;
    
    // key count 계산
    var keyCount = 0;
	var wArrDatas = stepObject.datas;
    if (wArrDatas.length >= 1){
        for (var i = 1; wArrDatas[0].length;i++) {
        	if (wArrDatas[0][i] == null) break; 
        	keyCount++;
        }
    }

    var headKeyCount = wFieldPoint;

    var wData = arrKeyDatas;
        
    // 줄번호 찾기 
    var wWorkKey = wData.slice(1, wFieldPoint + 1); 
    var wRowArrData = searchArray(this.headDatasSorted, wWorkKey);
    var wRowNum = (wRowArrData != null ? wRowArrData[wRowArrData.length - 1] : -1);
    
    // 칼럼번호 찾기
    var wColNum = -1; var wColArrData = null; 
    if (!stepObject.isSQL){
    	wColNum = wStartNum;
    } else {
        wWorkKey = wData.slice(headKeyCount + 1, keyCount + 1); 
        wColArrData = searchArray(stepObject.headDatasSorted, wWorkKey);
        wColNum = (wColArrData != null ? wColArrData[wColArrData.length - 1] : -1);
    }
    
    if (wRowNum >= 0 && wColNum >= 0){
        var wCell = this.dataTable.tBodies[0].rows[wRowNum].cells[wColNum];
        this.setTypeStyle(wCell, styleJSON, tooltip);	
    }
        
    if (wWorkKey) wWorkKey.clear();
        
        return;
    };
    
    // 사용방법 : wSheet.setTypeStyle({"text-align":"left", "font": "normal normal normal 12pt 굴림,Courier"});
    // 만들어진 스타일을 지우려면 : wSheet.setTypeStyle({"text-align":""});
    CrossSheetH.prototype.setTypeStyle = function(cell, styleJSON, tooltip){
        // functionname : [CrossSheetV.setTypeStyle]

          var wCell = cell;
          var styleString = "";
          if (wCell.style){
        	  styleString = wCell.style.cssText;  
          } else {
        	  styleString = wCell.getAttribute("style");  
          }
          
          var arrStyleItems = (styleString == null ? [] : styleString.split(";"));
          var arrStyles = [];
          
          for (var i = 0; i < arrStyleItems.length; i++){
              var styleItem = ("" + arrStyleItems[i]).trim();
              if (styleItem.length == 0) continue;
              
              var arrInfos = styleItem.split(":");
              var itemStyleName  = ("" + arrInfos[0]).trim();
              var itemStyleValue = ("" + arrInfos[1]).trim();
              
              arrStyles[i] = [itemStyleName, itemStyleValue];
          }


          styleString = "";
          
          for (var wKey in styleJSON){
	         if (styleJSON[wKey] instanceof Function) continue;
             var styleName  = wKey;
             var styleValue = styleJSON[wKey];
             
             var found = false;
             for (var j = 0; j < arrStyles.length; j++){
                 var itemStyleName  = arrStyles[j][0];
                 var itemStyleValue = arrStyles[j][1];
                 
                 if (styleName == itemStyleName) {
                     arrStyles[j] = [styleName, styleValue];

                     found  = true; break;
                 }
             }
             
             if (!found){
                 var newIndex = arrStyles.length;
                 arrStyles[newIndex ] = [styleName, styleValue];
             }
          }
          
          for (var i = 0; i < arrStyles.length; i++){
              if (arrStyles[i][1].length == 0) continue;
              styleString +=  arrStyles[i][0] + ":" + arrStyles[i][1] + "; ";
          }

          wCell.setAttribute("style", styleString);
    	  wCell.style.cssText = styleString;
    	  
          wCell.title= tooltip;

        return;
    };

    CrossSheetH.prototype.stepNumOf = function(colNum){ //
    	var wStepNum = 0;
	    for (var i=1; i < this.stepstartNums.length; i++){
	    	if (colNum < this.stepstartNums[i]) break;
	    	wStepNum++;
	    }
	    return wStepNum;
    }
var FRAME_OLD_3D            	= 0;
var FRAME_OLD_LINE          	= 1;
var FRAME_OLD_RECT          	= 2;
var FRAME_NEW_3D            	= 4;
var FRAME_NEW_LINE          	= 5;
var FRAME_IMAGE          		= 6;
var FRAME_NEW_ROUND         	= 7;
var FRAME_NEW_FLOATINGLAYER		= 98;
var FRAME_NEW_FLOATINGLAYER_NEW	= 98.1;
var FRAME_NEW_NONE				= 99;

var frameMoveStart = false;
/**
 * @class FrameBox를 만들어주는 클래스
 * @description 미결
 * @param controlId
 *            {String} Control의 id를 입니다.
 * @param controlName
 *            {String} Control의 name을 입니다.
 * @param tagObject
 *            {Object} 태그객체 입니다.
 * @example 미결
 */ 
function FrameBox(controlId, controlName, tagObject){
    // 상속선언부
    this.base = ControlBase;              			//부모클래스 지정
    this.base(controlId, controlName, tagObject);   //부모클래스 생성자호출
    
    // 상수 선언부
    
    // 속성 선언부
    this.controlId = controlId;
    this.backcolor = "";
    this.bordercolor = "";
    this.sbackcolor = "";
    this.sbordercolor = "";
    this.style = 0;
    this.frameType = "";
    this.alignment = "";
    this.fontBold = "";
    this.fontItalic = "";
    this.fontName = "";
    this.fontSize = "";
    this.fontStrikethru = "";
    this.fontUnderline = "";
    this.caption = "";
    this.labelObject = null;
    
	this.top	= (tagObject.style.top == "" ? window.getComputedStyle(tagObject).top.replace(/px/g,'') : parseIntSize(tagObject.style.top));
	this.left	= (tagObject.style.left == "" ? window.getComputedStyle(tagObject).left.replace(/px/g,'') : parseIntSize(tagObject.style.left));
	this.width	= (tagObject.style.width == "" ? window.getComputedStyle(tagObject).width.replace(/px/g,'') : parseIntSize(tagObject.style.width));
	this.height	= (tagObject.style.height == "" ? window.getComputedStyle(tagObject).height.replace(/px/g,'') : parseIntSize(tagObject.style.height));
	
	var lastDIVIndex = this.tagObject.getElementsByTagName("div").length - 1;
	var firstDiv = null;
	
	this.frameType = FRAME_OLD_3D;
	// 0 - 입체 3D (C/S) : 사용안함
	if (tagObject.className=="FrameBoxA"){
		this.frameType = FRAME_OLD_3D;
		this.labelObject = this.tagObject.getElementsByTagName("legend")[0];
	}
	// 1 - 라인 (C/S) : 사용안함
	else if (tagObject.className=="FrameBoxB"){
		this.frameType = FRAME_OLD_LINE;
		this.labelObject = this.tagObject.getElementsByTagName("td")[1];
	}
	// 2 - 사각형 (C/S) : 사용안함
	else if (tagObject.className=="FrameBoxC"){
		this.frameType = FRAME_OLD_RECT;
		this.labelObject = this.tagObject.getElementsByTagName("td")[1];
	}
	// 4 - 입체 3D (WEB) : 사용안함
	else if (tagObject.className=="Frame_NEW_3D"){
		this.frameType = FRAME_NEW_3D;
		this.labelObject = this.tagObject.getElementsByTagName("div")[lastDIVIndex];
	}
	// 5 - 라인 (WEB) : 사용(직사각형)
	else if (tagObject.className=="Frame_NEW_LINE"){
		this.frameType = FRAME_NEW_LINE;
		this.labelObject = this.tagObject.getElementsByTagName("div")[lastDIVIndex];
	}
	// 6 - 이미지프레임 (WEB) : 사용안함
	else if (tagObject.className=="FRAME_IMAGE"){
		this.frameType = FRAME_IMAGE;
		this.labelObject = this.tagObject.getElementsByTagName("div")[lastDIVIndex];
	}
	// 7 - 둥근사각 (WEB) : 사용(둥근사각형)
	else if (tagObject.className=="Frame_NEW_ROUND"){
		this.frameType = FRAME_NEW_ROUND;
		this.labelObject = this.tagObject.getElementsByTagName("div")[lastDIVIndex];
	}
	// 98 - 이동창 (WEB) : 사용
//	else if (tagObject.className=="Frame_NEW_FLOATINGLAYER"){
//	else if ( /^Frame_NEW_FLOATINGLAYER\s+/.test(tagObject.className) ){
	else if ( /^Frame_NEW_FLOATINGLAYER\s*.*/.test(tagObject.className) ){
		firstDiv = this.tagObject.getElementsByTagName("div")[0];
		//첫번째 div의 클래스가 layer 라면 4.1 이후 생성되는 이동창으로 이전 버전의 이동창과는 html 태그 소스가 다름
		if( "" + firstDiv.getAttribute("class") == "layer" ){
			this.frameType = FRAME_NEW_FLOATINGLAYER_NEW;
			this.labelObject = firstDiv.getElementsByTagName("div")[0];
		}
		else{
			this.frameType = FRAME_NEW_FLOATINGLAYER;
			this.labelObject = this.tagObject.getElementsByTagName("div")[lastDIVIndex];
		}
		//메모리 초기화
		firstDiv = null;
	}
	// 99 - 윤곽없음 (WEB) : 사용
	else if (tagObject.className=="Frame_NEW_NONE"){
		this.frameType = FRAME_NEW_NONE;
		this.labelObject = this.tagObject.getElementsByTagName("div")[lastDIVIndex];
	}
	
	if( typeof tagObject != "undefined" ){
		tagObject.setAttribute("tabIndex", "-1");
	}
	
	// 이벤트 부여
	var childDIV = this.tagObject;
	setEventHandler(childDIV, "click", FrameBox_onclick);
	setEventHandler(childDIV, "keydown", FrameBox_onkeydown);
	
	// 프로팅창의 닫기버튼과 타이틀의 마우스 이벤트
	if( this.frameType == FRAME_NEW_FLOATINGLAYER ){
		if( childDIV.getElementsByTagName("IMG")[0] ){
			var ndx = childDIV.getElementsByTagName("IMG").length - 1;
			setEventHandler(childDIV.getElementsByTagName("IMG")[ndx], "click", frameBox_onClick_X);
		}
		
		childDIV = this.labelObject;
		setEventHandler(childDIV, "mousedown", frameBox_onmousedown);
		setEventHandler(document, "mousemove", frameBox_onmousemove);
		setEventHandler(document, "mouseup",   frameBox_onmouseup);
	}
	else if( this.frameType == FRAME_NEW_FLOATINGLAYER_NEW ){
		childDIV = this.labelObject;
		
		if( childDIV.getElementsByTagName("div")[0] ){
			setEventHandler(childDIV.getElementsByTagName("div")[0], "click", frameBox_onClick_X);
		}
		
		setEventHandler(childDIV, "mousedown", frameBox_onmousedown);
		setEventHandler(document, "mousemove", frameBox_onmousemove);
		setEventHandler(document, "mouseup",   frameBox_onmouseup);
	}
	
	this.hasClickEvent = false;		this.fncClickEvent = null;
	this.hasKeyDownEvent = false;	this.fncKeyDownEvent = null;
	this.hasOpenEvent = false;		this.fncOpenEvent = null;
	this.hasCloseEvent = false;		this.fncCloseEvent = null;
	
	if( this.controlId.length > 0 ){
		try {
			if( typeof self[this.controlId + "_onclick"] == "function" ){
				this.hasClickEvent = true;
				this.fncClickEvent = function(){ self[this.controlId + "_onclick"](); };
			}
		} catch(e){}
		
		try {
			if( typeof self[this.controlId + "_onkeydown"] == "function" ){
				this.hasKeyDownEvent = true;
				this.fncKeyDownEvent = function(){ self[this.controlId + "_onkeydown"](); };
			}
		} catch(e){}
		
		try {
			if( typeof self[this.controlId + "_onOpen"] == "function" ){
				this.hasOpenEvent = true;
				this.fncOpenEvent = function(){ self[this.controlId + "_onOpen"](); };
			}
		} catch(e){}

    	try {
    		if( typeof self[this.controlId + "_onClose"] == "function" ){
				this.hasCloseEvent = true;
				this.fncCloseEvent = function(){ self[this.controlId + "_onClose"](); };
			}
        } catch(e){}
    }
};

FrameBox.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함

/**
 * @description	미결
 * @param		{Object}	em
 * @return		{String}
 * @example		미결
 */
function searchControl_Frame(em){
	var wReturn = null;
	var pEm = em;
	var image = pEm.getAttribute("image");
	var classNames = ["FrameBoxA", "FrameBoxB", "FrameBoxC", "Frame_NEW_3D", "Frame_NEW_LINE", "FRAME_IMAGE", "Frame_NEW_ROUND", "Frame_NEW_FLOATINGLAYER", "Frame_NEW_NONE"];
	
//	while (pEm.parentNode && classNames.indexOf(pEm.className) < 0)
//		pEm = pEm.parentNode;
//	if (classNames.indexOf(pEm.className) >= 0)
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && pEm.tagName != "body"){
		if( classNames.indexOf(image) >= 0 ){
			wReturn = getControlById(pEm.id);
			break;
		}
		
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( wReturn == null ){
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && classNames.indexOf(pEm.className) < 0)
			pEm = pEm.parentNode;
		
		if( classNames.indexOf(pEm.className) >= 0 )
			wReturn = getControlById(pEm.id);
	}
	
	classNames.clear(); classNames = null;
	pEm = null;
	
	return wReturn;
};

/**
 * @description	미결
 * @param 		{object}	frameType
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setFrameType = function(frameType){
	// functionname : [FrameBox.setFrameType]
	
	this.frameType = frameType;
	
	return;
};
/**
 * @description	미결
 * @param 		{object}	alignment
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setAlignment = function(alignment){
    // functionname : [FrameBox.setAlignment]
	
	this.alignment = alignment;
    this.labelObject.style.textAlign = alignment;
    
	return;
};

/**
 * @description	미결
 * @param 		{string}	fontBold
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setFontBold = function(fontBold){
	// functionname : [FrameBox.setFontBold]
	
	this.fontBold = fontBold;
	this.labelObject.style.fontWeight = ("" + fontBold == "true" ? "bold" : "normal");
	
	return;
};
/**
 * @description	미결
 * @param 		{string}	fontItalic
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setFontItalic = function(fontItalic){
	// functionname : [FrameBox.setFontItalic]
	
	this.fontItalic = fontItalic;
	this.labelObject.style.fontStyle = ("" + fontItalic == "true" ? "italic" : "normal");
	
	return;
};
/**
 * @description	미결
 * @param 		{string}	fontName
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setFontName = function(fontName){
	// functionname : [FrameBox.setFontName]
	
	this.fontName = fontName;
	this.labelObject.style.fontFamily = fontName;
	
	return;
};

/**
 * @description	미결
 * @param 		{number}	fontSize
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setFontSize = function(fontSize){
    // functionname : [FrameBox.setFontSize]

	this.fontSize = fontSize;
    this.labelObject.style.fontSize = fontSize + "pt";
    
    if( this.frameType == FRAME_NEW_FLOATINGLAYER_NEW ){
    	//font-size pt 를 px 로 변환
    	var fontSizePtToPx = Math.round(fontSize * 1.3);
    	//닫기 버튼 Div
    	var closeBtnDiv = this.labelObject.getElementsByTagName("div")[0];
    	//내용 박스 Div
    	var divItems = this.labelObject.parentNode.getElementsByTagName("div");
    	var contentDiv = null;
    	for(var i = 0; i < divItems.length; i++){
    		if( divItems[i].getAttribute("class") == "content" ){
    			contentDiv = divItems[i]; break;
    		}
    	}
    	
    	//div[class="title"] 의 height, line-height 설정, font-size 는 위에서 설정하였으므로 설정 안함
    	this.labelObject.style.height = fontSizePtToPx + "px";
    	this.labelObject.style.lineHeight  = fontSizePtToPx + "px";
    	//div[class="title"] > div[class="closeBtn"] 의 height, font-size, line-height 설정
    	closeBtnDiv.style.fontSize = fontSize + "pt";
    	closeBtnDiv.style.height = fontSizePtToPx + "px";
    	closeBtnDiv.style.lineHeight = fontSizePtToPx + "px";
    	//div[class="content"] 의 height 설정
    	contentDiv.style.height = ((this.height * 1) - 7 - fontSizePtToPx - 7) + "px";
    	
    	//메모리 초기화
    	closeBtnDiv = null;
    	divItems = null;
    	contentDiv = null;
    }
    
	return;
};
/*///*/

/**
 * @description	미결
 * @param 		{object}	fontStrikethru
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setFontStrikethru = function(fontStrikethru){
	// functionname : [FrameBox.setFontStrikethru]
	
	this.fontStrikethru = fontStrikethru;
	
	var textDecorationStr = ""; 
	if( "" + this.fontStrikethru == "true" )	textDecorationStr += "line-through ";
	if( "" + this.fontUnderline == "true" )		textDecorationStr += "underline ";
	if( textDecorationStr.length <= 0 )			textDecorationStr = "none";
	
	this.labelObject.style.textDecoration = textDecorationStr;
	
	return;
};
/**
 * @description	미결
 * @param 		{object}	fontUnderline
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setFontUnderline = function(fontUnderline){
	// functionname : [FrameBox.setFontUnderline]
	
	this.fontUnderline = fontUnderline;
	
	var textDecorationStr = ""; 
	if( "" + this.fontStrikethru == "true" )	textDecorationStr += "line-through ";
	if( "" + this.fontUnderline == "true" )		textDecorationStr += "underline ";
	if( textDecorationStr.length <= 0 )			textDecorationStr = "none";
	
	this.labelObject.style.textDecoration = textDecorationStr;
	
	return;
};
/**
 * @description	미결
 * @param 		{object}	caption
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setCaption = function(caption){
    // functionname : [FrameBox.setCaption]
	
	this.caption = caption;
	
	if( this.frameType == FRAME_NEW_FLOATINGLAYER_NEW ){
		var captionSpan = this.labelObject.getElementsByTagName("span")[0];
		captionSpan.innerText = caption;
		
		//메모리 초기화
		captionSpan = null;
	}
	else{
		this.labelObject.innerText = caption;
	}
	
	return;
};
/**
 * @description	미결
 * @param 		{object}	caption
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setValue = function(caption){
    // functionname : [FrameBox.setCaption]
	
	this.setCaption(caption);
	
	return;
};
/**
 * @description	미결
 * @param 		{object}	pBackcolor
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setBackColor = function(pBackcolor){
	// functionname : [FrameBox.setBackColor]
	
	this.backcolor = pBackcolor;

	if (this.frameType == FRAME_OLD_3D){
	} else if (this.frameType == FRAME_OLD_LINE){
	} else if (this.frameType == FRAME_OLD_RECT){
	} else if (this.frameType == FRAME_NEW_3D){
//		this.tagObject.getElementsByTagName("DIV")[0].style.backgroundColor  = pBackcolor;
	} else if (this.frameType == FRAME_NEW_LINE){
//		for (var i=0; i < 5; i++){
//			this.tagObject.getElementsByTagName("DIV")[i].style.backgroundColor  = pBackcolor;
//		}
		this.tagObject.style.backgroundColor = pBackcolor;
	} else if (this.frameType == FRAME_IMAGE){
		this.tagObject.getElementsByTagName("DIV")[3].style.backgroundColor  = pBackcolor;
	} else if (this.frameType == FRAME_NEW_ROUND){
//		for (var i=0; i < 10; i++){
//			this.tagObject.getElementsByTagName("DIV")[i].style.backgroundColor  = pBackcolor;
//		}
		this.tagObject.style.backgroundColor = pBackcolor;
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER){
		for (var i=0; i < 5; i++){
			this.tagObject.getElementsByTagName("DIV")[i].style.backgroundColor  = pBackcolor;
		}
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER_NEW){
		this.tagObject.style.backgroundColor = pBackcolor;
	} else if (this.frameType == FRAME_NEW_NONE){
//		this.tagObject.getElementsByTagName("DIV")[0].style.backgroundColor  = pBackcolor;
		this.tagObject.style.backgroundColor = pBackcolor;
	}

	return;
};
/**
 * @description	미결
 * @param 		{object}	pBordercolor
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setBordercolor = function(pBordercolor){
	// functionname : [FrameBox.setBackColor]
	
	this.bordercolor = pBordercolor;
	
	var em = null;
	if (this.frameType == FRAME_OLD_3D){
	} else if (this.frameType == FRAME_OLD_LINE){
	} else if (this.frameType == FRAME_OLD_RECT){
	} else if (this.frameType == FRAME_NEW_3D){
		em = this.tagObject.getElementsByTagName("DIV")[0];
		em.style.borderRightColor  = pBordercolor;
		em.style.borderLeftColor   = pBordercolor;
		em.style.borderBottomColor = pBordercolor;
		em.style.borderTopColor    = pBordercolor;
	} else if (this.frameType == FRAME_NEW_LINE){
//		for (var i=0; i < 6; i++){
//			em = this.tagObject.getElementsByTagName("DIV")[i];
//			em.style.borderRightColor  = pBordercolor;
//			em.style.borderLeftColor   = pBordercolor;
//		}
//		em = this.tagObject.getElementsByTagName("DIV")[4];
//		em.style.borderBottomColor = pBordercolor;
//		em = this.tagObject.getElementsByTagName("DIV")[5];
//		em.style.borderTopColor = pBordercolor;
//		em.style.borderBottomColor = pBordercolor;
		this.tagObject.style.borderColor = pBordercolor;
	} else if (this.frameType == FRAME_IMAGE){
		em = this.tagObject.getElementsByTagName("DIV")[3];
		em.style.borderRightColor  = pBordercolor;
		em.style.borderLeftColor   = pBordercolor;
		em.style.borderBottomColor = pBordercolor;
	} else if (this.frameType == FRAME_NEW_ROUND){
//		for (var i=0; i < 9; i++){
//			em = this.tagObject.getElementsByTagName("DIV")[i];
//			em.style.borderRightColor  = pBordercolor;
//			em.style.borderLeftColor   = pBordercolor;
//		}
//		em = this.tagObject.getElementsByTagName("DIV")[3];
//		em.style.borderTopColor = pBordercolor;
//		em = this.tagObject.getElementsByTagName("DIV")[5];
//		em.style.borderBottomColor = pBordercolor;
		this.tagObject.style.borderColor = pBordercolor;
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER){
		for (var i=0; i < 5; i++){
			em = this.tagObject.getElementsByTagName("DIV")[i];
			em.style.borderRightColor  = pBordercolor;
			em.style.borderLeftColor   = pBordercolor;
		}
		em = this.tagObject.getElementsByTagName("DIV")[3];
		em.style.borderTopColor = pBordercolor;
		em = this.tagObject.getElementsByTagName("DIV")[4];
		em.style.borderBottomColor = pBordercolor;
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER_NEW){
		this.tagObject.style.borderColor = pBordercolor;	
	} else if (this.frameType == FRAME_NEW_NONE){
	}
	
	return;
};
/**
 * @description	미결
 * @param 		{object}	pSbackcolor
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setSbackcolor = function(pSbackcolor){
	// functionname : [FrameBox.setSbackcolor]
	
	this.sbackcolor = pSbackcolor;
	
	var em = null;
	if (this.frameType == FRAME_OLD_3D){
	} else if (this.frameType == FRAME_OLD_LINE){
	} else if (this.frameType == FRAME_OLD_RECT){
	} else if (this.frameType == FRAME_NEW_3D){
	} else if (this.frameType == FRAME_NEW_LINE){
	} else if (this.frameType == FRAME_IMAGE){
	} else if (this.frameType == FRAME_NEW_ROUND){
//		for (var i=10; i < 19; i++){
//			em = this.tagObject.getElementsByTagName("DIV")[i];
//			em.style.backgroundColor  = pSbackcolor;
//		}
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER){
		this.tagObject.getElementsByTagName("DIV")[5].style.backgroundColor = pSbackcolor;
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER){
		//내용 박스 Div
    	var divItems = this.labelObject.parentNode.getElementsByTagName("div");
    	var innerConentDiv = null;
    	for(var i = 0; i < divItems.length; i++){
    		if( divItems[i].getAttribute("class") == "content" ){
    			innerConentDiv = divItems[i].getElementsByTagName("div")[0]; break;
    		}
    	}
    	innerConentDiv.style.backgroundColor = pSbordercolor;
    	
    	//메모리 초기화
    	innerConentDiv = null;
    	divItems = null;
	} else if (this.frameType == FRAME_NEW_NONE){
	}
	
	return;
};
/**
 * @description	미결
 * @param 		{object}	pSbordercolor
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.setSbordercolor = function (pSbordercolor ){
	// functionname : [FrameBox.setSbordercolor]
	
	this.sbordercolor = pSbordercolor;
	
	var em = null;
	if (this.frameType == FRAME_OLD_3D){
	} else if (this.frameType == FRAME_OLD_LINE){
	} else if (this.frameType == FRAME_OLD_RECT){
	} else if (this.frameType == FRAME_NEW_3D){
	} else if (this.frameType == FRAME_NEW_LINE){
	} else if (this.frameType == FRAME_IMAGE){
	} else if (this.frameType == FRAME_NEW_ROUND){
//		for (var i=10; i < 19; i++){
//			em = this.tagObject.getElementsByTagName("DIV")[i];
//			em.style.borderRightColor  = pSbordercolor;
//			em.style.borderLeftColor  = pSbordercolor;
//		}
//		this.tagObject.getElementsByTagName("DIV")[13].style.borderTopColor = pSbordercolor;
//		this.tagObject.getElementsByTagName("DIV")[15].style.borderBottomColor = pSbordercolor;
//		em = null;
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER){
		em = this.tagObject.getElementsByTagName("DIV")[5];
		em.style.borderRightColor  = pSbordercolor;
		em.style.borderLeftColor   = pSbordercolor;
		em.style.borderBottomColor = pSbordercolor;
		em.style.borderTopColor    = pSbordercolor;
		em = null;
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER_NEW){
		//내용 박스 Div
    	var divItems = this.labelObject.parentNode.getElementsByTagName("div");
    	var innerConentDiv = null;
    	for(var i = 0; i < divItems.length; i++){
    		if( divItems[i].getAttribute("class") == "content" ){
    			innerConentDiv = divItems[i].getElementsByTagName("div")[0]; break;
    		}
    	}
    	innerConentDiv.style.borderColor = pSbordercolor;
    	
    	//메모리 초기화
    	innerConentDiv = null;
    	divItems = null;
	} else if (this.frameType == FRAME_NEW_NONE){
	}
	
	return;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
FrameBox.prototype.getStyle = function (){
    return this.style; 
};
/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
FrameBox.prototype.getFrameType = function (){
    return this.frameType; 
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
FrameBox.prototype.getbackcolor = function (    ){
      return this.backcolor;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
FrameBox.prototype.getbordercolor = function ( ){
      return this.bordercolor;
};
/**
 * @description	미결
 * @param 		{number}	pLeft
 * @param		{number}	pTop
 * @param		{number}	pWidth
 * @param		{number}	pHeight
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.moveWindow = function(pLeft, pTop, pWidth, pHeight){
	// functionname : [FrameBox.moveWindow]
	
	var em = null;
	var wGap = pWidth - this.width;
	var hGap = pHeight - this.height;
	
	this.height = pHeight;
	this.tagObject.style.height = pHeight+'px';
	
	this.width = pWidth;
	this.tagObject.style.width = pWidth+'px';
	
	this.left = pLeft;
	this.tagObject.style.left = pLeft+'px';
	
	this.top = pTop;
	this.tagObject.style.top = pTop+'px';

//	var arrTopIndex=[];
//	var arrLeftIndex=[];
//	var arrWidthIndex=[];
//	var arrHeightIndex=[];

	if (this.frameType == FRAME_OLD_3D){
	} else if (this.frameType == FRAME_OLD_LINE){
	} else if (this.frameType == FRAME_OLD_RECT){
	} else if (this.frameType == FRAME_NEW_3D){
//		arrWidthIndex=[0,1];
//		arrHeightIndex=[0];
	} else if (this.frameType == FRAME_NEW_LINE){
//		arrWidthIndex=[0,1,2,3,4,5];
//		arrHeightIndex=[4];
		this.tagObject.style.left = this.left;
		this.tagObject.style.top = this.top;
		this.tagObject.style.width = this.width;
		this.tagObject.style.height = this.height;
	} else if (this.frameType == FRAME_IMAGE){
//		arrWidthIndex=[1,3];
//		arrLeftIndex=[2];
//		arrHeightIndex=[3];
	} else if (this.frameType == FRAME_NEW_ROUND){
//		arrTopIndex=[5,6,7,8,15,16,17,18];
//		arrWidthIndex=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];
//		arrHeightIndex=[4,9,14,19];
		this.tagObject.style.left = this.left;
		this.tagObject.style.top = this.top;
		this.tagObject.style.width = this.width;
		this.tagObject.style.height = this.height;
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER){
//		arrWidthIndex=[0,1,2,4,5,6,7,8];
//		arrHeightIndex=[0,1,2];
//		if(this.tagObject.getElementsByTagName("IMG")[0]){
//			em = this.tagObject.getElementsByTagName("IMG")[0];
//			em.style.left=((em.style.left == "" ? parseIntSize(window.getComputedStyle(em).left.replace(/px/g,'')) : parseIntSize(em.style.left)) + wGap) +'px';
//		}
	} else if (this.frameType == FRAME_NEW_FLOATINGLAYER_NEW){
		this.tagObject.style.left = this.left;
		this.tagObject.style.top = this.top;
		this.tagObject.style.width = this.width;
		this.tagObject.style.height = this.height;
		
		//내용 박스 Div
		var titleHeight = getComputedStyle(this.labelObject).height.replace("px", "");
    	var divItems = this.tagObject.getElementsByTagName("div");
    	var contentDiv = null;
    	for(var i = 0; i < divItems.length; i++){
    		if( divItems[i].getAttribute("class") == "content" ){
    			contentDiv = divItems[i]; break;
    		}
    	}
    	contentDiv.style.height = (this.height - 7 - (titleHeight * 1) - 7) + "px";
	} else if (this.frameType == FRAME_NEW_NONE){
//		arrWidthIndex=[0,1];
//		arrHeightIndex=[0];
		this.tagObject.style.left = this.left;
		this.tagObject.style.top = this.top;
		this.tagObject.style.width = this.width;
		this.tagObject.style.height = this.height;
	}
	
//	for (var i=0; i < arrTopIndex.length; i++){
//		em = this.tagObject.getElementsByTagName("DIV")[(arrTopIndex[i])];
//		em.style.top=((em.style.top == "" ? parseIntSize(window.getComputedStyle(em).top.replace(/px/g,'')) : parseIntSize(em.style.top)) + hGap) +'px';
//	}
//	for (var i=0; i < arrLeftIndex.length; i++){
//		em = this.tagObject.getElementsByTagName("DIV")[(arrLeftIndex[i])];
//		em.style.left=((em.style.left == "" ? parseIntSize(window.getComputedStyle(em).left.replace(/px/g,'')) : parseIntSize(em.style.left)) + wGap) +'px';
//	}
//	for (var i=0; i < arrWidthIndex.length; i++){
//		em = this.tagObject.getElementsByTagName("DIV")[(arrWidthIndex[i])];
//		em.style.width=((em.style.width == "" ? parseIntSize(window.getComputedStyle(em).width.replace(/px/g,'')) : parseIntSize(em.style.width)) + wGap) +'px';
//	}
//	for (var i=0; i < arrHeightIndex.length; i++){
//		em = this.tagObject.getElementsByTagName("DIV")[(arrHeightIndex[i])];
//		em.style.height=((em.style.height == "" ? parseIntSize(window.getComputedStyle(em).height.replace(/px/g,'')) : parseIntSize(em.style.height)) + hGap) +'px';
//	}
	
	return;
};

/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.click = function(){
	// functionname : [FrameBox.click]
	
	this.tagObject.click();
	
	return;
};
/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
FrameBox.prototype.SetFocus = function(){
	// functionname : [FrameBox.SetFocus]
	
	this.tagObject.focus();
	
	return;
};
/**
 * @description	미결
 * @param		{Object}	tagObject
 * @param		{Object}	grabx
 * @param		{Object}	graby
 * @return		{undefined}
 * @example		미결
 */
function MoveObject(tagObject, grabx, graby){
    this.tagObject=tagObject;
    this.grabx=grabx;
    this.graby=graby;
};

/**
 * @description	미결
 * @returns 	{Boolean}
 * @example		미결
 */
function FrameBox_onclick(){
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		var checkEvent = false;
		var control = searchControl_Frame(getSrcElement(event));
		
//		try {
//			if (eval(control.controlId + "_onclick")){ checkEvent = true;
//			}
//		} catch(e){}
//		if (checkEvent){
//		   var result = eval(control.controlId + "_onclick()");
//		   if (typeof(result)=="boolean" && !result) {
//			   return false;
//		   }
//		}
		
		//이벤트 처리
		if( control.hasClickEvent ){
			var result = control.fncClickEvent();
			if( typeof result == "boolean" && !result ){
				return false;
			}
		}
	}
	
	return true;
};
/**
 * @name		FrameBox#FrameBox_onkeydown
 * @event
 * @return		{boolean}
 * @description 미결
 */
function FrameBox_onkeydown(e){
	e = window.event || e;
    //입력된 키 정보
    var wKeyCode = (e.which) ? e.which : e.keyCode;	// 키 코드
    var wCtrlDown = e.ctrlKey || e.metaKey;			// 컨트롤 // 커맨드(Mac지원)
    var wAltDown = e.altKey;						// 알트
    var wShiftDown = getShiftKeyPressed(e);			// 쉬프트
	
    //passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		var checkEvent = false;
		var result = false;
		var control = searchControl_Frame(getSrcElement(event));
		
//		//이벤트 처리 함수 체크
//		try{
//			if( typeof self[control.controlId + "_onkeydown"] == "function" ){
//				checkEvent = true;
//			}
//		}
//		catch(e){ }
//		//이벤트 처리
//		if( checkEvent ){
//			result = self[control.controlId + "_onkeydown"](wKeyCode, wShiftDown, wCtrlDown, wAltDown);
//			if( typeof(result) == "boolean" && !result ){
//				return false;
//			}
//		}
		
		//이벤트 처리
		if( control.hasKeyDownEvent ){
			var result = control.fncKeyDownEvent();
			if( typeof result == "boolean" && !result ){
				return false;
			}
		}
    }
	
    return true;
}
/**
 * @name		FrameBox#frameBox_onClick_X
 * @event
 * @return		{boolean}
 * @description 미결
 */
function frameBox_onClick_X(e){
	if (!e) e = window.event;
	
	var control = searchControl_Frame(getSrcElement(e));
	control.setVisible(false);

    stopEvent(e);
    
	return;
};

/**
 * @name		FrameBox#frameBox_onmousedown
 * @event
 * @return		{boolean}
 * @description 미결
 */
function frameBox_onmousedown(e){
	if (!e) e = window.event;
	
	var em = getSrcElement(e);
	
	var control = searchControl_Frame(em);
	movingFrame = control.tagObject;		// 최상의 frame1의 테그를 기억
    offsetx = event.clientX;				// 마우스 다운시 X좌표 기억
    offsety = event.clientY;				// 마우스 다운시 Y좌표 기억
    
    var comp = movingFrame.currentStyle ? movingFrame.currentStyle : getComputedStyle(movingFrame, null);
    nowX = parseInt(comp.left);				// 마우스 다운시 frame1의  left값 기억
    nowY = parseInt(comp.top);				// 마우스 다운시 frame1의  top값 기억
    frameMoveStart=true;
    
    stopEvent(e);
};
/**
 * @name		FrameBox#frameBox_onmousemove
 * @event
 * @return		{boolean}
 * @description 미결
 */
function frameBox_onmousemove(e){
	if (!e) e = window.event;

	if (!frameMoveStart) return false; /// 마우스 다운했는지여부 판단
	
	movingFrame.style.position = "absolute";
	movingFrame.style.left=(nowX+event.clientX-offsetx) + "px";	//마우스 다운시 x좌표와 left의 기억값을 frame1의 테그의 값에다가 적용
	movingFrame.style.top=(nowY+event.clientY-offsety) + "px";	//마우스 다운시 x좌표와 left의 기억값을 frame1의 테그의 값에다가 적용
	
	stopEvent(e);
	
	return true;  
};

/*function frameBox_onmouseout(e){
	if (!e) e = window.event;
	
	frameMoveStart = false; /// 마우스 업했을경우 더이상 동작못하게 설정.
    stopEvent(e);
};*/
/**
 * @name		FrameBox#frameBox_onmouseup
 * @event
 * @return		{boolean}
 * @description 미결
 */
function frameBox_onmouseup(e){
	if (!e) e = window.event;
	
    frameMoveStart = false;	// 마우스 업했을경우 더이상 동작못하게 설정.
    
    stopEvent(e);
};/**
 * @class Label 컨트롤 클래스
 * @constructor Label Class 생성자 함수
 * 
 * @param controlId
 *            해당 컨트롤의 ID를 지정합니다.
 * @param controlName
 *            해당 컨트롤의 Name을 지정합니다.
 * @param tagObject
 *            해당 컨트롤의 태그 객체를 지정합니다.
 * 
 * @return 객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>
 *         만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
 * 
 * @example var wControl = controls["label_1"] = new Label( "label_1",
 *          "Label_1", document.getElementsByName("label_1")[0] );
 *          if(wControl.errorMsg != null){ //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요. }
 */
function Label(controlId, controlName, tagObject){
    this.base = ControlBase;      //부모클래스 지정
    this.base(controlId, controlName, tagObject);         //부모클래스 생성자호출
//    this.value = tagObject.innerHTML.replaceWord("<BR/>", "\r\n");
    this.value = trim(tagObject.getElementsByTagName("td")[0].innerText);
};

Label.prototype = new ControlBase();

/**
 * @description 라벨 컨트롤의 ID를 반환합니다.
 * @param em
 *            {Object} 라벨 컨트롤 객체를 입력합니다.
 * @return 라벨 컨트롤의 ID를 반환합니다.<br>
 *         만약 에러가 발생할 경우, false 반환합니다.
 * @example var wControl = searchControl_Label(
 *          document.getElementsByName("label_1")[0] ); if(wControl == null){ //
 *          라벨 컨트롤을 찾는데 실패하였습니다. } if(wControl == false){ // searchControl_Label
 *          함수 동작 중 에러가 발생하였습니다. }
 *  // 후속코드 생략...
 */
function searchControl_Label(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while (pEm.parentNode && !pEm.className.startsWith("Label")) 
//		pEm = pEm.parentNode;
//	if (pEm.className.startsWith("Label")) 
//	    wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "Label"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "Label" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("Label"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("Label") )
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/**
 * @description 라벨 컨트롤의 표시문자열을 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param caption
 *            {String} 라벨 컨트롤의 표시문자열에 설정할 문자열을 입력합니다.
 * @return 표시문자열을 설정하는데 성공한다면 true를 반환하고<br>
 *         설정하기를 실패하거나 에러가 발생한다면 false를 반환합니다.
 * @example var wControl = controls["label_1"]; //라벨 컨트롤의 표시문자열을 '위너소프트'로 변경합니다.
 *          if( false == wControl.setValue("위너소프트") ){ //표시문자열 지정에 실패하였습니다. 에러처리
 *          코드를 입력해주세요. //에러 발생시 setValue 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *          Label.errorMsg 필드로 확인할 수 있습니다. }
 */
Label.prototype.setValue = function(caption){
    // functionname : [FrameBox.setCaption]
    
    this.setCaption(caption);
	return;
};

/**
 * @description 라벨 컨트롤의 표시문자열을 가져온다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @return 표시문자열을 가져오는데 성공한다면 표시문자열을 반환합니다.<br>
 *         가져오기에 실패하거나 에러가 발생한다면 false를 반환합니다.
 * @example var wControl = controls["label_1"]; //라벨 컨트롤의 표시문자열을 가져옵니다. var res =
 *          wControl.getValue(); if( false == res ){ //표시문자열을 가져오는데 실패하였습니다.
 *          에러처리 코드를 입력해주세요. //가져오기에 실패하거나 에러 발생시 getValue 메소드는 false 를 반환합니다.
 *          //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
Label.prototype.getValue = function(){
    // functionname : [FrameBox.setCaption]
    
	return this.getCaption();
};

/**
 * @description 라벨 컨트롤의 표시문자열을 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param caption
 *            {String} 라벨 컨트롤의 표시문자열에 설정할 문자열을 입력합니다.
 * @return 표시문자열을 설정하는데 성공한다면 true를 반환합니다<br>
 *         가져오기에 실패하거나 에러가 발생한다면 false를 반환합니다.
 * @example var wControl = controls["label_1"]; //라벨 컨트롤의 표시문자열을 '위너소프트'로 변경합니다.
 *          var res = wControl.setCaption("위너소프트") if( false == res ){ //표시문자열을
 *          설정하는데 실패하였습니다. 에러처리 코드를 입력해주세요. //설정하기에 실패하거나 에러 발생시 setCaption 메소드는
 *          false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
Label.prototype.setCaption = function(caption){
    // functionname : [FrameBox.setCaption]
                       
    caption = "" + caption;
    var wHTML = caption.replaceWord("\r\n", "<BR/>").replaceWord("\n", "<BR/>");
    var wObjectTD = this.tagObject.getElementsByTagName("td")[0];
    if(typeof wObjectTD != "undefined" || wObjectTD == null){
    	wObjectTD.innerText = wHTML;
    }
    else{
    	this.tagObject.innerHTML = wHTML;
    }
    this.value = caption;
    
	return;
};

/**
 * @description 라벨 컨트롤의 표시문자열을 가져옵니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @return 표시문자열을 가져오는데 성공한다면 표시문자열을 반환하고, 에러가 발생한다면 undefined를 가져온다.
 * @example var wControl = controls["label_1"]; //라벨 컨트롤의 표시문자열을 '위너소프트'로 변경합니다.
 *          var res = wControl.setCaption("위너소프트") if( false == res ){ //표시문자열을
 *          설정하는데 실패하였습니다. 에러처리 코드를 입력해주세요. //설정하기에 실패하거나 에러 발생시 setCaption 메소드는
 *          false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
Label.prototype.getCaption = function(){
    // functionname : [FrameBox.setCaption]
    
    //var wHTML = this.tagObject.innerHTML;
	//return wHTML.replaceWord("<BR/>", "\r\n");
	
	var wHTML = "";
	var wObjectTD = this.tagObject.getElementsByTagName("td")[0];
	if(typeof wObjectTD != "undefined" || wObjectTD == null){
		wHTML = wObjectTD.innerText;
    }
    else{
    	wHTML = this.tagObject.innerHTML;
    }
	
	return wHTML.replaceWord("<BR/>", "\r\n");
};
/**
 *       @class          TabBox 컨트롤 클래스
 *       @constructor    TabBox
 *
 *       @param          controlId     해당 컨트롤의 ID를 지정한다.
 *       @param          controlName   해당 컨트롤의 Name을 지정한다.
 *       @param          tagObject     해당 컨트롤의 태그 속성을 설정하는 객체를 지정한다.
 *
 *       @return         생성자 호출에 성공했다면 true를 리턴하지만, 실패했다면 false를 리턴한다.
 *
 *       @example        var wControls = controls["TabBox_1"] = new TabBox("tabbox_1", "TabBox_1", document.getElementsByName("tabbox_1")[0]);
 *        if(wControl.errorMsg != null){
 *            //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 *
 *        // 후속코드 생략...
 */
function TabBox(controlId, controlName, tagObject){
	// 상속선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	this.tagObject = tagObject;
	
	// 상수 선언부
	// 속성 선언부
	this.tabcount = 0;
	this.currentTab = 0;
	this.tabSideBtnMouseDowned = false;
	
	var tabHeaderRow = document.getElementById(controlId + "_header");
	var tabCells = null;
	var tabSelCell = null;
	var sideBarLeftArrow = null;
	var sideBarRightArrow = null;
	
	if( tabHeaderRow != null ){
		tabCells = tabHeaderRow.getElementsByClassName("TabGen");
		tabSelCell = tabHeaderRow.getElementsByClassName("TabSel")[0];
		sideBarLeftArrow = tabHeaderRow.getElementsByClassName("LeftArrow")[0];
		sideBarRightArrow = tabHeaderRow.getElementsByClassName("RightArrow")[0];
		
//		this.tabcount = tabCells.length - 1;
		this.tabcount = tabCells.length;
		
		if( tabSelCell != null && typeof tabSelCell != "undefined" )
			this.currentTab = (1 * tabSelCell.getAttribute("tabnum"));
	}
	
	if( tagObject != undefined ){
		tagObject.setAttribute("tabIndex", "-1");
	}
	
	// 이벤트 선언부
	// 탭 클립 이벤트
	for(var i = 0; i < tabCells.length; i++){
		setEventHandler(tabCells[i], "click", tabbox_Click);
	}
	// 사이드 버튼 클릭 이벤트
	if( sideBarLeftArrow != null ){
		setEventHandler(sideBarLeftArrow, "mousedown", tabbox_SideBtn_Mousedown);
		setEventHandler(sideBarLeftArrow, "mouseup", tabbox_SideBtn_Mouseup);
		setEventHandler(sideBarLeftArrow, "mouseout", tabbox_SideBtn_Mouseup);
	}
	if( sideBarLeftArrow != null ){
		setEventHandler(sideBarRightArrow, "mousedown", tabbox_SideBtn_Mousedown);
		setEventHandler(sideBarRightArrow, "mouseup", tabbox_SideBtn_Mouseup);
		setEventHandler(sideBarRightArrow, "mouseout", tabbox_SideBtn_Mouseup);
	}
	
	// 사용자 이벤트 처리
	this.hasClickEvent = false; this.fncClickEvent = null;
	
	if( this.controlId.length > 0 ){
		//이벤트 함수 코드 생성 여부
		this.hasClickEvent = (typeof self[this.controlId + "_ontabclick"] != "undefined");
		//이벤트 함수 코드가 생성되었다면 이벤트 호출 함수 생성
		if( this.hasClickEvent ){
			this.fncClickEvent = new Function("return function (oldTabNum, newTabNum) { return " + this.controlId + "_ontabclick(oldTabNum, newTabNum); }")();
		}
	}
	
	// 메모리 해제
	sideBarRightArrow = null; sideBarLeftArrow = null;
	tabSelCell = null; tabCells = null; tabHeaderRow = null;
};

TabBox.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함

/**
 *       @description    탭박스 컨트롤을 찾습니다.
 *       @param          em        {Object}      컨트롤의 태그 객체를 입력합니다.
 *       @return         탭박스 컨트롤을 찾는다면 탭박스의 컨트롤 ID를 반환하고, 찾지 못한다면 null을 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControl = searchControl_CheckBox( document.getElementsByName("tabbox_1")[0] )
 *        if(wControl == null){  // 탭박스 컨트롤을 찾는데 실패하였습니다. }
 *        if(wControl == false){ // searchControl_CheckBox 함수 동
 *        작 중 에러가 발생하였습니다. }
 *
 *        // 후속코드 생략...
 */
function searchControl_TabBox(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while(pEm.parentNode && !pEm.className.startsWith("TabBox")) 
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("TabBox") ) 
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "TabBox"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "TabBox" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("TabBox"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("TabBox") )
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
}

/**
 *     	@description  미결
 *     	@return       {undefined}
 *     	@example      미결
 */
TabBox.prototype.tabResize = function(){
	var tabHeaderRow = document.getElementById(this.controlId + "_header");
	
	if( tabHeaderRow != null ){
		var tabTable = tabHeaderRow.getElementsByClassName("TabTable")[0];
		var tabGenCells = tabHeaderRow.getElementsByClassName("TabGen");
		var tabBlankCells = tabHeaderRow.getElementsByClassName("TabBlank")[0];
		var tabSideBar = tabHeaderRow.getElementsByClassName("TabSideBar")[0];
		var cellStyle = null;
		
		var tabBoxWidth = parseIntSize(getComputedStyle(this.tagObject, null).width);
		var tabTableMarginLeft = parseIntSize(tabTable.style.marginLeft);
		var tabSideBarLeft = parseIntSize(getComputedStyle(tabSideBar, null).left);
		var tabWidthSum = 0;
		var tabWidthBlank = 0;
		var i = 0;
		
		//탭의 너비의 총 합을 구합니다.
		for(i = 0; i < tabGenCells.length; i++, cellStyle = null){
			cellStyle = getComputedStyle(tabGenCells[i], null);
			tabWidthSum += (tabGenCells[i].getAttribute("hidetab") == "true") ? 0 : parseIntSize(cellStyle.width);
		}
		
		//Blank탭 및 탭 테이블의 너비 등 재계산
		tabWidthBlank = tabBoxWidth - tabWidthSum;
		
		tabTable.style.width = (tabWidthBlank < 0) ? tabWidthSum : tabBoxWidth;
		if( tabTableMarginLeft < 0 && tabWidthSum + tabTableMarginLeft <= tabSideBarLeft )
			tabTable.style.marginLeft = ((tabTableMarginLeft < 0 && tabWidthBlank <= 0) ? tabBoxWidth - 40 - tabWidthSum : 0) + "px";
		tabBlankCells.style.width = (tabWidthBlank <= 0 ? 0 : tabWidthBlank) + "px";
		
		//탭 사이드바 보이기
//		tabSideBar.style.display = (tabWidthBlank <= 0) ? "block" : "none";
//		tabSideBar.style.display = (tabWidthBlank <= 0) ? "table" : "none";	//2019.04.19 jaeik firefox에서 하위 콘트롤 top위치가 맞지 않는 문제가 있어 display = "table" 로 변경
		tabSideBar.style.display = (tabWidthBlank <= 0) ? "table" : "";
		tabSideBar.style.visibility = (tabWidthBlank <= 0) ? "visible" : "hidden";
		
		//메모리 초기화
		cellStyle = null;
		tabSideBar = null;
		tabBlankCells = null;
		tabGenCells = null;
		tabTable = null;
	}
	
	//메모리 초기화
	tabHeaderRow = null;
};

/**
 *       @description    지정한 인덱스의 탭을 보여줍니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          tabIndex        {Number}        선택하고 싶은 탭의 인덱스 입니다.
 *       @return         지정한 인덱스의 탭을 선택하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControls = controls["TabBox_1"];
 *        //2번 탭을 보여줍니다.
 *        if( wControl.showTab(2) == false ){
 *           //2번 인덱스 탭 보여주기 실패하였습니다. 에러처리 코드를 입력해주세요.
 *           //탭 보여주기를 실패하거나 에러 발생시 showTab 메소드는 false 를 반환합니다.
 *           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
TabBox.prototype.showTab = function(tabIndex){
	// functionname : [TabBox.showTab]
	
	//예외처리
	//tabIndex는 0부터 시작
	if( tabIndex < 0 )
		return false;
	//tabIndex 초과
	if( tabIndex > this.tabcount )
		return false;
	
	var result = false;
	var tabHeaderRow = document.getElementById(this.controlId + "_header");
	
	if( tabHeaderRow != null ){
		var tabs = tabHeaderRow.getElementsByClassName("TabGen");
		var tab = tabs[tabIndex];
		
		//해당 tabIndex의 탭을 가져오지 못한 경우
		if( tab == null || typeof tab == "undefined" ){
			tab = null; tabs = null; tabHeaderRow = null;	//메모리 해제
			return false;			
		}
		
		//탭 속성 설정
		tab.setAttribute("hidetab", "false");
		//탭 사이즈 조정
		this.tabResize();
		//탭 보이기
		tab.style.display = "";
		
		//처리 결과
		result = true;
		
		//메모리 해제
		tab = null; tabs = null;
	}
	
	//메모리 해제
	tabHeaderRow = null;
	
	return result;
};

/**
 *       @description    지정한 인덱스의 탭을 숨깁니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          tabIndex        {Number}        선택하고 싶은 탭의 인덱스 입니다.
 *       @return         지정한 인덱스의 탭을 선택하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControls = controls["TabBox_1"];
 *        //2번 탭을 숨깁니다.
 *        if( wControl.showTab(2) == false ){
 *           //2번 인덱스 탭 숨기기 실패하였습니다. 에러처리 코드를 입력해주세요.
 *           //탭 숨기기를 실패하거나 에러 발생시 hideTab 메소드는 false 를 반환합니다.
 *           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
TabBox.prototype.hideTab = function(tabIndex){
	// functionname : [TabBox.hideTab]
	
	//예외처리
	//tabIndex는 0부터 시작
	if( tabIndex < 0 )
		return false;
	//tabIndex 초과
	if( tabIndex > this.tabcount )
		return false;
	
	var result = false;
	var tabHeaderRow = document.getElementById(this.controlId + "_header");
	
	if( tabHeaderRow != null ){
		var tabs = tabHeaderRow.getElementsByClassName("TabGen");
		var tab = tabs[tabIndex];
		
		//해당 tabIndex의 탭을 가져오지 못한 경우
		if( tab == null || typeof tab == "undefined" ){
			tab = null; tabs = null; tabHeaderRow = null;	//메모리 해제
			return false;			
		}
		
		//탭 속성 설정
		tab.setAttribute("hidetab", "true");
		//탭 사이즈 조정
		this.tabResize();
		//탭 숨기기
//		tab.style.display = "none";
		tab.style.display = "";
		tab.style.visibility = "hidden";
		
		//처리 결과
		result = true;
		
		//메모리 해제
		tab = null; tabs = null;
	}
	
	//메모리 해제
	tabHeaderRow = null;
	
	return result;
};

/**
 *     	@description  미결	
 *     	@param		  {String}  tabIndex
 *     	@param		  {String}  title
 *     	@return       {Boolean}
 *     	@example      미결
 */
TabBox.prototype.setTabTitle = function(tabIndex, title){
	// functionname : [TabBox.setTabTitle]
	
	//예외처리
	//tabIndex는 0부터 시작
	if( tabIndex < 0 )
		return false;
	//tabIndex 초과
	if( tabIndex > this.tabcount )
		return false;
	
	var result = false;
	var tabHeaderRow = document.getElementById(this.controlId + "_header");
	
	if( tabHeaderRow != null ){
		var tabs = tabHeaderRow.getElementsByClassName("TabGen");
		var tab = tabs[tabIndex];
		
		//해당 tabIndex의 탭을 가져오지 못한 경우
		if( tab == null || typeof tab == "undefined" ){
			tab = null; tabs = null; tabHeaderRow = null;	//메모리 해제
			return false;			
		}
		
		//타이틀 설정
		tab.setAttribute("title", title);
		tab.innerText = title;
		
		//처리 결과
		result = true;
		
		//메모리 초기화
		tab = null; tabs = null;
	}
	
	//메모리 해제
	tabHeaderRow = null;
	
	return result;
};

/**
 *     	@description  미결
 *     	@param		  {String}	tabIndex
 *     	@return       {String}
 *     	@example      미결
 */
TabBox.prototype.getTabTitle = function(tabIndex){
	// functionname : [TabBox.setTabTitle]
	
	//예외처리
	//tabIndex는 0부터 시작
	if( tabIndex < 0 )
		return false;
	//tabIndex 초과
	if( tabIndex > this.tabcount )
		return false;
	
	var title = null;
	var tabHeaderRow = document.getElementById(this.controlId + "_header");
	
	if( tabHeaderRow != null ){
		var tabs = this.tagObject.getElementsByClassName("TabGen");
		var tab = tabs[tabIndex - 1];
		
		//해당 tabIndex의 탭을 가져오지 못한 경우
		if( tab == null || typeof tab == "undefined" ){
			tab = null; tabs = null; tabHeaderRow = null;	//메모리 해제
			return null;
		}
		
		title = tab.innerText.trim();
		
		//메모리 초기화
		tab = null; tabs = null;
	}
	
	//메모리 초기화
	tabHeaderRow = null;
	
	return title;
};

/**
 *       @description    지정한 인덱스의 탭을 선택하고 탭 내용을 보여줍니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          tabIndex        {Number}        선택하고 싶은 탭의 인덱스 입니다.
 *       @return         지정한 인덱스의 탭을 선택하면 true를 반환합니다.<br>만약 에러가 발생한다면 false를 반환합니다.
 *       @example        var wControls = controls["TabBox_1"];
 *        //2번 탭을 선택합니다.
 *        if( wControl.setTabIndex(2) == false ){
 *           //2번 인덱스 탭 선택 실패하였습니다. 에러처리 코드를 입력해주세요.
 *           //탭 선택을 실패하거나 에러 발생시 setTabIndex 메소드는 false 를 반환합니다.
 *           //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다.
 *        }
 */
TabBox.prototype.setTabIndex = function(tabIndex){
	// functionname : [TabBox.setTabIndex]
	
	var tabHeaderRow = document.getElementById(this.controlId + "_header");
	
	if( tabHeaderRow != null ){
		var tabGenCells = tabHeaderRow.getElementsByClassName("TabGen");
		var tabGenCell = null;
		var paneName = null;
		var paneBox = null;
		
		var oldTab = this.currentTab;
		var tabCount = tabGenCells.length;
		var i = 0;
		
		//현재 탭 인덱스 설정
		this.currentTab = tabIndex;
		
		for(i = 0; i < tabCount; i++, tabGenCell = null, paneName = null, paneBox = null){
			tabGenCell = tabGenCells[i];
			paneName = tabGenCell.getAttribute("pane");
			
			//탭 본문 객체 찾음
			if( paneName != null && (typeof paneName == "string" && paneName != "") )
				paneBox = document.getElementsByName(paneName)[0];
			
			//탭 선택여부에 따른 탭 클래스 및 본문 보이기 여부 설정
			if( i == tabIndex ){
				//텝 클래스 설정
				tabGenCell.setAttribute("class", "TabGen TabSel");
				//탭 선택여부에 따른 본문 보이기
				if( paneBox != null && typeof paneBox != "undefined" ){
//					paneBox.style.display = "block";
//					paneBox.style.display = "table"; //2019.04.19 jaeik firefox에서 하위 콘트롤 top위치가 맞지 않는 문제가 있어 display = "table" 로 변경
					paneBox.style.display = "table";
					paneBox.style.visibility = "visible";
					//탭 안의 시트 리사이즈
					_resizeSheetInTabbox(paneBox);
				}
			}
			else{
				//텝 클래스 설정
				tabGenCell.setAttribute("class", "TabGen");
				//탭 선택여부에 따른 본문 숨기기
//				if( paneBox != null ) paneBox.style.display = "none";
				if( paneBox != null ) paneBox.style.display = "";
				if( paneBox != null ) paneBox.style.visibility = "hidden";
			}
		}
		
		//이벤트 호출
		if( this.hasClickEvent ){
			if( !this.fncClickEvent(oldTab, this.currentTab) ){
				this.hasClickEvent = false;	//탭 클릭 이벤트 발생을 막기위해 임시로 false로 설정
				this.setTabIndex(oldTab);	//이전 탭 인덱스로 복구
				this.hasClickEvent = true;	//원래 상태 복구
			}
		}
		
		//메모리 해제
		paneBox = null; paneName = null; tabGenCell = null; tabGenCells = null;
	}
	
	//메모리 해제
	tabHeaderRow = null;
	
	return;
};

/**
 * 		탭 활성화
 *     	@description  미결
 *     	@param		  {String}  tabIndex
 *     	@return       {Boolean}
 *     	@example      미결
 */
TabBox.prototype.setEnabled = function(tabIndex){
	// functionname : [TabBox.setEnabled]
	
	var wReturn = true;
	
	if( typeof tabIndex == "number" && (tabIndex >= 0 && tabIndex < this.tabCount) ){
		var tabHeaderRow = document.getElementById(this.controlId + "_header");
		var tabs = null;
		var tab = null;
		
		if( tabHeaderRow != null ){
			tabs = tabHeaderRow.getElementsByClassName("TabGen");
			tab = tabs[tabIndex];
			
			//해당 tabIndex의 탭을 가져오지 못한 경우
			if( tab == null || typeof tab == "undefined" ){
				tab = null; tabs = null; tabHeaderRow = null;	//메모리 해제
				return null;
			}
			
			tab.style.pointerEvents = "";
			tab.style.opacity = "";
			tab.style.filter = "";
			
			//메모리 해제
			tab = null; tabs = null;
		}
		
		//메모리 해제
		tabHeaderRow = null;
	}
	else if( typeof tabIndex == "boolean" ){
		var childObject = null;
		var childCount = this.tagObject.children.length;
		var i = 0;
		var j = 0;
		
		this.enabled = tabIndex;
		this.tagObject.disabled = !this.enabled;
		
		//하위 테그들 조정
		for(i = 0; i < childCount; i++, childObject = null){
			childObject = this.tagObject.children[i];
			childTag.disabled = !enabled;
			
			for(j = 0; j < childTag.children.length; j++){
				childTag.children[j].disabled = !this.enabled;
			}
		}
	}
	else{
		wReturn = false;
	}
	
	return wReturn;
};

/**
 *		탭비활성화
 *     	@description  미결
 *     	@param		  {String}  tabIndex
 *     	@return       {Boolean}
 *     	@example      미결
 */
TabBox.prototype.setDisabled = function(tabIndex){
	// functionname : [TabBox.setDisabled]
	
	var wReturn = true;
	var enabled = null;
	var childTag = null;
	
	if( typeof tabIndex == "number" && (tabIndex >= 0 && tabIndex < this.tabCount) ){
		var tabHeaderRow = document.getElementById(this.controlId + "_header");
		var tabs = null;
		var tab = null;
		
		if( tabHeaderRow != null ){
			tabs = tabHeaderRow.getElementsByClassName("TabGen");
			tab = tabs[tabIndex];
			
			//해당 tabIndex의 탭을 가져오지 못한 경우
			if( tab == null || typeof tab == "undefined" ){
				tab = null; tabs = null; tabHeaderRow = null;	//메모리 해제
				return null;
			}
			
			tab.style.pointerEvents = "none";
			tab.style.opacity = "0.9";
			tab.style.filter = 'Alpha(Opacity=60)';	
			
			//메모리 해제
			tab = null; tabs = null;
		}
		
		//메모리 해제
		tabHeaderRow = null;
	}
	else if( typeof tabIndex == "boolean" ){ 
		var childObject = null;
		var childCount = this.tagObject.children.length;
		var i = 0;
		var j = 0;
		
		this.enabled = tabIndex;
		this.tagObject.disabled = !this.enabled;
		
		//하위 테그들 조정
		for(i = 0; i < childCount; i++, childObject = null){
			childObject = this.tagObject.children[i];
			childTag.disabled = !enabled;
			
			for(j = 0; j < childTag.children.length; j++){
				childTag.children[j].disabled = !this.enabled;
			}
		}
	}
	else{
		wReturn = false;
	}
	
	return wReturn;
};

/**
 *     	@description  미결
 *     	@param        {String}		panetabbox       
 *     	@return       {undefined}
 *     	@example      미결
 */
function _resizeSheetInTabbox(paneTabbox){
	if( paneTabbox == null || typeof paneTabbox == "undefined" )
		return;
	
	var childsInTab = paneTabbox.children;
	var childObject = null;
	var childCount = childsInTab.length;
	var i = 0;
	
	var className = null;
	var control = null;
	
	for(className = "", i = 0; i < childCount; i++, childObject = null, className = "", control = null){
		childObject = childsInTab[i];
		className = ("" + childObject.getAttribute("class"));
		control = controls[("" + childObject.getAttribute("ctlname"))];
		
		//시트인 경우 리사이즈
		if( className.indexOf("DataSheet") >= 0 ){
			if( control != null && typeof control != "undefined" ){
				if( typeof control.setPosition == "function" ) control.setPosition();
				if( typeof control.refresh == "function" ) control.refresh();
				if( typeof control.resize == "function" ) control.resize();
			}
		}
		//탭인 경우 선택된 탭 안의 시트 리사이즈
		else if( className.indexOf("TabBox") >= 0 ){
			if( control != null && typeof control != "undefined" ){
				var tabHeaderRow = document.getElementById(control.controlId + "_header");
				var tabs = null;
				var tab = null;
				var tabCount = 0;
				var j = 0;
				
				if( tabHeaderRow != null ){
					tabs = tabHeaderRow.getElementsByClassName("TabGen");
					
					for(tabCount = tabs.length, j = 0; j < tabCount; j++, tab = null){
						tab = tabs[j];
						
						if( ("" + tab.getAttribute("class")).indexOf("TabSel") >= 0 ){
							//텝 안의 시트 리사이즈
							_resizeSheetInTabbox( document.getElementsByName(("" + tab.getAttribute("pane")))[0] );
						}
					}
					
					//메모리 해제
					tab = null; tabs = null;
				}
				
				if( typeof control.tabResize == "function" ) control.tabResize();
				
				//메모리 해제
				tabHeaderRow = null;
			}
		}
		//프레임 박스인 경우 프레임 박스 안의 시트 리사이즈
		else if( typeof FrameBox == "function" && control instanceof FrameBox ){
			if( control != null && typeof control != "undefined"
				&& control.tagObject != null && typeof control.tagObject != "undefined"
			){
				//텝 안의 시트 리사이즈
				_resizeSheetInTabbox( control.tagObject );
			}
		}
	}
	
	//메모리 해제
	control = null; className = null; childObject = null; childsInTab = null;
}

/**
 *     	@description  미결
 *     	@return       {Boolean}
 *     	@example      미결
 */
function tabbox_Click(){
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
	var control = searchControl_TabBox(em);
	
	if( control.enabled == false ){
		control = null; em = null;	//메모리 해제
		return false;
	}
	
	var oldTab = 1 * control.currentTab;
	var tabIndex = 1 * em.cellIndex;
	
	if( oldTab == tabIndex ){
		control = null; em = null;	//메모리 해제
		return false;
	}
	
	var tabHeaderRow = document.getElementById(control.controlId + "_header");
	var tabs = null;
	var tab = null;
	var paneName = null;
	var paneBox = null;
	var tabCount = 0;
	var i = 0;
	
	if( tabHeaderRow != null ){
		tabs = tabHeaderRow.getElementsByClassName("TabGen");
		tabCount = tabs.length;
		
		//현재 탭 인덱스 설정
		control.currentTab = tabIndex;
		
		for(i = 0; i < tabCount; i++, tab = null, paneName = null, paneBox = null){
			tab = tabs[i];
			paneName = tab.getAttribute("pane");
			
			//탭 본문 객체 찾음
			if( paneName != null && (typeof paneName == "string" && paneName != "") )
				paneBox = document.getElementsByName(paneName)[0];
			
			//탭 선택여부에 따른 탭 클래스 및 본문 보이기 여부 설정
			if( i == tabIndex ){
				//텝 클래스 설정
				tab.setAttribute("class", "TabGen TabSel");
				//탭 선택여부에 따른 본문 보이기
				if( paneBox != null && typeof paneBox != "undefined" ){
//					paneBox.style.display = "block";
//					paneBox.style.display = "table"; //2019.04.19 jaeik firefox에서 하위 콘트롤 top위치가 맞지 않는 문제가 있어 display = "table" 로 변경
					paneBox.style.display = "table";
					paneBox.style.visibility = "visible";
					//탭 안의 시트 리사이즈
					_resizeSheetInTabbox(paneBox);
				}
			}
			else{
				//텝 클래스 설정
				tab.setAttribute("class", "TabGen");
				//탭 선택여부에 따른 본문 숨기기
				if( paneBox != null ) paneBox.style.display = "none";
//				if( paneBox != null ) paneBox.style.display = "";
				if( paneBox != null ) paneBox.style.visibility = "hidden";
			}
		}
		
		//이벤트 호출
		/*if( this.hasClickEvent ){
			if( !this.fncClickEvent(oldTab, control.currentTab) ){
				this.hasClickEvent = false;	//탭 클릭 이벤트 발생을 막기위해 임시로 false로 설정
				this.setTabIndex(oldTab);	//이전 탭 인덱스로 복구
				this.hasClickEvent = true;	//원래 상태 복구
			}
		}*/
		if( control.hasClickEvent ){
			if( !control.fncClickEvent(oldTab, control.currentTab) ){
				control.hasClickEvent = false;	//탭 클릭 이벤트 발생을 막기위해 임시로 false로 설정
				control.setTabIndex(oldTab);	//이전 탭 인덱스로 복구
				control.hasClickEvent = true;	//원래 상태 복구
			}
		}
		
		//메모리 해제
		paneBox = null; paneName = null; tab = null; tabGenCells = null;
	}
	
	//메모리 해제
	tabHeaderRow = null;
	
	return true;
};

function tabbox_SideBtn_Mousedown(){
	var em = null;
	var control = null;
	var pEm = null;
	var className = null;
	var direction = 0;
	
	em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
	control = searchControl_TabBox(em);
	
	if( control.enabled == false ){
		control = null; em = null;	//메모리 해제
		return false;
	}
	
	pEm = em;
	className = pEm.getAttribute("class");
	className = (className == null || typeof className == "undefined") ? "" : className;
	
	while( pEm.parentNode && !(className.indexOf("LeftArrow") >= 0 || className.indexOf("RightArrow") >= 0) ){
		pEm = pEm.parentNode;
		className = pEm.getAttribute("class");
		className = (className == null || typeof className == "undefined") ? "" : className;
	}
	
	if( pEm.getAttribute("class").indexOf("LeftArrow") >= 0 )
		direction = 1;
	else if( pEm.getAttribute("class").indexOf("RightArrow") >= 0 )
		direction = -1;
	
	self._movTabMouseDown = true;
	self._movTabDirection = direction;
	self._movTabControl = control;
	
	tabbox_TabTableMove();
	
	stopEvent(event);
	
	className = null;
	pEm = null;
	control = null;
	em = null;
	
	return true;
}

function tabbox_SideBtn_Mouseup(){
	var em = null;
	var control = null;
	var pEm = null;
	var className = null;
	var direction = 0;
	
	em = (navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
	control = searchControl_TabBox(em);
	
	if( control.enabled == false ){
		control = null; em = null;	//메모리 해제
		return false;
	}
	
	self._movTabMouseDown = false;
	delete self._movTabDirection;
	delete self._movTabControl;
	
	stopEvent(event);
	
	className = null;
	pEm = null;
	control = null;
	em = null;
	
	return true;
}

function tabbox_TabTableMove(){
	if( !self._movTabMouseDown )
		return false;
	
	var tabHeaderRow = document.getElementById(self._movTabControl.controlId + "_header");
	
	if( tabHeaderRow == null )
		return false;
	
	var tabTable = tabHeaderRow.getElementsByClassName("TabTable")[0];
	var tabTableWidth = parseIntSize((tabTable.currentStyle ? tabTable.currentStyle : getComputedStyle(tabTable, null)).width);
	var sideBar = tabHeaderRow.getElementsByClassName("TabSideBar")[0];
	var sideBarWidth = parseIntSize((sideBar.currentStyle ? sideBar.currentStyle : getComputedStyle(sideBar, null)).width);
	var tabBox = self._movTabControl.tagObject;
	var tabBoxWidth = parseIntSize((tabBox.currentStyle ? tabBox.currentStyle : getComputedStyle(tabBox, null)).width);
	
	var maxMove = ((tabTableWidth + sideBarWidth) - tabBoxWidth) * -1;
	var leftMove = 1 * (("" + tabTable.style.marginLeft).replace("px", ""));
	
	leftMove = leftMove + (10 * self._movTabDirection);
	leftMove = (leftMove < maxMove) ? maxMove : leftMove;
	leftMove = (leftMove > 0) ? 0 : leftMove;
	
	tabTable.style.marginLeft = leftMove + "px";
	
	setTimeout(tabbox_TabTableMove, 200);
	
	tabBox = null;
	sideBar = null;
	tabTable = null;
}    /**
     * @class TreeView를 만들어주는 클래스
     * @param controlId
     *            {String} Control의 id를 입니다.
     * @param controlName
     *            {String} Control의 name을 입니다.
     * @param tagObject
     *            {Object} 태그객체 입니다.
     * @example 미결
     */   
function TreeView(controlId, controlName, tagObject){
    // 상속선언부
    this.base = ControlBase;              			//부모클래스 지정
    this.base(controlId, controlName, tagObject);   //부모클래스 생성자호출
    
    // 상수 선언부
    // 속성 선언부
    this.expandFirst = false;
    this.selectedItem = null;
    this.nodes = new Nodes();
    this.linkInfo = "";
    this.levelCount = 0;
    this.workNode = null;
    this.levelIcons = [];       // image 배열
    this.didIconDefined = [false, false, false, false, false, false, false, false, false, false, false];   // true / false
    this.fillAtOnce = [false, false, false, false, false, false, false, false, false, false, false];   // 단번에 채우는 스텝인가 여부
    this.innerDataset = null;
    
    // 최초 트리생성시 펼쳐지는 레벨
    this.firstOpenNodeLevel = 0;

    // 초기화 동작
    this.nodes.parentControl = this;
    
    if (tagObject != undefined){
        tagObject.setAttribute("tabIndex", "-1");
    }

    //  트리채우기 함수 
    this.hasfillTreeEvent = []; 
    this.fncfillTreeEvent = [];

    for (var i=0; i < 11; i++){
        var exist = this.hasfillTreeEvent[i] = (typeof self[ "fillTree_" + this.controlId + "_Step" + i ] != "undefined");
        if (!exist) continue;

        this.fncfillTreeEvent[i] = new Function("return function (nodeKey) { return fillTree_" + this.controlId  + "_Step" + i + "(nodeKey); }")();
    }
    
    // 클릭과 더블클릭 이벤트 
    this.hasNodeClickEvent = false; this.fncNodeClickEvent = null;
    this.hasNodeDblClickEvent = false;  this.fncNodeDblClickEvent = null;

    this.hasNodeClickEvent = (typeof self[this.controlId + "_onnodeclick"] != "undefined");
    if (this.hasNodeClickEvent){
        this.fncNodeClickEvent = new Function("return function (node) { return " + this.controlId + "_onnodeclick(node); }")();
    }

    this.hasNodeDblClickEvent = (typeof self[this.controlId + "_onnodedblclick"] != "undefined");
    if (this.hasNodeDblClickEvent){
        this.fncNodeDblClickEvent = new Function("return function (node) { return " + this.controlId + "_onnodedblclick(node); }")();
    }

};

TreeView.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함

/**
 * @description	미결
 * @param		{Object}	em
 * @return		{String}
 * @example		미결
 */
function searchControl_TreeView(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while (pEm.parentNode && !pEm.className.startsWith("TreeView")) 
//		pEm = pEm.parentNode;
//	if (pEm.className.startsWith("TreeView")) 
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "TreeView"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "TreeView" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("TreeView"))
			pEm = pEm.parentNode;
		
		if(pEm.className.startsWith("TreeView"))
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/**
 * @description	미결
 * @param		{Object}	em
 * @return		{String}
 * @example		미결
 */
function search_Node(em){
	var nodeTag = em;
	var wNode =  null;
	var wReturn = null;
	
	while (nodeTag.parentNode && nodeTag.className != "Node"){
		nodeTag = nodeTag.parentNode;
	}
	
	var control = searchControl_TreeView(em);
    for (var i=control.nodes.arrNodes.length - 1; i >= 0; i--){
        wNode = control.nodes.arrNodes[i];
        if (wNode.tagObject == nodeTag){
        	wReturn = wNode;
        }
    }
	
	
	return wReturn;
};

/**
 * @description	미결
 * @param		{Object}	em
 * @return		{String}
 * @example		미결
 */
function search_NodeTag(em){
	var nodeTag = em;
	var wReturn = null;
	
	while (nodeTag.parentNode && nodeTag.className != "Node") 
		nodeTag = nodeTag.parentNode;
	if (nodeTag.className == "Node") 
	    wReturn = nodeTag;

	return wReturn;
};

/**
 * @description	미결
 * @param 		{String}	key
 * @return		{String}
 * @example		미결
 */
TreeView.prototype.getNode = function(key){
	// functionname : [TreeView.getNode]

	return this.nodes.item(key);
};

/**
 * @description	미결
 * @param 		{String}	nLevel
 * @param		{String}	imageName
 * @return		{void}
 * @example		미결
 */
TreeView.prototype.setStepIcon = function(nLevel, imageName){
	// functionname : [TreeView.setStepIcon]
	this.levelIcons[nLevel] = new Image();
	this.levelIcons[nLevel].src = CONTEXT_ROOT + "/winnersoft/images/tree/" + imageName;
	
	for (var i=1; i < this.levelCount; i++){
		if (typeof this.didIconDefined[i] == "undefined") this.didIconDefined[i] = false;
	}
	this.didIconDefined[nLevel] = true;
	
	return;
};

/**
 * @description	미결
 * @param 		{number}	pStepNum
 * @param		{number}	recordset
 * @param		{number}	pExpanded
 * @param		{number}	byAllLevel
 * @param		{number}	useSelfLevel
 * @param		{number}	useCheckBox
 * @param		{number}	skipIfNotFound
 * @return		{boolean}
 * @example		미결
 */
TreeView.prototype.fillTree = function(pStepNum, recordset, pExpanded, byAllLevel, useSelfLevel, useCheckBox, skipIfNotFound){
	// functionname : [TreeView.fillTree]
	
	//hideAjaxBox();

	if (byAllLevel == undefined)   {byAllLevel = false;} 
	if (useSelfLevel == undefined) {useSelfLevel = false;} 
	if (useCheckBox == undefined)  {useCheckBox = false;}
	if (skipIfNotFound == undefined)  {skipIfNotFound = false;}
	
	this.fillAtOnce[pStepNum] = byAllLevel;
	
	var wNodes = this.nodes;
    var wNode  = null;

    while (!recordset.EOF){
        var wParentId = (recordset.fields.length < 3 ? "" : ("" + recordset.fields[2].value()).trim());
        
        // 1. 무조건 AllLevel이면 모든 레벨에서 찾는다.
        // 2. AllLevel이 아니면 Expanded인 경우 "상위스텝코드:키" 로 찾는다
        // 3. Expanded가 아니면 현재 포커싱된 노드에서 찾는다.
        
        if (byAllLevel){
        	var found = false;
            if (useSelfLevel){
                for (var i = this.nodes.arrNodes.length - 1; i >= 0; i--){
                    wNode = this.nodes.arrNodes[i];
                    if (wNode.key == wParentId){
                    	wParentId = wNode.id;
                    	found = true;
                    	break;
                    }
                }
            	if (!found) wParentId = "";
            } else {
                for (var i = this.nodes.arrNodes.length - 1; i >= 0; i--){
                    wNode = this.nodes.arrNodes[i];
                    if (wNode.key == wParentId && parseInt(wNode.id.split(":")[0]) != pStepNum){
                    	wParentId = wNode.id;
                    	found = true;
                    	break;
                    }
                }
            	if (!found) wParentId = "";
            }
        } else {
            // Expanded인 경우 레벨 1이 아니면 반드시 상위키가 있다
            // Expanded가 아닌 경우 반드시 상위키가 없으므로 레벨 1인지 아닌지 판단한다
            if (pStepNum == 1){
            	wParentId = "";
            } else {
            	if (pExpanded && wParentId.trim() != ""){
            		wParentId = (pStepNum - 1) + ":" + wParentId;
            	} else {
            		wParentId = this.workNode.tag;  //상위테그값
            	} 
            }
        }
        
        // Parent를 못찾으면 채우지 말라는 조건이 있는 경우 
        // 해당 레코드는 스킵된다. 단 첫레벨에는 적용되지 않는다
    	if (skipIfNotFound && wParentId.length == 0 && pStepNum > 1) {
    		 recordset.moveNext();
    		 continue; 
    	}

        // 상위 노드가 있고, 자기는 
        var targetNodeId = null; var relation = null;
        if (wParentId.length != 0) {
        	var pNode = this.getNode(wParentId);
        	if (pNode == null){
        		console.warn(wParentId + " not Found");
       		    recordset.moveNext();
        		continue;
        	}
            if (pNode.level != pStepNum) {
            	// 하위노드를 넣는 경우이고
                if (pNode.multiDepth) {
                	// 상위노드가 multiDepth이고,  
                	var pNode = this.getNode(wParentId);

                	// 부모노드의 첫 자식 노드를 찾는다
                    var eldestChild = this.nodes.getEldestNode(wParentId);

                	if (eldestChild == null) {
                    	// eldestChild가 없으면 부모 밑에 바로 붙이고
                    	targetNodeId = wParentId; 
                    	relation = tvwChild;
                    
                    } else if (eldestChild.level == pNode.level) {
                    	// eldestChild의 level이 부모의 레벨과 같으면 그 콘트롤의 앞에 
                    	targetNodeId = eldestChild.tag; 
                    	relation = tvwPrevious;
                    
                    } else { 
    	            	// 아니면 자기와 같은 레벨(pStepNum)의 맨마지막 노드 다음에 붙인다
    	                var eldestChild = this.nodes.getLastNodeOfChildLevel(wParentId);
    	            	targetNodeId = eldestChild.tag; 
    	            	relation = tvwNext;
                     }
                } else {
                	// 같은 레벨의 노드를 넣는 경우이고
                	targetNodeId = wParentId; 
                	relation = tvwChild;
                }
            } else {
            	targetNodeId = wParentId; 
            	relation = tvwChild;
            }
        } else {
        	targetNodeId = null;
            relation = null;
        }
        
        
    	var wChildId  = pStepNum + ":" + recordset.fields[0].value();
        var wText = recordset.fields[1].value();

        wNodes.add(targetNodeId, relation, wChildId, wText, "", "", useCheckBox, byAllLevel);
        
        
/*
        if (wParentId.length == 0) {
        	wNodes.add(null, null, wChildId, wText, "", "", useCheckBox, byAllLevel);
        } else {
        	wNodes.add(wParentId, tvwChild, wChildId, wText, "", "", useCheckBox, byAllLevel);
        }
 * */        
        
        recordset.moveNext();
    }
    recordset.close();
    
    if (this.workNode && this.workNode.children > 0){
    	this.workNode.expanded = pExpanded;
    	if (this.levelCount > 1) {
    		if (this.expandFirst) this.workNode.expanded = false;	// 트리펼침이 true 인 경우 노드의 확정여부를 false로 설정한다
    		this.workNode.state = "12"; // 하위노드의 디폴트 상태값이 열린(ㅏ)상태이므로 닫힌(ㄴ)상태로 변경하여 으픈폴더 이미지가 되도록 함 
    		this.workNode.setVisible();
    	}
    }
    
    return true;
};

TreeView.prototype.fillTreeByDataSet = function(datasetId, levelBindColId, textBindColId){
	// functionname : [TreeView.fillTreeByDataSet]
    var dataSet = dataSets[datasetId];
    var lastKeyOfLevel = [];
    
	for (var nRow=0; nRow < dataSet.records.length; nRow++){
		var record = dataSet.records[nRow];
		var level = parseInt(1 * record.values[levelBindColId]);
		this.fillAtOnce[level] = true;
		
		var text = record.values[textBindColId];
		
		lastKeyOfLevel[level] = text;
		var childId  = level + ":" + text;

		if (level == 1){
			wNodes.add(null, null, childId, text, "", "");
		} else {
			var parentId  = (level - 1) + ":" + lastKeyOfLevel[level - 1];
			wNodes.add(parentId, tvwChild, childId, text, "", "");
		}
	}
    
    if (this.workNode && this.workNode.children > 0){
    	this.workNode.expanded = pExpanded;
    }
    
    return true;
};

TreeView.prototype.fillTreeByJob = function(JSONObject, keyColInfos, textColInfos){
	// functionname : [TreeView.fillTreeByJob]
	// 가져오기 결과물로 채움
	
    var recordList = JSONObject.recordList;
    var lastKeyOfLevel = [];
    var levelCounts = keyColInfos.length;
    
	for (var nRow=0; nRow < recordList.length; nRow++){
		var record = recordList[nRow];
		
	    for (var i = 0; i < levelCounts; i++){
	    	var level = i + 1;
			this.fillAtOnce[level] = true;
			
	    	var key  = record[keyColInfos[i]];
	    	var text = record[textColInfos[i]];
	    	
	    	if (lastKeyOfLevel[level] != key){
	    		var childId   = level + ":" + key;
	    		
	    		if (level == 1){
	    			wNodes.add(null, null, childId, text, "", "");
	    		} else {
	    			var parentId  = (level - 1) + ":" + lastKeyOfLevel[level - 1];
	    			wNodes.add(parentId, tvwChild, childId, text, "", "");
	    		}
	    		
	    		// 상위가 바뀌면 하위키들은 무조건 바뀐것으로 처리한다
	    		for (var j = level + 1; j < levelCounts; j++){
	    			lastKeyOfLevel[j] = "QaWER$#@1MNBbV345635435";
	    		}
	    		
	    	}
	    }
	}
    
    if (this.workNode && this.workNode.children > 0){
    	this.workNode.expanded = pExpanded;
    }    
    
    return true;
};

/**
 * @description	미결
 * @return		{boolean}
 * @example		미결
 */
TreeView.prototype.nodeClick = function(){
	// functionname : [TreeView.nodeClick]

	if (event.button==2) return false;
    var em=(navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
    var control = searchControl_TreeView(em);

    // 서버에서 작업이 진행중이면 클릭은 동작하지 않는다.
    if (inProcess) {
    	alert(getText("message_treeview_001", "Yet, requeted task is processing at data server!"));
    	return true;
    }

    //상위의 테그중 노드 클라스를 갖는 것에 키속성이 있다.
    var id = search_Node(em).key;
    var tag = search_Node(em).tag;
    
    // 먼저 클릭한 노드를 파악한다
    var wNode = control.nodes.item(tag);
    
    // 링크된 콘트롤들을 채운다
    control.fillLinkControl(wNode);
    
    // 보이기 옵션을 조정한다.
    wNode.setVisible();
    if (control.selectedItem == wNode) {
    	return true;
    }
    
    // 현재선택한 노드가 있으면 원래색깔로 돌린다
    if (control.selectedItem != null){
    	// control.selectedItem.textTagObject.className = "NodeNot";
    	control.selectedItem.textTagObject.className = "";
    }    
    
    // 선택한 노드의 속성을 바꾼다
    control.selectedItem = wNode;
	control.selectedItem.textTagObject.className = "NodeSel";
	
    
    // 노드 클릭이벤트를 일으킨다.
    if (control.hasNodeClickEvent) {
        var result = control.fncNodeClickEvent(wNode);
    }

    // 하위 노드 채우기를 수행한다.
    var checkEvent = false;
    
    if(wNode.children>0){
		wNode.setVisible();
	}
    
    var childLevel = wNode.level + 1;
	if (!control.fillAtOnce[childLevel] && (wNode.children == 0 || wNode.multiDepth) && !wNode.filled){    
        var childLevel = wNode.level + 1;
        var nodeKey = wNode.tag;

        if (control.hasfillTreeEvent[childLevel]) {
            var result = control.fncfillTreeEvent[childLevel](nodeKey);
            wNode.filled = true;
        }
    }
    // 보이기 옵션을 조정한다.
//    wNode.setVisible();
	
   	
    return true;
};

/**
 * @description	미결
 * @return		{boolean}
 * @example		미결
 */
TreeView.prototype.nodeDblClick = function(){
    // functionname : [TreeView.nodeClick]

    if (event.button==2) return false;

    var em=(navigator.userAgent.indexOf('Firefox') >= 0 ? event.target : event.srcElement);
    var control = searchControl_TreeView(em);

    //상위의 테그중 노드 클라스를 갖는 것에 키속성이 있다.
     var tag = search_Node(em).tag;
    
    // 먼저 클릭한 노드를 파악한다
    var wNode = control.nodes.item(tag);
    
    // 노드 클릭이벤트를 일으킨다.
    if (control.hasNodeDblClickEvent) {
        var result = control.fncNodeDblClickEvent(wNode);
    }
     
    return true;
};

/**
 * @description	미결
 * @param 		{object}	tag
 * @param 		{object}	startIndex
 * @return		{undefined}
 * @example		미결
 */
TreeView.prototype.open = function(tag, startIndex){
	// functionname : [TreeView.open]

	// 닫혀 있으면 연다 
	var wNodes = this.nodes.arrNodes;
    for (var i = startIndex; i < wNodes.length; i++){
        if (wNodes[i].parent != null && wNodes[i].parent.tag == tag){
            var wNode = wNodes[i];
            if (wNode.children > 0 && wNode.expanded) this.open(wNode.tag, i);
            wNode.tagObject.parentNode.style.display = "inline";
        }
    }
};

/**
 * @description	미결
 * @param 		{object}	tag
 * @param 		{object}	startIndex
 * @return		{undefined}
 * @example		미결
 */
TreeView.prototype.close = function(tag, startIndex){
	// functionname : [TreeView.close]

	// 열려 있으면 닫는다 
	var wNodes = this.nodes.arrNodes;
    for (var i = startIndex; i < wNodes.length; i++){
        if (wNodes[i].parent != null &&  wNodes[i].parent.tag == tag){
            var wNode = wNodes[i];
            if (wNode.children > 0) this.close(wNode.tag, i);
            wNode.tagObject.parentNode.style.display = "none";
        }
    }
};

/**
 * @description	미결
 * @param 		{object}	node
 * @return		{undefined}
 * @example		미결
 */
TreeView.prototype.fillLinkControl = function(node){
	// functionname : [TreeView.fillLinkControl]

	var arrLinkInfo = this.linkInfo.split(";");
	var parentTags = node.tag.split(";");
	var parentKey = parentTags[parentTags.length-2] != undefined? parentTags[parentTags.length-2].split(":")[1] : "";
	
	//var wArr = [node.key, node.text, parentKey];
	var wArr = [];
	
	var nodeKey = ""; var parentKey = ""; var levelOfParent = 0; var ndx = 0;
	for (var i = 0; i < parentTags.length; i++){
		nodeKey += parentTags[i];
		var tmpNode = this.nodes.item(nodeKey);
		
		// 상위레벨과 스텝번호가 같으면 하위것이 더 구체적인 것으로 판단하여
		// 덮어 쓴다
		if (levelOfParent == tmpNode.level) ndx = ndx - 1;
		
		wArr[ndx * 3 + 0] = tmpNode.key;		// 노드의 키
		wArr[ndx * 3 + 1] = tmpNode.text;     // 노드의 텍스트
		wArr[ndx * 3 + 2] = parentKey ;       // 노드의 상위키
		
		parentKey = tmpNode.key;
		levelOfParent = tmpNode.level;
		ndx++;
		nodeKey += ";"; 
	}
	
	for (var i=0;i < wArr.length && i < arrLinkInfo.length;i++){
		var controlName = arrLinkInfo[i].trim();
		if (controlName.length == 0) continue;
		controls[controlName].setValue(wArr[i]);
		
		
/*		if (i < wArr.length && wArr[i] != undefined){
	 	    controls[controlName].setValue(wArr[i]);
		} else {
			controls[controlName].setValue("");
		}
*/	}
};

/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
function Nodes() //constructor 
{
    this.arrNodes = [];
    this.parentControl = null;
    this.expanded = false;
};

/*
 *  노드 찾기  (아래 방법중 하나를 써도 상관없다 )
 *    0. SelectedItem이 있고 그것이 키이면 그것을 리턴한다.
 *    1. 어디서든 중복나지 않는 경우 첫데이터 리턴 
 *       wControl.SelectedItem = wControl.nodes.item("키3");
 *    2. 키번호뒤에 레벨번호(1부터시작)
 *       wControl.SelectedItem = wControl.nodes.item("키3", 2);
 *    3. 키속에 레벨번호를 선행, : 으로 구분
 *       wControl.SelectedItem = wControl.nodes.item("2:키3");
 *    4. 루트부터 상위키 모두를 포함 (키의 중복이 우려되는 경우)
 *       wControl.SelectedItem = wControl.nodes.item("1:키1;2:키3"); 
 *
 * */
/**
 * @description	미결
 * @param 		{number}	key
 * @param 		{number}	level
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.item = function(key, level){
    // functionname : [Nodes.item]

    var selectedItem = this.parentControl.selectedItem;
    if (selectedItem != null){
    	if (key.indexOf(":") < 0){
    		if (level == undefined){     	// Case 1
    			if (selectedItem.key == key) return selectedItem;
    		} else {						// Case 2
    			if (selectedItem.level == level && selectedItem.key == key) return selectedItem;
    		}
    	} else {
    		if (key.indexOf(";") < 0){     // Case 3
    			if (selectedItem.id == key) return selectedItem;
    		} else {						// Case 4
    			if (selectedItem.tag == key) return selectedItem;
    		}	
    	}	
    }

    var node = null;
	if (key.indexOf(":") < 0){
		if (level == undefined){     	// Case 1
		    for (var i = this.arrNodes.length - 1; i >= 0; i--){
		        if (this.arrNodes[i].key == key){
		            node = this.arrNodes[i];
		            break;
		        }
		    }
		} else {						// Case 2
		    for (var i = this.arrNodes.length - 1; i >= 0; i--){
		    	var wNode = this.arrNodes[i];
		        if (wNode.level == level && wNode.key == key){
		            node = wNode;
		            break;
		        }
		    }
		}
	} else {
	
		if (key.indexOf(";") < 0){     // Case 3
		    for (var i = this.arrNodes.length - 1; i >= 0; i--){
		    	var wNode = this.arrNodes[i];
		        if (wNode.id == key){
		            node = wNode;
		            break;
		        }
		    }
			
		} else {						// Case 4
		    for (var i = this.arrNodes.length - 1; i >= 0; i--){
		    	var wNode = this.arrNodes[i];
		        if (wNode.tag == key){
		            node = wNode;
		            break;
		        }
		    }
		}	
	}
	
    return node;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.count = function(){
    // functionname : [Nodes.count]

    return this.arrNodes.length;
};

/**
 * @description	미결
 * @param 		{object}	tag
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.getIndexOf = function(tag){
    // functionname : [Nodes.getIndexOf]

    var wIndex = -1;
    var wNodes = this.arrNodes;
    for (var i = wNodes.length - 1; i >= 0; i--){
        if (wNodes[i].tag == tag){
            wIndex = i;
            break;
        }
    }
    return wIndex;
};

/**
 * @description	미결
 * @param 		{object}	tag
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.getLastNodeOf = function(tag){
    // functionname : [Nodes.getLastNodeOf]

    var wNode = null;
    var wNodes = this.arrNodes;
    
    for (var i = wNodes.length - 1; i >= 0; i--){
        if (tag == "" && wNodes[i].parent == null){
            wNode = wNodes[i];
            break;
        	
        } else if (tag != "" && wNodes[i].parent != null &&  wNodes[i].parent.tag == tag){
            wNode = wNodes[i];
            break;
        }
    }
    if (tag == "" && wNode != null) wNode = this.getLastNodeOf(wNode.tag);
    if (tag != "" && wNode == null) wNode = this.item(tag);
    
    return wNode;
};

/**
 * @description	미결
 * @param 		{object}	tag
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.getPrevNodeOf = function(tag){
    // functionname : [Nodes.getPrevNodeOf]

    var wNode = null;
    var wNodes = this.arrNodes;
    var wPosOfTag = -1; var wDepth = 1; var wParentTag = "";
    for (var i = wNodes.length - 1; i >= 0; i--){
    	var wwNode = wNodes[i];
        if (wwNode.tag == tag){
        	if (wwNode.parent) wParentTag = wwNode.parent.tag;
        	
        	wDepth = wwNode.depth;
        	wPosOfTag = i;
            break;
        }
    }
    
    if (wPosOfTag >= 0){
        for (var i = wPosOfTag - 1; i >= 0; i--){
        	var wwNode = wNodes[i];
            if (wDepth == 1 && wwNode.parent == null){
                wNode = wwNode;
                break;
            } else if (wDepth > 1 && wwNode.parent && wwNode.parent.tag == wParentTag){
                wNode = wwNode;
                break;
            }
        }
    }
    
    
    return wNode;
};


/* *****************************************************************************
  All 타입 Parent의 자식노드중 제일 먼저 나오는 노드를 가져온다 
 * ****************************************************************************/
/**
 * @description	미결
 * @param 		{String}	id
 * @return		{String}
 * @example		미결
 */

Nodes.prototype.getEldestNode = function(id){
    // functionname : [Nodes.getLastNodeOf]

    var wNode = null;
    var wNodes = this.arrNodes;
        
    // 만들어진 순서대로 들어가 있다
    // 중간이 끼었어도 맨앞에 들어가 있을 것이다.

    // 먼저 자식레벨의 노드 가 있는 지 확인한다
    for (var i = 0; i < wNodes.length; i++){
        if (wNodes[i].parent && wNodes[i].parent.id == id && wNodes[i].parent.level != wNodes[i].level){
            wNode = wNodes[i];
            break;
        }
    }
    
    // 자식 레벨 노드 가 없는 경우 같은 레벨의 테그를 뒤진다
    if (wNode == null){
        for (var i = 0; i < wNodes.length; i++){
            if (wNodes[i].parent && wNodes[i].parent.id == id && wNodes[i].parent.level == wNodes[i].level){
                wNode = wNodes[i];
                break;
            }
        }
    }
    
    return wNode;
};

/* *****************************************************************************
  All 타입 Parent의 자식노드중 하위노드이면서 제일 나중에 있는 노드를 가져온다 
 * ****************************************************************************/
/**
 * @description	미결
 * @param 		{String}	id
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.getLastNodeOfChildLevel = function(id){
    // functionname : [Nodes.getLastNodeOfChildLevel]
    
    if (this.item(id).children == 0) {
    	return null;
    }
    var wNode = null;
    var wNodes = this.arrNodes;
    
    // 먼저 자식레벨의 노드 가 있는 지 확인한다
    for (var i = 0; i < wNodes.length; i++){
        if (wNodes[i].parent && wNodes[i].parent.id == id){
            wNode = wNodes[i];
        }
    }
    if (wNode != null && wNode.children > 0) {
    	wNode = this.getLastNodeOfChildLevel(wNode.id);
    }
    
    return wNode;
};

/**
 * @description	미결
 * @param		{object}	parentTag
 * @param 		{object}	tag
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.isLastNode = function(parentTag, tag){
    // functionname : [Nodes.isLastNode]

    var wIsLastNode = true;

    var wPosOfTag = -1;
    var wDepth = 1;

    var wNodes = this.arrNodes;
    for (var i = 0; i < wNodes.length; i++){

        if (wNodes[i].tag == tag){
        	wDepth = wNodes[i].depth;
            wPosOfTag = i;
            break;
        }
    }

    if (wPosOfTag >= 0){
        for (var i = wPosOfTag + 1; i < wNodes.length; i++){
            if (wDepth == 1 && wNodes[i].parent == null){
                wIsLastNode = false;
                break;
            } else if (wDepth > 1  && wNodes[i].parent != null &&  wNodes[i].parent.tag == parentTag){
                wIsLastNode = false;
                break;
            }
        }
    }
    
    return wIsLastNode;
};

/**
 * @description	미결
 * @param		{boolean}	relativeId
 * @param 		{boolean}	relationship
 * @param 		{boolean}	id
 * @param 		{boolean}	text
 * @param 		{boolean}	imagePath
 * @param 		{boolean}	expandedImage
 * @param 		{boolean}	useCheckBox
 * @param 		{boolean}	byAllLevel
 * @return		{String}
 * @example		미결
 */
Nodes.prototype.add = function(relativeId, relationship, id, text, imagePath, expandedImage, useCheckBox, byAllLevel){
    // functionname : [Nodes.add]

	if (useCheckBox == undefined)  {useCheckBox = false;} 

    var wSpan = null;
    var wLink = null;
    var tag = "";
    // 오류의 사전 체크
    if (relativeId != null && relativeId.length > 0){
        if (this.item(relativeId) == null){
            //alert(id + " 키를 추가할 " + relativeId + " 키는 유효한 키가 아닙니다.");
            return;
        }
    }
    
    // 노드의 속성을 부여한다 
    var wParentNode = null;
    var  wNode = new Node();
    
    wNode.parentControl = this.parentControl;
    wNode.parent = this;
    
    var firstOpenNodeLevel = wNode.parentControl.firstOpenNodeLevel;
    
    wNode.level = parseInt(id.split(":")[0]);
    wNode.key   = id.split(":")[1];
    wNode.id    = id;
    wNode.text  = text;
    wNode.image = imagePath;
    wNode.expandedImage = expandedImage;
    wNode.multiDepth = (byAllLevel ? true : false);
    
    wNode.parent = null;
    if (relativeId == null){
    	// null로 그냥 둔다
    } else if (relationship == tvwChild){
        if (relativeId.length > 0){
            wNode.parent = this.item(relativeId);
        }
    } else {
        wNode.parent = this.item(relativeId).parent;
    }
    var wParentNode = wNode.parent;
    if (wNode.parent){
        wNode.depth = wParentNode.depth + 1;
        tag = wNode.tag   = wParentNode.tag + ";" + id;
    } else {
        wNode.depth = 1;
        tag = wNode.tag   = id;
    }
    
    // HTML을 추가한다
    if (wNode.parent == null){
        // 먼저 노드 객체에 더하고
        this.arrNodes.push(wNode); 
        
        this.arrNodes[this.arrNodes.length - 1] = wNode;

        // HTML을 추가한다
        wSpan = this.parentControl.tagObject.appendChild(document.createElement("SPAN")); 
        
        if (this.arrNodes.length > 1) {
            if (wSpan.insertAdjacentElement){
            	wSpan.insertAdjacentElement('afterBegin', document.createElement("br"));
     		}
     		else if (wSpan.appendChild) {
     			insertAdjacentElement('afterBegin' ,wSpan, document.createElement("br"));
     		}
        }
        
        wLink = document.createElement("SPAN");
        wLink.key = id;
        wLink.tag = wNode.tag;
        wLink.className = "Node";
        var checkString = (useCheckBox ? "<span class='TreeCheck' onclick='treeCheck_onClick(event);'>&#9744;</span>" : "");

        var imgSrc = (this.parentControl.didIconDefined[wNode.level] ? this.parentControl.levelIcons[wNode.level].src : 
                      ( wNode.level == this.parentControl.levelCount ? icons[PAGE_ICON].src : icons[FOLDER_NORMAL].src));

        wLink.innerHTML = "<img src='" + imgSrc + "' align='absbottom' alt='' />" + checkString + "<SPAN>" + text + "</SPAN>" ;
        
        wLink.onclick = this.parentControl.nodeClick;
        wLink.ondblclick = this.parentControl.nodeDblClick;

        wNode.tagObject = wSpan.appendChild(wLink);
        
        wNode.checked = false;
        wNode.useCheckBox = useCheckBox;
        
        wNode.lineTagObject = null;
        wNode.imageTagObject = wNode.tagObject.childNodes[0];
        if (useCheckBox){
            wNode.checkTagObject = wNode.tagObject.childNodes[1];
            wNode.textTagObject = wNode.tagObject.childNodes[2];
        } else {
            wNode.checkTagObject = null;
            wNode.textTagObject = wNode.tagObject.childNodes[1];
        }
        
    } else {
        // tvwFirst    : 0 : relative에서 명명된 같은 단계에 있는 노드의 앞에 위치한다.
        // tvwLast     : 1 : relative에서 명명된 같은 단계에 있는 노드의 뒤에 위치한다.
        // tvwNext     : 2 : relative에서 명명된 노드의 뒤에 위치한다.                 
        // tvwPrevious : 3 : relative에서 명명된 노드의 앞에 위치한다.                 
        // tvwChild    : 4 : relative에서 명명된 노드의 하위노드가 된다.               
    	
        var wNodeOfInsertionPos = null;
        var wAppendPoint = 0;
        // 자기 아이콘의 추가
        if (relationship == tvwFirst){
            wNodeOfInsertionPos = wParentNode;
            wAppendPoint = this.getIndexOf(wParentNode.tag);
        } else if (relationship == tvwLast){
            wNodeOfInsertionPos = this.getLastNodeOf(wParentNode.tag);
            if (wNodeOfInsertionPos == null){
                wAppendPoint = this.getIndexOf(wParentNode.tag);
            } else {
                wAppendPoint = this.getIndexOf(wNodeOfInsertionPos.tag);
            }
        } else if (relationship == tvwNext){
            wAppendPoint = this.getIndexOf(relativeId);
        } else if (relationship == tvwPrevious){
            wNodeOfInsertionPos = this.getPrevNodeOf(this.item(relativeId).tag);
            if (wNodeOfInsertionPos == null){
                wAppendPoint = this.getIndexOf(wParentNode.tag);
            } else {
                wAppendPoint = this.getIndexOf(wNodeOfInsertionPos.tag) - 1;
            }
        } else if (relationship == tvwChild){
        	if (relativeId == ""){
                wNodeOfInsertionPos = this.getLastNodeOf("");
        	} else {
                wNodeOfInsertionPos = this.getLastNodeOf(this.item(relativeId).tag);
                if (wNodeOfInsertionPos == null){
                    wAppendPoint = this.getIndexOf(wParentNode.tag);
                } else {
                	var wNodeOfInsertionPos1 = this.getLastNodeOfChildLevel(wNodeOfInsertionPos.id);
                    if (wNodeOfInsertionPos1 == null){
                        wAppendPoint = this.getIndexOf(wNodeOfInsertionPos.tag);
                    } else {
                        wAppendPoint = this.getIndexOf(wNodeOfInsertionPos1.tag);
                    }
                }
        	}
        }
        
        // beforeBegin	엘레멘트 oElem을 개체의 바로 전에 삽입한다.
        // afterBegin	엘레멘트 oElem을 개체가 시작되고 모든 다른 내용들 전에 삽입한다.
        // beforeEnd	엘레멘트 oElem을 개체가 종료되기 전에 모든 다른 내용들 다음에 삽입한다.
        // afterEnd	    엘레멘트 oElem을 개체가 종료된 바로 다음에 삽입한다.

        // 노드의 위치를 셋팅
            
        //  먼저 HTML을 추가한다
        wSpan = document.createElement("SPAN");
        var critTag = this.arrNodes[wAppendPoint].tagObject.parentNode;
        
        if (critTag.insertAdjacentElement){
        	critTag.insertAdjacentElement('afterEnd', wSpan);
 		} else if (critTag.appendChild) {
 			insertAdjacentElement('afterEnd' ,critTag, wSpan);
 		}

        // 노드 객체에 더하고
        if (wAppendPoint == this.arrNodes.length - 1){
        	this.arrNodes.push(wNode); 
        } else {
        	this.arrNodes.splice(wAppendPoint + 1, 0, wNode);
        }
        
        // 노드의 위치를 참조로 한 변수 셋팅
        if (wParentNode == null){
            wNode.isLast = this.isLastNode("", tag);
        } else {
            wNode.isLast = this.isLastNode(wParentNode.tag, tag);
        }
        
        wNode.state = (wNode.isLast ? "02" : "01");
        
        if (wSpan.insertAdjacentElement){
        	wSpan.insertAdjacentElement("afterBegin", document.createElement("br"));
 		} else if (wSpan.appendChild) {
 			insertAdjacentElement('afterBegin' ,wSpan, document.createElement("br"));
 		}
        
        // 노드레벨의 상위노드별로 
        // 각 레벨의 노드이후에 노드가 있으면 '|' 를 넣고 마지막 노드면 ' '
        var newImg = null;
        var wArrKeys = wNode.tag.split(";");
        for (wDepth= 1 ;wDepth < wNode.depth; wDepth++){ 
            var wTempNode = this.item(wArrKeys[wDepth - 1]);
            if (wTempNode.isLast){
                newImg = document.createElement("img");
                newImg.setAttribute("src", icons[EMPTY_ICON].src);
                newImg.setAttribute("align", 'absbottom');
                newImg.setAttribute("alt", '');
            } else {
                newImg = document.createElement("img");
                newImg.setAttribute("src", icons[LINE_BLANK].src);
                newImg.setAttribute("align", 'absbottom');
                newImg.setAttribute("alt", '');
            }
            wSpan.appendChild(newImg);
        }
        wArrKeys = null;
        
        // 자기레벨 아이콘의 처리 
         wLink = document.createElement("SPAN");
        wLink.key = id;
        wLink.tag = wNode.tag;
        wLink.className = "Node";
        wNode.tagObject = wSpan.appendChild(wLink);
        wLink.onclick = this.parentControl.nodeClick;
        wLink.ondblclick = this.parentControl.nodeDblClick;

        if (wNode.isLast){  
            newImg = document.createElement("img");
            newImg.setAttribute("src", icons[JOIN_BOTTOM].src);
            newImg.setAttribute("align", 'absbottom');
            newImg.setAttribute("alt", '');
        } else {  
            newImg = document.createElement("img");
            newImg.setAttribute("src", icons[JOIN_NORMAL].src);
            newImg.setAttribute("align", 'absbottom');
            newImg.setAttribute("alt", '');
        }
        wLink.appendChild(newImg);

        var imgSrc = (this.parentControl.didIconDefined[wNode.level] ? this.parentControl.levelIcons[wNode.level].src : 
                      ( wNode.level == this.parentControl.levelCount ? icons[PAGE_ICON].src : icons[FOLDER_NORMAL].src));

        newImg = document.createElement("img");
        newImg.setAttribute("src", imgSrc);
        newImg.setAttribute("align", 'absbottom');
        newImg.setAttribute("alt", '');
        
        wLink.appendChild(newImg); 
        
        if (useCheckBox){
            var wCheckSpan = document.createElement("SPAN");
            wLink.appendChild(wCheckSpan);
            wCheckSpan.className="TreeCheck";
            wCheckSpan.innerHTML = "&#9744;";
            setEventHandler(wCheckSpan, "click", treeCheck_onClick);
        }
        
        var wCaptionSpan = document.createElement("SPAN");
        wLink.appendChild(wCaptionSpan);
        wCaptionSpan.innerHTML = text;
        
        
        wNode.checked = false;
        wNode.useCheckBox = useCheckBox;
        
        wNode.lineTagObject = wNode.tagObject.childNodes[0];
        wNode.imageTagObject = wNode.tagObject.childNodes[1];
        if (useCheckBox){
            wNode.checkTagObject = wNode.tagObject.childNodes[2];
            wNode.textTagObject = wNode.tagObject.childNodes[3];
        } else {
            wNode.checkTagObject = null;
            wNode.textTagObject = wNode.tagObject.childNodes[2];
        }
        
        // 부모노드의 아이콘변경 : ㄴ-> +ㄴ ㅏ -> +ㅏ 페이지 이미콘 -> 폴더 
        wParentNode.children++;
        var imgSrc_open   = (this.parentControl.didIconDefined[wNode.level -1] ? this.parentControl.levelIcons[wNode.level - 1].src : icons[FOLDER_OPEN].src);
        var imgSrc_normal = (this.parentControl.didIconDefined[wNode.level - 1] ? this.parentControl.levelIcons[wNode.level - 1].src : icons[FOLDER_NORMAL].src);
        if (wParentNode.depth == 1){
            var wPageImg = wParentNode.imageTagObject;
            if (wParentNode.state == "01") {    // "ㅏ"
                wParentNode.state = "21";
//                if(this.expandFirst || firstOpenNodeLevel >= wNode.depth){
//               	if(this.parentControl.expandFirst || firstOpenNodeLevel >= wNode.depth){
               	if(this.expanded || firstOpenNodeLevel >= wNode.depth){
                	wPageImg.src = imgSrc_open;
                }else{
                	wPageImg.src = imgSrc_normal;
                }
            } else if (wParentNode.state == "02") {    // "ㄴ"
                wParentNode.state = "22";
//                if(this.expandFirst || firstOpenNodeLevel >= wNode.depth){
//               	if(this.parentControl.expandFirst || firstOpenNodeLevel >= wNode.depth){
               	if(this.expanded || firstOpenNodeLevel >= wNode.depth){
                	wPageImg.src = imgSrc_open;
                }else{
                	wPageImg.src = imgSrc_normal;
                }
            }
        } else {
            var wLineImg = wParentNode.lineTagObject;
            var wPageImg = wParentNode.imageTagObject;
            if (wParentNode.state == "01") {    // "ㅏ"
                wParentNode.state = "21";
//                if(this.expandFirst || firstOpenNodeLevel >= wNode.depth){
//               	if(this.parentControl.expandFirst || firstOpenNodeLevel >= wNode.depth){
              		if(this.expanded || firstOpenNodeLevel >= wNode.depth){
                	wLineImg.src = icons[MINUS_NORMAL].src;  
                    wPageImg.src = imgSrc_open;
                }else{
	                wLineImg.src = icons[PLUS_NORMAL].src;  
	                wPageImg.src = imgSrc_normal;
                }
            
            } else if (wParentNode.state == "02") {    // "ㄴ"
                wParentNode.state = "12";
//                if(this.expandFirst || firstOpenNodeLevel >= wNode.depth){
//               	if(this.parentControl.expandFirst || firstOpenNodeLevel >= wNode.depth){
               	if(this.expanded || firstOpenNodeLevel >= wNode.depth){
                	wLineImg.src = icons[MINUS_BOTTOM].src;  
                    wPageImg.src = imgSrc_open;
                }else{
	                wLineImg.src = icons[PLUS_BOTTOM].src;  
	                wPageImg.src = imgSrc_normal;
                }
            }
        }
        
        // 바로 자기위 아이콘의 변경 : ㄴ자이면 ㅏ자로 변경한다
        // 차일드가 있으면 -ㄴ+ㄴ을 -ㅏ +ㅏ 로변경한다
        
        var prevNode = this.getPrevNodeOf(tag);
        if (prevNode != null && wNode.depth > 1){
            prevNode.isLast = false;
            var wLineImg = prevNode.lineTagObject;
            if (prevNode.state == "02") {    // "ㅏ"
                prevNode.state = "01";
                wLineImg.src = icons[JOIN_NORMAL].src;
            
            } else if (wParentNode.state == "12") {    // "ㅏ"
                prevNode.state = "11";
//                if(this.expandFirst || firstOpenNodeLevel >= wNode.depth){
//               	if(this.parentControl.expandFirst || firstOpenNodeLevel >= wNode.depth){
               	if(this.expanded || firstOpenNodeLevel >= wNode.depth){
                	wLineImg.src = icons[MINUS_NORMAL].src;
                }else{
                	wLineImg.src = icons[PLUS_NORMAL].src;
                }
            } else if (wParentNode.state == "22") {    // "ㅏ"
                prevNode.state = "21";
//                if(this.expandFirst || firstOpenNodeLevel >= wNode.depth){
//                if(this.parentControl.expandFirst || firstOpenNodeLevel >= wNode.depth){
                if(this.expanded || firstOpenNodeLevel >= wNode.depth){
                	wLineImg.src = icons[MINUS_NORMAL].src;
                }else{
                	wLineImg.src = icons[PLUS_NORMAL].src;
                }
            }
        }
        
    }
    if (wNode.parent != null && wNode.parent.level != wNode.level ) {
    	wNode.parent.filled = true;
    }
    
    
    // byAllLevel로 채우는 경우 첫줄이 아니면 숨긴다
    if (wNode.multiDepth && wNode.depth > 1){
        wNode.expanded = false;
        // 최초 어디까지 펼치는지 판단
        if(!this.expandFirst && wNode.depth>firstOpenNodeLevel){
        	wNode.tagObject.parentNode.style.display = "none";
        }
    }
    
    return wNode;
};

/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
Nodes.prototype.clear = function(){
    // functionname : [Nodes.clear]

	while(this.arrNodes.length > 0) this.arrNodes.pop();

    this.arrNodes = [];
    this.parentControl.tagObject.innerHTML = "";
    
    this.parentControl.expandFirst = false;
    this.parentControl.selectedItem = null;
    //this.parentControl.levelCount = 0;
    this.parentControl.workNode = null;
    
};

/**
 * @description	미결
 * @param		{object}	tag
 * @return		{undefined}
 * @example		미결
 */
Nodes.prototype.remove = function(tag){
    // functionname : [Nodes.remove]

	 var wIndex = this.getIndexOf(tag);
	 var wNode = this.arrNodes[wIndex];
	 
	 // 부모노드의 아이콘변경 : +ㄴ-> ㄴ, +ㅏ -> ㅏ, 폴더-> 페이지
	 if (wNode.children > 0){
	 	alert(getText("message_treeview_002", "먼저 {0}의 하위 노드를 제거하여야만 삭제할 수 있습니다", [wNode.text]));
	 	return;
	 } else if(wNode.parent != null){
	 	var wParentNode = wNode.parent;
	     wParentNode.children--;




        var imgSrc = (this.parentControl.didIconDefined[wNode.level] ? this.parentControl.levelIcons[wNode.level].src : 
                      ( wNode.level == this.parentControl.levelCount ? icons[PAGE_ICON].src : icons[FOLDER_NORMAL].src));

	 	if (wParentNode.depth == 1 && wParentNode.children == 1){
	         var wPageImg = wParentNode.imageTagObject;
	         if (wParentNode.state == "11" || wParentNode.state == "21"){ // "ㅏ"
	             wParentNode.state = "01";
	             wPageImg.src =imgSrc; 
	         }
	     } else if (wParentNode.depth > 1 && wParentNode.children == 1){
	         var wLineImg = wParentNode.lineTagObject;
	         var wPageImg = wParentNode.imageTagObject;
	         if (wParentNode.state == "11" || wParentNode.state == "21") {    // "ㅏ"
	             wParentNode.state = "01";
	             wLineImg.src = icons[JOIN_NORMAL].src;
	             wPageImg.src = imgSrc;
	         
	         } else if (wParentNode.state == "12" || wParentNode.state == "22") {    // "ㄴ"
	             wParentNode.state = "02";
	             wLineImg.src = icons[JOIN_BOTTOM].src;
	             wPageImg.src = imgSrc;
	         }
	     }
	     
	 }

	 // 바로 자기위 아이콘의 변경 : ㄴ자이면 ㅏ자로 변경한다
	 // 차일드가 있으면  -ㅏ +ㅏ을 -ㄴ+ㄴ로변경한다
	 if (wNode.isLast && wNode.depth > 1){
	     var prevNode = this.getPrevNodeOf(tag);
	     if (prevNode != null){
	         prevNode.isLast = true;
	 
	         var wLineImg = prevNode.lineTagObject;
	         if (prevNode.state == "01") {    // "ㅏ"
	             prevNode.state = "02";
	             wLineImg.src = icons[JOIN_BOTTOM].src;
	         
	         } else if (wParentNode.state == "11") {    // "+ㅏ"
	             prevNode.state = "12";
	             wLineImg.src = icons[PLUS_BOTTOM].src;
	             
	         } else if (wParentNode.state == "21") {    // "-ㅏ"
	             prevNode.state = "22";
	             wLineImg.src = icons[MINUS_BOTTOM].src;
	         }
	     }
	 }
	
	
	 // 해당 노드의 삭제
	 removeTag(wNode.tagObject.parentNode);
	 this.arrNodes.splice(wIndex,1);

};

/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
function Node() //constructor 
{
    // 변수 선언부
    this.tagObject = null;
    this.parentControl = null;
    this.parent = null;
    this.children = 0;
    this.filled = false;
    this.isLast = true;
    this.expanded = true;
    this.expandedImage = "";
    this.image = "";
    this.state = "01";
    
    this.checked = false;
    this.useCheckBox = false;
    this.lineTagObject = null;
    this.imageTagObject = null;
    this.checkTagObject = null;
    this.textTagObject = null;
    
    this.depth  = 1;   // ex: 2  트리의 깊이
    this.level = 1;    // ex: 2  트리의 스텝
    this.key = "";     // ex: "30493"
    this.text = "";    // ex: "홍길동"
    this.id = "";      // ex: "2:30493" <-- 2레벨 데이터이다
    this.tag = "";     // ex: "1:9998;2:30493"
    this.multiDepth = false;
    
    
 };

 /**
  * @description	미결
  * @param		{String}	pText
  * @return		{undefined}
  * @example		미결
  */
Node.prototype.setText = function(pText){
    // functionname : [Node.setText]

    this.textTagObject.innerText = pText;
};

/**
 * @description	미결
 * @param		{object}	depth
 * @return		{String}
 * @example		미결
 */
Node.prototype.getParentStepKey = function(depth){
    // functionname : [Node.getParentStepKey]

	if (depth < 1 || depth > this.depth) return null;
	
	var node = this;
	
	for (var depthNum = this.depth; depthNum > depth; depthNum--){
		node = node.parent;
	}
	
	return node.key;
};

/**
 * @description	미결
 * @param		{object}	depth
 * @return		{String}
 * @example		미결
 */
Node.prototype.getParentStepText = function(depth){
    // functionname : [Node.getParentStepKey]

//	if (depth < 1 || depth > this.depth) return null;
	
	var node = this;
	
//	for (var depthNum = this.depth; depthNum > depth + 1; depthNum--){
//		node = node.parent;
//	}
	
	return node.text;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
Node.prototype.getFullPath = function(){
    // functionname : [Node.getFullPath]

    var wFullPath = "";
    
    var wNode = this;
    for (wDepth = this.depth; wDepth > 0 ;wDepth--){
        if (wNode == null) break;
        if (wFullPath.length == 0) {
            wFullPath = wNode.key;
        } else {
            wFullPath = wNode.key + "/" + wFullPath;
        }
        wNode = wNode.parent;
    }
    wNode=null;
    
    return wFullPath;
};

/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
Node.prototype.setVisible = function(){
    // functionname : [Node.setVisible]

    this.expanded = !this.expanded;
    var imgSrc_normal = (this.parentControl.didIconDefined[this.level] ? this.parentControl.levelIcons[this.level].src : icons[FOLDER_NORMAL].src);
    var imgSrc_open   = (this.parentControl.didIconDefined[this.level] ? this.parentControl.levelIcons[this.level].src : icons[FOLDER_OPEN].src);
    if (this.children > 0) {
     	
        var wPageImg = null;
        var wLineImg = null;
        if (this.depth == 1) {
            wPageImg = this.imageTagObject;
        } else {
            wLineImg = this.lineTagObject;
            wPageImg = this.imageTagObject;
        } 
        
        if (this.expanded)  {
            //  - -> +, 닫힌 폴더 -> 열린 폴더 
            if (this.state == "11") {    // "+ㅏ" -> "-ㅏ"
                this.state = "21";
                if (this.depth > 1) 
                    wLineImg.src = icons[MINUS_NORMAL].src;
                wPageImg.src = imgSrc_open;
                
            } else if (this.state == "12") {    // "+ㄴ" -> "-ㄴ"
                this.state = "22";
                if (this.depth > 1) 
                    wLineImg.src = icons[MINUS_BOTTOM].src;
                wPageImg.src = imgSrc_open;
            }
            
            // 하위 개체 보이기 
       	    this.parentControl.open(this.tag, 0);
       	    
       	} else { 
            //  + -> -, 열린 폴더 -> 닫힌 폴더
            if (this.state == "21") {    // "-ㅏ" -> "+ㅏ"
                this.state = "11";
                if (this.depth > 1) 
                    wLineImg.src = icons[PLUS_NORMAL].src;
                wPageImg.src = imgSrc_normal;
                
            } else if (this.state == "22") {    // "-ㄴ" -> "+ㄴ"
                this.state = "12";
                if (this.depth > 1) 
                    wLineImg.src = icons[PLUS_BOTTOM].src;
                wPageImg.src = imgSrc_normal;
            }
            
            // 하위개체 숨기기  
       		this.parentControl.close(this.tag, 0);
        }
    }
};


/**
 * @description	미결
 * @param		{number}	checked
 * @return		{undefined}
 * @example		미결
 */
Node.prototype.setCheckValue = function(checked){
    // functionname : [Node.setCheckValue]
	
	if (checked) {
		this.checkTagObject.innerHTML = "&#9745;"; 
	} else {
		this.checkTagObject.innerHTML = "&#9744;";
	}
	
	this.checked = checked;
	
	//자식노드의 체크를 일괄 조정
	if (this.children > 0){
	    for (var i=this.parentControl.nodes.arrNodes.length - 1; i >= 0; i--){
	       var node2 = this.parentControl.nodes.arrNodes[i];
	       if (node2.parent == this){
        	   if (checked != node2.checked)
	    	       node2.setCheckValue(this.checked);
	       }
	   }
	}
	
	var checkEvent = false;
	try {
    	if (eval(this.parentControl.controlId + "_oncheckclick")) checkEvent = true;
    } catch(e){}
    
    if (checkEvent){
        eval(this.parentControl.controlId + "_oncheckclick(this);");
    }
		
	
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
Node.prototype.getTextValueInfo = function(){
	
	var wArrKey = new Array(this.parentControl.levelCount);
	var wArrTxt = new Array(this.parentControl.levelCount);
	var wNode = this;
	
	var lastLevelNum = 0;
	while (wNode != null){
		if (wNode.level != lastLevelNum){
			wArrKey[wNode.level - 1] = wNode.key;  wArrTxt[wNode.level - 1] = wNode.text;
			lastLevelNum = wNode.level 
		}
		wNode = wNode.parent;
	}
	
	var jsonStr = "{\"nodeArray\":[";
	for (var i=0; i < wArrKey.length; i++){
		jsonStr += "{\"key\":\"" + wArrKey[i] + "\",\"text\":\"" + wArrTxt[i] + "\"}";
		jsonStr += (i < wArrKey.length - 1 ? "," : "");
	}
	jsonStr += "]}";
	
	var jObject = eval("(" + jsonStr + ")");
	
	return jObject;
};

/**
 * @description	미결
 * @param		{object}	tag
 * @return		{undefined}
 * @example		미결
 */
TreeView.prototype.nodeClear = function(tag){
	// functionname : [TreeView.nodeclear]

    var node = this.nodes.item(tag);
    if (node.children = 0) return;
    
    for (var i=this.nodes.arrNodes.length - 1; i >= 0; i--){
         var node2 = this.nodes.arrNodes[i];
        if (node2.parent == node){
            if (node2.children > 0) {
	        	this.nodeClear(node2.tag);
            }
            this.nodes.remove(node2.tag);
        }
    }
};

/**
 * @description	미결
 * @param		{object}	tag
 * @return		{undefined}
 * @example		미결
 */
TreeView.prototype.refreshNode = function(tag){
	// functionname : [TreeView.refreshNode]


    this.nodeClear(tag);

    var node = this.nodes.item(tag);
    node.children = 0;
    if (this.selectedItem != null){
    	this.selectedItem.textTagObject.className = "";
        this.selectedItem = null;
    }

    var childLevel = node.level + 1;
    var nodeKey = node.tag;

    if (this.hasfillTreeEvent[childLevel]) {
        var result = this.fncfillTreeEvent[childLevel](nodeKey);
    }
};

/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
TreeView.prototype.reset = function(){
	// functionname : [TreeView.reset]
	while (this.nodes.count() > 0){
		var tag = this.nodes.arrNodes[0].tag;
		this.nodeClear(tag);
		this.nodes.remove(tag);
	}

    var childLevel = 1;
    var nodeKey = "";

    if (this.hasfillTreeEvent[childLevel]) {
        var result = this.fncfillTreeEvent[childLevel](nodeKey);
    }    
};

/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
TreeView.prototype.focus = function(){
	this.tagObject.focus();
}

function treeCheck_onClick(e){
    e = window.event || e;
	var em = getSrcElement(e);
	var control = searchControl_TreeView(em);
	
	var wNode = search_Node(em);
	
	wNode.checked = !wNode.checked;
    if (wNode.checked) {
    	wNode.checkTagObject.innerHTML = "&#9745;"; 
    } else {
    	wNode.checkTagObject.innerHTML = "&#9744;";
    }
	
    wNode.checked != wNode.checked;
    
	var checkEvent = false;
	try {
    	if (eval(wNode.parentControl.controlId + "_oncheckclick")) checkEvent = true;
    } catch(e){}
    
    if (checkEvent){
        eval(wNode.parentControl.controlId + "_oncheckclick(wNode);");
    }
    
    //자식노드의 체크를 일괄 조정
    if (wNode.children > 0){
        for (var i=control.nodes.arrNodes.length - 1; i >= 0; i--){
           var node2 = control.nodes.arrNodes[i];
           if (node2.parent == wNode){
        	   if (wNode.checked != node2.checked)
        	       node2.setCheckValue(wNode.checked);
           }
       }
    }
    
    stopEvent(e);
    
    return;
}

/**
 * 트리에서 인수로 받은 텍스트 값을 겁색하고 포커스를 이동하고 클릭이벤트를 발생시킨다.
 * 현재선택된 노드의 뒤로부터 겁색하고 없으면 앞에서 부터 검색한다. 
 * 
 * find(text)
 * find(text, level)
 * 
 * @param  text            검색할 텍스트의 값  
 * @param  level           검색할 레벨 , 상위 또는 하위레벨의 노드에 같은 텍스트 값이 있는 경우 사용
 * @return                 검색된 노드
*/

/**
 * @description	미결
 * @param		text
 * @param		level
 * @return		{String}
 * @example		미결
 */
TreeView.prototype.find =  function(text, level){
    // functionname : [TreeView.getIndexOf]
    
    var checkLevel = (typeof level != "undefined");

    var currentIndex = (this.selectedItem ? this.nodes.getIndexOf(this.selectedItem.tag) : -1);
    var wNodes = this.nodes.arrNodes;
    var wNode = null;

    // 현재 선택된 노드위치로 부터 뒤로 찾고 없으면 앞에서 부터 찾는다 
    for (var i = currentIndex + 1; i < wNodes.length; i++){
//        if (wNodes[i].text !== text) continue;
    	if (wNodes[i].text.substr(0,text.length) !== text) continue;
        if (checkLevel && level !== wNodes[i].level) continue;

        wNode = wNodes[i]
        break;
    }

    if (wNode == null){
        for (var i = 0; i < currentIndex; i++){
//            if (wNodes[i].text !== text) continue;
        	if (wNodes[i].text.substr(0,text.length) !== text) continue;
            if (checkLevel && level !== wNodes[i].level) continue;

            wNode = wNodes[i]
            break;
        }
    }

    if (wNode == null){
    	if(this.selectedItem == null){
    		alert(getText("message_treeview_003", "{0}를 찾을 수 없습니다.", [text]));
    	}
//    	else {
//    		alert(text + "를 더 이상 찾을 수 없습니다.");
//    	}
    	
        return null;
    }

    // 탐색된 노드를 펼쳐준다ㅏ 
    var parentNode = wNode;
//    var level = (("" + wNode.tag).split(";")).length;
//    for (var i = level - 1; i > 0; i--) {	
//        parentNode = parentNode.parent;
//        //if (!parentNode.expanded) parentNode.open();
//        //if (!parentNode.expanded) parentNode.parentControl.open(parentNode.tag, this.nodes.getIndexOf(parentNode.tag));
//        parentNode.parentControl.open(parentNode.tag, this.nodes.getIndexOf(parentNode.tag));
//    }
    while(parentNode.parent != null){
    	parentNode = parentNode.parent;
    	parentNode.parentControl.open(parentNode.tag, this.nodes.getIndexOf(parentNode.tag));
    }
    parentNode = null;
    
    // 현재선택한 노드가 있으면 원래색깔로 돌린다
    if (this.selectedItem != null){
    	this.selectedItem.textTagObject.className = "";
    }    
    
    // 선택한 노드의 속성을 바꾼다
    this.selectedItem = wNode;
    this.selectedItem.textTagObject.className = "NodeSel";

    // 노드 클릭이벤트를 일으킨다.
    if (this.hasNodeClickEvent) {
        var result = this.fncNodeClickEvent(wNode);
    }

    return wNode;
};
/**
 * @class ChartBox 차트박스
 * @description ChartBox ControlBase를 상속받고 해당 컨트롤의 ID, Name, 태그 속성을 설정합니다.
 * @param {string} controlId 			해당 컨트롤의 ID
 * @param {string} controlName 			해당 컨트롤의 Name
 * @param {object} tagObject 			해당 컨트롤의 태그 속성을 설정하는 객체
 * @return 반환값 없음
 * 
 * @property {string} chartName 		차트 태그 네임		
 * @property {string} title 			차트 제목
 * @property {number} gallery 			차트 종류(1:Line,2:Column,3:Curve,4:Scatter,5:Pie,6:Area,7:Pareto,8:Step,9:High-Low-Close,10:Surface,11:Radar,12:Cube,13:Doughnut,14:Pyramid,15:Bubble,16:Open-High-Low-Close,17:CandleStick,18:Contour,19:Curve-Area,20:Bar)
 * @property {number} stacked 			누적 그래프(0 : 누적아님, 1 : 누적)
 * @property {number} grid 				그리드선(1 : 가로선, 2 : 세로선, 3 : 가로,세로선)
 * @property {boolean} chart3d 			차트형태 (True:3D, False:2D)
 * @property {string} backcolor			배경색상
 * @property {string} fillcolor			채우기색상
 * @property {string} stripe 			영역 강조
 * @property {string} constantline 		기준라인 문자
 * @property {string} bottomtitle    	x축 제목
 * @property {number} xmax  			x축 최대값
 * @property {number} xmin  			x축 최소값
 * @property {number} xstep  			x축 증분값
 * @property {string} lefttitle  		y축 제목
 * @property {number} ymax 				y축 최대값
 * @property {number} ymin 				y축 최소값
 * @property {number} ystep  			y축 증분값
 * @property {number} ydecimals			y축 소수점 자릿수
 * @property {string} seriescode2  		y2축 계열코드
 * @property {string} lefttitle2  		y2축 제목
 * @property {number} ymax2 			y2축 최대값
 * @property {number} ymin2 			y2축 최소값
 * @property {number} ystep2  			y2축 증분값
 * @property {number} ydecimals2		y2축 소수점 자릿수
 * @property {string} data  			데이터
 * @property {boolean} busy 			현재 작업이 진행중이면 true 아니면 false
 */
function ChartBox(controlId, controlName, tagObject){
    // 상속선언부
    this.base = ControlBase;              			//부모클래스 지정
    this.base(controlId, controlName, tagObject);   //부모클래스 생성자호출
    
    // 상수 선언부
    
    // 속성 선언부
//    this.width = tagObject.style.width;
//    this.height = tagObject.style.height;
    /**
     * @property {number} width 폭
     */
    this.width = getComputedStyle(tagObject).width;
    /**
     * @property {number} height 높이
     */
    this.height = getComputedStyle(tagObject).height;
    
    if (tagObject != undefined){
        tagObject.setAttribute("tabIndex", "-1");
        charts[charts.length] = this;
    }
    
    this.chartName  = "";
    this.title = tagObject.getAttribute("charttitle");
    /**
     * @description 미결
     */
    this.gallery = (!tagObject.getAttribute("gallery") ? "2" : tagObject.getAttribute("gallery"));
    this.stacked = tagObject.getAttribute("stacked");     // 0 or 1
    this.grid = tagObject.getAttribute("grid");
    this.chart3d = tagObject.getAttribute("chart3d");
    this.backcolor = (!tagObject.getAttribute("backcolor") ? "FFFFFF" : tagObject.getAttribute("backcolor"));
    this.fillcolor = (!tagObject.getAttribute("fillcolor") ? "FFFFFF" : tagObject.getAttribute("fillcolor"));
    this.stripe = tagObject.getAttribute("stripe");
    this.constantline = tagObject.getAttribute("constantline");
//    this.rgb2dbk = (!tagObject.getAttribute("rgb2dbk") ? 16777215 : tagObject.getAttribute("rgb2dbk"));
//    this.rgb3dbk = (!tagObject.getAttribute("rgb3dbk") ? 16777215 : tagObject.getAttribute("rgb3dbk"));
//    this.rgbbk = (!tagObject.getAttribute("rgbbk") ? 16777215 : tagObject.getAttribute("rgbbk"));
//    this.min1 = tagObject.getAttribute("min1");   // no use
//    this.max1 = tagObject.getAttribute("max1");   // no use
//    this.color1 = tagObject.getAttribute("color1");   // no use
//    this.constantlinevalue1 = tagObject.getAttribute("constantlinevalue1"); // 배열
//    this.constantlinelabel1 = tagObject.getAttribute("constantlinelabel1"); // 배열
//    this.view3ddepth = 0; // no use
    this.bottomtitle = tagObject.getAttribute("bottomtitle"); 
    this.xmax = (!tagObject.getAttribute("xmax") ? 100 : tagObject.getAttribute("xmax"));
    this.xmin = (!tagObject.getAttribute("xmin") ? 0 : tagObject.getAttribute("xmin"));
    this.xstep = (!tagObject.getAttribute("xstep") ? 1 : tagObject.getAttribute("xstep"));
    this.xdecimals = tagObject.getAttribute("xdecimals");
    this.lefttitle = tagObject.getAttribute("lefttitle");
    this.ymax = (!tagObject.getAttribute("ymax") ? 100 : tagObject.getAttribute("ymax"));
    this.ymin = (!tagObject.getAttribute("ymin") ? 0 : tagObject.getAttribute("ymin"));
    this.ystep = (!tagObject.getAttribute("ystep") ? 1 : tagObject.getAttribute("ystep"));
    this.ydecimals = tagObject.getAttribute("ydecimals");
    this.seriescode2 = tagObject.getAttribute("seriescode2");
    this.lefttitle2 = tagObject.getAttribute("lefttitle2");
    this.ymax2 = (!tagObject.getAttribute("ymax2") ? 100 : tagObject.getAttribute("ymax2"));
    this.ymin2 = (!tagObject.getAttribute("ymin2") ? 0 : tagObject.getAttribute("ymin2"));
    this.ystep2 = (!tagObject.getAttribute("ystep2") ? 1 : tagObject.getAttribute("ystep2"));
    this.ydecimals2 = tagObject.getAttribute("ydecimals2");
    this.data = "";    
    this.busy = false;
};
ChartBox.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함
/**
 * @description	설정된 데이터값으로 차트를 채워줍니다.
 * @param	{object}	strXml 
 * @param	{object}	swfName
 * @param	{object}	dataFormat
 * @return	{undefined}
 */
//ChartBox.prototype.setChartXml = function (strXml, swfDir, swfName, dataFormat) {
ChartBox.prototype.setChartXml = function (strXml, swfName, dataFormat) {
	// functionname : [ChartBox.setChartXml]
	
//    var chart = new FusionCharts(getContextPath() + "/pages/groupware/images/"+swfDir+"/"+swfName+".swf", this.controlId, this.width, this.height);
//    chart.setDataXML(strXml);
//    chart.render(this.id);
    
	var chart = new FusionCharts({
        type: swfName,
        renderAt: this.controlId,
//        width: getComputedStyle(this.tagObject).width,
//        height: this.height,
        width: "100%",
        height: "100%",
        dataFormat: dataFormat,
        dataSource: strXml
    });
	
    // Render the chart.
	chart.render();
    
    // 데이터 처리가 끝나면 로딩 박스를 숨긴다
    //hideAjaxBox();
    //document.getElementsByName("ajaxBox")[0].style.display = 'none';
};

/**
 * @description 설정된 값으로 채워진 차트를 화면에 보여줍니다.
 * @param em 해당 태그객체
 * @return 반환값 없음
 */
ChartBox.prototype.show =  function(em) {		
	this.busy = true;
//	showAjaxBox("차트작성중입니다.", 0); // 로딩 박스를 보여준다
	
	var wQueryString = "data=" + encodeURIComponent(this.data)
		            + "&title=" + encodeURIComponent(this.title)
		            + "&gallery=" + this.gallery
		            + "&stacked=" + this.stacked
		            + "&grid=" + this.grid
					+ "&chart3d=" + this.chart3d
					+ "&backcolor=" + this.backcolor
					+ "&fillcolor=" + this.fillcolor
					+ "&stripe=" + this.stripe
					+ "&constantline=" + this.constantline
//					+ "&rgb2dbk=" + this.rgb2dbk
//					+ "&rgb3dbk=" + this.rgb3dbk
//					+ "&rgbbk=" + this.rgbbk
//					+ "&min1=" + this.min1
//					+ "&max1=" + this.max1
//					+ "&color1=" + this.color1
//					+ "&constantlinevalue1=" + this.constantlinevalue1
//					+ "&constantlinelabel1=" + encodeURIComponent(this.constantlinelabel1)
					+ "&bottomtitle=" + encodeURIComponent(this.bottomtitle)
					+ "&xmax=" + this.xmax
					+ "&xmin=" + this.xmin
					+ "&xstep=" + this.xstep
					+ "&xdecimals=" + this.xdecimals
					+ "&lefttitle=" + encodeURIComponent(this.lefttitle)
					+ "&ymax=" + this.ymax
					+ "&ymin=" + this.ymin
					+ "&ystep=" + this.ystep
					+ "&ydecimals=" + this.ydecimals
					+ "&seriescode2=" + encodeURIComponent(this.seriescode2)
					+ "&lefttitle2=" + encodeURIComponent(this.lefttitle2)
					+ "&ymax2=" + this.ymax2
					+ "&ymin2=" + this.ymin2
					+ "&ystep2=" + this.ystep2
					+ "&ydecimals2=" + this.ydecimals2
			        + "&lang=" + USER_LANGUAGE
					+ "&tm=" + (new Date()).valueOf();
	
	if (TEST_MODE == undefined || !TEST_MODE){
		ajaxCall("POST", getContextPath() + "/ViewChart.do", wQueryString, this, "textChart");
	} else {
		ajaxCall("POST", getContextPath() + "/test/ViewChart.do", wQueryString, this, "textChart");
	}
	
	return;
		
};

/**
 * @description 미결
 * @param	{String}	info
 * @param	{String}	message
 * @param	{Object}	pFlag
 * @return	{void}
 * @example 미결
 */
ChartBox.prototype.parseData = function(info, message, pFlag){
	// functionname : [ChartBox.parseData]
	this.busy = false;               	
	// 오류 메시지 먼저 파악 
	if (info == null){
		callEvent("Chart_" + this.id + "_MakeFailed", message);
		return;
	}
	
	//window.clipboardData.setData("Text", info);
	
	// 데이터분석 플래시 전달
    var data = info.split("^&^");
    this.setChartXml(data[0], data[1], data[2]);
    
    callEvent("Chart_" + this.id + "_MakeSuccess");
	
	return;
};
    
    // ListSheet 클라스선언
    function ListSheet(controlId, controlName, tagObject) //constructor 
    {
        this.base = DataSheet;
        this.base(controlId, controlName, tagObject);
        this.sheetType = SHEETTYPE_LISTSHEET;
        this.isKeyControl  = (tagObject.getAttribute("iskeycontrol")  == "true");
        this.isFillControl = (tagObject.getAttribute("isfillcontrol")  == "true");
        this.isClearControl = (tagObject.getAttribute("isclearcontrol")  == "true");
        this.isSeqClearControl = (tagObject.getAttribute("isseqclearcontrol")  == "true");
    };
    
    ListSheet.prototype = new DataSheet();
    
    ListSheet.prototype.selectRow = function(em){
        // functionname : [ListSheet.selectRow]
        // 한번 줄선택하면 Dirty
                           
    	var wTagObject = em;
    	// TD이고 줄인것 
    	while (wTagObject.parentNode && 
    	       (wTagObject.parentNode.tagName != "TR" || wTagObject.parentNode.getAttribute("haveData") != "1")) 
    	           wTagObject = wTagObject.parentNode;
    	if (!wTagObject.parentNode || wTagObject.parentNode.getAttribute("haveData") != "1") return;
    	
	    var wCell = wTagObject;
	    var wRow = wTagObject.parentNode;

    	var wRowNum = this.rowNumOf(wRow.rowIndex, wCell.cellIndex, CONV_HARD_LOGICAL);
    	var wColNum = this.colNumOf(wRow.rowIndex, wCell.cellIndex, CONV_HARD_LOGICAL);
    	
    	// 3/3 다시 가저오기를 호출할 수 있도록하기 위하여 임시로 지움
        //if (this.dirty && wRowNum == this.currentRow) return true;
        this.dirty = true;
    	
     	this.currentRow = (wRowNum <= 0 ? 1 : wRowNum);

        // 사용자 코딩 추가영역을 호출한다
    	var checkEvent = false;
    	try {
        	if (eval(this.controlId + "_onclick")) checkEvent = true;
        } catch(e){}
        
        if (checkEvent){
    	   var result = eval(this.controlId + "_onclick(wRowNum, wColNum);");
           if (typeof(result)=="boolean" && !result) return result;
        }

        return true;
    };   

    
    /**
 * @class       PioctureBox를 호출하는 클래스
 * @constructor PictureBox Class 생성자 메소드
 * @param       controlId		  해당컨트롤의 ID를 지정한다.
 * @param       controlName   해당 컨트롤의 Name을 지정한다.
 * @param       tagObject		  해당 컨트롤의 태그속성을 설정하는 객체를 지정한다.
 * @return                    반환값 없음, 에러발생시 undefined 를반환함
 * @example     var wControl = controls["PictureBox_1"]
 * 			if(wContorl.errMsg !=null){
 * 		//객체 생성에 실패하였습니다. 에러처리 코드를 입력해주세요.
 *  }
 *  	//후속코드생략..
 */
function PictureBox(controlId, controlName, tagObject){
	// 상속선언부
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	// 속성 선언부
	this.tagObject = tagObject;
	
	if( tagObject != undefined ){
		tagObject.setAttribute("tabIndex", "-1");
		pictures[pictures.length] = this;
	}
	
	this.busy = false;
};

PictureBox.prototype = new ControlBase(); // 의미없음 코딩 편의기능을 활용하기 위함
/**
 * @description 사진이 위치한 파일명 및 경로를 넘겨줍니다
 * @param       pictureUrl {String} 사진의 주소값을 가져옵니다
 * @param       subdir {String} 사진의 경로값을 가져옵니다.
 * @param       fileName {Sting} 파일명을 가져옵니다.
 * @return      반환값 없음, 에러발생시 undefined를 반환함
 * @example     contorls["PictureBox_1"].setValue(pictureUrl,subdir,fileName);
 */
PictureBox.prototype.setValue = function(pictureUrl, subdir, fileName){
	// functionname : [PictureBox.setPicture]
	
	this.setPicture(pictureUrl, subdir, fileName);
};
/**
 * @description 사진의 경로 및 파일이름을 지정합니다.
 * @param       pictureUrl {String} 사진의 주소값을 가져옵니다.
 * @param       subdir {String} 파일의 경로를 가져옵니다.
 * @param       fileName {String} 파일명을 가져옵니다.
 * @return      반환값 없음. 에러발생시 undefined를 반환한다
 * @example     controls["PictureBox_1"].setPicture("http://image.search.naver.com/search");
 * @example     controls["PictureBox_1"].setPicture("c:\picture","apple.jsp");
 */
PictureBox.prototype.setPicture = function(pictureUrl, subdir, fileName){
	// functionname : [PictureBox.setPicture]
	
	this.clear();
	
	if( (typeof pictureUrl == "string" && pictureUrl.length > 0) 
			&& (typeof subdir == "undefined" || typeof fileName == "undefined")
	){
		if( !(/^http:\/\/.+$/.test(pictureUrl)) ) pictureUrl = getContextPath() + pictureUrl;
		
		this.tagObject.getElementsByTagName("IMG")[0].src = encodeURI(pictureUrl);
	}
	else if( (typeof pictureUrl == "string" && pictureUrl.length <= 0) 
				&& typeof subdir != "undefined" && typeof fileName != "undefined"
	){
		this.loadPicture(subdir, fileName);
	}
};
/**
 * @description 화면에서 불러왔던 사진을 지워줍니다.
 * @return      반환값 없음. 에러발생시 undefined를 반환한다.
 * @example     controls["PictureBox_1"].clear()
 */
PictureBox.prototype.clear = function(){
	// functionname : [PictureBox.clear]
	
	this.tagObject.getElementsByTagName("IMG")[0].src = getContextPath() + "/winnersoft/images/picture/blank.gif";
};
/**
 * @description 지정된 파일을 보여줍니다.
 * @param       svrFileName {String} 화면에 보여줄 파일명 입니다.
 * @param       subDir {String} 파일이 존재하는 경로 입니다.
 * @return      반환값 없음.오류발생시 undefined를 반환한다.
 * @example     controls["PictureBox_1"].loadPicture("apple.jpg","c:\picture");
 */
PictureBox.prototype.loadPicture = function(svrFileName, subDir){
	// functionname : [PictureBox.loadPicture]
	
	var wSvrFileName = (svrFileName.indexOf("/") >= 0) ? svrFileName.substring(svrFileName.lastIndexOf("/") + 1) : svrFileName;
	var wQueryString = "subDir=" + encodeURIComponent(subDir)
						+ "&svrFileName=" + encodeURIComponent(wSvrFileName)
						+ "&lang=" + USER_LANGUAGE
						+ "&tm=" + (new Date()).valueOf(); 
	var pictureControlName = this.controlName;
	this.busy = true;
	
	//showAjaxBox("그림을 가저오는 중입니다", 0);
	
	ajaxCall("POST", "ViewPic.do", wQueryString, this, "textLoadPicture");
	
	return;
};
/**
 * @ 
 * @description 컨트롤의 정보와 메세지를전달 합니다.
 * @param       info {String}	데이터 분석 플래시 입니다.
 * @param       message {String} 오류메세지 입니다.
 * @param       pFlag
 * @example     controls["PictureBox_1"].parseData(info,message,pFlag);
 */
PictureBox.prototype.parseData = function(info, message, pFlag){
	// functionname : [PictureBox.parseData]
	
	this.busy = false;
	
	//hideAjaxBox();
	
	// 오류 메시지 먼저 파악 
	if( info == null ){
		alert(message);
		return;
	}
	
	// 데이터분석 플래시 전달
	
	controls[this.controlName].setPicture(info);
	
	return;
};


/**
 * @class Navigator를 만들어주는 클래스
 * @param controlId
 *            {String} Control의 id를 입니다.
 * @param controlName
 *            {String} Control의 name을 입니다.
 * @param tagObject
 *            {Object} 태그객체 입니다.
 * @example 미결
 */
function Navigator(controlId, controlName, tagObject){
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	// 아래 디폴트 값을 모두 1로 하는 것에 주의
	this.totalCount = 1;		//전체보여질 데이타 건수
	this.currentPage = 1;		//현재페이지
	this.currentLeftPage = 1;	//현재 좌측 첫번째 페이지
	
	// 폼 로드시 설정되는 속성 : 초기화할 경우 수정되면 안됨
	this.pageSize = 1;			//화면에 보여질 데이타 건수
	this.displayPageCount = 1;	// 화면에 출력할 페이지 수 예) 10이면  1부터 10까지. 5이면 1부터 5까지
	this.lastPage = 1;
	
	this.SHOWNEXTBUTTON = 1;
	this.SHOWNEXTGROUPBUTTON = 2;
	this.SHOWLASTBUTTON = 4;
	
	if( tagObject != undefined ){
		tagObject.setAttribute("tabIndex", "-1");
	}
	
	var leftArrowDiv = this.tagObject.getElementsByTagName("div")[0];
	// l◀ 클릭시 이벤트
	setEventHandler(leftArrowDiv.getElementsByTagName("span")[0], "click", Navigator_LeftEofMove_onclick);
	// ◀◀ 클릭시 이벤트
	setEventHandler(leftArrowDiv.getElementsByTagName("span")[1], "click", Navigator_LeftCountMove_onclick);
	// ◀ 클릭시 이벤트
	setEventHandler(leftArrowDiv.getElementsByTagName("span")[2], "click", Navigator_LeftMove_onclick);
	
	var rightArrowDiv = this.tagObject.getElementsByTagName("div")[2];
	// ▶ 클릭시 이벤트  
	setEventHandler(rightArrowDiv.getElementsByTagName("span")[2], "click", Navigator_RightEofMove_onclick);
	// ▶▶ 클릭시 이벤트 
	setEventHandler(rightArrowDiv.getElementsByTagName("span")[1], "click", Navigator_RightCountMove_onclick);
	// ▶l 클릭시 이벤트   
	setEventHandler(rightArrowDiv.getElementsByTagName("span")[0], "click", Navigator_RightMove_onclick);
};

Navigator.prototype = new ControlBase();

/**
 * @description	미결
 * @param		{Object}	em
 * @return		{void}
 * @example		미결
 */
function searchControl_Navigator(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while( pEm.parentNode && !(pEm.className == "Navigator") )
//		pEm = pEm.parentNode;
//	if( pEm.className == "Navigator" ){ 
//		wReturn = getControlById(pEm.id);
//	}
	
	while(pEm.parentNode && image !== "Navigator"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "Navigator" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while( pEm.parentNode && !(pEm.className == "Navigator") )
			pEm = pEm.parentNode;
		
		if( pEm.className == "Navigator" ) 
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
Navigator.prototype.initialize = function (){
    // functionname : [Navigator.initialize]
	
    // 아래 디폴트 값을 모두 1로 하는 것에 주의
    this.totalCount = 1; 		//전체보여질 데이타 건수
    this.currentPage = 1; 		//현재페이지
    this.currentLeftPage = 1; 	//현재 좌측 첫번째 페이지
    
    this.lastPage = 1;
    
    this.showPage(1);
    
	return;
};

/**
 * @description	미결
 * @param		{number}	pPageSize
 * @return		{void}
 * @example		미결
 */
Navigator.prototype.setPageSize = function (pPageSize){
    // functionname : [Navigator.setPageSize]
	
	this.pageSize = pPageSize;
	
	return;
};

/**
 * @description	미결
 * @param		{number}	pTotalCount
 * @return		{void}
 * @example		미결
 */
Navigator.prototype.setTotalCount = function (pTotalCount){
    // functionname : [Navigator.setTotalCount]

	this.totalCount = pTotalCount;
	
	return;
};

/**
 * @description	미결
 * @param		{number}	pDisplayPageCount
 * @return		{void}
 * @example		미결
 */
Navigator.prototype.setDisplayPageCount = function (pDisplayPageCount){
    // functionname : [Navigator.setDisplayPageCount]

	this.displayPageCount = pDisplayPageCount;
	
	return;
};

/**
 * @description	미결
 * @param		{number}	pCurrentPage
 * @return		{void}
 * @example		미결
 */
Navigator.prototype.setCurrentPage = function (pCurrentPage){
    // functionname : [Navigator.setCurrentPage]

	this.currentPage = pCurrentPage;
	
	return;
};

/**
 * @description	미결
 * @param		{object}	styleCode
 * @return		{void}
 * @example		미결
 */
Navigator.prototype.setButtonStyle = function (styleCode){
    // functionname : [Navigator.setButtonStyle]
	
	var leftArrowDiv = this.tagObject.getElementsByTagName("div")[0];
	var rightArrowDiv = this.tagObject.getElementsByTagName("div")[2];
	
	//▶ 버튼
	if( (styleCode & this.SHOWNEXTBUTTON) == this.SHOWNEXTBUTTON ){
		leftArrowDiv.getElementsByTagName("span")[2].style.display = "inline-block";
		rightArrowDiv.getElementsByTagName("span")[0].style.display = "inline-block";
	}
	else{
		leftArrowDiv.getElementsByTagName("span")[2].style.display = "none";
		rightArrowDiv.getElementsByTagName("span")[0].style.display = "none";
	}
	//▶| 버튼
	if( (styleCode & this.SHOWNEXTGROUPBUTTON) == this.SHOWNEXTGROUPBUTTON ){
		leftArrowDiv.getElementsByTagName("span")[1].style.display = "inline-block";
		rightArrowDiv.getElementsByTagName("span")[1].style.display = "inline-block";
	}
	else{
		leftArrowDiv.getElementsByTagName("span")[1].style.display = "none";
		rightArrowDiv.getElementsByTagName("span")[1].style.display = "none";
	}
	//▶▶| 버튼
	if( (styleCode & this.SHOWLASTBUTTON) == this.SHOWLASTBUTTON ){
		leftArrowDiv.getElementsByTagName("span")[0].style.display = "inline-block";
		rightArrowDiv.getElementsByTagName("span")[2].style.display = "inline-block";
	}
	else{
		leftArrowDiv.getElementsByTagName("span")[0].style.display = "none";
		rightArrowDiv.getElementsByTagName("span")[2].style.display = "none";
	}

	return;
};

/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
Navigator.prototype.getPageSize = function (){
    // functionname : [Navigator.getPageSize]

	var wPageSize = this.pageSize;
	
	return wPageSize;
};

/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
Navigator.prototype.getTotalCount = function (){
    // functionname : [Navigator.getTotalCount]

	var wTotalCount = this.totalCount;
	
	return wTotalCount;
};

/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
Navigator.prototype.getDisplayPageCount = function (){
    // functionname : [Navigator.getDisplayPageCount]

	var wDisplayPageCount = this.displayPageCount;
	
	return wDisplayPageCount;
};

/**
 * @description	미결
 * @return		{number}
 * @example		미결
 */
Navigator.prototype.getCurrentPage = function (){
    // functionname : [Navigator.getCurrentPage]

	var wCurrentPage = this.currentPage;
	
	return wCurrentPage;
};

// 페이지 번호 변경. : 페이지 번호, 이미지 클릭시 페이지 변경 동작
/**
 * @description	미결
 * @param		{Object}	em
 * @param		{number}	pageNum
 * @return		{boolean}
 * @example		미결
 */
function callPage(em, pageNum){
	var control = searchControl_Navigator(em); //getSrcElement(event)
	var result = false
	
	try{
		if( typeof window[control.controlId + "_onclick"] == "function" ){
			result = window[control.controlId + "_onclick"](pageNum);
			if( typeof(result) == "boolean" && !result ){
				return false;
			}
		}
	} catch(e){}
	  
	return true;
}

// 스마트 그리드 구현을 위하여 연결된 시트에서 스크롤시 동작   
Navigator.prototype.addPage = function(maxRows){
    // functionname : [Navigator.addPage]
	
	var maxPageNum = Math.ceil(maxRows/this.pageSize);
	if (maxPageNum == Math.ceil(this.totalCount/this.pageSize)) return;
	
	var pageNum = maxPageNum + 1;
    var result = false;
    
    try{
        if( typeof window[this.controlId + "_onaddrequest"] == "function" ){
        	result = window[this.controlId + "_onaddrequest"](pageNum);
        	if( typeof(result) == "boolean" && !result ){
				return false;
			}
        }
	} catch(e){}
	  
    return true;
}

Navigator.prototype.showPage = function(toPageNum){
    // functionname : [Navigator.showPage]

	// 전체 페이지 카운트를 구한다
	this.lastPage = Math.ceil(this.totalCount / this.pageSize);

	// 첫번째 페이지의 번호
	this.currentLeftPage = this.displayPageCount * Math.floor((toPageNum - 0.5) / this.displayPageCount) + 1;
	
	// 끝번째 페이지의 번호
	var lastPageNum = this.currentLeftPage + this.displayPageCount - 1;
    if (lastPageNum > this.lastPage) lastPageNum = this.lastPage;
	
    // 테그만들기
    var wHtml = ""; var index = 0;
    for(var pageNum = this.currentLeftPage; pageNum <= lastPageNum; pageNum++){
    	if (pageNum == toPageNum){
    		wHtml += "<span class=\"underline\">" + pageNum + "</span>";
    	} else {
    		wHtml += "<span onclick='callPage(this," + pageNum + ");'>" + pageNum + "</span>";
    	}
    }
    
    this.tagObject.getElementsByTagName("DIV")[1].innerHTML = wHtml;
    this.currentPage = toPageNum;
    
    return;
};

/**
 * @name 			Navigator#LeftEofMove_onclick
 * @event
 * @return			{boolean}
 * @description  	미결
 */
function Navigator_LeftEofMove_onclick(e)
{
    e = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var control = searchControl_Navigator(em);
    
    if (control.currentPage == 1) return false;
    
	callPage(em, 1);
	
    return true;
};

/**
 * @name 			Navigator#LeftCountMove_onclick
 * @event
 * @return			{boolean}
 * @description  	미결
 */
function Navigator_LeftCountMove_onclick(e)
{
    e = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var control = searchControl_Navigator(em);
    
    if (control.currentLeftPage - control.displayPageCount <= 0) return false;
    
	callPage(em, control.currentLeftPage - control.displayPageCount);
    
    return true;
};

/**
 * @name 			Navigator#LeftMove_onclick
 * @event
 * @return			{boolean}
 * @description  	미결
 */
function Navigator_LeftMove_onclick(e)
{
    e = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var control = searchControl_Navigator(em);
    
    if (control.currentPage == 1) return false;
    
	callPage(em, control.currentPage - 1);
    
    return true;
};

/**
 * @name 			Navigator#RightEofMove_onclick
 * @event
 * @return			{boolean}
 * @description  	미결
 */
function Navigator_RightEofMove_onclick(e)
{
    e = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var control = searchControl_Navigator(em);
    
     if (control.currentPage == control.lastPage) return false;
    
	callPage(em, control.lastPage);
    
    return true;
};

/**
 * @name 			Navigator#RightCountMove_onclick
 * @event
 * @return			{boolean}
 * @description  	미결
 */
function Navigator_RightCountMove_onclick(e)
{
    e = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var control = searchControl_Navigator(em);
    
    if (control.currentLeftPage + control.displayPageCount > control.lastPage ) return false;
    
	callPage(em, control.currentLeftPage + control.displayPageCount);
    
    return true;
};

/**
 * @name 			Navigator#RightMove_onclick
 * @event
 * @return			{boolean}
 * @description  	미결
 */
function Navigator_RightMove_onclick(e)
{
    e = window.event || e;
    var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
    var control = searchControl_Navigator(em);
    
    if (control.currentPage == control.lastPage ) return false;

    callPage(em, control.currentPage + 1);
    
    return true;
};
/**
 * @class Linker 클래스
 * @constructor Linker
 * 
 * @param controlId
 *            {String} 해당 컨트롤의 ID를 지정합니다.
 * @param controlName
 *            {String} 해당 컨트롤의 Name을 지정합니다.
 * @param tagObject
 *            {Object} 해당 컨트롤의 태그 객체를 지정합니다.
 * 
 * @return 객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>
 *         만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
 * 
 * @example var wControl = controls["link_1"] = new Linker("link_1", "Link_1",
 *          document.getElementsByName("link_1")[0]); if(wControl.errorMsg !=
 *          null){ //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요. }
 *  // 후속코드 생략...
 */
function Linker(controlId, controlName, tagObject){
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	this.caption = "";
	/**
	 * @description 링크 url 주소입니다..<br>
	 *              기본값 : #<br>
	 *              <br>
	 */
	this.url = "#";
	
	this.anchor = document.createElement("a");
	this.anchor.setAttribute("href", this.url);
	this.anchor.setAttribute("target", "_blank");
	
	// 자체 이벤트 선언부 
	this.hasClickEvent = false;	this.fncClickEvent = null;
	this.hasClickEvent = (typeof self[this.controlId + "_onclick"] != "undefined");
	if( this.hasClickEvent )
		this.fncClickEvent = new Function("return function(){ return " + this.controlId + "_onclick(); }")();
	
	//this.tagObject.onclick = linker_Click;
	//this.tagObject.getElementsByTagName("A")[0].onclick = linker_A_Click;
	
	setEventHandler(tagObject.getElementsByTagName("a")[0], "click", linker_A_Click);
	setEventHandler(tagObject, "keydown", linker_KeyDown);
};

Linker.prototype = new ControlBase();

/**
 * @description 링크 컨트롤의 ID를 반환합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param em
 *            {Object} 라벨 컨트롤 객체를 입력합니다.
 * @return 링크 컨트롤의 ID를 반환합니다.<br>
 *         만약 에러가 발생할 경우, false 반환합니다.
 * @example var wControl = searchControl_Linker(
 *          document.getElementsByName("link_1")[0] ); if(wControl == null){ //
 *          링크 컨트롤을 찾는데 실패하였습니다. } if(wControl == false){ //
 *          searchControl_Linker 함수 동작 중 에러가 발생하였습니다. }
 *  // 후속코드 생략...
 */
function searchControl_Linker(em){
	var wReturn = null;
	var pEm = em;
	var image = pEm.getAttribute("image");
	
//	while( pEm.parentNode && !pEm.className.startsWith("Link") ) 
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("Link") ) 
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "Link"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}

	if( pEm.getAttribute("image") === "Link" ){
		wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/* 포커스 주기*/
/**
 * @description 링크 컨트롤에 포커스를 지정합니다.
 * @return 포커스 지정을 성공한다면 true를 반환합니다.<br>
 *         만약 에러가 발생한다면 false를 반환합니다.
 * @example var wControl = searchControl_Linker(
 *          document.getElementsByName("link_1")[0] ); if(wControl == null){ //
 *          링크 컨트롤을 찾는데 실패하였습니다. } if(wControl == false){ //
 *          searchControl_Linker 함수 동작 중 에러가 발생하였습니다. } //링크 컨트롤에 포커스를 지정합니다.
 *          if( wControl.focus() == false ){ //링크 컨트롤에 포커스 지정 실패하였습니다. 에러처리 코드를
 *          입력해주세요. //에러 발생시 focus 메소드는 false 를 반환합니다. //에러에 관한 메세지는
 *          wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
Linker.prototype.focus = function(){
	// functionname : [Linker.focus]
	var wReturn = true;
	
	try{
		this.tagObject.getElementsByTagName("A")[0].focus();
	}
	catch(e){
		wReturn = false;
	}
	
	return wReturn;
};

/**
 * @description 링크 컨트롤의 url 주소를 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param value
 *            {String} url 주소를 입력합니다.
 * @return 주소설정을 성공한다면 true를 반환합니다.<br>
 *         만약 에러가 발생한다면 false를 반환합니다.
 * @example var wControl = controls["link_1"]; //링크 컨트롤의 url
 *          "http://www.winnersoft.co.kr" 주소 를 설정합니다.
 *          if(wControl.setValue("http://www.winnersoft.co.kr") == false){ //링크
 *          컨트롤의 url 주소설정 실패하였습니다. 에러처리 코드를 입력해주세요. //에러 발생시 setValue 메소드는 false
 *          를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
Linker.prototype.setValue = function(value){
	this.url = value;
	this.anchor.setAttribute("href", value);
	
	return;
};

/**
 * @description 링크 컨트롤의 표시문자열을 설정합니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @param value
 *            {String} 표시문자열을 입력합니다.
 * @return 표시문자열 설정을 성공한다면 true를 반환합니다.<br>
 *         만약 에러가 발생한다면 false를 반환합니다.
 * @example var wControl = controls["link_1"]; //링크 컨트롤의 url
 *          "http://www.winnersoft.co.kr" 주소 를 설정합니다.
 *          if(wControl.setValue("http://www.winnersoft.co.kr") == false){ //링크
 *          컨트롤의 url 주소설정 실패하였습니다. 에러처리 코드를 입력해주세요. //에러 발생시 setValue 메소드는 false
 *          를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. } //링크 컨트롤의
 *          표시문자열을 "위너소프트"로 설정합니다.
 *          if(wControl.setCaption("http://www.winnersoft.co.kr") == false){
 *          //링크 컨트롤의 표시문자열 설정 실패하였습니다. 에러처리 코드를 입력해주세요. //에러 발생시 setCaption
 *          메소드는 false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg 필드로 확인할 수 있습니다. }
 */
Linker.prototype.setCaption = function(caption){
	this.caption = caption;
	this.tagObject.getElementsByTagName("SPAN")[0].innerText = caption;
	
	return;
};

/**
 * @description 링크 컨트롤을 클릭하는 함수입니다.<br>
 *              만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 * @return 컨트롤을 클릭한다면 true를 반환합니다. 만약 에러가 발생한다면 false를 반환합니다.
 * @example var wControl = controls["link_1"]; //링크 컨트롤을 클릭합니다. if(
 *          wControl.click() == false ){ //링크 컨트롤을 클릭하지 못하였습니다. 에러처리 코드를 입력해주세요.
 *          //에러 발생시 click 메소드는 false 를 반환합니다. //에러에 관한 메세지는 wControl.errorMsg
 *          필드로 확인할 수 있습니다. }
 */
Linker.prototype.click = function(){
	// functionname : [Linker.print]
	
	// 사용자 코딩 추가영역을 호출한다
	if( !this.enabled )
		return false;
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		if( this.hasClickEvent ){
			var result = this.fncClickEvent();
			if( result === false )
				return false;
		}
	}
	
	this.anchor.click();
	
//	//호출 url이 없다면 리턴
//	if( this.url.trim().length == 0 )
//		return;
//	
//	var urlList = this.url.split("?");
//	var paramList = null;
//	
//	if( urlList.length > 1 )
//		paramList = urlList[1].split("&");
//	else
//		paramList = [];
//	
//	var parent = document.getElementsByName("IFrameLayer")[0];
//	var jUploadPrefix = null;
//	var iFrame_DownLoad = null;
//	var action = urlList[0];
//	var paramInfo = null;
//	var params = null;
//	var paramName = null;
//	var paramValue = null;
//	
//	for(var i = 0; i < paramList.length; i++){
//		paramInfo = paramList[i].split("=");
//		
//		paramName = paramInfo[0];
//		paramValue = paramInfo[1];
//		
//		params[i] = new Parameter(paramName, paramValue);
//	}
//
//	jUploadPrefix = timeEncodeString();
//	
//	iFrame_DownLoad = new IFrame_DownLoad(parent, jUploadPrefix + this.controlName, action, params);
//	iFrame_DownLoad.submit();
	
	return true;
};

/**
 * @description	미결
 * @name		Linker#linker_Click
 * @event
 * @returns		{Boolean}
 */
function linker_Click(e){
	// 동작중이면 컴맨드 버튼은 눌려지지 않는다 
	if( jobControler.hasJob() ){
		alert(getText("message_linker_001", "Please Wait for completing current running job."));
		return false;
	}
	
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Linker(em);
	
	control.click();
	
	stopPropagation(e);
	
	return true;
};

/**
 * @description	미결
 * @name		Linker#linker_A_Click
 * @event
 * @returns		{Boolean}
 */
function linker_A_Click(e){
	// 동작중이면 컴맨드 버튼은 눌려지지 않는다
	if( jobControler.hasJob() ){
		alert(getText("message_linker_001", "Please Wait for completing current running job."));
		return false;
	}
	
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_Linker(em);
	
	control.click();
	
	stopPropagation(e);
	
	return true;
};

/**
 * @description	미결
 * @name		Linker#linker_KeyDown
 * @event
 * @returns		{Boolean}
 */
function linker_KeyDown(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var wKeyCode = e.keyCode;
	var control = searchControl_Linker(em);

	if( wKeyCode == 9 ){
		if( getShiftKeyPressed(e) ){
			stopEvent(e);
			setTimeout("setFocusToFormerControl(\"" + control.controlName + "\")", 0);
			return true;
		}
		else{
			stopEvent(e);
			setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
			return true;
		}
	}
	else if( wKeyCode == 13 ){
		stopEvent(e);
		control.click();
		setTimeout("setFocusToNextControl(\"" + control.controlName + "\")", 0);
		return true;
	}
	
	stopPropagation(e);
	
	return true;
};
/**
 * @class Iframe 컨트롤 클래스
 * @constructor Iframe Control Class 생성자 함수
 * 
 * @param controlId
 *            해당 컨트롤의 ID를 지정합니다.
 * @param controlName
 *            해당 컨트롤의 Name을 지정합니다.
 * @param tagObject
 *            해당 컨트롤의 태그 객체를 지정합니다.
 * @returns
 * @example var wControl = controls["IFrame_1"] if(wContorl.errMsg !=null){ //객체
 *          생성에 실패하였습니다. 에러처리 코드를 입력해주세요. } //후속코드생략..
 */
function IFrame(controlId, controlName, tagObject){
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	this.action = "";			//파라메터를 제외한 url 주소
	this.parameters = [];
	this.tagObject = tagObject;
	this.iframe = tagObject.getElementsByTagName("iframe")[0];
	this.passEvent = false;		//사용자 이벤트 동작 여부(true:동작안함 / false:동작함)
	
	if( typeof tagObject != "undefined" ){
		tagObject.setAttribute("tabIndex", "-1");
	}
	
	setEventHandler(this.iframe, "load", IFrame_onload);

	//2016-06-21 : 유비레포트 추가
	this.UB_Report = {};
	this.UB_Report["dirPath"] = "";
	this.UB_Report["fileName"] = "";
	this.UB_Report["directPrint"] = false;
	this.UB_Report["dataSets"] = [];
	this.UB_Report["parameters"] = [];
};

IFrame.prototype = new ControlBase();
/**
 * @description 태그객체의 ID가 Iframe인것을 찾습니다.
 * @param em
 *            {Object} ID를 찾을 element 입니다.
 * @return ID를 반환합니다. , 에러발생시 undefined를 반환합니다.
 */
function searchControl_IFrame(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while (pEm.parentNode && !pEm.className.startsWith("IFrame"))
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("IFrame") )
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "IFrame"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "IFrame" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("IFrame"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("IFrame") )
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/**
 * @description	미결
 * @param		{String}	actionUrl
 * @return		{Void}
 * @example		미결
 */
IFrame.prototype._init = function(actionUrl){
	this.action = "";
	this.parameters = [];
	
	return;
};

/**
 * @description url값을 넘겨줍니다.
 * @param actionUrl
 *            {String} url값을 담고있습니다.
 * @return 반환값없음.
 * @example controls["Iframe_1"].seUrl(url);
 */
IFrame.prototype.setUrl = function(actionUrl){
	this.setValue(actionUrl);
	
	return;
};
/**
 * @description get방식으로넘어온 url을 post 방식으로 넘겨줍니다.
 * @param actionUrl
 *            {String} url값을 갖고있습니다.
 * @returns {Boolean} 이벤트호출 실패시 undefined를 반환하고, 성공시 undefined를 반환합니다.
 * @example contorls["Iframe"].setValue(url);
 */
IFrame.prototype.setValue = function(actionUrl){
	this._init();
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 콜이벤트 호출
		var checkEvent = false;
		try{
			if( eval(this.id + "_oncall") ) checkEvent = true;
		} catch(e){}

		if( checkEvent ){
			var result = eval(this.id + "_oncall();");
			if( typeof(result)=="boolean" && !result ){
				return false;
			}
		}
	}
	
	// url 분해
	var array1 = decodeURI(actionUrl).split("?");
	var array2 = (array1.length > 1 ? array1[1].split("&") : []);
	
	this.action = array1[0];
	for(var i = 0; i < array2.length; i++) {
		var array3 = array2[i].split("=");
		var paramName = array3[0];
		var paramValue = encodeURIComponent(array3[1]);
		
		this.parameters[i] = new Parameter(paramName, paramValue);
	}
	
	this.moveToPage();
	
	return;
};

/**
 * @description 화면에서 받은 값으로 페이지를 이동시킵니다.
 * @returns {Boolean} 호출성공시 true 를 반환합니다.
 * @example controls["IFrame"].callAction();
 */
IFrame.prototype.callAction = function(){
	this._init();
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 화면에서 파라메터 받기
		var checkEvent = false;
		try{
			if( eval(this.id + "_oncall") ) checkEvent = true;
		} catch(e){}
		
		if( checkEvent ){
			var result = eval(this.id + "_oncall();");
			if( typeof(result)=="boolean" && !result ){
				return false;
			}
		}
	}
	
	this.moveToPage();
	
	return;
};

/**
 * @description 화면에서 받은 값으로 페이지를 이동시킵니다.
 * @returns {Boolean} 호출성공시 true 를 반환합니다.
 * @example controls["IFrame"].callAction();
 */
IFrame.prototype.moveToPage = function(){
	if( !(this.clearInfo()) )
		throw "IFRAME CLEAR FAILED";
	
	this.iframe.doc = null;

	if( this.iframe.contentDocument )		this.iframe.doc = this.iframe.contentDocument;			// Firefox, Opera
	else if( this.iframe.contentWindow )	this.iframe.doc = this.iframe.contentWindow.document;	// Internet Explorer
	else if( this.iframe.document )			this.iframe.doc = this.iframe.document;					// Others?
	
	if( this.iframe.doc == null )
		throw "Document not found, append the parent element to the DOM before creating the this.iframe";
	
	this.iframe.doc.open();
	this.iframe.doc.close();
	
	var frm = this.iframe.doc.createElement("form");
	frm.method ="POST" ;
	frm.name   = frm.id = (new Date()).valueOf();
	frm.action = this.action;
	
	this.iframe.doc.body.appendChild(frm);
	
	//151223 김남용 유비리포트 관련 막음
	//frm.enctype="multipart/form-data";
	
	var params = {};
	var paramsCnt = 0;
	var wControl = null;
	var parameter = null;
	var field = null;
	var value = null;

	for(var key in this.parameters){
		parameter = this.parameters[key];
		
		if( typeof parameter == "function" ){
			parameter = null; key = null;
			continue;
		}
		
		if( typeof parameter != "undefined" && parameter instanceof Parameter ){
			field = parameter.fieldName;
			value = parameter.datas[0];
		}
		else{
			field = "params";
			value = parameter;
		}
		
		if( field == "params" ){
			params[key] = (typeof value == "undefined") ? "" : value;
			paramsCnt++;
		}
		else{
			/*wControl = this.iframe.doc.createElement("input");
			wControl.type = "hidden";
			wControl.id   = wControl.name = field;
			wControl.value = value;
			
			frm.appendChild(wControl);*/
			params[key] = (typeof value == "undefined") ? "" : value;
			paramsCnt++;
		}
		
		value = null; field = null;
		parameter = null; key = null;
	}
	
	if( paramsCnt > 0 ){
		wControl = this.iframe.doc.createElement("input");
		wControl.type = "hidden";
		wControl.id = wControl.name = "params";
		wControl.value = encodeURIComponent(JSON.stringify(params));
		
		frm.appendChild(wControl);
	}
	
	wControl = this.iframe.doc.createElement("input");
	wControl.type = "hidden";
	wControl.id = wControl.name = "tm" ;
	wControl.value = (new Date()).valueOf();
	
	frm.appendChild(wControl);
	
	frm.submit();
	
	return;
};

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
IFrame.prototype.clearInfo = function(){
	try{
		//컨트롤 객체 name 속성 복사
		var controlTagName = this.tagObject.getAttribute("name");

		//레이어팝업의 경우 IFrame을 재생성 하지 않음
		if(controlTagName == "layerPopupIframe")
			return true;
		
		//기존 IFrame 정보 복사
		var ifrm_name = this.iframe.getAttribute("name");
		var ifrm_id = this.iframe.getAttribute("id");
		var ifrm_src = this.iframe.getAttribute("src");			//src = (typeof src == "undefined" || typeof src == null) ? "" : src;
		var ifrm_width = this.iframe.getAttribute("width");
		var ifrm_height = this.iframe.getAttribute("height");
		var ifrm_vspace = this.iframe.getAttribute("vspace");
		var ifrm_hspace = this.iframe.getAttribute("hspace");
		var ifrm_marginwidth = this.iframe.getAttribute("marginwidth");
		var ifrm_marginheight = this.iframe.getAttribute("marginheight");
		var ifrm_frameborder = this.iframe.getAttribute("frameborder");
		var ifrm_scrolling = this.iframe.getAttribute("scrolling");
		
		//IFrame 제거
		this.tagObject.innerHTML = "";
		
		//IFrame 생성
		var ifrm = document.createElement("iframe");
		ifrm.setAttribute("name", ifrm_name);
		ifrm.setAttribute("id", ifrm_id);
		ifrm.setAttribute("src", ifrm_src);
		ifrm.setAttribute("width", ifrm_width);
		ifrm.setAttribute("height", ifrm_height);
		ifrm.setAttribute("vspace", ifrm_vspace);
		ifrm.setAttribute("hspace", ifrm_hspace);
		ifrm.setAttribute("marginwidth", ifrm_marginwidth);
		ifrm.setAttribute("marginheight", ifrm_marginheight);
		ifrm.setAttribute("frameborder", ifrm_frameborder);
		ifrm.setAttribute("scrolling", ifrm_scrolling);
		
		//IFrmae 추가
		this.tagObject.appendChild(ifrm);
		
		//컨트롤 속성 초기화
		this.tagObject = document.getElementsByName(controlTagName)[0];
		this.iframe = this.tagObject.getElementsByTagName("iframe")[0];
		
		setEventHandler(this.iframe, "load", IFrame_onload);

		//2016-06-21: 유비레포트 추가
		this.UB_Report = {};
		this.UB_Report["dirPath"] = "";
		this.UB_Report["fileName"] = "";
		this.UB_Report["directPrint"] = false;
		this.UB_Report["dataSets"] = [];
		this.UB_Report["parameters"] = [];
	}
	catch(e){
		return false;
	}
	
	return true;
};

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
function IFrame_onload(){
	var iFrameId = document.getElementsByName(this.id)[0].parentNode.getAttribute("id");

	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 화면에서 파라메터 받기
		var checkEvent = false;
		try{
			//if (eval(this.id + "_onload")) checkEvent = true;
			if( eval(iFrameId + "_onload") ) checkEvent = true;
		} catch(e){}
		
		if( checkEvent ){
			//var result = eval(this.id + "_onload();");
			var result = eval(iFrameId + "_onload();");
			if( typeof(result)=="boolean" && !result )
				return false;
		}
	}
	
	return true;
}

//2016-06-21: 유비레포트 추가
/**
 * @description	미결
 * @param		{Object}	dirPath
 * @return		{Undefined}
 * @example		미결
 */
IFrame.prototype.setJrfFileDir = function( dirPath ){
	this.UB_Report["dirPath"] = dirPath;
};
/**
 * @description	미결
 * @param		{String}	fileName
 * @retur		{Undefined}
 * @example		미결
 */
IFrame.prototype.setJrfFileName = function( fileName ){
	this.UB_Report["fileName"] = fileName;
};
/**
 * @description	미결
 * @param		{Object}	directPrint
 * @return		{Undefined}
 * @example		미결
 */
IFrame.prototype.setJrfDirectPrint = function( directPrint ){
	this.UB_Report["directPrint"] = directPrint;
};
/**
 * @description	미결
 * @param		{Object}	filePrint
 * @return		{Undefined}
 * @example		미결
 */
IFrame.prototype.setJrfFilePrint = function( filePrint ){
	this.UB_Report["filePrint"] = filePrint;
};
/**
 * @description	미결
 * @param		{Object}	fileType
 * @return		{Undefined}
 * @example		미결
 */
IFrame.prototype.setJrfFileType = function( fileType ){
	this.UB_Report["fileType"] = fileType;
};
/**
 * @description	미결
 * @param		{String}	downloadFileName
 * @return		{Undefined}
 * @example		미결
 */
IFrame.prototype.setJrfDownloadFileName = function( downloadFileName ){
	this.UB_Report["downloadFileName"] = downloadFileName;
};
/**
 * @description	미결
 * @param		{String}	argName
 * @param		{Object}	argValue
 * @return		{Undefined}
 * @example		미결
 */
IFrame.prototype.setArgument = function( argName, argValue ){
	var arg = {};
	arg["name"] = argName;
	arg["value"] = argValue;
	
	this.UB_Report["parameters"].push( arg );
};
/**
 * @description	미결
 * @param		{String}	dsName
 * @param		{Object}	dsObject
 * @return		{Undefined}
 * @example		미결
 */
IFrame.prototype.setDataset = function( dsName, dsObject ){
	var arg = {};
	arg["name"] = dsName;
	arg["value"] = (typeof dsObject == "string") ? dataSets[dsObject] : dsObject;
	
	this.UB_Report["dataSets"].push( arg );
};
/**
 * @description	미결
 * @param		{Object}	closeEventFunction
 * @return		{Boolean}
 * @example		미결
 */
IFrame.prototype.retrieve = function( closeEventFunction ){
	var jrf = "";
	var ubdata = "";
	var arg = "";
	var directprint = false;
	var fileprint = false;
	var filetype = "";
	var downloadFileName = "";
	var i = 0;
	
	//레포트 경로 + 파밍명 추가
	jrf = this.UB_Report["dirPath"] + this.UB_Report["fileName"];
	//레포트 출력 구분 추가
	directprint = this.UB_Report["directPrint"];
	fileprint = this.UB_Report["filePrint"];
	filetype = this.UB_Report["fileType"];
	downloadFileName = this.UB_Report["downloadFileName"];
	
	//데이터셋 추가
	for(i = 0; i < this.UB_Report.dataSets.length; i++){
		ubdata += this.UB_Report.dataSets[i].name + "#" + (this.UB_Report.dataSets[i].value).getTabbedStr() +"#";
	}
	
	//파라메터 추가
	for(i = 0; i < this.UB_Report.parameters.length; i++){
		arg += this.UB_Report.parameters[i].name + "#" + this.UB_Report.parameters[i].value + "#";
	}
	
	var ubiReportInfo = JSON.parse(JSON.stringify( UbiReportPrintInfo));
	ubiReportInfo.controlName = this.controlName;
	ubiReportInfo.jrf = jrf;
	ubiReportInfo.directPrint = directprint;
	ubiReportInfo.filePrint = fileprint;
	ubiReportInfo.fileType = filetype;
	ubiReportInfo.downloadFileName = downloadFileName;
	ubiReportInfo.ubdata = ubdata;
	ubiReportInfo.arg = arg;
	ubiReportInfo.closeFunction = closeEventFunction;
	
	UbiReportPrintQueue.push( ubiReportInfo );
	
	_openUbiReport();
	
//	var agent = navigator.userAgent.toLowerCase();
//
//	if (agent.indexOf("chrome") != -1) {
//		//alert("크롬 브라우저입니다.");
//	 	this.setValue( encodeURI("http://"+REPORT_IP+"/FlexFrame/ubireport/ubiviewer_real.jsp?jrf="+jrf+"&ubdata="+ubdata+"&arg="+arg+"&directprint="+directprint+"&fileprint="+fileprint+"&filetype="+filetype) );
//	 } else {
//		//alert("크롬 브라우저가 아니다.");	
//		var ubiForm = document.ubiForm;
//	 	var url = "http://"+REPORT_IP+"/FlexFrame/ubireport/ubiviewer_real.jsp";
//		if(directprint == "true" || fileprint == "true"){
//			window.open("" ,"ubiForm", "toolbar=no,status=no,menubar=no,scrollbars=no,resizable=no,left=1, top=1, width=1, height=1");
//		}else{
//		 	window.open("" ,"ubiForm", "toolbar=no,scrollbars=yes,resizable=yes,top=0,left=0,width=1024,height=768");
//		}	 	 	
//		ubiForm.action =url; 
//	 	ubiForm.method="post";
//		ubiForm.target="ubiForm";
//	 	ubiForm.jrf.value = jrf;
//	 	ubiForm.ubdata.value = encodeURI(ubdata);
//	 	ubiForm.arg.value = encodeURI(arg);
//	 	ubiForm.directprint.value = directprint;
//	 	ubiForm.fileprint.value = fileprint;
//	 	ubiForm.filetype.value = filetype;
//	 	ubiForm.submit();		
//	 }
};

var UbiReportPrintRunStatus = false;
var UbiReportPrintQueue = [];

UbiReportPrintInfo = {
    controlName : null,   		//레포트 컨트롤 명
    jrf : null,           		//레포트 파일명
    directPrint : null,   		//인쇄창 출력 여부
    filePrint : null,     		//파일 출력 여부
    fileType : null,      		//파일 출력 타입
    downloadFileName : null,	//다운로드 파일명
    ubdata : null,        		//데이터셋 데이터
    arg : null,            		//파라메터 데이터
    closeFunction : null			//close 사용자 함수
}

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
function _existUbiReport(){
	return (UbiReportPrintQueue.length > 0) ? true : false;
}

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
function _openUbiReport(){
	if( !(_existUbiReport()) ){
		return false;
	}
	
	if( UbiReportPrintRunStatus ){
		return false;
	}
	
	UbiReportPrintRunStatus = true;
  
	showAjaxBox(getText("message_framebox_001", "레포트를 출력하는 중입니다."), 0);
  
	var ubiReportInfo = UbiReportPrintQueue[0];
	var agent = navigator.userAgent.toLowerCase();
  
	if (agent.indexOf("chrome") != -1) {
		controls["" + ubiReportInfo.controlName].setValue( encodeURI("http://"+REPORT_IP+"/FlexFrame/ubireport/ubiviewer_real.jsp?jrf="+ubiReportInfo.jrf+"&ubdata="+ubiReportInfo.ubdata+"&arg="+ubiReportInfo.arg+"&directprint="+ubiReportInfo.directPrint+"&fileprint="+ubiReportInfo.filePrint+"&filetype="+ubiReportInfo.fileType+"&fileName="+ubiReportInfo.downloadFileName) );
	}
	else {
		var ubiForm = document.ubiForm;
		var url = "http://"+REPORT_IP+"/FlexFrame/ubireport/ubiviewer_real.jsp";
		
		if(ubiReportInfo.directPrint == "true" || ubiReportInfo.filePrint == "true"){
			window.open("" ,"ubiForm", "toolbar=no,status=no,menubar=no,scrollbars=no,resizable=no,left=1, top=1, width=1, height=1");
		}else{
			window.open("" ,"ubiForm", "toolbar=no,scrollbars=yes,resizable=yes,top=0,left=0,width=1024,height=768");
		}
		
		ubiForm.action =url; 
	 	ubiForm.method="post";
		ubiForm.target="ubiForm";
	 	ubiForm.jrf.value = ubiReportInfo.jrf;
	 	ubiForm.ubdata.value = encodeURIComponent(ubiReportInfo.ubdata);
	 	ubiForm.arg.value = encodeURIComponent(ubiReportInfo.arg);
	 	ubiForm.directprint.value = ubiReportInfo.directPrint;
	 	ubiForm.fileprint.value = ubiReportInfo.filePrint;
	 	ubiForm.filetype.value = ubiReportInfo.fileType;
	 	ubiForm.fileName.value = encodeURIComponent(ubiReportInfo.downloadFileName);
	 	ubiForm.submit();
	}
	
	return true;
}

/**
 * @description	미결
 * @returns		{Boolean}
 * @example		미결
 */
function _closeUbiReport(){
	//alert("_closeUbiReport");
	var closeEventFunction = UbiReportPrintQueue[0].closeFunction;
	
	if(UbiReportPrintQueue.length > 0){
		delete UbiReportPrintQueue[0];
		UbiReportPrintQueue = UbiReportPrintQueue.slice(1);
	}
  
	hideAjaxBox();
  
	UbiReportPrintRunStatus = false;
  
	if( _existUbiReport() ){
		setTimeout( function(){ _openUbiReport(); }, 10 );
		return true;
	}
	else{
		UbiReportPrintQueue.clear();
		delete UbiReportPrintQueue;
		UbiReportPrintQueue = [];
	}
	
	if(closeEventFunction != null){
		setTimeout(function(){ closeEventFunction(); }, 10);
	}
  
	return false;
}
/**
 *   @autor   winnersoft korea
 *   @version 5.0
 *   @see     winnersoft.co.kr
 *   
 * @description 
 *     EasyMaker Vertical Data Sheet For Big Data.
 * 
 * @constructor
 * 
 * @param {string} 	 controlId 	 - 콘트롤 고유 아이디 (영문)
 * @param {string} 	 controlName - 콘트롤 명 (사용자 고유 언어)
 * @param {HTMLNode} tagObject   - HTML 본문중의 매칭되는 HTML DOM Node. 
 * @return {Object} - 생성된 EasySheet 개체
 * @exception 널값 예외
 * 
 * 
 */
function FlashPlayer(controlId, controlName, tagObject){
    this.base = ControlBase;      //부모클래스 지정
    this.base(controlId, controlName, tagObject);         //부모클래스 생성자호출
    this.flashPathUrl = getContextPath() + "/pages/groupware/flashes/";
    this.flashUrl = "";
    this.parameters = [];

    if (tagObject != undefined){
        tagObject.setAttribute("tabIndex", "-1");
    }

    this.tagObject = tagObject;
    this.backColor = this.tagObject.style.backgroundColor;
    this.flashObject = null;
};

FlashPlayer.prototype = new ControlBase();

/**
 * @description	미결
 * @param		{Object}	em
 * @return		{String}
 * @example		미결
 */
function searchControl_FlashPlayer(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while (pEm.parentNode && pEm.className != "FlashPlayer") 
//		pEm = pEm.parentNode;
//	if (pEm.className == "FlashPlayer") 
//	    wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "FlashPlayer"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "FlashPlayer" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("FlashPlayer"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("FlashPlayer") ) 
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};
/**
 * @description	미결
 * @param		{object}	actionUrl
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype._init = function(actionUrl){
    this.parameters = [];
	return;
};

/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.callMovie = function(){
	this._init();

	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 콜이벤트 호출
		var checkEvent = false;
		try {
	    	if (eval(this.id + "_oncall")) checkEvent = true;
	    } catch(e){}
	    
	    if (checkEvent){
		   var result = eval(this.id + "_oncall();");
	       if (typeof(result)=="boolean" && !result) {
	    	   return false;
	       }
	    }
	}

    var wParams = "";
    for (var wKey in this.parameters){
    	if (this.parameters[wKey] instanceof Function) continue;
    	wParams += (wParams.length == 0 ? "?" : "&");
    	wParams += wKey + "=" + encodeURIComponent(this.parameters[wKey]);
    }
	
    var wHTML = "<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'" 
    		        + "  codebase='http://active.macromedia.com/flash2/cabs/swflash.cab#version=4,0,0,0'"
    		        + "  width='100%' height='100%'>"
    		        + " <param name='movie' value='" + this.flashPathUrl + this.flashUrl + wParams + "'>"
    		        + " <param name='quality' value='high'>" 
    		        + " <param name='play' value='false'>" 
    		        + " <param name='wmode' value='transparent'>"
    		        + " <embed play='false' " 
    		        + "        swliveconnect='true' " 
    		        + "        src='" + this.flashPathUrl + this.flashUrl + wParams + "' " 
    		        + "        quality='high' " 
    		        + "        wmode='transparent'"
    		        + "        width='100%' height='100%'" 
    		        + "        type='application/x-shockwave-flash'"  
    	            + "        pluginspage='http://www.macromedia.com/shockwave/download/index.cgi?P1_Prod_Version=ShockwaveFlash'> </embed>" 
    	      + "</object>"; 

	
    this.tagObject.innerHTML = wHTML;
	
    if (BrowserDetect.browser == "Explorer"){
        this.flashObject = this.tagObject.getElementsByTagName("OBJECT")[0];
    } else {
        this.flashObject = this.tagObject.getElementsByTagName("EMBED")[0];
    }
    
    this.flashObject.Play();
	
	return;
};
/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.stop = function(){
	this.flashObject.StopPlay();
	return;
};
/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.play = function(){
	this.flashObject.Play();
	//embed.nativeProperty.anotherNativeMethod();
	return;
};
/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.rewind = function(){
	this.flashObject.Rewind();
	return;
};
/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.next = function(){
	// 4 is the index of the property for _currentFrame
	// "/" is target
	var currentFrame=this.flashObject.TGetProperty("/", 4);
	var nextFrame=parseInt(currentFrame);
	if (nextFrame>=10)
		nextFrame=0;
	this.flashObject.GotoFrame(nextFrame);		
	return;
};
/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.zoomIn = function(){
	this.flashObject.Zoom(90);
	return;
};
/**
 * @description	미결
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.zoomOut = function(){
	this.flashObject.Zoom(110);
	return;
};
/**
 * @description	미결
 * @param		{object}	variable
 * @param		{object}	value
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.setValue = function(variable, value){
	this.sendData(variable, value);
	return;
};
/**
 * @description	미결
 * @param		{object}	variable
 * @param		{object}	value
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.sendData = function(variable, value){
	this.flashObject.SetVariable(variable, value);
	try {this.flashObject.updatePlayer();} catch (e){} //프래시 6.0.65+
	return;
};
/**
 * @description	미결
 * @param		{object}	variable
 * @return  	{object}
 * @example		미결
 */
FlashPlayer.prototype.getValue = function(variable){
	return this.receiveData(variable);
};
/**
 * @description	미결
 * @param		{object}	variable
 * @return  	{object}
 * @example		미결
 */
FlashPlayer.prototype.receiveData = function(variable){
	return this.flashObject.GetVariable(variable);
};
/**
 * @description	미결
 * @return  	{object}
 * @example		미결
 */
FlashPlayer.prototype.isPlaying = function(){
	return this.flashObject.IsPlaying();
};
/**
 * @description	미결
 * @return  	{object}
 * @example		미결
 */
FlashPlayer.prototype.percentLoaded = function(){
	return this.flashObject.PercentLoaded();
};
/**
 * @description	미결
 * @return  	{object}
 * @example		미결
 */
FlashPlayer.prototype.totalFrames = function(){
	return this.flashObject.TotalFrames();
};

/**
 * @name		FlashPlayer#FlashPlayer_OnProgress
 * @event
 * @description 미결
 */
function FlashPlayer_OnProgress(e){
	var e=arguments[0] || window.event;
}
/**
 * @name		FlashPlayer#FlashPlayer_OnReadyStateChange
 * @event
 * @description 미결
 */
function FlashPlayer_OnReadyStateChange(e){
	var e=arguments[0] || window.event;
	
}
/**
 * @name		FlashPlayer#FlashPlayer_DoFSCommand
 * @event
 * @description 미결
 */
function FlashPlayer_DoFSCommand(command, args){
	var e=arguments[0] || window.event;
	
}
/**
 * @description	미결
 * @param		{object}	variable
 * @param		{object}	value
 * @return  	{void}
 * @example		미결
 */
FlashPlayer.prototype.setParameter = function(variable, value){
	this.parameters[variable] = value;
	return;
};
//1.생성자 tagObject.onXXXX = fuinctio onXXXX 만든다 ...
//2.function 에서 이벤트 캐취는 event.사용할값으로 캐취...
//3.eval실시간 컴파일해서 이벤트 체크...후 이벤트 실행...
//상수
var PROGRESSBAR_TORIGHT = 0;
var PROGRESSBAR_TOLEFT = 1;
var PROGRESSBAR_TOTOP = 2;
var PROGRESSBAR_TOBOTTOM = 3;

/**
 * @class ProgressBar 프로그레스바
 * @description ControlBase를 상속받고 해당컨트롤 최소값, 최대값, 증분값, 진행방향 의 기본값을 설정 합니다.
 * @return 반환값 없음
 * @param {string}
 *            controlId 해당 컨트롤의 ID
 * @param {string}
 *            controlName 해당 컨트롤의 Name
 * @param {string}
 *            tagObject 해당 컨트롤의 태그 속성을 설정하는 객체
 * @property {number} PROGRESSBAR_TORIGHT 프로그래스바 진행방향 설정 상수(0 : 오른쪽)
 * @property {number} PROGRESSBAR_TOLEFT 프로그래스바 진행방향 설정 상수(1 : 왼쪽)
 * @property {number} PROGRESSBAR_TOTOP 프로그래스바 진행방향 설정 상수(2 : 위쪽)
 * @property {number} PROGRESSBAR_TOBOTTOM 프로그래스바 진행방향 설정 상수(3 : 아래쪽)
 * @property {number} value 프로그레스바의 채울 값
 * @property {number} direction 프로그레스바의 진행방향
 * @property {number} min 프로그레스바의 최소값
 * @property {number} max 프로그레스바의 최대값
 * @property {number} step 프로그레스바의 증분값
 */
function ProgressBar(controlId, controlName, tagObject){
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	this.value		= 0;
	this.style		= "ProgressBar";
	this.tabindex	= 0;
	this.tabstop	= 0;
	
	this.bkcolor	= "#FFFFFF";
	this.barcolor	= "#0000FF";
	
	this.direction = 0;
	if( tagObject.getAttribute("direction") != null ){
		this.direction = parseInt(tagObject.getAttribute("direction"));
	}
	
	this.min = 0;
	if( tagObject.getAttribute("min") != null ){
		var _min = parseInt(tagObject.getAttribute("min"));
		if( !isNaN(_min) )
			this.min = parseInt(tagObject.getAttribute("min"));
	}
	
	this.max = 100;
	if( tagObject.getAttribute("max") != null ){
		var _max = parseInt(tagObject.getAttribute("max"));
		if( !isNaN(_max) )
			this.max = parseInt(tagObject.getAttribute("max"));
	}
	
	this.step = 10;
	if( tagObject.getAttribute("step") != null ){
		var _step = parseInt(tagObject.getAttribute("step"));
		if( !isNaN(_step) )
			this.step = parseInt(tagObject.getAttribute("step"));
	}
	
	if( typeof tagObject != "undefined" ){
		tagObject.setAttribute("tabIndex", "-1");
	}
	
	// 자체 이벤트 선언부 
	this.hasClickEvent = false; this.fncClickEvent = null;
	this.hasClickEvent = (typeof self[this.controlId + "_onclick"] != "undefined");
	if( this.hasChangeEvent )
		this.fncClickEvent = (typeof self[this.controlId + "_onclick"] != "undefined");
	
	this.hasFocusEvent = false; this.fncFocusEvent = null;
	this.hasFocusEvent = (typeof self[this.controlId + "_onfocus"] != "undefined");
	if( this.hasFocusEvent )
		this.fncFocusEvent = new Function("return function(){ return " + this.controlId + "_onfocus(); }")();
	
	this.hasBlurEvent = false; this.fncBlurEvent = null;
	this.hasBlurEvent = (typeof self[this.controlId + "_onfocusout"] != "undefined");
	if( this.hasBlurEvent )
		this.fncBlurEvent = new Function("return function(){ return " + this.controlId + "_onfocusout(); }")();
	
	var childDIV = tagObject;
	setEventHandler(childDIV, "click", ProgressBar_onclick, false);
	setEventHandler(childDIV, "focus", ProgressBar_onfocus, false);
	setEventHandler(childDIV, "blur", ProgressBar_onfonblur, false);
};

ProgressBar.prototype = new ControlBase();

/**
 * @description 엘리먼트 값으로 해당 컨트롤을 찾아서 ID값을 반환합니다.
 * @param       em        해당 태그객체
 * @return      {string}  wReturn 해당 컨트롤의 ID값 반환
 */
function searchControl_ProgressBar(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while (pEm.parentNode && !pEm.className.startsWith("ProgressBar"))
//		pEm = pEm.parentNode;
//	if (pEm.className.startsWith("ProgressBar"))
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "ProgressBar"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}
	
	if( pEm.getAttribute("image") === "ProgressBar" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("ProgressBar"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("ProgressBar") )
			wReturn = getControlById(pEm.id);
	}
	
	image = null;
	pEm = null;
	
	return wReturn;
};

/////////////////// set관련 셋팅 오른쪽 , 왼쪽 , 아래 , 위 ///////////////////
/**
 * @description setDirection 프로그레스바의 스텝 증분값 진행 방향 설정 후 setValue 함수를 실행합니다.(오른쪽,
 *              왼쪽, 아래, 위)
 * @param       {number} pDirection 바의 증분값 진행 방향
 * @return      반환값 없음
 */
ProgressBar.prototype.setDirection = function(pDirection){
	this.direction = pDirection;
	this.setValue(this.value);
	
	return;
};

/**
 * @description 프로그레스바의 스텝 최소값을 설정합니다.
 * @param       {number}  pMin 스텝 최소값
 * @return      반환값 없음
 */
ProgressBar.prototype.setMin = function(pMin){
	this.min = pMin;
	
	return;
};

/**
 * @description 프로그레스바의 스텝 최대값을 설정합니다.
 * @param       {number} pMax 스텝 최대값
 * @return      반환값 없음
 */
ProgressBar.prototype.setMax = function(pMax){
	this.max = pMax;
	
	return;
};

/**
 * 
 * @description 프로그레스바에 설정된 값을 넣습니다.<br>
 *              Max값 이상이면 오류메시지 출력후 false를 리턴합니다.<br>
 *              onchange 이벤트를 실행
 * @param       {number} pValue
 * @return      반환값 없음
 */
ProgressBar.prototype.setValue = function(pValue){
	if( pValue > this.max ){
		alert(getText("message_progressbar_001", "프로그래스바의 값이 {0}를 초과할수 없습니다.", [this.max]));
		return false;
	}
	
	if(this.value != pValue){
		var checkEvent = false;
		try {
			if (eval(this.controlId + "_onchange")) checkEvent = true;
		} catch(err){}
		
		if (checkEvent){
			var result = eval(this.controlId + "_onchange(this.value, pValue);");
			if( typeof(result)=="boolean" && !result )
				return false;
		}
	}
	
	this.value = pValue;
	
	var pro = (pValue - this.min) / (this.max - this.min);
	
	var width = getComputedStyleSize(this.tagObject).width;
	if( width.endsWith('px') ) width = width.substring(0, width.length - 2);
	var parentWidth = width;
	
	var height = getComputedStyleSize(this.tagObject).height;
	if( height.endsWith('px') ) height = height.substring(0, height.length - 2);
	var parentHeight = height;
	
	var left = 0;
	var top = 0;
	
	// 초기값은 value값
	if( this.direction == PROGRESSBAR_TORIGHT ){
		width = pro * parseInt(width);
		//this.tagObject.getElementsByTagName("DIV")[0].style.width = width+'px';
		//this.tagObject.getElementsByTagName("DIV")[0].style.left  = '1px';
		this.tagObject.getElementsByTagName("DIV")[0].style.width	= Math.round(((parentWidth - (parentWidth - width)) / parentWidth) * 100) + '%';
		this.tagObject.getElementsByTagName("DIV")[0].style.left	= '0px';
	}
	else if( this.direction == PROGRESSBAR_TOLEFT ){
		width = pro * parseInt(width);
		left = parentWidth - width;
		//this.tagObject.getElementsByTagName("DIV")[0].style.width = width+'px';
		//this.tagObject.getElementsByTagName("DIV")[0].style.left  = (left-1)+'px';
		this.tagObject.getElementsByTagName("DIV")[0].style.width	= Math.round(((parentWidth - (parentWidth - width)) / parentWidth) * 100) + '%';
		this.tagObject.getElementsByTagName("DIV")[0].style.left	= (left - 1) + '%';
	}
	else if( this.direction == PROGRESSBAR_TOTOP ){
		height = pro * parseInt(height);
		top = parentHeight - height;
		//this.tagObject.getElementsByTagName("DIV")[0].style.height= height + 'px';
		//this.tagObject.getElementsByTagName("DIV")[0].style.top	= (top - 1) + 'px';
		this.tagObject.getElementsByTagName("DIV")[0].style.height	= height + 'px';
		this.tagObject.getElementsByTagName("DIV")[0].style.top		= top + 'px';
	}
	else if( this.direction == PROGRESSBAR_TOBOTTOM ){
		height = pro * parseInt(height);
		//this.tagObject.getElementsByTagName("DIV")[0].style.top = '1px';      
		this.tagObject.getElementsByTagName("DIV")[0].style.top		= '0px';
		this.tagObject.getElementsByTagName("DIV")[0].style.height	= height + 'px';
	}
	
	return;
};

ProgressBar.prototype.setTabStop = function(pTabStop){
	return;
};

ProgressBar.prototype.setStep = function(pStep){
	return;
};

ProgressBar.prototype.setTabIndex = function(pTabIndex){
	return;
};

ProgressBar.prototype.setStyle = function(pStyle){
	return;
};

/**
 * @description 채우기색을 설정합니다.
 * @param       {string} pBackColor
 * @return      반환값 없음
 */
ProgressBar.prototype.setBackColor = function(pBackColor){
	this.bkcolor = pBackColor;
	getComputedStyleSize(this.tagObject).background = pBackColor;
	return;
};

ProgressBar.prototype.setForeColor= function(pForeColor){
	this.barcolor = pForeColor;
	this.tagObject.getElementsByTagName("DIV")[0].style.background = pForeColor; 
	return;
};

/////////////////// get관련 셋팅 ///////////////////
ProgressBar.prototype.getDirection = function(){
	return this.direction;
};

ProgressBar.prototype.getMin = function(){
	return this.min;
};

ProgressBar.prototype.getMax = function(){
	return this.max;
};

ProgressBar.prototype.getValue = function(){
	return this.value;
};

ProgressBar.prototype.getTabStop = function(){
	return this.tabstop;
};

ProgressBar.prototype.getStep = function(){
	return this.step;
};

ProgressBar.prototype.getBackColor = function(){
    return this.bkcolor ;
};

ProgressBar.prototype.getForeColor = function(){
    return this.barcolor;
};

ProgressBar.prototype.getStyle = function(){
	return this.style;
};

ProgressBar.prototype.getTabIndex = function(){
	return this.tabindex;
};

/**
 * @description setValue 메소드를 호출하여 프로그레스바를 다시 실행합니다.
 * @return      반환값 없음
 */
ProgressBar.prototype.redraw = function(){
	return this.setValue(this.value);
};

/**
 * @description 컨트롤의 위치와 크기를 다시 설정합니다.
 * @param       {number} pLeft 컨트롤 좌측위치
 * @param       {number} pTop 컨트롤 상단위치
 * @param       {number} pWidth 컨트롤 가로길이
 * @param       {number} pHeight 컨트롤 세로길이
 * @return      반환값 없음
 */
ProgressBar.prototype.moveWindow = function(pLeft, pTop, pWidth, pHeight){    
	this.height = pHeight;
	getComputedStyleSize(this.tagObject).height = (pHeight + 2) + 'px';
	this.tagObject.getElementsByTagName("DIV")[0].style.height = pHeight + 'px';
	
	this.width = pWidth;
	getComputedStyleSize(this.tagObject).width = pWidth+2;
	this.tagObject.getElementsByTagName("DIV")[0].style.width = pWidth + 'px';
	
	this.left = pLeft;
	getComputedStyleSize(this.tagObject).left = pLeft + 'px';
	
	this.top = pTop;
	getComputedStyleSize(this.tagObject).top = pTop;
	
	return true;
};

ProgressBar.prototype.focus= function(){
    /*외각선을 진하게*/
    return;
};
ProgressBar.prototype.blur= function(){
    /*외각선을 원상복귀*/
    return;
};

ProgressBar.prototype.steplt= function(){
    this.value += this.step;
    this.setValue(this.value);
    return true;
};

//이벤트 onclick()
/**
 * @name        ProgressBar#ProgressBar_onclick
 * @event
 * @description 프로그레스바 클릭시 발생하는 이벤트 입니다.
 */
function ProgressBar_onclick(e){
	var evt = window.event || e;
	
	// passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		// 사용자 코딩 추가영역을 호출한다
		if( this.hasClickEvent ){
			var result = this.fncClickEvent(evt.button);
			if( result === false )
				return false;
		}
	}
	
	return true;
};

//이벤트 onfocus()
/**
 * @name        ProgressBar#ProgressBar_onfocus
 * @event
 * @description 프로그레스바 가 포커스를 얻었을때 발생하는 이벤트 입니다.
 */
function ProgressBar_onfocus(e){
	var evt = window.event || e;
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		if( this.hasFocusEvent ){
			var result = this.fncFocusEvent();
			if( result === false )
				return false;
		}
	}
	
	return true;
};

//이벤트 onkillfocus()
/**
 * @name        ProgressBar#ProgressBar_onfonblur
 * @event
 * @description 포커스가 프로그레스바에서 다른 컨트롤로 이동 했을때 발생하는 이벤트 입니다.
 */
function ProgressBar_onfonblur(e){
	var evt = window.event || e;
	
	//passEvent 가 true 라면 사용자 이벤트를 호출하지 않는다
	if( !this.passEvent ){
		if( this.hasBlurEvent ){
			var result = this.fncBlurEvent();
			if( result === false )
				return false;
		}
	}
	
	return true;
};var UPDOWN_DIRECTION = {
	UPDOWN_NS : 1
	, UPDOWN_UD : 1
	, UPDOWN_WE : 2
	, UPDOWN_LR : 2
};

/**
 * @class UpDown를 만들어주는 클래스
 * @param {String} controlId Control의 id를 입니다.
 * @param {String} controlName Control의 name을 입니다.
 * @param {Object} tagObject 태그객체 입니다.
 * @example 미결
 */
function UpDown(controlId, controlName, tagObject){
	this.base = ControlBase;						//부모클래스 지정
	this.base(controlId, controlName, tagObject);	//부모클래스 생성자호출
	
	//상수
	
	//속성
	this.direction = UPDOWN_DIRECTION.UPDOWN_UD;	/* UPDOWN_NS:수직 / UPDOWN_WE:수평 */
	this.min = -99999999;
	this.max = 99999999;
	this.step = 1;
	this.linkControlId = "";
	
	if( typeof tagObject != "undefined" ){
		tagObject.setAttribute("tabIndex", "-1");
		
		if( tagObject.getAttribute("min") != null )
			this.min = parseInt(tagObject.getAttribute("min"));
		
		if( tagObject.getAttribute("max") != null )
			this.max = parseInt(tagObject.getAttribute("max"));
		
		if( tagObject.getAttribute("step") != null )
			this.step = parseInt(tagObject.getAttribute("step"));
		
		if( tagObject.getAttribute("linkedcontrolid") != null )
			this.linkControlId = tagObject.getAttribute("linkedcontrolid");
		
		this.moveWindow();
		
		var childClass = ["DirectArrow_Up", "DirectArrow_Down", "DirectArrow_Left", "DirectArrow_Right"];
		var childDiv = null;
		var i = 0;
		
		for(i = 0; i < childClass.length; i++){
			childDiv = this.tagObject.getElementsByClassName(childClass[i])[0];
			
			if( typeof childDiv != "undefined" ){
				setEventHandler(childDiv, "mousedown", upDown_MouseDown);
				setEventHandler(childDiv, "mouseup", upDown_MouseUp);
				setEventHandler(childDiv, "mouseout", upDown_MouseOut);
			}
			
			childDiv = null;
		}
		
		childDiv = null;
		childClass = null;
	}
	
//	// 자체 이벤트 선언부 
//	this.hasMouseDownEvent = false; this.fncMouseDownEvent = null;
//	this.hasMouseDownEvent = (typeof self[this.controlId + "_onmousedown"] != "undefined");
//	if( this.hasMouseDownEvent ){
//		this.fncMouseDownEvent = new Function("return function(){ return " + this.controlId + "_onmousedown(); }")();
//	}
//	
//	this.hasMouseUpEvent = false; this.fncMouseUpEvent = null;
//	this.hasMouseUpEvent = (typeof self[this.controlId + "_onmouseup"] != "undefined");
//	if( this.hasMouseUpEvent ){
//		this.fncMouseUpEvent = new Function("return function(){ return " + this.controlId + "_onmouseup(); }")();
//	}
//	
//	this.hasMouseOutEvent = false; this.fncMouseOutEvent = null;
//	this.hasMouseOutEvent = (typeof self[this.controlId + "_onmouseout"] != "undefined");
//	if( this.hasMouseOutEvent ){
//		this.fncMouseOutEvent = new Function("return function(){ return " + this.controlId + "_onmouseout(); }")();
//	}
};

UpDown.prototype = new ControlBase();

/**
 * @description	미결
 * @param		{Object}	em
 * @return		{String}
 * @example		미결
 */
function searchControl_UpDown(em){
	var pEm = em;
	var image = pEm.getAttribute("image");
	var wReturn = null;
	
//	while(pEm.parentNode && !pEm.className.startsWith("UpDown")) 
//		pEm = pEm.parentNode;
//	if( pEm.className.startsWith("UpDown") )
//		wReturn = getControlById(pEm.id);
	
	while(pEm.parentNode && image !== "UpDown"){
		pEm = pEm.parentNode;
		image = pEm.getAttribute("image");
	}

	if( pEm.getAttribute("image") === "UpDown" ){
		wReturn = getControlById(pEm.id);
	}
	else{
		pEm = null;
		pEm = em;
		
		while(pEm.parentNode && !pEm.className.startsWith("UpDown"))
			pEm = pEm.parentNode;
		
		if( pEm.className.startsWith("UpDown") )
			wReturn = getControlById(pEm.id);
	}

	image = null;
	pEm = null;
	
	return wReturn;
};

/**
 * @description	미결
 * @param		{number}	pStep
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.setStep = function(pStep){
	// functionname : [UpDown.setStep]
	
	this.step = pStep;
};

/**
 * @description	미결
 * @param		{number}	pMax
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.setMax = function(pMax){
	// functionname : [UpDown.setMax]
	
	this.max = pMax;
};

/**
 * @description	미결
 * @param		{number}	pMin
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.setMin = function(pMin){
	// functionname : [UpDown.setMin]
	
	this.min = pMin; 
};

UpDown.prototype.setDirection = function(pDirection){
	// functionname : [UpDown.setDirection]
	
	this.direction = pDirection;
	this.redrawButton(pDirection);
};

/**
 * @description	미결
 * @param		{object}	pLinkControlId
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.setLinkControlId = function(pLinkControlId){
	// functionname : [UpDown.setLinkControlId]
	
	this.linkControlId = pLinkControlId;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
UpDown.prototype.getStep = function(){
	// functionname : [UpDown.getStep]
	
	return this.step;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
UpDown.prototype.getMax = function(){
	// functionname : [UpDown.getMax]
	
	return this.max;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
UpDown.prototype.getMin = function(){
	// functionname : [UpDown.getMin]
	
	return this.max;
};

UpDown.prototype.getDirection = function(){
	// functionname : [UpDown.getDirection]
	
	return this.direction;
};

/**
 * @description	미결
 * @return		{String}
 * @example		미결
 */
UpDown.prototype.getLinkControlId = function(){
	// functionname : [UpDown.getLinkControlId]
	
	return this.linkControlId;
};

/**
 * @description	미결
 * @param		{object}	pLeft
 * @param		{object}	pTop
 * @param		{object}	pWidth
 * @param		{object}	pHeight
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.moveWindow = function(pLeft, pTop, pWidth, pHeight){
	// functionname : [UpDown.moveWindow]
	
	if( this.tagObject != null && typeof this.tagObject != "undefined" ){
		//입력된 파라메터가 없는 경우
		if( this.linkControlId != null && typeof this.linkControlId == "string" ){
			var linkedControl = document.getElementById(this.linkControlId);
			var linkedControlStyle = null;
			var linkedControlTop = 0;
			var linkedControlLeft = 0;
			var linkedControlWidth = 0;
			var linkedControlHeight = 0;
			
			if( linkedControl != null ){
				linkedControlStyle = getComputedStyle(linkedControl);
				
				linkedControlTop = linkedControlStyle.top;
				linkedControlTop = (typeof linkedControlTop == "undefined") ? 0 : 1 * (("" + linkedControlTop).replace("px", ""));
				linkedControlLeft = linkedControlStyle.left;
				linkedControlLeft = (typeof linkedControlLeft == "undefined") ? 0 : 1 * (("" + linkedControlLeft).replace("px", ""));
				//linkedControlWidth = linkedControlStyle.width;
				linkedControlWidth = linkedControl.offsetWidth;
				linkedControlWidth = (typeof linkedControlLeft == "undefined") ? 0 : 1 * (("" + linkedControlWidth).replace("px", ""));
				//linkedControlHeight = linkedControlStyle.height;
				linkedControlHeight = linkedControl.offsetHeight;
				linkedControlHeight = (typeof linkedControlHeight == "undefined") ? 0 : 1 * (("" + linkedControlHeight).replace("px", ""));
				
				this.tagObject.style.top = linkedControlTop + "px";
				this.tagObject.style.left = (linkedControlLeft + linkedControlWidth) + "px";
				this.tagObject.style.height = linkedControlHeight + "px";
			}
			
			/**
			 * 2019-04-11 jaeik Chrome,Safari,Opera브라우저 이면서 
			 * 상하: 높이/2가 소수점이면 높이 재설정
			 * 좌우: 너비/2가 소수점이면 너비 재설정
			 */
			if (BrowserDetect.browser == "Chrome" || BrowserDetect.browser == "Safari" || BrowserDetect.browser == "Opera") {
				var num_check = /^[0-9]*$/;
				if (this.tagObject.getElementsByClassName("DirectArrow_Up")[0] != null) {
						var arrowHeight = this.tagObject.offsetHeight / 2;
						if (!num_check.test(arrowHeight)) {
								this.tagObject.getElementsByClassName("DirectArrow_Down")[0].style.height = parseInt(arrowHeight) + "px";
						}
				} else {
						var arrowWidth = this.tagObject.offsetWidth / 2;
						if (!num_check.test(arrowWidth))
							this.tagObject.getElementsByClassName("DirectArrow_Right")[0].style.width = parseInt(arrowWidth) + "px";
				}
			}
			
			//메모리 초기화
			linkedControlStyle = null;
			linkedControl = null;
		}
		//입력된 파라메터가 있는 경우
		else{
			//Left
			if( pLeft != null && typeof pLeft != "undefined" ){
				if( /^\d+$/.test(pLeft) )
					this.tagObject.style.left = pLeft + "px";
				else if( (/^\d+px$/.test(pLeft)) || (/^\d+%$/.test(pLeft)) )
					this.tagObject.style.left = pLeft;
			}
			//Top
			if( pTop != null && typeof pTop != "undefined" ){
				if( /^\d+$/.test(pTop) )
					this.tagObject.style.top = pTop + "px";
				else if( (/^\d+px$/.test(pTop)) || (/^\d+%$/.test(pTop)) )
					this.tagObject.style.top = pTop;
			}
			//Width
			if( pWidth != null && typeof pWidth != "undefined" ){
				if( /^\d+$/.test(pWidth) )
					this.tagObject.style.width = pWidth + "px";
				else if( (/^\d+px$/.test(pWidth)) || (/^\d+%$/.test(pWidth)) )
					this.tagObject.style.width = pWidth;
			}
			//Height
			if( pHeight != null && typeof pHeight != "undefined" ){
				if( /^\d+$/.test(pHeight) )
					this.tagObject.style.height = pHeight + "px";
				else if( (/^\d+px$/.test(pHeight)) || (/^\d+%$/.test(pHeight)) )
					this.tagObject.style.height = pHeight;
			}
		}
	}
	
	return;
};

/**
 * @description	미결
 * @param		{object}	pOrientation
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.redrawButton = function(pDirection){
	// functionname : [UpDown.redrawButton]
	
	// 방향 : 동서/좌우
	if( pDirection == UPDOWN_DIRECTION.UPDOWN_WE || pDirection == UPDOWN_DIRECTION.UPDOWN_LR ){
		var upDiv = this.tagObject.getElementsByClassName("DirectArrow_Up")[0];
		if( upDiv != null || typeof upDiv != "undefined" ){
			upDiv.setAttribute("class", "DirectArrow_Left");
			upDiv.getElementsByTagName("div")[0].innerText = "&#xe86e";
		}
		
		var downDiv = this.tagObject.getElementsByClassName("DirectArrow_Down")[0];
		if( downDiv != null || typeof downDiv != "undefined" ){
			downDiv.setAttribute("class", "DirectArrow_Right");
			downDiv.getElementsByTagName("div")[0].innerText = "&#xe86f";
		}
		
		//메모리 해제
		downDiv = null;
		upDiv = null;
	}
	// 방향 : 남북/위아래
	else{
		var leftDiv = this.tagObject.getElementsByClassName("DirectArrow_Left")[0];
		leftDiv.setAttribute("class", "DirectArrow_Up");
		leftDiv.getElementsByTagName("div")[0].innerText = "&#xe86d";
		
		var rightDiv = this.tagObject.getElementsByClassName("DirectArrow_Right")[0];
		rightDiv.setAttribute("class", "DirectArrow_Down");
		rightDiv.getElementsByTagName("div")[0].innerText = "&#xe86c";
		
		//메모리 해제
		leftDiv = null;
		rightDiv = null;
	}
	
	// 버튼 이동
	if( this.linkControlId != null && typeof this.linkControlId == "string" ){
		this.moveWindow();
	}
	
	return;
};

/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.up = function(){
	// functionname : [UpDown.up]
	
	var linkedControl = null;
	var linkedControlName = null;
	var value = null;
	
	if( this.linkControlId != null && typeof this.linkControlId == "string" ){
		linkedControl = document.getElementById(this.linkControlId);
		if (linkedControl != null) {
				linkedControlName = linkedControl.getAttribute("ctlname");
		
				if( linkedControlName != null && typeof linkedControlName == "string" && linkedControlName.length > 0 ){
					value = parseInt(controls[linkedControlName].value*1);
					
					if( !isNaN(value) ){
						value = value + parseInt(this.step);
						value = (this.max > value) ? value : this.max;
						
						controls[linkedControlName].setValue(value);
					}
				}
		}
		
		value = null;
		linkedControlName = null;
		linkedControl = null;
	}
	
	return;
};

/**
 * @description	미결
 * @return		{void}
 * @example		미결
 */
UpDown.prototype.down = function(){
	// functionname : [UpDown.down]
	
	var linkedControl = null;
	var linkedControlName = null;
	var value = null;
	
	if( this.linkControlId != null && typeof this.linkControlId == "string" ){
		linkedControl = document.getElementById(this.linkControlId);
		if (linkedControl != null) {
				linkedControlName = linkedControl.getAttribute("ctlname");
		
				if( linkedControlName != null && typeof linkedControlName == "string" && linkedControlName.length > 0 ){
					value = parseInt(controls[linkedControlName].value);
					
					if( !isNaN(value) ){
						value = value - parseInt(this.step);
						value = (this.min < value) ? value : this.min;
						
						controls[linkedControlName].setValue(value);
					}
				}
		}
		
		value = null;
		linkedControlName = null;
		linkedControl = null;
	}
	
	return;
};

/**
 * @description	미결
 * @return		{undefined}
 * @example		미결
 */
UpDown.prototype.setfocus = function(){
	// functionname : [UpDown.setfocus]
	
	this.tagObject.focus();
};

function upDownChangeLinkedControl(){
	if( !self._updownMouseDown )
		return false;
	
	var className = self._updownDirection;
	
	//증가(방향 : 위, 오른쪽)
	if( typeof className == "string" && (className.indexOf("DirectArrow_Up") >= 0 || className.indexOf("DirectArrow_Right") >= 0) ){
		self._updownControl.up();
	}
	//감소(방향 : 아래, 왼쪽)
	else if( typeof className == "string" && (className.indexOf("DirectArrow_Down") >= 0 || className.indexOf("DirectArrow_Left") >= 0) ){
		self._updownControl.down();
	}
}

function upDown_MouseDown(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var pEm = em;
	var control = searchControl_UpDown(em);
	
	//방향 체크
	while(pEm.parentNode && !pEm.className.startsWith("DirectArrow_")) 
		pEm = pEm.parentNode;
	
	self._updownMouseDown = true;
	self._updownControl = control;
	self._updownDirection = pEm.getAttribute("class");
	self._updownMouseDownTimer = setInterval(upDownChangeLinkedControl, 100);
	
	//메모리 초기화
	control = null;
	pEm = null;
	em = null;
	
	return true;
}

function upDown_MouseUp(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_UpDown(em);
	
	if( typeof self._updownControl != "undefined" && control.id == self._updownControl.id ){
		self._updownMouseDown = false;
		clearInterval(self._updownMouseDownTimer);
		delete self._updownControl;
		delete self._updownDirection;
		delete self._updownMouseDownTimer;
	}
	
	//메모리 초기화
	control = null;
	em = null;
	
	return true;
}

function upDown_MouseOut(e){
	e = window.event || e;
	
	var em = (navigator.userAgent.indexOf('Firefox') >= 0 ? e.target : e.srcElement);
	var control = searchControl_UpDown(em);
	
	if( typeof self._updownControl != "undefined" && control.id == self._updownControl.id ){
		self._updownMouseDown = false;
		clearInterval(self._updownMouseDownTimer);
		delete self._updownControl;
		delete self._updownDirection;
		delete self._updownMouseDownTimer;
	}
	
	//메모리 초기화
	control = null;
	em = null;
	
	return true;
}/**
 * 
 * jsonObject ={id:"aaa", datasettype="DataSet",
 *              colinfos:[{id:"code", size:"256", type:"STRING"}, {id:"name", size:"256", type:"STRING"}],
 *              records:[{code:1, name:"코드"}, {code:2, name:"명"}] }
 */

//DataSet객체가 들어가는 전역변수
var dataSets = [];

/**
 * @class	DataSet
 * @constructor DataSet
 * @description	미결
 * @param	{object}	jsonObject
 */
function DataSet(jsonObject) // constructor
{
	this.id= ""; 
	this.dataSetType= "DataSet";   // Pivot

	this.colInfos = [];
	this.records = [];
	this.buffer = [];           // Filtered 포함 버퍼
	this.OriginBuffer = [];     // 원본 버퍼
	this.Row = 0;                // Dataset에서 현재 선택된 Record의 Index
	this._colCount = 0;
	// 시작 Index 값은 0 입니다.
	// Dataset의 Record가 없을 경우에는 -1 입니다.

	this.FireEvent = true;		// 이벤트를 일으킬 것인지 여부
	this.UpdateControl= true;  // Dataset의 Record에 Update, Delete가 발생한 경우, 변경전 Record 값을 Orgin Buffer에 저장할지 여부

	this.FilterExpr = "";		// Dataset에 기본적으로 Filter되어야 할 Expression
	this.FilterFunction = null;
	this._GroupKey= "";         // Dataset의 GroupKey
	this._jsonGroupKey = [];      // 사용예 "A:B,C,D" 인 경우   [["A","B"],"C","D"]
	this._needGroupKey = [];      // 사용예 2레벨을 출력 않는 경우  [true, false, true]
	this._strSortColList = "";    // 그루핑시 예외 소팅키 "ColumnID, ColumnID" 형식, 또는 "ColumID:(D 또는 A), ..."   D:Descending, A: Ascending
	                              // 소팅키를 정하면 그룹키에 해당하는 키편집을 할 수 없다 (셀서식을 편집 불가능하게 설정해야 한다 )

	this._DataObject= null;   
	this._PivotKey= "";         // Logical Dataset에 PivotTable을 구성하기 위한 PivotColumn
	this._jsonPivotKey = [];      // 사용예 "A:B,C,D" 인 경우   [["A","B"],"C","D"]
	this._needPivotKey = [];      // 사용예 2레벨을 출력 않는 경우  [true, false, true]
	
	this._pivotIndex= 0;        // Pivot Dataset에서 현재 선택된 PivotColumn의 Index
	this._PivotIndexCount= 0;   // Pivot Dataset의 Pivot된 갯수
	this._ReverseSubsum= false; // Dataset의 GroupKey에 의한 SubSum을 역순으로 처리할지 지정하는 Property 
	
	this._arrPivotKeys = [];     // 피벗 키 결과 배열 
	this._arrGroupKeys = [];     // 그룹 키 결과 배열 
	this._arrDatas     = [];     // 피벗 셀 데이터 배열
	this._arrFooterSums= [];     // 푸터집계용 정보
	this._arrItemColIds = [];    // 칼럼아이디 목록
	this._sumMethods   = [];     // 칼럼아이디별 Sum 메서트
	this._sheetName    = "";     // 피벗을 표시할 시트 명
	this._rowCount_NonGroup = 0;

	// 합계열 추가정보 
	this.arrMoreSumInfos = [];    // 주가 합계열 정보 -형식: [{headerText:"XXX", colId:"XXX", sumMethod:"XXX", columnInfo:{AUI그리드의 포멧 }}, ...]  
	                              // -사용예: [{headerText:"전년합계", colId:"D1", sumMethod:"SUM"},{headerText:"전년평균", colId:"D1", sumMethod:"AVG"}]
    this.arrMoreColumnDatas = []; // 추가합계가 채워진 결과 배열 - arrMoreSumInfos의 숫자와 맞아야 함 

	this.dataBinds = [];     	// 데이터 링크된 콘트롤들 
	this.innerBinds = [];    	// 채우기 링크된 그리드들 
	
	this.__actionStack = [];     // 이벤트 호출 스택 기록용 
	this.id = jsonObject.id;
	this.inBlocking = false;
	this.instantUpdateControl = true;	//데이터셋 데이터 변경시 컨트롤에 즉시 반영 여부
	
//	this.mappingRecordInfos = null;
	
	// events ------------------------------------------------------------------------------------	
	makeEventHandler(this, "CanColumnChange", "obj", "nRow", "strColumnID", "varOldValue", "varNewValue");
	makeEventHandler(this, "CanRowPosChange", "obj", "nOldRow", "nRow");
	makeEventHandler(this, "ColumnChanged", "obj", "nRow", "strColumnID", "varOldValue", "varNewValue");
	makeEventHandler(this, "Error",         "obj", "nErrorCode", "strErrorMsg");
	makeEventHandler(this, "LoadCompleted", "obj", "nErrorCode", "strErrorMsg", "nReason");
	makeEventHandler(this, "RowDeleted",    "obj", "nRow", "nCount");
	makeEventHandler(this, "RowDeleting",   "obj", "nRow", "nCount");
	makeEventHandler(this, "RowInserted",   "obj", "nRow", "nCount");
	makeEventHandler(this, "RowPosChanged", "obj", "nOldRow", "nRow");

	// jsonObject로 부터 초기화 
	this.dataSetType = jsonObject.datasettype;
	this.FilterExpr = jsonObject.filterexpr;
	if (this.FilterExpr.length > 0){
		this.FilterFunction = new Function("return function (nRowNum) { return " + this._UpdateFormulaNF(this.FilterExpr) + "; }")();;
	}
	this._GroupKey= jsonObject.groupkey;
	this._PivotKey= jsonObject.pivotkey;
	
	for (var i = 0; i < jsonObject.colinfos.length; i++){
		var object = jsonObject.colinfos[i];

		var colInfo = new MiColInfo();
		colInfo.id = object["id"];
		if (object["size"] != undefined) colInfo.size = object["size"];
		if (object["type"] != undefined) colInfo.type = object["type"];
		if (object["summ"] != undefined) colInfo.sumMethod = object["summ"].toUpperCase();
		colInfo.index = i;

		this.colInfos[colInfo.id] = colInfo;
		this._colCount++;
	}

	for (var i = 0; i < jsonObject.records.length; i++){
		var object = jsonObject.records[i];

		var record = new MiRecord(this.colInfos);
		record._orignalIndex = i;

		for (var key in object){
			if( typeof(object[key]) == "function" ) continue;
			
			var key0 = (key.toUpperCase() == "ID$" ? key.substring(0, key.length -1) : key);
			
			for (var wKey in this.colInfos){
				if( typeof(this.colInfos[wKey]) == "function" ) continue;
				
				if (wKey.toUpperCase() == key0.toUpperCase()){
					if (this.colInfos[wKey].type == "Smallint"  || this.colInfos[wKey].type == "Integer"  || this.colInfos[wKey].type == "Int"){ 
						record.values[wKey]  = parseInt("" + object[key]);
					} else if (this.colInfos[wKey].type == "Float" || this.colInfos[wKey].type == "Money" || this.colInfos[wKey].type == "Decimal" || this.colInfos[wKey].type == "Currency"){  
						record.values[wKey]  = parseFloat("" + object[key]);
					} else {
						record.values[wKey] = object[key];
					}
					break;
				}
			}
		}
		this.records[i] = record;
		this.buffer[i] = record;
	}
}

//child Objects
/**
*     @description	미결
*     @param	{string}	id
*     @param	{number}	size
*     @param	{string}	type
*     @param	{object}	sumMethod
*     @return	{undefined}
*     @example	미결
*/
function MiColInfo(id, size, type, sumMethod){
	this.id =   (id == undefined ? 0 : id); 
	this.size = (size == undefined ? 256 : size); 
	this.type = (type == undefined ? "Char" : type); //   Smallint, Integer, Money, Float, Char : "STRING", "INT", "DECIMAL", "DATE", "BLOB", "URL", "LONGTEXT", "CHAR", "CURRENCY"
	this.sumMethod = (sumMethod == undefined ? "" : sumMethod.toUpperCase());  // "SUM", "AVG", "MIN", "COUNT", "MAX", "TEXT:소계"
	this._sumText = "";    // sumMethod의 뒷부분을 반복적으로 파싱 하지 않기 위한 임시필드, 그룹핑 단계에서 미리 분해 한다. 텍스트인 경우
	this._sumFormula = "";     // sumMethod의 뒷부분을 반복적으로 파싱 하지 않기 위한 임시필드, 그룹핑 단계에서 미리 분해 한다. 산식인 경우
	this._sumField = "";   // sumMethod의 뒷부분을 반복적으로 파싱 하지 않기 위한 임시필드, 그룹핑 단계에서 미리 분해 한다. 필드인 경우

	this._isGroupKeyField = false;
	this.index = 0;
	
	// 미리 컴파일된 _sumFormula 사용법 
	// 예: self[this.id + "_" + colId + "_sumFunction"](nRow);
	// 예: dslist_YM__sumFunction(nRow);

}

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
MiColInfo.prototype.defaultValue = function(){
	var value;

	if (this.type == "Char"){ 
		value = "";
	} else if (this.type == "Smallint" || this.type == "Integer" || this.type == "Int"){ 
		value = 0;
	} else if (this.type == "Float" || this.type == "Decimal"){ 
		value = 0;
	} else if (this.type == "Money" || this.type == "Currency"){ 
		value = 0;
	} else if (this.type == "Date"){ // yyyyMMddhhmmss
		var date = new Date();
		value = date.getFullYear().toString() + 
		pad2(date.getMonth() + 1) + 
		pad2( date.getDate()) + 
		pad2( date.getHours()) + 
		pad2( date.getMinutes()) + 
		pad2( date.getSeconds()); 

	} else if (this.type == "Url"){ 
		value = "";
	} else if (this.type == "Blob"){ 
		value = "";
	} else { 
		value = "";
	} 	

	return value;
};

/**
*     @description	미결
*     @param	{object}	colInfos
*     @return	{undefined}
*     @example	미결
*/
function MiRecord(colInfos){
	// 'Insert', 'Update', 'Delete', 'Logical', 'Normal' 중 하나의 값
	// 존재하지 않는 Record에 대한 RowType은 "Normal" 입니다.
	this._id = Math.floor(Math.random() * 10000000000) + 1; // 고유 식별코드로 내부에서 객체가 같은 것인지 비교 할때 사용됨
	this._$uid =""; // AUIGrid 줄객체의 고유 번호로 줄찾을때 사용한다 
	this.RowType = "Normal";  
	this._filterd = false;
	this._selected = false;
	this._orignalIndex = 0;   // 최초데이터에만 들어가는 인덱스 정보이다. 
	this._jsonGroupKeyValue = []; // 사용예 "A:B,C,D" 인 경우   [["AA","BB"],"CC","DD"]
	this._jsonPivotKeyValue = []; // 사용예 "A:B,C,D" 인 경우   [["AA","BB"],"CC","DD"]
	this.values = [];

	var i = 0;
	for (var key in colInfos){
		if( typeof(colInfos[key]) == "function" ) continue;
		this.values[key] = colInfos[key].defaultValue();
	}
	
	// 그루핑 레코드인 경우 
	this._RowLevel= 0;          // Dataset의 현재 선택된 Record의 Level 값,  RowType이 Logical이 아닌 경우에는 RowLevel 값은 0
	this.rangeStart = 0;
	this.rangeCount = 0;
	this.caption = "";
	
}

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
MiRecord.prototype.clear = function(){
	for(var key in this.values) {
		if( typeof(this.values[key]) != "function" ) delete this.values[key];
	}
	this.caption = "";

	return;
};

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
MiRecord.prototype.clone = function(){
	var toRecord   = new MiRecord(this.colInfos);
	toRecord._id = this._id;

	for (var key in this.values){
		if( typeof(this.values[key]) == "function" ) continue;
		toRecord.values[key] = this.values[key];
	}

	return toRecord;
	// 주의: 서용 후, RowType을 상황에 맞게 추가로 프로그램으로 조정해 주어야 한다
};

/**
 * @description	미결
 * @param	{string}	formula
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._UpdateFormula = function(formula){
	if (formula.trim().length == 0) return formula;
	
	var i = 0;
	var keyArray = []; 
	for (var key in this.colInfos){
		if( typeof(this.colInfos[key]) == "function" ) continue;
		keyArray[i++] = key;
	}	
	keyArray.sort(function(a,b){return a.length - b.length});

    formula = formula.replace(new RegExp("ROWLEVEL", "ig") , "#999999#");

	for (i = keyArray.length-1; i >= 0; i--){
		var colId = keyArray[i];
		formula = formula.replace(new RegExp(colId, "g") , "#" + i + "#");
		//formula = formula.replace(colId, "#" + i + "#");
	}
	
	formula = formula.replace(/currow/gi, this.id + ".Row");
	formula = formula.replace(/=/g, "==");
	formula = formula.replace(/====/g, "==");
	formula = formula.replace(/<>/g, "!=");
	///* 2016-03-25 수정 (차중훈) : 필터 산식에서 연산자 중 >= 와 <= 가 >==, <== 로 변환되는 부분 수정
	formula = formula.replace(/>==/g, ">=");
	formula = formula.replace(/<==/g, "<=");
	//*/ 2016-03-25 수정 (차중훈)
	
	for (i = 0; i < keyArray.length; i++){
		var colId = keyArray[i];
		formula = formula.replace(new RegExp( "#" + i + "#", "g"), this.id + ".getColumn(nRowNum, \"" + colId +"\")");
		//formula = formula.replace("#" + i + "#", this.id + ".getColumn(nRowNum, \"" + colId +"\")");
	}
	formula = formula.replace(new RegExp( "#999999#", "g"), "rowLevel");
	
	keyArray.clear();

	return formula;
};

/**
 * @description	미결
 * @param	{string}	formula
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._UpdateFormulaNF = function(formula){
	if (formula.trim().length == 0) return formula;
	
	var i = 0;
	var keyArray = []; 
	for (var key in this.colInfos){
		if( typeof(this.colInfos[key]) == "function" ) continue;
		keyArray[i++] = key;
	}	
	keyArray.sort(function(a,b){return a.length - b.length});

    formula = formula.replace(new RegExp("ROWLEVEL", "ig") , "#999999#");

	for (i = keyArray.length-1; i >= 0; i--){
		var colId = keyArray[i];
		formula = formula.replace(new RegExp(colId, "g") , "#" + i + "#");
		//formula = formula.replace(colId, "#" + i + "#");
		///* 2016-03-25 수정 (차중훈) : 산식의 데이터 셋 컬럼ID를 #1#, #2#, ... 문자열 전체 변환 수정
		//formula = eval("formula.replace(/" + colId + "/g, \"#\" + i + \"#\")");
		//*/ 2016-03-25 수정 (차중훈)
	}
	
	formula = formula.replace(/currow/gi, this.id + ".Row");
	formula = formula.replace(/=/g, "==");
	formula = formula.replace(/====/g, "==");
	formula = formula.replace(/<>/g, "!=");
	///* 2016-03-25 수정 (차중훈) : 필터 산식에서 연산자 중 >= 와 <= 가 >==, <== 로 변환되는 부분 수정
	formula = formula.replace(/>==/g, ">=");
	formula = formula.replace(/<==/g, "<=");
	//*/ 2016-03-25 수정 (차중훈)
	
	for (i = 0; i < keyArray.length; i++){
		var colId = keyArray[i];
		formula = formula.replace(new RegExp( "#" + i + "#", "g"), this.id + ".getColumnNF(nRowNum, \"" + colId +"\")");
		//formula = formula.replace("#" + i + "#", this.id + ".getColumnNF(nRowNum, \"" + colId +"\")");
		///* 2016-03-25 수정 (차중훈) : 산식의 #1#, #2#, ... 문자열 전체 변환 수정
		//formula = eval("formula.replace(/#" + i + "#/g, this.id + \".getColumnNF(nRowNum, \\\"\" + colId +\"\\\")\")");
		//*/ 2016-03-25 수정 (차중훈)
	}

	formula = formula.replace(new RegExp( "#999999#", "g"), "rowLevel");	

	keyArray.clear();

	return formula;
};


/**
 * @description	미결
 * @param	{string}	statement
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype._IsColumnName = function(statement){
	for (var key in this.colInfos){
		if( typeof(this.colInfos[key]) == "function" ) continue;
		if (statement == key){
			return true;
		}
	}	
	return false;
};
/**
 * @description	미결
 * @param	{string}	colId
 * @param	{string}	strValue
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._getRawValue = function(colId, strValue){
	var colInfo = this.colInfos[colId];

	var value;
	if (colInfo.type == "Smallint"  || colInfo.type == "Integer"  || colInfo.type == "Int"){ 
		value = (strValue == null || strValue == undefined || strValue.length == 0 ? 0 : parseInt(strValue));
	} else if (colInfo.type == "Float" || colInfo.type == "Money" || colInfo.type == "Decimal" || colInfo.type == "Currency"){  
		value = (strValue == null || strValue == undefined || strValue.length == 0 ? 0.0 : parseFloat(strValue));
	} else {
		if( typeof strValue == "undefined" || strValue == null ){
			value = "";
		} else{
			value = (((strValue + "").replace(/<BR>/gi, "\n")).replace(/<BR2>/gi, "\r")).replace(/<BS>/gi, "\\");
		}
	}
	return value;
};
/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
DataSet.prototype._remakeRecords = function(){
	// records 재구성 
	while(this.records.length > 0) {
		this.records.pop();
	}
	nRow = 0;
	for (var nRowNF = 0; nRowNF < this.buffer.length; nRowNF++){
		if (!this.buffer[nRowNF]._filterd){
			this.records[nRow++] = this.buffer[nRowNF];
		}
	}
	return;
};

//이벤트의 루핑을 막기 위한 장치   -----------------------------------------------------------------------
/**
 * @description	미결
 * @param	{string}	strAction
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype.__pushActionStack = function(strAction){
	this.__actionStack.push(strAction);
};
/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.__lastAction = function(){
	if (this.__actionStack.length == 0) return "";
	
	return this.__actionStack[this.__actionStack.length - 1];
};
/**
 * @description	미결
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype.__popActionStack = function(){
	this.__actionStack.pop();
};

//Bind 정보 객체와 함수  -----------------------------------------------------------------------------
/**
*     @description	미결
*     @param	{string}	datasetId
*     @param	{string}	colId
*     @param	{string}	controlType
*     @param	{string}	controlName
*     @param	{number}	colIndex
*     @return	{undefined}
*     @example	미결
*/
function BindInfo(datasetId, colId, controlType, controlName, colIndex){
	this.datasetId = datasetId;     // STR_MASTER
	this.colId = colId;             // STRNM
	
	this.controlType = controlType; // "ComboBox", "TextBox", ...
	this.controlName = controlName; // Sheet_1, ed_strnm
	this.colIndex = (colIndex == undefined ? 0 : colIndex);		// 
	
	this.colId_value = "";          // STRCD 추가정보로 별도설정한다
	this.disabled = false;
	
	// 멀티라인 에서만 사용
    this.sheetRowNum = 1;
    this.sheetColNum = this.colIndex;
}


/**
 * @description	미결
 * @param	{string}	strDataset
 * @return  {undefined}
 * @example	미결
 */
ControlBase.prototype.setBindDataset = function(strDataset){
    this.bindDataset = strDataset;
}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype.setBindDataset = function(strDataset){ this.bindDataset = strDataset; };
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype.setBindDataset = function(strDataset){ this.bindDataset = strDataset; };
if (typeof EasySheet == "function")
	EasySheet.prototype.setBindDataset = function(strDataset){ this.bindDataset = strDataset; };


/**
 * 콘트롤에서 관련된 데이터셋을 갱신한다 
 * 
 * setColumn(strColId)
 * setColumn(strColId, strColId_value)
 * setColumn(strColId, nColIndex)
 * 
 * @param  strColId        데이터의 값, 콤보, 리스트에서는 텍스트값과 연계된 데이터 칼럼명 
 * @param  strColId_value  콤보, 리스트에서 코드값과 연계된 데이터 칼럼명 
 * @param  nColIndex       시트에서의 칼럼번호  
 * @return                 없음
*/
ControlBase.prototype.setColumn = function(strColId, strColId_value){
	if (this.bindDataset.length == 0) {
		alert(getText("message_dataset_001", "bindDataSet 속성을 먼저 설정해야 합니다."));
		return ;
	}
	var nColIndex = (typeof strColId_value === "number" ? strColId_value : null);
	
	if (nColIndex == null){
		// 콘트롤에 속하는 dataBinds 에 해당 데이터 셋이 있눈지 확인한다. 
		// 없으면 세로운 바인드 정보를 만들어 추가한다.
		if (this.bindDataset in this.dataBinds){
			this.dataBinds[this.bindDataset].colId = strColId;
		} else {
			this.dataBinds[this.bindDataset] = new BindInfo(this.bindDataset, strColId, this.image, this.controlName);
		}
		if (strColId_value != undefined){
			this.dataBinds[this.bindDataset].colId_value = strColId_value;
		}
		
		// 데이터셋에 속하는 dataBinds 에 해당 데이터 셋이 있눈지 확인한다. 
		// 없으면 세로운 바인드 정보를 만들어 추가한다.
		if (this.controlName in dataSets[this.bindDataset].dataBinds){
			dataSets[this.bindDataset].dataBinds[this.controlName].colId = strColId;
		} else {
			dataSets[this.bindDataset].dataBinds[this.controlName] = new BindInfo(this.bindDataset, strColId, this.image, this.controlName);
		}
		if (strColId_value != undefined){
			dataSets[this.bindDataset].dataBinds[this.controlName].colId_value = strColId_value;
		}
		
	} else {
		if (this.bindDataset in this.dataBinds){
			this.dataBinds[this.bindDataset + "_" + nColIndex].colId = strColId;
		} else {
			this.dataBinds[this.bindDataset + "_" + nColIndex] = new BindInfo(this.bindDataset, strColId, this.image, this.controlName, nColIndex);
		}
		if (this.name in dataSets[this.bindDataset].dataBinds){
			dataSets[this.bindDataset].dataBinds[this.name + "_" + nColIndex].colId = strColId;
		} else {
			dataSets[this.bindDataset].dataBinds[this.name + "_" + nColIndex] = new BindInfo(this.bindDataset, strColId, this.image, this.controlName, nColIndex);
		}
	}
	
	

	dataSets[this.bindDataset].updateControlList();
}; 

/**
 * @description	미결
 * @param	{string}	strDataset
 * @return  {undefined}
 * @example	미결
 */
ControlBase.prototype.setInnerDataset = function(strDataset){
	this.innerDataset = strDataset;
}; 

/**
 * 콘트롤에서 관련된 데이터셋을 갱신한다 
 * 
 * setDataColumn(strColId)
 * setDataColumn(strColId, nColIndex)
 * 
 * @param  strColId        데이터의 값, 콤보, 리스트에서는 텍스트값과 연계된 데이터 칼럼명 
 * @param  nColIndex       시트에서의 칼럼번호  
 * @return                 없음
*/
ControlBase.prototype.setDataColumn = function(strColId, nColIndex){
	if (nColIndex == undefined){
		if (this.name in dataSets[this.innerDataset].innerBinds){
			dataSets[this.innerDataset].innerBinds[this.name].colId = strColId;
		} else {
			dataSets[this.innerDataset].innerBinds[this.name] = new BindInfo(this.innerDataset, strColId, this.image, this.name);
		}
	} else {
		if (this.name in dataSets[this.innerDataset].innerBinds){
			dataSets[this.innerDataset].innerBinds[this.name + "_" + nColIndex].colId = strColId;
		} else {
			dataSets[this.innerDataset].innerBinds[this.name + "_" + nColIndex] = new BindInfo(this.innerDataset, strColId, this.image, this.name, nColIndex);
		}
		
	}
	dataSets[this.innerDataset].updateControlList();

}; 
/**
 * @description	미결
 * @param	{string}	strColId
 * @param	{number}	nColIndex
 * @return  {undefined}
 * @example	미결
 */
ControlBase.prototype.setCodeColumn = function(strColId, nColIndex){
	if (nColIndex == undefined){
		if (this.name in dataSets[this.innerDataset].innerBinds){
			dataSets[this.innerDataset].innerBinds[this.name].colId_value = strColId;
		} else {
			dataSets[this.innerDataset].innerBinds[this.name] = new BindInfo(this.innerDataset, "", this.image, this.name);
			dataSets[this.innerDataset].innerBinds[this.name].colId_value = strColId;
		}
		
	} else {
		if (this.name in dataSets[this.innerDataset].innerBinds){
			dataSets[this.innerDataset].innerBinds[this.name + "_" + nColIndex].colId_value = strColId;
		} else {
			dataSets[this.innerDataset].innerBinds[this.name + "_" + nColIndex] = new BindInfo(this.innerDataset, "", this.image, this.name, nColIndex);
			dataSets[this.innerDataset].innerBinds[this.name + "_" + nColIndex].colId_value = strColId;
		}
		
	}
	dataSets[this.innerDataset].updateControlList();
}; 

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
ControlBase.prototype.getBindDataset = function(){return this.bindDataset};

/**
 * @description	미결
 * @param	{number}	nColIndex
 * @return  {string}
 * @example	미결
 */
ControlBase.prototype.getColumn = function(nColIndex){
	if (nColIndex != undefined){
		return this.dataBinds[this.bindDataset + "_" + nColIndex].colId;
	}
	return this.dataBinds[this.bindDataset].colId;
};

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
ControlBase.prototype.getInnerDataset = function(){return this.innerDataset;};

/**
 * @description	미결
 * @param	{string}	nColIndex
 * @return  {string}
 * @example	미결
 */
ControlBase.prototype.getCodeColumn = function(nColIndex){
	if (nColIndex != undefined){
		return dataSets[this.innerDataset].innerBinds[this.name + "_" + nColIndex].colId;
	}
	return dataSets[this.innerDataset].innerBinds[this.name].colId;
};

/**
 * @description	미결
 * @param	{string}	nColIndex
 * @return  {string}
 * @example	미결
 */
ControlBase.prototype.getDataColumn = function(nColIndex){
	if (nColIndex != undefined){
		return dataSets[this.innerDataset].innerBinds[this.name + "_" + nColIndex].colId_value;
	}
	return dataSets[this.innerDataset].innerBinds[this.name].colId_value;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.setBlocking = function(){
	var needBlocking = (this.getRowCount() == 0);
	if (this.inBlocking == needBlocking) return;
	
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType == "Sheet" || bindInfo.controlType == "lstSheet") continue;
		
		var control = controls[bindInfo.controlName];
		if (needBlocking){
			if (control.enabled){
				control.setEnabled(false);
				bindInfo.disabled = "true";
			}			
		} else {
			if (bindInfo.disabled =="true"){   // 데이터 셋이 Disable 시킨 경우만...
				control.setEnabled(true);
				bindInfo.disabled = "false";
			}
		}
	}
	
	this.inBlocking = needBlocking;
	
	return;
};

/**
 * @description	미결
 * @param	{string}	rowId
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.isAvailableRowId = function(rowId){
    if (rowId == undefined){
    	//alert("'isAvailableRowNum(\"줄ID\")'의 형태로 사용하세요.");
    	if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_005", "'isAvailableRowNum(\"줄ID\")'의 형태로 사용하세요."));
    	if(typeof console != "undefined" && typeof console.trace == "function")	console.trace();
    	return false;
    }
    
    var deleted = true;
	for (var nRow=0; nRow < this.records.length; nRow++){
		if (this.records[nRow]._$uid == rowId){
			deleted = false; 
			break;
		}
	}
    return !deleted;
};
/**
*     @description	미결
*     @param	{object}	control
*     @param	{string}	rowId
*     @return	{boolean}
*     @example	미결
*/
function _Common_isAvailableRowId(control, rowId){
    if (rowId == undefined){
    	//alert(getText("message_dataset_005", "'isAvailableRowNum(\"줄ID\")'의 형태로 사용하세요."));
    	if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_005", "'isAvailableRowNum(\"줄ID\")'의 형태로 사용하세요."));
    	if(typeof console != "undefined" && typeof console.trace == "function")	console.trace();
    	return false;
    }
    
    var deleted = true;
    
    if( (typeof AUIDataSheet == "function" && control instanceof AUIDataSheet)
    	|| (typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)
    ){
    	var nRowToCheck = -1;
    	
    	for (var nRow=0; nRow <control.maxRows; nRow++){  //nRow는 AUI 그리드의 줄번호 0부터 시작
    		if (rowId == AUIGrid.getItemByRowIndex(control.AUIcontrolId, nRow)._$uid) {
    			deleted = false; 
    			nRowToCheck = nRow;
    			break;
    		}
    	}
    	
    	if (control.softRemoveRowMode && !deleted){
    		if (control.isDeletedRow(nRowToCheck + 1)) deleted = true; 
    	}
    }
    else if( typeof EasySheet == "function" && control instanceof EasySheet ){
    	var datas = control.getData(); var data = null;
		var nMaxRow = control.maxRows; var nRow = 0;
		
		for(nRow=0; nRow < nMaxRow; nRow++, data = null){
			data = datas[nRow];
			
			if( rowId === data.__STATE__.rowId ) {
				deleted = false;
				data = null;
				break;
			}
		}
		
		datas.clear();
		datas = null;
    }
	
    return !deleted;
}

if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype.isAvailableRowId = function(rowId){ return _Common_isAvailableRowId(this, rowId);};
if (typeof AUIDataSheetM == "function")
	AUIDataSheetM.prototype.isAvailableRowId = function(rowId){ return _Common_isAvailableRowId(this, rowId);};

if( typeof EasySheet == "function" ){
	EasySheet.prototype.isAvailableRowId = function(rowId){ return _Common_isAvailableRowId(this, rowId);};
}

    /**
     * @description	미결
     * @param	{string}	uid
     * @return  {string}
     * @example	미결
     */
DataSet.prototype.getIndexOf_$uid = function(uid){
    	var nRowToGet = -1;
    	for (var nRow=0; nRow < this.records.length; nRow++){
    		if (this.records[nRow]._$uid == uid){
    			nRowToGet = nRow;
    			break;
    		}
    	}
    	return nRowToGet;
};
/**
 * @description	미결
 * @param	{string}	uid
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.rowTypeOf_$uid = function(uid){
	var nRow = this.getIndexOf_$uid(uid);
	return (nRow < 0 ? "" : this.records[nRow].RowType);
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.updateControlList = function(){
	// 연결된 피벗이 있는 경우 피벗을 갱신한다
	this.updatePivot();
	
	if (this._GroupKey.length > 0){
		return;
	}

	// 시트에서 줄 CLEAR 상태면 다시시트를 갱신하지 않음
	if (this.__lastAction() == "SHEET_CLEARED_ROW") return; 
	// 데이터 셋에서 줄 CLEAR 상태로 바꿈
	this.__pushActionStack("DATASET_REFRESHED_ROW");
	
	// 콘트롤 리스트 채우기
	for (var key in this.innerBinds){
		if( typeof(this.innerBinds[key]) == "function" ) continue;
		var bindInfo = this.innerBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if( bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1" ){
			var ctl = controls[bindInfo.controlName];
			ctl.clear();
			
			var recordLength = this.records.length;
			var optList = [];
			var optObj = null;
			for (var nRow=0; nRow < recordLength; nRow++){
				var record = this.records[nRow];
				
//				var text = ""; var value = "";
//				if (bindInfo.colId.trim().length != 0){
//					text = record.values[bindInfo.colId];
//				}
//				if (bindInfo.colId_value.trim().length != 0){
//					value = record.values[bindInfo.colId_value];
//				}
//				ctl.addItem(text, value, false);
				optObj = {"text" : "", "value" : ""};
				if (bindInfo.colId.trim().length != 0){
					optObj.text = record.values[bindInfo.colId];
				}
				if (bindInfo.colId_value.trim().length != 0){
					optObj.value = record.values[bindInfo.colId_value];
				}
				optList[nRow] = optObj;
				
				optObj = null;
			}
			
			ctl._updateLists( optList );
			
			optObj = null;
			while(optList.length > 0){
				optObj = optList.pop();
				optObj = null;
			}
			optList = null;
			
			ctl.passEvent = true;
			ctl.setValueToDefault();
			ctl.passEvent = false;
		}
		if (bindInfo.controlType == "OptionButton") {
			// 사상이 다르므로 보류 
		}
	}
	//if (this.getRowCount() == 0) return ;

	// 시트값 수정
	var tmpBinds = [];
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
	}
	
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		
		var sht = controls[controlName];
		var data = [];
		
		var tmBinds2 = []; var i = 0;
		for (var key in sht.dataBinds){
			var bindInfo = sht.dataBinds[key];
			if( typeof(bindInfo) == "function" ) continue;
			if (bindInfo.datasetId != this.id) continue;
			
			tmBinds2[i++] = bindInfo;
			
		}
		
		if( (typeof AUIDataSheet == "function" && sht instanceof AUIDataSheet)
			|| (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM)
		){
			if (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM){
				var ndx = 0;
				for (var nRow=0; nRow < this.records.length; nRow++){
					var record = this.records[nRow];
					for (var sheetRowNum = 1; sheetRowNum <= sht.rowsPerDataRow; sheetRowNum++){
						var subData = eval(sht.multilineHelper.defaultLayoutValue[sheetRowNum-1]);
						
						subData["f1"] = nRow + 1;   // 1부터 시작
						for (var j =0; j < tmBinds2.length; j++){
							var bindInfo = tmBinds2[j];
							if (bindInfo.sheetRowNum == sheetRowNum){
								subData["f" + bindInfo.sheetColNum] = record.values[bindInfo.colId];
							}
						}
						data[ndx++] = subData;
					}
				}
			} else {
				for (var nRow=0; nRow < this.records.length; nRow++){
					var record = this.records[nRow];
					var subData = JSON.parse( JSON.stringify(sht.defaultLayoutValue_JSON) );
					for (var j =0; j < tmBinds2.length; j++){
						var bindInfo = tmBinds2[j];
						subData["f" + bindInfo.colIndex] = record.values[bindInfo.colId];
					}
					data[nRow] = subData;
				}
			}
			
//			sht.clear();
			AUIGrid.forceEditingComplete(sht.AUIcontrolId, null, false);
			AUIGrid.setGridData(sht.AUIcontrolId, []);
			sht.currentRow = 1;
			sht.currentCol = 0;
			sht.maxRows = data.length;
			sht.setData(data, false);
			
			if (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM){
				if (!sht.isHiddenColumn(1)) sht.setFixedColumnCount(1);
			}
			
			if ((typeof AUIDataSheet == "function" && sht instanceof AUIDataSheet) ||
					(typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM)){
				for (var nRow=0; nRow < this.records.length; nRow++){ //nRow는 AUI 그리드의 줄번호 0부터 시작
					this.records[nRow]._$uid = AUIGrid.getItemByRowIndex(sht.AUIcontrolId, nRow * sht.rowsPerDataRow)._$uid;
				}
			}
			
			AUIGrid.update(sht.AUIcontrolId);
		}
		else if( typeof EasySheet == "function" && sht instanceof EasySheet ){
			var columnInfoList = sht.columns;
			var columnInfo = null;
			var fields = [];
			var defaultRow = {};
			var colCount = 0;
			var i = 0;
			
			for(i = 0, colCount = sht.maxCols; i < colCount; i++){
				columnInfo = columnInfoList[i];
				defaultRow[columnInfo.colId] = (typeof columnInfo.defaultValue == "function") ? columnInfo.defaultValue() : columnInfo.defaultValue;
				fields[i] = {field: columnInfo.colId};
			}
			
			var record = null;
			var subData = null;
			var j = 0;
			
			for(i = 0, colCount = tmBinds2.length, recordCount = this.records.length; i < recordCount; i++){
				record = this.records[i];
				subData = JSON.parse(JSON.stringify(defaultRow));
				
				for(j = 0; j < colCount; j++, bindInfo = null){
					var bindInfo = tmBinds2[j];
					subData[columnInfoList[bindInfo.colIndex].colId] = record.values[bindInfo.colId];
				}
				
				subData["__STATE__"] =	{"updateGu" : (record.RowType == "Insert" ? "I" : 
														(record.RowType == "Update" ? "U" : 
														(record.RowType == "Delete" ? "D" : 
														(record.RowType == "Normal" ? "N" : "X"
										))))};
				
				data[i] = subData;
				
				subData = null; record = null;
			}
			
			sht.completeEditing();
			sht.maxRows = data.length;
			sht.setData({fieldList: fields, recordList: data, rowCount: sht.maxRows}, false);
			
			for(i = 0, recordCount = this.records.length; i < recordCount; i++){
				this.records[i]._$uid = sht.rows(i).rowId;
			}
			
			sht.refreshColumns();
		}
	}
	
	tmpBinds.clear();
	
	// 데이터 리스트값 수정
	tmpBinds = [];
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;

		if (bindInfo.controlType != "List1") continue;
		var ctl = controls[bindInfo.controlName];
		if (ctl.listSaveType != LISTBOX_SAVE_MULTI) continue;
		if (ctl.listType != LISTBOX_TYPE_DATASELECT) continue;
		
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
		
		
	}
	
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		
		var ctl = controls[controlName];
		ctl.clear(false);
		
		for (var key in ctl.dataBinds){
			var bindInfo = ctl.dataBinds[key];
			if( typeof(bindInfo) == "function" ) continue;
			if (bindInfo.datasetId != this.id) continue;
			
			for (var nRow=0; nRow < this.records.length; nRow++){
				var record = this.records[nRow];
				
				var text = ""; var value = "";
				if (bindInfo.colId.trim().length != 0){
					text = record.values[bindInfo.colId];
				}
				if (bindInfo.colId_value.trim().length != 0){
					value = record.values[bindInfo.colId_value];
				}
				ctl.addItem(text, value, false);
			}
		}
	}
	
	// 데이터 셋에서 줄 CLEAR 상태로 지움
	this.__popActionStack();
	
	return;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.updatePivot = function(){
    for (var key in dataSets){
		var dataset = dataSets[key];
		if( typeof(dataset) == "function" ) continue;
		
		if (dataset._DataObject != null && dataset._DataObject.records.length > 0){
			if (dataset._DataObject === this) dataset._refreshPivot();
		}
    }
    return;
}

/**
*     @description	미결
*     @param	{object}	control
*     @param	{object}	arrJsonObject
*     @return	{number}
*     @example	미결
*/
function _Common_UpdateDatasetList(control, arrJsonObjects){ 
	
	if (control.dataBinds == null || getAssociativeArrayLength(control.dataBinds) == 0) return;
	
	var dataset = null;
	
	var tmpBinds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		if (bindInfo.controlName == control.controlName) {
			if (dataset == null) {
				dataset = dataSets[bindInfo.datasetId];
			}
			tmpBinds["f" + bindInfo.colIndex] = bindInfo.colId;			
		}
	}
	
	// 논리 레코드 메모
	var logicalIds = []; var ndx = 0;
    for (var nRowNF = 0; nRowNF < dataset.buffer.length; nRowNF++){
    	if (dataset.buffer[nRowNF].RowType == "Logical"){
    		logicalIds[ndx++] = dataset.buffer[nRowNF]._$uid;
    	}
    }
	
	// 기존 정보 클리어
	while(dataset.records.length > 0) {
		dataset.records.pop();
	}
	if (dataset.buffer.length > 0){
		for(var i = dataset.buffer.length - 1; i >= 0 ; i--) {
			dataset.buffer[i].clear();
			dataset.buffer.pop();
		}
	}
	if (dataset.OriginBuffer.length > 0){
		for(var i = dataset.OriginBuffer.length - 1; i >= 0 ; i--) {
			dataset.OriginBuffer[i].clear();
			dataset.OriginBuffer.pop();
		}
	}
    
	var nRowNF = 0; var cnt = 0;
	if (typeof arrJsonObjects == "undefined"){
		arrJsonObjects = AUIGrid.getGridData(control.AUIcontrolId);
	}
	for (var i=0; i < arrJsonObjects.length; i++){
		var jsonObject = arrJsonObjects[i];
		
		var uid = jsonObject._$uid;
		
		// 논리 레코드 제외 
		if (logicalIds.indexOf(uid) >= 0) continue;
		
		// 삭제된 레코드 제외 
		if (AUIGrid.isRemovedById(control.AUIcontrolId, uid)) continue;

		var record = new MiRecord(dataset.colInfos);
		record._orignalIndex = nRowNF;

		record._$uid = uid;
		dataset.buffer[nRowNF]  = record;
		dataset.records[nRowNF] = record;

		for (var key in tmpBinds){
			var colId = tmpBinds[key];  // key: f1, f2, ...
			if( typeof(tmpBinds[key]) == "function" ) continue;
			
			if(key in jsonObject){
				record.values[colId] =  jsonObject[key];	
			}
		}
		
		nRowNF++; cnt++;
	}
	
	tmpBinds.clear();
	
	// Row Position의 값은 0 이 됩니다.
	dataset.Row = 0; 

	dataset.filter(dataset.FilterExpr);

	// 그룹정보 갱신 
	if (dataset._GroupKey.length > 0){
		dataset._ResetGroup();
	}
	
	// 그룹레코드의 uid 세팅
    for (var nRow = 0; nRow < dataset.records.length; nRow++){ //nRow는 데이타셋의 줄번호 0부터 시작
    	if (dataset.records[nRow].RowType == "Logical"){
    		var uid = (AUIGrid.getItemByRowIndex(control.AUIcontrolId, nRow * control.rowsPerDataRow))._$uid;
    		dataset.records[nRow]._$uid = uid;
    	}
    }

    // Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 0 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (dataset.hasLoadCompletedEvent) {
		dataset.fncLoadCompletedEvent(dataset, nErrorCode, strErrorMsg, 0);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return 0;
		}            
	} 
	
	// 그룹정보 갱신 
	if (dataset._GroupKey.length > 0){
		dataset._refreshGroupCation(true);
	}
	
	return cnt;
};

if (typeof AUIDataSheet == "function"){
    AUIDataSheet.prototype._UpdateDatasetList = function(arrJsonObjects){ 
		return _Common_UpdateDatasetList(this, arrJsonObjects);
    }
}
if (typeof AUIDataSheetM == "function"){
    AUIDataSheetM.prototype._UpdateDatasetList = function(arrJsonObjects){ 
		return _Common_UpdateDatasetList(this, arrJsonObjects);
    }
}

if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDatasetList = function(arrJsonObjects){ 
		if( this.dataBinds == null || getAssociativeArrayLength(this.dataBinds) == 0 )
			return;
		
		var columns = this.columns;
		var dataset = null;
		var tmpBinds = [];
		for(var key in this.dataBinds){
			var bindInfo = this.dataBinds[key];
			if( typeof(bindInfo) == "function" ) continue;
			if( bindInfo.controlName == this.controlName ){
				if( dataset == null )
					dataset = dataSets[bindInfo.datasetId];
				
//				tmpBinds["f" + bindInfo.colIndex] = bindInfo.colId;
				tmpBinds[columns[bindInfo.colIndex].colId] = bindInfo.colId;
			}
		}
		
		//메모리 해제
		columns = null;
		
		// 논리 레코드 메모
		var logicalIds = [];
		var ndx = 0;
		for(var nRowNF = 0; nRowNF < dataset.buffer.length; nRowNF++){
			if( dataset.buffer[nRowNF].RowType == "Logical" )
				logicalIds[ndx++] = dataset.buffer[nRowNF]._$uid;
		}
		
		// 기존 정보 클리어
		while(dataset.records.length > 0){
			dataset.records.pop();
		}
		if( dataset.buffer.length > 0 ){
			for(var i = dataset.buffer.length - 1; i >= 0 ; i--) {
				dataset.buffer[i].clear();
				dataset.buffer.pop();
			}
		}
		if( dataset.OriginBuffer.length > 0 ){
			for(var i = dataset.OriginBuffer.length - 1; i >= 0 ; i--) {
				dataset.OriginBuffer[i].clear();
				dataset.OriginBuffer.pop();
			}
		}
		
		var updateItems = {"I":"Insert", "U":"Update", "D":"Delete"};
		var nRowNF = 0;
		var cnt = 0;
		if( typeof arrJsonObjects == "undefined" ){
			arrJsonObjects = this.getData();
		}
		for(var i=0; i < arrJsonObjects.length; i++){
			var jsonObject = arrJsonObjects[i];
			var uid = jsonObject.__STATE__.rowId;
			var updateGu = jsonObject.__STATE__.updateGu;
			var rowType = updateItems[updateGu];
			
			// 논리 레코드 제외 
			if (logicalIds.indexOf(uid) >= 0) continue;
			
			var record = new MiRecord(dataset.colInfos);
			record._orignalIndex = nRowNF;
			
			record._$uid = uid;
			if( typeof rowType != "undefined" ) record.rowType = rowType;
			dataset.buffer[nRowNF]  = record;
			dataset.records[nRowNF] = record;
			
			for (var key in tmpBinds){
				var colId = tmpBinds[key];  // key: f1, f2, ...
				
				if( typeof(tmpBinds[key]) == "function" ) continue;
				
				if(key in jsonObject){
					record.values[colId] =  jsonObject[key];	
				}
			}
			
			nRowNF++; cnt++;
		}
		
		updateItems = null;
		
		tmpBinds.clear();
		
		// Row Position의 값은 0 이 됩니다.
		dataset.Row = 0; 

		dataset.filter(dataset.FilterExpr);
		
		// 그룹정보 갱신 
		if (dataset._GroupKey.length > 0){
			dataset._ResetGroup();
		}
		
		// 그룹레코드의 uid 세팅
		for (var nRow = 0; nRow < dataset.records.length; nRow++){ //nRow는 데이타셋의 줄번호 0부터 시작
			if (dataset.records[nRow].RowType == "Logical"){
//				var uid = (AUIGrid.getItemByRowIndex(control.AUIcontrolId, nRow * control.rowsPerDataRow))._$uid;
				var uid = this.rows(nRow).rowId;
				dataset.records[nRow]._$uid = uid;
			}
		}
		
		// Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
		// OnLoadCompleted Event의 nReason 값은 0 입니다.
		var nErrorCode = [];
		var strErrorMsg = [];
		if (dataset.hasLoadCompletedEvent) {
			dataset.fncLoadCompletedEvent(dataset, nErrorCode, strErrorMsg, 0);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
			if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
				alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
				return 0;
			}            
		} 
		
		// 그룹정보 갱신 
		if (dataset._GroupKey.length > 0){
			dataset._refreshGroupCation(true);
		}
		
		return cnt;
	};
}

if (typeof ListBoxW == "function"){
	ListBoxW.prototype._UpdateDatasetList = function(arrJsonObjects){ 
		if (this.listSaveType == LISTBOX_SAVE_MULTI  && 
				this.listType == LISTBOX_TYPE_DATASELECT){
			return _ListBox_UpdateDatasetList(this, arrJsonObjects);
		} else {
			return _Common_UpdateDatasetList(this, arrJsonObjects);
		}
	}
}

/**
*     @description	미결
*     @param	{object}	control
*     @return	{object}
*     @example	미결
*/
function _ListBox_UpdateDatasetList(control){ 
	
	if (control.dataBinds == null || getAssociativeArrayLength(control.dataBinds) == 0) return;
	
	var dataset = dataSets[this.bindDataset];
	
	// 기존 정보 클리어
	while(dataset.records.length > 0) {
		dataset.records.pop();
	}
	if (dataset.buffer.length > 0){
		for(var i = dataset.buffer.length - 1; i >= 0 ; i--) {
			dataset.buffer[i].clear();
			dataset.buffer.pop();
		}
	}
	if (dataset.OriginBuffer.length > 0){
		for(var i = dataset.OriginBuffer.length - 1; i >= 0 ; i--) {
			dataset.OriginBuffer[i].clear();
			dataset.OriginBuffer.pop();
		}
	}
	
	// 리스트값 -> 데이터셋
	var nRowNF = 0;
	for (var i=0; i < control.options.length; i++){
		var item = control.options.items[i];
		
		nRowNF = i;
		
		var record = new MiRecord(dataset.colInfos);
		record._orignalIndex = nRowNF;

		dataset.buffer[nRowNF]  = record;
		dataset.records[nRowNF] = record;
		
		for (var key in control.dataBinds){
			var bindInfo = control.dataBinds[key];
			if( typeof(bindInfo) == "function" ) continue;
			
			if (bindInfo.colId.trim().length != 0){
				record.values[bindInfo.colId] =  item.text;	
			}
			if (bindInfo.colId_value.trim().length != 0){
				record.values[bindInfo.colId_value] =  item.value;	
			}
		}
	}
	
	// Row Position의 값은 0 이 됩니다.
	dataset.Row = 0; 

    // Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 0 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (dataset.hasLoadCompletedEvent) {
		dataset.fncLoadCompletedEvent(dataset, nErrorCode, strErrorMsg, 0);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return 0;
		}            
	} 
	
	return cnt;
};

/**
 * @description	미결
 * @param	{string}	colId
 * @param	{number}	nRow
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.updateControlValue = function(colId, nRow){
	if (this.getRowCount() == 0) return ;
	
	nRow = (nRow == undefined ? this.Row : nRow);

	// 시트값 수정	
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof bindInfo == "function" ){ bindInfo = null; key = null; continue; }
		if( bindInfo.colId == null ){ bindInfo = null; key = null; continue; }
		if( bindInfo.colId != colId ){ bindInfo = null; key = null; continue; }
		if( bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet" ){ bindInfo = null; key = null; continue; }
		
		var record = this.records[nRow];
		var sht = controls[bindInfo.controlName];
		//sht.setValue(sht.getLookingRowNum(nRow + 1), bindInfo.colIndex, record.values[bindInfo.colId])
		sht.setValue(sht.getLookingRowNum(record._$uid), bindInfo.colIndex, record.values[bindInfo.colId], false);
		//메모리 해제
		sht = null; record = null; bindInfo = null; key = null;
	}
	
	// 데이터 리스트값 수정
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;

		if (bindInfo.controlType != "List1") continue;
		var ctl = controls[bindInfo.controlName];
		if (ctl.listSaveType != LISTBOX_SAVE_MULTI) continue;
		if (ctl.listType != LISTBOX_TYPE_DATASELECT) continue;
		
		if (bindInfo.colId != colId &&  bindInfo.colId_value != colId) continue;
		
		var record = this.records[nRow];
		
		if (bindInfo.colId.trim().length != 0){
			var text = record.values[bindInfo.colId];
			ctl.setText(text, false);
		}
		if (bindInfo.colId_value.trim().length != 0){
			var value = record.values[bindInfo.colId_value];
			ctl.setValue(value, false);
		}
	}
	
	// 콤보 리스트 채우기값 수정 
	for (var key in this.innerBinds){
		var bindInfo = this.innerBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1") {
			var record = this.records[nRow];
			var wOption = null;
			
			if (this.listSaveType == LISTBOX_SAVE_MULTI  && 
					this.listType == LISTBOX_TYPE_DATASELECT){
				wOption =  controls[bindInfo.controlName].tagObject.options.items[nRow];
			} else {
				wOption =  controls[bindInfo.controlName].tagObject.options[nRow];
			}
			
			if (bindInfo.colId == colId) {
			    wOption.text = record.values[colId];
			} else if (bindInfo.colId_value == colId) {
			    wOption.value = record.values[colId];
			}
		}
		if (bindInfo.controlType == "OptionButton") {
			// 사상이 다르므로 보류 
		}
	}

	// 콘트롤 값 수정
	if (this.Row != nRow) return; // 현재 포커스된 줄번호가 아니면 콘트롤을 갱신할 수 없다(무한루프 위험)
	
	var record = this.records[nRow];
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;

		if (bindInfo.colId != colId && bindInfo.colId_value != colId) continue;
		
		var ctl = controls[bindInfo.controlName];
		ctl.passEvent = true;
		if (bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1") {
			if ((ctl.listSaveType == LISTBOX_SAVE_MULTI  && ctl.listType == LISTBOX_TYPE_DATASELECT)) continue;
			
			if (bindInfo.colId.length > 0 && bindInfo.colId == colId){
				ctl.setText(record.values[bindInfo.colId]);
			} else {
				ctl.setValue(record.values[bindInfo.colId_value]);
			}
		} else if (bindInfo.controlType == "TextBox" || 
				   bindInfo.controlType == "CheckBox" || 
				   bindInfo.controlType == "Link" || 
				   bindInfo.controlType == "IFrame" || 
				   bindInfo.controlType == "ProgressBar1") {
			ctl.setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "OptionBox") {
			//ctl.setValue(ctl.matchUpValue == record.values[bindInfo.colId] ? 1 : 0);
			controls[ctl.optionGroupName + ""].setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "Label" ) {
			ctl.setCaption(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "PictureBox" ) {
			ctl.setPicture(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "WebEdit" ) {
			ctl.setHTML(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "FlashPlayer" ) {
			ctl.flashUrl = record.values[bindInfo.colId]; 
			ctl.callMovie();
		} else if (bindInfo.controlType == "Sheet" ) {
		} else if (bindInfo.controlType == "lstSheet" ) {
		} else {
			ctl.setValue(record.values[bindInfo.colId]);
		}
		ctl.passEvent = false;
	}
	
    return;
};

/**
 * 콘트롤값 변경시 Dataset에 Column값을 갱신하는 Method
 *
 * _UpdateDataset()
 * _UpdateDataset(nRow, nCol);
 * 
 * @param  nRow  시트인 경우 줄번호 (콘트롤의 경우는 생략) : 1부터 시작된다
 * @param  nCol  시트인 경우 칼럼번호 (콘트롤의 경우는 생략): 1부터 시작된다
 * 
 * @return            (boolean) 성공여부
 */

function _Common_UpdateDataset(control, nRow, nCol){
	var wReturn = true;
	var key = null; var bindInfo = null;
	var ctl = null; var controlType = null;
	var dataset = null; var record = null;
	
	for(key in control.dataBinds){
		bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ){ bindInfo = null; key = null; continue; }
		ctl = controls[bindInfo.controlName];
		controlType = bindInfo.controlType;

        dataset = dataSets[bindInfo.datasetId];
        if( dataset.getRowCount() == 0 ){ dataset = null; controlType = null; ctl = null; bindInfo = null; key = null; continue; }
		record = dataset.records[dataset.Row];
		
		if( controlType == "ComboBox" || controlType == "List1" ){
			if( (ctl.listSaveType == LISTBOX_SAVE_MULTI  && ctl.listType == LISTBOX_TYPE_DATASELECT) ){
				record = null; dataset = null; controlType = null; ctl = null; bindInfo = null; key = null;
				continue;
			}
			if( bindInfo.colId.length > 0 ){
				wReturn = dataset.setColumn(dataset.Row, bindInfo.colId, ctl.text);
			} 
			if( bindInfo.colId_value.length > 0 ){
				wReturn = dataset.setColumn(dataset.Row, bindInfo.colId_value, ctl.value);
			}
		} else if( controlType == "TextBox" || 
				   controlType == "CheckBox" || 
				   controlType == "Link" || 
				   controlType == "IFrame" || 
				   controlType == "ProgressBar1" ||
				   controlType == "Label" ){
			wReturn = dataset.setColumn(dataset.Row, bindInfo.colId, ctl.value);
		} else if( controlType == "OptionBox" ){
			wReturn = dataset.setColumn(dataset.Row, bindInfo.colId, controls[ctl.optionGroupName].getValue());
		} else if( controlType == "PictureBox" ){
			wReturn = dataset.setColumn(dataset.Row, bindInfo.colId, ctl.tagObject.getElementsByTagName("IMG")[0].src);
		} else if( controlType == "WebEdit" ){
			wReturn = dataset.setColumn(dataset.Row, bindInfo.colId, ctl.value);
		} else if( controlType == "FlashPlayer" ){
			wReturn = dataset.setColumn(dataset.Row, bindInfo.colId, ctl.flashUrl);
		} else if( controlType == "Sheet" ){
		} else if( controlType == "lstSheet" ){
		} else {
			wReturn = dataset.setColumn(dataset.Row, bindInfo.colId, ctl.value);
		}
		
		record = null; dataset = null;
		controlType = null; ctl = null; bindInfo = null; key = null;
		
		if( !wReturn ) break;
	}
	
	var sht = null;
	var nRowTo = -1;
	
	// 시트값 수정	
	if( (typeof AUIDataSheet == "function" && control instanceof AUIDataSheet)
		|| (typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)
	){
		for(key in control.dataBinds){
			bindInfo = control.dataBinds[key];
			if( typeof bindInfo == "function" ){ bindInfo = null; key = null; continue; }
			if( bindInfo.colId == null ){ bindInfo = null; key = null; continue; }
			if( bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet" ){ bindInfo = null; key = null; continue; }
			if( bindInfo.colIndex != nCol ){ bindInfo = null; key = null; continue; }
			
			dataset = dataSets[bindInfo.datasetId];
			sht = controls[bindInfo.controlName];
			nRowTo = -1;
			
			if( typeof nRow == "string" )
				nRowTo = dataset.getIndexOf_$uid(nRow);
			else
				nRowTo = dataset.getIndexOf_$uid(AUIGrid.getItemByRowIndex(sht.AUIcontrolId, (nRow - 1) * sht.rowsPerDataRow)._$uid);
			
			wReturn = dataset.setColumn(nRowTo, bindInfo.colId, sht.getValue(sht.getLookingRowNum(nRow), nCol));
			
			sht = null; dataset = null; bindInfo = null; key = null;
		}
	}
	else if( typeof EasySheet == "function" && control instanceof EasySheet ){
		for(key in control.dataBinds){
			bindInfo = control.dataBinds[key];
			if( typeof bindInfo == "function" ){ bindInfo = null; key = null; continue; }
			if( bindInfo.colId == null ){ bindInfo = null; key = null; continue; }
			if( bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet" ){ bindInfo = null; key = null; continue; }
			if( bindInfo.colIndex != nCol ){ bindInfo = null; key = null; continue; }
			
			dataset = dataSets[bindInfo.datasetId];
			sht = controls[bindInfo.controlName];
			nRowTo = -1;
			
			if( typeof nRow == "string" )
				nRowTo = dataset.getIndexOf_$uid(nRow);
			else
				nRowTo = dataset.getIndexOf_$uid(sht.rows(nRow).rowId);
			
			wReturn = dataset.setColumn(nRowTo, bindInfo.colId, sht.getValue(sht.getLookingRowNum(nRow), nCol));
			
			sht = null; dataset = null; bindInfo = null; key = null;
		}
	}
	
	// 데이터 리스트값 수정
	if( typeof ListBoxW == "function" && control instanceof ListBoxW ){
		for(key in control.dataBinds){
			bindInfo = control.dataBinds[key];
			if( typeof bindInfo == "function" ){ bindInfo = null; key = null; continue; }
			if( bindInfo.controlType != "List1" ){ bindInfo = null; key = null; continue; }
			if( control.listSaveType != LISTBOX_SAVE_MULTI ){ bindInfo = null; key = null; continue; }
			if( control.listType != LISTBOX_TYPE_DATASELECT ){ bindInfo = null; key = null; continue; }
			
			dataset = dataSets[bindInfo.datasetId];
			record = dataset.records[nRow - 1];
			
			if( bindInfo.colId.trim().length != 0 ){
				record.values[bindInfo.colId] = ctl.options.items[nRow - 1].text;	
			}
			if( bindInfo.colId_value.trim().length != 0 ){
				record.values[bindInfo.colId_value] = ctl.options.items[nRow - 1].value;	
			}
			
			record = null; dataset = null; bindInfo = null; key = null;
		}
	}
	
	return wReturn;
}

/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	nCol
 * @return  {object}
 * @example	미결
 */
ControlBase.prototype._UpdateDataset      = function(nRow, nCol){ return _Common_UpdateDataset(this, nRow, nCol);}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateDataset = function(nRow, nCol){ return _Common_UpdateDataset(this, nRow, nCol);};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype._UpdateDataset = function(nRow, nCol){ return _Common_UpdateDataset(this, nRow, nCol);};
    
if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDataset = function(nRow, nCol){ return _Common_UpdateDataset(this, nRow, nCol);};
}
    
/**
 *     @description	미결
 *     @param	{object}	control
 *     @param	{number}	nRow
 *     @param	{number}	nCol
 *     @param	{string}	oldValue
 *     @param	{string}	newValue
 *     @return	{boolean}
 *     @example	미결
 */
function _Common_UpdateCheckDataset(control, nRow, nCol, oldValue, newValue){ 
	for (var key in control.dataBinds){
		
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		var ctl = controls[bindInfo.controlName];

        var dataset = dataSets[bindInfo.datasetId];
        if(dataset.getRowCount() == 0) continue;
		var record = dataset.records[dataset.Row];
		
		if (bindInfo.controlType == "Sheet" ) {
		} else if (bindInfo.controlType == "lstSheet" ) {
		} else if (bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1") {
			if (bindInfo.colId.length > 0){
				return dataset.checkCanColumnChange(dataset.Row, bindInfo.colId, oldValue, newValue)
			} 
			if (bindInfo.colId_value.length > 0){
				return dataset.checkCanColumnChange(dataset.Row, bindInfo.colId_value, oldValue, newValue)
			}
		} else {
			return dataset.checkCanColumnChange(dataset.Row, bindInfo.colId, oldValue, newValue)
		}
	}
	
	// 시트값 수정	
	if ((typeof AUIDataSheet == "function" && control instanceof AUIDataSheet) || 
		(typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)){
		for (var key in control.dataBinds){
			var bindInfo = control.dataBinds[key];
			if( typeof(bindInfo) == "function" ) continue;

			if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet")  continue;
			if (bindInfo.colIndex != nCol) continue;
			
			var dataset = dataSets[bindInfo.datasetId];
			var sht = control;
			
			var nRowTo =  -1;
			if (typeof nRow == "string"){
				nRowTo = dataset.getIndexOf_$uid(nRow);
			}
			else {
				nRowTo = dataset.getIndexOf_$uid(AUIGrid.getItemByRowIndex(sht.AUIcontrolId, (nRow - 1) * sht.rowsPerDataRow)._$uid);
			}
			
			return dataset.checkCanColumnChange(nRowTo, bindInfo.colId, oldValue, newValue);
		}
	}
	else if( typeof EasySheet == "function" && control instanceof EasySheet ){
		var key = null;
		var bindInfo = null;
		var dataset = null;
		var colId = null;
		var nRowTo = -1;
		var result = null;
		
		for(key in control.dataBinds){
			bindInfo = control.dataBinds[key];
			
			if( typeof bindInfo == "function" ) continue;
			if( bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet" ) continue;
			if( bindInfo.colIndex != nCol ) continue;
			
			colId = bindInfo.colId;
			nRowTo = -1;
			dataset = dataSets[bindInfo.datasetId];
			
			if( typeof nRow == "string" )
				nRowTo = dataset.getIndexOf_$uid(nRow);
			else
				nRowTo = dataset.getIndexOf_$uid(control.rows(nRow).rowId);
			
			result = dataset.checkCanColumnChange(nRowTo, colId, oldValue, newValue);
			
			dataset = null;
			colId = null;
			bindInfo = null;
			key = null;
			
			return result;
		}
	}
	
	return true;
	
}
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	nCol
 * @param	{string}	oldValue
 * @param	{string}	newValue
 * @return  {object}
 * @example	미결
 */
ControlBase.prototype._UpdateCheckDataset      = function(nRow, nCol, oldValue, newValue){ return _Common_UpdateCheckDataset(this, nRow, nCol, oldValue, newValue);}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateCheckDataset = function(nRow, nCol, oldValue, newValue){ return _Common_UpdateCheckDataset(this, nRow, nCol, oldValue, newValue);};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype._UpdateCheckDataset = function(nRow, nCol, oldValue, newValue){ return _Common_UpdateCheckDataset(this, nRow, nCol, oldValue, newValue);};

if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateCheckDataset = function(nRow, nCol, oldValue, newValue){ return _Common_UpdateCheckDataset(this, nRow, nCol, oldValue, newValue);};
}
    
    
// 사용방법  ...updateControlRowData(레코드번호) 또는 ...updateControlRowData(레코드)
/**
 * @description	미결
 * @param	{number}	varRow
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.updateControlRowData = function(varRow){
	if (this.getRowCount() == 0) return ;
	if (varRow == undefined){ varRow = this.Row;} 

	var nRow = 0, shtRowId = "";  // nRow: 0부터 시작 
	if (typeof(varRow) != "number" ){
		record = varRow;
		shtRowId = record._$uid;
		nRow = this.getIndexOf_$uid(shtRowId);
	} else {
		nRow = varRow;
		record = this.records[nRow];
	}
	
	// 시트값 수정	
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof bindInfo == "function" ){ bindInfo = null; key = null; continue; }
		if( bindInfo.colId == null ){ bindInfo = null; key = null; continue; }
		if( bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet" ){ bindInfo = null; key = null; continue; }
		
		var sht = controls[bindInfo.controlName];
		var value = record.values[bindInfo.colId];
		if ( typeof value != "undefined" && value != null ){
			if (shtRowId.length > 0){
//				sht.setValue(sht.getLookingRowNum(shtRowId), bindInfo.colIndex, record.values[bindInfo.colId], false);
				sht.setValue(sht.getLookingRowNum(shtRowId), bindInfo.colIndex, value, false);
			} else {
				nRow = nRow + (typeof EasySheet != "undefined" && sht instanceof EasySheet ? sht.startRowColNum : 1);
//				sht.setValue(sht.getLookingRowNum(nRow), bindInfo.colIndex, record.values[bindInfo.colId], false);
				sht.setValue(sht.getLookingRowNum(nRow), bindInfo.colIndex, value, false);
			}
		}
		//메모리 해제
		value = null; sht = null; bindInfo = null; key = null;
	}
	
	// 데이터 리스트값 수정
	var record = this.records[nRow];
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;

		if (bindInfo.controlType != "List1") continue;
		var ctl = controls[bindInfo.controlName];
		if (ctl.listSaveType != LISTBOX_SAVE_MULTI) continue;
		if (ctl.listType != LISTBOX_TYPE_DATASELECT) continue;
		
		if (bindInfo.colId.trim().length != 0){
			var text = record.values[bindInfo.colId];
			ctl.setText(text, false);
		}
		if (bindInfo.colId_value.trim().length != 0){
			var value = record.values[bindInfo.colId_value];
			ctl.setValue(value, false);
		}
	}
	
	// 콘트롤 값 수정
	if (this.Row != nRow) return; // 현재 포커스된 줄번호가 아니면 콘트롤을 갱신할 수 없다(무한루프 위험)
	
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		var record = this.records[nRow];
		var ctl = controls[bindInfo.controlName];
		ctl.passEvent = true;
		if (bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1") {
			if ((ctl.listSaveType == LISTBOX_SAVE_MULTI  && ctl.listType == LISTBOX_TYPE_DATASELECT)) continue;
			if (bindInfo.colId.length > 0){
				ctl.setText(record.values[bindInfo.colId]);
			} else {
				ctl.setValue(record.values[bindInfo.colId_value]);
			}
		} else if (bindInfo.controlType == "TextBox" || 
				   bindInfo.controlType == "CheckBox" || 
				   bindInfo.controlType == "Link" || 
				   bindInfo.controlType == "IFrame" || 
				   bindInfo.controlType == "ProgressBar1") {
			ctl.setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "OptionBox") {
			//ctl.setValue(ctl.matchUpValue == record.values[bindInfo.colId] ? 1 : 0);
			controls[ctl.optionGroupName + ""].setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "Label" ) {
			ctl.setCaption(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "PictureBox" ) {
			ctl.setPicture(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "WebEdit" ) {
			ctl.setHTML(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "FlashPlayer" ) {
			ctl.flashUrl = record.values[bindInfo.colId]; 
			ctl.callMovie();
		} else if (bindInfo.controlType == "Sheet" ) {
		} else if (bindInfo.controlType == "lstSheet" ) {
		} else {
			ctl.setValue(record.values[bindInfo.colId]);
		}
		ctl.passEvent = false;
	}
	
    return;
};

/**
 * @description	미결
 * @param	{number}	varRow
 * @param	{number}	moveRowPos
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.updateControlRowPosition = function(varRow, moveRowPos){
	if (this.getRowCount() == 0) return ;
	if (varRow == undefined) varRow = this.Row;
	
	var nRow = 0, shtRowId = "";
	if (typeof(varRow) != "number" ){
		record = varRow;
		shtRowId = record._$uid;
	} else {
		nRow = varRow;
		record = this.records[nRow];
		shtRowId = record._$uid;
	}
		
	// 데이터 리스트내 위치 수정
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;

		if (bindInfo.controlType != "List1") continue;
		var ctl = controls[bindInfo.controlName];
		if (ctl.listSaveType != LISTBOX_SAVE_MULTI) continue;
		if (ctl.listType != LISTBOX_TYPE_DATASELECT) continue;
		
		if (nRow == 0) {
			for (var i =0; i < this.records.length; i++){
				if (this.records[i] == record){
					nRow = i;
					break;
				}
			}
		}
		
		ctl.selectItem(nRow, false);
	}
	
	var tmpBinds = [];
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
	}
	
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		
		var sht = controls[controlName];
		if( typeof(sht) == "function" ) continue;
		
		sht.setCurrentRow(sht.getLookingRowNum(shtRowId));
		if( moveRowPos ){
			if( (typeof AUIDataSheet == "function" && control instanceof AUIDataSheet)
				|| (typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)
			){
				sht.setProperty("rowPosition", sht.currentRow);
			}
			else if( typeof EasySheet == "function" && control instanceof EasySheet ){
				sht.moveToRow(sht.currentRow);
			}
		}
	}	
	
    for (var key in this.dataBinds){
        var bindInfo = this.dataBinds[key]
        if (typeof bindInfo == "function") continue;
		if (bindInfo.controlType == "Sheet" || bindInfo.controlType == "lstSheet") continue;
        this.updateControlValue(bindInfo.colId);
    }	
	
	tmpBinds.clear();

	return;
};

// 시트와 데이터 셋에 동시 적용
/**
*     @description	미결
*     @param	{object}	control
*     @param	{number}	nRow
*     @return	{void}
*     @example	미결
*/
function _Common_UpdateDatasetRowPos(control, nRow){ 
	var tmpBinds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlName != control.controlName) continue;
		tmpBinds[bindInfo.datasetId] = bindInfo.controlType;
	}
	
	for (var datasetId in tmpBinds){
	    var bindInfo = tmpBinds[datasetId];
		if( typeof(bindInfo) == "function" ) continue;
		
		var dataset = dataSets[datasetId];
		
		if( (typeof AUIDataSheet == "function" && control instanceof AUIDataSheet)
			|| (typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)
		){
			var nRowTo =  -1;
			if (typeof nRow == "string"){
				nRowTo = dataset.getIndexOf_$uid(nRow);
			}
			else {
				nRowTo = dataset.getIndexOf_$uid(AUIGrid.getItemByRowIndex(control.AUIcontrolId, (nRow - 1) * control.rowsPerDataRow)._$uid);
			}
			dataset.setRowPos(nRowTo);
		}
		
		if( typeof EasySheet == "function" && control instanceof EasySheet ){
			var nRowTo =  -1;
			if( typeof nRow == "string" ){
				nRowTo = dataset.getIndexOf_$uid(nRow);
			}
			else{
				nRowTo = dataset.getIndexOf_$uid(control.rows(nRow).rowId);
			}
			dataset.setRowPos(nRowTo);
		}
		
		if (typeof ListBoxW == "function" && control instanceof ListBoxW){
			dataset.setRowPos(nRow);
		}
	}	
	
	tmpBinds.clear();
	
    return;
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {object}
 * @example	미결
 */
ControlBase.prototype._UpdateDatasetRowPos      = function(nRow){ return _Common_UpdateDatasetRowPos(this, nRow);}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateDatasetRowPos = function(nRow){ return _Common_UpdateDatasetRowPos(this, nRow);};
if (typeof AUIDataSheetM == "function"){
	AUIDataSheetM.prototype._UpdateDatasetRowPos = function(nRow){ return _Common_UpdateDatasetRowPos(this, nRow);};
}

if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDatasetRowPos = function(nRow){ return _Common_UpdateDatasetRowPos(this, nRow);};
}

/**
 * @description	미결
 * @param	{string}	record
 * @param	{number}	nRow
 * @return  {void}
 * @example	미결
 */    
DataSet.prototype.updateControlAddRow = function(record, nRow){  // nRow 가 없으면 마지막에 추가한다
	if (this.getRowCount() == 0) return ;

	// 시트에서 줄추가 상태면 다시시트를 갱신하지 않음
	if (this.__lastAction() == "SHEET_ADDED_ROW") return; 
	// 데이터 셋에서 줄추가상태로 바꿈
	this.__pushActionStack("DATASET_ADDED_ROW");          
	
	//if (nRow == undefined) nRow = this.getLastRow();
	
	//시트 행 추가
	var tmpBinds = [];
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
	}
	
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		
		var sht = controls[controlName];
		if( typeof(sht) == "function" ) continue;
		
		var shtRowNum = 0;
		
//		if (nRow == undefined) {
//			shtRowNum = sht.addRow(null, null, false);
//		}else {
//			// sheet.addRow는 선택한 줄 뒤로 줄이 추가되는 함수이다, nRow는 Grid의 줄번호이다
//			// 첫줄에 추가하려면 0 을 주면 된다, 이해를 돕기위해 코딩을 압축하지 않음
//			var nSheetRow = nRow + 1;
//			var nRowNumToAppend = nSheetRow - 1;
//			shtRowNum = sht.addRow(sht.getLookingRowNum(nRowNumToAppend), null, false);
//		}
//		if ((typeof AUIDataSheet == "function" && sht instanceof AUIDataSheet) ||
//			(typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM)){
//			record._$uid = AUIGrid.getItemByRowIndex(sht.AUIcontrolId, (shtRowNum - 1) * sht.rowsPerDataRow)._$uid; // AUI는 번호가 하나 작다
//			
//			// 추가된 데이터에 관련 시트데이터 수정
//			this.updateControlRowData(record); // this.updateControlRowData(nToRow);
//		}
		
		if( (typeof AUIDataSheet == "function" && sht instanceof AUIDataSheet)
			|| (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM)
		){
			if( nRow == undefined ){
				shtRowNum = sht.addRow(null, null, false);
			}
			else{
				// sheet.addRow는 선택한 줄 뒤로 줄이 추가되는 함수이다, nRow는 Grid의 줄번호이다
				// 첫줄에 추가하려면 0 을 주면 된다, 이해를 돕기위해 코딩을 압축하지 않음
				var nSheetRow = nRow + 1;
				var nRowNumToAppend = nSheetRow - 1;
				shtRowNum = sht.addRow(sht.getLookingRowNum(nRowNumToAppend), null, false);
			}
			
			record._$uid = AUIGrid.getItemByRowIndex(sht.AUIcontrolId, (shtRowNum - 1) * sht.rowsPerDataRow)._$uid; // AUI는 번호가 하나 작다
			
			// 추가된 데이터에 관련 시트데이터 수정
			this.updateControlRowData(record); // this.updateControlRowData(nToRow);
		}
		else if( typeof EasySheet == "function" && sht instanceof EasySheet ){
			shtRowNum = sht.addRow(nRow, null, false);
			record._$uid = sht.rows(shtRowNum).rowId;
			// 추가된 데이터에 관련 시트데이터 수정
			this.updateControlRowData(record); // this.updateControlRowData(nToRow);
		}
	}
	tmpBinds.clear();
	
	
	// 데이터 리스트에 행추가
	// 마지막 줄에만 추가가 가능하다
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;

		if (bindInfo.controlType != "List1") continue;
		var ctl = controls[bindInfo.controlName];
		if (ctl.listSaveType != LISTBOX_SAVE_MULTI) continue;
		if (ctl.listType != LISTBOX_TYPE_DATASELECT) continue;
		
		if (nRow == undefined) {
			var text = ""; var value = "";
			if (bindInfo.colId.trim().length != 0){
				text = record.values[bindInfo.colId];
			}
			if (bindInfo.colId_value.trim().length != 0){
				value = record.values[bindInfo.colId_value];
			}
			ctl.addItem(text, value, false);
		} else {
			if (typeof console != "undefined"){
				if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_019", "데이터 리스트는 마지막에 추가만 가능합니다"));
				if(typeof console != "undefined" && typeof console.trace == "function")	console.trace();
			}
		}
	}
	
	///*2016-03-23 수정 (차중훈) : 콤보박스, 리스트에 항목 추가
	//콤보, 리스트 항목 추가
	tmpBinds = [];
	for (var key in this.innerBinds){
		var bindInfo = this.innerBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "ComboBox" && bindInfo.controlType != "List1") continue;
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
	}
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		
		var ctl = controls[controlName];
		if( typeof(ctl) == "function" ) continue;
		
		if (nRow == undefined) {
			ctl.addItem("", "");
		}else {
			ctl.insertItem("", "", nRow);
		}
	}
	tmpBinds.clear();
	//*/2016-03-23 수정 (차중훈)
	
	//현재 행의 데이터를 갱신
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		var record = this.records[this.Row];
		var ctl = controls[bindInfo.controlName];
		ctl.passEvent = true;
		if (bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1") {
			if ((ctl.listSaveType == LISTBOX_SAVE_MULTI  && ctl.listType == LISTBOX_TYPE_DATASELECT)) continue;
			if (bindInfo.colId.length > 0){
				ctl.setText(record.values[bindInfo.colId]);
			} else {
				ctl.setValue(record.values[bindInfo.colId_value]);
			}
		} else if (bindInfo.controlType == "TextBox" || 
				   bindInfo.controlType == "CheckBox" || 
				   bindInfo.controlType == "Link" || 
				   bindInfo.controlType == "IFrame" || 
				   bindInfo.controlType == "ProgressBar1") {
			ctl.setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "OptionBox") {
			//ctl.setValue(ctl.matchUpValue == record.values[bindInfo.colId] ? 1 : 0);
			controls[ctl.optionGroupName + ""].setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "Label" ) {
			ctl.setCaption(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "PictureBox" ) {
			ctl.setPicture(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "WebEdit" ) {
			ctl.setHTML(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "FlashPlayer" ) {
			ctl.flashUrl = record.values[bindInfo.colId]; 
			ctl.callMovie();
		} else if (bindInfo.controlType == "Sheet" ) {
		} else if (bindInfo.controlType == "lstSheet" ) {
		} else {
			ctl.setValue(record.values[bindInfo.colId]);
		}
		ctl.passEvent = false;
	}
	
	// 데이터 셋에서 줄추가 상태 지움
	this.__popActionStack();
	
    return;
};

// 시트와 데이텃셋 공용
/**
*     @description	미결
*     @param	{object}	control
*     @param	{number}	nRow
*     @return	{void}
*     @example	미결
*/
function _Common_UpdateDatasetAddRow(control, nRow){ //nRow는 시트의 불번호로 1부터 시작된다
	var tmpBinds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlName != control.controlName) continue;
		tmpBinds[bindInfo.datasetId] = bindInfo.controlType;
	}
	
	for (var datasetId in tmpBinds){
	    var dataset = dataSets[datasetId];
		if( typeof(dataset) == "function" ) continue;
		
		// 데이터 셋에서 줄추가 상태면 다시 데이터셋을 갱신하지 않음
		if (dataset.__lastAction() == "DATASET_ADDED_ROW") continue; 
		// 시트에서 줄추가 상태로 바꿈
		dataset.__pushActionStack("SHEET_ADDED_ROW");          
		
		var nDatesetRow = 0;
		
		if ((typeof AUIDataSheet == "function" && control instanceof AUIDataSheet) || 
			(typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)){
			var delRows = AUIGrid.getSelectedItems(control.AUIcontrolId);
			var delRowLen  = delRows.length;
			
			if (nRow == undefined || nRow == control.maxRows - delRowLen) {
				nDatesetRow = dataset.addRow();
			}else {
				nDatesetRow = dataset.insertRow(nRow - 1);
			}
			var record = dataset.records[nDatesetRow];
			// record._$uid =  AUIGrid.getItemByRowIndex(control.AUIcontrolId, nRow)._$uid;  ???
			record._$uid =  AUIGrid.getItemByRowIndex(control.AUIcontrolId, (nRow - 1) * control.rowsPerDataRow)._$uid;
			dataset.updateControlRowData(record);
		}
		
		if( typeof EasySheet == "function" && control instanceof EasySheet ){
			var record = null;
			if( nRow == undefined || nRow == control.maxRows ){
				nDatesetRow = dataset.addRow();
			}
			else{
				nDatesetRow = dataset.insertRow(nRow);
			}
			record = dataset.records[nDatesetRow];
			record._$uid =  control.rows(nRow - control.startRowColNum).rowId;
			dataset.updateControlRowData(record);
		}
		
		if (typeof ListBoxW == "function"){
			if (control instanceof ListBoxW){
				
				if (nRow == undefined || nRow == control.maxRows) {
					nDatesetRow = dataset.addRow();
				}else {
					nDatesetRow = dataset.insertRow(nRow - 1);
				}
				var record = dataset.records[nDatesetRow];
				dataset.updateControlRowData(record);
			}
		}
		
		// 시트에서 줄추가 상태 지움
		dataset.__popActionStack();
	}
	
	tmpBinds.clear();

	
	
    return;
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {void}
 * @example	미결
 */
ControlBase.prototype._UpdateDatasetAddRow      = function(nRow){ _Common_UpdateDatasetAddRow(this, nRow); return;}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateDatasetAddRow = function(nRow){ _Common_UpdateDatasetAddRow(this, nRow); return;};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype._UpdateDatasetAddRow = function(nRow){ _Common_UpdateDatasetAddRow(this, nRow); return;};
    
if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDatasetAddRow = function(nRow){ _Common_UpdateDatasetAddRow(this, nRow); return;};
}
    
    /**
    * @description	미결
    * @param	{number}	varRow
    * @return 	{void}
    * @example	미결
    */
DataSet.prototype.updateControlDelRow = function(varRow){
	// 시트에서 줄삭제 상태면 다시시트를 갱신하지 않음
	if (this.__lastAction() == "SHEET_DELETED_ROW") return; 
	// 데이터 셋에서 줄삭제 상태로 바꿈
	this.__pushActionStack("DATASET_DELETED_ROW");   
	
	if (varRow == undefined) varRow = this.getLastRow();
	
	var nRow = 0, shtRowId = "";
	if (typeof(varRow) != "number" ){
		record = varRow;
		shtRowId = record._$uid;
	} else {
		nRow = varRow;
		record = this.records[nRow];
		shtRowId = record._$uid;
	}       
	
	//시트 행 삭제
	var tmpBinds = [];
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
		///*2016-03-24 수정 (차중훈) : 시트에 행이 없는 경우 tmpBinds에 추가하지 않음(아래 for문에서 시트 행삭제 하지 않음)
		if (controls[bindInfo.controlName].maxRows <= 0) continue;
		//*/2016-03-24 수정 (차중훈)
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
	}
	
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		
		var sht = controls[controlName];
		if( typeof(sht) == "function" ) continue;
		
		if (sht.isAvailableRowId(shtRowId)){
			if( (typeof AUIDataSheet == "function" && sht instanceof AUIDataSheet)
				|| (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM)
			){
				sht.delRowByUid(shtRowId);
			}
			else if( typeof EasySheet == "function" && sht instanceof EasySheet ){
				var rowIndex = sht.dataSet.getInexByRowId(shtRowId);
				sht.delRow(rowIndex + sht.startRowColNum, null, false);
			}
		}
	}
	tmpBinds.clear();
	
	// 데이터 리스트에 행 삭제
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;

		if (bindInfo.controlType != "List1") continue;
		var ctl = controls[bindInfo.controlName];
		if (ctl.listSaveType != LISTBOX_SAVE_MULTI) continue;
		if (ctl.listType != LISTBOX_TYPE_DATASELECT) continue;
		
		ctl.removeItem(record.values[bindInfo.colId], false);
	}
	
	///*2016-03-24 수정 (차중훈) : 콤보박스, 리스트에 항목 삭제
	//콤보, 리스트 항목 삭제
	tmpBinds = [];
	for (var key in this.innerBinds){
		var bindInfo = this.innerBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "ComboBox" && bindInfo.controlType != "List1") continue;
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
	}
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		
		var ctl = controls[controlName];
		if( typeof(ctl) == "function" ) continue;
		
		this.updateControlList();
	}
	tmpBinds.clear();
	//*/2016-03-23 수정 (차중훈)
	
	// 데이터 셋에서 줄삭제 상태 지움
	this.__popActionStack();
	
    return;
};

// 시트와 데이터리스트 공통함수 [varRow는 1부터 시작 ]
/**
*     @description	미결
*     @param	{object}	control
*     @param	{number}	varRow
*     @return	{string}
*     @example	미결
*/
function _Common_UpdateDatasetDelRow(control, varRow){ 
	if (varRow == undefined)  return;
    
	var nRow = 0; var uid = "";
	if (typeof varRow == "number"){
		nRow= varRow;
		if( (typeof AUIDataSheet == "function" && control instanceof AUIDataSheet)
			|| (typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)
		){
			uid = AUIGrid.getItemByRowIndex(control.AUIcontrolId, (nRow - 1)  * control.rowsPerDataRow)._$uid;
		}
		else if( typeof EasySheet == "function" && control instanceof EasySheet ){
			uid = control.rows(nRow - control.startRowColNum).rowId;
		}
	} else {
		uid = varRow;
	}
	
	var tmpBinds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(control.dataBinds[key]) == "function" ) continue;
		if (bindInfo.controlName != control.controlName) continue;
		tmpBinds[bindInfo.datasetId] = bindInfo.controlType;
	}
	
	for (var datasetId in tmpBinds){
	    var dataset = dataSets[datasetId];
		if( typeof(dataset) == "function" ) continue;
		
		// 데이터 셋에서 줄삭제  상태면 다시 데이터셋을 갱신하지 않음
		if (dataset.__lastAction() == "DATASET_DELETED_ROW") continue; 
		// 시트에서 줄추가 상태로 바꿈
		dataset.__pushActionStack("SHEET_DELETED_ROW");
		         
		if ((typeof AUIDataSheet == "function" && control instanceof AUIDataSheet) || 
			(typeof AUIDataSheetM == "function" && control instanceof AUIDataSheetM)){
			if (dataset.isAvailableRowId(uid)){
				var nRowToDel = dataset.getIndexOf_$uid(uid);
				dataset.deleteRow(nRowToDel);
			}
		}
		else if( typeof EasySheet == "function" && control instanceof EasySheet ){
//			var rowIndex = control.dataSet.getInexByRowId(uid);
//			control.delRow(rowIndex + control.startRowColNum, null, false);
			
			if( dataset.isAvailableRowId(uid) ){
				var nRowToDel = dataset.getIndexOf_$uid(uid);
				dataset.deleteRow(nRowToDel);
			}
		}
		
		if (typeof ListBoxW == "function" && control instanceof ListBoxW){ 
			dataset.deleteRow(nRow - 1);
		}

		// 데이터 셋에서 줄추가 상태 지움
		dataset.__popActionStack();
	}
	
	tmpBinds.clear();

    return;
};
/**
 * @description	미결
 * @param	{number}	varRow
 * @return  {void}
 * @example	미결
 */
ControlBase.prototype._UpdateDatasetDelRow = function(varRow){ _Common_UpdateDatasetDelRow(this, varRow); return;}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateDatasetDelRow = function(varRow){ _Common_UpdateDatasetDelRow(this, varRow); return;};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype._UpdateDatasetDelRow = function(varRow){ _Common_UpdateDatasetDelRow(this, varRow); return;};

if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDatasetDelRow = function(varRow){ _Common_UpdateDatasetDelRow(this, varRow); return;};
}
    
// 데이터 리스트는 기능제외 [이동을 지원하지 않음]
    /**
     *     @description	미결
     *     @param	{object}	control
     *     @param	{number}	cRow
     *     @return	{void}
     *     @example	미결
     */
function _Common_UpdateDatasetUpRow(control, nRow){ 
	var tmpBinds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlName != control.controlName) continue;
		tmpBinds[bindInfo.datasetId] = bindInfo.controlType;
	}
	
	for (var datasetId in tmpBinds){
	    var dataset = dataSets[datasetId];
		if( typeof(dataset) == "function" ) continue;
		
		var datasetRow = nRow - 1;
		if (datasetRow == 0) continue;

		var record = dataset.records[datasetRow];
	    dataset.records[datasetRow] = dataset.records[datasetRow - 1];
	    dataset.records[datasetRow - 1] = record;
	    
	    dataset.Row = datasetRow - 1;
	}
	
	tmpBinds.clear();
    return;
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {void}
 * @example	미결
 */
ControlBase.prototype._UpdateDatasetUpRow      = function(nRow){ _Common_UpdateDatasetUpRow(this, nRow); return;}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateDatasetUpRow = function(nRow){ _Common_UpdateDatasetUpRow(this, nRow); return;};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype._UpdateDatasetUpRow = function(nRow){ _Common_UpdateDatasetUpRow(this, nRow); return;};

if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDatasetUpRow = function(nRow){ _Common_UpdateDatasetUpRow(this, nRow); return;};
}

/**
 *     @description	미결
 *     @param	{object}	control
 *     @param	{number}	nRow
 *     @return	{void}
 *     @example	미결
 */     
function _Common_UpdateDatasetDownRow(control, nRow){ 
	var tmpBinds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlName != control.controlName) continue;
		tmpBinds[bindInfo.datasetId] = bindInfo.controlType;
	}
	
	for (var datasetId in tmpBinds){
	    var dataset = dataSets[datasetId];
		if( typeof(dataset) == "function" ) continue;

		var datasetRow = nRow - 1;
		if (datasetRow == dataset.records.length -1) continue;
		
	    var record = dataset.records[datasetRow];
	    dataset.records[datasetRow] = dataset.records[datasetRow + 1];
	    dataset.records[datasetRow + 1] = record;
	    
	    dataset.Row = datasetRow + 1;
	}

	tmpBinds.clear();
    return;
};

/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {void}
 * @example	미결
 */
ControlBase.prototype._UpdateDatasetDownRow = function(nRow){ _Common_UpdateDatasetDownRow(this, nRow); return;}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateDatasetDownRow = function(nRow){ _Common_UpdateDatasetDownRow(this, nRow); return;};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype._UpdateDatasetDownRow = function(nRow){ _Common_UpdateDatasetDownRow(this, nRow); return;};

if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDatasetDownRow = function(nRow){ _Common_UpdateDatasetDownRow(this, nRow); return;};
}
        
// 시트와 데이터리스트 공용        
    /**
     *     @description	미결
     *     @param	{object}	control
     *     @return	{void}
     *     @example	미결
     */
function _Common_UpdateDatasetClear(control){ 

	var tmpBinds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlName != control.controlName) continue;
		tmpBinds[bindInfo.datasetId] = bindInfo.controlType;
	}
	
	for (var datasetId in tmpBinds){
		if( typeof(tmpBinds[datasetId]) == "function" ) continue;
		var dataSet = dataSets[datasetId];
		
		// 데이터 셋에서 줄 클리어  상태면 다시 데이터셋을 갱신하지 않음
		if (dataSet.__lastAction() == "DATASET_REFRESHED_ROW") continue; 
		// 시트에서 줄 클리어  상태로 바꿈
		dataSet.__pushActionStack("SHEET_CLEARED_ROW");    
		
		dataSet.clearData();

	    // 시트에서 줄 클리어  상태로 지움
	    dataSet.__popActionStack();
	}
	
	tmpBinds.clear();
	
    return;
};
/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
ControlBase.prototype._UpdateDatasetClear = function(){ _Common_UpdateDatasetClear(this); return;}; 
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype._UpdateDatasetClear = function(){ _Common_UpdateDatasetClear(this); return;};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype._UpdateDatasetClear = function(){ _Common_UpdateDatasetClear(this); return;};
    
if( typeof EasySheet == "function" ){
	EasySheet.prototype._UpdateDatasetClear = function(){ _Common_UpdateDatasetClear(this); return;};
}


/**
 *     @description	미결
 *     @param	{object}	control
 *     @param	{number}	rowIndex
 *     @param	{number}	columnIndex
 *     @param	{string}	value
 *     @param	{string}	oldValue
 *     @return	{void}
 *     @example	미결
 */
function _Common_updatePivotCell(control, rowIndex, columnIndex, value, oldValue){
	
	// 1. 연결데이터 셋을 찾는다 
	var datsSetName = "";
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		var dataset = dataSets[bindInfo.datasetId];
		
		dataset.updatePivotCell(rowIndex - 1, columnIndex - 1, value, oldValue);
		break;
	}

	return;
}    
    
if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype.updatePivotCell = function(rowIndex, columnIndex, value, oldValue){ return _Common_updatePivotCell(this, rowIndex, columnIndex, value, oldValue);};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype.updatePivotCell = function(rowIndex, columnIndex, value, oldValue){ return _Common_updatePivotCell(this, rowIndex, columnIndex, value, oldValue);};

   
/**
 * 그리드 채우기에 필요한 목록을 컨트롤에서 빼간다
 *
  * @return             추출된 배열값
 */
ControlBase.prototype.getListArray = function(){
	if (!this instanceof ComboBox && !this instanceof ListBox) {
		return [];
	}
	
	var returnArray = [];
    var wOptions =  this.tagObject.options;
    
//    for (var i = 0; i < wOptions.length; i++){
//    	returnArray[i] = wOptions[i].text;
//    }
    
    ///*2016-03-22 수정 (차중훈) : 콤보박스에 들어갈 목록은 {value(속값), text(겉값)}으로 구성된 객체 배열이 반환되야 한다.
    var item = null;
    returnArray.push({value : "", text : ""});
    for (var i = 0; i < wOptions.length; i++){
		//콤보박스에 채울 항목 생성
    	item = new Object();
    	item.value = wOptions[i].value;
    	item.text = wOptions[i].text;
		//생성한 항목 리스트에 추가
    	returnArray.push(item);
		//항목 초기화
    	delete item;
    	item = null;
    }
    //*/2016-03-22 수정 (차중훈)    
	
    return returnArray;

}; 

/**
 * 그리드 채우기에 필요한 목록을 데이터셋에서 빼간다
 *
 * @param  textColId   겉값(텍스트) 연결 칼럼아이디
 * @param  codeColId   속값(코드값) 연결 칼럼아이디
 * @return             추출된 배열값
 */
DataSet.prototype.getListArray = function(textColId, codeColId){
	var returnArray = [];
	var i = 0;
	
//	for(var nRow = this.records.length - 1; nRow >= 0 ; nRow--) {
//		var record = this.records[nRow];
//		if (!record._filterd){
//			returnArray[i++] = this.records[nRow].values[textColId];
//		}
//    }
	
	///*2016-03-22 수정 (차중훈) : 콤보박스에 들어갈 목록은 {value(속값), text(겉값)}으로 구성된 객체 배열이 반환되야 한다.
	var item = null;
	returnArray.push({value : "", text : ""});
	for(var nRow = 0; nRow < this.records.length; nRow++) {
		var record = this.records[nRow];
		//콤보박스에 채울 항목 생성
		item = new Object();
		item.value = this.records[nRow].values[codeColId];
		item.text = this.records[nRow].values[textColId];
		//생성한 항목 리스트에 추가
		returnArray.push(item);
		//항목 초기화
		delete item;
		item = null;
    }
	//*/2016-03-22 수정 (차중훈)
	
    return returnArray;
}; 

//Sort 정보 객체와 함수  -----------------------------------------------------------------------------
var xyZ_$_SortKeys = []
function SortKey(strKey, bAscending){this.strKey = strKey; this.bAscending = bAscending};

//객체 속성  -----------------------------------------------------------------------------
/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getID = function(){ return this.id; };
/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.ID = function(){ return this.id; };
/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getType = function(){ return "Dataset"; };
/**
 * @description	미결
 * @param	{string}	nColIdx
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getColID = function(nColIdx){ 
	var wReturn = ""; 
	var i = 0;
	for (var key in this.colInfos){
		var colInfo = this.colInfos[key];
		if( typeof(colInfo) == "function" ) continue;
		if (nColIdx == i++){
			wReturn = colInfo.id;
			break;
		}
	}

	return wReturn;
};
/**
 * @description	미결
 * @param	{string}	strColID
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getColIndex = function(strColID){ 
	var wReturn = 0; 
	var i = 0;
	for (var key in this.colInfos){
		if( typeof(this.colInfos[key]) == "function" ) continue;
		var colInfo = this.colInfos[key];
		if (colInfo.id == strColID){
			wReturn = i;
			break;
		}
		i++;
	}

	return wReturn;
};
/**
 * @description	미결
 * @param	{string}	strColID
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.getColSize = function(strColID){ 
	return this.colInfos[strColID].size;
};
/**
 * @description	미결
 * @param	{string}	strColID
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.getColType = function(strColID){ 
	return this.colInfos[strColID].type;
};

//Dataset의 Const Column 갯수와 Column들의 갯수의 합계
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getColCount = function(){
	return this._colCount;
};
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.ColCount = function(){ 
	return this.getColCount();
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	ncludeFiltered
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype.isRightRow = function(nRow, includeFiltered){ 
	if (includeFiltered == undefined) includeFiltered = false;
	
	var rowNum = -1; 
	if (typeof(nRow) == 'number'){
		rowNum = nRow;
	} else if (/^\d+$/.test(nRow)){
		rowNum = parseInt(nRow);
	} else {
		//alert(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.trace == "function")	console.trace();
		return false;
	}

	var arrRecods = (includeFiltered ? this.buffer : this.records );
	if (rowNum < 0 || arrRecods.length == 0) {
		//alert(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.trace == "function")	console.trace();
		return false;
	}
	
	if (rowNum >= arrRecods.length) {
		//alert(getText("message_dataset_007", "\"{0}\"은 최대 줄수{1}을 초과할 수 없습니다.\n 정상적인 줄번호가 아닙니다.", [rowNum, (arrRecods.length - 1)]));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_007", "\"{0}\"은 최대 줄수{1}을 초과할 수 없습니다.\n 정상적인 줄번호가 아닙니다.", [rowNum, (arrRecods.length - 1)]));
		if(typeof console != "undefined" && typeof console.trace == "function")	console.trace();
		return false;
	}
	return true;
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype.isRightRowOrg = function(nRow){ 

	var rowNum = -1; 
	if (typeof(nRow) == 'number'){
		rowNum = nRow;
	} else if (/^\d+$/.test(nRow)){
		rowNum = parseInt(nRow);
	} else {
		//alert(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
		return false;
	}

	if (rowNum < 0 || this.OriginBuffer.length == 0) {
		//alert(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_006", "\"{0}\"({1})는 정상적인 줄번호가 아닙니다.", [nRow, this.id]));
		if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
		return false;
	}
	if (rowNum >= this.OriginBuffer.length) {
		//alert(getText("message_dataset_007", "\"{0}\"은 최대 줄수{1}을 초과할 수 없습니다.\n 정상적인 줄번호가 아닙니다.", [rowNum, (this.OriginBuffer.length - 1)]));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_007", "\"{0}\"은 최대 줄수{1}을 초과할 수 없습니다.\n 정상적인 줄번호가 아닙니다.", [rowNum, (this.OriginBuffer.length - 1)]));
		if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
		return false;
	}
	return true;
};
/**
 * @description	미결
 * @param	{string}	colId
 * @param	{string}	alertErrMsg
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype.isRightColId = function(colId, alertErrMsg){ 
	try {
		if (colId == null  || colId == undefined || (colId + "").length == 0){
			//if(!alertErrMsg) alert(getText("message_dataset_008", "잘못된 COLID({0}) 입니다", [this.id]));
			if(!alertErrMsg) if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_008", "잘못된 COLID({0}) 입니다", [this.id]));
			if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
			return false;
		}
		if (this.colInfos[colId] == null || this.colInfos[colId] == undefined) {
			//if(!alertErrMsg) alert(getText("message_dataset_009", "COLID \"{0}\"({1})가 존재하지 않습니다.", [colId, this.id]));
			if(!alertErrMsg) if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_009", "COLID \"{0}\"({1})가 존재하지 않습니다.", [colId, this.id]));
			if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
			return false;
		}
	} catch(e) {
		//if(!alertErrMsg) alert(getText("message_dataset_010", "COLID: \"{0}\"\n{1}", [colId, e.description]));
		if(!alertErrMsg) if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_010", "COLID: \"{0}\"\n{1}", [colId, e.description]));
		if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
		return false;
	}

	return true;
};

//RowType을 강제로 변경하는 Method 입니다. 
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	strRowType
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype.setRowType = function(nRow, strRowType){ 
	//Dataset의 UpdateControl Property 값이 False일 때만 작동합니다.
	if (this.UpdateControl) return false;
	if (!this.isRightRow(nRow)) return false;

	var rowNum = parseInt(nRow + "", 10); 
	this.records[rowNum].RowType = strRowType;

	return true;
};

/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getRowType = function(nRow){ 
	if (!this.isRightRow(nRow)) return "Normal";

	var rowNum = parseInt(nRow + "", 10); 
	return this.records[rowNum].RowType;
};

/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getCount = function(){
	return this.getRowCount();
};
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.rowCount = function(){
	return this.getRowCount();
};

//Filter된 레코드를 포함한 Dataset에서 전체 Record 갯수
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getTotalRowCount = function(){ 
	return this.buffer.length;
};
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getRowCountNF = function(){ 
	return this.buffer.length;
};
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.rowCountNF = function(){ 
	return this.buffer.length;
};


//Dataset의 Record 갯수를 얻어오는 Property 로 삭제된 레코드는 제외된다 
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getRowCount = function(){
	return this.records.length;
};
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getRowPos = function(){ return this.Row; };
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getRowPosition = function(){ return this.Row; };
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getCurrow = function(){ return this.Row; };

/**
 * @description	미결
 * @param	{number}	rowPos
 * @param	{number}	moveToRowPos
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.setRowPos = function(rowPos, moveToRowPos){
	if (rowPos < 0) return -1;
	if (this.Row == rowPos) return rowPos;
	if (rowPos >= this.records.length) return -1;
		
	var nOldRow = this.Row;
	var nRow = rowPos;

	// Dataset의 FireEvent Property값이 False인 경우에는 Event가 발생하지 않습니다.
	if (this.FireEvent){
		// Dataset의 RowPos Property를 변경시키면 Dataset의 CanRowPosChange Event가 발생합니다.    	
		if (this.hasCanRowPosChangeEvent) {
			var wResult = this.fncCanRowPosChangeEvent(this, nOldRow, nRow);  
			// CanRowPosChange Event에서 false값을 return하면 addRow()가 수행되지 않으며 return 값은 -1입니다.
			if (typeof(wResult)=="boolean" && !wResult) {
				// CanRowPosChange Event의 Return값을 False로 주면 RowPosition을 변경하지 않습니다.
				return;          
			} 
		}
	}

	// 한줄 추가 
	this.Row = rowPos;
	this.records[rowPos]._selected = true;
	
	// 연결콘트롤 포커스 이동 
	if( this.instantUpdateControl ) this.updateControlRowPosition(nRow, moveToRowPos);

	// ??? 미결 : 연결콘트롤 포컷스 이동
	// Grid에 사용할 경우는 
	// Dataset의 CanRowPosChange Event ->Grid의 OnCellPosChanged Event -> Dataset의 OnRowPosChanged Event가 순서대로 발생합니다.

	// RowPostion을 변경하고 OnRowPosChanged Event가 발생합니다. 
	if (this.FireEvent){
		if (this.hasRowPosChangedEvent) {
			this.fncRowPosChangedEvent(this, nOldRow, nRow);
		}
	}	
	return this.Row;
};

/**
 * Filter된 Dataset의 해당 Record Index가 Filter 되지 않은 Dataset에서 몇번째 Record Index인지 얻어오는 Method  
 *
 * @param  nRow  Filter 되어 있는 Dataset의 Record Index.
 * @return      (Integer) Filter 되지 않은 Dataset의 Record Index.
 */
DataSet.prototype.getRowIndexNF = function(nRow){ 
    if (nRowNF >= this.records.length){
    	//alert(getText("message_dataset_011", "줄번호 {0}는 전체줄수 {1}범위내이여야 합니다", [nRow, (this.records.length)]));
    	if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_011", "줄번호 {0}는 전체줄수 {1}범위내이여야 합니다", [nRow, (this.records.length)]));
    	if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
    	return -1;
    }
	nRow = parseInt(nRow + "", 10); 
    
	var id = this.records[nRow]._id;
	for (var nRowNF = 0; nRowNF <= this.buffer.length; nRowNF++){
		if (this.buffer[nRowNF]._id == id){ return nRowNF; }
	}

	return -1;
};
/**
 * @description	미결
 * @param	{number}	nRowNF
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.getRecordRowNF = function(nRowNF){ 
	
    if (nRowNF >= this.buffer.length){
    	//alert(getText("message_dataset_012", "필터되지 않은  레코드중 줄번호 {0}는 전체줄수 {1}범위내이여야 합니다", [nRowNF, this.buffer.length]));
    	if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_012", "필터되지 않은  레코드중 줄번호 {0}는 전체줄수 {1}범위내이여야 합니다", [nRowNF, this.buffer.length]));
    	if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
    	return -1;
    }
	nRowNF = parseInt(nRowNF + "", 10); 
	
//	if( this.mappingRecordInfos == null ) this.mappingRecordInfos = [];
//	if( this.mappingRecordInfos.length != this.buffer.length ){
//		console.log("nRowNF = " + nRowNF + " / this.mappingRecordInfos.length = " + this.mappingRecordInfos.length + " / this.buffer.length = " + this.buffer.length);
//		while(this.mappingRecordInfos instanceof Array && this.mappingRecordInfos.length > 0) {
//			this.mappingRecordInfos.pop();
//		}
//		var nRow = 0;
//		for (var i = 0; i < this.buffer.length; i++){
//			if (!this.buffer[i]._filterd){
//				this.mappingRecordInfos[nRow] = {id : this.buffer[i]._id, index : nRow};
//				nRow++;
//			}
//		}
//		this.mappingRecordInfos.sort( function(info1, info2){
//			if( info1.id > info2.id )		return 1;
//			else if( info1.id < info2.id )	return -1;
//			else							return 0;
//			return 0;
//		});
//	}
//	return binaryRecordSearch(this.mappingRecordInfos, id, 0, this.mappingRecordInfos.length - 1);
    
	var id = this.buffer[nRowNF]._id;
	for (var nRow = 0; nRow <= this.records.length; nRow++){
		if (this.records[nRow]._id == id){ return nRow; }
	}

	return -1;
};

//function binaryRecordSearch(mappingRecordInfos, recordId, start, end){
//	if( start > end ) { return -1; } //does not exist
//	
//	var middle = Math.floor((start + end) / 2);
//	var mappingRecordInfo = mappingRecordInfos[middle];
//	
//	if( mappingRecordInfo.id == recordId ){
//		return mappingRecordInfo.index;
//	}
//	else if( mappingRecordInfo.id < recordId /*&& mappingRecordInfos.slice(middle + 1, end).length > 1*/ ){
//		return binaryRecordSearch(mappingRecordInfos, recordId, middle + 1, end);
//	}
//	else if( mappingRecordInfo.id > recordId /*&& mappingRecordInfos.slice(start, middle - 1).length > 1*/ ){
//		return binaryRecordSearch(mappingRecordInfos, recordId, start, middle - 1);
//	}
//	
//	return -1;
//}


/**
 * Dataset에 존재하는 마지막 Record의 Index를 얻어오는 Property 
 * Dataset에 Record가 없으면 -1.(시작 Record의 Index는 0)
 * 단 Filter 또는 삭제된 Record는 제외하고 현재 Display되고 있는 데이타 중 마지막 Record의 Index입니다.
 *
 * @return      (Integer) Record의 Index
 */
DataSet.prototype.getLastRow = function(){
	return this.records.length - 1;    
};

//Dataset의 현재 Record의 다음 Record Index를 얻어오는 Property 
/**
 * @description	미결
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.getNextRow = function(){
	// Dataset의 Record가 없으면 값은 -1 입니다.
	if (this.records.length == 0) return -1;

	// Dataset이 마지막 Record를 가리키고 있을 때는 NextRow는 CurRow와 같습니다.
	if (this.Row == this.getLastRow()) return this.Row;

	return this.Row + 1;
};
/**
 * @description	미결
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.getPrevRow = function(){
	// Dataset의 Record가 없으면 값은 0입니다.
	if (this.records.length == 0) return 0;

	// Dataset이 처음 Record를 가리키고 있을 때는 PrevRow는 CurRow
	if (this.Row == 0) return this.Row;

	return this.Row - 1;
};

/**
 * Dataset에 Column을 추가하는 Method
 *
 * @param  strColID   Dataset에 추가할 Column ID
 * @param  strColType Dataset에 추가할 Column Type. Smallint, Integer, Money, Float, Char, [String, Int, Decimal, Currency, Date, Char, Url, Blob] 중 택일 [Default Value = String] 
 * @param  nColSize   Dataset에 추가할 Column의 크기 지정[Default Value = 256]
 * @return            추가된 Column의 Index
 */
DataSet.prototype.addColumn = function(strColID, strColType, nColSize){ 
	var index = 0; 

	// ColInfo 추가
	var colInfo = new MiColInfo();
	colInfo.id = strColID;
	if (nColSize != undefined) colInfo.size = nColSize;
	if (strColType != undefined) colInfo.type = strColType;

	this._colCount++;
	this.colInfos[colInfo.id] = colInfo;
	colInfo.index = this._colCount - 1; 

	// record 칼럼 추가
	for (var i = 0; i < this.buffer.length; i++){
		record = this.buffer[i];
		record.values[strColID] = colInfo.defaultValue();
	}	
	for (var i = 0; i < this.OriginBuffer.length; i++){
		record = this.OriginBuffer[i];
		record.values[strColID] = colInfo.defaultValue();
	}	

	// OnLoadCompleted Event가 발생, OnLoadCompleted Event의 nReason 값은 1
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 1);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			//alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			if(typeof console != "undefined" && typeof console.log == "function")	console.log("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
			return -1;
		}            
	} 

	return index;
};


/**
 * Dataset의 마지막에 새로운 레코드를 추가하는 Method<br/>
 * addRow Method로 추가된 레코드는 <br/>
 * Grid의 Edit Mode에서 값을 변경할 경우 Orgin Buffer로 옮겨가지 않으며 RowType도 변경되지 않습니다.
 * 
 * @return      Dataset에 새로 추가된 레코드의 Index. Row의 시작 Index값은 0
 */
DataSet.prototype.addRow = function(){ 
	var wReturn = 0; 

	// Dataset의 Column이 존재하지 않을 때는 Error가 발생합니다.
	if (this._colCount == 0){
		//alert(getText("message_dataset_013", "칼럼정보가 없습니다"));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_013", "칼럼정보가 없습니다"));
		if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
		return -1;
	}

	var nOldRow = this.Row;
	var nRow = this.records.length;

	// addRow Method가 호출되면 다음과 같은 순서로 Event를 발생합니다.
	// CanRowPosChange Event ->OnRowInserted Event -> OnRowPosChanged Event 순서대로 발생합니다.
	// Grid의 BindDataset으로 사용할 경우에는 
	// Dataset의 CanRowPosChange Event ->Dataset의 OnRowInserted Event 
	// -> Grid의 OnCellPosChanged Event -> Dataset의 OnRowPosChanged Event 순서대로 발생합니다.

	// Dataset의 FireEvent Property값이 False인 경우에는 Event가 발생하지 않습니다.
	if (this.FireEvent){
		if (this.hasCanRowPosChangeEvent) {
			var wResult = this.fncCanRowPosChangeEvent(this, nOldRow, nRow);  
			// CanRowPosChange Event에서 false값을 return하면 addRow()가 수행되지 않으며 return 값은 -1입니다.
			if (typeof(wResult)=="boolean" && !wResult) {
				return -1;
			}            
		} 
	}

	// 한줄 추가 
	var record = new MiRecord(this.colInfos);
	this.records[nRow] = record;
	
	var nRowNF = this.buffer.length;
	this.buffer[nRowNF] = record;
	record._orignalIndex = nRowNF;
	
	// 구루핑이 필요할 경우 크룹키값 복사
	if (nRow > 0 && this._GroupKey.length > 0){
		this._copyGroupKeyValues(this.records[nRow - 1], record);
		// 새로운 키값을 부여한다 
		record._jsonGroupKeyValue = this._makeGroupKey(record);
	}
	
	
	this.Row = nRow;

	// UpdateControl Property가 True인 경우에는 추가된 레코드의 RowType은 "Insert"가 됩니다.
	// UpdateControl Property가 False인 경우에는 추가된 레코드의 RowType은 "normal"이 됩니다.
	if (this.UpdateControl){
		record.RowType = "Insert";   // 안하면 디폴트가  "Normal"
	}
	
	if (this.FireEvent){
		if (this.hasRowInsertedEvent) {
			var wResult = this.fncRowInsertedEvent(this, nRow, 1);
			if (typeof(wResult)=="boolean" && !wResult) {
				return -1;
			}            
		} 
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	
	// 연결된 콘트롤 줄추가
	if( this.instantUpdateControl ) this.updateControlAddRow(record);

	if (this.FireEvent){
		if (this.hasRowPosChangedEvent) {
			this.fncRowPosChangedEvent(this, nOldRow, nRow);
		}
	}
	
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._InsertToGroup(nRow);
	  this._refreshGroupCation(true);
	}
	
	//추가된 레코드의 index를 리턴
	wReturn = nRow;

	return wReturn;
};
/**
 * @description	미결
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.appendRow = function(){ return this.addRow(); };

/**
 * Dataset의 지정한 레코드 Index에 레코드를 삽입하는 Method <br/>
 * addRow Method로 추가된 레코드는 <br/>
 * Grid의 Edit Mode에서 값을 변경할 경우 Orgin Buffer로 옮겨가지 않으며 RowType도 변경되지 않습니다.
 * 
 * @param  nRow   레코드를 삽입할 Index(String, Integer)
 * @return        삽입된 레코드의 Index. Row의 시작 Index값은 0
 */
DataSet.prototype.insertRow = function(nRow){ 
	var wReturn = 0; 

	// Dataset의 Column이 존재하지 않을 때는 Error가 발생합니다.
	if (this._colCount == 0){
		//alert(getText("message_dataset_013", "칼럼정보가 없습니다"));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_013", "칼럼정보가 없습니다"));
		if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
		return -1;
	}
	
	// 비데이터 셋인 경우 
	if (this.rowCount() == 0){
		if (nRow > 0) {
			//alert(getText("message_dataset_014", "줄번호 {0}는 정상적인 줄번호가 아닙니다.\n 현재상태에서는 줄번호 0만 가능합니다.", [nRow]));
			if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_014", "줄번호 {0}는 정상적인 줄번호가 아닙니다.\n 현재상태에서는 줄번호 0만 가능합니다.", [nRow]));
			if(typeof console != "undefined" && typeof console.trace == "function") console.trace();
			return false;
		} else {
			return this.addRow();
		}
	} else if (this.rowCount() == nRow){
		return this.addRow();
	} else {
		if (!this.isRightRow(nRow)) return false;
	}

	var nOldRow = this.Row;
	nRow = parseInt(nRow + "", 10);         // records에서의 인덱스
	var nRowNF = (this.rowCount() == 0 ? nRow : this.getRowIndexNF(nRow)) ;  // buffer에서의 인덱스

	// insertRow Method가 호출되면 다음과 같은 순서로 Event를 발생합니다.
	// CanRowPosChange Event ->OnRowInserted Event -> OnRowPosChanged Event 순서대로 발생합니다.
	// Dataset의 FireEvent Property값이 False인 경우에는 Event가 발생하지 않습니다.
	if (this.FireEvent){
		if (this.hasCanRowPosChangeEvent) {
			var wResult = this.fncCanRowPosChangeEvent(this, nOldRow, nRow);  
			// CanRowPosChange Event에서 false값을 return하면 addRow()가 수행되지 않으며 return 값은 -1입니다.
			if (typeof(wResult)=="boolean" && !wResult) {
				return -1;
			}            
		} 
	}

	// 한줄 추가 
	var record = new MiRecord(this.colInfos);
	record._orignalIndex=this.buffer.length;
	
	if (this.rowCount() == 0){
		this.buffer[nRow] = nRowNF;  
		this.records[nRow] = record;
	} else {
		this.buffer.splice(nRowNF, 0, record);
		this.records.splice(nRow, 0, record);

    	// rangeStart 한줄씩 뒤로 미루기
    	this._updateRangeStartsAfter(nRow, 1);
	}

	// 구루핑이 필요할 경우 크룹키값 복사
	if (nRow > 0 && this._GroupKey.length > 0){
		this._copyGroupKeyValues(this.records[nRow - 1], record);
		// 새로운 키값을 부여한다 
		record._jsonGroupKeyValue = this._makeGroupKey(record);
	}

	this.Row = nRow;
	
	if (this.FireEvent){
		if (this.hasRowInsertedEvent) {
			var wResult = this.fncRowInsertedEvent(this, nRow, 1);
			if (typeof(wResult)=="boolean" && !wResult) {
				return -1;
			}            
		} 
	}

	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 콘트롤 줄추가
	if( this.instantUpdateControl ) this.updateControlAddRow(record, nRow);

	// UpdateControl Property가 True인 경우에는 추가된 레코드의 RowType은 "Insert"가 됩니다.
	// UpdateControl Property가 False인 경우에는 추가된 레코드의 RowType은 "normal"이 됩니다.
	if (this.UpdateControl){
		record.RowType = "Insert";   // 안하면 디폴트가  "Normal"
	}
	
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._InsertToGroup(nRow);
	  this._refreshGroupCation(true);
	}


	if (this.FireEvent){
		if (this.hasRowPosChangedEvent) {
			this.fncRowPosChangedEvent(this, nOldRow, nRow);
		}
	}
	
	wReturn = nRow;
	
	return wReturn;
};

/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {void}
 * @example	미결
 */
DataSet.prototype._deleteOneRecord = function(nRow){
    if (!this.isRightRow(nRow)) return; 
    nRow = parseInt(nRow + "", 10); 
    var nRowNF = this.getRowIndexNF(nRow);
    var movedToOrigin = false;
    

	var record = this.records[nRow];
	
	if (this.UpdateControl){
		// UpdateControl Property가 True인 경우에는 
		if (record.RowType == "Normal" || record.RowType == "Update"){
			// Dataset의 레코드를 삭제되며, 삭제된 Data는 Orgin Buffer로 옮겨가며 레코드의 RowType은 "delete"가 됩니다.
			// 데이터가 있으면 플래그만 바꾼다 
			var foundInOrigin = false;
			for (var i = 0; i < this.OriginBuffer.length; i++){
				var recordORG = this.OriginBuffer[i];
				if (recordORG._id == record._id){
					recordORG.RowType = "Delete";
					foundInOrigin = true;
					break;
				}
			}
			if (!foundInOrigin){
				record.RowType = "Delete";
				this.OriginBuffer[this.OriginBuffer.length] = record;
				movedToOrigin = true;
			}
		} else if (record.RowType == "Insert"){
			// insertRow Method, addRow Method를 통해 추가된 레코드는 삭제되어도 Orgin Buffer로 옮겨가지 않고 삭제됨
		} else {
			//Logical 레코드는 삭제되어도 Orgin Buffer로 옮겨가지 않음.
		}
		
	} else {
		// UpdateControl Property가 False인 경우에는 원본 레코드까지 삭제합니다.  
		for (var i = 0; i < this.OriginBuffer.length; i++){
			var recordORG = this.OriginBuffer[i];
			if (recordORG._id == record._id){
				// 레코드의 내용물은 records에서도 참고하고 있으므로 건들면 안되고 배열에서만 뺸다
				this.OriginBuffer.splice(i, 1);
				break;
			}
		}
	}

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
	    // 레벨별 줄번호를 찾아낸다
	    var arrGroupRows = this._FindGroupRows(nRow);
	    this._DeleteFromGroup(arrGroupRows, record, nRow);
	}
	
	this.buffer.splice(nRowNF, 1);
	this.records.splice(nRow, 1);
	
	// rangeStart 한줄씩 앞으로 당기기
    this._updateRangeStartsAfter(nRow, -1);
	
	// 메모리 최종해제
	if (!movedToOrigin){
		record.clear(); record = null;
	}
	
	return;
};

/**
 * 지정한 레코드 Index에 해당하는 Record를 삭제하는 Method <br/>
 * UpdateControl Property값에 따라 원본 Record가 보존되어 있어 복구가 가능<br/><br/>
 *
 * @param  nRow  삭제할 Record의 Index  [Default Value = 현재줄] 
 * @return       (Integer)성공하면 0, 실패하면 음수를 Return
 */
DataSet.prototype.deleteRow = function(nRow){ 
	var wReturn = 0; 
	if (nRow == undefined){ nRow = this.Row; }

	var record = this.records[nRow];
	
	// appendDataset Method가 수행되면 Dataset은 OnRowDeleting  Event ->OnRowDeleted Event -> OnRowPosChanged Event가 순서대로 발생합니다.
	// Grid의 BindDataset을 사용할 경우에는 OnRowDeleting  Event ->OnRowDeleted Event -> Grid의 OnCellPosChanged ->OnRowPosChanged Event가 순서대로 발생합니다.
	if (this.FireEvent){
		if (this.hasRowDeletingEvent) {
			var wResult = this.fncRowDeletingEvent(this, nRow, 1);  // "obj", "nRow", "nCount"
			if (typeof(wResult)=="boolean" && !wResult) {
				return -1;
			}            
		} 
	}

	this._deleteOneRecord(nRow);
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	
	// 연결된 시트의 줄삭제 
	if( this.instantUpdateControl ) this.updateControlDelRow(record);
	

	// DataSet의 Row가 마지막 Row를 가르킬때 deleteRow를 수행하면, 
	// Row의 값은 1이 줄어 새로운 마지막 Row를 가르키게 됩니다.
	var nOldRow = this.Row;
	var nRow = (nOldRow == this.records.length ? this.records.length - 1: nOldRow);  
	if (this.records.length == 0){
		this.Row = 0;
	} else if (nOldRow == this.records.length){
		this.Row = this.records.length - 1;
	} else {
		this.Row = nOldRow;
	}
	if( this.instantUpdateControl ) this.updateControlRowData(this.records[this.Row]);
	
	this.Row = nRow;  

	if (this.FireEvent){
		if (this.hasRowDeletedEvent) {
			var wResult = this.fncRowDeletedEvent(this, 0, nRow, 1);
			if (typeof(wResult)=="boolean" && !wResult) {
				return -1;
			}            
		} 
		//2016-04-18 수정(차중훈) : RowPosChanged 이벤트 함수가 있으며 레코드가 1개 이상 존재하는 경우에만 RowPosChanged 이벤트 함수가 동작된다.
		if (this.hasRowPosChangedEvent && this.records.length > 0) {
			this.fncRowPosChangedEvent(this, nOldRow, nRow);
		}
	}


	return wReturn;
};

/**
 * 지정한 레코드 Index에 해당하는 Record를 삭제하는 Method <br/>
 * UpdateControl Property값에 따라 원본 Record가 보존되어 있어 복구가 가능<br/><br/>
 * SetColumn(nRow,nColIdx,varVal);<br/>
 * SetColumn(nRow,nColIdx,varVal,nPivotIndex);<br/>
 * SetColumn(nRow,strColID,varVal);<br/>
 * SetColumn(nRow,strColID,varVal,nPivotIndex);<br/>
 *
 * @param  nRow           변경할 Record Index.시작 Index는 0 입니다.
 * @param  nColIdx        변경할 Column Index. 
 * @param  strColID       변경할 Column ID.
 * @param  varVal         변경할 값.
 * @param  nPivotIndex    변경할 PivotCol의 Index. [Defualt Value = -1]
 * @return                (Boolean)성공 여부.
 */
DataSet.prototype.setColumn = function(nRow, varCol, varVal, nPivotIndex){ 
	if (this.dataSetType == "Pivot"){
		this._setPivotColumn(nRow, varCol, varVal, nPivotIndex);
		return;
	}

	if (!this.isRightRow(nRow)) return false;
	nRow = parseInt(nRow + "", 10); 

	// GroupKey Property를 사용하는 경우, Logical Record는 SetColumn Method로 값을 변경할수 없습니다.
	// 이 때는 Return 값은 False 입니다.
	if (this.records[nRow].RowType == "Logical"){
		//alert("집계데이터는 는 SetColumn Method로 값을 변경할수 없습니다");
		return false;
	}

	var strColID = (typeof(varCol) == 'number' ? this.getColID(varCol)  : varCol);
	if (!this.isRightColId(strColID)) return false;

	var oldFilterd = this.records[nRow]._filterd;
	var oldValue = this.records[nRow].values[strColID];
	// 같은 값으로 변경하면 Dataset의 Event가 발생하지 않습니다.
	if (oldValue + "" == varVal + "") {
		return true;
	} 

	// SetColumn Method가 호출되면 
	// CanColumnChange Event ->OnColumnChanged Event가 발생합니다.
	if (this.FireEvent){
		if (this.hasCanColumnChangeEvent) {
			var wResult = this.fncCanColumnChangeEvent(this, nRow, strColID, oldValue, varVal);
			// CanColumnChange Event에서 false를 return하면 OnColumnChanged Event는 발생하지 않습니다.
			// 이때 SetColumn Method의 Return값은 False 입니다.
			if (typeof(wResult)=="boolean" && !wResult) {
				return false;
			}            
		}     
	}

	var record = this.records[nRow];
	var value = this._getRawValue(strColID, varVal);

	if (this.UpdateControl){
		if (record.RowType == "Normal"){   
			record.RowType = "Update";
			
			var newRecord = record.clone();

			this.OriginBuffer[this.OriginBuffer.length] = newRecord;
			newRecord._orignalIndex = record._orignalIndex;
		}
		else if(record.RowType == "Update"){
			for(var i = 0; i < this.OriginBuffer.length; i++){
				if(record._id == this.OriginBuffer[i]._id){
					var isDiff = false;
					for(var _colId in record.values){
					    if(strColID == _colId){
					        isDiff = (value != this.OriginBuffer[i].values[_colId]);
							break;
					    }
						else if(record.values[_colId] != this.OriginBuffer[i].values[_colId]){
							isDiff = true;
							break;
						}
					}
					if( !isDiff ){
						delete this.OriginBuffer[i];
						this.OriginBuffer = this.OriginBuffer.slice(0, i).concat( this.OriginBuffer.slice(i + 1, this.OriginBuffer.length) );
						record.RowType = "Normal";
					}
					
					break;						
				}
			}
		}
	}

	record.values[strColID] = value;
	
	//  연결된 시트에서 빼는 동작 필요 
	if( this.instantUpdateControl ) this.updateControlValue(strColID, nRow);
	
	// 2016-05-12(차중훈) 수정
	/*
	if (this.FilterExpr.length > 0){
		var formula = this._UpdateFormulaNF(this.FilterExpr);
//		if (eval(formula.replace("nRowNum", nRow)) == false){
		if(eval(formula.replace(/nRowNum/g, nRow)) == false){
			this.records[nRow]._filterd = true;
			this.records.splice(nRow, 1);

	    	// rangeStart 한줄씩 앞으로 당기기
    	    this._updateRangeStartsAfter(nRow, -1);

		}
	}
	*/

	if (this.FireEvent){
		if (this.hasColumnChangedEvent) {
			var wResult = this.fncColumnChangedEvent(this, nRow, strColID, oldValue, varVal);
			// Event에서 false를 return하면 OnColumnChanged Event는 발생하지 않습니다.
			// 이때 SetColumn Method의 Return값은 False 입니다.
			if (typeof(wResult)=="boolean" && !wResult) {
				return false;
			}            
		}     
	}
	
	// 그룹정보 갱신  (변경전 필터링 되지 않은 상태였다면 그룹변경을 호출한다, 
	// 호출된 함수에서 필터링 되어 있다면 신규 데이터 갱신은 생략한다.
	if (!oldFilterd && this._GroupKey.length > 0){
		var colInfo = this.colInfos[strColID];

		var calcResult = null;
		var sumMethod  = colInfo.sumMethod;
		var sumFormula = colInfo._sumFormula;
		var sumField   = colInfo._sumField;
		var sumText    = colInfo._sumText;
		
		if (sumFormula.length > 0){
			calcResult = self[this.id + "_" + strColID + "_sumFunction"](nRow);
		} else if (sumField.length > 0){
			calcResult = record.values[sumField];
		} else if (sumText.length > 0){
			calcResult = sumText;
		} else {
			calcResult = varVal;
		}
		
		this._UpdateColumnValueToGroup(nRow, strColID, oldValue, calcResult);  
	}

	return true;
};

/**
 * Filter된 레코드를 포함한 Dataset에서 지정된 레코드 Index와 Column ID에 해당하는 값을 변경하는 Method<br/>
 * 
 * setColumnNF(nRow,nColIdx,varVal);<br/>
 * setColumnNF(nRow,nColIdx,varVal,nPivotIndex);<br/>
 * setColumnNF(nRow,strColID,varVal);<br/>
 * setColumnNF(nRow,strColID,varVal,nPivotIndex);<br/>
 *
 * @param  nRowNF         변경할 Record Index.시작 Index는 0 입니다.
 * @param  nColIdx        변경할 Column Index. 
 * @param  strColID       변경할 Column ID.
 * @param  varVal         변경할 값.
 * @param  nPivotIndex    변경할 PivotCol의 Index. [Defualt Value = -1]
 * @return                (Boolean)성공 여부.
 */
DataSet.prototype.setColumnNF = function(nRowNF, varCol, varVal, nPivotIndex){ 
	if (this.dataSetType == "Pivot"){
		this._setPivotColumnNF(nRowNF, varCol, varVal, nPivotIndex);
		return;
	}
	
	if (!this.isRightRow(nRowNF, true)) return false;
	
	nRowNF = parseInt(nRowNF + "", 10); 
	var nRow = this.getRecordRowNF(nRowNF);

	var strColID = (typeof(varCol) == 'number' ? this.getColID(varCol)  : varCol);
	if (!this.isRightColId(strColID)) return false;

	var oldFilterd = this.records[nRow]._filterd;
	var oldValue = this.buffer[nRowNF].values[strColID];
	// 같은 값으로 변경하면 Dataset의 Event가 발생하지 않습니다.
	if (oldValue + "" == varVal + "") {
		return true;
	}
	
	if (this.records[nRow].RowType == "Logical"){
		alert(getText("message_dataset_003", "집계데이터는 는 SetColumn Method로 값을 변경할수 없습니다"));
		return false;
	}

	// ??? Const Column과 Column 모두에 적용됩니다.

	// ??? GroupKey Property를 사용하는 경우, Logical Record는 SetColumn Method로 값을 변경할수 없습니다.
	// ??? 이 때는 Return 값은 False 입니다.

	// SetColumn Method가 호출되면 
	// CanColumnChange Event ->OnColumnChanged Event가 발생합니다.
	if (this.FireEvent){
		if (this.hasCanColumnChangeEvent) {
			if (nRow >= 0) {
				var wResult = this.fncCanColumnChangeEvent(this, nRowNF, strColID, oldValue, varVal);
				// CanColumnChange Event에서 false를 return하면 OnColumnChanged Event는 발생하지 않습니다.
				// 이때 SetColumn Method의 Return값은 False 입니다.
				if (typeof(wResult)=="boolean" && !wResult) {
					return false;
				}            
			}
			
		}     
	}

	var record = this.buffer[nRowNF];
	
	if (this.UpdateControl){
		if (record.RowType == "Normal"){   
			record.RowType = "Update";
			
			var newRecord = record.clone();
			
			this.OriginBuffer[this.OriginBuffer.length] = newRecord;
			newRecord._orignalIndex = record._orignalIndex;
		}
	}

	record.values[strColID] = this._getRawValue(strColID, varVal);
	
	//  연결된 시트에서 빼는 동작 필요 
	if (nRow >= 0) {
		if( this.instantUpdateControl ) this.updateControlValue(strColID, nRow);
	}

	if (this.FireEvent){
		if (this.hasColumnChangedEvent) {
			if (nRow >= 0) {
				var wResult = this.fncColumnChangedEvent(this, nRow, strColID, oldValue, varVal);
				// Event에서 false를 return하면 OnColumnChanged Event는 발생하지 않습니다.
				// 이때 SetColumn Method의 Return값은 False 입니다.
				if (typeof(wResult)=="boolean" && !wResult) {
					return false;
				}            
			}
		}     
	}
	
	// 그룹정보 갱신  (변경전 필터링 되지 않은 상태였다면 그룹변경을 호출한다, 
	// 호출된 함수에서 필터링 되어 있다면 신규 데이터 갱신은 생략한다.
	if (nRow >= 0 && !oldFilterd && this._GroupKey.length > 0){
		this._UpdateColumnValueToGroup(nRow, strColID, oldValue, varVal);  
	}

	return true;
};

/**
 * Dataset에서 변경하려는 값이 이상없는 지 체크로직을 호출하는 이벤트 <br/>
 * checkCanColumnChange(nRow, strColID, oldValue, varVal);<br/>
 *
 * @param  nRow           변경할 Record Index.시작 Index는 0 입니다.
 * @param  strColID       변경할 Column ID.
 * @param  oldValue       변경전 값
 * @param  varVal         변경후 값
 * @return                (Variant)지정한 레코드 위치와 Column ID에 해당하는 값. 해당하는 값이 없을 경우에는 Null을 Return 합니다.
 */
DataSet.prototype.checkCanColumnChange = function(nRow, strColID, oldValue, varVal){ 
	if (!this.hasCanColumnChangeEvent) return true;
	
	if (nRow >= 0) {
		var wResult = this.fncCanColumnChangeEvent(this, nRow, strColID, oldValue, varVal);
		// CanColumnChange Event에서 false를 return하면 OnColumnChanged Event는 발생하지 않습니다.
		// 이때 SetColumn Method의 Return값은 False 입니다.
		if (typeof(wResult)=="boolean" && !wResult) {
			return false;
		}            
	}
	return true;
}



/**
 * Dataset에서 지정한 Record Index와 Column ID에 해당하는 값을 가지고 오는 Method <br/>
 * GetColumn(nRow,nColIdx);<br/>
 * GetColumn(nRow,nColIdx,nPivotIndex);<br/>
 * GetColumn(nRow,strColID);<br/>
 * GetColumn(nRow,strColID,nPivotIndex);<br/>
 *
 * @param  nRow           변경할 Record Index.시작 Index는 0 입니다.
 * @param  nColIdx        변경할 Column Index. 
 * @param  strColID       변경할 Column ID.
 * @param  nPivotIndex    변경할 PivotCol의 Index. [Defualt Value = -1]
 * @return                (Variant)지정한 레코드 위치와 Column ID에 해당하는 값. 해당하는 값이 없을 경우에는 Null을 Return 합니다.
 */
DataSet.prototype.getColumn = function(nRow, varCol, nPivotIndex){ 
	if (this.dataSetType == "Pivot"){
		return this._getPivotColumn(nRow, varCol, nPivotIndex);
	}

	if (!this.isRightRow(nRow)) return null;
	nRow = parseInt(nRow + "", 10); 

	var strColID = (typeof(varCol) == 'number' ? this.getColID(varCol)  : varCol);
	if (!this.isRightColId(strColID)) return null;

	return this._getRawValue( strColID, this.records[nRow].values[strColID] );
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @param	{number}	nPivotIndex
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getColumnNF = function(nRow, varCol, nPivotIndex){ 
	if (this.dataSetType === "Pivot"){
		if (typeof nPivotIndex != "undefined"){
			return this._getPivotColumnNF(nRow, varCol, nPivotIndex);
		}
	}

	if (!this.isRightRow(nRow, true)) return null;
	var nRowNF = parseInt(nRow + "", 10); 

	var strColID = (typeof(varCol) == 'number' ? this.getColID(varCol)  : varCol);
	if (!this.isRightColId(strColID)) return null;

	return this.buffer[nRowNF].values[strColID];
};


//현재줄의 칼럼값
/**
 * @description	미결
 * @param	{number}	varCol
 * @param	{number}	nPivotIndex
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getCurrentColumn = function(varCol, nPivotIndex){ 
	if (this.dataSetType == "Pivot"){
		return this._getPivotCurrentColumn(varCol, nPivotIndex);
	}
	
	var nRow = this.Row;

	var strColID = (typeof(varCol) == 'number' ? this.getColID(varCol)  : varCol);
	if (!this.isRightColId(strColID)) return false;

	return this.records[nRow].values[strColID];
};

/**
 * 저장후에 초기화: Update, Delete, Insert 등의 일련 과정을 거친 변화된 Dataset의 상태를 Normal 상태로 만드는 Method
 *
 * @return            없음
 */
DataSet.prototype.applyChange = function(){ 
	// 원본데이터 처리 
	for (var nRow = this.OriginBuffer.length - 1; nRow >= 0; nRow--){
		this.OriginBuffer[nRow].clear();
		this.OriginBuffer.pop();
	} 
	
	// ???  필터링 데이터 처리

	// 레코드셋 처리
	for (var nRow = this.buffer.length - 1; nRow >= 0; nRow--){
		this.buffer[nRow].RowType = "Normal";
		this.buffer[nRow]._orignalIndex = nRow;
	}	

	// 변수값 초기화
	//this.Row = -1;
	// 2016-05-03 :  레코드가 있다면 Row는 0으로 초기화 / setRowPos 함수 호출하여 RowPosChange 이벤트도 발생
	if(this.buffer.length > 0){
		this.setRowPos(this.Row);
	}
	
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	
	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	
	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

	return;

};

/**
 * Update, Delete, Insert 등의 일련 과정을 거친 변화된 Dataset 을 이전상태로 초기화
 */
/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.reset = function(){ 
	
	// UpdateControl Property가 True인 경우에만 변경된 내용이 Orgin Buffer에 저장되므로 Reset이 가능
	if (!this.UpdateControl){
		alert(getText("message_dataset_004", "UpdateControl 값이 True인 경우에만 리셋이 가능합니다."));
		return;
	}
	
	// 임시 버퍼로 원하는 데이터만 옮긴다.
	var tmpBuffer = []; var tmpRow = 0; 
	for (var nRowORG = 0; nRowORG < this.OriginBuffer.length; nRowORG++){
		this.OriginBuffer[nRowORG].RowType = "Normal";
		tmpBuffer[tmpRow++] = this.OriginBuffer[nRowORG];
	}
	for (var nRowNF = 0; nRowNF < this.buffer.length; nRowNF++){
		if (this.buffer[nRowNF].RowType == "Normal"){
			tmpBuffer[tmpRow++] = this.buffer[nRowNF];
		}
	}
	
	// 메모리를 정리한다
	while (this.records.length > 0) {
		this.records.pop();
	}
	for(var i = this.buffer.length - 1; i >= 0 ; i--) {
		if (this.buffer[i].RowType != "Normal"){
			this.buffer[i].clear();
		}
		this.buffer.pop();
	}
	for(var i = this.OriginBuffer.length - 1; i >= 0 ; i--) {
		this.OriginBuffer.pop();
	}
	
	// 소트한다
	tmpBuffer.sort(function(record1, record2){return record1._orignalIndex - record2._orignalIndex});
	
	// 다시 정상적으로 붓는다
	for (var nRowNF = 0; nRowNF < tmpBuffer.length; nRowNF++){
		var record = tmpBuffer[nRowNF];
		record._orignalIndex = nRowNF;
		record.RowType = "Normal";
		record._filterd = false;
		
		this.records[nRowNF] = record;
		this.buffer[nRowNF] = record;
	}
	
	// 임시 메모리를 정리한다
	while (tmpBuffer.length > 0) {
		tmpBuffer.pop();
	}
	
	this.FilterExpr = "";
    this.FilterFunction = null;
	
	// Row Position의 값은 변경되지 않습니다. 
	// (단, Reset에 의해 존재하지 않게 되는 Row에 위치하고 있는 경우에는 마지막 Row로 RowPosition이 변경됩니다.)
	if (this.Row >= this.records.length){
		this.Row = this.records.length - 1;
	}
	
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	
	//2016-04-25(차중훈) 추가 : 연결된 컨트롤 값 업데이트
	if(this.Row >= 0){
		if( this.instantUpdateControl ) this.updateControlRowData(this.records[this.Row]);
	}

	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

	// Reset Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 9 입니다.
	if (this.hasLoadCompletedEvent) {
		var nErrorCode = [];
		var strErrorMsg = [];
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 9);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
		}            
	} 
	
	return;
};


/**
 * Dataset의 Column 정보와 Record를 모두 삭제하는 Method 입니다. 
 *
 * @return         Integer 삭제된 Record Count
 */
DataSet.prototype.clear = function(){ 
	var wReturn = this.clearData(); 

	for(var key in this.colInfos ) {
		delete this.colInfos[key];
	}
	this._colCount = 0;
	
	this.FilterExpr = "";
    this.FilterFunction = null;
	
	// 연결된 시트나 콤보를 리프래시함 
    if( this.instantUpdateControl ) this.updateControlList();

	return wReturn;
};

/**
 * Dataset의 Column 정보를 제외한 모든 Record를 삭제하는 Method 입니다.
 * 최초 Loading 된 Data도 전부 삭제되므로 복구할 수 없습니다.
 * @return         Integer 삭제된 Record Count
 */
DataSet.prototype.clearData = function(){ 
	var wReturn = 0;

	while(this.records.length > 0) {
		this.records.pop();
	}
	if (this.buffer.length > 0){
		for(var i = this.buffer.length - 1; i >= 0 ; i--) {
			this.buffer[i].clear();
			this.buffer.pop();
			wReturn++;
		}
	}
	if (this.OriginBuffer.length > 0){
		for(var i = this.OriginBuffer.length - 1; i >= 0 ; i--) {
			this.OriginBuffer[i].clear();
			this.OriginBuffer.pop();
		}
	}
	
	this.Row= -1; 
//	if(this.mappingRecordInfos instanceof Array) this.mappingRecordInfos.clear();
//	this.mappingRecordInfos = null;

	// clear Method가 완료되고 나면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 30 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 30);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
		}            
	} 
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	if( this.instantUpdateControl ) this._clearControlData();

	return wReturn;
};

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
DataSet.prototype._clearControlData = function(){
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		var ctl = controls[bindInfo.controlName];
		ctl.passEvent = true;
		if (bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1") {
			if ((ctl.listSaveType == LISTBOX_SAVE_MULTI  && ctl.listType == LISTBOX_TYPE_DATASELECT)) continue;
			ctl.setValue(ctl.defaultValue);
		} else if (bindInfo.controlType == "TextBox" || 
				   bindInfo.controlType == "CheckBox" || 
				   bindInfo.controlType == "Link" || 
				   bindInfo.controlType == "IFrame" || 
				   bindInfo.controlType == "ProgressBar1") {
			ctl.setValue(ctl.defaultValue);
		} else if (bindInfo.controlType == "OptionBox") {
			ctl.setValue(ctl.matchUpValue == "" ? 1 : 0);
		} else if (bindInfo.controlType == "Label" ) {
			ctl.setCaption("");
		} else if (bindInfo.controlType == "PictureBox" ) {
			ctl.setPicture("");
		} else if (bindInfo.controlType == "WebEdit" ) {
			ctl.setHTML("");
		} else if (bindInfo.controlType == "FlashPlayer" ) {
			ctl.flashUrl = ctl.flashUrl; 
			ctl.callMovie();
		} else if (bindInfo.controlType == "Sheet" ) {
		} else if (bindInfo.controlType == "lstSheet" ) {
		} else {
			ctl.setValue("");
		}
		ctl.passEvent = false;
	}
	
	return ;
};

/**
 * Dataset의 모든 레코드를 삭제하는 Method 입니다.
 * UpdateControl Property 값에 따라 원본 레코드가 보존되어 있어 복구가 가능합니다.
 * @return         Integer 삭제된 Record Count
 */
DataSet.prototype.deleteAll = function(){ 
	var wReturn = 0; 

	//deleteAll Method가 호출되면 OnRowDeleting Event -> OnLoadCompleted Event가 발생합니다.
	if (this.FireEvent){
		if (this.hasRowDeletingEvent) {
			var wResult = this.fncRowDeletingEvent(this, nRow, 1);  // "obj", "nRow", "nCount"
			if (typeof(wResult)=="boolean" && !wResult) {
				return -1;
			}            
		} 
	}

	// Row 위치는 -1 이 됩니다. (Row 위치를 얻는 Method나 Property 경우에 -1 값을 갖습니다.)
	this.Row = -1; 

	for(var nRow = this.records.length - 1; nRow >= 0 ; nRow--) {
		this._deleteOneRecord(nRow);
	}
	
	// 그룹정보 갱신 
	this._ResetGroup();
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	
	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();

	//이때 OnLoadCompleted Event의 nReason 값은 8 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 8);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return -1;
		}            
	} 

	return wReturn;
};

/**
 * Dataset이 Update(Delete, Insert, Update)되었는지 여부를 알려주는 Method 입니다.
 * UpdateControl Property 값에 따라 원본 레코드가 보존되어 있어 복구가 가능합니다.
 * 
 * @return         Boolean Dataset의 Update 여부
 */
DataSet.prototype.getUpdate = function(){ 
	for(var nRow= 0; nRow < this.buffer.length; nRow++) {
		if (this.buffer[nRow].RowType != "Normal"){ return true; }
	}
	for(var nRow= 0; nRow < this.OriginBuffer.length; nRow++) {
		if (this.OriginBuffer[nRow].RowType != "Normal"){ return true; }
	}
	return false;
};

/**
 * Orgin Buffer에 저장되어 있는 Record들 중 Record Index와 Column ID에 해당되는 값을 가지고 오는 Method 
 *   Orgin Buffer의 레코드들은 변경된 순서대로 저장됩니다.
 *   nRow는 Orgin Buffer의 레코드들의 Index 이며, 삭제시킨 레코드 번호가 아닙니다.
 *   GetOrgBuffCount Method를 호출한 후, Orgin Buffer에 저장된 레코드가 있을 경우에만 호출합니다.
 *   
 *   GetOrgBuffColumn(nRow,nColIdx);
 *   GetOrgBuffColumn(nRow,strColID);
 *   
 * @param  nRow           변경할 Record Index.시작 Index는 0 입니다.
 * @param  nColIdx        변경할 Column Index. 
 * @param  strColID       변경할 Column ID.
 * @return                Variant 지정한 Record Index와 Column ID에 해당하는 값. 해당하는 값이 없을 경우에는 Null을 Return 합니다
 */
DataSet.prototype.getOrgBuffColumn = function(nRow, varCol){ 
	if (!this.isRightRowOrg(nRow)) return null; 
	nRow = parseInt(nRow + "", 10); 

	var strColID = (typeof(varCol) == 'number' ? this.getColID(varCol)  : varCol);
	if (!this.isRightColId(strColID)) return null;

	// ??? Const Column과 Column을 모두 포함합니다. 

	return this.OriginBuffer[nRow].values[strColID];
	// 미결
	// GroupKey Property를 사용하는 경우, Logical 레코드는 삭제되어도 Orgin Buffer에 저장되지 않습니다.
	// 그러므로 GetOrgBuffColumn을 통해서 접근 할 수 없습니다.
};

/**
 * 지정된 Record Index와 Column ID의 변경전 Column 값을 가지고 오는 Method
 *   
 *   GetOrgColumn(nRow,nColIdx);
 *   GetOrgColumn(nRow,strColID);

 *   
 * @param  nRow           변경할 Record Index.시작 Index는 0 입니다.
 * @param  nColIdx        변경할 Column Index. 
 * @param  strColID       변경할 Column ID.
 * @return                Variant 지정한 Record Index와 Column ID에 해당하는 값. 해당하는 값이 없을 경우에는 Null을 Return 합니다
 */
DataSet.prototype.getOrgColumn = function(nRow, varCol){
	//레코드 인덱스 체크
	nRow = parseInt(nRow + "", 10);
	if( !this.isRightRow(nRow) ){
		return null;
	}
	
	//컬럼 인덱스, 아이디 체크
	var strColID = (typeof varCol == 'number') ? this.getColID(varCol) : varCol;
	if( !this.isRightColId(strColID) ){
		strColID = null;
		return undefined;
	}
	
	var record = this.records[nRow];
	var recordId = record._id;
	var orgRecord = null;
	var columnValue = null;
	var orgBufferCount = this.OriginBuffer.length;
	var i = 0;
	
	//일치하는 레코드가 없는 경우 현재 레코드의 값을 리턴
	columnValue = record.values[strColID];
	
	//값이 변경되어 OriginBuffer에 레코드가 존재하는지 체크하여 레코드가 존재한다면 컬럼 값을 리턴
	for(i = 0; i < orgBufferCount; i++, orgRecord = null){
		orgRecord = this.OriginBuffer[i];
		
		//레코드 ID가 일치하는 레코드가 있는 경우
		if( orgRecord._id == recordId ){
			columnValue = orgRecord.values[strColID];
			break;
		}
	}
	
	//메모리 해제
	orgRecord = null; record = null;
	recordId = null; strColID = null;

	return columnValue;
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.getOrgColumnNF = function(nRow, varCol){ 
	if (!this.isRightRow(nRow)) return null; 
	var nRowNF = parseInt(nRow + "", 10); 

	var strColID = (typeof(varCol) == 'number' ? this.getColID(varCol)  : varCol);
	if (!this.isRightColId(strColID)) return null;

	var record = this.buffer[nRowNF];
	for (var i = 0; i < this.OriginBuffer.length; i++){
		var orgRecord = this.OriginBuffer[i];
		if (orgRecord._id == record._id){
			return orgRecord.values[varCol];
		}
	}

	return null;
};

/**
 * Dataset에서 지정한 Column ID의 Column 값과 입력된 Value의 값이 일치하는 첫번째 레코드 Index를 얻어오는 Method 
 *   
 *   FindRow(strColID,strVal);
 *   FindRow(strColID,strVal,nStart);
 *   FindRow(strColID,strVal,nStart,nEnd);
 *   
 * @param  strColID       검색할 Dataset의 Column ID.
 * @param  strVal         검색할 Dataset의 Column Value.
 * @param  nStart      검색할 시작 레코드 Index, 시작 Index값은 0, nStart가 0보다 작으면, 전체를 검색 [Default Value = 0]
 * @param  nEnd        검색할 마지막 레코드 Index + 1, 지정된 값보다 1 작은 레코드까지 검색, nEnd가 0보다 작으면 nStart에서 끝까지 검색 [Default Value = -1]
 * @return                Integer Dataset의 Column ID와 Column Value에 해당하는 레코드 Index. 해당하는 값이 없을 경우에는 -1을 Return 합니다
 */
DataSet.prototype.findRow = function(strColID, strVal, nStart, nEnd){ 
	if (!this.isRightColId(strColID)) return -1;

	if (nStart == undefined) {
		nStart = 0;
	} else if (nStart < 0) {
		nStart = 0;
		nEnd = this.records.length
	}
	if (nEnd == undefined) {
		nEnd = this.records.length;
	} else if (nEnd < 0) {
		nEnd = this.records.length;
	}

	for (var nRow = nStart; nRow < nEnd; nRow++){
		if (this.records[nRow].values[strColID] + "" == strVal){
			if (this.records[nRow].RowType != "Logical"){
				return nRow;
			}
		}
	}	

	return -1;
};



/**
 * Dataset에서 Column ID의 Column값 중 입력된 Value의 값을 포함하는 첫번째 레코드 Index를 얻어오는 Method입니다.
 * Column 값중 앞부분이 문자열 입력된 Value의 값과 일치해야 합니다.  "LIKE%"와 같은 기능입니다.
 *   
 *   findRowAs(strColID,strVal);
 *   findRowAs(strColID,strVal,nStart);
 *    findRowAs(strColID,strVal,nStart,nEnd);
 *   
 * @param  strColID       검색할 Dataset의 Column ID.
 * @param  strVal         검색할 Dataset의 Column Value.
 * @param  nStart      검색할 시작 레코드 Index, 시작 Index값은 0, nStart가 0보다 작으면, 전체를 검색 [Default Value = 0]
 * @param  nEnd        검색할 마지막 레코드 Index + 1, 지정된 값보다 1 작은 레코드까지 검색, nEnd가 0보다 작으면 nStart에서 끝까지 검색 [Default Value = -1]
 * @return                Integer Dataset의 Column ID와 Column Value에 해당하는 레코드 Index. 해당하는 값이 없을 경우에는 -1을 Return 합니다
 */
DataSet.prototype.findRowAs = function(strColID, strVal, nStart, nEnd){ 
	if (!this.isRightColId(strColID)) return -1;
	
	strVal = (strVal.replace(/^%/, "")).replace(/%$/, "");

	if (nStart == undefined) {
		nStart = 0;
	} else if (nStart < 0) {
		nStart = 0;
		nEnd = this.records.length
	}
	if (nEnd == undefined) {
		nEnd = this.records.length;
	} else if (nEnd < 0) {
		nEnd = this.records.length;
	}

	for (var nRow = nStart; nRow < nEnd; nRow++){
		if (("" + this.records[nRow].values[strColID]).indexOf(strVal) >= 0){
			if (this.records[nRow].RowType != "Logical"){
				return nRow;
			}
		}
	}	

	return -1;
};
/**
 * @description	미결
 * @param	{string}	strColID
 * @param	{number}	strVal
 * @param	{number}	nStart
 * @param	{number}	nEnd
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.findRowNF = function(strColID, strVal, nStart, nEnd){ 
	if (!this.isRightColId(strColID)) return -1;

	if (nStart == undefined) {
		nStart = 0;
	} else if (nStart < 0) {
		nStart = 0;
		nEnd = this.buffer.length
	}
	if (nEnd == undefined) {
		nEnd = this.buffer.length;
	} else if (nEnd < 0) {
		nEnd = this.buffer.length;
	}

	for (var nRowNF = nStart; nRowNF < nEnd; nRowNF++){
		if (this.buffer[nRowNF].values[strColID] + "" == strVal){
			return nRowNF;
		}
	}	

	return -1;
};

/**
 * @description	미결
 * @param	{string}	strColID
 * @param	{string}	strVal
 * @param	{number}	nStart
 * @param	{number}	nEnd	
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.findRowNFAs = function(strColID, strVal, nStart, nEnd){ 
	if (!this.isRightColId(strColID)) return -1;

	if (nStart == undefined) {
		nStart = 0;
	} else if (nStart < 0) {
		nStart = 0;
		nEnd = this.records.length
	}
	if (nEnd == undefined) {
		nEnd = this.records.length;
	} else if (nEnd < 0) {
		nEnd = this.records.length;
	}

	var regex= new RegExp(RegExp.escape("" + strVal));

	for (var nRowNF = nStart; nRowNF < nEnd; nRowNF++){
		if (("" + this.buffer[nRowNF].values[strColID]).search(regex) >= 0){
			return nRowNF;
		}
	}	

	return -1;
};


/**
 * Logical Record를 제외한 유효한 Dataset의 Record 갯수를 얻어오는 Method 
 * SubSum Record가 없을 경우에는 Count Property, RowCount Property, GetRowCount Method, RowCount Method와 같습니다.
 * 단 Filter 또는 삭제된 레코드는 제외합니다.
 * 
 * SearchRow(strCmpExpr);
 * SearchRow(strCmpExpr,nStart);
 * SearchRow(strCmpExpr,nStart,nEnd);
 *   
 * @param  strCmpExpr     검색할 조건식.
 * @param  nStart      검색하고자 하는 시작 Record Index. [Default Value = 0]
 * @param  nEnd        검색하고자 하는 마지막 Record Index. [Default Value = -1]
 * @return                조건식에 맞는 첫번째 Record Index., 조건식을 만족하는 Record가 없을 경우에는 -1 을 Return

 */
DataSet.prototype.searchRow = function(strCmpExpr, nStart, nEnd){ 
	// 변수명을 바꾼다 
	var formula = this._UpdateFormula(strCmpExpr);
	var funcSearch = new Function("return function (nRowNum) { return " + formula + "; }")();
	
	for (var nRow = 0; nRow < this.records.length; nRow++){
//		if (eval(formula.replace("nRowNum", nRow))){
//		if( eval(formula.replace(/nRowNum/g, nRow)) ){
		if( funcSearch(nRow) ){
			return nRow;
		}
	}

	return -1;
};
// 주의 strCmpExpr내부에서도 NF함수를 써야함 , nRowNF 대입가능
/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{number}	nStart
 * @param	{number}	nEnd
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.searchRowNF = function(strCmpExpr, nStart, nEnd){ 
	// 변수명을 바꾼다 
	var formula = this._UpdateFormulaNF(strCmpExpr);
	var funcSearch = new Function("return function (nRowNum) { return " + formula + "; }")();
	
	for (var nRowNF = 0; nRowNF < this.buffer.length; nRowNF++){
//		if (eval(formula.replace("nRowNum", nRowNF))){
//		if( eval(formula.replace(/nRowNum/g, nRowNF)) ){
		if( funcSearch(nRowNF)){
			return nRowNF;
		}
	}

	return -1;
};

/**
 * Dataset의 내용을 지정한 Dataset에서 복사하는 Method 입니다.
 * 
 * Copy(objDataset);
 * Copy(strDataset);
 *   
 * @param  objDataset     복사할 Datset Object
 * @param  strDataset     복사할 Dataset ID
 * @return                복사된 Record 갯수. 복사할 Dataset이 존재하지 않으면 Null을 Return 합니다.
 */
DataSet.prototype.copy = function(varDataset){ 
	if(varDataset == undefined || varDataset == null) return 0;
	var objDataset = null;
	if (typeof(varDataset) == "string" ){
		objDataset = dataSets[varDataset];
	}else{
		objDataset = varDataset;
	}
	
	this.clear();

	for (var key in objDataset.colInfos){
		if( typeof(objDataset.colInfos[key]) == "function" ) continue;
		var colInfo = objDataset.colInfos[key];
		var newColInfo = new MiColInfo(colInfo.id, colInfo.size, colInfo.type);
		
		this._colCount++;
		this.colInfos[key] = newColInfo;
//		newColInfo.index = this._colCount - 1;
		newColInfo.index = colInfo.index;
	}

	var cnt = 0;
	for (var nRow=0; nRow < objDataset.records.length; nRow++){
		var fromRecord = objDataset.records[nRow];
		var toRecord = new MiRecord(this.colInfos);
		
		// toRecord의 디폴트 상태가 된다 : RowType = "Normal",_filterd = false, _selected = false;
		// 예외 추가 : RowType = "Logical" 인 경우 레코드의  RowType은 같이 복사된다.
		if(fromRecord.RowType == "Logical"){
			toRecord.RowType = "Logical";
		}

		for (var key in fromRecord.values){
			if( typeof(fromRecord.values[key]) == "function" ) continue;
			toRecord.values[key] = fromRecord.values[key];
		}
		
		this.records[nRow] = toRecord;

		toRecord._orignalIndex = this.buffer.length;
		this.buffer[this.buffer.length] = toRecord;
		
		cnt++;
	}

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	
	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

	return (cnt == 0 ? null : cnt);
};

/**
 * 지정한 Dataset의 Record의 지정한 Column의 값으로 Dataset의 지정한 Record의 지정한 Column의 값을 변경하는 Method
 * 
 * CopyColumn(nToRow,nToCol,strDataset,nFromRow,nFromCol);
 * CopyColumn(nToRow,strToCol,strDataset,nFromRow,strFromCol);
 * CopyColumn(nToRow,nToCol,objDataset,nFromRow,nFromCol);
 * CopyColumn(nToRow,strToCol,objDataset,nFromRow,strFromCol);
 *   
 * @param  objDataset     복사할 Datset Object
 * @param  strDataset     복사할 Dataset ID
 * @return                복사된 Record 갯수. 복사할 Dataset이 존재하지 않으면 Null을 Return 합니다.
 */
DataSet.prototype.copyColumn = function(nToRow, varToCol, varDataset, nFromRow, varFromCol){ 
	if(varDataset == undefined || varDataset == null) return 0;
	var objDataset = null;
	if (typeof(varDataset) == "string" ){
		objDataset = dataSets[varDataset];
	}else{
		objDataset = varDataset;
	}
	
	var strToCol = (typeof(varToCol) == 'number' ? this.getColID(varToCol) : varToCol);
	var strFromCol = (typeof(varFromCol) == 'number' ? objDataset.getColID(varFromCol) : varFromCol);
	
	if (!this.isRightColId(strToCol)) return null;
	if (!objDataset.isRightColId(strFromCol)) return null;

	if (!this.isRightRow(nToRow)) return null; 
	if (!objDataset.isRightRow(nFromRow)) return null; 

	var nToRow = parseInt(nToRow + "", 10); 
	var nFromRow = parseInt(nFromRow + "", 10); 

	this.setColumn(nToRow, strToCol, objDataset.getColumn(nFromRow, strFromCol));

	return 1;
};

/**
 * 지정한 Dataset에서 지정한 Record 전체를 복사해 DataSet의 지정한 Record를 변경하는 Method
 * Column 명이 서로 다를경우, 복사할 Column이 저장될 Column을 지정할 수 있습니다.
 * 
 *  CopyRow(nToRow,strDataset,nFromRow,strColInfo);
 *  CopyRow(nToRow,objDataset,nFromRow,strColInfo);
 *   
 * @param  nToRow         Target Dataset의 복사되어 변경 될 Row Index.
 * @param  strDataset     Source Dataset의 id를 문자열로 입력
 * @param  nFromRow       Source Dataset의 복사 할 Record Index.
 * @param  strColInfo     복사할 조건.[생략 가능] 생략시에는 같은 필드명의 값을 복사합니다. ToColumnID=FromColumnID,ToColumnID1=FromColumnID1 형식으로 입력합니다.
 * @return                없음
 */
DataSet.prototype.copyRow = function(nToRow, varDataset, nFromRow, strColInfo){ 
	if(varDataset == undefined || varDataset == null) return 0;
	var objDataset = null;
	if (typeof(varDataset) == "string" ){
		objDataset = dataSets[varDataset];
	}else{
		objDataset = varDataset;
	}

	if (!this.isRightRow(nToRow)) return null; 
	if (!objDataset.isRightRow(nFromRow)) return null; 

	nToRow = parseInt(nToRow + "", 10); 
	nFromRow = parseInt(nFromRow + "", 10); 

	// 옮기기 조건 분석
	var matchs = [];
	if (strColInfo != undefined){
		strColInfo = strColInfo.replace(/==/g, "=");
		var wArr = strColInfo.split(",");
		for (var i = 0; i < wArr.length; i++){
			var wArr1 = wArr[i].split("=");
			var toColumnID = wArr1[0].trim();
			var fromColumnID = wArr1[1].trim();

			matchs[fromColumnID] = toColumnID;
		}
	}
	else{
		for(var colId in objDataset.colInfos){
			if (typeof this.colInfos[colId] != "function" && this.colInfos[colId] != null && this.colInfos[colId] != undefined) {				
				matchs[colId] = colId;
			}
		}
	}

	var cnt = 0;

	var fromRecord = objDataset.records[nFromRow];
	var toRecord = this.records[nToRow];
	var orgRecord = toRecord.clone();


	for (var key in toRecord.values){
		if( typeof(toRecord[key]) == "function" ) continue;
		var toColumnID = key;
		var fromColumnID = key;

		if (typeof matchs[fromColumnID] != "function" && matchs[fromColumnID] != null && matchs[fromColumnID] != undefined){
			toColumnID = matchs[fromColumnID];
			toRecord.values[toColumnID] = fromRecord.values[fromColumnID];
		}
	}
	
	if (this.UpdateControl){
		// UpdateControl Property가 True인 경우에는 변경된 레코드의 RowType은 "update"가 됩니다.
		// 그리고 Orgin Buffer에 변경된 레코드가 추가됩니다.
		if (toRecord.RowType == "Normal"){
			this.OriginBuffer[this.OriginBuffer.length] = orgRecord;
			orgRecord._orignalIndex = toRecord._orignalIndex;
			toRecord.RowType = "Update";
		}
	}
	else {
		// UpdateControl Property가 False인 경우에는 추가된 레코드의 RowType은 "normal"이 됩니다.
	}
	
	if (this.FilterExpr.length > 0){
//		var formula = this._UpdateFormulaNF(this.FilterExpr);
//		if (eval(formula.replace("nRowNum", nToRow)) == false){
//		if(eval(formula.replace(/nRowNum/g, nToRow)) == false){
		if(this.FilterFunction(nToRow) == false){
			this.records[nToRow]._filterd = true;
			this.records.splice(nToRow, 1);
			
	    	// rangeStart 한줄씩 앞으로 당기기
	        this._updateRangeStartsAfter(nToRow, -1);
		}
	}
	
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._RefreshGroupByOneRecord(nToRow);
	}

	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	
	// 관련 시트데이터 수정
	if( this.instantUpdateControl ) this.updateControlRowData(this.records[nToRow]); // this.updateControlRowData(nToRow);
	

	return;
};

/**
 * 지정한 Dataset에서 지정한 Record 전체를 복사해 DataSet의 지정한 Record를 변경하는 Method
 * Column 명이 서로 다를경우, 복사할 Column이 저장될 Column을 지정할 수 있습니다.
 * 
 *  CopyToRow(nFromRow,strDataset,nToRow,strColInfo);
 *  CopyToRow(nFromRow,objDataset,nToRow,strColInfo);
 *   
 * @param  nToRow         Source Dataset의 복사되어 변경 될 Row Index.
 * @param  strDataset     Target Dataset의 id를 문자열로 입력
 * @param  nFromRow       Target Dataset의 복사 할 Record Index.
 * @param  strColInfo     복사할 조건.[생략 가능] 생략시에는 같은 필드명의 값을 복사합니다. ToColumnID=FromColumnID,ToColumnID1=FromColumnID1 형식으로 입력합니다.
 * @return                없음
 */
DataSet.prototype.copyToRow = function(nFromRow, varDataset, nToRow, strColInfo){ 
	if(varDataset == undefined || varDataset == null) return 0;
	var objDataset = null;
	if (typeof(varDataset) == "string" ){
		objDataset = dataSets[varDataset];
	}else{
		objDataset = varDataset;
	}

	if (!this.isRightRow(nToRow)) return null; 
	if (!objDataset.isRightRow(nFromRow)) return null; 

	nToRow = parseInt(nToRow + "", 10); 
	nFromRow = parseInt(nFromRow + "", 10); 

	// 옮기기 조건 분석
	strColInfo = strColInfo.replace(/==/g, "=");
	var matchs = [];
	if (strColInfo != undefined){
		var wArr = strColInfo.split(",");
		for (var i = 0; i < wArr.length; i++){
			var wArr1 = wArr[i].split("=");
			var toColumnID = wArr1[0];
			var fromColumnID = wArr1[1];

			matchs[fromColumnID] = toColumnID;
		}

	}

	var cnt = 0;

	var toRecord = objDataset.records[nFromRow];
	var fromRecord = this.records[nToRow];
	var orgRecord = toRecord.clone();

	for (var key in fromRecord.values){
		if( typeof(fromRecord.values[key]) == "function" ) continue;
		var toColumnID = key;
		var fromColumnID = key;

		if (matchs[fromColumnID] != null && matchs[fromColumnID] != undefined){
			toColumnID = matchs[fromColumnID];
			toRecord.values[toColumnID] = fromRecord.values[fromColumnID];
		}
	}
	matchs.clear();
	
	if (objDataset.UpdateControl){
		// UpdateControl Property가 True인 경우에는 변경된 레코드의 RowType은 "update"가 됩니다.
		// 그리고 Orgin Buffer에 변경된 레코드가 추가됩니다.
		if (toRecord.RowType == "Normal"){
			objDataset.OriginBuffer[this.OriginBuffer.length] = orgRecord;
			orgRecord._orignalIndex = toRecord._orignalIndex;
		}
		toRecord.RowType = "Update";
		
	} else {
		// UpdateControl Property가 False인 경우에는 추가된 레코드의 RowType은 "normal"이 됩니다.
	}
	
	if (objDataset.FilterExpr.length > 0){
//		var formula = objDataset._UpdateFormulaNF(objDataset.FilterExpr);
//		if (eval(formula.replace("nRowNum", nToRow)) == false){
//		if(eval(formula.replace(/nRowNum/g, nToRow)) == false){
		if(this.FilterFunction(nToRow) == false){
			objDataset.records[nToRow]._filterd = true;
			objDataset.records.splice(nToRow, 1);
			
	    	// rangeStart 한줄씩 앞으로 당기기
			objDataset._updateRangeStartsAfter(nToRow, -1);
			
		}
	}

	// 그룹정보 갱신 
	if (objDataset._GroupKey.length > 0){
		objDataset._RefreshGroupByOneRecord(nToRow);
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	objDataset.setBlocking();
	
	// 관련 시트데이터 수정
	objDataset.updateControlRowData(objDataset.records[nToRow]); // objDataset.updateControlRowData(nToRow);
	
	
	return;
};

/**
 * 지정한 Dataset을 기존 Dataset에 추가하는 Method 입니다.
 * 기존 Dataset의 마지막 레코드 다음에 추가됩니다.
 * 
 *  Append(strDatasetID);
 *  Append(objDataset);
  *  
 * @param  strDatasetID  Append 할 Dataset ID.
 * @param  objDataset    Append 할 Dataset Object
 * 
 * @return               없음
 */
DataSet.prototype.appendDataset = function(varDataset, arrStrColIds){ 
	if(varDataset == undefined || varDataset == null) return 0;
	var objDataset = null;
	if (typeof(varDataset) == "string" ){
		objDataset = dataSets[varDataset];
	}
	else{
		objDataset = varDataset;
	}
	
	var columnFixed = (typeof arrStrColIds != "undefined");

	// 기존 Dataset의 Column 정보가 없을 경우에는 추가할 Dataset으로 Column정보를 만듭니다.
	// 기존 Dataset의 Column 정보가 있을 경우에는 마지막 레코드 뒤에 추가할 Dataset의 레코드만 더합니다. 
	// 그러므로 추가할 Dataset과 기존의 Dataset의 Column 정보는 일치해야 합니다. 
	// 일치하지 않을 경우에는 Column ID에 상관없이 순차적으로 추가하므로 원하지 않은 결과를 얻을 수 있습니다.
	if (columnFixed){
		for (var i = 0; i < arrStrColIds.length; i++){
			var key = arrStrColIds[i];
			if (this.colInfos[key] == null || this.colInfos[key] == undefined){
				alert(getText("message_dataset_015", "칼럼 {0}.{1}는 받는 데이터 셋 {2}쪽에서 없는 칼럼입니다", [objDataset.id, key, this.id]));
				return;
			}
		}
	}
	else {
		for (var key in objDataset.colInfos){
			var fromColInfo = objDataset.colInfos[key];
			if( typeof(fromColInfo) == "function" ) continue;
			if (this.colInfos[key] == null || this.colInfos[key] == undefined){
				alert(getText("message_dataset_015", "칼럼 {0}.{1}는 받는 데이터 셋 {2}쪽에서 없는 칼럼입니다", [objDataset.id, key, this.id]));
				return;
			}
		}
	}
	
	var fromRecord = objDataset.records[nFromRow];
	var toRecord = this.records[nToRow];
	
	for (var nFromRow = 0; nFromRow < objDataset.records.length; nFromRow++){
		var fromRecord = objDataset.records[nFromRow];

		var toRecord = new MiRecord();
		var nToRow = this.records.length;
		this.records[nToRow] = toRecord;
		
		toRecord._orignalIndex = this.buffer.length;
		this.buffer[this.buffer.length] = toRecord;
		
        if (columnFixed){
    		for (var i = 0; i < arrStrColIds.length; i++){
    			var key = arrStrColIds[i];
    			toRecord.values[key] = fromRecord.values[key];
    		}
        }
        else {
    		for (var key in fromRecord.values){
    			if( typeof(fromRecord.values[key]) == "function" ) continue;
    			toRecord.values[key] = fromRecord.values[key];
    		}
        }
		
		toRecord.RowType = "Insert";
		
		// 필터가 있는 경우 필터적용
		if (this.FilterExpr.length > 0){
//			var formula = this._UpdateFormulaNF(this.FilterExpr);
//			if (eval(formula.replace("nRowNum", nToRow)) == false){
//			if(eval(formula.replace(/nRowNum/g, nToRow)) == false){
			if(this.FilterFunction(nToRow) == false){
				this.records[nToRow]._filterd = true;
				this.records.splice(nToRow, 1);
			}
		}
	}
	
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	
	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

	// AppendDataset Method가 완료되고 나면 OnLoadCompleted Event가 발생합니다. 
	// 이때 OnLoadCompleted Event의 nReason 값은 4 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 4);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return ;
		}            
	} 
	
	return;
};

//*** 산식처리 ***   *** 산식처리 ***   *** 산식처리 ***   *** 산식처리 ***   *** 산식처리 ***   *** 산식처리 *** 
/**
 * @description	미결
 * @param	{string}	includeFiltered
 * @param	{string}	strCmpExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @param	{number}	bCountNull
 * @return  {number}
 * @example	미결
 */
DataSet.prototype._Count = function(includeFiltered, strCmpExpr, nStart, nCnt, nPivotCol, bCountNull){ 

	// 변수명을 바꾼다 
	var compFormula = (includeFiltered ? this._UpdateFormulaNF(strCmpExpr) : this._UpdateFormula(strCmpExpr));
	var funcCompare = new Function("return function (nRowNum) { return " + compFormula + "; }")();

	var recordList = (includeFiltered ? this.buffer : this.records);
	var cnt = 0;
	for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
		if (recordList[nRow].RowType != "Logical"){
			if (compFormula.length == 0 || funcCompare(nRow)){ cnt++; }
		}
	}	

	return cnt;

	// 미결
	// PivotDataset에서 strCoIDl의 Column이 PivotKey나 GroupKey에 의해 지정된 Column이 아닐경우
	// (col,nPivotIndex,Start,Count) 의 형태로 입력 Argument가 인식됩니다.
	// PivotKey나 GroupKey에 의해 지정된 Column 이거나, PivotDataset이 아닐경우
	// 기존의 (Start,Count)의 형태로 처리됩니다.
};

/**
 * Logical Record를 제외한 유효한 Dataset의 Record 갯수를 얻어오는 Method 
 * SubSum Record가 없을 경우에는 Count Property, RowCount Property, GetRowCount Method, RowCount Method와 같습니다.
 * 단 Filter 또는 삭제된 레코드는 제외합니다.
 * 
 * Count();
 * Count(nStart);
 * Count(nStart, nCnt);
 * Count(nStart, nCnt, nPivotIndex);
 * Count(strCol,nPivotIndex);                   // ???
 * Count(strCol,nPivotIndex,nStart);         // ???
 * Count(strCol,nPivotIndex,nStart,nCnt);    // ???
 *   
 * @param  nStart      Dataset의 갯수를 가져올 기준 Index. [Default Value = 0]
 * @param  nCnt           얻고자 하는 Record 갯수 [Default Value = -1]
 * @param  strColID       검색할 Dataset의 Column ID.[Default Value = RowCount]
 * @param  nPivotIndex    값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @return                Integer Dataset의 레코드 개수, SubSum Record를 포함한 갯수
 */
DataSet.prototype.count = function(nStart, nCnt, nPivotIndex){ 

	if (nStart == undefined) { nStart = 0; }
	if (nCnt == undefined) { nCnt = this.records.length; }
	if (nPivotIndex == undefined) { nPivotIndex = -1; }

	var includeFiltered = false;
	var strCmpExpr = "";
	var bCountNull = false;

	return this._Count(includeFiltered, strCmpExpr, nStart, nCnt, nPivotIndex, bCountNull);
};

/**
 * Filter된 데이타를 포함한 Dataset에서 Logical Record를 제외한 유효한 Record 갯수를 얻어오는 Method 입니다. 
 * 
 * CountNF();
 * CountNF(nStart);
 * CountNF(nStart, nCnt);
 * CountNF(nStart, nCnt, nPivotIndex);
 * CountNF(strCol,nPivotIndex);						// ???
 * CountNF(strCol,nPivotIndex,nStart);           // ???
 * CountNF(strCol,nPivotIndex,nStart,nCnt);      // ???

 *   
 * @param  nStart      Dataset의 갯수를 가져올 기준 Index. [Default Value = 0]
 * @param  nCnt           얻고자 하는 Record 갯수 [Default Value = -1]
 * @param  nPivotIndex    값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @param  strCol         검색할 Dataset의 Column ID.[Default Value = RowCount]
 * @return                Integer Dataset의 레코드 개수, SubSum Record를 포함한 갯수
 */
DataSet.prototype.countNF = function(nStart, nCnt, nPivotIndex){ 
	var wReturn = 0; 
	if (nStart == undefined) { nStart = 0; }
	if (nCnt == undefined) { nCnt = this.buffer.length; }
	if (nPivotIndex == undefined) { nPivotIndex = -1; }

	var includeFiltered = true;
	var strCmpExpr = "";
	var bCountNull = false;

	return this._Count(includeFiltered, strCmpExpr, nStart, nCnt, nPivotIndex, bCountNull);

};
/**
 * @description	미결
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotIndex
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.totalCount = function(nStart, nCnt, nPivotIndex){ 

	if (nStart == undefined) { nStart = 0; }
	if (nCnt == undefined) { nCnt = this.buffer.length; }
	if (nPivotIndex == undefined) { nPivotIndex = -1; }

	return this.countNF(nStart, nCnt, nPivotIndex);
};

/**
 * 해당 범위안에서 조건식에 맞는 Record의 갯수를 구하는 Method  
 * 단 Filter 또는 삭제된 레코드는 제외합니다.
 * 
 * CaseCount(strCmpExpr);
 * CaseCount(strCmpExpr,nStart);
 * CaseCount(strCmpExpr,nStart,nCnt);
 * CaseCount(strCmpExpr,nStart,nCnt,nPivotCol);            // ???
 * CaseCount(strCmpExpr,nStart,nCnt,nPivotCol,bCountNull); // ???
 *   
 * @param  strCmpExpr     갯수를 구할 Record를 추출하기 위한 조건문.
 * @param  nStart         Dataset의 갯수를 가져올 기준 Index. [Default Value = 0]
 * @param  nCnt           얻고자 하는 Record 갯수 [Default Value = -1]
 * @param  nPivotCol      값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @param  bCountNull     PivotTable상에 존재하지 않는 레코드를 계산에 포함할지 지정.[Defualt Value = false]
 * @return                Integer Dataset의 레코드 개수, SubSum Record를 포함한 갯수
 */
DataSet.prototype.caseCount = function(strCmpExpr, nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) { nStart = 0; }
	if (nCnt == undefined) { nCnt = this.records.length; }
	if (nPivotCol == undefined) { nPivotCol = -1; }
	if (bCountNull == undefined) { bCountNull = false; }


	var includeFiltered = false;
	var bCountNull = false;

	return this._Count(includeFiltered, strCmpExpr, nStart, nCnt, nPivotCol, bCountNull);
};
/**
 * Filter된 데이타를 포함한 Dataset의 해당 범위안에서 조건식에 맞는 Record의 갯수를 구하는 Method 입니다.
 * 
 * CaseCountNF(strCmpExpr);
 * CaseCountNF(strCmpExpr,nStart);
 * CaseCountNF(strCmpExpr,nStart,nCnt);
 * CaseCountNF(strCmpExpr,nStart,nCnt,nPivotCol);
 * CaseCountNF(strCmpExpr,nStart,nCnt,nPivotCol,bCountNull);
 *   
 * @param  strCmpExpr     갯수를 구할 Record를 추출하기 위한 조건문.
 * @param  nStart         Dataset의 갯수를 가져올 기준 Index. [Default Value = 0]
 * @param  nCnt           얻고자 하는 Record 갯수 [Default Value = -1]
 * @param  nPivotCol      값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @param  bCountNull     PivotTable상에 존재하지 않는 레코드를 계산에 포함할지 지정.[Defualt Value = false]
 * @return                Integer Dataset의 레코드 개수, SubSum Record를 포함한 갯수
 */
DataSet.prototype.caseCountNF = function(strCmpExpr,nStart,nCnt,nPivotCol,bCountNull){ 
	if (nStart == undefined) { nStart = 0; }
	if (nCnt == undefined) { nCnt = this.buffer.length; }
	if (nPivotCol == undefined) { nPivotCol = -1; }
	if (bCountNull == undefined) { bCountNull = false; }

	var includeFiltered = true;
	var bCountNull = false;

	return this._Count(includeFiltered, strCmpExpr, nStart, nCnt, nPivotCol, bCountNull);

};
/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @param	{number}	bCountNull
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.totalCaseCount = function(strCmpExpr,nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) { nStart = 0; }
	if (nCnt == undefined) { nCnt = this.buffer.length; }
	if (nPivotCol == undefined) { nPivotCol = -1; }
	if (bCountNull == undefined) { bCountNull = false; }

	return this.caseCountNF(strCmpExpr,nStart, nCnt, nPivotCol, bCountNull);
};

/**
 * @description	미결
 * @param	{string}	includeFiltered
 * @param	{string}	strCmpExpr
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._Max = function(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	// 첫째 인수가 칼럼인지 산식인지 판단
	var isFormula = !this._IsColumnName(strValExpr);
	var compFormula = (includeFiltered ? this._UpdateFormulaNF(strCmpExpr) : this._UpdateFormula(strCmpExpr));
	var funcCompare = new Function("return function (nRowNum) { return " + compFormula + "; }")();


	var arrRecods = (includeFiltered ? this.buffer : this.records );

	var maxValue;

	// 변수명을 바꾼다 
	if (!isFormula){
		var strColID = strValExpr;

		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length == 0 || funcCompare(nRow)){
					if (maxValue == undefined){
						maxValue = record.values[strColID];
					} else {
						maxValue = (record.values[strColID] > maxValue ? record.values[strColID] : maxValue);
					}
				}
			}
		}

	} else {
		var formula = (includeFiltered ? this._UpdateFormulaNF(strValExpr) : this._UpdateFormula(strValExpr));
		var func = new Function("return function (nRowNum) { return " + formula + "; }")();
		
		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length ==0 || funcCompare(nRow)){
					var val = func(nRow);
					if (maxValue == undefined){
						maxValue = val;
					} else {
						maxValue = (val > maxValue ? val : maxValue);
					}
				}
			}
		}
	}

	return maxValue;
};

/**
 * 지정한 Dataset에서 지정한 Record 전체를 복사해 DataSet의 지정한 Record를 변경하는 Method
 * Column 명이 서로 다를경우, 복사할 Column이 저장될 Column을 지정할 수 있습니다.
 * 
 *  Max(strColID);
 *  Max(strColID,nStart);
 *  Max(strColID,nStart,nCnt,nPivotIndex);
 *  Max(strExpr);
 *  Max(strExpr,nStart);
 *  Max(strExpr,nStart,nCnt,nPivotIndex);
 *  Max(strColID,nPivotIndex);              // ???
 *  Max(strColID,nPivotIndex,nStart);       // ???
 *  Max(strColID,nPivotIndex,nStart,nCnt);  // ???
 *   
 * @param  strColID       최대값을 구할 Column ID
 * @param  strExpr        Record 별로 수행될 수식.
 * @param  nStart         최대값을 구하고자 하는 시작 Record Index. 시작 Index 0 입니다. [Default Value = 0]
 * @param  nPivotIndex    최대값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @param  nCnt           최대값을 구할 Record 갯수. [Defualt Value = RowCount]
 * @return                (Variant)구해진 최대값
 */
DataSet.prototype.max = function(strExpr, nStart, nCnt, nPivotIndex){ 
	var maxValue;
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	var includeFiltered = false;
	var strCmpExpr = "";

	return this._Max(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotIndex);
};
/**
 * @description	미결
 * @param	{string}	strExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotIndex
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.maxNF = function(strExpr, nStart, nCnt, nPivotIndex){ 
	var maxValue;
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	var includeFiltered = true;
	var strCmpExpr = "";

	return this._Max(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotIndex);

};
/**
 * @description	미결
 * @param	{string}	strExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotIndex
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.totalMax = function(strExpr, nStart, nCnt, nPivotIndex){ 
	var maxValue;
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	return this.maxNF(strExpr, nStart, nCnt, nPivotIndex);
};

/**
 * 지정한 Dataset에서 지정한 Record 전체를 복사해 DataSet의 지정한 Record를 변경하는 Method
 * Column 명이 서로 다를경우, 복사할 Column이 저장될 Column을 지정할 수 있습니다.
 * 
 *  CaseMax(strCmpExpr,strValExpr);
 *  CaseMax(strCmpExpr,strValExpr,nStart);
 *  CaseMax(strCmpExpr,strValExpr,nStart,nCnt);
 *  CaseMax(strCmpExpr,strValExpr,nStart,nCnt,nPivotCol);
 *  CaseMax(strCmpExpr,strValExpr,nStart,nCnt,nPivotCol,bCountNull);
 *   
 * @param  strCmpExpr     최대값을 구할 Record를 추출하기 위한 조건문.
 * @param  strColID       최대값을 구할 Column ID
 * @param  strExpr        Record 별로 수행될 수식.
 * @param  nStart         최대값을 구하고자 하는 시작 Record Index. 시작 Index 0 입니다. [Default Value = 0]
 * @param  nPivotIndex    최대값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @param  nCnt           최대값을 구할 Record 갯수. [Defualt Value = RowCount]
 * @return                (Variant)구해진 최대값
 */
DataSet.prototype.caseMax = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}


	var includeFiltered = false;
	return this._Max(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};

/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.caseMaxNF = function(strCmpExpr,strValExpr,nStart,nCnt,nPivotCol){
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	var includeFiltered = true;
	return this._Max(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};

/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.totalCaseMax = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	return this.caseMaxNF(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};

/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._Min = function(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	// 첫째 인수가 칼럼인지 산식인지 판단
	var isFormula = !this._IsColumnName(strValExpr);
	var compFormula = (includeFiltered ? this._UpdateFormulaNF(strCmpExpr) : this._UpdateFormula(strCmpExpr));
	var funcCompare = new Function("return function (nRowNum) { return " + compFormula + "; }")();

	var arrRecods = (includeFiltered ? this.buffer : this.records );
	var minValue;

	// 변수명을 바꾼다 
	if (!isFormula){
		var strColID = strValExpr;

		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length ==0 || funcCompare(nRow)){
					if (minValue == undefined){
						minValue = record.values[strColID];
					} else {
						minValue = (record.values[strColID] < minValue ? record.values[strColID] : minValue);
					}
				}
			}
		}

	} else {
		var formula = (includeFiltered ? this._UpdateFormulaNF(strValExpr) : this._UpdateFormula(strValExpr));
		var func = new Function("return function (nRowNum) { return " + formula + "; }")();

		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length ==0 || funcCompare(nRow)){
					var val = func(nRow);
					if (minValue == undefined){
						minValue = val;
					} else {
						minValue = (val < minValue ? val : minValue);
					}
				}
			}
		}
	}

	return minValue;
};
/**
 * @description	미결
 * @param	{string}	strExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotIndex
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.min = function(strExpr, nStart, nCnt, nPivotIndex){ 
	var minValue;
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	var includeFiltered = false;
	var strCmpExpr = "";

	return this._Min(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotIndex);
};
/**
 * @description	미결
 * @param	{string}	strExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotIndex
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.minNF = function(strExpr, nStart, nCnt, nPivotIndex){ 
	var minValue;
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	var includeFiltered = true;
	var strCmpExpr = "";

	return this._Min(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotIndex);

};
/**
 * @description	미결
 * @param	{string}	strExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotIndex
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.totalMin = function(strExpr, nStart, nCnt, nPivotIndex){ 
	var minValue;
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	return this.minNF(strExpr, nStart, nCnt, nPivotIndex);
};
/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.caseMin = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}


	var includeFiltered = false;
	return this._Min(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};

/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.caseMinNF = function(strCmpExpr,strValExpr,nStart,nCnt,nPivotCol){
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	var includeFiltered = true;
	return this._Min(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};

/**
 * @description	미결
 * @param	{string}	strCmpExpr
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.totalCaseMin = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	return this.caseMinNF(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};

/**
 * @description	미결
 * @param	{string}	includeFiltered
 * @param	{string}	strValExpr
 * @param	{number}	nStart
 * @param	{number}	nCnt
 * @param	{number}	nPivotCol
 * @return  {number}
 * @example	미결
 */
DataSet.prototype._Sum = function(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	// 첫째 인수가 칼럼인지 산식인지 판단
	var compFormula = (includeFiltered ? this._UpdateFormulaNF(strCmpExpr) : this._UpdateFormula(strCmpExpr));
	var funcCompare = new Function("return function (nRowNum) { return " + compFormula + "; }")();
	
	var isFormula = !this._IsColumnName(strValExpr);

	var arrRecods = (includeFiltered ? this.buffer : this.records );
	var sumValue  = 0.0;

	// 변수명을 바꾼다 
	if (!isFormula){
		var strColID = strValExpr;
		var dataType = this.colInfos[strColID].type.toUpperCase();
		// 20160317 김민우 Dataset의 type을 Char로 설정해서 sum의 결과 0으로 나오기 때문에 sum을 동작시킬 타입 중 Char형 추가
		if ("SMALLINT,INTEGER,MONEY,FLOAT,INT,DECIMAL,CURRENCY, CHAR".indexOf(dataType) <0) {
			return 0.0;
		}

		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length == 0 || funcCompare(nRow)){
					if (sumValue == undefined){
						sumValue = record.values[strColID];
					} else {
						//sumValue += record.values[strColID];
						//20160317 김민우 수정
						sumValue += record.values[strColID] * 1;
					}
				}
			}
		}

	} else {
		var formula = (includeFiltered ? this._UpdateFormulaNF(strValExpr) : this._UpdateFormula(strValExpr));
		var func = new Function("return function (nRowNum) { return " + formula + "; }")();
		
		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length == 0 || funcCompare(nRow)){
					var val = func(nRow);
					if (sumValue == undefined){
						sumValue = val;
					} else {
						sumValue += val;
					}
				}
			}
		}
	}

	return sumValue;
};

/**
 * 해당 범위안에서 조건에 맞는 Record를 추출한 후, 계산식을 적용해 Record들의 합계를 구하는 Method 입니다.
 * 
 *  Sum(strColID);
 *  Sum(strColID,nStart);
 *  Sum(strColID,nStart,nCnt);
 *  Sum(strColID,nStart,nCnt,nPivotIndex);
 *  Sum(strExpr);
 *  Sum(strExpr,nStart);
 *  Sum(strExpr,nStart,nCnt);
 *  Sum(strExpr,nStart,nCnt,nPivotIndex);
 *  Sum(strColID,nPivotIndex);
 *  Sum(strColID,nPivotIndex,nStart);
 *  Sum(strColID,nPivotIndex,nStart,nCnt);
 *   
 * @param  strColID       최대값을 구할 Column ID
 * @param  strExpr        Record 별로 수행될 수식.
 * @param  nStart         최대값을 구하고자 하는 시작 Record Index. 시작 Index 0 입니다. [Default Value = 0]
 * @param  nPivotIndex    최대값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @param  nCnt           최대값을 구할 Record 갯수. [Defualt Value = RowCount]
 * @return                (Decimal)조건에 맞는 Column의 값들의 합계.
 */
DataSet.prototype.sum = function(strExpr, nStart, nCnt, nPivotIndex){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	var includeFiltered = false;
	var strCmpExpr = "";
	return this._Sum(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotIndex);
};
DataSet.prototype.sumNF = function(strExpr, nStart, nCnt, nPivotIndex){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	var includeFiltered = true;
	var strCmpExpr = "";
	return this._Sum(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotIndex);
};

DataSet.prototype.totalSum = function(strExpr, nStart, nCnt, nPivotCol){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	return this.sumNF(strExpr, nStart, nCnt, nPivotCol);
};
DataSet.prototype.caseSum = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}
	if (bCountNull == undefined) {bCountNull = false;}

	var includeFiltered = false;

	return this._Sum(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);

};
DataSet.prototype.caseSumNF = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}
	if (bCountNull == undefined) {bCountNull = false;}

	var includeFiltered = true;

	return this._Sum(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};
DataSet.prototype.totalCaseSum = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	return this.caseSumNF(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull);
};


DataSet.prototype._Avg = function(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol){
	// 첫째 인수가 칼럼인지 산식인지 판단
	var compFormula = (includeFiltered ? this._UpdateFormulaNF(strCmpExpr) : this._UpdateFormula(strCmpExpr));
	var funcCompare = new Function("return function (nRowNum) { return " + compFormula + "; }")();
	var isFormula = !this._IsColumnName(strValExpr);

	var arrRecods = (includeFiltered ? this.buffer : this.records );
	var sumValue  = 0.0;var cnt = 0;

	// 변수명을 바꾼다 
	if (!isFormula){
		var strColID = strValExpr;
		var dataType = this.colInfos[strColID].type.toUpperCase();
		if ("SMALLINT,INTEGER,MONEY,FLOAT,INT,DECIMAL,CURRENCY".indexOf(dataType) <0) {
			return 0.0;
		}

		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length == 0 || funcCompare(nRow)){
					cnt++;
					if (sumValue == undefined){
						sumValue = record.values[strColID];
					} else {
						sumValue += record.values[strColID];
					}
				}
			}
		}

	} else {
		var formula = (includeFiltered ? this._UpdateFormulaNF(strValExpr) : this._UpdateFormula(strValExpr));
		var func = new Function("return function (nRowNum) { return " + formula + "; }")();
		for (var nRow = nStart; nRow < nStart + nCnt; nRow++){
			var record = arrRecods[nRow];
			if (record.RowType != "Logical"){
				if (compFormula.length == 0 || funcCompare(nRow)){
					cnt++;
					var val = func(nRow);
					if (sumValue == undefined){
						sumValue = val;
					} else {
						sumValue += val;
					}
				}
			}
		}
	}

	return sumValue / cnt;
};

/**
 * Dataset에서 요청한 Record 범위에 대해 Column ID의 값에 대한 평균값이나 Record 별 수식 수행 결과에 대한 평균값을 구하는 Method
 * 
 *  Avg(strColID);
 *  Avg(strColID,nStart);
 *  Avg(strColID,nStart,nCnt);
 *  Avg(strColID,nStart,nCnt,nPivotIndex);
 *  Avg(strExpr);
 *  Avg(strExpr,nStart);
 *  Avg(strExpr,nStart,nCnt);
 *  Avg(strExpr,nStart,nCnt,nPivotIndex);
 *  Avg(strColID,nPivotIndex);
 *  Avg(strColID,nPivotIndex,nStart);
 *  Avg(strColID,nPivotIndex,nStart,nCnt);

 *   
 * @param  strColID       최대값을 구할 Column ID
 * @param  strExpr        Record 별로 수행될 수식.
 * @param  nStart         최대값을 구하고자 하는 시작 Record Index. 시작 Index 0 입니다. [Default Value = 0]
 * @param  nPivotIndex    최대값을 구할 PivotCol의 Index. [Defualt Value = -1]
 * @param  nCnt           최대값을 구할 Record 갯수. [Defualt Value = RowCount]
 * @return                (Decimal)조건에 맞는 Column의 값들의 합계.
 */
DataSet.prototype.avg = function(strExpr, nStart, nCnt, nPivotCol){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	var includeFiltered = false;
	var strCmpExpr = "";

	return this._Avg(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotCol);

};
DataSet.prototype.avgNF = function(strExpr, nStart, nCnt, nPivotIndex){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}

	var includeFiltered = true;
	var strCmpExpr = "";

	return this._Avg(includeFiltered, strCmpExpr, strExpr, nStart, nCnt, nPivotIndex);
};

DataSet.prototype.totalAvg = function(strExpr, nStart, nCnt, nPivotIndex){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotIndex == undefined) {nPivotIndex = -1;}


	return this.avgNF(strExpr, nStart, nCnt, nPivotIndex);
};
DataSet.prototype.caseAvg = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.records.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}
	if (bCountNull == undefined) {bCountNull = false;}

	var includeFiltered = false;
	return this._Avg(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};
DataSet.prototype.caseAvgNF = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}
	if (bCountNull == undefined) {bCountNull = false;}

	var includeFiltered = true;
	return this._Avg(includeFiltered, strCmpExpr, strValExpr, nStart, nCnt, nPivotCol);
};
DataSet.prototype.totalCaseAvg = function(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull){ 
	if (nStart == undefined) {nStart = 0;}
	if (nCnt == undefined) {nCnt = this.buffer.length;}
	if (nPivotCol == undefined) {nPivotCol = -1;}

	return this.caseAvgNF(strCmpExpr, strValExpr, nStart, nCnt, nPivotCol, bCountNull);
};

//-------------------------  ( Select 관련부) -------------------------------------

/**
 * 특정 레코드가 Select 상태가 되도록 설정하는 Method 입니다.
 * Grid에서 Select된 상태를 확인하려면 MultiSelect Property가 True로 설정되어 있어야 합니다.
 * 단, CurRow Property값은 변경되지 않습니다
 * (CurRow Property와 유사 Method나 Property의 값도 변경되지 않습니다.)
 * 
 *  SelectRow(nRow);
 *  SelectRow(nRow,bCheck);
 *   
 * @param  nRow       선택할 레코드 Index
 * @param  bCheck     선택 여부.[Default Value = True]
 * @return            (Boolean)SelectRow Method를 수행하기 전에 상태
 */
DataSet.prototype.selectRow= function(nRow, bCheck){
	if (bCheck == undefined) bCheck = true;
	var wReturn = 0; 
	
	this.records[nRow]._selected = bCheck;
	
	// SelectRow Method가 완료되고 나면 OnColumnChanged Event가 발생합니다.
	// OnColumnChanged Event의 nRow 값만 의미가 있습니다.
	// 상태가 변경되지 않으면 Event가 발생하지 않습니다.
	if (this.FireEvent){
		if (this.hasColumnChangedEvent) {
			var wResult = this.fncColumnChangedEvent(this, nRow, "", "", null);
			// Event에서 false를 return하면 OnColumnChanged Event는 발생하지 않습니다.
			// 이때 SetColumn Method의 Return값은 False 입니다.
			if (typeof(wResult)=="boolean" && !wResult) {
				return false;
			}            
		}     
	}
	
	return wReturn;
};

/**
 * SelectRow Method를 통해서 선택된 Record나 Grid의 MultiSelect Property가  True로 설정되어 있을 때
 * 다중 선택된 Record를 삭제하는 Method 입니다.
 * 
 *  DeleteSelected();
 *  
 * @return            (Integer)삭제된 Record 갯수.
 */
DataSet.prototype.deleteSelected = function(){ 
	var deletedCnt = 0;
	for (var nRow=this.records.length - 1; nRow >= 0;  nRow--){
		if (this.records[nRow]._selected){
			this._deleteOneRecord(nRow);
			deletedCnt++;
		}
	}
	
	if (deletedCnt == 0){
		return 0;
	}

	// 그룹정보 갱신 
	this._ResetGroup();
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();

    // DeleteSelected Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason값은 8 입니다.
	// Row Position의 값은 변경되지 않습니다. 
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 8);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return -1;
		}            
	} 

	return deletedCnt;
};

/**
 * SelectRow Method를 통해서 선택된 Record나 Grid의 MultiSelect Property가  True로 설정되어 있을 때
 * 다중 선택된 Record를 삭제하는 Method 입니다.
 * 
 *  getSelect(nRow);
 *  
 * @param  nRow       선택할 레코드 Index
 * @return            (Boolean)특정 레코드가 선택되었는지의 여부 
 */
DataSet.prototype.getSelect = function(nRow){ 
	return (nRow < this.records.length ? this.records[nRow]._selected : false);
};

//-------------------------  ( Filter 관련부) -------------------------------------

/**
 * Dataset에서 조건식에 해당하는 Record만 선택하여 출력하는 Method 입니다.
 * 
 *  Filter(strFilterExpr);
 *  
 * @param  strFilterExpr  수행할 조건식
 * @return                없음
 */
DataSet.prototype.filter = function(strFilterExpr){ 
	if (strFilterExpr.length == 0) return;
	
	this.FilterExpr = strFilterExpr;
 	this.FilterFunction = new Function("return function (nRowNum) { return " + this._UpdateFormulaNF(this.FilterExpr) + "; }")();;
	
	// Filter Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 6 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 6);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert(strErrorMsg);
			return -1;
		}            
	} 
	
	// Row Position의 값은 0으로 변경됩니다.
	this.Row = 0;
	
	// Filter Method가 호출되면 Dataset을 UnFilter 상태로 만든 후에 Filter를 수행합니다.
	for (var nRow = 0; nRow < this.buffer.length; nRow++){
		if (this.buffer[nRow]._filterd){
			this.buffer[nRow]._filterd = false;
		}
	}

	// Dataset이 포함하고 Record 별로 조건식을 수행해서 TRUE인 경우의 Record만 걸러냅니다.
	// 조건식에서는 Dataset의 Property는 변수처럼 취급됩니다. 
//	var formula = this._UpdateFormulaNF(strFilterExpr);
	for (var nRow = 0; nRow < this.buffer.length; nRow++){
//		if (eval(formula.replace("nRowNum", nRow)) == false){
		///* 2016-03-25 수정 (차중훈) : filter 산식 nRowNum 문자열 전체 변환 수정
//		if (eval(formula.replace(/nRowNum/g, nRow)) == false){
		if (this.FilterFunction(nRow) == false){
			this.buffer[nRow]._filterd = true;
		}
		//*/ 2016-03-25 수정 (차중훈)
	}
	
	// records 재구성 
	this._remakeRecords();

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	
	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();

	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

	return;
};

/**
 * Filter Method로 Filtering된 Dataset을 원상태로 되돌리는 Method 입니다.
 * 
 *  UnFilter();
 *  
 * @return                (Integer)Filtering으로 보이지 않았던 Record 갯수.
 */
DataSet.prototype.unFilter = function(){ 
	// UnFilter  Method를 호출하기 전에 Filter 되지 않았다면 OnLoadCompleted Event가 발생하지 않습니다.
	// 물론 Row Position의 값도 변경되지 않습니다.
	if (this.FilterExpr.length == 0) return;
	
	// UnFilter Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 6 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 6);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return -1;
		}            
	} 

	// Row Position의 값은 0 으로 변경됩니다.
	this.Row = 0;
	// 2016-05-12(차중훈) 추가 : 필터 산식 해제합니다.
	this.FilterExpr = "";
    this.FilterFunction = null;

	var cnt = 0;
	for (var nRowNF = 0; nRowNF < this.buffer.length; nRowNF++){
		if (this.buffer[nRowNF]._filterd){
			this.buffer[nRowNF]._filterd = false;
			cnt++;
		}
	}
	
	// records 재구성 
	this._remakeRecords();

	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	
	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

	return cnt;
};


/**
 * Dataset의 Record들을 내림차순이나 오름차순으로 정렬하는 Method 입니다.
 * Column ID 자체에 공백문자가 사용 가능하기 때문에 strColList의 Column ID는 공백 없이 입력해야 합니다.
 * 
 *  Sort(strColList);
 *  Sort(strColList,bAscending);
 *  Sort(strColList,bAscending,bBigNull);
 *  Sort(strColList,bAscending,bBigNull,bGroupKey);
 *  
 * @param  strColList  정렬하고자하는 Dataset의 Column List. "ColumnID, ColumnID" 형식, 
 *                     Column ID별 정렬방법방법이 다를 경우 "ColumID:(D 또는 A), ..."   D:Descending, A: Ascending
 * @param  bAscending  오름차순인지 내림차순인지 여부 True:오름차순, Default Value = True
 * @param  bBigNull    NULL값을 값이 있는경우보다 크게 적용할지 여부 True면 NULL값이 값이 있는경우보다 큰것으로 적용[Default Value = False
 * @param  bGroupKey   GroupKey Property가 설정되어 있는 경우 Sort후 다시 Groupping할지 여부
 * @return            (Integer)성공이면 0, 실패하면 -1을 Return 
 */
DataSet.prototype.sort = function(strColList, bAscending, bBigNull, bGroupKey){ 
	if (bAscending == undefined) bAscending = true;
	if (bBigNull == undefined) bBigNull = false;
	if (bGroupKey == undefined) bGroupKey = false;
	
	if (strColList.trim().length==0){
		//alert(getText("message_dataset_016", "소트의 기준이 된는 칼럼 정보가 없습니다."));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_016", "소트의 기준이 된는 칼럼 정보가 없습니다."));
		return -1;
	}
	
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0 && this._strSortColList.length == 0){
		//alert(getText("message_dataset_017", "그룹핑이 된 경우에는 정렬동작을 호출할 수  없습니다."));
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_017", "그룹핑이 된 경우에는 정렬동작을 호출할 수  없습니다."));
		return -1;
	}
	
	// sort key 대입
	while (xyZ_$_SortKeys.length > 0) { xyZ_$_SortKeys.pop(); }
	var wArr = strColList.split(",");
	for (var i=0; i < wArr.length; i++){
		if (wArr[i].indexOf(":")>=0){
			var wArr1 = wArr[i].split(":");
			var strKey = wArr1[0].trim();
			var bAscendingGu = (wArr1[1].trim().toUpperCase() == "TRUE");
			xyZ_$_SortKeys[i] = new SortKey(strKey, bAscendingGu);
		} else {
			var strKey = wArr[i].trim();
			xyZ_$_SortKeys[i] = new SortKey(strKey, bAscending);
		}
	}

	this.buffer.sort(function(record1, record2){
				for (var i = 0; i < xyZ_$_SortKeys.length; i++){
					var sortKey = xyZ_$_SortKeys[i];
					var strKey = sortKey.strKey;
					if (sortKey.bAscending){
						if (record1.values[strKey] > record2.values[strKey]){
							return 1;
						} else if (record1.values[strKey] < record2.values[strKey]){
							return -1;
						} else {
							// 같은면 다음키 비교
						}
						
					} else {
						if (record1.values[strKey] < record2.values[strKey]){
							return 1;
						} else if (record1.values[strKey] > record2.values[strKey]){
							return -1;
						} else {
							// 같은면 다음키 비교
						}
					}
				}
				
				return 0;
	});

	this.records.sort(function(record1, record2){
		for (var i = 0; i < xyZ_$_SortKeys.length; i++){
			var sortKey = xyZ_$_SortKeys[i];
			var strKey = sortKey.strKey;
			if (sortKey.bAscending){
				if (record1.values[strKey] > record2.values[strKey]){
					return 1;
				} else if (record1.values[strKey] < record2.values[strKey]){
					return -1;
				} else {
					// 같은면 다음키 비교
				}
				
			} else {
				if (record1.values[strKey] < record2.values[strKey]){
					return 1;
				} else if (record1.values[strKey] > record2.values[strKey]){
					return -1;
				} else {
					// 같은면 다음키 비교
				}
			}	
		}
		
		return 0;
	});

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	
	
    // Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 5 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 5);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return -1;
		}            
	} 
	
	// Row Position의 값은 0 이 됩니다.
	this.Row = 0;
	return 0;
};

/**
 * Dataset을 구성하는 Const Column, Column, Record들이 표현된 XML을 지정하는 Property.
 * 
 *  Dataset.Contents [=ContentsXML];
 *  
 * @param  ContentsXML  정Dataset의 구성요소들이 표현된 XML. 
 */
DataSet.prototype.setContents = function(contents){
	this.loadXml(contents, true, false);
	return;
};

/**
 * Dataset을 구성하는 Const Column, Column, Record들이 표현된 XML을 지정하는 Property.
 * 참고: http://codingnuri.com/javascript-tutorial/xml-dom-overview.html
 *  LoadXml(xmlData);
 *  LoadXml(xmlData,bClear);
 *  LoadXml(xmlData,bClear,bBinary);
 *  
 * @param  xmlData    오름차순인지 내림차순인지 여부 True:오름차순, Default Value = True
 * @param  bClear     NULL값을 값이 있는경우보다 크게 적용할지 여부 True면 NULL값이 값이 있는경우보다 큰것으로 적용[Default Value = False
 * @param  bBinary    GroupKey Property가 설정되어 있는 경우 Sort후 다시 Groupping할지 여부
 * @return            (Integer)Load한 Record 갯수 
 */
DataSet.prototype.loadXml = function(xmlData, bClear, bBinary){ 
	if (bClear == undefined) bClear = true;
	if (bBinary == undefined) bBinary = false;  // 미결 

	
	var xmlDoc;
	if (window.DOMParser)
	{
	  parser=new DOMParser();
	  xmlDoc=parser.parseFromString(xmlData, "text/xml");
	}
	else // 인터넷 익스플로러
	{
	  xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
	  xmlDoc.async=false;
	  xmlDoc.loadXML(xmlData); 
	} 	
	
	// 기존 정보 클리어
	if (bClear){
		this.clear();
	}
	
	// Column 정보 대입 (ConstColumn 정의) 
	
	
	// colinfo 정보 대입
	var contentsNode = xmlDoc.getElementsByTagName('Contents')[0];
	
	var colInfoNodeList = contentsNode.getElementsByTagName('colinfo');
	for (var i = 0; i < colInfoNodeList.length; i++){
		var colInfoNode = colInfoNodeList[i];
		if (colInfoNode.nodeType != 1) continue;  //Element
		var id = colInfoNode.getAttribute('id');
		var size = (colInfoNode.hasAttribute('size') ? parseInt(colInfoNode.getAttribute('size')) : 256);
		var type = (colInfoNode.hasAttribute('type') ? colInfoNode.getAttribute('type') : "Char");
		
		var colInfo =  new MiColInfo(id, size, type);;

		this._colCount++;
		this.colInfos[id] = colInfo;
		colInfo.index = this._colCount - 1;
	}

	var cnt = 0;
	var recordNodeList = contentsNode.getElementsByTagName('record');
	for (var nRowNF = 0; nRowNF < recordNodeList.length; nRowNF++){
		var recordNode = recordNodeList[nRowNF];
		if (recordNode.nodeType != 1) continue;  //Element
		var record = new MiRecord(this.colInfos);
		record._orignalIndex = nRowNF;

		var colNodeList = recordNode.childNodes;
		for (var i = 0; i < colNodeList.length; i++){
			var colNode = colNodeList[i];
			if (colNode.nodeType != 1) continue;  //Element
			
			var id = colNode.nodeName;
			var value;
			for (var j=0; j < colNode.childNodes.length; j++){
				if (colNode.childNodes[j].nodeType == 3){    // Text
					value = colNode.childNodes[j].nodeValue;
					break;
				}
			}
			
			record.values[id] =  this._getRawValue(id, value);
		}
		
		this.buffer[nRowNF]  = record;
		this.records[nRowNF] = record;
		cnt++;
	}
	
	// Row Position의 값은 0 이 됩니다.
	this.Row = 0;

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	
	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

    // Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 0 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 0);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return 0;
		}            
	} 
	
	return cnt;
};


/**
 *	loadJson, appendJson, updateByJson 함수에서 시트를 제외한 나머지 컨트롤을 채울 때 사용하는 내부함수
 */
/**
 * @description	미결
 * @param	{string}	varRow
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype._updateControlSets = function(varRow){
	if (this.getRowCount() == 0) return ;
	if (varRow == undefined) varRow = this.Row;
	
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType == "Sheet" || bindInfo.controlType == "lstSheet") continue;
		
		var record = this.records[varRow];
		var ctl = controls[bindInfo.controlName];
		ctl.passEvent = true;
		if (bindInfo.controlType == "ComboBox" || bindInfo.controlType == "List1") {
			if ((ctl.listSaveType == LISTBOX_SAVE_MULTI  && ctl.listType == LISTBOX_TYPE_DATASELECT)) continue;
			if (bindInfo.colId.length > 0){
				ctl.setText(record.values[bindInfo.colId]);
			} else {
				ctl.setValue(record.values[bindInfo.colId_value]);
			}
		} else if (bindInfo.controlType == "TextBox" || 
				   bindInfo.controlType == "CheckBox" || 
				   bindInfo.controlType == "Link" || 
				   bindInfo.controlType == "IFrame" || 
				   bindInfo.controlType == "ProgressBar1") {
			ctl.setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "OptionBox") {
			//ctl.setValue(ctl.matchUpValue == record.values[bindInfo.colId] ? 1 : 0);
			controls[ctl.optionGroupName + ""].setValue(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "Label" ) {
			ctl.setCaption(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "PictureBox" ) {
			ctl.setPicture(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "WebEdit" ) {
			ctl.setHTML(record.values[bindInfo.colId]);
		} else if (bindInfo.controlType == "FlashPlayer" ) {
			ctl.flashUrl = record.values[bindInfo.colId]; 
			ctl.callMovie();
		} else if (bindInfo.controlType == "Sheet" ) {
		} else if (bindInfo.controlType == "lstSheet" ) {
		} else {
			ctl.setValue(record.values[bindInfo.colId]);
		}
		ctl.passEvent = false;
	}
};

/**
 * Dataset을 구성하는 Const Column, Column, Record들이 표현된 loadJson을 지정하는 Property.
 * 
  {
      "rowCount":10,
      "outDsList":"SEL1",
      "fieldList":[“DEPT_NM”, ” DEPT_NO”, ” NO”, ” NM”],
      "recordList":
          [
            {"DEPT_NM":"망원현대점","DEPT_NO":"202767","NO":"335512","NM":"2.5RT천정형"},
            {"DEPT_NM":"망원현대점","DEPT_NO":"202767","NO":"335512","NM":"2.5RT천정형"}
          ]
  }
 * 
 *  LoadJson(xmlData);
 *  
 * @param  jsonObject  오름차순인지 내림차순인지 여부 True:오름차순, Default Value = True
 * @return             (Integer)Load한 Record 갯수 
 */
DataSet.prototype.loadJson = function(jsonObject){ 
	// 기존 정보 클리어
	//this.clearData();
	
	while(this.records.length > 0) {
		this.records.pop();
	}
	if (this.buffer.length > 0){
		for(var i = this.buffer.length - 1; i >= 0 ; i--) {
			this.buffer[i].clear();
			this.buffer.pop();
		}
	}
	if (this.OriginBuffer.length > 0){
		for(var i = this.OriginBuffer.length - 1; i >= 0 ; i--) {
			this.OriginBuffer[i].clear();
			this.OriginBuffer.pop();
		}
	}
	this.Row= -1; 
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	if( this.instantUpdateControl ) this._clearControlData();
	// 기존 정보 클리어
	
	this.appendJson(jsonObject);
	
	if( this.instantUpdateControl ) this.updateControlRowData(0);
	
	return;
}

/**
 * Dataset을 구성하는 Const Column, Column, Record들이 표현된 loadJson을 지정하는 Property.
 * 
  {
      "rowCount":10,
      "outDsList":"SEL1",
      "fieldList":[“DEPT_NM”, ” DEPT_NO”, ” NO”, ” NM”],
      "recordList":
          [
            {"DEPT_NM":"망원현대점","DEPT_NO":"202767","NO":"335512","NM":"2.5RT천정형"},
            {"DEPT_NM":"망원현대점","DEPT_NO":"202767","NO":"335512","NM":"2.5RT천정형"}
          ]
  }
 * 
 *  appendJson(xmlData);
 *  
 * @param  jsonObject  오름차순인지 내림차순인지 여부 True:오름차순, Default Value = True
 * @return             (Integer)Load한 Record 갯수 
 */
DataSet.prototype.appendJson = function(jsonObject){ 
	
	var startRow = this.buffer.length;
	var startRowNF = this.records.length;
	var ndx = 0;
	// 줄수
	var cnt = 0;

	// 데이터 대입
	var recordList = jsonObject.recordList;
	var nRow = startRow;
	var nRowNF = startRowNF;
	
	for (var ndx = 0; ndx < recordList.length; ndx++){
		var JsonData = recordList[ndx];
		
		var record = new MiRecord(this.colInfos);
		record._orignalIndex = nRowNF;
		
		for (var key in JsonData){
			if( typeof(JsonData[key]) == "function" ) continue;
			var key0 = (key.toUpperCase() == "ID$" ? key.substring(0, key.length -1) : key);
			
			for (var wKey in this.colInfos){
				if( typeof(this.colInfos[wKey]) == "function" ) continue;
				
				if (wKey.toUpperCase() == key0.toUpperCase()){
				    record.values[wKey] =  this._getRawValue(wKey, JsonData[key]);	
				}
			}
		}
		
		this.buffer[nRowNF++]  = record;
		this.records[nRow++] = record;
		cnt++;
	}
	
	//CanRowPosChange 이벤트 로직 호출 / Row : -1 -> 0
	if (this.FireEvent){
		if (this.hasCanRowPosChangeEvent && cnt > 0) {
			var wResult = this.fncCanRowPosChangeEvent(this, -1, 0);  
			if (typeof(wResult)=="boolean" && !wResult) {
				return;
			}
		}
	}
	
	// Row Position의 값은 0 이 됩니다.
	this.Row = 0;

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();

	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

    // Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 0 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 0);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return 0;
		}            
	} 
	
	if (jsonObject.pageSize == 0 && cnt != jsonObject.rowCount){
		alert(getText("message_dataset_018", "줄수가 {0}이어야 하는데 실제 데이터 수는 {1}입니다", [jsonObject.rowCount, cnt]));
	}
	
	//RowPosChange 이벤트 로직 호출 / Row : -1 -> 0
	if (this.FireEvent){
		if (this.hasRowPosChangedEvent && cnt > 0) {
			this.fncRowPosChangedEvent(this, -1, this.Row);
		}
	}
	
	return cnt;
};

/**
 * @description	미결
 * @param	{string}	jsonObject
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.updateByJson = function(jsonObject){ 

	// 데이터 대입
	var recordList = jsonObject.recordList;
	if (recordList.length == 0) return;
	if (this.records.length == 0) return;
	if (this.Row < 0) return;
	
	// 해당줄 찾기
	var nRow = this.Row;
	var nRowNF = this.getRowIndexNF(nRow);
	
	var JsonData = recordList[0];
	
	var record = new MiRecord(this.colInfos);
	record._orignalIndex = nRowNF;
	
	for (var key in JsonData){
		if( typeof(JsonData[key]) == "function" ) continue;
		var key0 = (key.toUpperCase() == "ID$" ? key.substring(0, key.length -1) : key);
		
		for (var wKey in this.colInfos){
			if( typeof(this.colInfos[wKey]) == "function" ) continue;
			
			if (wKey.toUpperCase() == key0.toUpperCase()){
				record.values[wKey] =  this._getRawValue(wKey, JsonData[key]);	
			}
		}
	}
	
	this.buffer[nRowNF]  = record;
	this.records[nRow] = record;

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 관련 시트데이터 수정
	if( this.instantUpdateControl ) this.updateControlRowData(this.records[nRow]); // this.updateControlRowData(nToRow);

	// 연결된 시트나 콤보를 리프래시함  (updateControlRowData 로 수정)
	// this.updateControlList();

    // Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 0 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 0);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return 0;
		}            
	} 
	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		if( this.instantUpdateControl ) this._refreshGroupCation(true);
	}
	
	//RowPosChange 이벤트 로직 호출 / Row : -1 -> this.Row
	if (this.FireEvent){
		if (this.hasRowPosChangedEvent) {
			this.fncRowPosChangedEvent(this, -1, this.Row);
		}
	}
	
	return cnt;
};

/**/
/**
 * @description	미결
 * @param	{string}	jsonObject
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.loadJsonQry = function(jsonObject){ 
	// 기존 정보 클리어
	//this.clearData();
	while(this.records.length > 0) {
		this.records.pop();
	}
	if (this.buffer.length > 0){
		for(var i = this.buffer.length - 1; i >= 0 ; i--) {
			this.buffer[i].clear();
			this.buffer.pop();
		}
	}
	if (this.OriginBuffer.length > 0){
		for(var i = this.OriginBuffer.length - 1; i >= 0 ; i--) {
			this.OriginBuffer[i].clear();
			this.OriginBuffer.pop();
		}
	}
	this.Row= -1; 
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();
	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ) this.updateControlList();
	if( this.instantUpdateControl ) this._clearControlData();
	// 기존 정보 클리어
	
	this.appendJsonQry(jsonObject);
	
	if( this.instantUpdateControl ) this.updateControlRowData(0);
	
	return;
}

/**
 * @description	미결
 * @param	{string}	jsonObject
 * @return  {number}
 * @example	미결
 */
DataSet.prototype.appendJsonQry = function(jsonObject){ 
	
	var startRow = this.buffer.length;
	var startRowNF = this.records.length;
	var ndx = 0;
	// 줄수
	var cnt = 0;

	// 데이터 대입
//	var recordList = jsonObject.recordList;
	var recordList = (typeof jsonObject.recordList != "undefined") ? jsonObject.recordList : jsonObject;
	var nRow = startRow;
	var nRowNF = startRowNF;
	
	for (var ndx = 0; ndx < recordList.length; ndx++){
		var JsonData = recordList[ndx];
		
		var rowObject = JSON.parse(JSON.stringify(JsonData));
		if( typeof rowObject.__STATE__ == "undefined" ){
			rowObject.__STATE__ = null;
			delete rowObject.__STATE__;
		}
		
		var record = new MiRecord(this.colInfos);
		record._orignalIndex = nRowNF;
		if( typeof JsonData.__STATE__ != "undefined" )
			record._$uid = JsonData.__STATE__.rowId;
		record.values = rowObject;
		
		this.buffer[nRowNF++]  = record;
		this.records[nRow++] = record;
		cnt++;
	}
	
	//CanRowPosChange 이벤트 로직 호출 / Row : -1 -> 0
	if (this.FireEvent){
		if (this.hasCanRowPosChangeEvent && cnt > 0) {
			var wResult = this.fncCanRowPosChangeEvent(this, -1, 0);  
			if (typeof(wResult)=="boolean" && !wResult) {
				return;
			}
		}
	}
	
	// Row Position의 값은 0 이 됩니다.
	this.Row = 0;

	// 그룹정보 갱신 
	if (this._GroupKey.length > 0){
		this._ResetGroup();
	}
	
	// 데이터유뮤에 따른 콘트롤 블록킹
	this.setBlocking();

	// 연결된 시트나 콤보를 리프래시함 
	if( this.instantUpdateControl ){
		if (this._GroupKey.length <= 0){
			this.updateControlList();			
		}
	}

	if (this._GroupKey.length > 0){
		if( this.instantUpdateControl ) this._refreshGroupCation(true);
	}

    // Sort Method를 수행하면 OnLoadCompleted Event가 발생합니다. 
	// OnLoadCompleted Event의 nReason 값은 0 입니다.
	var nErrorCode = [];
	var strErrorMsg = [];
	if (this.hasLoadCompletedEvent) {
		this.fncLoadCompletedEvent(this, nErrorCode, strErrorMsg, 0);  //  "obj", "nErrorCode", "strErrorMsg", "nReason"
		if (nErrorCode.length > 0 && nErrorCode[0] > 0) {
			alert("ErrCode: " + nErrorCode[0] + "\n" + (strErrorMsg > 0 ? getText("message_dataset_002", "내용: {0}", [strErrorMsg[0]]) : ""));
			return 0;
		}            
	} 
	
	if (jsonObject.pageSize == 0 && cnt != jsonObject.rowCount){
		alert(getText("message_dataset_018", "줄수가 {0}이어야 하는데 실제 데이터 수는 {1}입니다", [jsonObject.rowCount, cnt]));
	}
	
	//RowPosChange 이벤트 로직 호출 / Row : -1 -> 0
	if (this.FireEvent){
		if (this.hasRowPosChangedEvent && cnt > 0) {
			this.fncRowPosChangedEvent(this, -1, this.Row);
		}
	}
	
	return cnt;
};

/**/

/**/
/**
 * @description	미결
 * @param	{string}	selectedOption
 * @return  {string}
 * @example	미결
 */
DataSet.prototype.getJsonStrBatch = function( selectedOption ){
	if( typeof selectedOption == "undefined" ) selectedOption = "N";
	
	var optionMatchs = {"N": 0, "U": 1, "A": 2};
	var flagMatchs	 = {"Insert": "I", "Update": "U", "Delete": "D", "Normal" : "N"};
	
	var sendOption = optionMatchs[selectedOption];
	var str = "";
	var recordstr = "";
	var val = "";
	
	var i = 0;
	var record = null;
	var key = "";
	
	//sendOption : 1(수정), 2(전체)인 경우에 OriginBuffer의 삭제된(Delete) 레코드를 전송
	if(sendOption > 0){
		for (i = 0; i < this.OriginBuffer.length; i++){
			record = this.OriginBuffer[i];
			
			if (record.RowType == 'Logical') continue;
			if (record.RowType != 'Delete') continue;
			
			recordstr = "";
			str += (("" + str).length > 0 ? ", {" : "{");

			for(key in record.values){
				val = record.values[key];
				
				if( typeof val == "function" ) continue;
				if( typeof val == "object" ) continue;
				if( typeof val == "string" ) val = val.replace(/\n/g, "\\n");
				
				recordstr += (("" + recordstr).length > 0 ? ", " : "") + ("\"" + key + "\": ") + ("\"" + ((val == null || typeof val == "undefined") ? this._getRawValue(key, val) : val) + "\"");
			}
			
			recordstr += ", \"IUDFlag\": \"" + flagMatchs[record.RowType] + "\"";
			
			str += recordstr;
			str += "}";
		}
	}
	//sendOption : 0(기본), 2(전체)인 경우에 records의 일반(Normal) 레코드를 전송하고 1(수정), 2(전체)인 경우에 records의 수정된(Update) 레코드를 전송
	for (i = 0; i < this.records.length; i++){
		record = this.records[i];
		
		if (record.RowType == 'Logical') continue;
		if (sendOption == 1 && record.RowType == 'Normal') continue;
		
		recordstr = "";
		str += (("" + str).length > 0 ? ", {" : "{");
		
		for(key in record.values){
			val = record.values[key];
			
			if( typeof val == "function" ) continue;
			if( typeof val == "object" ) continue;
			if( typeof val == "string" ) val = val.replace(/\n/g, "\\n");
			
			recordstr += (("" + recordstr).length > 0 ? ", " : "") + ("\"" + key + "\": ") + ("\"" + ((val == null || typeof val == "undefined") ? this._getRawValue(key, val) : val) + "\"");
		}
		
		recordstr += ", \"IUDFlag\": \"" + ((sendOption > 0) ? flagMatchs[record.RowType] : "N") + "\"";
		
		str += recordstr;
		str += "}";
	}
	
	str = "[" + str + "]";
	
	return str;
//	return encodeURIComponent( str );
}
/**/

/**/
/**
 * @description	미결
 * @param	{string}	selectedOption
 * @return  {string}
 * @example	미결
 */
//DataSet.prototype.getJsonData = function(){
//	var jsonDataStr = null;
//	var controlName = null;
//	var control = null;
//	var mappingInfo = null;
//	var columns = null;		var column = null;		var columnCount = 0;
//	var records = null;		var record = null;		var recordCount = 0;
//	var dataRows = null;	var dataRow = null;
//	var colId = null;		var value = null;
//	var i = 0, j = 0;
//	
//	for(controlName in controls){
//		control = controls[controlName];
//		
//		//함수인 경우 처리 안함
//		if( typeof control == "function" ){
//			controlName = null; control = null; continue;
//		}
//		//연결된 데이터셋 속성이 없는 경우에도 처리 안함
//		if( typeof control.linkedDataset == "undefined" ){
//			controlName = null; control = null; continue;
//		}
//		//연결된 데이터셋이 자신(데이터셋)과 다르면 처리 안함
//		if( control.linkedDataset !== this ){
//			controlName = null; control = null; continue;
//		}
//		
//		mappingInfo = {};
//		dataRows = [];
//		
//		//데이터셋-시트 컬럼 매핑 정보 생성
//		columns = control.columns;
//		columnCount = columns.length;
//		for(i = 0; i < columnCount; i++, column = null){
//			column = columns[i];
//			//컬럼의 linkedColumn 속성이 있는 경우에만 매핑정보를 생성
//			if( typeof column.linkedColumn == "string" && column.linkedColumn.trim().length > 0 )
//				mappingInfo[column.colId] = column.linkedColumn;
//		}
//		columns = null;
//		
//		//삭제 레코드 생성
//		records = control.dataSet.deletedData;
//		recordCount = records.length;
//		for(i = 0; i < recordCount; i++, j++, record = null, dataRow = null){
//			record = records[i];
//			dataRow = dataRows[j] = {};
//			
//			for(colId in mappingInfo){
//				value = record[colId];
//				dataRow[mappingInfo[colId]] = ("" + value).replace(/\n/g, "\\n");
//				value = null; colId = null;
//			}
//			
//			dataRow["IUDFlag"] = (record.__STATE__.updateGu == "E") ? "D" : record.__STATE__.updateGu;
//		}
//		records = null;
//		//삭제 외 레코드 생성
//		records = control.dataSet.data;
//		recordCount = records.length;
//		for(i = 0; i < recordCount; i++, j++, record = null, dataRow = null){
//			record = records[i];
//			dataRow = dataRows[j] = {};
//			
//			for(colId in mappingInfo){
//				value = record[colId];
//				dataRow[mappingInfo[colId]] = ("" + value).replace(/\n/g, "\\n");
//				value = null; colId = null;
//			}
//			
//			dataRow["IUDFlag"] = (record.__STATE__.updateGu == "X") ? "N" : record.__STATE__.updateGu;
//		}
//		records = null;
//		
//		//JSON 데이터 문자열로 변환
//		jsonDataStr = JSON.stringify(dataRows);
//		
//		//메모리 해제
//		dataRows.clear(); dataRows = null;
//		mappingInfo = null;
//		control = null;
//		controlName = null;
//	}
//	
//	if (jsonDataStr == null) {
//		jsonDataStr = this.getJsonStrBatch("A");
//	}
//	
//	return jsonDataStr;
//};

DataSet.prototype.getJsonData = function(){
	return this.getJsonStrBatch("A");
};
/**/

/**
 * Dataset의 내용을 XML 형식으로 저장해서 문자열로 얻어내는 Method
 * 참고: http://codingnuri.com/javascript-tutorial/xml-dom-overview.html
 *  SaveXML();
 *  SaveXML(strID);
 *  SaveXML(strID,strSaveType);
 *  SaveXML(strID,strSaveType,bHeader);
 *  SaveXML(strID,strSaveType,bHeader,codepage);

 *  
 * @param  strID    저장할때 사용할 Dataset ID. ID가 없거나 생략하면 현재 Dataset의 ID.[Default Value = ""]
 * @return          (String)Dataset의 내용을 변환한 문자열 
 */
DataSet.prototype.saveXML = function(strID){ 
	if (strID == undefined) strID = this.id;
	
	var xmlDoc;
	var text = "<dataset id='" + strID + "'></dataset>";
	
	if (window.DOMParser)
	{
		parser=new DOMParser();
		xmlDoc=parser.parseFromString(text,"text/xml");
	}
	else // 인터넷 익스플로러
	{
		xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
		xmlDoc.async=false;
		xmlDoc.loadXML(text); 
	} 	
	var datasetNode = xmlDoc.getElementsByTagName('dataset')[0];

	var contentNode = xmlDoc.createElement('Contents');
	datasetNode.appendChild(contentNode);

	for (var key in this.colInfos){
		var colInfo = this.colInfos[key];
		if( typeof(colInfo) == "function" ) continue;
		
		var colinfoNode = xmlDoc.createElement('colinfo');
		contentNode.appendChild(colinfoNode);
		
		var attNode = xmlDoc.createAttribute('id');
		attNode.nodeValue = colInfo.id;
		colinfoNode.setAttributeNode(attNode);
		
		attNode = xmlDoc.createAttribute('size');
		attNode.nodeValue = colInfo.size;
		colinfoNode.setAttributeNode(attNode);
		
		
		attNode = xmlDoc.createAttribute('type');
		attNode.nodeValue = colInfo.type;
		colinfoNode.setAttributeNode(attNode);
	}
	
	for (var i = 0; i < this.records.length; i++){
		var record = this.records[i];
		var recordNode = xmlDoc.createElement('record');
		contentNode.appendChild(recordNode);
		
		for (var key in record.values){
			if( typeof(record.values[key]) == "function" ) continue;
			var dataNode = xmlDoc.createElement(key);
			recordNode.appendChild(dataNode);
			
			var textNode = xmlDoc.createTextNode(record.values[key]);
			dataNode.appendChild(textNode);
		}
	}
	
	// 미결   파일로 저장 부분
	
	var wReturn = (new XMLSerializer()).serializeToString(xmlDoc);
	
	return wReturn;
};

/**
 * Dataset의 내용을 JSON STRING 형식으로 저장해서 문자열로 얻어내는 Method
 * 
       [
			{
				"VARCHAR_TMP1":"20151212",
				"VARCHAR_TMP2":"20151212",
				"flagwizware":"N"
			}
       ]
 * 
 *  saveJson();
 *  
 * @return          (String)Dataset의 내용을 변환한 문자열 
 */
DataSet.prototype.getJsonStr = function( selectedOption ){
	if (selectedOption == undefined) selectedOption = 0 ;
	
	var flagMatchs = {'Insert': 'I', 'Update': 'U', 'Delete': 'D', 'Normal' : 'N'};  
	
	var text = "";
	var str = "";
	var value = "";
	
	//selectedOption : 1(수정) 또는 2(전체) 인 경우에만 OriginBuffer 의 삭제된(Delete) 레코드를 전송
	if(selectedOption > 0){
		for (var i = 0; i < this.OriginBuffer.length; i++){
			var record = this.OriginBuffer[i];
			if (record.RowType == 'Logical') continue; 
			if (record.RowType != 'Delete') continue; 
			
			//if (i > 0 || this.records.length > 0 ){text += "			     ,\n";}
			if (text.length > 0){text += "			     ,\n";}
			text += "			    {\n";
			str = ""; value = "";
			for (var key in record.values){
				if( typeof(record.values[key]) == "function" ) continue;
				if (str.length > 0){str += ",\n";}
				value = record.values[key];
				value = value.replace(/\\/g, "\\\\").replace(/\\/g, "<BS>");
				text += "			        \"" + key + "\": \"" + encodeURIComponent( (value == undefined || value == null) ? this._getRawValue(value) : value ) + "\",\n";
			}
			text += "			        \"flagwizware\": \"" + flagMatchs[record.RowType] + "\"\n";
			text += "			    }\n";
		}		
		
		text += str;
	}
	
	for (var i = 0; i < this.records.length; i++){
		var record = this.records[i];
		if (record.RowType == 'Logical') continue; 
		if (selectedOption == 1 && record.RowType == 'Normal') continue; 
		
		if (text.length > 0){text += "			     ,\n";}
		text += "			    {\n";
		str = ""; value = "";
		for (var key in record.values){
			if( typeof(record.values[key]) == "function" ) continue;
			if (str.length > 0){str += ",\n";}
			value = record.values[key];
			value = value.replace(/\\/g, "\\\\").replace(/\\/g, "<BS>").replace(/\"/g, "\\\"");
			text += "			        \"" + key + "\": \"" + encodeURIComponent( (value == undefined || value == null) ? this._getRawValue(value) : value ) + "\",\n";
		}
		//
		if(selectedOption > 0){		text += "			        \"flagwizware\": \"" + flagMatchs[record.RowType] + "\"\n";		}
		else{						text += "			        \"flagwizware\": \"N\"\n";										}
		text += "			    }\n";
	}
//	//selectedOption : 1(수정) 또는 2(전체) 인 경우에만 OriginBuffer 의 삭제된(Delete) 레코드를 전송
//	if(selectedOption > 0){
//		for (var i = 0; i < this.OriginBuffer.length; i++){
//			var record = this.OriginBuffer[i];
//			if (record.RowType == 'Logical') continue; 
//			if (record.RowType != 'Delete') continue; 
//			
//			//if (i > 0 || this.records.length > 0 ){text += "			     ,\n";}
//			if (text.length > 0){text += "			     ,\n";}
//			text += "			    {\n";
//			str = ""; value = "";
//			for (var key in record.values){
//				if( typeof(record.values[key]) == "function" ) continue;
//				if (str.length > 0){str += ",\n";}
//				value = record.values[key];
//				value = value.replace(/\\/g, "\\\\").replace(/\\/g, "<BS>");
//				text += "			        \"" + key + "\": \"" + encodeURIComponent( (value == undefined || value == null) ? this._getRawValue(value) : value ) + "\",\n";
//			}
//			text += "			        \"flagwizware\": \"" + flagMatchs[record.RowType] + "\"\n";
//			text += "			    }\n";
//		}		
//		
//		text += str;
//	}
	
	return text;
};

/**
 * Dataset의 내용을 탭으로 구분된 STRING 형식으로 저장해서 문자열로 얻어내는 Method
 * 첫줄은 필드 명 다음줄부턴 데이터
      ACCT_YMD^t ACCT_NO^t VEND_NM^t AMT^t AMT_ITEM^t VEND_CD^t BIZMAN_NO^t^n
      1^t 2^t^t 3^t 5^t 6^t^n
      4^t 5^t^t 2^t 5^t 8^t^n
      9^t 2^t^t 1^t 5^t 6^t^n
 
 *  getTabbedStr();
 *  
 * @return          (String)Dataset의 내용을 변환한 문자열 
 */
DataSet.prototype.getTabbedStr = function(){ 
	
	var text = "";
	var arrKeys = []; var keyIndex = 0;
	for (var key in this.colInfos){
		if(typeof this.colInfos[key] == "function") continue;
//	    text += key + "^t";
//	    arrKeys[keyIndex++] = key;
		arrKeys[this.colInfos[key].index] = key;
	}
//	text += "^n/\"";
	text += "\\\"";
	
	for (var i = 0; i < this.records.length; i++){
		var record = this.records[i];
		if (record.RowType == 'Logical') continue; 
		
		for (var keyIndex=0; keyIndex < arrKeys.length; keyIndex++){
		    var key = arrKeys[keyIndex];
		    text += (record.values[key] + "^t");
		}
		
	    //text += key + "^n";
		text += "^n";
	}
	text += "\\\"";
	
	text = ((text + "").replace(/&/gi, "＆")).replace(/\?/gi, "？");
	text = ((text.replace(/\\\"/g, "<$DBLQ$>")).replace(/\"/g, "\\\"")).replace(/<\$DBLQ\$>/g, "\\\"");
	
	return text;
};


//*** Group ****         *** Group ****         *** Group ****         *** Group ****         *** Group ****         *** Group ****        
DataSet.prototype.getRowLevel = function(nRow){	
	nRow = (nRow == undefined ? this.Row : nRow);
	return this.records[nRow]._RowLevel;
};
DataSet.prototype.getRangeStart = function(nRow){	
	nRow = (nRow == undefined ? this.Row : nRow);
	return this.records[nRow].rangeStart;
};
DataSet.prototype.getRangeCount = function(nRow){	
	nRow = (nRow == undefined ? this.Row : nRow);
	return this.records[nRow].rangeCount;
};


DataSet.prototype.getGroupKey = function(){ return this._GroupKey;};

/**
 * @description	미결
 * @param	{string}	groupKey
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.setGroupKey = function(groupKey){
	this._GroupKey = groupKey;
	
	
	// 그룹키 레코드를 만든다 
	this._ResetGroup();
	
	if( this.instantUpdateControl ) this.updateControlList();
	
	if (this._GroupKey.length > 0){
	    this._refreshGroupCation(true);
	}

	// this._refreshPivot();
	return;
};

/**
 * 그룹키에 의존하지 않고 강제로 소팅할 경우에 사용한다 
 * Column ID 자체에 공백문자가 사용 가능하기 때문에 strColList의 Column ID는 공백 없이 입력해야 합니다.
 * 
 *  setSortColListOfGrouping(strSortColList);
 *  
 * @param  strSortColList  정렬하고자하는 Dataset의 Column List. "ColumnID, ColumnID" 형식, 
 *                         Column ID별 정렬방법방법이 다를 경우 "ColumID:(D 또는 A), ..."   D:Descending, A: Ascending
 */
 DataSet.prototype.setSortColListOfGrouping = function(strSortColList){
	this._strSortColList = strSortColList;
	return;
}


// 로지컬 데이터를 다시 만든다 
 /**
  * @description	미결
  * @return  {void}
  * @example	미결
  */
DataSet.prototype._ResetGroup = function(){
	if(this._GroupKey.length == 0) return;
	// STEP 1: 사전작업
	// 1-1: _jsonGroupKey가 생성되지 않았으면 생성한다.
	this._jsonGroupKey.clear();
	
	var levelKeyArr = this._GroupKey.split(",");
	for (var i=0; i < levelKeyArr.length; i++){
		var levelKey = levelKeyArr[i];
		if (levelKey.length == 0) continue;
		
		if (levelKey.indexOf(":") >= 0){
			this._jsonGroupKey[i] = levelKey.split(":");
		} else {
			this._jsonGroupKey[i] = levelKey;
		}
	}
	
	for (var key in this.colInfos){
		if( typeof(this.colInfos[key]) == "function" ) continue;
		this.colInfos[key]._isGroupKeyField = false;
	}
	for (var i=0; i < this._jsonGroupKey.length;i++){
		var varKeyName = this._jsonGroupKey[i];
		if (varKeyName instanceof Array) {
			for (var j=0; j < varKeyName.length;j++){
				var colId = varKeyName[j];
				this.colInfos[colId]._isGroupKeyField = true;
			}
			
		} else {
			var colId = this._jsonGroupKey[i];
			this.colInfos[colId]._isGroupKeyField = true;
		}
	}
	
	// 1-2: 그룹키 집계기준을 메모한다
	for (var key in this.colInfos) {
		var colInfo = this.colInfos[key];
		if( typeof(colInfo) == "function" ) continue;
		
		var colId = key;
		var sumMethod = colInfo.sumMethod;
		
		var posOfColon = sumMethod.indexOf(":");
		if (posOfColon < 0) continue;
		
		// _sumFormula를 미리 만들었거나 없는 경우가 아니면 sumMethod를 둘로 분리한다
		colInfo.sumMethod   = sumMethod.substring(0,posOfColon);
		colInfo._sumFormula = "";
		colInfo._sumField = "";
		colInfo._sumText = "";


		var sumFormula = sumMethod.substring(posOfColon + 1).trim();
		
		if (sumFormula == colId) { 
			// 칼럼 아이디와 같으면 디폴트 상태 
		
		} else if (typeof this.colInfos[sumFormula] != "undefined") { 
			// 칼럼 아이디중의 하나인 경우 	
			colInfo._sumField = sumFormula;
			
		} else if (sumFormula.indexOf("=") == 0) {
			// "=" 로 시작하면 산식임
			sumFormula = sumFormula.substring(sumFormula.indexOf("=") + 1);
			colInfo._sumFormula = sumFormula;
			self[this.id + "_" + colId + "_sumFunction"] = new Function("return " + "function (nRowNum, rowLevel) { return " + this._UpdateFormula(sumFormula) + "; }")();
		} else {
			// 나머지는 "text:캡션"인 경우임
			colInfo._sumText = sumFormula;
		}
		
	}
	
	for (var i=0; i < this._jsonGroupKey.length;i++){
		var varKey = this._jsonGroupKey[i];

		// 디폴트로 colId, sumMethod를 채윤다
		var colId = (varKey instanceof Array ? varKey[0] : varKey);
		var sumMethod = this.colInfos[colId].sumMethod;

		// 배열인 경우 하위키 루핑 돌며 sumMethod를 찾는다, gk위키중 맨 마지막의 sumMethod를 활용한다.
		if (varKey instanceof Array){
			// 하위키중 하나라도 sumMethod가 있으면 그메서드를 적용하고 
	        // 하위키 모두 있으면 나중에 나온것을 적용한다.
			for (var nSubIndex = 0; nSubIndex < varKey.length; nSubIndex++){
				var colId1 = varKey[nSubIndex];
				if (colId1 == "") continue;
				
				if (this.colInfos[colId1].sumMethod.trim().length != 0){
					colId = colId1;
					sumMethod = this.colInfos[colId1].sumMethod;
				}
			}
		}

		// sumMethod 필드가 비었으면 집계내지 않는다.
		var nGroupNdx = i + 1; 
		this._needGroupKey[nGroupNdx] = (sumMethod.length != 0);
	}

	// 1-3. 먼저 Logical rowType을 가진 데이터를 전부 지운다.
	//      그룹키가 없어도 있다 없어 지는 경우가 있으므로 두어야 한다 
	for (var nRowNF = this.buffer.length - 1; nRowNF >= 0; nRowNF--){
		var record = this.buffer[nRowNF];
		if (record.RowType == "Logical"){
			record.clear(); record = null;
			this.buffer.splice(nRowNF, 1);
			
		} else {
			record._jsonGroupKeyValue = this._makeGroupKey(record);
		}
	}
	
	// 1-4 beffer 배열로 records 배열 재구성 
	// 그룹키가 없으면 아래 로직들은 돌릴 필요가 없다.
	if (this._GroupKey.length == 0){
		// records 재구성 
		this._remakeRecords();
		return;
	}
	
	// 1-5 데이터 없는 경우  
	// 데이터가 없는 상태이면 아래 작업을 할 필요가 없다.
	if (this.records.length == 0){
		// records 재구성 
		return;
	}
	
	// STEP 2. 데이터 소팅
    if (this._strSortColList.length == 0){
		// 2-1 그룹키를 기준으로 소팅 
		this.buffer.sort(function(record1, record2){
//			return compareGroupKey(record1._jsonGroupKeyValue, record2._jsonGroupKeyValue);
			return compareRecordGroupKeyByGroupKey(record1._jsonGroupKeyValue, record2._jsonGroupKeyValue);	
		});	
    } else {
    	this.sort(this._strSortColList);
    }

	// 2-1 소팅된 버퍼데이터 배열로 records 재구성 
//	this._remakeRecords();
	var _makeGroupRecordSample = null;
	for(var nRowNF = 0; nRowNF < this.buffer.length; nRowNF++){
		if (!this.buffer[nRowNF]._filterd){
			_makeGroupRecordSample = this.buffer[nRowNF];
			break;
		}
	}

	// STEP 3. 레벨별 데이터 소계 채우기 
	// 3-1.  루핑하면서 끝 그룹키이 바뀌면 1레벨합계  다음은 2레벨합계, ...
	var levelCount = this._jsonGroupKey.length;
	
	// 3-1-1.  레벨별 그룹데이터를 만들고 첫데이터를 기준으로키값을 세팅한다
	var groupRecords = [null];
    for(var nGroupLevel = 1; nGroupLevel <= levelCount; nGroupLevel++){
    	// 그룹합을 만들지 않는 레벨은 스킵한다
    	if (!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;
    	
    	var groupRecord = groupRecords[nGroupLevel] = this._makeGroupRecord();
    	groupRecord._RowLevel = nGroupLevel;
    	
//    	var record = _makeSampleGroupRecord;
		groupRecord.rangeStart = 0;
		groupRecord._jsonGroupKeyValue = this._makeGroupLevelKey(_makeGroupRecordSample._jsonGroupKeyValue, nGroupLevel); 
		// 키값을 그룹레코드에 복사
		for (var key in this.colInfos){
			var colInfo = this.colInfos[key];
			if( typeof(colInfo) == "function" ) continue;
			if (colInfo._isGroupKeyField){
				groupRecord.values[key] = _makeGroupRecordSample.values[key];
			}
		}
    }
    
    // 3-1-2.  데이터를 처음부터 끝까지 돌리면서 레벨 정보를 집계한다
    var groupBuffer = [];
    var _recordGroupKey = [];
    
    for(var nRowNF = 0; nRowNF < this.buffer.length; nRowNF++){
		var record = this.buffer[nRowNF];
		if (record._filterd) continue;
		
	    for(var nGroupLevel = 1; nGroupLevel <= levelCount; nGroupLevel++){
	    	// 그룹합을 만들지 않는 레벨은 스킵한다
	       	if( !this._needGroupKey[levelCount - nGroupLevel + 1] ) continue;
	    	
	    	// 그룹레코드 생성
	    	var groupRecord = groupRecords[nGroupLevel];
	    	
	    	// 필터링 안된 첫데이터가 아니면서, 키가 바뀌었으면
	    	var keyChanged = ( this._checkIfGroupLevelKeyChanged(record, groupRecord._jsonGroupKeyValue, nGroupLevel) ); 

	    	// 키가 변경되었으면 논리레코드를 추가하고 새로운 레코드를 만든다 
    		if (keyChanged){
    			groupBuffer.push(groupRecord);
    			
    			// 레코드 초기화 
    			groupRecord = groupRecords[nGroupLevel] = this._makeGroupRecord();
    			groupRecord._RowLevel = nGroupLevel;
	    		
	    		groupRecord._jsonGroupKeyValue = this._makeGroupLevelKey(record._jsonGroupKeyValue, nGroupLevel); 
	    		// 키값을 그룹레코드에 복사
	    		for (var key in this.colInfos){
	    			var colInfo = this.colInfos[key];
					if( typeof(colInfo) == "function" ) continue;
					if (colInfo._isGroupKeyField){
						groupRecord.values[key] = record.values[key];
					}
	    		}
    		}
	    } // 그룹 레벨별 루프 종료 
	    
	} // this.buffer 루프 종료 
		
    // 3-1-3.  마지막에 남은 집계레코드를 표에 추가한다.
    for (var nGroupLevel=1; nGroupLevel <= levelCount; nGroupLevel++ ){
    	// 그룹합을 만들지 않는 레벨은 스킵한다
       	if (!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;

    	groupBuffer.push(groupRecords[nGroupLevel]);
    }
    
    // 3-1-4 buffer에 그룹핑 레코드 추가 후, buffer & groupBuffer sorting
    this.buffer = this.buffer.concat(groupBuffer);
    
    /*
    if (this._strSortColList.length == 0){
		this.buffer.sort(function(record1, record2){
//			return compareGroupKey(record1._jsonGroupKeyValue, record2._jsonGroupKeyValue);
			return compareRecordGroupKeyByRecord(record1, record2);
		});
    } else {
    	this.sort(this._strSortColList);
    }
     */
    this.buffer.sort(function(record1, record2){
    	return compareRecordGroupKeyByRecord(record1, record2);
    });
    
    groupBuffer.sort(function(record1, record2){
		return compareRecordGroupKeyByGroupKey(record1._jsonGroupKeyValue, record2._jsonGroupKeyValue);
	});
    
    // 3-1-5 소팅된 버퍼데이터 배열로 records 재구성 
    this._remakeRecords();
    
    // 3-1-6 그룹 레코드에 집계 메소드에 따른 값 및 rangeCount 계산
    var _recordGroupKey = null;
    var record = null;
    var _groupRecord = null;
    var rowIndex = -1;
    
    for(var nRowNF = 0; nRowNF < this.buffer.length; nRowNF++){
		record = this.buffer[nRowNF];
		if(record._filterd) continue;
		if (record.RowType == "Logical") continue;
		
		_recordGroupKey = null;
		
		for(var nGroupLevel=1; nGroupLevel <= levelCount; nGroupLevel++){
	    	// 그룹합을 만들지 않는 레벨은 스킵한다
	       	if(!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;
	       	
	       	_recordGroupKey = this._makeGroupLevelKey(record._jsonGroupKeyValue, nGroupLevel);
	       	rowIndex = binaryRecordGroupSearch(groupBuffer, _recordGroupKey, 0, groupBuffer.length);
	       	_groupRecord = groupBuffer[rowIndex];
	       	
	       	var _value 		= null;
	       	var _calcResult = null;
			var _sumMethod  = null;
			var _sumFormula = null;
			var _sumField   = null;
			var _sumText    = null;
	       	
	       	for(var colId in this.colInfos){
	       		var colInfo = this.colInfos[colId];
				if( typeof(colInfo) == "function" ) continue;
				if( colInfo._isGroupKeyField )		continue;
    			if( colInfo.sumMethod.length == 0 )	continue;
    			
    			_value		= _groupRecord.values[colId];
    			_sumMethod  = colInfo.sumMethod;
    			_sumFormula = colInfo._sumFormula;
    			_sumField   = colInfo._sumField;
    			_sumText    = colInfo._sumText;
    			
    			if( _sumFormula.length > 0 )	_calcResult = self[this.id + "_" + colId + "_sumFunction"](nRowNF, _groupRecord._RowLevel);
    			else if( _sumField.length > 0 )	_calcResult = record.values[sumField];
    			else if( _sumText.length > 0 )	_calcResult = _sumText;
    			else							_calcResult = record.values[colId];
    			
    			if( _sumMethod == "TEXT" )		_value = _calcResult;
    			else if( _sumMethod == "SUM" ) 	_value += _calcResult; 
    			else if( _sumMethod == "AVG" )	_value += _calcResult; 
    			else if( _sumMethod == "MAX" )	_value = (_value > _calcResult ? _value : _calcResult);
    			else if( _sumMethod == "MIN" )	_value = (_value < _calcResult ? _value : _calcResult);
    			else if( _sumMethod == "COUNT" ) _value += 1;
     			
    			_groupRecord.values[colId] = _value;
	       	}
	       	
	       	_groupRecord.rangeCount++;
		}
    }
    
    // 컬럼의 집계 함수가 AVG인 경우 AVG인 컬럼만 찾음
    var avgMethodColIDList = [];
    for(var colId in this.colInfos){
    	var colInfo = this.colInfos[colId];
    	if( typeof(colInfo) == "function" )	continue;
    	if( colInfo.sumMethod.length == 0 )	continue;
    	if( colInfo.sumMethod != "AVG" )	continue;
    	
    	avgMethodColIDList.push( colId );
    }
    // 컬럼의 집계 함수가 AVG인 열만 그룹 레코드의 평균 값을 구함
    if(avgMethodColIDList.length > 0){
    	for(var nRowNF = 0; nRowNF < groupBuffer.length; nRowNF++){
    		var _groupRecord = groupBuffer[nRowNF];
    		for(var c = 0; c < avgMethodColIDList.length; c++){
    			_groupRecord.values[avgMethodColIDList[c]] = _groupRecord.values[avgMethodColIDList[c]] / _groupRecord.rangeCount;
    		}
    	}
    }
    
    // 3-1-7 레코드의 rangeStart를 구함
    var groupLevelKeys = [];
    for(var nGroupLevel=1; nGroupLevel <= levelCount; nGroupLevel++){
    	groupLevelKeys[nGroupLevel] = null;
    }
    // 데이터셋의 records를 돌며 그룹 레코드의 그룹 레벨별 그룹키가 변할 경우 rangeStart를 기록한다 
    for(var nRow = 0, groupKeyStr = ""; nRow < this.records.length; nRow++){
    	record = this.records[nRow];
    	if (record.RowType == "Logical") continue;
		
		_recordGroupKey = null;
		
		for(var nGroupLevel=1; nGroupLevel <= levelCount; nGroupLevel++){
	       	if(!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;
	       	
	       	_recordGroupKey = this._makeGroupLevelKey(record._jsonGroupKeyValue, nGroupLevel);
	       	groupKeyStr = JSON.stringify(_recordGroupKey);
	       		       	
	       	if( groupLevelKeys[nGroupLevel] != groupKeyStr ){
	       		groupLevelKeys[nGroupLevel] = groupKeyStr;
	       		groupBuffer[binaryRecordGroupSearch(groupBuffer, _recordGroupKey, 0, groupBuffer.length)].rangeStart = nRow;
	       	}
	    }
    }
    
    if (this._strSortColList.length > 0){
    	this.sort(this._strSortColList);
    }
    
    // 3-1-8 메모리 초기화
    while(avgMethodColIDList.length > 0)	avgMethodColIDList.pop();	avgMethodColIDList = null;
    while(groupBuffer.length > 0)			groupBuffer.pop();			groupBuffer = null;
    
    // 4-1 연결된 시트의 소팅을 막음  (동작안함 ?)
//    var tmpBinds = [];
//	for (var key in this.dataBinds){
//		var bindInfo = this.dataBinds[key];
//		if( typeof(bindInfo) == "function" ) continue;
//		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") {
//			continue;
//		}
//		if (bindInfo.controlName in tmpBinds) {
//			continue;
//		}
//		AUIGrid.setProperty(controls[bindInfo.controlName].AUIcontrolId, "enableSorting" , false);
//		AUIGrid.refresh(controls[bindInfo.controlName].AUIcontrolId);
//		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
//	}
//	tmpBinds.clear();
    
	return;
};

/**
*     @description	미결
*     @param	{object}	groupBuffer
*     @param	{object}	grouKey
*     @param	{number}	start
*     @param	{number}	end
*     @return	{object}
*     @example	미결
*/
function binaryRecordGroupSearch(groupBuffer, groupKey, start, end){
	if( start > end ) return -1; //does not exist
	
	var middle = Math.floor((start + end) / 2);
	var groupKey1 = groupBuffer[middle]._jsonGroupKeyValue;
	
	var result = compareRecordGroupKeyByGroupKey(groupKey1 , groupKey);
	if( result > 0 ){ 
		return binaryRecordGroupSearch(groupBuffer, groupKey, start, middle - 1); 
	}
	if( result < 0 ){ 
		return binaryRecordGroupSearch(groupBuffer, groupKey, middle + 1, end); 
	}
	
	return middle; //found!
}

/**
*     @description	미결
*     @param	{object}	groupKey1
*     @param	{object}	groupKey2
*     @return	{boolean}
*     @example	미결
*/
function compareRecordGroupKeyByGroupKey(groupKey1, groupKey2){
	var key1 = null;		var key2 = null;
	var subKey1 = null;		var subKey2 = null;
	
	for(var i = 0; i < groupKey1.length; i++){
		key1 = groupKey1[i];
		key2 = groupKey2[i];
		
		if (key1 instanceof Array) {
			for(var j = 0; j < key1.length; j++){
				subKey1 = key1[j];
				subKey2 = key2[j];
				
				if( subKey1 != null && subKey2 == null )		return -1;
				else if( subKey1 == null && subKey2 != null )	return 1;
				else if( subKey1 > subKey2 )					return 1;
				else if( subKey1 < subKey2 )					return -1;
			}
		}
		else{
			if( key1 != null && key2 == null )		return -1;
			else if( key1 == null && key2 != null )	return 1;
			else if( key1 > key2 )					return 1;
			else if( key1 < key2 )					return -1;
		}
	}
	
	if( groupKey1.length < groupKey2.length )		return -1;
	
	return 0;
}

/**
*     @description	미결
*     @param	{object}	record1
*     @param	{object}	record2
*     @return	{boolean}
*     @example	미결
*/
function compareRecordGroupKeyByRecord(record1, record2){
	var groupKey1 = null;	var groupKey2 = null;
	var key1 = null;		var key2 = null;
	var subKey1 = null;		var subKey2 = null;
	
	groupKey1 = record1._jsonGroupKeyValue;
	groupKey2 = record2._jsonGroupKeyValue;
	
	for(var i = 0; i < groupKey1.length; i++){
		key1 = groupKey1[i];
		key2 = groupKey2[i];
		
		if (key1 instanceof Array) {
			for(var j = 0; j < key1.length; j++){
				subKey1 = key1[j];
				subKey2 = key2[j];
				
				if( subKey1 != null && subKey2 == null )		return -1;
				else if( subKey1 == null && subKey2 != null )	return 1;
				else if( subKey1 > subKey2 )					return 1;
				else if( subKey1 < subKey2 )					return -1;
			}
		}
		else{
			if( key1 != null && key2 == null )		return -1;
			else if( key1 == null && key2 != null )	return 1;
			else if( key1 > key2 )					return 1;
			else if( key1 < key2 )					return -1;
		}
	}
	
	if( groupKey1.length < groupKey2.length )		return -1;
	
	if(record1.RowType == "Logical" && record2.RowType != "Logical") return 1;
	if(record1.RowType != "Logical" && record2.RowType == "Logical") return -1;
	
	return 0;
}

/**
 * @description	미결
 * @param	{string}	nRow
 * @return  {void}
 * @example	미결
 */
DataSet.prototype._RefreshGroupByOneRecord = function(nRow){
	// 전제: 해당 레코드가 records 에서 빠진 상태를 가정한다
	var record = this.records[nRow];
	
	var arrGroupRows = this._FindGroupRows(nRow);
	
	var levelCount = this._jsonGroupKey.length;
    for (var nGroupLevel=1; nGroupLevel <= levelCount; nGroupLevel++ ){
    	// 그룹합을 만들지 않는 레벨은 스킵한다
    	if (!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;

    	var nGroupRow = arrGroupRows[nGroupLevel];
    	
    	for (var key in this.colInfos){
    		if( typeof(this.colInfos[key]) == "function" ) continue;
    		var sumMethod = this.colInfos[key].sumMethod;
    		if (sumMethod.length == 0) continue;

    		if (sumMethod == "COUNT"){
    			// 변화없음
    		} else {
    			var colId = this.colInfos[key].id;
    			this._UpdateGroupSum(colId, nGroupRow, null, nRow);
    		}
    	}
    }

	// 관련 시트데이터 수정
    if( this.instantUpdateControl ) this.updateControlRowData(record); // this.updateControlRowData(nRow);

	return;
};

// 칼럼값의 변경시 처리 
// 값을 이미 수정하고 그룹키가  아직 안 바뀌었다는 전제 
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	colId
 * @param	{string}	varFromValue
 * @param	{string}	varToValue
 * @return  {void}
 * @example	미결
 */
DataSet.prototype._UpdateColumnValueToGroup = function(nRow, colId, varFromValue, varToValue){
	
	var record = this.records[nRow];
	var sumMethod = this.colInfos[colId].sumMethod;

	// 병경된 칼럼이 그룹키 항목이 아니고 집계가 필요한 필드이면 
	// 합계를 갱신하고 빠져 나간다
	var isKeyColumn = this._isKeyColumn(colId);

	// 레벨별 줄번호를 찾아낸다
	var arrGroupRows = this._FindGroupRows(nRow);
	
	if (!isKeyColumn){
		if (sumMethod.length == 0) return;
		
		// 레벨별로 루핑돌면서 집계값을 갱신한다
		var levelCount = this._jsonGroupKey.length;
	    for (var nGroupLevel=1; nGroupLevel <= levelCount; nGroupLevel++ ){
	    	// 그룹합을 만들지 않는 레벨은 스킵한다
	    	if (!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;

	    	var nGroupRow = arrGroupRows[nGroupLevel];
	    	var groupRecord = this.records[nGroupRow];
	    	
	    	if (sumMethod == "SUM"){
	    		groupRecord.values[colId] += varToValue - varFromValue;
	    		// 연결콘트롤 갱신
	    		if( this.instantUpdateControl ) this.updateControlValue(colId, nGroupRow);
	    	} else if (sumMethod == "COUNT"){
	    	} else {
	    		this._UpdateGroupSum(colId, nGroupRow, null, nRow);
	    	}
	    }
	    return;
	}
	
	// 그룹키이면  먼저 레코드를 이동한다
	
	
	// 먼저 그룹들의 집계에서 뺀다 
	//   이때 하나도 없으면 그룹을 제거 한다  
    this._DeleteFromGroup(arrGroupRows, record, nRow);
    
	//    이동할 위치로 레코드를 옮긴다.
	//       - 삭제
	var nRowNF = this.getRowIndexNF(nRow);
	this.buffer.splice(nRowNF, 1);
	this.records.splice(nRow, 1);
	
	// rangeStart 한줄씩 앞으로 당기기
    this._updateRangeStartsAfter(nRow, -1);

    
	// 연결된 시트의 줄삭제 
    if( this.instantUpdateControl ) this.updateControlDelRow(record);

	// 새로운 키값을 부여한다 
	record._jsonGroupKeyValue = this._makeGroupKey(record);

	
	//  이동할 위치를 찾는다
	lastGroupSearchIndex = -1;
	var searchedRow = binaryGroupSearch(this.records, record, 0, this.records.length - 1); 
	// 못 찾았으면  searchedRow = -1 이고 lastGroupSearchIndex 값에 가장 근사치 값이 들어간다.
	var rowFrom = (searchedRow != -1 ? searchedRow : (lastGroupSearchIndex != -1 ? lastGroupSearchIndex : this.records.length));
	var rowTo = this.records.length;
	for (var nRow1 = rowFrom; nRow1 < this.records.length; nRow1++){
		var record1 = this.records[nRow1];
		if ((record1.RowType == "Logical" && compareGroupKey(record1._jsonGroupKeyValue , record._jsonGroupKeyValue) == 0) ||
			(record1.RowType != "Logical" && compareGroupKey(record1._jsonGroupKeyValue , record._jsonGroupKeyValue) > 0)) { 
			rowTo = nRow1; 
			break;
		}
	}
	
	//       - 추가
	if (rowTo == this.records.length){
		this.records.push(record);
		this.buffer.push(record);
		
	} else {
		var rowToNF = this.getRowIndexNF(rowTo); 
		this.buffer.splice(rowToNF, 0, record);
		this.records.splice(rowTo, 0, record);
		
    	// rangeStart 한줄씩 뒤로 미루기
    	this._updateRangeStartsAfter(rowTo, 1);
	}
	

	// 연결된 콘트롤 줄추가 
	if( this.instantUpdateControl ) this.updateControlAddRow(record, rowTo);
	
	// 새로운 그룹에 추가한다 
	// 이때 기존 그룹이 없으면 추가한다  (필터링 된 상태로 변경되었다면, 새로운 그룹은 갱신할 필요가 없다)
	if (!record._filterd){
		this._InsertToGroup(rowTo);
	    this._refreshGroupCation(true);
	}
	
	return;
};

/**
 * @description	미결
 * @param	{number}	arrGroupRows
 * @param	{object}	record
 * @param	{number}	nRow
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._DeleteFromGroup = function(arrGroupRows, record, nRow){
	// 전제: 해당 레코드가 records 에서 아직 삭제되지 않은 상태를 가정한다
	
	var levelCount = this._jsonGroupKey.length;
	var lastGroupRow = this.records.length;
    for (var nGroupLevel=levelCount; nGroupLevel >= 1; nGroupLevel-- ){
    	// 그룹합을 만들지 않는 레벨은 스킵한다
    	if (!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;
    	
    	var nGroupRow = arrGroupRows[nGroupLevel];
    	if (nGroupRow < 0) continue;
    	
    	lastGroupRow = nGroupRow; // 최종 그룹핑줄번호를 기억해서 이후 그루핑 정보에서  하나씩 당긴다
    	var groupRecord = this.records[nGroupRow];
    	
    	// 데이터가 한건도 없게되면 해당 소계를 삭제한다
    	if (groupRecord.rangeCount == 1){
    		this.buffer.splice(this.getRowIndexNF(nGroupRow), 1);
    		this.records.splice(nGroupRow, 1);
    		
	    	// rangeStart 한줄씩 앞으로 당기기
    	    this._updateRangeStartsAfter(nGroupRow, -1);
    	    

    		// 연결된 시트의 줄삭제 
    		this.updateControlDelRow(groupRecord);
    		
    	} else {
    		for (var key in this.colInfos){
    			var colInfo = this.colInfos[key];
    			if( typeof(colInfo) == "function" ) continue;
    			if (colInfo._isGroupKeyField) continue;
    			
    			var colId = key;
    			var sumMethod = colInfo.sumMethod;
    			if (sumMethod.length == 0) continue;

    			
    			var calcResult = null;
    			var sumMethod  = colInfo.sumMethod;
    			var sumFormula = colInfo._sumFormula;
    			var sumField   = colInfo._sumField;
    			var sumText    = colInfo._sumText;
    			
    			if (sumFormula.length > 0){
    				var rowLevel = groupRecord._RowLevel;
    				calcResult = self[this.id + "_" + colId + "_sumFunction"](nRow, rowLevel);
    			} else if (sumField.length > 0){
    				calcResult = record.values[sumField];
    			} else if (sumText.length > 0){
    				calcResult = sumText;
    			} else {
    				calcResult = record.values[colId];
    			}
    			
    			if (sumMethod == "SUM"){
    				groupRecord.values[colId] -= calcResult;
    			} else if (sumMethod == "COUNT"){
    				groupRecord.values[colId]--;
    			} else {
    				this._UpdateGroupSum(colId, nGroupRow, record, nRow); // 세번째 인수는 삭제할 레코드를 합계에서 제외하기 위해서
    			}
    		}
    		// 관련 시트데이터 수정
    		this.updateControlRowData(groupRecord); // this.updateControlRowData(nGroupRow);

    		groupRecord.rangeCount--;
    	}
    }
    
    // 이후의 데이터의  rangeStart 속성 정리 
/*
    for (var nRow1 = lastGroupRow; nRow1 < this.records.length; nRow1++){
    	var record1 = this.records[nRow1];
    	if (record1.RowType != "Logical") continue;
    	if (record1.rangeStart >= nGroupRow) {
    		record1.rangeStart--;
    	}
    }
*/	
	return record;
};

/**
 * @description	미결
 * @param	{string}	nNewNum
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._InsertToGroup = function(nNewNum){
	// 전제: 해당 레코드가 records의 새로운 위치에 추가된 상태를 가정한다
	var record = this.records[nNewNum];
	
	var arrGroupRows = this._FindGroupRows(nNewNum);
	
	var levelCount = this._jsonGroupKey.length;
	var lastGroupRow = this.records.length;
    for (var nGroupLevel = 1 ; nGroupLevel <= levelCount; nGroupLevel++ ){
    	// 그룹합을 만들지 않는 레벨은 스킵한다
    	if (!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;

    	var nGroupRow = arrGroupRows[nGroupLevel];
    	lastGroupRow = nGroupRow; // 최종 그룹핑줄번호를 기억해서 이후 그루핑 정보에서  하나씩 밀친다다
    	if (nGroupRow == -1){
    		// 집계레코드가 없으면 추가
    		nGroupRow = this._findGroupInsertRowPosition(nNewNum, record._jsonGroupKeyValue);
    		var nGroupRowNF = (nGroupRow < this.records.length ? this.getRowIndexNF(nGroupRow) : this.buffer.length);//;
    		
    		for (var tmpRowNum = nGroupRowNF; tmpRowNum < this.buffer.length;  tmpRowNum++){
    			if (this.buffer[tmpRowNum].RowType == "Logical" && this.buffer[tmpRowNum]._RowLevel < nGroupLevel){
    				nGroupRowNF++; nGroupRow++;
    			} else {
    				break;
    			}
    		}
    		
	    	var groupRecord = this._makeGroupRecord();
	    	//groupRecord._RowLevel = levelCount - nGroupLevel + 1;
	    	groupRecord._RowLevel = nGroupLevel;
	    	groupRecord.rangeStart = nNewNum;
	    	groupRecord.rangeCount = 0;
			// 키값을 그룹레코드에 복사
			for (var key in this.colInfos){
				var colInfo = this.colInfos[key];
				if( typeof(colInfo) == "function" ) continue;
				if (colInfo._isGroupKeyField){
					groupRecord.values[key] = record.values[key];
				}
			}
			groupRecord._jsonGroupKeyValue = this._makeGroupLevelKey(record._jsonGroupKeyValue, nGroupLevel); 

	    	
			this.buffer.splice(nGroupRowNF, 0, groupRecord);
	    	this.records.splice(nGroupRow, 0, groupRecord);
	    	
	    	// rangeStart 한줄씩 뒤로 미루기
	    	this._updateRangeStartsAfter(nGroupRow, 1);
	    	
    		for (var key in this.colInfos){
    			var colInfo = this.colInfos[key]
    			if( typeof(colInfo) == "function" ) continue;
				if (colInfo._isGroupKeyField)       continue;
    			if (colInfo.sumMethod.length == 0)  continue;

    			var colId = key;
    			var sumMethod = colInfo.sumMethod;
    			
    			var calcResult = null;
    			var sumMethod  = colInfo.sumMethod;
    			var sumFormula = colInfo._sumFormula;
    			var sumField   = colInfo._sumField;
    			var sumText    = colInfo._sumText;
    			
    			if (sumFormula.length > 0){
    				var rowLevel = groupRecord._RowLevel;
    				calcResult = self[this.id + "_" + colId + "_sumFunction"](nNewNum, rowLevel);
    			} else if (sumField.length > 0){
    				calcResult = record.values[sumField];
    			} else if (sumText.length > 0){
    				calcResult = sumText;
    			} else {
    				calcResult = record.values[colId];
    			}
    			
    			var value = groupRecord.values[key];
    			
    			if (sumMethod == "TEXT"){
    				value = calcResult;
    			} else if (colInfo.sumMethod == "SUM"){ 
    				value += calcResult; 
    			} else if (colInfo.sumMethod == "AVG"){ 
    				value += calcResult; 
    			} else if (colInfo.sumMethod == "MAX"){
    				value = (value > calcResult ? value : calcResult);
    			} else if (colInfo.sumMethod == "MIN"){
    				value = (value < calcResult ? value : calcResult);
    			} else if (colInfo.sumMethod == "COUNT"){
    				value = 1;
    			}

				groupRecord.values[colId] = value;
    		}
    		

    		// 연결된 콘트롤 줄추가
    		this.updateControlAddRow(groupRecord, nGroupRow);
    		
    	} else {
    		// 집계레코드가 있으면 합계값 갱신
    		var groupRecord = this.records[nGroupRow];
    		for (var key in this.colInfos){
    			var colInfo = this.colInfos[key];
    			if( typeof(colInfo) == "function" ) continue;
				if (colInfo._isGroupKeyField)       continue;
    			if (colInfo.sumMethod.length == 0)  continue;
    			
    			var colId = key;
    			var sumMethod = colInfo.sumMethod;

    			var calcResult = null;
    			var sumMethod  = colInfo.sumMethod;
    			var sumFormula = colInfo._sumFormula;
    			var sumField   = colInfo._sumField;
    			var sumText    = colInfo._sumText;
    			
    			if (sumFormula.length > 0){
    				var rowLevel = groupRecord._RowLevel;
    				calcResult = self[this.id + "_" + colId + "_sumFunction"](nNewNum, rowLevel);
    			} else if (sumField.length > 0){
    				calcResult = record.values[sumField];
    			} else if (sumText.length > 0){
    				calcResult = sumText;
    			} else {
    				calcResult = record.values[colId];
    			}
    			
    			if (colInfo.sumMethod == "SUM"){ 
    				groupRecord.values[colId] += calcResult;
    			} else if (colInfo.sumMethod == "COUNT"){
    				groupRecord.values[colId]++;
    			} else {
    				this._UpdateGroupSum(colId, nGroupRow, null, nNewNum);
    			}
    		}
    		
    		// 관련 시트데이터 수정
    		this.updateControlRowData(groupRecord); // this.updateControlRowData(nGroupRow);
    	}
    	groupRecord.rangeCount++;
    	
    }
/*    
    // 이후의 데이터의  rangeStart 속성 정리 
    for (var nRow1 = lastGroupRow + 1; nRow1 < this.records.length; nRow1++){
    	var record1 = this.records[nRow1];
    	if (record1.RowType != "Logical") continue;
    	if (record1.rangeStart > nGroupRow) record1.rangeStart++;
    }
*/	
	return record;
};


// 변경된 키를 기준으로 리프래시한다 
// 세번째 인수는 제외할 레코드이다(삭제할 게 있는경우에만)
/**
 * @description	미결
 * @param	colId
 * @param	nGroupRow
 * @param	RecordToDel
 * @param	nRow
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype._UpdateGroupSum = function(colId, nGroupRow, RecordToDel, nRow){
	var colInfo = this.colInfos[colId];
	
	if (colInfo.sumMethod.length == 0)    return;
	if (colInfo._isGroupKeyField)         return;
	
    // 줄추가, 삭제시 항상 대중소계레코드를 동시에 만드므로 여기서는 논리데이터를 추가할 필요는 없다.
    var groupRecord = this.records[nGroupRow];
    
    groupRecord.values[colId] = 0;
    var value = 0; var cnt = 0;
    var rangeCount = groupRecord.rangeCount;
    for (var nRow = groupRecord.rangeStart; nRow < this.records.length ; nRow++){
    	if (cnt >= rangeCount) break;
    	
    	var record0 = this.records[nRow];
    	if (record0._filterd) continue;
    	if (record0.RowType == "Logical") continue;
    	if (RecordToDel != undefined && RecordToDel != null && RecordToDel._id == record0._id) {
    		rangeCount--; //삭제할 레코드가 있으므로 하나 줄여서 루핑을 한번 덜돌게 한다
    		continue;
    	}
    	
		var calcResult = null;
		var sumMethod  = colInfo.sumMethod;
		var sumFormula = colInfo._sumFormula;
		var sumField   = colInfo._sumField;
		var sumText    = colInfo._sumText;

		if (sumFormula.length > 0){
			var rowLevel = groupRecord._RowLevel;
			calcResult = self[this.id + "_" + colId + "_sumFunction"](nRow, rowLevel);
		} else if (sumField.length > 0){
			calcResult = record0.values[sumField];
		} else if (sumText.length > 0){
			calcResult = sumText;
		} else {
			calcResult = record0.values[colId];
		}

		if (sumMethod == "TEXT"){
			value = calcResult;
		} else if (colInfo.sumMethod == "SUM"){ 
			value += calcResult;
		} else if (colInfo.sumMethod == "AVG"){ 
			value += calcResult; 
		} else if (colInfo.sumMethod == "MAX"){
			value = (value > calcResult ? value : calcResult);
		} else if (colInfo.sumMethod == "MIN"){
			value = (value < calcResult ? value : calcResult);
		} else if (colInfo.sumMethod == "COUNT"){
			value += 1;
		}
    	
    	cnt++;
    	
    }
    if (sumMethod == "AVG") {
    	value = value / cnt;
    }

    groupRecord.values[colId] = value;
    
    // 연결콘트롤 갱신 
    this.updateControlValue(colId, nGroupRow);
    
};



// 데이터의 그룹키를 주면 레벨별 줄번호를 리턴한다 없으면 -1이다 리턴 예: [null, -1, 12,13,14]
/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {number}
 * @example	미결
 */
DataSet.prototype._FindGroupRows = function(nRow){
    var record = this.records[nRow];
    var groupRowNums = [null];
    
    var nLastRow = nRow;
    
	var levelCount = this._jsonGroupKey.length;
    for (var nGroupLevel=1; nGroupLevel <= levelCount; nGroupLevel++ ){
    	// 그룹합을 만들지 않는 레벨은 스킵한다
    	if (!this._needGroupKey[levelCount - nGroupLevel + 1]) continue;
    	
    	// 레벨별 그룹 키를 구한다.
    	var jsonGroupKeyValue = [];
    	
    	for (var i = 0; i < record._jsonGroupKeyValue.length; i++){
    		
    		// 그룹레벨별 키 범위내의 데이터 복사 
    		var varKey = record._jsonGroupKeyValue[i];
    		
    		if (varKey instanceof Array) {
    			var varSubKey = [];
    			for (var j=0; j < varKey.length; j++) {
    				varSubKey[j] = varKey[j];
    			}
    			jsonGroupKeyValue[i] = varSubKey;
    		} else{
    			jsonGroupKeyValue[i] = varKey;
    		}
    		
    		// 결국은 i 가 levelCount - nGroupLevel 보다 크면 null;
    		if (i > levelCount - nGroupLevel) {
    			jsonGroupKeyValue[i] = null;
    			continue;
    		}
    	}
    	
    	// 
    	groupRowNums[nGroupLevel] = -1;
    	for (var nRow1 = nLastRow + 1; nRow1 < this.records.length; nRow1++){
    		var record1 = this.records[nRow1];
    		if (record1.RowType != "Logical") continue;
    		var rslt = compareGroupKey(record1._jsonGroupKeyValue, jsonGroupKeyValue);
    		if (rslt == 0){
    			groupRowNums[nGroupLevel] = nRow1;
    			nLastRow = nRow1;
    			break;
    		}
    	}
    }
	
	return groupRowNums;
};

// 그룹합을 넣을 위치를 찾아주는 함수, 못찾으면 마지막 레코드 번호 + 1 리턴
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	jsonGroupKeyValue
 * @return  {number}
 * @example	미결
 */
DataSet.prototype._findGroupInsertRowPosition = function(nRow, jsonGroupKeyValue){
	for (var nRow1 = nRow + 1; nRow1 < this.records.length; nRow1++){
		var record1 = this.records[nRow1];
		// ??? if (record1.RowType != "Logical") continue;

		var jsonGroupKeyValue1 = record1._jsonGroupKeyValue;
		for (var i = 0; i < jsonGroupKeyValue.length && jsonGroupKeyValue[i] != null; i++){
			var varKey1 = jsonGroupKeyValue1[i];
			var varKey2 = jsonGroupKeyValue[i];
			if (varKey1 instanceof Array) {
				for (var j=0; j < varKey1.length ;j++) {
					if (varKey1[j] != varKey2[j]) return nRow1;
				}
			} else{
				if (varKey1 != varKey2) return nRow1;
			}
		}
	}
	return this.records.length;
	
};

//최종적인 정살적인 데이터 줄을 찾아주는 메서드로 산식에서 참조할 줄번호를 도출하기 위해 사용한다
/**
 * @description	미결
 * @param	{number}	nRow
 * @return  {number}
 * @example	미결
 */
DataSet.prototype._findLastNormalRowPosition = function(nRow){
	for (var nRow1 = nRow; nRow1 >= 0; nRow1--){
		if (this.records[nRow1].RowType != "Logical") return nRow1;
	}
	return -1;
};

// 줄추가시 포커스된 줄의 그룹키에 해당하는 값은 미리 채워줘야 중간에 들어갈 수 있다.
/**
 * @description	미결
 * @param	{object}	recordFrom
 * @param	{object}	recordTo
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype._copyGroupKeyValues = function(recordFrom, recordTo){
	for (var i=0; i < this._jsonGroupKey.length;i++){
		var varKeyName = this._jsonGroupKey[i];
		if (varKeyName instanceof Array) {
			for (var j=0; j < varKeyName.length;j++){
				var colId = varKeyName[j];
				recordTo.values[colId] = recordFrom.values[colId]
			}
			
		} else {
			var colId =this._jsonGroupKey[i];
			recordTo.values[colId] = recordFrom.values[colId]
		}
	}
};

/**
 * @description	미결
 * @param	{string}	record
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._makeGroupKey = function(record){
	if (this._GroupKey.length == 0) return [];

	// _jsonGroupKey가 생성되지 않았으면 생성한다.
	if (this._jsonGroupKey.length == 0){
		var levelKeyArr = this._GroupKey.split(",");
		for (var i=0; i < levelKeyArr.length; i++){
			var levelKey = levelKeyArr[i];
			if (levelKey.indexOf(":") >= 0){
				this._jsonGroupKey[i] = levelKey.split(":");
			} else {
				this._jsonGroupKey[i] = levelKey;
			}
		}
	}
	
	var returnJson = [];
	for (var i=0; i < this._jsonGroupKey.length; i++){
		var levelKey = this._jsonGroupKey[i];
		if (levelKey instanceof Array) {
			var itemKeys = levelKey;
			var itemKeyValues = [];
			for (j = 0; j < itemKeys.length; j++){
				var itemKey = itemKeys[j];
				itemKeyValues[j] = record.values[itemKey];
			}
			returnJson[i] = itemKeyValues;
			
		} else {
			returnJson[i] = record.values[levelKey];
		}
	}
	
	return returnJson;
};

/**
 * @description	미결
 * @param	{string}	jsonGroupKeyValue
 * @param	{number}	nGroupLevel
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._makeGroupLevelKey = function(jsonGroupKeyValue, nGroupLevel){
	var groupLevelKey = [];
	var levelCount = this._jsonGroupKey.length;
	for (var i = 0; i < jsonGroupKeyValue.length; i++){
		// 레벨이 1이면 다 (levelCount 3가정)  levelCount - nRowLevel = 3 - 1 = 2 => i > 2 인건 없다.
		// 레벨이 2이면 끛에 하나는 null;        levelCount - nRowLevel = 3 - 2 = 1 => i > 1 인건 하나 
		// 레벨이 3이면 끝에 두개가 null;        levelCount - nRowLevel = 3 - 3 = 0 => i > 0 인건 두개 
		// 결국은 i 가 levelCount - nRowLevel 보다 크면 null;
		if (i > levelCount - nGroupLevel) {
			groupLevelKey[i] = null;
			continue;
		}
		
		// 그룹레벨별 키 범위내의 데이터 복사 
		var varKey = jsonGroupKeyValue[i];
		
		if (varKey instanceof Array) {
			var varSubKey = [];
			for (var j=0; j < varKey.length; j++) {
				varSubKey[j] = varKey[j];
			}
			groupLevelKey[i] = varSubKey;
		} else{
			groupLevelKey[i] = varKey;
		}
	}
	return groupLevelKey;
};

/**
 * @description	미결
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._makeGroupRecord = function(){

	var groupRecord = new MiRecord(this.colInfos);
	groupRecord.RowType = "Logical";
	groupRecord.tmpCount = 0;  // 평균을 내기위한 임시 필드 다쓰고 지운다 
    return groupRecord;
};

/*
 * 첫번쨰인수가 레코드 또는 배열이다
 * */
/**
 * @description	미결
 * @param	{string}	varObject
 * @param	{string}	jsonGtoupKeyValue
 * @param	{number}	nGroupLevel
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype._checkIfGroupLevelKeyChanged = function(varObject, jsonGroupKeyValue, nGroupLevel){
	var keyChanged = false;
	
	var jsonKeyValue = [];
	var record = null;
	
	if (varObject instanceof Array){
		jsonKeyValue = varObject;
		
	} else if (varObject instanceof MiRecord){
		record = varObject;
		jsonKeyValue = record._jsonGroupKeyValue;
	} 
	
	for (var i = 0; i <= jsonGroupKeyValue.length - nGroupLevel; i++){
		// 그룹레벨별 키 범위내의 데이터 복사 
		var varKey1 = jsonKeyValue[i];
		var varKey2 = jsonGroupKeyValue[i]
		
		if (varKey1 instanceof Array) {
			for (var j=0; j < varKey1.length; j++) {
				if (varKey1[j] != varKey2[j]){
					keyChanged = true; break;
				}
			}
			} else{
			if (varKey1 != varKey2){
				keyChanged = true;
			}
		}
		if (keyChanged) break;
	} 
	
	return keyChanged;
}

/**
 * @description	미결
 * @param	{string}	colId
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype._isKeyColumn = function(colId){
	
	for (var i = 0; i < this._jsonGroupKey.length; i++){
		var varKey = this._jsonGroupKey[i];
		
		if (varKey instanceof Array) {
			for (var j=0; j < varKey.length; j++) {
				if (varKey[j] == colId) return true;
			}
		} else{
			if (varKey == colId) return true;
		}
	} 
	
	return false;
	
}

/**
 * 그룹핑된 논리데이터의 시작값을 하나씩 미루거나 당긴다.
 * 
 * @param nRow           추가를 시작할 위치
 * @param addCount       추가할 줄수
 */
DataSet.prototype._updateRangeStartsAfter = function(nRow, addCount) {
	if (this._GroupKey.length == 0) return;

	// 이후의 데이터의  rangeStart 속성 정리 
	for (var nRow1 = nRow; nRow1 < this.records.length; nRow1++){
		var record1 = this.records[nRow1];
		if (record1.RowType != "Logical") continue;
		if (record1.rangeStart > nRow) {
			record1.rangeStart += addCount;
		}
	}
}

/*
function findIndex(values, target) {
  return binarySearch(values, target, 0, values.length - 1);
};
*/
var lastGroupSearchIndex = -1;

/**
*     @description	미결
*     @param	{object}	records
*     @param	{object}	record
*     @param	{number}	start
*     @param	{number}	end
*     @return	{object}
*     @example	미결
*/
function binaryGroupSearch(records, record, start, end) {
	lastGroupSearchIndex = (end >= 0 &&  start > end ? end : start);
  
  if (start > end) { return -1; } //does not exist
  
  var middle = Math.floor((start + end) / 2);
  var record1 = records[middle];
  
  var compareResult = compareGroupKey(record1._jsonGroupKeyValue , record._jsonGroupKeyValue);
  if (compareResult > 0) { 
	  return binaryGroupSearch(records, record, start, middle-1); 
  }
  if (compareResult < 0) { 
	  return binaryGroupSearch(records, record, middle+1, end); 
  }
  return middle; //found!
}

/**
*     @description	미결
*     @param	{string}	jsonGroupKeyValue1
*     @param	{string}	jsonGroupKeyValue2
*     @return	{boolean}
*     @example	미결
*/
function compareGroupKey(jsonGroupKeyValue1, jsonGroupKeyValue2){
	for (var i = 0; i < jsonGroupKeyValue1.length; i++){
		var varKey1 = jsonGroupKeyValue1[i];
		var varKey2 = jsonGroupKeyValue2[i];
		
		if (varKey1 instanceof Array) {
			for (var j=0; j < varKey1.length ;j++) {
				var varSubKey1 = varKey1[j];
				var varSubKey2 = varKey2[j];
				if (varSubKey1 != null && varSubKey2 == null){
					return 1;
				} else if (varSubKey1 == null && varSubKey2 != null){
					return -1;
				} else  if (varSubKey1 > varSubKey2){
					return 1;
				} else if (varSubKey1 < varSubKey2){
					return -1;
				}
			}
		} else{
			if (varKey1 != null && varKey2 == null){
				return 1;
			} else if (varKey1 == null && varKey2 != null){
				return -1;
			} else  if (varKey1 > varKey2){
				return 1;
			} else if (varKey1 < varKey2){
				return -1;
			}
		}
	}
	// 마지막으로 jsonGroupKeyValue1까지는 같은데 jsonGroupKeyValue2가 뒤에 배열값이 더있는 경우
	// jsonGroupKeyValue2가 크다
	if (jsonGroupKeyValue1.length < jsonGroupKeyValue2.length){
		return -1;
	}
	
	return 0;
};

/**
 * @description	미결
 * @param	{string}	bUpdateGrid
 * @return  {void}
 * @example	미결
 */
DataSet.prototype._refreshGroupCation = function(bUpdateGrid){
	var captions=[];
	
	// step1 -----------------------------------------------------------
	// level별 캡션을 메모한다. 
	var levelLength = this._jsonGroupKey.length;
	var colIndexsOfGroupKey = [];
	
	for (var nGroupNdx=0; nGroupNdx < this._jsonGroupKey.length; nGroupNdx++){

    	var varKey = this._jsonGroupKey[levelLength - nGroupNdx - 1];
    	
		if (varKey instanceof Array){
			for (var nGroupNdxSub = 0; nGroupNdxSub < varKey.length; nGroupNdxSub++){
				var colId = varKey[nGroupNdxSub];
				if (colId == "") continue;
				
				colIndexsOfGroupKey[colId] = 0;
			}
			
		} else {
			var colId = varKey;
			if (colId == "") continue;
			
			colIndexsOfGroupKey[colId] = 0;
		}
	}
	
	// step2 -----------------------------------------------------------
	// record 별로 루핑을 돌면서 켑션을 기억한다
	for (var nRow=0; nRow < this.records.length; nRow++){
		var record = this.records[nRow];
		if (record._RowLevel <= 0) continue;
		
		var colId = "";
		var nGroupNdx  = record._RowLevel - 1;
    	var varKey = this._jsonGroupKey[levelLength - nGroupNdx - 1];
		if (varKey instanceof Array){
			// 하위키중 하나라도 sumMethod가 있으면 그메서드를 적용하고 
	        // 하위키 모두 있으면 나중에 나온것을 적용한다.
			for (var nGroupNdxSub = 0; nGroupNdxSub < varKey.length; nGroupNdxSub++){
				var colId0 = varKey[nGroupNdxSub];
				if (colId0 == "") continue;
				
    			if (this.colInfos[colId0].sumMethod == "TEXT") colId = colId0;
			}
			
		} else {
			if (varKey.length == 0) continue;
			if (this.colInfos[varKey].sumMethod == "TEXT") colId = varKey;
		}
		
		if (colId.length == 0) {
			record.caption = "";
			continue;
		}
		
		
		var colInfo = this.colInfos[colId];
		var sumMethod  = colInfo.sumMethod;
		var sumFormula = colInfo._sumFormula;
		var sumField   = colInfo._sumField;
		var sumText    = colInfo._sumText;
		
		var nDataRow = this._findLastNormalRowPosition(nRow);
		var recordOfData = this.records[nDataRow];
		
		var calcResult = null;
		if (sumFormula.length > 0){
			var rowLevel = record._RowLevel;
			calcResult = self[this.id + "_" + colId + "_sumFunction"](nDataRow, rowLevel);
		} else if (sumField.length > 0){
			calcResult = recordOfData.values[sumField];
		} else if (sumText.length > 0){
			calcResult = sumText;
		} else {
			calcResult = recordOfData.values[colId];
		}
		
		record.caption = calcResult;
	}
	
	
	// step3 -----------------------------------------------------------
	// 연결된 시트의 캡션을 갱신한다.
	var tmpBinds = [];

	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
		tmpBinds[bindInfo.controlName] = bindInfo.controlType;
		
		if (bindInfo.colId in colIndexsOfGroupKey){
			colIndexsOfGroupKey[bindInfo.colId] = bindInfo.colIndex;
		}
	}
	
	for (var controlName in tmpBinds){
		if( typeof(tmpBinds[controlName]) == "function" ) continue;
		if (bUpdateGrid == undefined || bUpdateGrid == false) continue;
		
		var sht = controls[controlName];
		var bindColumns = [];
		
		for (var bindkey in sht.dataBinds){
			var bindinfo = sht.dataBinds[bindkey];
			
			if( typeof bindinfo == "function" ) continue;
			if( bindinfo.datasetId != this.id ) continue;
			
			bindColumns.push( bindinfo );
		}
		
		var shtData = [];
		var rowData = null;
		var record = null;
		
		var levelofCol = 0;
		var levelofRow = 0;
		var groupLevelLength = this._jsonGroupKey.length;
		var groupKey = null;
		var groupCaption = "";
		
		if( (typeof AUIDataSheet == "function" && sht instanceof AUIDataSheet)
			|| (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM)
		){
			var columnInfoList = AUIGrid.getColumnInfoList(sht.AUIcontrolId);
			
			if (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM){
				
			}
			else{
				for(var i = 0; i < this.records.length; i++){
					record = this.records[i];
					rowData = JSON.parse( JSON.stringify(sht.defaultLayoutValue_JSON) );
					
					var dataField = null;
					var colId = null;
					var colIndex = 0;
					var value = "";
					
					for(var j = 0; j < bindColumns.length; j++){
						colId = "" + bindColumns[j].colId;
						
						if( colId == null || typeof colId == "undefined" ) continue;
						
						dataField = "f" + bindColumns[j].colIndex;
						colIndex = bindColumns[j].colIndex - 1;
						value = record.values[colId];
						
						if( record.RowType == "Logical" && colId in colIndexsOfGroupKey ){
							//그룹키 필드인 경우
							for(var groupKeyIdx = 0, levelofCol = 0, levelofRow = 0; groupKeyIdx < groupLevelLength; groupKeyIdx++){
								groupKey = this._jsonGroupKey[groupKeyIdx];
								if( groupKey instanceof Array ){
									for(var arrayGroupKeyIdx = 0; arrayGroupKeyIdx < groupKey.length; arrayGroupKeyIdx++){
										if( colId == "" + groupKey[arrayGroupKeyIdx] ){
											levelofCol = levelLength - groupKeyIdx;
											break;
										}
									}
								}
								else{
									if( colId == "" + groupKey ){
										levelofCol = levelLength - groupKeyIdx;
										break;
									}
								}
							}
							
							if( levelofCol > record._RowLevel ){
								groupCaption = "";
							}
							else{
								groupCaption = (levelofCol == record._RowLevel ? record.caption : "");
								levelofRow = record._RowLevel;
							}
							
							if(levelofRow > 0){
								rowData[dataField] = groupCaption;
							}
							else if( typeof this.formatString != "undefined" && this.dataType == "date" ){
								rowData[dataField] = maskDateFormat(columnInfoList[colIndex].formatString, value);
							}
							else{
								rowData[dataField] = value;
							}
						}
						else{
							//그룹키 필드가 아닌 경우
							rowData[dataField] = value;
						}
					}
					
					shtData[i] = rowData;
				}
			}
			
			sht.maxRows = shtData.length;
			AUIGrid.setGridData(sht.AUIcontrolId, shtData);
			
			if( typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM ){
				if( !sht.isHiddenColumn(1) ) sht.setFixedColumnCount(1);
			}
			
			var gridData = AUIGrid.getGridData(sht.AUIcontrolId);
			if( (typeof AUIDataSheet == "function" && sht instanceof AUIDataSheet)
				|| (typeof AUIDataSheetM == "function" && sht instanceof AUIDataSheetM)
			){
				for(var nRow=0; nRow < this.records.length; nRow++){ //nRow는 AUI 그리드의 줄번호 0부터 시작
					this.records[nRow]._$uid = gridData[nRow * sht.rowsPerDataRow]._$uid;
				}
			}
			gridData = null;
			
			AUIGrid.update(sht.AUIcontrolId);
		}
		else if( typeof EasySheet == "function" && sht instanceof EasySheet ){
			var columnInfoList = sht.columns;
			var columnInfo = null;
			var fields = [];
			
			var defaultRow = {};
			var colCount = sht.maxCols;
			var recordCount = 0;
			var i = 0; var j = 0;
			
			for(i = 0; i < colCount; i++, columnInfo = null){
				columnInfo = columnInfoList[i];
				defaultRow[columnInfo.colId] = (typeof columnInfo.defaultValue == "function") ? columnInfo.defaultValue() : columnInfo.defaultValue;
				
				fields[i] = {field: columnInfo.colId};
			}
			
			for(i = 0, colCount = bindColumns.length, recordCount = this.records.length; i < recordCount; i++, record = null){
				record = this.records[i];
				rowData = JSON.parse(JSON.stringify(defaultRow));
				
				var columnId = null;
				var columnIndex = 0;
				var dsColId = null;
				var value = "";
				
				for(j = 0; j < colCount; j++){
					dsColId = "" + bindColumns[j].colId;
					if( dsColId == null || typeof dsColId == "undefined" ) continue;
					
					colIndex = bindColumns[j].colIndex - 1;
					if( colIndex < 0 ) continue;
					
					columnId = columnInfoList[colIndex].colId;
					value = record.values[dsColId];
					
					if( record.RowType == "Logical" && colId in colIndexsOfGroupKey ){
						//그룹키 필드인 경우
						for(var groupKeyIdx = 0, levelofCol = 0, levelofRow = 0; groupKeyIdx < groupLevelLength; groupKeyIdx++){
							groupKey = this._jsonGroupKey[groupKeyIdx];
							if( groupKey instanceof Array ){
								for(var arrayGroupKeyIdx = 0; arrayGroupKeyIdx < groupKey.length; arrayGroupKeyIdx++){
									if( colId == "" + groupKey[arrayGroupKeyIdx] ){
										levelofCol = levelLength - groupKeyIdx;
										break;
									}
								}
							}
							else{
								if( colId == "" + groupKey ){
									levelofCol = levelLength - groupKeyIdx;
									break;
								}
							}
						}
						
						if( levelofCol > record._RowLevel ){
							groupCaption = "";
						}
						else{
							groupCaption = (levelofCol == record._RowLevel ? record.caption : "");
							levelofRow = record._RowLevel;
						}
						
						if(levelofRow > 0){
							rowData[columnId] = groupCaption;
						}
						else if( typeof this.formatString != "undefined" && this.dataType == "date" ){
							rowData[columnId] = maskDateFormat(columnInfoList[colIndex].dateFormat, value);
						}
						else{
							rowData[columnId] = value;
						}
					}
					else{
						//그룹키 필드가 아닌 경우
						rowData[columnId] = value;
					}
				}
				
				shtData[i] = rowData;
			}
			
			sht.maxRows = shtData.length;
			sht.setData({fieldList: fields, recordList: shtData, rowCount: sht.maxRows}, false);
			
			for(i = 0, recordCount = this.records.length; i < recordCount; i++){
				this.records[i]._$uid = sht.rows(i).rowId;
			}
			
			sht.refreshColumns();
		}
	}
	
	tmpBinds.clear();
	
	return;
};

/**
*     @description	미결
*     @param	{string}	sheetName
*     @param	{string}	uid
*     @param	{object}	jsonObject
*     @return	{string}
*     @example	미결
*/
function getSumText(sheetName, uid, jsonObject){
	
	var control = controls[sheetName];
	
	var tmpBinds = []; colIds = [];
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		if (bindInfo.controlName != control.controlName) continue;
		tmpBinds[bindInfo.datasetId] = bindInfo.controlType;
		colIds[bindInfo.colIndex - 1] = bindInfo.colId;

    }
	
	for (var datasetId in tmpBinds){
		if( typeof(tmpBinds[datasetId]) == "function" ) continue;
		var dataSet = dataSets[datasetId];
		
		var nRow = dataSet.getIndexOf_$uid(uid);
		if (nRow == -1) continue;
		
		// 키필드가 아니면 빠진다
		var colId = colIds[jsonObject.colNdx];
		if (colId == undefined)  return;
		if (!dataSet.colInfos[colId]._isGroupKeyField) return;
		
		var record = dataSet.records[nRow];
		if (record.RowType != "Logical") continue;
		
		// 레코드가 레벨 2이고 첫칸 이상이면 0 / 레벨 1이고 두번째  칸 이상이면 
		var levelofCol = 0;
		var levelLength = dataSet._jsonGroupKey.length;
		
		for (var nGroupNdx=0; nGroupNdx < levelLength; nGroupNdx++){
			var varKey = dataSet._jsonGroupKey[nGroupNdx];
			if (varKey instanceof Array){
				for (var nGroupNdxSub = 0; nGroupNdxSub < varKey.length; nGroupNdxSub++){
					if (colId == varKey[nGroupNdxSub]){
						levelofCol = levelLength - nGroupNdx;
						break;
					}
				}
			} else {
				if (colId == varKey){
					levelofCol = levelLength - nGroupNdx;
					break;
				}
			}
		}
		
		if (levelofCol > record._RowLevel){
			// 통과
			return;
		}
		jsonObject.caption = (levelofCol == record._RowLevel ? record.caption : "");
		jsonObject.rowLevel = record._RowLevel;
		
		break;
		
	}
	
	return;

}

//사용함수 
function pad2(n) { return n < 10 ? '0' + n : n }

//*** Pivot ****         *** Pivot ****         *** Pivot ****         *** Pivot ****         *** Pivot ****         *** Pivot ****        
//Pivot에서 참조하는 데이터셋 이름

/**
 * Dataset이 Bind할 DataSet Object를 리턴하는 Proeprty 입니다.
 * 
 * @param addCount       추가할 줄수
 * @return               (DataSet) Binde된 DataSet
 */
DataSet.prototype.getDataObject = function(){ return this._DataObject;};

/**
 * Dataset이 Bind할 DataSet Object를 지정하는 Proeprty 입니다.
 * 
 * @param dataObject     (DataSet) Bind할 DataSet Object
 */
DataSet.prototype.setDataObject = function(dataObject){
	this._DataObject = dataObject;

	if (dataObject.records.length == 0) return;
	this._refreshPivot();
	return;
};

/**
 * Pivot Dataset이 Bind된 시트를 초기화
 * 
 * @param dataObject     (DataSet) Bind할 DataSet Object
 */
DataSet.prototype.initPivotSheet = function(){
	var sheetName = "";
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
		
		sheetName = bindInfo.controlName;
		controls[sheetName].pivotBound = true;
		var AUIcontrolId = controls[sheetName].AUIcontrolId;
		var gridData = [];
	    AUIGrid.setGridData(AUIcontrolId, gridData);
	    
	    //   헤더 숨기기 
	    for (var i= 0; i< AUIGrid.getColumnInfoList(AUIcontrolId).length;i++){
	    	var dataField = AUIGrid.getDataFieldByColumnIndex(AUIcontrolId, i);
	    	AUIGrid.hideColumnByDataField(AUIcontrolId, dataField);
	    }
	}
	return;
}

/**
 * @description	미결
 * @return  {void}
 * @example	미결
 */
DataSet.prototype._refreshPivot = function(){
	// STEP0 -----------------------------------------------------------------
	// 바인드된 시트객체를 를 찾고 데이터 필드를 메모한다

	// _jsonPivotKey가 생성되지 않았으면 생성한다.
	this._jsonPivotKey.clear();
	var levelKeyArr = this._PivotKey.split(",");
	for (var i=0; i < levelKeyArr.length; i++){
		var levelKey = levelKeyArr[i];
		if (levelKey.indexOf(":") >= 0){
			this._jsonPivotKey[i] = levelKey.split(":");
		} else {
			this._jsonPivotKey[i] = levelKey;
		}
	}

	this._jsonGroupKey.clear();
	levelKeyArr = this._GroupKey.split(",");
	for (var i=0; i < levelKeyArr.length; i++){
		var levelKey = levelKeyArr[i];
		if (levelKey.length == 0) continue;
		
		if (levelKey.indexOf(":") >= 0){
			this._jsonGroupKey[i] = levelKey.split(":");
		} else {
			this._jsonGroupKey[i] = levelKey;
		}
	}

	// 피벗키 길이 
	var pivotKeyLength = this._jsonPivotKey.length;
	var groupKeyLength = this._jsonGroupKey.length;

	var sheetName = "";
	var arrItemColIds = []; 
	var arrItemLayouts = []; 
	for (var key in this.dataBinds){
		var bindInfo = this.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
		
		sheetName = bindInfo.controlName;
		arrItemColIds[ bindInfo.colIndex - 1 ] =  bindInfo.colId;
		// 피벗집계키가 세개라면 피벗키의 길이(pivotKeyLength)는 3이고 마지막 집계키의 레벨도 3(1부터 시작되므로)
		// 시트의 데이터 헤더 레벨은 그 한단 아래로 " + 1" 해주어야 한다.
		var maxLevel = pivotKeyLength;
		if (bindInfo.colIndex <= groupKeyLength){
			arrItemLayouts[ bindInfo.colId ] = getColumnObjectFromSheet(sheetName, 1, 0, bindInfo.colIndex) ; 
		} else {
			arrItemLayouts[ bindInfo.colId ] = getColumnObjectFromSheet(sheetName, maxLevel + 1, groupKeyLength, bindInfo.colIndex - groupKeyLength) ; 
		}
		
	}
	if (sheetName == "") return; // 연결된 시트가 없으면 빠진다.
	
	var arrFormulaOfLevel =[];
    for (var nPivotLevel = 1; nPivotLevel <= pivotKeyLength; nPivotLevel++ ){
    	var formula = getColumnObjectFromSheet(sheetName, nPivotLevel, groupKeyLength, 1).headerText;
    	if (formula.trim().length == 0){
    		arrFormulaOfLevel[nPivotLevel] = "";
    		continue;
    	} 
    	if (typeof this._DataObject.colInfos[formula] != "undefined"){
    		arrFormulaOfLevel[nPivotLevel] = formula;
    		continue;
    	}
    	
    	arrFormulaOfLevel[nPivotLevel] = "formula:" + formula;
    }
    
    // 피벗키, 그룹키  생략정보 미리 파악
    for (var nPivotLevel = 1; nPivotLevel <= pivotKeyLength; nPivotLevel++ ){
    	var wKey = this._jsonPivotKey[nPivotLevel - 1];
    	if (wKey instanceof Array){
    		this._needPivotKey[nPivotLevel] = false;
    		
       		for (var nSubLevel = 0; nSubLevel < wKey.length; nSubLevel++ ){
		    	var colId =  wKey[nSubLevel];
		    	var sumMethod = this._DataObject.colInfos[colId].sumMethod;
		    	if (sumMethod.trim().length != 0){
		    		this._needPivotKey[nPivotLevel] = true;
		    		break;
		    	}
       		}
    		
    	} else {
        	var colId = wKey;
        	var sumMethod = this._DataObject.colInfos[colId].sumMethod;
        	this._needPivotKey[nPivotLevel] = (sumMethod.trim().length != 0);
    	}
    	
    }

    for (var nGroupLevel = 1; nGroupLevel <= groupKeyLength; nGroupLevel++ ){
    	var wKey = this._jsonGroupKey[nGroupLevel - 1];
    	
    	if (wKey instanceof Array){
    		this._needGroupKey[nGroupLevel] = false;
    		for (var nSubLevel = 0; nSubLevel < wKey.length; nSubLevel++ ){
    		    	var colId =  wKey[nSubLevel];
    		    	var sumMethod = this._DataObject.colInfos[colId].sumMethod;
    		    	if (sumMethod.trim().length != 0){
    		    		this._needGroupKey[nGroupLevel] = true;
    		    		break;
    		    	}
    		}
    		
    	} else {
        	var colId = wKey;
        	var sumMethod = this._DataObject.colInfos[colId].sumMethod;
        	this._needGroupKey[nGroupLevel] = (sumMethod.trim().length != 0);
    	}
    }
	
	// STEP1 -----------------------------------------------------------------
	// Pivot 키를 만들고 
	// 그룹키가 없어도 있다 없어 지는 경우가 있으므로 두어야 한다 
	var arrPivotKeys = []; ndx = 0;
	var arrPivotCaptions = []; // 캡션이 들어가는 난
	
	for (var nRowNF = 0; nRowNF < this._DataObject.buffer.length; nRowNF++){
		var record = this._DataObject.buffer[nRowNF];
		if (record.RowType == "Logical") continue;
		
		arrPivotCaptions[ndx] = this._makePivotCaption(record, arrFormulaOfLevel, nRowNF);
		
		record._jsonPivotKeyValue = this._makePivotKey(record);
		arrPivotKeys[ndx] = this._clonePivotKey(record._jsonPivotKeyValue);
		arrPivotKeys[ndx].ndx = ndx; // <-- 소팅후 arrPivotCaptions을 순서를 같게 만드는 작업을 위해서 기록
		
		ndx++;
	}
	
	var arrGroupCaptions = []; // 그룹의 상단 캡션이 들어가는 난
	for (var i=0; i < groupKeyLength; i++){
		var colId = arrItemColIds[i];
		arrGroupCaptions[i] = arrItemLayouts[ colId ].headerText;
	}
	
	// GroupKey를 만들고 
	var arrGroupKeys = []; ndx = 0;
	for (var nRowNF = 0; nRowNF < this._DataObject.buffer.length; nRowNF++){
		var record = this._DataObject.buffer[nRowNF];
		if (record.RowType == "Logical") continue;
		
		record._jsonGroupKeyValue = this._makeGroupKey(record);
		arrGroupKeys[ndx] = this._clonePivotKey(record._jsonGroupKeyValue);
		
		
		var arrLabel = new Array(groupKeyLength);
		for (var i=0; i < groupKeyLength; i++){
			var colId = arrItemColIds[i];
			arrLabel[i] = record.values[colId];
		}
		arrGroupKeys[ndx].arrLabel = arrLabel;
		
		ndx++;
	}
	
	// STEP2 -----------------------------------------------------------------
	// pivot Key Sort
	arrPivotKeys.sort(function(arrKey1, arrKey2){return compareGroupKey(arrKey1, arrKey2);});
	
	// group Key Sort
	arrGroupKeys.sort(function(arrKey1, arrKey2){return compareGroupKey(arrKey1, arrKey2);});
	
	// STEP3 -----------------------------------------------------------------
    // pivot 키 중복 제거
	var belowKey = [];
	for (var i = arrPivotKeys.length - 1; i >= 0; i--){
		if (belowKey.length != 0){
			if (compareGroupKey(arrPivotKeys[i], belowKey) == 0){
				arrPivotKeys.splice(i, 1);
				continue;
			}
		}
		belowKey = arrPivotKeys[i];
	}
	
	// group 키 중복 제거
	belowKey = [];
	for (var i = arrGroupKeys.length - 1; i >= 0; i--){
		if (belowKey.length != 0){
			if (compareGroupKey(arrGroupKeys[i], belowKey) == 0){
				arrGroupKeys.splice(i, 1);
				continue;
			}
		}
		belowKey = arrGroupKeys[i];
	}
	delete belowKey;
	this._rowCount_NonGroup = arrGroupKeys.length;

	// arrPivotCaptions 순서 맞추기 
	var tmpArrPivotCaptions = [];
	for (var i = 0; i < arrPivotKeys.length; i++){
		var ndx = arrPivotKeys[i].ndx;
		tmpArrPivotCaptions[i] = arrPivotCaptions[ndx];
		delete arrPivotKeys[i].ndx;
	}
	
	for (var i = arrPivotCaptions.length - 1; i >= 0; i--){
		arrPivotCaptions.pop();
	}

	// ndx재부여
	for (var i = 0; i < arrPivotKeys.length; i++){
		arrPivotKeys[i].ndx = i;
	}
	
	arrPivotCaptions = tmpArrPivotCaptions;
	tmpArrPivotCaptions = null;
	
	// STEP4 -----------------------------------------------------------------
	// pivot 집계키 만들기
	var pivotItemKey= [];
    var pivotLevelKeys= [null];
    var pivotLevelKey = [];
    
	var pivotItemCaption= [];
    var pivotLevelCaptions= [null];
    var pivotLevelCaption = [];
	var levelCount = this._jsonPivotKey.length;
    
    // 데이터를 처음부터 끝까지 돌리면서 레벨 정보를 집계한다
    // 사용변수    
    //           arrPivotKeys: 피벗키 목록, pivotItemKey: 피벗 목록중의 작업대상 하나,    
    //           arrPivotCaptions: 피벗 캡션 목록, pivotItemCaption: 피벗 캡션 목록중 하나의 피벗 캡션    
    //           pivotLevelKeys:  단계별 여러 집계데이터의 피벗 키 , pivotLevelKey: 집계데이터내의  하나의 피벗키
    //           pivotLevelCaptions:  단계별 여러 집계데이터의 피벗 캡션 , pivotLevelCaption: 집계데이터내의  하나의 캡션
    for (var nRow = 0; nRow < arrPivotKeys.length; nRow++){
    	pivotItemKey = arrPivotKeys[nRow];
    	pivotItemCaption = arrPivotCaptions[nRow];
    	
    	if (nRow == 0){
    		// 레벨별 그룹데이터를 만들고 첫데이터를 기준으로키값을 세팅한다
    	    for (var nPivotLevel = 1; nPivotLevel <= levelCount; nPivotLevel++ ){
    	    	if (!this._needPivotKey[nPivotLevel]) continue;
    	    	pivotLevelKeys[nPivotLevel] = this._makePivotLevelKey(pivotItemKey, nPivotLevel);
    	    	pivotLevelCaptions[nPivotLevel] = this._makePivotLevelCaption(pivotItemCaption, nPivotLevel); 
    	    }
    	    continue;
    	}

	    for (var nPivotLevel = levelCount;  nPivotLevel >= 1; nPivotLevel-- ){
	    	if (!this._needPivotKey[nPivotLevel]) continue;
	    	
	    	pivotLevelKey = pivotLevelKeys[nPivotLevel];
	    	pivotLevelCaption = pivotLevelCaptions[nPivotLevel];
	    	
	    	// 필터링 안된 첫데이터가 아니면서, 키가 바뀌었으면
	    	var keyChanged = (nRow > 0 && _checkIfPivotLevelKeyChanged(pivotItemKey, pivotLevelKey, nPivotLevel));

	    	// 키가 변경되었으면 논리레코드를 추가하고 새로운 레코드를 만든다 
    		if (keyChanged){
    			// 레코드 추가 
    			arrPivotKeys.splice(nRow, 0, pivotLevelKey);
    			arrPivotCaptions.splice(nRow, 0, pivotLevelCaption);
 
    			nRow++;
    			
    			// 레코드 초기화 
     	    	pivotLevelKeys[nPivotLevel] = this._makePivotLevelKey(pivotItemKey, nPivotLevel);
     	    	pivotLevelCaptions[nPivotLevel] = this._makePivotLevelCaption(pivotItemCaption, nPivotLevel);
    		}
	    } // 그룹 레벨별 루프 종료 
	    
	}
		
    for (var  nPivotLevel = levelCount;  nPivotLevel >= 1;nPivotLevel-- ){
    	if (!this._needPivotKey[nPivotLevel]) continue;

    	arrPivotKeys.push(pivotLevelKeys[nPivotLevel]);
    	arrPivotCaptions.push(pivotLevelCaptions[nPivotLevel]);
    }
	
	// 그룹별 데이터 채우기 
    var groupLevelKeys= [null];
    var groupItemKey= [];
    var groupLevelKey = []
	levelCount = this._jsonGroupKey.length;
    
    // 데이터를 처음부터 끝까지 돌리면서 레벨 정보를 집계한다
    for (var nRow = 0; nRow < arrGroupKeys.length; nRow++){
    	groupItemKey = arrGroupKeys[nRow];
    	
    	if (nRow == 0){
    		// 레벨별 그룹데이터를 만들고 첫데이터를 기준으로키값을 세팅한다
    	    for (var nGroupLevel = 1; nGroupLevel <= levelCount; nGroupLevel++ ){
    	    	if (!this._needGroupKey[nGroupLevel]) continue;
    	    	groupLevelKeys[nGroupLevel] = this._makePivotLevelKey(groupItemKey, nGroupLevel);
    	    }
    	    continue;
    	}

	    for (var nGroupLevel = levelCount;  nGroupLevel >= 1; nGroupLevel-- ){
	    	if (!this._needGroupKey[nGroupLevel]) continue;

	    	groupLevelKey = groupLevelKeys[nGroupLevel];
	    	
	    	// 필터링 안된 첫데이터가 아니면서, 키가 바뀌었으면
	    	var keyChanged = (nRow > 0 && _checkIfPivotLevelKeyChanged(groupItemKey, groupLevelKey, nGroupLevel));

	    	// 키가 변경되었으면 논리레코드를 추가하고 새로운 레코드를 만든다 
    		if (keyChanged){
    			// 레코드 추가 
    			arrGroupKeys.splice(nRow, 0, groupLevelKey);
 
    			nRow++;
    			
    			// 레코드 초기화 
     	    	groupLevelKeys[nGroupLevel] = this._makePivotLevelKey(groupItemKey, nGroupLevel);
    		}
	    } // 그룹 레벨별 루프 종료 
	    
	}
		
    for (var nGroupLevel = levelCount; nGroupLevel >= 1; nGroupLevel-- ){
    	if (!this._needGroupKey[ nGroupLevel]) continue;
    	
    	arrGroupKeys.push(groupLevelKeys[nGroupLevel]);
    }
    
	// STEP5-0 -----------------------------------------------------------------
    // 헤더의 자식 카운트수 집계  
	for (var pivotNdx=0; pivotNdx < arrPivotKeys.length; pivotNdx++){
		if (arrPivotKeys[pivotNdx][pivotKeyLength - 1] == null) continue;
		
		var arrPivotKey = this._clonePivotKey(arrPivotKeys[pivotNdx]);
	    for (var ndx = pivotKeyLength - 1; ndx >= 0; ndx--){
			arrPivotKey[ndx] = null;
	    	if (!this._needPivotKey[ndx + 1]) continue;

	    	var colIndex = binaryPivotSearch(arrPivotKeys, arrPivotKey, 0, arrPivotKeys.length - 1);
			if (colIndex == -1){
				if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_020", "Pivot 위치를 찾지 못했습니다."));
				continue;
			}
			if (typeof arrPivotKeys[colIndex].cnt == "undefined"){
				arrPivotKeys[colIndex].cnt = 1;
			} else {
				arrPivotKeys[colIndex].cnt += 1;
			}
	    }
	}
	for (var groupNdx=0; groupNdx < arrGroupKeys.length; groupNdx++){
		if (arrGroupKeys[groupNdx][groupKeyLength - 1] == null) continue;
		
		var arrGroupKey = this._clonePivotKey(arrGroupKeys[groupNdx]);
	    for (var ndx = groupKeyLength - 1; ndx >= 0; ndx--){
			arrGroupKey[ndx] = null;
			
	    	if (!this._needGroupKey[ndx + 1]) continue;
			
			var rowIndex = binaryPivotSearch(arrGroupKeys, arrGroupKey, 0, arrGroupKeys.length - 1);
			if (rowIndex == -1){
				if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_021", "Group 위치를 찾지 못했습니다."));
				continue;
			}
			if (typeof arrGroupKeys[rowIndex].cnt == "undefined"){
				arrGroupKeys[rowIndex].cnt = 1;
			} else {
				arrGroupKeys[rowIndex].cnt += 1;
			}
	    }
	}

	// STEP5 -----------------------------------------------------------------
    // Pivot 데이터에 데이 칼럼명 추가
    // 피봇키가 아닌항목까지를 키에 추가한다  
    var arrResultPivotKeys = [];
    var arrResultPivotCaptions = [];
    var ndx = 0;
	for (var i = 0; i < arrPivotKeys.length; i++){
		for (var j=groupKeyLength; j < arrItemColIds.length; j++){
			var tmpArrKey = this._clonePivotKey(arrPivotKeys[i]);
			var tmpArrCaption = this._clonePivotKey(arrPivotCaptions[i]);
			
			var colId = arrItemColIds[j];
			tmpArrKey[pivotKeyLength] = arrItemColIds[j]; // 데이터 한칸 더추가
			tmpArrCaption[pivotKeyLength] = arrItemLayouts[ colId ].headerText; // 데이터 한칸 더추가
			
			arrResultPivotKeys[ndx] = tmpArrKey;
			arrResultPivotCaptions[ndx] = tmpArrCaption;
			
			if (typeof arrPivotKeys[i].ndx != "undefined") {
				arrResultPivotKeys[ndx].ndx = arrPivotKeys[i].ndx;
			}
			if (typeof arrPivotKeys[i].cnt != "undefined") {
				arrResultPivotKeys[ndx].cnt = arrPivotKeys[i].cnt;
			}
			ndx++;
		}
	}
	
	// 배열
	for (var i = arrPivotKeys.length - 1; i >= 0; i--){
		arrPivotKeys.pop();
		arrPivotCaptions.pop();
	}

	arrPivotKeys = arrResultPivotKeys;
	arrResultPivotKeys = null;
	arrPivotCaptions = arrResultPivotCaptions;
	arrResultPivotCaptions = null;
    
	
	// footer 레코드 생성 
	var arrFooterSums = new Array(arrPivotKeys.length);
	for (var i = 0; i < arrPivotKeys.length; i++){
		arrFooterSums[i] = {sum: 0, max: null, min: null, count: 0};
	}
    this._arrFooterSums = arrFooterSums;
	
	// STEP6 -----------------------------------------------------------------
    // 데이터 들어갈 배열 선언 
    var maxRows = arrGroupKeys.length;
    var maxCols = arrPivotKeys.length;
    var arrDatas = [];
    for (var nRow=0; nRow < maxRows; nRow++){
    	arrDatas[nRow] = new Array(maxCols);
    }
	
	// 다음 동작을 위하여 메모 
	this._arrPivotKeys = arrPivotKeys;
	this._arrGroupKeys = arrGroupKeys;
	this._arrDatas     = arrDatas;
	this._arrItemColIds = arrItemColIds;
	this._sheetName    = sheetName;
	
	// colId가 알파벳순이 아니므로 바이너리 서치를 또하나의 서칭어래이 만들고 
	// 월래 칼럽인덱스를 기록한다 
	var arrPivotKeysForSearch = [];
	for (var i = 0; i < arrPivotKeys.length; i++){
		arrPivotKeysForSearch[i] = arrPivotKeys[i];
		arrPivotKeysForSearch[i].seq = i;
	}
	arrPivotKeysForSearch.sort(function(arrKey1, arrKey2){return comparePivotKey(arrKey1, arrKey2);});
	this._arrPivotKeysForSearch = arrPivotKeysForSearch;
	
    // 데이터 넣기
	for (var nRowNF = 0; nRowNF < this._DataObject.buffer.length; nRowNF++){
		var record = this._DataObject.buffer[nRowNF];
		if (record.RowType == "Logical") continue;
		
		for (var i = groupKeyLength; i < arrItemColIds.length; i++){
			var colId = arrItemColIds[i];
			var sumMethod = this._DataObject.colInfos[colId].sumMethod;
			var value = record.values[colId];
			
			
			// 피벗 셀 갱신
			var arrPivotKey = this._clonePivotKey(record._jsonPivotKeyValue);
			var arrGroupKey = this._clonePivotKey(record._jsonGroupKeyValue);
			
			var jsonResult = setPivotCell(arrDatas, value, arrGroupKey, arrPivotKey, arrPivotKeys, arrGroupKeys, colId, pivotKeyLength, null, arrPivotKeysForSearch);
			// 반환형 jsonResult = {row: n, col: n, value: n}
			
			
			// 집계값 갱신 
			this._updatePivotSum(colId, sumMethod, value, arrPivotKey, arrGroupKey);
			
			// footer값 갱신 
			// jsonResult = {row: n, col: n, value: n}  // arrFooterSums[i] = {sum: 0, max: null, min: null, count: 0};
			var footerSum = arrFooterSums[jsonResult.col]; 
			footerSum.sum += value;
			footerSum.max = (footerSum.max == null ? value : (footerSum.max > value ? footerSum.max : value));
			footerSum.min = (footerSum.min == null ? value : (footerSum.max < value ? footerSum.max : value));
			footerSum.count++;
			footerSum.sumMethod = sumMethod;
		}
		
	}

    // 별도의 열추가 시작  ===================
    if (this.arrMoreSumInfos.length > 0){    // 형식: [{headerText:"XXX", colId:"XXX", sumMethod:"XXX"}, ...]
    	this.arrMoreColumnDatas.clear();
    	for (var moreNdx = 0; moreNdx < this.arrMoreSumInfos.length; moreNdx++){
    		var moreSumInfo = this.arrMoreSumInfos[moreNdx];
 	        this.arrMoreColumnDatas[moreNdx] = this.addivotColumnToLast(moreSumInfo.colId, moreSumInfo.sumMethod, moreSumInfo);   		
    	}
    }
    // 별도의 열 추가 종료 ===================


	// 시트를 그린다
	this.setPivotToSheet(arrPivotCaptions, arrGroupCaptions, arrItemLayouts);
	return;
};

// 리턴값 [{row:줄번호, col:칼럼번호, value:변경값}, ... ]
/**
 * @description	미결
 * @param	{string}	colId
 * @param	{string}	sumMethod
 * @param	{string}	value
 * @param	{string}	arrPivotKey_p
 * @param	{string}	arrGroupKey_p
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._updatePivotSum = function(colId, sumMethod, value, arrPivotKey_p, arrGroupKey_p) {
	var arrPivotKeysForSearch = this._arrPivotKeysForSearch;
	var arrCellsToUpdate = [];
	var ndx = 0;
	
	var arrPivotKeys = this._arrPivotKeys;
	var arrGroupKeys = this._arrGroupKeys;
	var arrDatas     = this._arrDatas;
	var arrFooterSums = this._arrFooterSums;
	
	var pivotKeyLength = this._jsonPivotKey.length;
	var groupKeyLength = this._jsonGroupKey.length;

	// 피벗합계 갱신
	arrPivotKey = this._clonePivotKey(arrPivotKey_p);
	arrGroupKey = this._clonePivotKey(arrGroupKey_p);
	for (var pivotNdx = pivotKeyLength - 1; pivotNdx >= 0; pivotNdx--){
		arrPivotKey[pivotNdx] = null;
		
		if (!this._needPivotKey[pivotNdx + 1]) continue;
		var jsonResult = setPivotCell(arrDatas, value, arrGroupKey, arrPivotKey, arrPivotKeys, arrGroupKeys, colId, pivotKeyLength, sumMethod, arrPivotKeysForSearch);
		arrCellsToUpdate[ndx++] = jsonResult;

		// footer값 갱신 
		// jsonResult = {row: n, col: n, value: n}  // arrFooterSums[i] = {sum: 0, max: null, min: null, count: 0};
		var footerSum = arrFooterSums[jsonResult.col]; 
		footerSum.sum += value;
		footerSum.max = (footerSum.max == null ? value : (footerSum.max > value ? footerSum.max : value));
		footerSum.min = (footerSum.min == null ? value : (footerSum.max < value ? footerSum.max : value));
		footerSum.count++;
		footerSum.sumMethod = sumMethod;
	
	}
	
	// 그룹피벗합계갱신
	arrPivotKey = this._clonePivotKey(arrPivotKey_p);
	arrGroupKey = this._clonePivotKey(arrGroupKey_p);
	for (var groupNdx = groupKeyLength - 1; groupNdx >= 0; groupNdx--){
		arrGroupKey[groupNdx] = null;

		if (!this._needGroupKey[groupNdx + 1]) continue;
		arrCellsToUpdate[ndx++] = setPivotCell(arrDatas, value, arrGroupKey, arrPivotKey, arrPivotKeys, arrGroupKeys, colId, pivotKeyLength, sumMethod, arrPivotKeysForSearch);
	}
	
	// 그룹&피벗 합계갱신 
	arrPivotKey = this._clonePivotKey(arrPivotKey_p);
	arrGroupKey = this._clonePivotKey(arrGroupKey_p);
	for (var groupNdx = groupKeyLength - 1; groupNdx >= 0; groupNdx--){
		arrGroupKey[groupNdx] = null;

		if (!this._needGroupKey[groupNdx + 1]) continue;

		arrPivotKey = this._clonePivotKey(arrPivotKey_p);
	    for (var pivotNdx = pivotKeyLength - 1; pivotNdx >= 0; pivotNdx--){
			arrPivotKey[pivotNdx] = null;

			if (!this._needPivotKey[pivotNdx + 1]) continue;
			arrCellsToUpdate[ndx++] = setPivotCell(arrDatas, value, arrGroupKey, arrPivotKey, arrPivotKeys, arrGroupKeys, colId, pivotKeyLength, sumMethod, arrPivotKeysForSearch);
	    }
	}
	
	return arrCellsToUpdate; 
}

/**
 * @description	미결
 * @param	{string}	arrPivotCaptions
 * @param	{string}	arrGroupCaptions
 * @param	{string}	arrItemLayouts
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype.setPivotToSheet = function(arrPivotCaptions, arrGroupCaptions, arrItemLayouts){
	var arrPivotKeys = this._arrPivotKeys;
	var arrGroupKeys = this._arrGroupKeys;
	var arrDatas     = this._arrDatas;
	var sheetName    = this._sheetName;
	
	var jsonPivotKey = this._jsonPivotKey;
	var jsonGroupKey = this._jsonGroupKey;

	
	var sumMethods = [];
	for (var key in this._DataObject.colInfos){
		if (typeof this._DataObject.colInfos[key] == "function") continue;
		sumMethods[key] = this._DataObject.colInfos[key].sumMethod;
	}
	this._sumMethods = sumMethods;

	// STEP 1: 그룹항목의 좌상단 헤더 만들기
	var columnLayout = [];
	for (var i = 0; i < jsonGroupKey.length; i++){
		var varKey = jsonGroupKey[i];
		var strGroupKey = (varKey instanceof Array ? varKey.join("_") : varKey);
		
		var columnInfo = {
				dataField : strGroupKey,
				headerText : arrGroupCaptions[i],
				width : 140,
				cellMerge : true
			};
		
		var ItemLayout = arrItemLayouts[varKey];
		while(typeof ItemLayout != "undefined" && typeof ItemLayout.children != "undefined"){ ItemLayout = ItemLayout.children[0]; }
		for (var key in ItemLayout){
			if (key != "labelFunction" && key != "styleFunction" && typeof ItemLayout[key] == "function") continue;
			var lKey = key.toLowerCase();
			if (lKey == "children" || lKey == "headertext" || lKey == "cellmerge" || lKey == "datafield") continue;
			
			columnInfo[key] = ItemLayout[key];
		}
		
		//2016-07-06 : 그룹항목은 수정되면 안되므로 editable 속성을 false로 수정함
		columnInfo.editable = false;
		
		if (i > 0) columnInfo.mergePolicy = "restrict";
		columnLayout.push(columnInfo);
	}
	
	// STEP 2: 피벗 항목의 상단 헤더 만들기
	var pivotLevelKeys= [];
	var columnInfoOfLevels = [];
	
	var levelCount = jsonPivotKey.length;

    for (var i=0; i < arrPivotKeys.length; i++){
    	var arrPivotKey = arrPivotKeys[i];
    	var arrPivotCaption = arrPivotCaptions[i];
    	
		for (var nPivotLevel = 1; nPivotLevel <= levelCount + 1; nPivotLevel++ ){

	    	pivotLevelKey = pivotLevelKeys[nPivotLevel];
	    	
	    	if (i == 0 || nPivotLevel == levelCount + 1 || _checkIfPivotLevelKeyChanged(arrPivotKey, pivotLevelKey, nPivotLevel + 1)){
	    		var columnInfo = {
	    				headerText : arrPivotCaption[nPivotLevel - 1],
	    				cellMerge : false
	    			};
	    		
	    		if (nPivotLevel == levelCount + 1){
					var colId = arrPivotKey[nPivotLevel - 1];
	    			columnInfo.dataField = colId + "_" + i;
	    			
	    			var ItemLayout = arrItemLayouts[colId];
	    			while(typeof ItemLayout != "undefined" && typeof ItemLayout.children != "undefined"){ ItemLayout = ItemLayout.children[0]; }
	    			for (var key in ItemLayout){
	    				if (key != "labelFunction" && key != "styleFunction" && typeof ItemLayout[key] == "function") continue;
	    				var lKey = key.toLowerCase();
	    				if (lKey == "children" || lKey == "headertext" || lKey == "cellmerge" || lKey == "datafield") continue;
	    				
	    				columnInfo[key] = ItemLayout[key];
	    			}
	    			
	    			// 합계셀은 편집이 안되게 한다 
	    			if (arrPivotKey.length > 1 && arrPivotKey[arrPivotKey.length - 2]  == null){
	    				columnInfo["editable"] = false;
	    			}
	    		} else {
	    			columnInfo.children = [];
	    		}
	    		
	    		if (nPivotLevel == 1){
	    			columnLayout.push(columnInfo);

	    		} else {
	    			columnInfoOfLevels[nPivotLevel - 1].children.push(columnInfo);
	    		}
	    		columnInfoOfLevels[nPivotLevel] = columnInfo;
	    		
	    		// 레벨별 키 기억
	    		pivotLevelKeys[nPivotLevel] = arrPivotKey;
	    	}
	    } // 그룹 레벨별 루프 종료 
    }

    // 별도의 열추가 시작  ===================
    if (this.arrMoreSumInfos.length > 0){    // 형식: [{headerText:"XXX", colId:"XXX", sumMethod:"XXX"}, ...]
    	for (var moreNdx = 0; moreNdx < this.arrMoreSumInfos.length; moreNdx++){
    		var moreSumInfo = this.arrMoreSumInfos[moreNdx];

	    	// 사용자가 부여한 파라메터 항목 
	    	var dataField = moreSumInfo.colId + "_" + moreSumInfo.sumMethod;
			var columnInfo = {headerText: moreSumInfo.headerText, dataField: dataField,
			                                            editable: false, cellMerge : false}; // 디폴트값 부여 [편집 불가능 하게 조치 ]
	        var addedColumnInfo =moreSumInfo.columnInfo; 
	        for (var key in addedColumnInfo){
				columnInfo[key] = addedColumnInfo[key];
			}
			columnLayout.push(columnInfo);	
    	}
    }
    // 별도의 열 추가 종료 ===================
	
    // 헤더정리
    for (var i = 0; i < columnLayout.length; i++){
    	arrangAUIChildren(columnLayout[i]);
    }
    
    var sht = controls[sheetName];
	//var auiGridProps = {};
    var auiGridProps = sht.auiGridProps;
    
	// 셀 병합 실행
	auiGridProps.enableCellMerge = true;

	auiGridProps.enableSorting = false;
	
	// singleRow 선택모드
//	auiGridProps.selectionMode = "singleCell";
	
	// 고정Row 카운트 지정
	auiGridProps.fixedRowCount = 0;

	// 고정칼럼 카운트 지정
	auiGridProps.fixedColumnCount = arrGroupKeys[0].length;
	
	//시트 편집 가능
	//auiGridProps.editable = true;
	
	// 줄번호 숨김 
	auiGridProps.showRowNumColumn = false;
	
	// 푸터설정
	if (sht.showFooter) {
		auiGridProps.showFooter = true;
		auiGridProps.footerHeight = 30;
	}
	
	// 실제로 #grid_wrap 에 그리드 생성
	var AUIcontrolId = sht.AUIcontrolId;
	document.getElementById(AUIcontrolId).innerHTML = "";
	
	myGridID = AUIGrid.create(AUIcontrolId, columnLayout, auiGridProps);
	if (sht.showFooter) {
		this.setPivotFooter(arrItemLayouts);
	}
	
	// 시트의 열 너비 정비 : Pivot 동작시 시트 열 밀림 현상이 생김에 따라 열 너비 정비를 해야함.(열 너비는 각 열 너비를 올림하여 대입)
	var colInfos = AUIGrid.getColumnInfoList(AUIcontrolId);
	var width = 0;
	for(var i = 0; i < colInfos.length; i++){
		width = Math.ceil(colInfos[i].width * 0.1) * 10;
		sht.defaultColumnSize[i] = (!isNaN(width) ? width : null);
	}
	AUIGrid.setColumnSizeList(AUIcontrolId, sht.defaultColumnSize);
	
	AUIGrid.setGridData(AUIcontrolId, []);
	
	var dataSetId = this.id;
	
	// 이벤트 부여
	AUIGrid.bind(myGridID, "cellEditEnd", function( event ) {
		sht.updatePivotCell(event.rowIndex + 1, event.columnIndex + 1, event.value, event.oldValue);
	});
	
	AUIGrid.bind(myGridID, "cellClick", function( event ) {
		var dataset = dataSets[dataSetId];
//		if (event.columnIndex < dataset._arrGroupKeys[0].length){
//			return;
//		}
		
		var _colNum_ = event.columnIndex - dataset._arrGroupKeys[0].length;
		var aSheet = controls[sheetName];
		var rtnJson = null;
		var colId = null;
		var colIndex = null;
		var rowNum = event.rowIndex + 1;
		var colNum = event.columnIndex + 1;
		
		aSheet._clicked_row_id = event.item._$uid;
		
		if(_colNum_ < 0){
			colId = (("" + dataset._GroupKey).split(","))[event.columnIndex];
			colIndex = _colNum_;
		}
		else{
			rtnJson = dataset._pivotColumnOfColNum(_colNum_);
			colId = rtnJson.colId;
			colIndex = rtnJson.colIndex;			
		}
		
		aSheet.setCurrentRow(rowNum);
		aSheet.setCurrentCol(colNum);

		// 사용자 코딩 추가영역을 호출한다
		if (aSheet.hasClickEvent) {
			var wResult = aSheet.fncClickEvent(rowNum, colNum, colId, colIndex);
			if (typeof(wResult)=="boolean" && !wResult) {
				return false;
			}            
		}
	});
	
	AUIGrid.bind(myGridID, "cellDoubleClick", function( event ) {
		var dataset = dataSets[dataSetId];
//		if (event.columnIndex < dataset._arrGroupKeys[0].length){
//			return;
//		}
		
		var _colNum_ = event.columnIndex - dataset._arrGroupKeys[0].length;
		var aSheet = controls[sheetName];
		var rtnJson = null;
		var colId = null;
		var colIndex = null;
		var rowNum = event.rowIndex + 1;
		var colNum = event.columnIndex + 1;
		
		aSheet._clicked_row_id = event.item._$uid;
		
		if(_colNum_ < 0){
			colId = (("" + dataset._GroupKey).split(","))[event.columnIndex];
			colIndex = _colNum_;
		}
		else{
			rtnJson = dataset._pivotColumnOfColNum(_colNum_);
			colId = rtnJson.colId;
			colIndex = rtnJson.colIndex;			
		}
		
		aSheet.setCurrentRow(rowNum);
		aSheet.setCurrentCol(colNum);

		// 사용자 코딩 추가영역을 호출한다
		if (aSheet.hasClickEvent) {
			var wResult = aSheet.fncDblClickEvent(rowNum, colNum, colId, colIndex);
			if (typeof(wResult)=="boolean" && !wResult) {
				return false;
			}            
		}
	});
	
	var gridData = [];
    for (var i = 0; i < arrDatas.length; i++){
    	var arrGroupKeyLabel = arrGroupKeys[i].arrLabel;

    	// 텍스트 대치
		for (var nGroupLevel = 0; nGroupLevel < arrGroupKeyLabel.length; nGroupLevel++ ){
			if (arrGroupKeyLabel[nGroupLevel] == null){
				var varKey = jsonGroupKey[nGroupLevel];
				// 디폴트로 colId를 채윤다
				var colId = (varKey instanceof Array ? varKey[0] : varKey);

				// 배열인 경우 하위키 루핑 돌며 sumMethod를 찾는다, gk위키중 맨 마지막의 sumMethod를 활용한다.
				if (varKey instanceof Array){
					// 하위키중 하나라도 sumMethod가 있으면 그메서드를 적용하고 
					// 하위키 모두 있으면 나중에 나온것을 적용한다.
					for (var nSubIndex = 0; nSubIndex < varKey.length; nSubIndex++){
						var colId1 = varKey[nSubIndex];
						if (colId1 == "") continue;
						
						if (sumMethods[colId1].trim().length != 0){
							colId = colId1;
						}
					}
				}				
				
				if (sumMethods[colId].substring(0,5) == "TEXT:"){
					var sumString = sumMethods[colId].substring(5);
					for (var nGroupLevel1 = nGroupLevel; nGroupLevel1 <= levelCount - 1; nGroupLevel1++ ){
						if (nGroupLevel1 == 0){
							arrGroupKeyLabel[nGroupLevel1] = sumString;
						} else if (arrGroupKeyLabel[nGroupLevel1 - 1] == sumString || 
								   arrGroupKeyLabel[nGroupLevel1 - 1].endsWith(" " + sumString)){
							arrGroupKeyLabel[nGroupLevel1] = "";
						} else if (arrGroupKeyLabel[nGroupLevel1 - 1] == ""){
							arrGroupKeyLabel[nGroupLevel1] = "";
						} else {
							arrGroupKeyLabel[nGroupLevel1] = arrGroupKeyLabel[nGroupLevel1 - 1] + " " + sumString;
						}
					}
				}
				break;
			}
		}
    	
    	var data = gridData[i] = {};
    	for (var j = 0; j < arrGroupKeys.length; j++){
    		var arrGroupKey = jsonGroupKey[j];
    		for (var k=0; k < jsonGroupKey.length;k++){
    			var varKey = jsonGroupKey[k];
    			var strGroupKey = (varKey instanceof Array ? varKey.join("_") : varKey);
    			data[strGroupKey] = arrGroupKeyLabel[k];
    		}
    	}
    	
    	var levelCount = arrPivotKeys[0].length;
    	arrData = arrDatas[i];
        for (var j=0; j < arrPivotKeys.length; j++){
        	if (arrData[j] == undefined) continue;

        	var arrPivotKey = arrPivotKeys[j][levelCount - 1] + "_" + j;
    		data[arrPivotKey] = arrData[j];
        }
    	
    }

    // 별도의 열추가 시작  ===================
    if (this.arrMoreSumInfos.length > 0){ 
    	for (var moreNdx = 0; moreNdx < this.arrMoreSumInfos.length; moreNdx++){
     		var moreSumInfo = this.arrMoreSumInfos[moreNdx];

     		var dataField = moreSumInfo.colId + "_" + moreSumInfo.sumMethod;
 	        var arrData = this.arrMoreColumnDatas[moreNdx];
 	        for (var nRow=0; nRow < arrData.length; nRow++){
 	        	gridData[nRow][dataField] = arrData[nRow];
 	        }
    	}
    }
    // 별도의 열 추가 종료 ===================
	
    AUIGrid.setGridData(AUIcontrolId, gridData);
    sht.maxRows = gridData.length;
    sht.maxCols = colInfos.length;


    // 별도의 열추가 시작  ===================
    if (this.arrMoreSumInfos.length > 0){ 
 	    // 푸터 처리부 
        var arrFooter = AUIGrid.getFooterLayout(AUIcontrolId);
		if  (arrFooter != null){
			for (var moreNdx = 0; moreNdx < this.arrMoreSumInfos.length; moreNdx++){
//	      		var moreSumInfo = this.arrMoreColumnDatas[moreNdx];
				var moreSumInfo = this.arrMoreSumInfos[moreNdx];
	      		var dataField = moreSumInfo.colId + "_" + moreSumInfo.sumMethod;

				var footerInfo = {};
		        var addedColumnInfo = moreSumInfo.columnInfo; 
		        for (var key in addedColumnInfo){
					footerInfo[key] = addedColumnInfo[key];
			    }

		        footerInfo.positionField = dataField;
		 		footerInfo.labelText = moreSumInfo.footerAmt;  // <--- 값 

		        arrFooter.push(footerInfo);
		        AUIGrid.setFooter(AUIcontrolId, arrFooter);
	    	}
		}   	
    }
    // 별도의 열 추가 종료 ===================
};

/**
 * @description	미결
 * @param	{string}	colId
 * @param	{string}	summingMethod
 * @param	{string}	moreSumInfo
 * @return  {object}
 * @example	미결
 */
DataSet.prototype.addivotColumnToLast = function(colId, summingMethod, moreSumInfo){
	var arrGroupKeys = this._arrGroupKeys;
	var data = new Array(arrGroupKeys.length);
	var data_cnt = new Array(arrGroupKeys.length);
	var data_sum = new Array(arrGroupKeys.length);

    // footerData
    var footer_cnt = 0;
    var footer_sum = 0;
    var footer_amt = 0;
   
	// 피벗키별로 데이터 집계 
	for (var nRowNF = 0; nRowNF < this._DataObject.buffer.length; nRowNF++){
		// 단위 데이터 처리 
		var record = this._DataObject.buffer[nRowNF];
		if (record.RowType == "Logical") continue;

        var arrGroupKey = this._clonePivotKey(record._jsonGroupKeyValue);
		var value = record.values[colId];

		var rowIndex = binaryPivotSearch(arrGroupKeys, arrGroupKey, 0, arrGroupKeys.length - 1);
		if (typeof data[rowIndex] == "undefined"){
			data[rowIndex] = (summingMethod == "COUNT" ? 1 : value);

    		data_cnt[rowIndex] = 1;
    		data_sum[rowIndex] = value;

		} else {
		    data_sum[rowIndex] = data_sum[rowIndex] + value;
		    data_cnt[rowIndex] = data_cnt[rowIndex] + 1;

		    var cellValue = data[rowIndex];

	    	if (summingMethod == "SUM") data[rowIndex] = data_sum[rowIndex]; 
	    	if (summingMethod == "AVG") data[rowIndex] = data_sum[rowIndex] / data_cnt[rowIndex]; 
	    	if (summingMethod == "MIN") data[rowIndex] = (cellValue > value ? value : cellValue);
	    	if (summingMethod == "MAX") data[rowIndex] = (cellValue < value ? value : cellValue);
	    	if (summingMethod == "COUNT") data[rowIndex] = data_cnt[rowIndex];
		}

		// 그룹합 집계 처리 부분 
		for (var groupNdx = arrGroupKey.length - 1; groupNdx >= 0; groupNdx--){
			if (!this._needGroupKey[groupNdx + 1]) continue;

			arrGroupKey[groupNdx] = null;

			// 여기서 부터 위코드와 똑 같이 반복되는 부분  ================
			var rowIndex = binaryPivotSearch(arrGroupKeys, arrGroupKey, 0, arrGroupKeys.length - 1);
			if (typeof data[rowIndex] == "undefined"){
				data[rowIndex] = (summingMethod == "COUNT" ? 1 : value);

	    		data_cnt[rowIndex] = 1;
	    		data_sum[rowIndex] = value;

			} else {
			    data_sum[rowIndex] += value;
			    data_cnt[rowIndex]++;

			    var cellValue = data[rowIndex];

		    	if (summingMethod == "SUM") data[rowIndex] = data_sum[rowIndex]; 
		    	if (summingMethod == "AVG") data[rowIndex] = data_sum[rowIndex] / data_cnt[rowIndex]; 
		    	if (summingMethod == "MIN") data[rowIndex] = (cellValue > value ? value : cellValue);
		    	if (summingMethod == "MAX") data[rowIndex] = (cellValue < value ? value : cellValue);
		    	if (summingMethod == "COUNT") data[rowIndex] = data_cnt[rowIndex];
			}
			// 여기  까지 위코드와 똑 같이 반복되는 부분  ================
		}

		// footer Data 
	    footer_sum += value;
	    footer_cnt++;

    	if (summingMethod == "SUM") footer_amt = footer_sum; 
    	if (summingMethod == "AVG") footer_amt = footer_sum / footer_cnt; 
    	if (summingMethod == "MIN") footer_amt = (footer_amt > value ? value : footer_amt);
    	if (summingMethod == "MAX") footer_amt = (footer_amt < value ? value : footer_amt);
    	if (summingMethod == "COUNT") footer_amt = footer_cnt;
	}

	moreSumInfo.footerAmt = footer_amt;

	data_cnt.clear(); delete data_cnt;
	data_sum.clear(); delete data_sum;

	return data;
};

/**
 * @description	미결
 * @param	{string}	arrItemLayouts
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype.setPivotFooter = function(arrItemLayouts){
	var sht = controls[this._sheetName];
	if (!sht.showFooter) return;
	
	var arrPivotKeys = this._arrPivotKeys;
	var arrGroupKeys = this._arrGroupKeys;
	var jsonGroupKey = this._jsonGroupKey;
	var arrFooterSums = this._arrFooterSums;
    
    var footerObject = [];
	
	for (var i = 0; i < jsonGroupKey.length; i++){
		var footerInfo = footerObject[footerObject.length] = {};
		var ItemLayout = sht.footerObject[i];
		for (var key in ItemLayout){
			if (key != "labelFunction" && key != "styleFunction" && typeof ItemLayout[key] == "function") continue;
			if (key == "positionField" || key == "dataField" ) continue;
			footerInfo[key] = ItemLayout[key];
		}		
		
		var varKey = jsonGroupKey[i];
 		var strGroupKey = (varKey instanceof Array ? varKey.join("_") : varKey);
 		footerInfo.positionField = strGroupKey;
 		footerInfo = null;
	}
	
	
	var levelCount_pivot = arrPivotKeys[0].length;
	var levelCount_group = jsonGroupKey.length;
	var countOfDataColId = sht.footerObject.length - levelCount_group;
	
	var wColNum = jsonGroupKey.length;
    for (var i=0; i < arrPivotKeys.length; i++){
    	var jsonFooterSum = arrFooterSums[i];
    	
    	var colNumRef = levelCount_group + (i % countOfDataColId);
    	
		var footerInfo = footerObject[footerObject.length] = {};
		var ItemLayout = sht.footerObject[colNumRef];
		for (var key in ItemLayout){
			if (key != "styleFunction" && typeof ItemLayout[key] == "function") continue;
			if (key == "positionField" || key == "dataField" ) continue;
			footerInfo[key] = ItemLayout[key];
		}		
    	
    	var wValue = (jsonFooterSum.sumMethod == "SUM" ? jsonFooterSum.sum : 
    			      jsonFooterSum.sumMethod == "AVG" ? jsonFooterSum.sum / this._rowCount_NonGroup :
    				  jsonFooterSum.sumMethod == "MIN" ? jsonFooterSum.min :
    				  jsonFooterSum.sumMethod == "COUNT" ? jsonFooterSum.count :
    				  jsonFooterSum.sumMethod == "MAX" ? jsonFooterSum.max : 0);
    	
    	var colId = arrPivotKeys[i][levelCount_pivot - 1];
    	var strPivotKey = arrPivotKeys[i][levelCount_pivot - 1] + "_" + i;
 		footerInfo.positionField = strPivotKey;
 		footerInfo.labelText = wValue;
 		footerInfo.style = "AUIGrid_Align_right";
 		footerInfo.formatString = "#,##0";
 		
 		ItemLayout = arrItemLayouts[colId];
 		
 		for (var key in ItemLayout){
 			if (key != "labelFunction" && typeof ItemLayout[key] == "function") continue;
 			var lKey = key.toLowerCase();
 			if (lKey == "prefix") {
 				footerInfo.prefix = ItemLayout.prefix;
 			} else if (lKey == "postfix") {
 				footerInfo.postfix = ItemLayout.postfix;
 			} else if (lKey == "formatstring") {
 				footerInfo.formatString = ItemLayout.formatString;
// 			} else if (lKey == "labelfunction") {
// 				footerInfo.labelFunction = ItemLayout.labelFunction;
 			} 
 		}
    }

    AUIGrid.setFooter(sht.AUIcontrolId, footerObject);
	
}

/**
*     @description	미결
*     @param	{string}	columnInfo
*     @return	{string}
*     @example	미결
*/
function arrangAUIChildren(columnInfo){
	// children 없거나 갯수가 하나가 아니면 리턴하고 빠진다
	if (typeof columnInfo.children == "undefined") return;
	for (var i = 0; i < columnInfo.children.length; i++){
		var childColumnInfo = columnInfo.children[i];
		arrangAUIChildren(childColumnInfo);
	}
	if (columnInfo.children.length > 1)  return;
	
	var childColumnInfo = columnInfo.children[0];

	if (typeof childColumnInfo.children != "undefined"){
		// 자식이 children 이 있고 갯수가 하나이면 
		// 캡션이 같으면 조정된 자식 columnInfo를 받는다.
		// Copy하면 children 까지 같이 생기므로 의식할 필요 없다 .
		if (columnInfo.headerText === childColumnInfo.headerText){
			for (var key in childColumnInfo){
				if (key != "labelFunction" && key != "styleFunction" && typeof childColumnInfo[key] == "function") continue;
				if (key.toLowerCase() == "headertext") continue;
				
				columnInfo[key] = childColumnInfo[key];
			}
		}
	}
	
	
	
	// 자식이 children이 없는데 캡션이 없으면 
	// 나한테 복사한다
	childColumnInfo = columnInfo.children[0];
	if (typeof childColumnInfo.children == "undefined"){
		if (childColumnInfo.headerText.trim().length == 0 || columnInfo.headerText === childColumnInfo.headerText) {
			for (var key in childColumnInfo){
				if (key != "labelFunction" && key != "styleFunction" && typeof childColumnInfo[key] == "function") continue;
				if (key.toLowerCase() == "headertext") continue;
				
				columnInfo[key] = childColumnInfo[key];
			}
			delete columnInfo.children; 
		}
	} 
	
    return;
}

// 시트이므로 colIndex는 1부터 시작된다. level은 1부터 시작된다
/**
*     @description	미결
*     @param	{string}	sheetName
*     @param	{number}	level
*     @param	{number}	colIndex_start
*     @param	{number}	colIndex
*     @return	{object}
*     @example	미결
*/
function getColumnObjectFromSheet(sheetName, level, colIndex_start, colIndex){
	var sht = controls[sheetName];
	var columnObj = "";
	if (level == 1){
		columnObj = sht.columnLayout[colIndex_start + colIndex - 1];
	} else if (level == 2){
		columnObj = sht.columnLayout[colIndex_start].children[colIndex - 1];
	} else if (level == 3){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[colIndex - 1];
	} else if (level == 4){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[0].children[colIndex - 1];
	} else if (level == 5){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[0].children[0].children[colIndex - 1];
	} else if (level == 6){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[0].children[0].children[0].children[colIndex - 1];
	} else if (level == 7){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[0].children[0].children[0].children[0].children[colIndex - 1];
	} else if (level == 8){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[0].children[0].children[0].children[0].children[0].children[colIndex - 1];
	} else if (level == 9){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[colIndex - 1];
	} else if (level == 10){
		columnObj = sht.columnLayout[colIndex_start].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[0].children[colIndex - 1];
	} 
	return columnObj;
}

//리턴값 : {row:줄번호, col:칼럼번호, value:변경값} arrPivotKeysForSearch: arrPivotKeys를 검색용으로 소팅한 것 
function setPivotCell(arrDatas, value, arrGroupKey, arrPivotKey, arrPivotKeys, arrGroupKeys, colId, pivotKeyLength, sumMethod, arrPivotKeysForSearch) {
	
	// 셀위치 찾기
	arrPivotKey[pivotKeyLength] = colId; // 임시로 칼럼명을 키로 추가
    
	var rowIndex = binaryPivotSearch(arrGroupKeys, arrGroupKey, 0, arrGroupKeys.length - 1);
	if (rowIndex == -1){
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_021", "Group 위치를 찾지 못했습니다."));
		return null;
	} 
	
	var colIndex = -1;
	var colSearchIndex = binaryPivotSearch(arrPivotKeysForSearch, arrPivotKey, 0, arrPivotKeys.length - 1);
	if (colSearchIndex >= 0){
		colIndex = arrPivotKeysForSearch[colSearchIndex].seq;
	}
	
	if (colIndex == -1){
		if(typeof console != "undefined" && typeof console.log == "function")	console.log(getText("message_dataset_020", "Pivot 위치를 찾지 못했습니다."));
		return null;
	}
	arrPivotKey.pop(); // 임시칼럼키 삭제

	// 집계처리 
	var cellValue; var cnt = 0;
	if (sumMethod == "AVG"){
		// count 처리  [1번 레벨이 null 이면 집계데이터]
		var needPivotSum =  (arrPivotKey[pivotKeyLength - 1] == null);  
		var needGroupSum =  (arrGroupKey[arrGroupKey.length - 1] == null);
		
		if (needPivotSum && needGroupSum){
			cnt = arrPivotKeys[colIndex].cnt *  arrGroupKeys[rowIndex].cnt;
		} else if (needPivotSum){
			cnt = arrPivotKeys[colIndex].cnt;
		} else if (needGroupSum){
			cnt = arrGroupKeys[rowIndex].cnt;
		} 
		
		// Sum 처리
		if (typeof arrDatas[rowIndex][colIndex] == "undefined"){
			arrDatas[rowIndex][colIndex] = 0.0; // sum 속성을 붙이기 위해서 0 데이터를 만든다.
			cellValue = 0.0;
		} else if (typeof arrDatas[rowIndex][colIndex].sum == "undefined"){
			cellValue = 0.0;
		} else {
			cellValue = arrDatas[rowIndex][colIndex].sum;
		}
	} else {
		cellValue = arrDatas[rowIndex][colIndex];
	}
	
	if (sumMethod == undefined || sumMethod == null){
		cellValue = value;
	} else if (typeof arrDatas[rowIndex][colIndex] == "undefined"){
		if (sumMethod == "COUNT"){
			cellValue = 1;
		} else {
			cellValue = value;
		}
	} else {
		if (sumMethod == "SUM"){
			cellValue += value;
		} else if (sumMethod == "MAX"){
			cellValue = (cellValue > value ? cellValue : value);
		} else if (sumMethod == "MIN"){
			cellValue = (cellValue < value ? cellValue : value);
		} else if (sumMethod == "AVG"){
			cellValue += value;
		} else if (sumMethod == "COUNT"){
			cellValue += 1;
		}
	}
	
	if (sumMethod == "AVG"){
		arrDatas[rowIndex][colIndex].sum = cellValue;
		arrDatas[rowIndex][colIndex] = cellValue / cnt;
	} else {
		arrDatas[rowIndex][colIndex] = cellValue;
	}
	
	return {row: rowIndex, col: colIndex, value: arrDatas[rowIndex][colIndex]};
	
}

/**
*     @description	미결
*     @param	{object}	arrays
*     @param	{object}	array
*     @param	{number}	start
*     @param	{number}	end
*     @return	{boolean}
*     @example	미결
*/
function binaryPivotSearch(arrays, array, start, end) {
  if (start > end) { return -1; } //does not exist
  
  var middle = Math.floor((start + end) / 2);
  var array1 = arrays[middle];
  
  var compareResult = comparePivotKey(array1 , array);
  if (compareResult > 0) { 
	  return binaryPivotSearch(arrays, array, start, middle-1); 
  }
  if (compareResult < 0) { 
	  return binaryPivotSearch(arrays, array, middle+1, end); 
  }
  return middle; //found!
}

// null을 Max로 간주하는 비교 
/**
*     @description	미결
*     @param	{string}	jsonGroupKeyValue1
*     @param	{string}	jsonGroupKeyValue2
*     @return	{object}
*     @example	미결
*/
function comparePivotKey(jsonGroupKeyValue1, jsonGroupKeyValue2){
	for (var i = 0; i < jsonGroupKeyValue1.length; i++){
		var varKey1 = jsonGroupKeyValue1[i];
		var varKey2 = jsonGroupKeyValue2[i];
		
		if (varKey1 != null && varKey2 == null){
			return -1;
		} else if (varKey1 == null && varKey2 != null){
			return 1;
		} else if (varKey1 instanceof Array) {
			for (var j=0; j < varKey1.length ;j++) {
				var varSubKey1 = varKey1[j];
				var varSubKey2 = varKey2[j];
				if (varSubKey1 != null && varSubKey2 == null){
					return -1;
				} else if (varSubKey1 == null && varSubKey2 != null){
					return 1;
				} else  if (varSubKey1 > varSubKey2){
					return 1;
				} else if (varSubKey1 < varSubKey2){
					return -1;
				} 
			}
		} else{
			if (varKey1 > varKey2){
				return 1;
			} else if (varKey1 < varKey2){
				return -1;
			} 
		}
	}
	// 마지막으로 jsonGroupKeyValue1까지는 같은데 jsonGroupKeyValue2가 뒤에 배열값이 더있는 경우
	// jsonGroupKeyValue2가 크다
	if (jsonGroupKeyValue1.length < jsonGroupKeyValue2.length){
		return -1;
	}
	
	return 0;
};

/**
 * @description	미결
 * @param	{string}	record
 * @param	{number}	arrFormulaOfLevel
 * @param	{number}	nRowNF
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._makePivotCaption = function(record, arrFormulaOfLevel, nRowNF){
	if (this._PivotKey.length == 0) return [];

	var returnJson = [];
	for (var nLevel=0; nLevel < this._jsonPivotKey.length; nLevel++){
		var levelKey = this._jsonPivotKey[nLevel];

		var formula = arrFormulaOfLevel[nLevel + 1];
		if (formula == ""){                                // 없으면 칼럼값
			if (levelKey instanceof Array){
				var vaule_ = "";
				for (var nSubLevel=0; nSubLevel <levelKey.length; levelKey++){
					var subKey = levelKey[nSubLevel];
					vaule_ += (nSubLevel > 0 ? " " : "") + record.values(subKey);
				}
				returnJson[nLevel] = vaule_;
			} else {
				returnJson[nLevel] = record.values[levelKey];
			}
		} else if (formula.substring(0, 8) != "formula:"){ // 필드명으로 찾아 값채움
			returnJson[nLevel] = record.values[formula];
		} else {
			formula = this._UpdateFormulaNF(formula);
			returnJson[nLevel] = eval(formula.replace("nRowNum", nRowNF));
		}
	}
	
	return returnJson;
};

/**
 * @description	미결
 * @param	{string}	record
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._makePivotKey = function(record){
	if (this._PivotKey.length == 0) return [];

	var returnJson = [];
	for (var i=0; i < this._jsonPivotKey.length; i++){
		var levelKey = this._jsonPivotKey[i];
		if (levelKey instanceof Array) {
			var itemKeys = levelKey;
			var itemKeyValues = [];
			for (j = 0; j < itemKeys.length; j++){
				var itemKey = itemKeys[j];
				itemKeyValues[j] = record.values[itemKey];
			}
			returnJson[i] = itemKeyValues;
			
		} else {
			returnJson[i] = record.values[levelKey];
		}
	}
	
	return returnJson;
};

/**
 * @description	미결
 * @param	{string}	pivotKey
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._clonePivotKey = function(pivotKey){ 
	var rtnPivotKey = [];
	for (var i=0; i < pivotKey.length;i++){
		
		var varKey = pivotKey[i];
		if (varKey instanceof Array) {
			rtnPivotKey[i] = [];
			for (var j=0; j < varKey.length;j++){
				var subKey = varKey[j];
				rtnPivotKey[i][j] = subKey;
			}
			
		} else {
			rtnPivotKey[i] = varKey;
		}
	}
	
	return rtnPivotKey;
};


/**
 * @description	미결
 * @param	{string}	jsonPivotKeyValue
 * @param	{number}	nRowLevel
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._makePivotLevelKey = function(jsonPivotKeyValue, nRowLevel){
	var pivotLevelKey = [];
	var levelCount = jsonPivotKeyValue.length;
	
	for (var i = 0; i < jsonPivotKeyValue.length; i++){
		// 레벨이 1이면 다 
		if (i >= nRowLevel - 1) {
			pivotLevelKey[i] = null;
			continue;
		}
		
		// 그룹레벨별 키 범위내의 데이터 복사 
		var varKey = jsonPivotKeyValue[i];
		
		if (varKey instanceof Array) {
			var varSubKey = [];
			for (var j=0; j < varKey.length; j++) {
				varSubKey[j] = varKey[j];
			}
			pivotLevelKey[i] = varSubKey;
		} else{
			pivotLevelKey[i] = varKey;
		}
	}

	if (typeof jsonPivotKeyValue.arrLabel != "undefined"){
		pivotLevelKey.arrLabel = new Array(levelCount);
		for (var i = 0; i < jsonPivotKeyValue.length; i++){
			if (i >= nRowLevel - 1) {
				pivotLevelKey.arrLabel[i] = null;
				continue;
			}
			pivotLevelKey.arrLabel[i] = jsonPivotKeyValue.arrLabel[i];
		}
	}

	
	return pivotLevelKey;
};

/**
 * @description	미결
 * @param	{string}	jsonPivotCaption
 * @param	{number}	nRowLevel
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._makePivotLevelCaption = function(jsonPivotCaption, nRowLevel){
	var pivotLevelCaption = [];
	var levelCount = jsonPivotCaption.length;
	for (var i = 0; i < jsonPivotCaption.length; i++){
		
		// 그룹레벨별 키 범위내의 원본 데이터 복사 
		pivotLevelCaption[i] = "";
		// 레벨이 1이면 다 

		if (i == nRowLevel - 1) {
			// 디폴트로 colId, sumMethod를 채윤다
			var varKey = this._jsonPivotKey[i];
			var colId = (varKey instanceof Array ? varKey[0] : varKey);
			var sumMethod = this._DataObject.colInfos[colId].sumMethod;

			// 배열인 경우 하위키 루핑 돌며 sumMethod를 찾는다, gk위키중 맨 마지막의 sumMethod를 활용한다.
			if (varKey instanceof Array){
				// 하위키중 하나라도 sumMethod가 있으면 그메서드를 적용하고 
		        // 하위키 모두 있으면 나중에 나온것을 적용한다.
				for (var nSubIndex = 0; nSubIndex < varKey.length; nSubIndex++){
					var colId1 = varKey[nSubIndex];
					if (colId1 == "") continue;
					
					if (this._DataObject.colInfos[colId1].sumMethod.trim().length != 0){
						colId = colId1;
						sumMethod = this._DataObject.colInfos[colId1].sumMethod;
					}
				}
			}
			
			//var colId = this._jsonPivotKey[i];
			//var sumMethod = this._DataObject.colInfos[colId].sumMethod;
			
			if (sumMethod.substring(0,5) == "TEXT:"){
				var sumString = sumMethod.substring(5);
				
				for (var nPivotLevel1 = i; nPivotLevel1 < levelCount; nPivotLevel1++ ){
					if (nPivotLevel1 > 0 && pivotLevelCaption[nPivotLevel1 - 1] != sumString){
						pivotLevelCaption[nPivotLevel1] = pivotLevelCaption[nPivotLevel1 - 1] + " " + sumString;
					} else {
						pivotLevelCaption[nPivotLevel1] = sumString;
					}
				}
				break;
			}
			
		} else {
			pivotLevelCaption[i] = jsonPivotCaption[i];
		}
		
	}
	return pivotLevelCaption;
};


/*
 * 첫번쨰인수가 레코드 또는 배열이다
 * */
/**
*     @description	미결
*     @param	{string}	jsonKeyValue
*     @param	{string}	jsonPivotKeyValue
*     @param	{number}	nRowLevel
*     @return	{boolean}
*     @example	미결
*/
function _checkIfPivotLevelKeyChanged(jsonKeyValue, jsonPivotKeyValue, nRowLevel){
	var keyChanged = false;
	
	for (var i = 0; i < nRowLevel - 1; i++){
		
		// 그룹레벨별 키 범위내의 데이터 복사 
		var varKey1 = jsonKeyValue[i];
		var varKey2 = jsonPivotKeyValue[i]
		
		if (varKey1 instanceof Array) {
			for (var j=0; j < varKey1.length; j++) {
				if (varKey1[j] != varKey2[j]){
					keyChanged = true; break;
				}
			}
			} else{
			if (varKey1 != varKey2){
				keyChanged = true;
			}
		}
		if (keyChanged) break;
	} 
	
	return keyChanged;
}

/**
 * Dataset에 PivotTable을 구성하기 위한 PivotColumn을 지정하는 Property
 * @return               (String) 피벗키를 나타내는 문자열
 * */
DataSet.prototype.getPivotKey = function(){ return this._PivotKey;};

/**
 * Dataset에 PivotTable을 구성하기 위한 PivotColumn을 지정하는 Property
 * @param pivotKey     (String) 피벗키를 나타내는 문자열
 * */
DataSet.prototype.setPivotKey = function(pivotKey){
	this._PivotKey = pivotKey;
	
	var levelKeyArr = this._PivotKey.split(",");
	for (var i=0; i < levelKeyArr.length; i++){
		var levelKey = levelKeyArr[i];
		if (levelKey.indexOf(":") >= 0){
			this._jsonPivotKey[i] = levelKey.split(":");
		} else {
			this._jsonPivotKey[i] = levelKey;
		}
	}
	
	
	// PivotKey가 변경되면 PivotTable이 재구성되며, OnLoadComplete Reason=70 (Pivot)이 발생됩니다.
	this._refreshPivot();
	
	
	return;
};

// rowIndex, columnIndex는 "0" 부터 시작된다 
// 시트에  해당셀은 이미 수정되었다는 전제 
/**
 * @description	미결
 * @param	{number}	rowIndex
 * @param	{number}	columnIdex
 * @param	{string}	value
 * @param	{string}	oldValue
 * @return  {void}
 * @example	미결
 */
DataSet.prototype.updatePivotCell = function(rowIndex, columnIndex, value, oldValue){
	var arrPivotKeys = this._arrPivotKeys;
	var arrGroupKeys = this._arrGroupKeys;
	var sumMethods   = this._sumMethods;
	
	var jsonPivotKey = this._jsonPivotKey;
	var jsonGroupKey = this._jsonGroupKey;
	
	var pivotKeyLength = this._jsonPivotKey.length;
	var groupKeyLength = this._jsonGroupKey.length;
	
	// 이벤트 처리 
	if (this.FireEvent){
		if (this.hasColumnChangedEvent) {
			var rtnJson = this._pivotColumnOfColNum(columnIndex - groupKeyLength);
			var wResult = this.fncColumnChangedEvent(this, rowIndex + 1, rtnJson.colId, oldValue, value, rtnJson.colIndex);
			if (typeof(wResult)=="boolean" && !wResult) {
				return false;
			}            
		}     
	}

	// 1. 칼럼번호로 피벗키를 찾는다 , 앞부분에 그룹키가 채워져 있으니 감안해 준다.
	var arrPivotKey = arrPivotKeys[columnIndex - groupKeyLength];
	var colId = arrPivotKey[pivotKeyLength]; // 추가된 마지막 레벨이 칼럼ID가 들어가 있다. 
	var sumMethod = sumMethods[colId];
		
	// 2. 줄번호로   그룹키를 찾는다 
	var arrGroupKey = arrGroupKeys[rowIndex];
	
	// 3. 합계 업데이트 
	var arrCellsToUpdate = this._updatePivotSum(colId, sumMethod, value - oldValue, arrPivotKey, arrGroupKey);
	var AUIcontrolId = controls[this._sheetName].AUIcontrolId;
	for (var i = 0; i < arrCellsToUpdate.length; i++){
		var cellToUpdate = arrCellsToUpdate[i];
		
		var item = {};    
		item[colId + "_" + (cellToUpdate.col)] = cellToUpdate.value;
		
		try {
			AUIGrid.updateRow(AUIcontrolId, item, cellToUpdate.row);
		} catch(e){
			try {
				AUIGrid.updateRow(AUIcontrolId, item, cellToUpdate.row);
			} catch(e){
				if(typeof console != "undefined" && typeof console.log == "function")	console.log(e);
			}
		}	
	}
	
	// 3. 그룹키 + 피봇키로 원본데이터셋에서 레코드를 찾는다 
	var arrRecordKey = [];
	for (var nLevel=0; nLevel < this._jsonPivotKey.length; nLevel++){
		var fieldId = ""; var value_ = null;
		var levelKey = this._jsonPivotKey[nLevel];
		
		if (levelKey instanceof Array) {
			for (var nSubLevel=0; nSubLevel < levelKey.length; nSubLevel++){
				fieldId = levelKey[nSubLevel];				
				value_ = arrPivotKey[nLevel][nSubLevel];
				arrRecordKey[fieldId] = value_;
			}
		} else {
			fieldId = levelKey;
			value_ = arrPivotKey[nLevel];
		    arrRecordKey[fieldId] = value_;
		}
	}
	
	for (var nLevel=0; nLevel < this._jsonGroupKey.length; nLevel++){
		var fieldId = ""; var value_ = null;
		var levelKey = this._jsonGroupKey[nLevel];
		if (levelKey instanceof Array) {
			for (var nSubLevel=0; nSubLevel < levelKey.length; nSubLevel++){
				fieldId = levelKey[nSubLevel];				
				value_ = arrGroupKey[nLevel][nSubLevel];
				arrRecordKey[fieldId] = value_;
			}
		} else {
			fieldId = levelKey;
			value_ = arrGroupKey[nLevel];
		    arrRecordKey[fieldId] = value_;
		}
	}

	var found = false;
	for (var nRow = 0; nRow < this._DataObject.records.length; nRow++){
		var record = this._DataObject.records[nRow];
		
		found = true;
		for (var key in arrRecordKey){
			if (typeof arrRecordKey[key] == "function") continue;
			if (arrRecordKey[key] != record.values[key]){
				found = false;
				break;
			}
		}
		if (found){
			//record.values[colId] = value;
			//record.RowType = "Update";
			this._DataObject.setColumn(nRow, colId, value);
			break;
		}
	}
	
	// 발견되지 않으면 레코드 추가
	if (!found){
		var record = new MiRecord(this._DataObject.colInfos);
		var newIndex = this._DataObject.records.length;
		record._orignalIndex = newIndex;
		
		this._DataObject.records[newIndex] = record;
		for (var key in arrRecordKey){
			if (typeof arrRecordKey[key] == "function") continue;
			record.values[key] = this._DataObject._getRawValue(key, arrRecordKey[key]);
		}
		//record.values[colId] = value;
		record.RowType = "Insert";
		this._DataObject.setColumn(nRow, colId, value);
	}
	
	return;
}


// colId, colIndex로 열번호를 찾는다, RowHead 갯수는 포함이니 사용할 때 그냥 쓴다.
/**
 * @description	미결
 * @param	{string}	colId
 * @param	{number}	colIndex
 * @return  {number}
 * @example	미결
 */
DataSet.prototype._colNumOfPivotColumn = function(colId, colIndex){ 
	var colNum = -1;
	if (this._arrPivotKeys.length == 0) return colNum;
	
	var arrPivotKeys = this._arrPivotKeys;
	var arrGroupKeys = this._arrGroupKeys;
	var lastLevel = arrPivotKeys[0].length - 1;
	var groupKeyCount = arrGroupKeys[0].length;
	
	for (var i = 0; i < arrPivotKeys.length; i++){
		var arrPivotKey = arrPivotKeys[i];
		if (typeof arrPivotKey.ndx == "undefined") continue;
		if (arrPivotKey.ndx != colIndex) continue;
		if (arrPivotKey[lastLevel] != colId) continue;
		
		colNum = i;
		break;
	}
	
	return (colNum < 0 ? -1 : colNum + groupKeyCount);
};

//열번호로 colId, colIndex를 찾는다 , colNum에는 RowHead 갯수는 포함안됨. 0부터 시작 
/**
 * @description	미결
 * @param	{number}	colNum
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._pivotColumnOfColNum = function(colNum){ 
	var rtnJson = {colId:"", colIndex:-1};
	
	if (this._arrPivotKeys.length == 0) return rtnJson;
	
	var arrPivotKey = this._arrPivotKeys[colNum];
	var lastLevel = this._arrPivotKeys[0].length - 1;
	
	rtnJson.colId = arrPivotKey[lastLevel]; 
	rtnJson.colIndex = arrPivotKey.ndx;
	
	return rtnJson;
};

/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @param	{string}	varVal
 * @param	{number}	nPivotIndex
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype._SetPivotColumn = function(nRow, varCol, varVal, nPivotIndex){
	var strColID = (typeof(varCol) == 'number' ? this._arrItemColIds(varCol)  : varCol);
	var colNum = this._colNumOfPivotColumn(strColID, nPivotIndex);

	if (colNum < 0) return;
	
	var AUIcontrolId = controls[this._sheetName].AUIcontrolId;
	var dataField = AUIGrid.getDataFieldByColumnIndex(AUIcontrolId, colNum);
	
	var item = {};    
	item[dataField] = varVal;
	
	try {
		AUIGrid.updateRow(AUIcontrolId, item, nRow);
	} catch(e){
		try {
			AUIGrid.updateRow(AUIcontrolId, item, nRow);
		} catch(e){
			if(typeof console != "undefined" && typeof console.log == "function")	console.log(e);
		}
	}	

};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @param	{number}	nPivotIndex
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._GetPivotColumn = function(nRow, varCol, nPivotIndex){
	var strColID = (typeof(varCol) == 'number' ? this._arrItemColIds(varCol)  : varCol);
	 
	if (this._isPivotColumn(strColID)){
		return this._getPivotPivotColumn(nRow, varCol, nPivotIndex);
	} else if (this._isGroupColumn(strColID)){
		return this._getPivotGroupColumn(nRow, varCol);
	}
	
	var colNum = this._colNumOfPivotColumn(strColID, nPivotIndex);

	if (colNum < 0) return;
	
	var AUIcontrolId = controls[this._sheetName].AUIcontrolId;
	var dataField = AUIGrid.getDataFieldByColumnIndex(AUIcontrolId, colNum);
	
	return AUIGrid.getItemByRowIndex(AUIcontrolId, nRow)[dataField];
};

/**
 * @description	미결
 * @param	{number}	varCol
 * @param	{number}	nPivotIndex
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._getPivotCurrentColumn = function(varCol, nPivotIndex){
	var strColID = (typeof(varCol) == 'number' ? this._arrItemColIds(varCol)  : varCol);
	var colNum = this._colNumOfPivotColumn(strColID, nPivotIndex);

	if (colNum < 0) return;
	
	var AUIcontrolId = controls[this._sheetName].AUIcontrolId;
	var dataField = AUIGrid.getDataFieldByColumnIndex(AUIcontrolId, colNum);

	var nRow =  AUIGrid.getSelectedIndex(AUIcontrolId)[0];
	return AUIGrid.getItemByRowIndex(AUIcontrolId, nRow)[dataField];
};

/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	strColId	
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._GetPivotGroupColumn = function(nRow, strColId){

	for (var i=0; i < this._jsonGroupKey.length;i++){
		var varKeyName = this._jsonGroupKey[i];
		if (varKeyName instanceof Array) {
			for (var j=0; j < varKeyName.length;j++){
				var colId = varKeyName[j];
				if (strColId === colId){
					return this._arrGroupKeys[nRow][i][j];
				}
			}
			
		} else {
			var colId = this._jsonGroupKey[i];
			if (strColId === colId){
				return this._arrGroupKeys[nRow][i];
			}
		}
	}
	return null;
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	strColId
 * @param	{number}	sPivotIndex
 * @return  {string}
 * @example	미결
 */
DataSet.prototype._GetPivotPivotColumn = function(nRow, strColId, nPivotIndex){
	var groupKeyCount = this._arrGroupKeys[0].length;
	
	var lastIndex  = this._arrItemColIds.length -1;
	var strColID = this._arrItemColIds[lastIndex];
	var colNum = this._colNumOfPivotColumn(strColID, nPivotIndex) - groupKeyCount;

	if (colNum < 0) return;	
	
	for (var i=0; i < this._jsonPivotKey.length;i++){
		var varKeyName = this._jsonPivotKey[i];
		if (varKeyName instanceof Array) {
			for (var j=0; j < varKeyName.length;j++){
				var colId = varKeyName[j];
				if (strColId === colId){
					return this._arrPivotKeys[colNum][i][j];
				}
			}
			
		} else {
			var colId = this._jsonPivotKey[i];
			if (strColId === colId){
				return this._arrPivotKeys[colNum][i];
			}
		}
	}
	
	return null;
};

/**
 * @description	미결
 * @param	{string}	strColId
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype._isPivotColumn = function(strColId){
	for (var i=0; i < this._jsonPivotKey.length;i++){
		var varKeyName = this._jsonPivotKey[i];
		if (varKeyName instanceof Array) {
			for (var j=0; j < varKeyName.length;j++){
				var colId = varKeyName[j];
				if (strColId === colId){
					return true;
				}
			}
			
		} else {
			var colId = this._jsonPivotKey[i];
			if (strColId === colId){
				return true;
			}
		}
	}
	return false;
}
/**
 * @description	미결
 * @param	{string}	strColId
 * @return  {boolean}
 * @example	미결
 */
DataSet.prototype._isGroupColumn = function(strColId){
	for (var i=0; i < this._jsonGroupKey.length;i++){
		var varKeyName = this._jsonGroupKey[i];
		if (varKeyName instanceof Array) {
			for (var j=0; j < varKeyName.length;j++){
				var colId = varKeyName[j];
				if (strColId === colId){
					return true;
				}
			}
			
		} else {
			var colId = this._jsonGroupKey[i];
			if (strColId === colId){
				return true;
			}
		}
	}
	return false;
}
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @param	{string}	varVal
 * @param	{number}	nPivotIndex
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype._setPivotColumn = function(nRow, varCol, varVal, nPivotIndex){
	this._SetPivotColumn(nRow, varCol, varVal, nPivotIndex);
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @param	{string}	varVal
 * @param	{number}	nPivotIndex
 * @return  {undefined}
 * @example	미결
 */
DataSet.prototype._setPivotColumnNF = function(nRow, varCol, varVal, nPivotIndex){
	this._SetPivotColumn(nRow, varCol, varVal, nPivotIndex);
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @param	{number}	nPivotIndex
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._getPivotColumn = function(nRow, nColIdx, nPivotIndex){
	return this._GetPivotColumn(nRow, nColIdx, nPivotIndex);
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{number}	varCol
 * @param	{number}	nPivotIndex
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._getPivotColumnNF = function(nRow, nColIdx, nPivotIndex){
	return this._GetPivotColumn(nRow, nColIdx, nPivotIndex);
};
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	strColId
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._getPivotGroupColumn = function(nRow, strColId){
	return this._GetPivotGroupColumn(nRow, strColId);
}
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	strColId
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._getPivotGroupColumnNF = function(nRow, strColId){
	return this._GetPivotGroupColumn(nRow, strColId);
}
/**
 * @description	미결
 * @param	{number}	nRow
 * @param	{string}	strColId
 * @param	{number}	nPivotIndex
 * @return  {object}
 * @example	미결
 */
DataSet.prototype._getPivotPivotColumn = function(nRow, strColId, nPivotIndex){
	return this._GetPivotPivotColumn(nRow, strColId, nPivotIndex);
}
/**
 * Pivot Dataset의 Pivot된 갯수를 얻어오는 Property<br/>
 * pivotCount는 pivotTable의 Col 갯수를 return 합니다. pivotindex의 최대값+1 에 해당됩니다.<br/>
 * 각 pivotRow단위의 유효한 pivot column 갯수를 구하기 위해서는 pivotCount() 메소드를 사용합니다.<br/>
 * @return               (int) Pivot된 갯수
 * */
DataSet.prototype.getPivotIndexCount = function(){ return this._PivotIndexCount;};

/* 사용안한부분 
 // 설정으로만 동작하게 하고 사람이 조작 못하게 한다
DataSet.prototype.getReverseSubsum = function(){ return this._ReverseSubsum;};
DataSet.prototype.setReverseSubsum = function(reverseSubsum){
	this._ReverseSubsum = reverseSubsum;
	this._refreshPivot();
	return;
};

*/

/*
 * 	2016-04-19 추가(차중훈)
 */
/**
*     @description	미결
*     @param	{object}	control
*     @param	{number}	rowNum
*     @return	{number}
*     @example	미결
*/
function _common_convertToDsRowNum(control, rowNum){
	//시트에 연결된 데이터셋이 없는 경우
	if (control.dataBinds == null || getAssociativeArrayLength(control.dataBinds) == 0) return -1;
	//시트의 행번호가 1보다 작은 경우
	if(isNaN(rowNum) || rowNum > control.maxRows || rowNum < 1) return -1;
	
	//시트와 연결된 데이터셋을 찾는다.
	var dataset = null;
	for (var key in control.dataBinds){
		var bindInfo = control.dataBinds[key];
		if( typeof(bindInfo) == "function" ) continue;
		
		if (bindInfo.controlName == control.controlName) {
			if (dataset == null) {
				dataset = dataSets[bindInfo.datasetId];
				break;
			}	
		}
	}
	
	//시트에 연결된 데이터셋을 찾지 못한 경우
	if (dataset == null) return -1;

	//시트 행의 _$uid를 찾는다. 행의 _$uid와 데이터셋의 레코드의 _$uid로 연결된 행을 비교한다.
	var row_uid = null;
	var list = dataset.records;
	
	if( (typeof AUIDataSheet == "function" || control instanceof AUIDataSheet)
		|| (typeof AUIDataSheetM == "function" || control instanceof AUIDataSheetM)
	){
		row_uid = AUIGrid.getItemByRowIndex(control.AUIcontrolId, rowNum - 1)._$uid;
	}
	else if( typeof EasySheet == "function" || control instanceof EasySheet ){
		row_uid = control.rows(rowNum - controls.startRowColNum).rowId;
	}

	//데이터셋 레코드의 _$uid와 시트 행의 _$uid가 같은 레코드 번호를 찾는다.
	var recordNum = -1;
	for(var nRow = 0; nRow < list.length; nRow++){
		if(list[nRow]._$uid == row_uid){
			recordNum = nRow;
			break;
		}
	}
	
	//레코드 행번호 리턴한다. 레코드를 못 찾을 경우 -1을 리턴한다.
	return recordNum;
}

if (typeof AUIDataSheet == "function")
    AUIDataSheet.prototype.convertToDsRowNum = function(rowNum){ return _common_convertToDsRowNum(this, rowNum);};
if (typeof AUIDataSheetM == "function")
    AUIDataSheetM.prototype.convertToDsRowNum = function(rowNum){ return _common_convertToDsRowNum(this, rowNum);};

if( typeof EasySheet == "function" ){
	EasySheet.prototype.convertToDsRowNum = function(rowNum){ return _common_convertToDsRowNum(this, rowNum);};
}

/*
 *	2016-06-16 추가(차중훈)
 *
 *	DataSet.setInstantUpdateControl 함수
 */
    /**
     * @description	미결
     * @param	{boolean}	instantUpdateControl
     * @return  {boolean}
     * @example	미결
     */
DataSet.prototype.setInstantUpdateControl = function( instantUpdateControl ){
	//파라메터는 true 또는 false 로만 변경 가능(예외처리) : false 리턴
	if(typeof instantUpdateControl != "boolean") return false;
	
	//instantUpdateControl 속성 변경
	this.instantUpdateControl = instantUpdateControl;
	
	//변경된 instantUpdateControl 속성 값이 true 인 경우 데이터셋의 데이터를 컨트롤에 반영
	if( this.instantUpdateControl ){
		var sheet = "";
		for (var key in this.dataBinds){
			var bindInfo = this.dataBinds[key];
			if( typeof(bindInfo) == "function" ) continue;
			if (bindInfo.controlType != "Sheet" && bindInfo.controlType != "lstSheet") continue;
			sheet = controls[bindInfo.controlName];
			break;
		}
		
		var enableCellMerge = false;
		if( (typeof AUIDataSheet == "function" && sheet instanceof AUIDataSheet)
			|| (typeof AUIDataSheetM == "function" && sheet instanceof AUIDataSheetM)
		){
			enableCellMerge = (typeof AUIGrid != "undefined") ? AUIGrid.getProp(sheet.AUIcontrolId, "enableCellMerge") : false;
			if( enableCellMerge ) AUIGrid.setCellMerge(sheet.AUIcontrolId, false);
		}
		
//		if (this._GroupKey.length <= 0){
//			this.updateControlList();
//		}
		this.updateControlList();
		
		//데이터셋의 그룹키가 존재하는 경우
		if (this._GroupKey.length > 0){
		    this._refreshGroupCation(true);
		}
		//데이터셋의 데이터가 존재하는 경우
		if(this.getRowCount() > 0 && this.Row >= 0){
			//데이터셋의 데이터가 존재하고 데이터셋의 Row가 0 이상인(레코드를 가리키는) 경우
			this.updateControlRowPosition( this.Row );
		}
		else{
			this._clearControlData();
		}
		
		if( (typeof AUIDataSheet == "function" && sheet instanceof AUIDataSheet)
			|| (typeof AUIDataSheetM == "function" && sheet instanceof AUIDataSheetM)
		){
			if( enableCellMerge ) AUIGrid.setCellMerge(sheet.AUIcontrolId, enableCellMerge);
		}
	}
	
	//instantUpdateControl 속성 변경 및 데이터 반영이 완료되면 true 리턴
	return true;
};
/*
 *	2016-06-16 추가(차중훈)
 */

/*
 * 	2016-04-19 추가(차중훈)
 */
//	2016-05-23 : GDS_VALUE 추가
//var gds_value_object = {	
//		id:"GDS_VALUE", 
//		datasettype:"Dataset",
//		filterexpr:"",
//		groupkey:"",
//		pivotkey:"",
//		colinfos:[
//		        {id:"ReqVariable", size:"256", type:"Char", summ: ""},
//		        {id:"ReqVariableValue", size:"256", type:"Char", summ: ""}
//		],
//		records:[
//	         	{id:"dataset;gds_value;data1",	reqvariable:"USER_ID",		reqvariablevalue:USER_USERID},
//	         	{id:"dataset;gds_value;data2",	reqvariable:"PART",			reqvariablevalue:""},					//??
//	         	{id:"dataset;gds_value;data3",	reqvariable:"USER_NAME",	reqvariablevalue:USER_PERSONALNAME},
//	         	{id:"dataset;gds_value;data4",	reqvariable:"EMAIL",		reqvariablevalue:USER_EMAIL},
//	         	{id:"dataset;gds_value;data5",	reqvariable:"DEPT_CD",		reqvariablevalue:USER_PART},
//				{id:"dataset;gds_value;data6",	reqvariable:"DEPT_NM",		reqvariablevalue:USER_PART_NM},
//				{id:"dataset;gds_value;data7",	reqvariable:"EMAIL_PWD",	reqvariablevalue:""},
//				{id:"dataset;gds_value;data8",	reqvariable:"PWD",			reqvariablevalue:""},
//				{id:"dataset;gds_value;data9",	reqvariable:"WEB_ADMIN_YN",	reqvariablevalue:USER_WEB_ADMIN_YN},
//				{id:"dataset;gds_value;data10",	reqvariable:"EXTENAL_FLAG",	reqvariablevalue:USER_EXTENAL_FLAG},
//				{id:"dataset;gds_value;data11",	reqvariable:"SINGLE_PWD",	reqvariablevalue:USER_SINGLE_PWD},
//				{id:"dataset;gds_value;data12",	reqvariable:"RESIDENT_NO",	reqvariablevalue:USER_RESIDENT_NO},
//				{id:"dataset;gds_value;data13",	reqvariable:"DEPT_NM",		reqvariablevalue:USER_PART_NM},
//				{id:"dataset;gds_value;data14",	reqvariable:"PART",			reqvariablevalue:USER_PART},
//				{id:"dataset;gds_value;data15",	reqvariable:"IP",			reqvariablevalue:USER_IPADDR},
//				{id:"dataset;gds_value;data16",	reqvariable:"EMP_LEVEL",	reqvariablevalue:USER_EMP_LEVEL},
//				{id:"dataset;gds_value;data17",	reqvariable:"VEND_CD",		reqvariablevalue:""},					//??
//	         	{id:"dataset;gds_value;data18",	reqvariable:"USERID",		reqvariablevalue:USER_USERID},				
//				{id:"dataset;gds_value;data19",	reqvariable:"IPADDR",		reqvariablevalue:USER_IP}
//		] 
//};
//var GDS_VALUE = new DataSet(gds_value_object);
//dataSets["GDS_VALUE"]  = GDS_VALUE;
//// 2016-06-03 : PB 전달용 G 데이터셋 추가
//var _g_value_object = {	
//		id:"G", 
//        datasettype:"Dataset",
//        filterexpr:"",
//        groupkey:"",
//        pivotkey:"",
//        colinfos:[
//           			{id:"USERID", size:"256", type:"Char", summ: ""},
//           			{id:"IPADDR", size:"256", type:"Char", summ: ""}
//                 ],
//        records:[
//                   {id:"dataset;g;data1",ipaddr:USER_IP,userid:USER_USERID}
//                ] 
//       };
//var _G = new DataSet(_g_value_object);
//dataSets["_G"]  = _G;


if( typeof EasySheet != "undefined" ){
	EasySheet.prototype.getLookingRowNum = function(varRow){
		if( typeof varRow == "undefined" ){
			alert(getText("message_AUIDataSheet_020", "getAvailableRowNum(줄번호) 또는 getAvailableRowNum(\"줄ID\")의 형태로 사용하세요."));
			return -1;
		}
		
		var rowNum = -1;
		
		if( typeof varRow == "string" ){
			var result = this.dataSet.getData();
			
			if( result.result ){
				var datas = result.resultData;
				var state = null;
				var maxRow = datas.length;
				var i = 0;
				
				for(i = 0; i < maxRow; i++, state = null){
					state = datas[i].__STATE__;
					
					if( typeof state == "undefined" ) continue;
					
					if( state.rowId == varRow ){
						rowNum = i;
						state = null;
						break;
					}
				}
				
				datas.clear();
				datas = null;
			}
			
			result.resultData = null;
			result = null;
		}
		else if( typeof varRow == "number" ){
			rowNum = varRow;
		}
		
		return rowNum;
	}
}

DataSet.prototype.refresh = function(){
	this.setBlocking();
	
	if( this.FilterExpr.length > 0 )
		this.filter(this.FilterExpr);
	
	if( this.getGroupKey().length > 0 )
		this._ResetGroup();
	
	this.Row = 0;
	this.updateControlList();
	
	if( this.getGroupKey().length > 0 )
		this._refreshGroupCation(true);
	
	var key = null;
	var bindInfo = null;
	
	for(key in this.dataBinds){
		bindInfo = this.dataBinds[key];
		
		if( typeof bindInfo == "function" ){
			bindInfo = null; key = null;
			continue;
		}
		
		this.updateControlValue(bindInfo.colId);
		
		bindInfo = null; key = null;
	}
};/**
 * @class WebEditor를 만들어주는 클래스
 * @param controlId
 *            {String} Control의 id를 입니다.
 * @param controlName
 *            {String} Control의 name을 입니다.
 * @param tagObject
 *            {Object} 태그객체 입니다.
 * @example 미결
 */  
function WebEditor(controlId, controlName, tagObject){
    this.base = ControlBase;      //부모클래스 지정
    this.base(controlId, controlName, tagObject);         //부모클래스 생성자호출
//    this.value = tagObject.innerHTML.replaceWord("<BR/>", "\r\n");
    this.value = "";
};

WebEditor.prototype = new ControlBase();

/*
function searchControl_Label(em){
	var pEm = em;
	var wReturn = null;
	
	while (pEm.parentNode && !pEm.className.startsWith("Label")) 
		pEm = pEm.parentNode;
	if (pEm.className.startsWith("Label")) 
	    wReturn = getControlById(pEm.id);
	
	return wReturn;
};
*//*
 *   이클립스에서 리포트가 제대로 나오게 하기 위해서는 하단의 서버를 더블클릭한 후 
 *   "Server Options"의 "Serve modules without publishing"에 체크해 주어야 한다
 * */

/**                                                                                         
 *       @class          Report 클래스                                                     
 *       @constructor    Report                                           
 *                                                                                           
 *       @param          controlId     {String}      해당 컨트롤의 ID를 지정합니다.                              
 *       @param          controlName   {String}      해당 컨트롤의 Name을 지정합니다.                            
 *       @param          tagObject     {Object}      해당 컨트롤의 태그 객체를 지정합니다.
 *                                                                                           
 *       @return         객체 생성 성공하면 객체의 errorMsg 필드가 null 입니다.<br>만약 에러가 발생한다면 errorMsg 필드에 에러메시지를 반환합니다.
 *
 *       @example        var wReport = new Report();
 *        if( wReport.errorMsg != null ){
 *           //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 *       wReport.reportId = "2002";             //레포트 ID는 2002 입니다.
 *       wReport.reportName = "거래명세서";     //레포트명은 거래명세서입니다.
 *       wReport.reportType = "hpt";            //
 *       wReport.directPrint = "false";         //출력할 프린터 설정을 하지 않았습니다.
 *       wReport.filePrint = "false";           //파일출력 설정을 하지 않았습니다.
 */
function Report(){
	/**
	 *   @description    레포트 ID 입니다.<br>기본값 : 없음.<br><br>
	 */
	this.reportId = "";   // ex: "1176" 
	/**
	 *   @description    레포트명 입니다.<br>기본값 : 없음.<br><br>
	 */
	this.reportName = ""; // ex: "급여처리"
	/**
	 *   @description    레포트 형식입니다.<br>기본값 : 없음.<br><br>
	 */
	this.reportType = "";
	/**
	 *   @description    레포트를 출력할 프린터를 가리킵니다.<br>기본값 : 없음.<br><br>
	 */
	this.directPrint = "";
	/**
	 *   @description    레포트를 출력할 파일을 가리킵니다.<br>기본값 : 없음.<br><br>
	 */
	this.filePrint = "";
	/**
	 *   @description    레포트로 보낼 파라메터 배열입니다.<br>기본값 : 없음.<br><br>
	 */
	this.parameters = [];
    reports[reports.length] = this;
	/**
	 * @description	미결
	 */
    this.busy = false;
    /**
	 *   @description    레포트를 출력할 Target(=IFrame콘트롤명) 입니다.<br>기본값 : 없음.<br><br>
	 */
	this.reportTarget = "";
};

/**
 *       @description    레포트에 파라메터를 설정한다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @param          fieldName       {String}                            파라메터 배열의 키 값을 입력합니다.
 *       @param          dataValue       {Number, String, Boolean, Object}   해당 파라메터의 값을 입력합니다.
 *       @return         파라메터 설정을 성공한다면 true를 반환합니다.<br>만약 에러가 발생하였다면 false를 반환합니다.
 *       @example        var wReport = new Report();
 *        if( wReport.errorMsg != null ){
 *           //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 *       wReport.reportId = "2002";
 *       wReport.reportName = "거래명세서";
 *       wReport.reportType = "hpt";
 *       wReport.directPrint = "false";
 *       wReport.filePrint = "false";
 *        
 *        //출고일자 파라메터에 TextBox_2 컨트롤의 값을 저장합니다.
 *        if( wReport.setParameter("출고일자", controls["TextBox_2"].value) == false ){
 *              //파라메터값 저장 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 */
Report.prototype.setParameter = function(fieldName, dataValue){
	// functionname : [Report.setParameter]

    this.parameters[fieldName] = dataValue;
    return;
};

/**
 *       @description    레포트를 실행, 화면에 출력합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
 *       @return         레포트 실행을 성공한다면 true를 반환합니다.<br>만약 에러가 발생하였다면 false를 반환합니다.
 *       @example        var wReport = new Report();
 *        if( wReport.errorMsg != null ){
 *           //객체 생성 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 *       wReport.reportId = "2002";
 *       wReport.reportName = "거래명세서";
 *       wReport.reportType = "hpt";
 *       wReport.directPrint = "false";
 *       wReport.filePrint = "false";
 *
 *        //출고일자 파라메터에 TextBox_2 컨트롤의 값을 저장합니다.
 *        if( wReport.setParameter("출고일자", controls["TextBox_2"].value) == false ){
 *              //파라메터값 저장 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 *
 *        //레포트를 실행합니다.
 *        if( wReport.excute() == false ){
 *               //레포트 실행 실패하였습니다. 에러처리 코드를 입력해주세요.
 *        }
 */
Report.prototype.execute = function(){
	// functionname : [Report.execute]

    var reportId = this.reportId;
    
    var paramString = "";
    for (var key in this.parameters){
		if (typeof(this.parameters[key])=="function") continue;
    	paramString += this.parameters[key] + ";";
    }
    
    var wQueryString = "cogu=" + (USER_COGU == undefined || USER_COGU == "" ? 0 : USER_COGU)
    				 + "&personalid=" + (USER_PERSONALID == undefined || USER_PERSONALID == "" ? 0 : USER_PERSONALID) 
                     + "&reportid=" + encodeURIComponent(reportId)
                     + "&parameters=" + encodeURIComponent(paramString)
                     + "&lang=" + USER_LANGUAGE
	                 + "&tm=" + (new Date()).valueOf();
    
    this.busy = true;
    ajaxCall("POST", "ViewReport.do", wQueryString, this, "textGetReport", 30);
    
//    var win = window.open("", "", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
//    win.document.write('<style type="text/css">body{margin:0;padding:0;}</style>');
//    win.document.write('<iframe src="ViewReport.do?'+wQueryString+'" width="100%" height="100%"></iframe>');
//    win.document.write('<object data="ViewReport.do?'+wQueryString+'" type="application/pdf" width="100%" height="100%"></object>');
//    win.document.write('<embed src="ViewReport.do?'+wQueryString+'" type="application/pdf" width="100%" height="100%"></embed>');
//    win.document.write('<form action="ViewReport.do?'+wQueryString+'" method="POST" name="frm1"></form>');
//    win.document.frm1.submit();
    
    return;
};

/**
*     @description    서버로부터 리포트 데이터가 전송되면 데이터를 받아 팝업창으로 출력합니다.<br>만약 메소드가 동작 중 에러가 발생하였다면 에러메세지는 객체의 errorMsg 필드에서 확인할 수 있습니다.
*     @param          info        {Object}    서버로부터 받은 리포트 결과입니다.    
*     @param          message     {String}    서버로부터 받은 오류메세지입니다.
*     @param          pFlag       {??}        ??   
*     @return         레포트 출력을 성공한다면 true를 반환합니다.<br>만약 에러가 발생하였다면 false를 반환합니다.
*/
Report.prototype.parseData = function(info, message, pFlag){
	// functionname : [Report.parseData]
	this.busy = false;  
	
//	reports.splice(reports.indexOf(this.reportId),1);
//	
//	if (reports.length == 0) {
//		hideAjaxBox();
//	}
	
	// 오류 메시지 먼저 파악 
	if (info == null){
		callEvent("report" + this.reportId + "_Failed", message);
		return;
	}
	
	try {
//		var send = new Object();  
//        send.reportInfo = info;
//        var sFeatures = "dialogHeight=768px;dialogWidth=1024px;scroll=no;status=no;help=no;center=yes;resizable=yes";
//        self.showModalDialog(getContextPath() + "/pages/groupware/report/ViewReport.jsp", send, sFeatures);
		
//		var win = window.open("data:application/pdf;base64,"+escape(info), "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no");
//		win.document.write('<object id="pdf" border="0" width="100%" height="100%" type="application/pdf" data="'+escape(info)+'" standby="Loading pdf..."></object>');
//		win.document.write('<embed id="pdf" src="'+escape(info)+'" width="100%" height="100%" type="application/pdf" /></object>');
//		var wndw = window.open("https://get.adobe.com/kr/reader/", "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
//		var wndw = window.open(info, "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
//		if (!wndw) throw "팝업이 차단 되었습니다. 레포트를 실행하시려면 팝업을 허용해 주세요. \n ※팝업차단허용방법: 브라우저 상단 메뉴바에서 [도구]-[팝업차단]-[팝업차단설정] 에서 허용할 웹사이트 주소란에 주소를 추가해 주시고 레포트를 실행해 주세요.";
//		alert(info);
//		var win = window.open("about:blank", "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
//		var win = window.open("/FlexFrame/index.jsp", "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
		
		if (typeof this.reportTarget == "string" && this.reportTarget.trim() != "" && controls[this.reportTarget] != undefined) {
			controls[this.reportTarget].iframe.src = "ViewReportLoad.do?fileName="+encodeURI(encodeURIComponent(info));
		} else {
			if (BrowserDetect.browser == "Explorer") {
				var win = window.open("ViewReportLoad.do?fileName="+encodeURI(encodeURIComponent(info)), "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
			} else {
				var win = window.open("about:blank", "_blank", "width=1024px, height=768px, toolbar=no, menubar=no, scrollbars=no, resizable=yes, copyhistory=no");
				if (!win) throw getText("message_report_001", "팝업이 차단 되었습니다. 레포트를 실행하시려면 팝업을 허용해 주세요. \n ※팝업차단허용방법: 브라우저 상단 메뉴바에서 [도구]-[팝업차단]-[팝업차단설정] 에서 허용할 웹사이트 주소란에 주소를 추가해 주시고 레포트를 실행해 주세요.");
				setTimeout(function (){
				win.document.write('<html><head><title>'+info.split("|")[2]+'</title><meta http-equiv="X-UA-Compatible" content="IE=Edge"/><style type="text/css">body{margin:0;padding:0;height:100%;}</style></head>');
				win.document.write('<body><iframe src="ViewReportLoad.do?fileName='+encodeURI(encodeURIComponent(info))+'" width="100%" height="100%" marginheight="0" marginwidth="0" border="0" frameborder="0" scrolling="no"></iframe></body></html>');
				}, 100);
			}
		}
		
//		win.document.write('<iframe src="/FlexFrame/test/20171109134217730.pdf" width="100%" height="100%" marginheight="0" marginwidth="0" border="0" frameborder="0" scrolling="no"></iframe>');
//		win.document.write('<object data="ViewReportDownload.do?fileName='+info+'" type="application/pdf" width="100%" height="100%"></object>');
//		win.document.write('<embed src="ViewReportDownload.do?fileName='+info+'" type="application/pdf" width="100%" height="100%"></embed>');
		
        callEvent("report" + this.reportId + "_Completed");
	} catch(e){
	    alert(e);
	}
	
	return;
};

/**
 * @description	미결
 * @return 		{void}
 * @example		미결
 */
Report.prototype.executeMerge = function() {
	// functionname : [Report.executeMerge]
	if (reports.length == 0) return;
		
	var reportId = "";
	var paramString = "";
	
	for (var i = 0; i < reports.length; i++) {
		reportId += reports[i].reportId + "|";
		for (var key in reports[i].parameters){
			if (typeof(reports[i].parameters[key])=="function") continue;
	    	paramString += reports[i].parameters[key] + ";";
	    }
		paramString += "|";
	}
	
	var wQueryString = "cogu=" + USER_COGU + "&personalid=" + USER_PERSONALID 
				     + "&reportid=" + encodeURIComponent(reportId)
				     + "&parameters=" + encodeURIComponent(paramString)
				     + "&lang=" + USER_LANGUAGE
				     + "&tm=" + (new Date()).valueOf();
	this.busy = true;
	ajaxCall("POST", "ViewReport.do", wQueryString, this, "textGetReport", 30);
	
	return;
};//체크조건, 시트 셀타입 상수
	var CHECKNAME = [
	                 getText("message_checkMemory_001", "없음"), 
	                 getText("message_checkMemory_002", "산식체크"), 
	                 getText("message_checkMemory_003", "년도"), 
	                 getText("message_checkMemory_004", "년월"), 
	                 getText("message_checkMemory_005", "년월일"), 
	                 getText("message_checkMemory_006", "주민등록번호"), 
	                 getText("message_checkMemory_007", "사업자등록번호"), 
	                 getText("message_checkMemory_008", "우편번호"), 
	                 "", 
	                 getText("message_checkMemory_009", "금액"), 
	                 getText("message_checkMemory_010", "숫자"), 
	                 getText("message_checkMemory_011", "한글"), 
	                 getText("message_checkMemory_012", "영문/숫자"), 
	                 getText("message_checkMemory_013", "바코드"), 
	                 getText("message_checkMemory_014", "패스워드")];
	var CELLTYPE = ["CELLTYPE_DATE", "CELLTYPE_EDIT", "", "CELLTYPE_INTEGER", "CELLTYPE_PIC", "CELLTYPE_STATICTEXT", "CELLTYPE_TIME", "CELLTYPE_BUTTON", "CELLTYPE_COMBOBOX", "CELLTYPE_PICTURE", "CELLTYPE_CHECKBOX", "CELLTYPE_OWNERDRAWN", "CELLTYPE_CURRENCY", "CELLTYPE_NUMBER", "CELLTYPE_PERCENT"];
		
	//메모리 상태 정보를 저장하는 객체
	/**
     * @description	미결
     * @property optionButton checkMemory.js 안에서 미작성
     * @example	미결
     */
	function memoryInfos(){
		//this.formInfo;
		this.parameter = [];
		this.textBox = [];
		this.checkBox = [];
		this.comboBox = [];
		this.listBox = [];
		this.optionButton = [];
		this.tabBox = [];
		this.sheet = [];
		this.object = [];
	}

	//파라메터 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{objects}	paramKey
     * @return  {undefined}
     * @example	미결
     */
	function _Parameter(paramKey){
		var value = parameters[paramKey];
		var _value = "";
		
		if(typeof value == "undefined") value = "";
		if(typeof DataSet == "function" && dataSets[value.id] instanceof DataSet){
			value = value.id;
		}
		
		for(var i = 0; i < ("" + value).length; i = i + 50){
			_value += value.substring(i, i + 50) + ( ("" + value).length > 50 ? "<br>" : "" );
		}
			
		this.name = paramKey;			//파라메터 명
		this.value = _value;			//파라메터 값
		this.type = typeof(value);		//파라메터 타입
	}

	//텍스트박스 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wControl
     * @return  {undefined}
     * @example	미결
     */
	function _TextBox(wControl){
		this.controlName = wControl.controlName;
		this.value = wControl.value;
		//속성
		this.defaultValue = (wControl.defaultValue != "") ? getText("message_checkMemory_015", "디폴트 값 : {0}<br>", [wControl.defaultValue]) : "";
		this.dispFormat = (wControl.dispFormat != "") ? getText("message_checkMemory_016", "표시형식 : {0}<br>", [wControl.dispFormat]) : "";
		this.multiLine = (wControl.multiLine) ? getText("message_checkMemory_017", "여러줄허용 : 허용<br>") : "";
		this.enabled = (wControl.enabled != "") ? "" : getText("message_checkMemory_018", "동작가능 : 비활성화<br>");
		this.visible = (wControl.visible != "") ? "" : getText("message_checkMemory_019", "보이기 : 숨김<br>");
		this.checkType = (wControl.checkType > 0) ? getText("message_checkMemory_020", "체크조건 : {0}<br>", [CHECKNAME[wControl.checkType]]) : "";
	}

	//콤보박스 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wControl
     * @return  {undefined}
     * @example	미결
     */
	function _ComboBox(wControl){
		this.controlName = wControl.controlName;
		this.outValue = [];
		this.inValue = [];
		this.selectValue = wControl.value;
		//속성
		this.defaultValue = (wControl.defaultValue * 1 != -1) ? getText("message_checkMemory_015", "디폴트 값 : {0}<br>", [wControl.defaultValue]) : "";
		this.enabled = (wControl.enabled) ? "" : getText("message_checkMemory_018", "동작가능 : 비활성화<br>");
		this.visible = (wControl.visible) ? "" : getText("message_checkMemory_019", "보이기 : 숨김<br>");
		this.checkType = (wControl.checkType > 0) ? getText("message_checkMemory_020", "체크조건 : {0}<br>", [CHECKNAME[wControl.checkType]]) : "";
		//겉값&속값  채우기
		var wOptions = wControl.tagObject.options;
		for(var i = 0; i < wOptions.length; i++){
			this.outValue[i] = wOptions[i].text;
			this.inValue[i] = wOptions[i].value;
		}
	}

	//리스트박스 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wControl
     * @return  {undefined}
     * @example	미결
     */
	function _ListBox(wControl){	
		this.controlName = wControl.controlName;
		this.outValue = [];
		this.inValue = [];
		this.selectValue = wControl.value;
		//속성
		this.defaultValue = (wControl.defaultValue != "") ? getText("message_checkMemory_015", "디폴트 값 : {0}<br>", [wControl.defaultValue]) : "";
		this.enabled = (wControl.enabled) ? "" : getText("message_checkMemory_018", "동작가능 : 비활성화<br>");
		this.visible = (wControl.visible) ? "" : getText("message_checkMemory_019", "보이기 : 숨김<br>");
		this.checkType = (wControl.checkType > 0) ? getText("message_checkMemory_020", "체크조건 : {0}<br>", [CHECKNAME[wControl.checkType]]) : "";
		//겉값&속값 채우기
		var wOptions = wControl.tagObject.options;
		for(var i = 0; i < wOptions.length; i++){
			this.outValue[i] = wOptions[i].text;
			this.inValue[i] = wOptions[i].value;
		}
	}

	//체크박스 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wControl
     * @return  {undefined}
     * @example	미결
     */
	function _CheckBox(wControl){
		this.controlName = wControl.controlName;
		//this.value = wControl.value;
		//this.defaultValue = wControl.defaultValue;
		this.value = (wControl.value == 1) ? "선택" : "";
		//속성
		this.defaultValue = (wControl.defaultValue == 1) ? getText("message_checkMemory_021", "디폴트 값 : 선택") : "";
		this.enabled = (wControl.enabled) ? "" : getText("message_checkMemory_018", "동작가능 : 비활성화<br>");
		this.visible = (wControl.visible) ? "" : getText("message_checkMemory_019", "보이기 : 숨김<br>");
		this.checkType > 0 ? getText("message_checkMemory_020", "체크조건 : {0}<br>", [CHECKNAME[wControl.checkType]]) : "";
	}

	//옵션버튼 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wControl
     * @return  {undefined}
     * @example	미결
     */
	function _OptionButton(wControl){
		
	}

	//탭박스 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wControl
     * @return  {undefined}
     * @example	미결
     */
	function _TabBox(wControl){
		this.controlName = wControl.controlName;
		this.tabCells = [];
		this.selectTab = (wControl.CurrentTab * 1) - 1;
		//속성
		this.tabCount = wControl.tabcount;
		this.defaultValue = (wControl.defaultValue != "") ? getText("message_checkMemory_015", "디폴트 값 : {0}<br>", [wControl.defaultValue]) : "";
		this.enabled = (wControl.enabled) ? "" : getText("message_checkMemory_018", "동작가능 : 비활성화<br>");
		this.visible = (wControl.visible) ? "" : getText("message_checkMemory_019", "보이기 : 숨김<br>");	
	}
	
	//
	/**
     * @description	미결
     * @return  {undefined}
     * @example	미결
     */
	function _Header(){
		this.name = "";
		this.type = "";
		this.defaultValue = "";
		this.defaultDisplayFormat = "";
		this.defaultFomula = "";
		this.defaultLockMode = false;
		this.hidden = false;
	}
	
	//
	/**
     * @description	미결
     * @return  {undefined}
     * @example	미결
     */
	function _Cell(){
		this.value = "";
		this.cellType = "";
		this.lockMode = false;
		this.hidden = false;
	}
	
	//
	/**
     * @description	미결
     * @return  {undefined}
     * @example	미결
     */
	function _RowData(){
		this.data = [];
	}
	
	//시트 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wControl
     * @return  {undefined}
     * @example	미결
     */
	function _DataSheet(wControl){
		this.controlName = wControl.controlName;
		//테이블 속성
		this.enabled = (wControl.enabled) ? getText("message_checkMemory_022", "활성화") : getText("message_checkMemory_023", "비활성화");
		this.visible = (wControl.visible) ? getText("message_checkMemory_025", "보임") : getText("message_checkMemory_026", "숨김");
		this.sheetType = (wControl.sheetType == SHEETTYPE_DATASHEET) ? getText("message_checkMemory_027", "데이터 시트(입력용)") : getText("message_checkMemory_028", "리스트 시트(조회용)");
		this.linkedObjects = wControl.linkedObjects;
		this.frozenCols = wControl.frozenCols;
		this.frozenRows = wControl.frozenRows;
		//시트 프로퍼티 속성
		this.header = [];
		this.headCnt = wControl.columns.length - 1;
		//시트 데이터 속성
		this.rowData = [];
		this.rowCnt = wControl.rows.length - 1;
		//시트 프로퍼티 채우기
		var propertyTitle = wControl.colHeadTable.rows[0].innerHTML.replace(RegExp(/\s/img), "").replace(RegExp(/[\w<>=":;&]/ig), "").replace(RegExp(/\/$/ig), "").replace(RegExp(/^\//ig), "").split("/");
		for(var i = 1; i < wControl.columns.length; i++){
			var column = wControl.columns[i];
			this.header[i - 1] = new _Header();
			this.header[i - 1].name = propertyTitle[i - 1];
			this.header[i - 1].type = CELLTYPE[column.defaultCellType];
			this.header[i - 1].defaultValue = column.defaultValue;
			this.header[i - 1].defaultDisplayFormat = column.defaultDisplayFormat;
			this.header[i - 1].defaultFormula = column.defaultFormula;
			this.header[i - 1].defaultLockMode = column.defaultLockMode;
			this.header[i - 1].hidden = column.hidden;
		}
		//시트  데이터 채우기
		for(var i = 1; i < wControl.rows.length; i++){
			var row = wControl.rows[i];
			this.rowData[i - 1] = new _RowData();
			for(var j = 1; j < row.cells.length; j++){
				var cell = row.cells[j];
				this.rowData[i - 1].data[j - 1] = new _Cell();
				switch(cell.celltype){
				case CELLTYPE_COMBOBOX	:
					this.rowData[i - 1].data[j - 1].value = cell.value + " / " + cell.value1;
					break;
				case CELLTYPE_CHECKBOX	:
					this.rowData[i - 1].data[j - 1].value = cell.value * 1;
					//this.rowData[i - 1].data[j - 1].value = (cell.value * 1 == 1) ? "선택" : "";
					break;
				case CELLTYPE_BUTTON 	:
					//this.rowData[i - 1].data[j - 1].value = cell.buttonImage1.src;
					this.rowData[i - 1].data[j - 1].value = "<img src=\"" + cell.buttonImage1.src + "\">";
					break;
				case CELLTYPE_PICTURE	:
					this.rowData[i - 1].data[j - 1].value = cell.value;
					break;
				default					:
					this.rowData[i - 1].data[j - 1].value = cell.value;
					break;
				}
				this.rowData[i - 1].data[j - 1].cellType = cell.celltype;
				this.rowData[i - 1].data[j - 1].lockMode = cell.lockMode;
				this.rowData[i - 1].data[j - 1].hidden = cell.hidden;
			}
		}
	}
	
	//
	/**
     * @description	미결
     * @return  {undefined}
     * @example	미결
     */
	function _property(){
		this.name = "";
		this.fieldID = "";
		this.propertyGu = "";
		this.dataType = "";
		this.isKey = false;
		this.isSeqKey = false;
		this.formula = "";
		this.defaultValue = "";
		this.permitNull = fasle;
		this.seqClear = false;
		this.linkedList = false;
		this.linkedSheet = false;
	}
	
	//
	/**
     * @description	미결
     * @return  {undefined}
     * @example	미결
     */
	function _record(){
		this.value = [];
		this.skipGu = "";
		this.updateGu = "";
	}
	
	//객체(오브젝트) 정보를 저장하는 객체(생성자)
	/**
     * @description	미결
     * @param	{object}	wObject
     * @return  {undefined}
     * @example	미결
     */
	function _Object(wObject){
		this.objectName = wObject.name;
		this.tableID = wObject.wObject.tableID;
		this.objectType = wObjectType.objectType;
		this.skipFormula = wObjectType.skipFormula;
		this.properties = [];
		this.recordset = [];
		//객체 프로퍼티 정보 채우기
		for(var i = 1; i < wObject.propertyCount; i++){
			var property = wObject.propertyInfos[i];
			this.properties[i - 1] = new _property();
			this.properties[i - 1].name = property.name;
			this.properties[i - 1].fieldID = property.fieledID;
			this.properties[i - 1].propertyGu = property.propertyGu;
			this.properties[i - 1].dataType = property.dataTypeName;
			this.properties[i - 1].isKey = property.isKey;
			this.properties[i - 1].isSeqKey = property.isSeqKey;
			this.properties[i - 1].formula = property.formula;
			this.properties[i - 1].defaultValue = property.defaultValue;
			this.properties[i - 1].permitNull = property.permitNull;
			this.properties[i - 1].seqClear = property.seqClear;
			this.properties[i - 1].linkedList = property.linkedToListControl;
			this.properties[i - 1].linkedSheet = property.sheetLinked;
		}
		//객체 레코드셋 데이터 채우기
		for(var i = 1; i < wObject.recordset.length; i++){
			var record = wObject.recordset[i];
			this.recordset[i - 1] = new _record();
			for(var j = 1; j < wObject.propertyCount; j++){
				var propertyName = this.properties[j - 1].name;
				this.recordset[i - 1].value[j - 1] = record.properties[propertyName].value;
			}
			this.updateGu = record.updateGu;
			this.skipGu = record.skipGu;
		}
	}

	//메모리 상태를 보여준다
	/**
     * @description	미결
     * @param	{object}	e
     * @return  {undefined}
     * @example	미결
     */
	function checkMemory(e){
		
		    e = e || event;
		    var em = getSrcElement(e);
		    
			if (!getCtrlPressed(e)){   
			   		return true;
		    } 
		    
			var memInfo = new memoryInfos();
			
			// 팝업창 헤더
			// 팝업창의 html, body 태그를 연다.
			var pageContent = "<HTML>"
							+ "<HEAD>"
							+ "<TITLE>" + getText("message_checkMemory_029", "콘트롤 데이터") + "</TITLE>"
							+ "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + getContextPath() + "/css/EasyClient.css\"/>"
							+ "<style type=\"text/css\">"
							+ ".DataSheet table {table-layout:auto}"
							+ "</style>"
							+ "</HEAD>"
				            + "<body scroll=\"auto\" resizable=\"no\">";
			
			//아코디언 메뉴 동작을 위한 스크립트 코딩
			pageContent += "<script type=\"text/javascript\">";
			pageContent += 	"function showDisplay(divName){"
						+ 	"var tagObject = document.getElementsByName(divName)[0];"
						+ 	"if( tagObject.style.display == \"none\" ){tagObject.style.display = \"block\";}"
						+ 	"else{tagObject.style.display = \"none\";}"
						+ 	"return ;}";
			//이벤트 버블링을 막기 위한 스크립트 코딩
			pageContent += 	"function stopPropagation(event){"
			    		+ 	"if (event.stopPropagation){ event.stopPropagation(); }"
			    		+ 	"else { window.event.cancelBubble = true; }"
			    		+ 	"};";
			pageContent += "</script>";
			
			// 파라메터
			// 파라메터를 '파라메터명'('파라메터타입'/'파라메터속성')'과 '파라메터 값'을 테이블로 보여준다.	
			for(var key in parameters){	
				if( key == "" ) continue;
				var param = parameters[key]
				if( typeof(param) == "function" ) continue;
				
				memInfo.parameter[key] = new _Parameter(key);
			}
			
			//파라메터 출력
			pageContent += "<div id=\"label_param\" name=\"label_param\" align=\"center\" onclick=showDisplay(\"tab_param\") style=\"background-color: #ccccff; width: 100%; padding: 12px; border: 1px solid #ffffff;\"> " + getText("message_checkMemory_030", "파라메터(Parameter)") + " </div>"
						+ "<div id =\"tab_param\" name=\"tab_param\" tabname=\"" + getText("message_checkMemory_031", "파라메터") + "\" style=\"display :none\"><br>"
						+ "<div class=\"DataSheet\" style=\"width: 100%; border: 1px solid #ccccff; padding: 10px\">"
						+ "<table style=\"width: 100%;\">"
						+ "<tr> <td class=\"lColHead\" width=\"20%\" align=\"center\" > " + getText("message_checkMemory_032", "파라메터 명") + " </td>"
						+ "<td class=\"lColHead\" width=\"60%\" align=\"center\" > " + getText("message_checkMemory_033", "파라메터 값") + " </td>"
						+ "<td class=\"lColHead\" width=\"20%\" align=\"center\" > " + getText("message_checkMemory_034", "파라메터 타입") + " </td> </tr>";
				
			for(var key in memInfo.parameter){
				var param = memInfo.parameter[key];
				
				if( typeof(param) == "function" ) continue;
				
				pageContent +="<tr>" 
							+ "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + param.name + "</td>"
							+ "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + param.value + "</td>"
							+ "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + param.type + "</td>"
							+ "</tr>";
			}
			
			pageContent += "</table>"
						+ "</div><br></div>";
			//
			
			// 콘트롤
			// 콘트롤을 종류별로 ROWSPAN하여 카테고리를 만들어 테이블로 보여준다.
			// 콘트롤은 '콘트롤 종류(타입)', '콘트롤명', '콘트롤 값', '콘트롤 속성'을 보여준다.
			//  1. 텍스트 박스는 콘트롤의 값을 보여준다.
			//  2. 체크박스는 선택된 컨트롤에만 '선택'으로 표기한다.
			//  3. 콤보박스는 현재 선택된 아이템의 겉값과 속값을 보여준다. 
			//  4. 옵션버튼은 그룹별로 보여주며 갑은 선택된 컨트롤에만 '선택'으로 표기한다.
			//  5. 탭은 현재 선택된 탭 명을 보여준다.
			//  6. 시트는 헤더에는 '필드명'('필드타입')을 보여주고 바디에 현재 필드의 데이터를 보여준다. (시트는 다른 콘트롤과 다르게 독립적인 테이블로 보여준다.)
			//  7. 라벨, 프레임, 그리드 등 위에서 제외된 콘트롤은 보여주지 않는다.
			
			//각 컨트롤별  카운트용 변수
			var textboxCnt = 0;
			var comboboxCnt = 0;
			var listboxCnt = 0;
			var checkboxCnt = 0;
			var optionbuttonCtrl = [];	var optionbuttonCnt = 0;
			var tabboxCtrl = [];		var tabboxCnt = 0;
			var sheetCnt = 0;
			//var tblHeadLength = 0;
			
			//각 컨트롤 보여줄 데이터 세팅
			for (var key in controls){
				var wControl = controls[key];
				//
				if (typeof(wControl) == "function" ) continue;
				//텍스트박스 컨트롤만 세팅
				try{
					if ( wControl instanceof TextBox ){
						memInfo.textBox[wControl.controlName] = new _TextBox(wControl);
						textboxCnt++;
					}
				}
				catch(e){}
				//콤보박스 컨트롤만 세팅
				try{
					if ( wControl instanceof ComboBox ){					
						memInfo.comboBox[wControl.controlName] = new _ComboBox(wControl);
						comboboxCnt++;
					}
				}
				catch(e){}
				//리스트박스 컨트롤만 세팅
				try{
					if ( wControl instanceof ListBox){
						memInfo.listBox[wControl.controlName] = new _ListBox(wControl);
						listboxCnt++;
					}
				}
				catch(e){}
				//체크박스 컨트롤만 세팅
				try{
					if ( wControl instanceof CheckBox){
						memInfo.checkBox[wControl.controlName] = new _CheckBox(wControl);
						checkboxCnt++;
					}
				}
				catch(e){}
				//옵션버튼 컨트롤만 세팅
				try{
					if ( wControl instanceof OptionButton && wControl.value != undefined ){
						optionbuttonCtrl[optionbuttonCnt]= [
						                                    wControl.optionGroupName,
						                                    wControl.controlName,
						                                    (wControl.value == 1) ? getText("message_checkMemory_035", "선택") : "",
						                                    (getText("message_checkMemory_036", "디폴트 값 : ") + wControl.matchUpValue)
						                                    ];
						optionbuttonCnt++;
					}
				}
				catch(e){}
				//탭박스 컨트롤만 세팅
				try{
					if ( wControl instanceof TabBox ){
						var tabData = [];
						var tabTitle = wControl.tagObject.rows[0];
						for(var i = 0; i < wControl.tabcount; i++){
							tabData[i] = [
							              tabTitle.cells[i].title, 
							              tabTitle.cells[i].tabnum, 
							              ( tabTitle.cells[i].tabnum == ((wControl.CurrentTab * 1) - 1) ) ? getText("message_checkMemory_024", " --- (선택) ") : ""];
						}
						
						tabboxCtrl[tabboxCnt] = [
						                         wControl.controlName,
						                         tabData,
						                         [ (getText("message_checkMemory_037", "탭 갯수 : ") + wControl.tabcount + "<br>"),
						                           (wControl.defaultValue != "" ? getText("message_checkMemory_036", "디폴트 값 : ") + wControl.defaultValue + "<br>" : ""),
						                           (wControl.enabled ? "" : getText("message_checkMemory_018", "동작가능 : 비활성화<br>")),
						                           (wControl.visible ? "" : getText("message_checkMemory_019", "보이기 : 숨김<br>"))
						                          ]
						                         ];
						
						tabboxCnt++;
					}
				}
				catch(e){}
				//시트 컨트롤만 세팅
				try{
					if ( control.controlId.toLowerCase().indexOf("sheet_") >= 0 && control.controlId.toLowerCase().indexOf("listsheet_") < 0 ){
						memInfo.sheet[wControl.controlName] = new _DataSheet(wControl);
						sheetCnt++;
					}
				}
				catch(e){}
			}
			
			//var optionbuttonTmp = optionbuttonCtrl.sort();
			
			//옵션버튼 컨트롤의 그룹명과 그룹당 카운트를 세팅(저장)할 배열
			var optionbuttonGroupName = [];		var optionbuttonGroupCnt = [];
			var optionbuttonInfo = "";
			var flag = true;
			
			//옵션버튼을 그룹별로 출력학기 위해 옵션그룹명과 그룹당 카운트를 세팅.
			for (var i = 0, j = 0; i < optionbuttonCnt; i++){
				optionbuttonInfo = optionbuttonCtrl[i];
				flag = true;
				//옵션그룹명이 새로운 것이 있나 체크 / 같은 옵션그룹이면 카운트 증가
				for(var k = 0; k < optionbuttonGroupName.length; k++){
					if(optionbuttonGroupName[k] == optionbuttonInfo[0]){
						optionbuttonGroupCnt[k] += 1;
						flag = false;
					}
				}
				//새로운 옵션그룹이 있다면 옵션그룹명 배열에 추가, 옵션그룹 카운트 1 저장(새로 찾은 옵션그룹)
				if(flag){
					optionbuttonGroupName[j] = optionbuttonInfo[0];
					optionbuttonGroupCnt[j] = 1;
					j++;
				}
			}
			
			//콘트롤 테이블 생성(시트 제외)
			pageContent += "<div id=\"label_control\" name=\"label_control\" align=\"center\" onclick=showDisplay(\"tab_control\") style=\"background-color: #ccccff; width: 100%; padding: 12px; border: 1px solid #ffffff;\"> " + getText("message_checkMemory_038", "컨트롤(Control)") + " </div>";
			pageContent += "<div id=\"tab_control\" name=\"tab_control\" tabname=\"" + getText("message_checkMemory_039", "컨트롤") + "\" style=\"display :none\"><br>"
						+ "<div class=\"DataSheet\" style=\"width: 100%; border: 1px solid #ccccff; padding: 10px\">"
						+ "<table style=\"width:100%\">"
						+ "<tr> <td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_040", "콘트롤 종류") + " </td>"
						+ "<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_041", "콘트롤 명") + " </td>"
						+ "<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_042", "콘트롤 값(겉값/속값)") + " </td>"
						+ "<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_043", "콘트롤 속성 ") + "</td> </tr>";
			
			//텍스트박스 정보 출력
			var isFirstRow = true;
			for(var key in memInfo.textBox){
				var textbox = memInfo.textBox[key];
				if(typeof(textbox) == "function") continue;

				var textattr = textbox.defaultValue + textbox.dispFormat + textbox.multiLine + textbox.enabled + textbox.visible + textbox.checkType;
				
				pageContent += 	"<tr>";
				//첫행에서 rowspan을 한다.
				if( isFirstRow ){
					pageContent += "<td align=\"center\" style=\"background-color: rgb(255,255,255);\" rowspan=" + textboxCnt + "> TextBox </td>";
					isFirstRow = false;
				}
				pageContent += 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\"> " + textbox.controlName + " </td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\"> " + textbox.value + " </td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\"> " + textattr + " </td>"
							+ 	"</tr>";
			}
			
			//콤보박스 정보 출력
			isFirstRow = true;
			for(var key in memInfo.comboBox){
				var combobox = memInfo.comboBox[key];
				
				if(typeof(combobox) == "function") continue;
				
				//콤보데이터와 속성을 출력할 문자열을 만든다.
				var combodata = "";
				var comboattr = combobox.defaultValue + combobox.enabled + combobox.visible + combobox.checkType;
				for(var j = 0, indata = "", outdata = ""; j < combobox.inValue.length; j++, indata = "", outdata = ""){
					indata = combobox.inValue[j];	outdata = combobox.outValue[j];
					if(combobox.selectValue == indata){
						combodata += "<font color=\"red\"> " + outdata + " / " + indata + getText("message_checkMemory_024", " --- (선택) ") + "</font><br>";
					}
					else{
						combodata += outdata + " / " + indata + "<br>";
					}
				}
				
				pageContent += 	"<tr>";
				//첫행에서 rowspan을 한다.
				if( isFirstRow ){
					pageContent += "<td align=\"center\" style=\"background-color: rgb(255,255,255);\" rowspan=" + comboboxCnt + "> ComboBox </td>";
					isFirstRow = false;
				}
				pageContent += 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + combobox.controlName + "</td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + combodata + "</td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + comboattr + "</td>"
							+ 	"</tr>";
			}
			
			//리스트박스 정보 출력
			isFirstRow = true;
			for(var key in memInfo.listBox){
				var listbox = memInfo.listBox[key];
				
				if( typeof(listbox) == "function" ) continue;
				
				var listdata = "";
				var listattr = listbox.defaultValue + listbox.enabled + listbox.visible + listbox.checkType;
				for(var j = 0, outdata = "", indata = ""; j < listbox.inValue.length; j++, outdata = "", indata = ""){
					outdata = listbox.outValue[j];	indata = listbox.inValue[j];
					if(listbox.selectValue == indata){
						listdata += "<font color=\"red\"> " + outdata + " / " + indata + getText("message_checkMemory_024", " --- (선택) ") + "</font><br>";
					}
					else{
						listdata += outdata + " / " + indata + "<br>";
					}
				}
				
				pageContent += 	"<tr>";
				//첫행에서 rowspan을 한다.
				if( isFirstRow ){
					pageContent += "<td align=\"center\" style=\"background-color: rgb(255,255,255);\" rowspan=" + listboxCnt + "> ListBox </td>";
					isFirstRow = false;
				}
				pageContent += 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + listbox.controlName + "</td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + listdata + "</td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + listattr + "</td>"
							+ 	"</tr>";
			}
			
			//체크박스 정보 출력
			isFirstRow = true;
			for(var key in memInfo.checkBox){
				var checkBox = memInfo.checkBox[key];
				
				if( typeof(checkBox) == "function" ) continue;
				
				var checkattr = checkBox.defaultValue + checkBox.enabled + checkBox.visible + checkBox.checkType;
				
				pageContent += 	"<tr>";
				//첫행에서 rowspan을 한다.
				if( isFirstRow ){
					pageContent += "<td align=\"center\" style=\"background-color: rgb(255,255,255);\" rowspan=" + checkboxCnt + "> CheckBox </td>";
					isFirstRow = false;
				}
				pageContent += 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + checkBox.controlName + "</td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + checkBox.value + "</td>"
							+ 	"<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + checkattr + "</td>"
							+ 	"</tr>";
			}
			
			//옵션버튼 정보 출력
			for(i = 0; i < optionbuttonGroupName.length; i++){
				var groupName = optionbuttonGroupName[i];
				var isFirstRow = 0;
				
				for(j = 0; j < optionbuttonCtrl.length; j++){
					var optionInfo = optionbuttonCtrl[j];
					
					if( "" + groupName != "" + optionInfo[0] ){
						continue;
					}
					
					pageContent += "<tr>";
					
					if(isFirstRow == 0){
						pageContent += "<td align=\"center\" style=\"background-color: rgb(255,255,255);\" rowspan=" + optionbuttonGroupCnt[i] + "> OptionButton_" + groupName + " </td>";
						isFirstRow++;
					}
					
					pageContent += "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + optionInfo[1] + "</td>"
								+ "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + optionInfo[2] + "</td>"
								+ "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + "" + "</td>"
								+ "</tr>";
				}
			}
			//탭박스 정보 출력
			for(var i = 0; i < tabboxCnt; i++){
				var tabboxInfo = tabboxCtrl[i];
				var tabData = tabboxInfo[1];		var tabAttr = tabboxInfo[2];
				var tabTitle = "";					var tabAttribute = "";
				pageContent += "<tr>";
				
				if(i == 0){
					pageContent += "<td align=\"center\" style=\"background-color: rgb(255,255,255);\" rowspan=" + tabboxCnt + "> TabBox </td>";
				}
				
				pageContent += "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + tabboxInfo[0] + "</td>";
				
				for(var j = 0 ; j < tabData.length; j++){
					var title = tabData[j];
					for(var k = 0; k < title.length; k++){
						tabTitle += (title[2] == "" ? "" : "<font color=\"red\">") + title[k] + (k == 0 ? " / " : (k == 1 ? "" : "<br>")) +(title[2] == "" ? "" : "</font>");
					}
				}
				pageContent += "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + tabTitle + "</td>";
				
				for( var j = 0; j < tabAttr.length; j++){
					tabAttribute += tabAttr[j];
				}
				pageContent += "<td style=\"background-color: rgb(255,255,255); padding-left: 10px\">" + tabAttribute + "</td>"
							+ "</tr>";
			}
			
			pageContent += "</table>"
						+ "</div><br></div>";
			
			//시트
			pageContent += "<div id=\"label_object\" name=\"label_object\" align=\"center\" onclick=showDisplay(\"tab_sheet\") style=\"background-color: #ccccff; width: 100%; padding: 12px; border: 1px solid #ffffff;\"> " + getText("message_checkMemory_044", "시트 (Sheet)") + " </div>";
			pageContent += "<div id=\"tab_sheet\" name=\"tab_sheet\" tabname=\"" + getText("message_checkMemory_045", "시트") + "\" style=\"display :none\"><br>";
			
			for(var key in memInfo.sheet){
				var sheet = memInfo.sheet[key];
				
				if( typeof(sheet) == "function" ) continue;
				
				pageContent +=	"<div style=\"width: 100%; border: 1px solid #ccccff; \">"
							+ 	"<font size=\"4\"> <b> <p> &lt " + sheet.controlName + " &gt </p> </b> </font>";
		
				//시트 속성
				//시트속성은 동작가능, 보이기, 시트타입, 연결된 객체, 고정열 수, 고정행 수를 보여준다.
				pageContent += 	"<h4 onclick=showDisplay(\""+ sheet.controlName +"_tblInfo\")> " + getText("message_checkMemory_046", "1. 시트 속성") + " </h4>"
							+ 	"<div class=\"DataSheet\" id=\"" + sheet.controlName + "_tblInfo\" name=\"" + sheet.controlName + "_tblInfo\" tabname=\"" + getText("message_checkMemory_047", "시트속성") + "\" style=\"display :none; width: 100%\">"
							+ 		"<table style=\"width: 100%; cellpadding=\"2\"; cellspacing=\"1\"\">"
							+ 			"<tr>"
							+				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_048", "속성 명") + " </td>"
							+ 				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_049", "속성 값") + " </td>"
							+			"</tr>"
							+ 			"<tr>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_050", "동작가능") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.enabled +" </td>"
							+			"</tr>"
							+			"<tr>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_051", "보이기") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.visible +" </td>"
							+			"</tr>"
							+ 			"<tr>"
							+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_052", "시트 타입") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.sheetType +" </td>"
							+			"</tr>"
							+ 			"<tr>"
							+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_053", "연결된 객체") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.linkedObjects +" </td>"
							+			"</tr>"
							+ 			"<tr>"
							+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_054", "고정 열/행") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.frozenCols + " / " + sheet.frozenRows + " </td>"
							+			"</tr>"
							+ 		"</table>"
							+ 	"</div>";
				
				//컬럼 속성
				pageContent += 	"<h4 onclick=showDisplay(\""+ sheet.controlName +"_colInfo\")> " + getText("message_checkMemory_055", "2. 컬럼 속성") + " </h4>"
							+ 	"<div class=\"DataSheet\" id=\"" + sheet.controlName + "_colInfo\" name=\"" + sheet.controlName + "_colInfo\" tabname=\"" + getText("message_checkMemory_047", "시트속성") + "\" style=\"display :none; width: 100%\">"
							+		"<table style=\"width:100%\">";
				for(var i = 0; i < sheet.headCnt; i++){
					var column = sheet.header[i];
					pageContent +=		"<tr>"
								+			"<td style=\"border-top-style:solid; border-width:1px; border-color:#CCC; text-align:center; background-color:#f6f6f6;\">" + column.name + "</td>"
								+			"<td style=\"width:700px; border-top-style:solid; border-width:1px; border-color:#CCC\">"
								+				"<table style=\"width:700px\">"
								+					"<tr> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_056", "컬럼 타입 : ") + column.type + " </td> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_036", "디폴트 값 : ") + column.defaultValue + "</td> </tr>"
								+					"<tr> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_057", "잠금 상태 : ") + column.defaultLockMode + " </td> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_059", "표시 형식 : ") + column.defaultDisplayFormat + "</td> </tr>"
								+					"<tr> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_059", "숨김 상태 : ") + column.hidden + " </td> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_060", "디폴트 산식 : ") + column.defaultFormula + "</td> </tr>"
								+				"</table>"
								+			"</td>"
								+		"</tr>"
				}
				pageContent += 		"</table>"
							+	"</div>";
				
				//시트 데이터
				pageContent += 	"<h4 onclick=showDisplay(\""+ sheet.controlName +"_sheetData\")> " + getText("message_checkMemory_061", "3. 시트 데이터") + " </h4>"
							+ 	"<div class=\"DataSheet\" id=\"" + sheet.controlName + "_sheetData\" name=\"" + sheet.controlName + "_sheetData\" tabname=\"" + getText("message_checkMemory_062", "시트데이터") + "\" style=\"display :none; width: 100%;overflow-x: scroll;\">"
							+		"<table style=\"width:100%\">"
							+			"<tr>";
				for(var i = 0; i < sheet.headCnt; i++){
					var title = sheet.header[i];
					pageContent +=			"<td class=\"lColHead\">"
								+ 				title.name + "<br>" + (title.defaultLockMode ? "<font color=\"blue\">(Lock Mode)</font>" : (title.hidden ? "<font color=\"red\">(Hidden)</font>" : ""))
								+ 			"</td>";
				}
				pageContent += 			"</tr>";
				for(var i = 0; i < sheet.rowCnt; i++){
					var row = sheet.rowData[i];
					pageContent +=		"<tr>";
					for(var j = 0; j < row.data.length; j++){
						pageContent +=		"<td>"
									+			row.data[j].value
									+		"</td>";
					}
					pageContent +=		"</tr>";
				}
				pageContent += 		"</table>"
							+	"</div>";
				
				pageContent += 	"</div><br>";
			}
			
			// AUISHeet 반영 
			for (var key in controls){
				var wControl = controls[key];
				//
				if (typeof AUIGrid == "undefined") continue;
				if (typeof(wControl) == "function" ) continue;
				if (typeof AUIDataSheet != "function") continue;
				if (!(wControl instanceof AUIDataSheet)) continue;
				
				sheet = wControl;
				
				pageContent +=	"<div style=\"width: 100%; border: 1px solid #ccccff; \">"
							+ 	"<font size=\"4\"> <b> <p> &lt " + sheet.controlName + " &gt </p> </b> </font>";
				
				//시트 속성
				//시트속성은 동작가능, 보이기, 시트타입, 연결된 객체, 고정열 수, 고정행 수를 보여준다.
				pageContent += 	"<h4 onclick=showDisplay(\""+ sheet.controlName +"_tblInfo\")> " + getText("message_checkMemory_046", "1. 시트 속성") + " </h4>"
							+ 	"<div class=\"DataSheet\" id=\"" + sheet.controlName + "_tblInfo\" name=\"" + sheet.controlName + "_tblInfo\" tabname=\"" + getText("message_checkMemory_047", "시트속성") + "\" style=\"display :none; width: 100%\">"
							+ 		"<table style=\"width: 100%; cellpadding=\"2\"; cellspacing=\"1\"\">"
							+ 			"<tr>"
							+				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_048", "속성 명") + " </td>"
							+ 				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_049", "속성 값") + " </td>"
							+			"</tr>"
							+ 			"<tr>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_050", "동작가능") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.enabled +" </td>"
							+			"</tr>"
							+			"<tr>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_051", "보이기") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.visible +" </td>"
							+			"</tr>"
							+ 			"<tr>"
							+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_052", "시트 타입") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.sheetType +" </td>"
							+			"</tr>"
							+ 			"<tr>"
							+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_053", "연결된 객체") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.linkedObjects +" </td>"
							+			"</tr>"
							+ 			"<tr>"
							+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_054", "고정 열/행") + " </td>"
							+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + sheet.frozenCols + " / " + sheet.frozenRows + " </td>"
							+			"</tr>"
							+ 		"</table>"
							+ 	"</div>";

				//컬럼 속성
				pageContent += 	"<h4 onclick=showDisplay(\""+ sheet.controlName +"_colInfo\")> " + getText("message_checkMemory_055", "2. 컬럼 속성") + " </h4>"
							+ 	"<div class=\"DataSheet\" id=\"" + sheet.controlName + "_colInfo\" name=\"" + sheet.controlName + "_colInfo\" tabname=\"" + getText("message_checkMemory_047", "시트속성") + "\" style=\"display :none; width: 100%\">"
							+		"<table style=\"width:100%\">";
							
				var columnLayoutList = (typeof AUIGrid.getColumnInfoList == "function" ? 
								            AUIGrid.getColumnInfoList(sheet.AUIcontrolId) :
								            AUIGrid.getColumnLayout(sheet.AUIcontrolId));

				var dataFieldList = [];
				//for(var key in sheet.columnLayout){
				for(var k = 0; k < columnLayoutList.length; k++){
				    //if (typeof(wControl) == "function" ) continue;
				    var columnLayout = columnLayoutList[k];
				    
					pageContent +=		"<tr>"
								+			"<td style=\"border-top-style:solid; border-width:1px; border-color:#CCC; text-align:center; background-color:#f6f6f6;\">" + columnLayout.headerText + "</td>"
								+			"<td style=\"width:700px; border-top-style:solid; border-width:1px; border-color:#CCC\">"
								+				"<table style=\"width:700px\">"
								+					"<tr> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_056", "컬럼 타입 : ") + columnLayout.dataType + " </td> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_063", "정렬 형식 : ") + columnLayout.style + "</td> </tr>"
								+					"<tr> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_064", "잠금 해제 : ") + columnLayout.editable + " </td> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_059", "표시 형식 : ") + columnLayout.formatString + "</td> </tr>"
								+				"</table>"
								+			"</td>"
								+		"</tr>"
				}
				pageContent += 		"</table>"
							+	"</div>";
				
				
				//시트 데이터
				pageContent += 	"<h4 onclick=showDisplay(\""+ sheet.controlName +"_sheetData\")> " + getText("message_checkMemory_061", "3. 시트 데이터") + " </h4>"
							+ 	"<div class=\"DataSheet\" id=\"" + sheet.controlName + "_sheetData\" name=\"" + sheet.controlName + "_sheetData\" tabname=\"" + getText("message_checkMemory_062", "시트데이터") + "\" style=\"display :none; width: 100%;overflow-x: scroll;\">"
							+		"<table style=\"width:100%\">"
							+			"<tr>";

				for(var k = 0; k < columnLayoutList.length; k++){
				    var columnLayout = columnLayoutList[k];
				    dataFieldList.push(columnLayout.dataField + "");
					pageContent +=			"<td class=\"lColHead\">"
								+ 				columnLayout.headerText 
								+ 			"</td>";
				}
				pageContent += 			"</tr>";
				
				
				var sheetData = AUIGrid.getGridData(sheet.AUIcontrolId);
				
				for (var i=0; i < sheetData.length; i++){
				    var jsonRowData = sheetData[i];
				    
    				pageContent +=		"<tr>";
    				for(var j = 0; j < dataFieldList.length; j++){
    					pageContent +=		"<td>" + jsonRowData[dataFieldList[j] + ""] + "</td>";
    				}
    				pageContent +=		"</tr>";
				}
				
				pageContent += 		"</table>"
							+	"</div>";
				
				pageContent += 	"</div><br>";

           }
			
			
			pageContent += "</div></div>";	//시트 메뉴 전체
			
			//오브젝트
			//테이블의 컬럼에는 프로퍼티명과 속성을 보여준다.
			//테이블의 필드에는 오브젝트의 데이터를 보여준다.
			var objectNames = [];		var objectCnt = 0;
			
			try{
				for(var key in objects){
					if( objects[key] instanceof DataObject){
						objectNames[objectCnt] = key;
						objectCnt++;
					}
				}
			}
			catch(e){}
			
			pageContent += "<div id=\"label_object\" name=\"label_object\" align=\"center\" onclick=showDisplay(\"tab_object\") style=\"background-color: #ccccff; width: 100%; padding: 12px; border: 1px solid #ffffff;\"> " + getText("message_checkMemory_065", "객체(Object)") + " </div>";
			pageContent += "<div id=\"tab_object\" name=\"tab_object\" tabname=\"" + getText("message_checkMemory_066", "객체") + "\" style=\"display :none\"><br>";
			
			for(var i = 0; i < objectCnt; i++){
				var objectInfo = objects[objectNames[i]];
				
				pageContent +="<div style=\"width: 100%; border: 1px solid #ccccff; padding: 10px\">"
							+ "<font size=\"4\"> <b> <p> &lt " + objectInfo.name + " &gt </p> </b> </font>";
				
				//오브젝트 공통속성
				pageContent += "<h4 onclick=showDisplay(\"object_common_" + objectInfo.tableID + "\")> " + getText("message_checkMemory_067", "1. 공통속성") + " </h4>";
				pageContent += "<div class=\"DataSheet\" id=\"object_common_" + objectInfo.tableID + "\" name=\"object_common_" + objectInfo.tableID + "\" tabname=\"" + getText("message_checkMemory_068", "오브젝트공통") + "\" style=\"display :none\">";
				pageContent += "<table style=\"width:100%\"><tr>"
							+ "<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_048", "속성 명") + " </td>"
							+ "<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_049", "속성 값") + " </td></tr><tr>"
							+ "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt\"> " + getText("message_checkMemory_069", "테이블 ID") + " </td>"
							+ "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt\">" + objectInfo.tableID + "</td></tr><tr>"
							+ "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt\"> " + getText("message_checkMemory_070", "객체 타입") + " </td>"
							+ "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt\">" + objectInfo.objectType + "</td></tr><tr>"
							+ "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt\"> " + getText("message_checkMemory_071", "Skip 조건") + " </td>"
							+ "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt\">" + objectInfo.skipFormula + "</td></tr>"
							+ "</table><br>"
							+ "</div>";
				//오브젝트 프로퍼티 속성
				//오브젝트 각 프로터피의 속성을 출력한다.
				pageContent += "<h4 onclick=showDisplay(\"object_property_attr_" + objectInfo.tableID + "\")> " + getText("message_checkMemory_072", "2. 프로퍼티 속성") + " </h4>";
				pageContent += "<div class=\"DataSheet\" id=\"object_property_attr_" + objectInfo.tableID + "\" name=\"object_property_attr_" + objectInfo.tableID + "\" tabname=\"" + getText("message_checkMemory_073", "오브젝트프로퍼티속성") + "\" style=\"display :none\">";
				pageContent += "<table bgcolor=\"#804040\" border=\"0\" style=\"width: 100%; cellpadding=\"2\"; cellspacing=\"1\"\">"
							+ "<tr><td class=\"lColHead\" align=\"center\" style=\"width: 200px\"> " + getText("message_checkMemory_074", "프로퍼티 명") + " </td>"
							+ "<td class=\"lColHead\" align=\"center\" style=\"width: 600px\"> " + getText("message_checkMemory_075", "프로퍼티 속성") + " </td></tr>";
				for(var j = 1; j <= objectInfo.propertyCount; j++){
					var propertyInfo = objectInfo.propertyInfos[j];
					pageContent += "<tr>"
								+ "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt padding-left: 10px\">"
								+ propertyInfo.name + (propertyInfo.isKey ? "<font color=\"red\">(PK)</font>" : "") + "</td>"
								+ "<td width=\"450px\" align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt padding-left: 10px\">"
								+ "<table align=\"left\" border=\"0\" style=\"FONT-SIZE: 9pt; cellspacing=\"0\"\">"
								+ "<tr><td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_076", "필드 ID : ") + propertyInfo.fieldId + "</td>" + "<td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_077", "프로퍼티 구분 : ") + propertyInfo.propertyGu + "</td></tr>"
								+ "<tr><td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_078", "데이터 타입 : ") + propertyInfo.dataTypeName + "</td>" + "<td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_079", "키 필드 : ") + (propertyInfo.isKey ? getText("message_checkMemory_080", "키 필드") : getText("message_checkMemory_081", "키 필드 아님")) + "</td></tr>"
								+ "<tr><td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_082", "산식 : ") + propertyInfo.formula + "</td>" + "<td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_083", "시퀀스 키 필드 : ") + (propertyInfo.isSeqKey ? getText("message_checkMemory_084", "시퀀스 키 필드") : getText("message_checkMemory_085", "시퀀스 키 필드 아님")) + "</td></tr>"
								+ "<tr><td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_036", "디폴트 값 : ") + propertyInfo.defaultValue + "</td>" + "<td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_086", "널(Null) 허용: ") + (propertyInfo.permitNull ? getText("message_checkMemory_087", "허용") : getText("message_checkMemory_088", "허용안함")) + "</td></tr>"
								+ "<tr><td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_089", "시트 연결 : ") + (propertyInfo.sheetLinked ? getText("message_checkMemory_090", "연결됨") : getText("message_checkMemory_091", "연결안됨")) + "</td>" + "<td width=\"15%\" style=\"border-color:white\"> " + getText("message_checkMemory_092", "리스트(콤보) 연결 : ") + (propertyInfo.listLinked ? getText("message_checkMemory_090", "연결됨") : getText("message_checkMemory_091", "연결안됨")) + "</td></tr>"
								+ "</table>"
								+ "</td>"
								+ "</tr>";
				}
				pageContent += "</table><br>"
							+ "</div>";
				//오브젝트 데이터
				//오브젝트 데이터 컬럼명을 출력한다.
				var fieldName = [];
				var tableHeight = 35 + (19 * objectInfo.recordset.length);
				pageContent += "<h4 onclick=showDisplay(\"object_data_" + objectInfo.tableID + "\")> " + getText("message_checkMemory_093", "3. 프로퍼티 데이터") + " </h4>";
				pageContent += "<div class=\"DataSheet\" id=\"object_data_" + objectInfo.tableID + "\" name=\"object_data_" + objectInfo.tableID + "\" tabname=\"" + getText("message_checkMemory_094", "오브젝트데이터") + "\" style=\"display :none; width: 100%; OVERFLOW-X: auto; OVERFLOW-Y: visible\">";
				
				//테이블의 길이를 구한다. 테이블 한 셀의 크기는 100 이다.
				var tableWidth = 100 * (objectInfo.propertyCount * 1);
				
				pageContent += "<table style=\"width: " + tableWidth + "px\"><tr>";
				for(var j = 1; j <= objectInfo.propertyCount; j++){
					var propertyInfo = objectInfo.propertyInfos[j];
					pageContent	+= "<td class=\"lColHead\" align=\"center\" >"
								+ propertyInfo.name
								+ (propertyInfo.isKey ? "<font color=\"red\">(PK)</font>" : (propertyInfo.isSeqKey ? "<font color=\"blue\"> (SEQ) </font>" : "")) + "<br>"
								+ propertyInfo.id
								+ "</td>";
					fieldName[j] = propertyInfo.fieldId;
				}
				pageContent	+= "<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_095", "업데이트 구분") + " <br> updateGu </td></tr>";
				//오브젝트 데이터를 출력한다.
				for(var j = 1; j < objectInfo.recordset.length; j++){
					var record = objectInfo.recordset[j];
					pageContent += "<tr>";
					for(var k = 1; k <= objectInfo.propertyCount; k++){
						var property = record.properties[fieldName[k]];
						pageContent	+= "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt; padding-left: 10px\">" + property.value + "</td>";
					}
					pageContent	+= "<td align=\"center\" style=\"background-color: rgb(255,255,255); font-size:9pt; padding-left: 10px\">" + record.updateGu + "</td></tr>";
				}
				pageContent += "</table>"
							+ "</div>"		//오브젝트 데이터 출력 div
							+ "</div>";		//오브젝트 출력 div(객체, 테이블 1개당)
			}
			
			pageContent += "</div>";	//객체 탭 div

			//데이터 셋
			if(dataSets instanceof Array){
				pageContent += "<div id=\"label_object\" name=\"label_object\" align=\"center\" onclick=showDisplay(\"tab_dataset\") style=\"background-color: #ccccff; width: 100%; padding: 12px; border: 1px solid #ffffff;\"> " + getText("message_checkMemory_096", "데이터셋 (DataSet)") + "</div>";
				pageContent += "<div id=\"tab_dataset\" name=\"tab_dataset\" tabname=\"" + getText("message_checkMemory_097", "데이터셋") + "\" style=\"display :none\"><br>";
	
				for (var key in dataSets){
					var dataSet = dataSets[key];
					//
					if (typeof(dataSet) == "function" ) continue;
					
					pageContent +=	"<div style=\"width: 100%; border: 1px solid #ccccff; \">"
								+ 	"<font size=\"4\"> <b> <p> &lt " + dataSet.id + " &gt </p> </b> </font>";
					
					//데이터셋 속성
					pageContent += 	"<h4 onclick=showDisplay(\""+ dataSet.id +"_tblInfo\")> " + getText("message_checkMemory_098", "1. 데이터셋 속성") + " </h4>"
								+ 	"<div class=\"DataSheet\" id=\"" + dataSet.id + "_tblInfo\" name=\"" + dataSet.id + "_tblInfo\" tabname=\"" + getText("message_checkMemory_099", "데이터셋 속성") + "\" style=\"display :none; width: 100%\">"
								+ 		"<table style=\"width: 100%; cellpadding=\"2\"; cellspacing=\"1\"\">"
								+ 			"<tr>"
								+				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_048", "속성 명") + " </td>"
								+ 				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_049", "속성 값") + " </td>"
								+				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_048", "속성 명") + " </td>"
								+ 				"<td class=\"lColHead\" align=\"center\" > " + getText("message_checkMemory_049", "속성 값") + " </td>"
								+			"</tr>"
								+ 			"<tr>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_100", "데이터셋 타입") + " </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet.dataSetType +" </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_101", "이벤트 수행") + " </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet.FireEvent +" </td>"
								+			"</tr>"
								+			"<tr>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_102", "콘트롤 갱신") + " </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet.UpdateControl +" </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> FilterExpr </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet.FilterExpr +" </td>"
								+			"</tr>"
								+ 			"<tr>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_103", "그룹 키") + " </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet._GroupKey +" </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_104", "피봇 키") + " </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet._PivotKey +" </td>"
								+			"</tr>"
								+ 			"<tr>"
								+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_105", "연결된 데이터셋") + " </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet._DataObject +" </td>"
								+				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + getText("message_checkMemory_106", "현재 줄 번호") + " </td>"
								+ 				"<td align=\"center\" style=\"background-color: #ffffff; font-size:9pt; padding-left: 10px\"> " + dataSet.Row + " </td>"
								+			"</tr>"
								+ 		"</table>"
								+ 	"</div>";
	
					//컬럼 속성
					pageContent += 	"<h4 onclick=showDisplay(\""+ dataSet.id +"_colInfo\")> " + getText("message_checkMemory_055", "2. 컬럼 속성") + " </h4>"
								+ 	"<div class=\"DataSheet\" id=\"" + dataSet.id + "_colInfo\" name=\"" + dataSet.id + "_colInfo\" tabname=\"" + getText("message_checkMemory_047", "시트속성") + "\" style=\"display :none; width: 100%\">"
								+		"<table style=\"width:100%\">";
								
					for(var key in dataSet.colInfos){
						var colInfo = dataSet.colInfos[key];
					    if (typeof(colInfo) == "function" ) continue;
					    
						pageContent +=		"<tr>"
									+			"<td style=\"border-top-style:solid; border-width:1px; border-color:#CCC; text-align:center; background-color:#f6f6f6;\">" + colInfo.id + "</td>"
									+			"<td style=\"width:700px; border-top-style:solid; border-width:1px; border-color:#CCC\">"
									+				"<table style=\"width:700px\">"
									+					"<tr> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_107", "컬럼 명 : ") + colInfo.id + " </td> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_063", "정렬 형식 : ") + colInfo.type + "</td> </tr>"
									+					"<tr> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_108", "칼럼 크기 : ") + colInfo.size + " </td> <td style=\"witdth:50%; border-color:white\"> " + getText("message_checkMemory_109", "집계 방법 : ") + colInfo.sumMethod + "</td> </tr>"
									+				"</table>"
									+			"</td>"
									+		"</tr>"
					}
					pageContent += 		"</table>"
								+	"</div>";
					
					
					//데이터셋 데이터
					pageContent += 	"<h4 onclick=showDisplay(\""+ dataSet.id +"_sheetData\")> " + getText("message_checkMemory_110", "3. 표시 데이터") + " </h4>"
								+ 	"<div class=\"DataSheet\" id=\"" + dataSet.id + "_sheetData\" name=\"" + dataSet.id + "_sheetData\" tabname=\"" + getText("message_checkMemory_111", "데이터셋 데이터") + "\" style=\"display :none; width: 100%;overflow-x: scroll;\">"
								+		"<table style=\"width:100%\">"
								+			"<tr>";
	
					for(var key in dataSet.colInfos){
						var colInfo = dataSet.colInfos[key];
					    if (typeof(colInfo) == "function" ) continue;
						pageContent +=			"<td class=\"lColHead\">" + colInfo.id +"</td>";
					}
					
					pageContent +=			"<td class=\"lColHead\">[RowType]</td>";
					pageContent +=			"<td class=\"lColHead\">[filterd]</td>";
					pageContent +=			"<td class=\"lColHead\">[selected]</td>";
					pageContent +=			"<td class=\"lColHead\">[RowLevel]</td>";
					pageContent +=			"<td class=\"lColHead\">[rangeStart]</td>";
					pageContent +=			"<td class=\"lColHead\">[rangeCount]</td>";
					pageContent +=			"<td class=\"lColHead\">[sheetRowID]</td>";
					pageContent += 			"</tr>";
					
					
					for (var i=0; i < dataSet.records.length; i++){
					    var record = dataSet.records[i];
					    
	    				pageContent +=		"<tr>";
	    				for(var key in dataSet.colInfos){
	    				    if (typeof(dataSet.colInfos[key]) == "function" ) continue;
	    					pageContent +=		"<td>" + record.values[key] + "</td>";
	    				}
	    				pageContent +=		"<td>" + record.RowType + "</td>";
	    				pageContent +=		"<td>" + record._filterd + "</td>";
	    				pageContent +=		"<td>" + record._selected + "</td>";
	    				pageContent +=		"<td>" + record._RowLevel + "</td>";
	    				pageContent +=		"<td>" + record.rangeStart + "</td>";
	    				pageContent +=		"<td>" + record.rangeCount + "</td>";
	    				pageContent +=		"<td>" + record._$uid + "</td>";
	    				pageContent +=		"</tr>";
					}
					
					pageContent += 		"</table>"
								+	"</div>";
					
					//시트 데이터
					pageContent += 	"<h4 onclick=showDisplay(\""+ dataSet.id +"_sheetDataAll\")> " + getText("message_checkMemory_112", "4. 전체 데이터") + " </h4>"
								+ 	"<div class=\"DataSheet\" id=\"" + dataSet.id + "_sheetDataAll\" name=\"" + dataSet.id + "_sheetDataAll\" tabname=\"" + getText("message_checkMemory_111", "데이터셋 데이터") + "\" style=\"display :none; width: 100%;overflow-x: scroll;\">"
								+		"<table style=\"width:100%\">"
								+			"<tr>";
	
					for(var key in dataSet.colInfos){
						var colInfo = dataSet.colInfos[key];
					    if (typeof(colInfo) == "function" ) continue;
						pageContent +=			"<td class=\"lColHead\">" + colInfo.id +"</td>";
					}
					
					pageContent +=			"<td class=\"lColHead\">[RowType]</td>";
					pageContent +=			"<td class=\"lColHead\">[filterd]</td>";
					pageContent +=			"<td class=\"lColHead\">[selected]</td>";
					pageContent += 			"</tr>";
					
					
					for (var i=0; i < dataSet.buffer.length; i++){
					    var record = dataSet.buffer[i];
					    
	    				pageContent +=		"<tr>";
	    				for(var key in dataSet.colInfos){
	    				    if (typeof(dataSet.colInfos[key]) == "function" ) continue;
	    					pageContent +=		"<td>" + record.values[key] + "</td>";
	    				}
	    				pageContent +=		"<td>" + record.RowType + "</td>";
	    				pageContent +=		"<td>" + record._filterd + "</td>";
	    				pageContent +=		"<td>" + record._selected + "</td>";
	    				pageContent +=		"</tr>";
					}
					
					pageContent += 		"</table>"
								+	"</div>";
	
	
					//원본 데이터
					pageContent += 	"<h4 onclick=showDisplay(\""+ dataSet.id +"_sheetDataOrg\")> " + getText("message_checkMemory_113", "5. 원본 데이터") + " </h4>"
								+ 	"<div class=\"DataSheet\" id=\"" + dataSet.id + "_sheetDataOrg\" name=\"" + dataSet.id + "_sheetDataOrg\" tabname=\"" + getText("message_checkMemory_111", "데이터셋 데이터") + "\" style=\"display :none; width: 100%;overflow-x: scroll;\">"
								+		"<table style=\"width:100%\">"
								+			"<tr>";
	
					for(var key in dataSet.colInfos){
						var colInfo = dataSet.colInfos[key];
					    if (typeof(colInfo) == "function" ) continue;
						pageContent +=			"<td class=\"lColHead\">" + colInfo.id +"</td>";
					}
					
					pageContent +=			"<td class=\"lColHead\">[RowType]</td>";
					pageContent += 			"</tr>";
					
					
					for (var i=0; i < dataSet.OriginBuffer.length; i++){
					    var record = dataSet.OriginBuffer[i];
					    
	    				pageContent +=		"<tr>";
	    				for(var key in dataSet.colInfos){
	    				    if (typeof(dataSet.colInfos[key]) == "function" ) continue;
	    					pageContent +=		"<td>" + record.values[key] + "</td>";
	    				}
	    				pageContent +=		"<td>" + record.RowType + "</td>";
	    				pageContent +=		"</tr>";
					}
					
					pageContent += 		"</table>"
								+	"</div>";
	
	
					pageContent += 	"</div><br>";
	
				}
			}
			
			
			//팝업창 풋터
			//팝업창의 body, html 태그를 닫는다.
			pageContent += "</body></html>";

			//팝업창 호출 및 데이터 입력
			//팝업창을 열고 만든 html 태그를 입력한다.
			var OpenWin;
		    OpenWin=window.open(" ","open1", "width=850px, height=700px, scrollbars=1");
		    OpenWin.document.open();
		    OpenWin.document.write(pageContent);
		    OpenWin.document.close();
		}
	    
	    // [ctrl] + [m]
	    setEventHandler(document, "dblclick", checkMemory);
var contextMenuObj;
var MSIE = navigator.userAgent.indexOf('MSIE')?true:false;
var navigatorVersion = navigator.appVersion.replace(/.*?MSIE (\d\.\d).*/g,'$1')/1;  
var activeContextMenuItem = false;
var preoffsetHeight = 0;
var preoffsetWidth = 0;
var copyoffsetHeight = 0;
var copyoffsetWidth = 0;

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function highlightContextMenuItem() {
    this.className='contextMenuHighlighted';
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function deHighlightContextMenuItem() {
    this.className='';
};

/**
 * @description	미결
 * @name		context#showContextMenu
 * @event
 * @returns		{Boolean}
 */
function showContextMenu(e) {
    if(navigator.userAgent.indexOf('Firefox') >= 0){
        em = e.target;
        e.preventDefault();
    } else {
        em = e.srcElement;
        e.returnValue = false;
    }
    
	while (em.tagName != "TD" && em.tagName != "BODY") em = em.parentNode;
	if (em.tagName != "TD" || em.parentNode.getAttribute("id") != "Editor")	return false;

    contextMenuSource = this;
    if(activeContextMenuItem)activeContextMenuItem.className='';
    //if(document.all)e = event;
    var xPos = e.clientX;
    if(xPos + contextMenuObj.offsetWidth > (document.documentElement.offsetWidth-20)){
        xPos = xPos + (document.documentElement.offsetWidth - (xPos + contextMenuObj.offsetWidth)) - 20; 
    }
  
    var yPos = e.clientY;
    if(window.document.body.scrollTop > 0) {
        yPos = (window.screen.Height) ? e.clientY + window.document.body.scrollTop -20 : e.clientY -20;
    } else if (window.pageYOffset) {
        yPos = (window.pageYOffset > 0) ? e.clientY + window.pageYOffset -20 : e.clientY -20;
    } else { yPos = e.clientY -20; }
    
    var winH = 0;
    if (navigator.appName.indexOf("Microsoft")!=-1) {
        winH = window.offsetHeight;
    } else {
	    winH = window.innerHeight;
    }
    
    var offset = document.getElementsByName("Editer")[0];
	var offsetHeight = 0;
	var offsetWidth = 0;
	
	while (offset) {
		offsetHeight += offset.offsetTop;
		offsetWidth += offset.offsetLeft;
		offset = offset.offsetParent;
	}
	
    var windowH = parent.document.documentElement.clientHeight;
    //var windowH = document.getElementsByTagName("body")[0].clientHeight;
    var editorH = document.getElementsByName("Editer")[0].clientHeight;
    var focusH = e.clientY;
    var contextH = 251;
    
    if (copyoffsetHeight != offsetHeight) {
    	preoffsetHeight += (offsetHeight - copyoffsetHeight);
    }
    
    if (copyoffsetWidth != offsetWidth) {
    	preoffsetWidth += (offsetWidth - copyoffsetWidth);
    }
    
    //alert(focusH + " : " + editorH + " : " + windowH + " : " + offsetHeight + " : " + e.offsetY + " : " + yPos);
    //alert(offsetHeight + " : " + copyoffsetHeight + " : " + preoffsetHeight + " : " + offsetWidth + " : " + copyoffsetWidth + " : " + preoffsetWidth);
    if ((windowH-offsetHeight) < (focusH + contextH)) {
	    contextMenuObj.style.left = xPos + preoffsetWidth + 'px';
	    contextMenuObj.style.top = (yPos + 85 - contextH) + preoffsetHeight + 'px';
	    contextMenuObj.style.display='block';
    } else {
	    contextMenuObj.style.left = xPos + preoffsetWidth + 'px';
	    contextMenuObj.style.top = yPos + 65 + preoffsetHeight + 'px';
	    contextMenuObj.style.display='block';
    }
    
    copyoffsetHeight = offsetHeight;
    copyoffsetWidth = offsetWidth;
  
    return false; 
};

/**
 * @description	미결
 * @name		context#hideContextMenu
 * @event
 * @returns		{Undefined}
 */
function hideContextMenu(e) {
    //if(document.all) e = event;
    if(e.button==0 && !MSIE){
        
    }else{
        contextMenuObj.style.display='none';
    }
};

/**
 * @description	미결
 * @returns		{Undefined}
 * @example		미결
 */
function initContextMenu() {
    contextMenuObj = document.getElementById('contextMenu');
    contextMenuObj.style.display = 'block';
    var menuItems = contextMenuObj.getElementsByTagName('LI');
    for(var no=0;no<menuItems.length;no++){
        var aTag = menuItems[no].getElementsByTagName('A')[0];
        
        var img = menuItems[no].getElementsByTagName('IMG')[0];
        var hr = menuItems[no].getElementsByTagName('hr')[0];
        
        if (aTag) {
	        menuItems[no].onmouseover = highlightContextMenuItem;
	        menuItems[no].onmouseout = deHighlightContextMenuItem;
        }
        
        if(img){
            var div = document.createElement('DIV');
            div.className = 'imageBox';
            div.appendChild(img);
            
            if(MSIE && navigatorVersion<6){
                aTag.style.paddingLeft = '0px';
            }
            
            var divTxt = document.createElement('DIV'); 
            divTxt.className='itemTxt';
            divTxt.innerHTML = aTag.innerHTML;
            
            aTag.innerHTML = '';
            aTag.appendChild(div);
            aTag.appendChild(divTxt);
            if(MSIE && navigatorVersion<6){
                div.style.position = 'absolute';
                div.style.left = '2px';
                divTxt.style.paddingLeft = '15px';
            }
            
            if(!document.all){
                var clearDiv = document.createElement('DIV');
                clearDiv.style.clear = 'both';
                aTag.appendChild(clearDiv);     
            }
        } else if(hr) {
        	/*if(MSIE && navigatorVersion<6){
        		hr.style.paddingLeft = '15px';
        		hr.style.width = (hr.offsetWidth - 30) + 'px';
            }else{
            	hr.style.paddingLeft = '30px';
            	hr.style.width = (hr.offsetWidth) + 'px';
            }*/
        } else{
            if(MSIE && navigatorVersion<6){
                aTag.style.paddingLeft = '15px';
                aTag.style.width = (aTag.offsetWidth - 30) + 'px';
            }else{
                aTag.style.paddingLeft = '30px';
                aTag.style.width = (aTag.offsetWidth) + 'px';
            }
        }
    }

    contextMenuObj.style.display = 'none';      
};


